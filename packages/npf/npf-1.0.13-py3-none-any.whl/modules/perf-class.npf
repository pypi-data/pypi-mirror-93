%info
Advanced version of perf-functions

Use the perf-class python program to aggregate using a dictionary. See https://github.com/tbarbette/perf-class

%config
graph_result_as_variable+={PERF-(.*):Perf}

%variables
PERF_OPT=
PERF_TIME?=4
PERF_EVENT=cycles
PERF_MIN=1
PERF_CLASS_MAP=../libs/perf/kernel.map
PERF_STACK_MAX=8
PERF_FREQ=1000
PERF_CLASS_OPT?=

%sendfile ../libs/perf/

%script sudo=true autokill=false deps=perf-class
trap : INT
sh script.sh

%file script.sh 
echo "Launching perf record..."
trap : INT
perf record -r 80 -F $PERF_FREQ -a --call-graph dwarf $PERF_OPT -o perf.data -e $PERF_EVENT sleep $PERF_TIME
perf script > perf.script

%exit
ls
python3 ${NPF_ROOT}/build/perf-class/perf-class.py perf.script --map ${PERF_CLASS_MAP} --min ${PERF_MIN} --stack-max ${PERF_STACK_MAX} --show-failed ${PERF_CLASS_OPT} > perf.list
echo "Script finished"
cat perf.list | while read line; do
    sym=$(echo $line | cut -d';' -f1 | xargs)
    pc=$(echo $line | cut -d';' -f2 | xargs | grep -oE '[0-9.]*' )
    roundpc=$(echo $pc | grep -oE '[0-9]*' | head -n 1)
    if [ "$sym" != "" ] ; then
        echo "RESULT-PERF-$(echo $sym | sed 's/[^0-9a-zA-Z_~()]*//g' ) $pc"
    fi
done
echo "Finished"
