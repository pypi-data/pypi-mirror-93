      subroutine LMEMonitorCancel(a,z)
      use slepclmedef
       LME a ! LME
        PetscErrorCode z
       end subroutine LMEMonitorCancel
      subroutine LMEConvergedReasonViewFromOptions(a,z)
      use slepclmedef
       LME a ! LME
        PetscErrorCode z
       end subroutine LMEConvergedReasonViewFromOptions
      subroutine LMECreate(a,b,z)
      use slepclmedef
      MPI_Comm a ! MPI_Comm
       LME b ! LME
        PetscErrorCode z
       end subroutine LMECreate
      subroutine LMEReset(a,z)
      use slepclmedef
       LME a ! LME
        PetscErrorCode z
       end subroutine LMEReset
      subroutine LMEDestroy(a,z)
      use slepclmedef
       LME a ! LME
        PetscErrorCode z
       end subroutine LMEDestroy
      subroutine LMESetBV(a,b,z)
      use slepclmedef
       LME a ! LME
       BV b ! BV
        PetscErrorCode z
       end subroutine LMESetBV
      subroutine LMEGetBV(a,b,z)
      use slepclmedef
       LME a ! LME
       BV b ! BV
        PetscErrorCode z
       end subroutine LMEGetBV
      subroutine LMESetUp(a,z)
      use slepclmedef
       LME a ! LME
        PetscErrorCode z
       end subroutine LMESetUp
      subroutine LMESetCoefficients(a,b,c,d,e,z)
      use slepclmedef
       LME a ! LME
       Mat b ! Mat
       Mat c ! Mat
       Mat d ! Mat
       Mat e ! Mat
        PetscErrorCode z
       end subroutine LMESetCoefficients
      subroutine LMEGetCoefficients(a,b,c,d,e,z)
      use slepclmedef
       LME a ! LME
       Mat b ! Mat
       Mat c ! Mat
       Mat d ! Mat
       Mat e ! Mat
        PetscErrorCode z
       end subroutine LMEGetCoefficients
      subroutine LMESetRHS(a,b,z)
      use slepclmedef
       LME a ! LME
       Mat b ! Mat
        PetscErrorCode z
       end subroutine LMESetRHS
      subroutine LMEGetRHS(a,b,z)
      use slepclmedef
       LME a ! LME
       Mat b ! Mat
        PetscErrorCode z
       end subroutine LMEGetRHS
      subroutine LMESetSolution(a,b,z)
      use slepclmedef
       LME a ! LME
       Mat b ! Mat
        PetscErrorCode z
       end subroutine LMESetSolution
      subroutine LMEGetSolution(a,b,z)
      use slepclmedef
       LME a ! LME
       Mat b ! Mat
        PetscErrorCode z
       end subroutine LMEGetSolution
      subroutine LMEAllocateSolution(a,b,z)
      use slepclmedef
       LME a ! LME
       PetscInt b ! PetscInt
        PetscErrorCode z
       end subroutine LMEAllocateSolution
      subroutine LMESetFromOptions(a,z)
      use slepclmedef
       LME a ! LME
        PetscErrorCode z
       end subroutine LMESetFromOptions
      subroutine LMESetProblemType(a,b,z)
      use slepclmedef
       LME a ! LME
       LMEProblemType b ! LMEProblemType
        PetscErrorCode z
       end subroutine LMESetProblemType
      subroutine LMEGetProblemType(a,b,z)
      use slepclmedef
       LME a ! LME
       LMEProblemType b ! LMEProblemType
        PetscErrorCode z
       end subroutine LMEGetProblemType
      subroutine LMESetTolerances(a,b,c,z)
      use slepclmedef
       LME a ! LME
       PetscReal b ! PetscReal
       PetscInt c ! PetscInt
        PetscErrorCode z
       end subroutine LMESetTolerances
      subroutine LMEGetDimensions(a,b,z)
      use slepclmedef
       LME a ! LME
       PetscInt b ! PetscInt
        PetscErrorCode z
       end subroutine LMEGetDimensions
      subroutine LMESetDimensions(a,b,z)
      use slepclmedef
       LME a ! LME
       PetscInt b ! PetscInt
        PetscErrorCode z
       end subroutine LMESetDimensions
      subroutine LMESetErrorIfNotConverged(a,b,z)
      use slepclmedef
       LME a ! LME
       PetscBool b ! PetscBool
        PetscErrorCode z
       end subroutine LMESetErrorIfNotConverged
      subroutine LMEGetErrorIfNotConverged(a,b,z)
      use slepclmedef
       LME a ! LME
       PetscBool b ! PetscBool
        PetscErrorCode z
       end subroutine LMEGetErrorIfNotConverged
      subroutine LMESolve(a,z)
      use slepclmedef
       LME a ! LME
        PetscErrorCode z
       end subroutine LMESolve
      subroutine LMEGetIterationNumber(a,b,z)
      use slepclmedef
       LME a ! LME
       PetscInt b ! PetscInt
        PetscErrorCode z
       end subroutine LMEGetIterationNumber
      subroutine LMEGetConvergedReason(a,b,z)
      use slepclmedef
       LME a ! LME
       LMEConvergedReason b ! LMEConvergedReason
        PetscErrorCode z
       end subroutine LMEGetConvergedReason
      subroutine LMEGetErrorEstimate(a,b,z)
      use slepclmedef
       LME a ! LME
       PetscReal b ! PetscReal
        PetscErrorCode z
       end subroutine LMEGetErrorEstimate
      subroutine LMEComputeError(a,b,z)
      use slepclmedef
       LME a ! LME
       PetscReal b ! PetscReal
        PetscErrorCode z
       end subroutine LMEComputeError
