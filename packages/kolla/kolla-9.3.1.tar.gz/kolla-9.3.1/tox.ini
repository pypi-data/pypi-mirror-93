[tox]
minversion = 2.5.0
skipsdist = True
envlist = pep8,py27,py37,pypy

[testenv]
usedevelop=True
whitelist_externals = find
                      rm
install_command = pip install {opts} {packages}
deps = -c{env:UPPER_CONSTRAINTS_FILE:https://releases.openstack.org/constraints/upper/train}
       -r{toxinidir}/requirements.txt
       -r{toxinidir}/test-requirements.txt
passenv = http_proxy HTTP_PROXY https_proxy HTTPS_PROXY no_proxy NO_PROXY
          OS_STDOUT_CAPTURE OS_STDERR_CAPTURE OS_LOG_CAPTURE OS_TEST_TIMEOUT
          PYTHON OS_TEST_PATH LISTOPT IDOPTION
commands =
  find . -type f -name "*.py[c|o]" -delete -o -type l -name "*.py[c|o]" -delete
  find . -type d -name "__pycache__" -delete
  stestr run {posargs}
  stestr slowest

[testenv:debug]
commands = oslo_debug_helper -t kolla/tests {posargs}

[testenv:cover]
basepython = python3
setenv = VIRTUAL_ENV={envdir}
         NOSE_WITH_COVERAGE=1
         NOSE_COVER_BRANCHES=1
         NOSE_COVER_HTML=1
         NOSE_COVER_HTML_DIR={toxinidir}/cover
         PYTHON=coverage run --source kolla --parallel-mode
commands =
    stestr run {posargs}
    coverage combine
    coverage html -d cover
    coverage xml -o cover/coverage.xml
    coverage report --show-missing

[testenv:pep8]
basepython = python3
deps =
    {[testenv]deps}
    yamllint
commands =
  {toxinidir}/tools/run-bashate.sh
  flake8 {posargs}
  {toxinidir}/tools/validate-all-dockerfiles.sh
  python {toxinidir}/tools/validate-all-file.py
  bandit --skip B303 -r docker kolla tests tools
  yamllint -s .

[testenv:bandit]
# B303: Use of insecure MD2, MD4, MD5, or SHA1 hash function.
commands = bandit --skip B303 -r docker kolla tests tools

[testenv:venv]
basepython = python3
deps =
    -c{env:UPPER_CONSTRAINTS_FILE:https://releases.openstack.org/constraints/upper/train}
    -r{toxinidir}/test-requirements.txt
    -r{toxinidir}/doc/requirements.txt
commands = {posargs}

[testenv:docs]
basepython = python3
deps =
    -c{env:UPPER_CONSTRAINTS_FILE:https://releases.openstack.org/constraints/upper/train}
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/doc/requirements.txt

commands =
  rm -rf doc/build
  doc8 doc
  sphinx-build -W --keep-going -b html doc/source doc/build/html

[testenv:pdf-docs]
basepython = python3
whitelist_externals = make
deps = {[testenv:docs]deps}
commands =
  sphinx-build -W --keep-going -b latex doc/source doc/build/pdf
  make -C doc/build/pdf

[testenv:build-centos-binary]
whitelist_externals = find
                      bash
setenv =
  DOCKER_BUILD_TEST=1
commands =
  find . -type f -name "*.py[c|o]" -delete -o -type l -name "*.py[c|o]" -delete
  bash -c "if [ ! -d .stestr ]; then stestr init; fi"
  stestr run test_build.BuildTestCentosBinary

[testenv:build-centos-source]
whitelist_externals = find
                      bash
setenv =
  DOCKER_BUILD_TEST=1
commands =
  find . -type f -name "*.py[c|o]" -delete -o -type l -name "*.py[c|o]" -delete
  bash -c "if [ ! -d .stestr ]; then stestr init; fi"
  stestr run test_build.BuildTestCentosSource

[testenv:build-centos8-binary]
whitelist_externals = find
                      bash
setenv =
  DOCKER_BUILD_TEST=1
commands =
  find . -type f -name "*.py[c|o]" -delete -o -type l -name "*.py[c|o]" -delete
  bash -c "if [ ! -d .stestr ]; then stestr init; fi"
  stestr run test_build.BuildTestCentos8Binary

[testenv:build-centos8-source]
whitelist_externals = find
                      bash
setenv =
  DOCKER_BUILD_TEST=1
commands =
  find . -type f -name "*.py[c|o]" -delete -o -type l -name "*.py[c|o]" -delete
  bash -c "if [ ! -d .stestr ]; then stestr init; fi"
  stestr run test_build.BuildTestCentos8Source

[testenv:build-ubuntu-binary]
whitelist_externals = find
                      bash
setenv =
  DOCKER_BUILD_TEST=1
commands =
  find . -type f -name "*.py[c|o]" -delete -o -type l -name "*.py[c|o]" -delete
  bash -c "if [ ! -d .stestr ]; then stestr init; fi"
  stestr run test_build.BuildTestUbuntuBinary

[testenv:build-ubuntu-source]
whitelist_externals = find
                      bash
setenv =
  DOCKER_BUILD_TEST=1
commands =
  find . -type f -name "*.py[c|o]" -delete -o -type l -name "*.py[c|o]" -delete
  bash -c "if [ ! -d .stestr ]; then stestr init; fi"
  stestr run test_build.BuildTestUbuntuSource

[testenv:build-debian-binary]
whitelist_externals = find
                      bash
setenv =
  DOCKER_BUILD_TEST=1
commands =
  find . -type f -name "*.py[c|o]" -delete -o -type l -name "*.py[c|o]" -delete
  bash -c "if [ ! -d .stestr ]; then stestr init; fi"
  stestr run test_build.BuildTestDebianBinary

[testenv:build-debian-source]
whitelist_externals = find
                      bash
setenv =
  DOCKER_BUILD_TEST=1
commands =
  find . -type f -name "*.py[c|o]" -delete -o -type l -name "*.py[c|o]" -delete
  bash -c "if [ ! -d .stestr ]; then stestr init; fi"
  stestr run test_build.BuildTestDebianSource

[testenv:genconfig]
whitelist_externals = which
commands=
  oslo-config-generator --config-file etc/oslo-config-generator/kolla-build.conf

[testenv:releasenotes]
basepython = python3
deps = -r{toxinidir}/doc/requirements.txt
commands =
  rm -rf releasenotes/build
  sphinx-build -a -E -W -d releasenotes/build/doctrees --keep-going -b html releasenotes/source releasenotes/build/html

[testenv:bindep]
basepython = python3
# Do not install any requirements. We want this to be fast and work even if
# system dependencies are missing, since it's used to tell you what system
# dependencies are missing! This also means that bindep must be installed
# separately, outside of the requirements files.
deps = bindep
commands = bindep test

[flake8]
show-source = True
enable-extensions = H203,H106
exclude=.eggs,.git,.tox,doc

[hacking]
local-check-factory = kolla.hacking.checks.factory

[testenv:lower-constraints]
basepython = python3
deps =
  -c{toxinidir}/lower-constraints.txt
  -r{toxinidir}/test-requirements.txt
  -r{toxinidir}/requirements.txt
