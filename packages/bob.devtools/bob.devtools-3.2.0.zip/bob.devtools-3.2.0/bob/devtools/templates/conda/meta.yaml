{% set name = '(( name ))' %}
{% set project_dir = environ.get('RECIPE_DIR') + '/..' %}

package:
  name: {{ name }}
  version: {{ environ.get('BOB_PACKAGE_VERSION', '0.0.1') }}

build:
  number: {{ environ.get('BOB_BUILD_NUMBER', 0) }}
  run_exports:
    - {{ pin_subpackage(name) }}
  script:
    - cd {{ project_dir }}
    {% if environ.get('BUILD_EGG') %}
    - python setup.py sdist --formats=zip
    {% endif %}
    - python setup.py install --single-version-externally-managed --record record.txt
    # installs the documentation source, readme to share/doc so it is available
    # during test time
    - install -d "${PREFIX}/share/doc/{{ name }}"
    - cp -R README.rst requirements.txt doc "${PREFIX}/share/doc/{{ name }}/"

requirements:
  # place your build dependencies before the 'host' section
  host:
    - python {{ python }}
    - setuptools {{ setuptools }}
    - bob.extension
    # place your other host dependencies here
  run:
    - python
    - setuptools
    # place other runtime dependencies here (same as requirements.txt)

test:
  imports:
    - {{ name }}
  commands:
    # runs tests for package only, report only what is in the package
    # creates html and xml reports and place them in specific directories
    - pytest --verbose --cov {{ name }} --cov-report term-missing --cov-report html:{{ project_dir }}/sphinx/coverage --cov-report xml:{{ project_dir }}/coverage.xml --pyargs {{ name }}
    - sphinx-build -aEW {{ project_dir }}/doc {{ project_dir }}/sphinx
    - sphinx-build -aEb doctest {{ project_dir }}/doc sphinx
    - conda inspect linkages -p $PREFIX {{ name }}  # [not win]
    - conda inspect objects -p $PREFIX {{ name }}  # [osx]
  requires:
    - bob-devel {{ bob_devel }}.*(% if group == 'beat' %)
    - beat-devel {{ beat_devel }}.*(% endif %)
    - pytest
    - pytest-cov
    - coverage
    - sphinx
    - sphinx_rtd_theme
    # extend this list with further test-time-only dependencies

about:
  summary: (( title ))
  home: https://www.idiap.ch/software/(( group ))/
  license: (% if license == 'gplv3' %)GNU General Public License v3 (GPLv3)(% else %)BSD 3-Clause(% endif %)
  license_family: (% if license == 'gplv3' %)GPL(% else %)BSD(% endif %)
