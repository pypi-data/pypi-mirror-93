# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _MorphologicalContourInterpolationPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMorphologicalContourInterpolatorPython
else:
    import _itkMorphologicalContourInterpolatorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkMorphologicalContourInterpolatorPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkMorphologicalContourInterpolatorPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBAPixelPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkMorphologicalContourInterpolatorISS3_New():
    return itkMorphologicalContourInterpolatorISS3.New()

class itkMorphologicalContourInterpolatorISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkMorphologicalContourInterpolatorISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_Clone)
    SetLabel = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_SetLabel)
    GetLabel = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_GetLabel)
    SetAxis = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_SetAxis)
    GetAxis = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_GetAxis)
    SetHeuristicAlignment = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_SetHeuristicAlignment)
    GetHeuristicAlignment = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_GetHeuristicAlignment)
    SetUseDistanceTransform = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_SetUseDistanceTransform)
    GetUseDistanceTransform = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_GetUseDistanceTransform)
    SetUseCustomSlicePositions = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_SetUseCustomSlicePositions)
    GetUseCustomSlicePositions = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_GetUseCustomSlicePositions)
    SetUseBallStructuringElement = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_SetUseBallStructuringElement)
    GetUseBallStructuringElement = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_GetUseBallStructuringElement)
    DetermineSliceOrientations = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_DetermineSliceOrientations)
    ClearLabeledSliceIndices = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_ClearLabeledSliceIndices)
    SetLabeledSliceIndices = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_SetLabeledSliceIndices)
    GetLabeledSliceIndices = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_GetLabeledSliceIndices)
    __swig_destroy__ = _itkMorphologicalContourInterpolatorPython.delete_itkMorphologicalContourInterpolatorISS3
    cast = _swig_new_static_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalContourInterpolatorISS3

        Create a new object of the class itkMorphologicalContourInterpolatorISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalContourInterpolatorISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalContourInterpolatorISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalContourInterpolatorISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalContourInterpolatorISS3 in _itkMorphologicalContourInterpolatorPython:
_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_swigregister(itkMorphologicalContourInterpolatorISS3)
itkMorphologicalContourInterpolatorISS3___New_orig__ = _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3___New_orig__
itkMorphologicalContourInterpolatorISS3_cast = _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorISS3_cast


def itkMorphologicalContourInterpolatorIUC3_New():
    return itkMorphologicalContourInterpolatorIUC3.New()

class itkMorphologicalContourInterpolatorIUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkMorphologicalContourInterpolatorIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_Clone)
    SetLabel = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_SetLabel)
    GetLabel = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_GetLabel)
    SetAxis = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_SetAxis)
    GetAxis = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_GetAxis)
    SetHeuristicAlignment = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_SetHeuristicAlignment)
    GetHeuristicAlignment = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_GetHeuristicAlignment)
    SetUseDistanceTransform = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_SetUseDistanceTransform)
    GetUseDistanceTransform = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_GetUseDistanceTransform)
    SetUseCustomSlicePositions = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_SetUseCustomSlicePositions)
    GetUseCustomSlicePositions = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_GetUseCustomSlicePositions)
    SetUseBallStructuringElement = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_SetUseBallStructuringElement)
    GetUseBallStructuringElement = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_GetUseBallStructuringElement)
    DetermineSliceOrientations = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_DetermineSliceOrientations)
    ClearLabeledSliceIndices = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_ClearLabeledSliceIndices)
    SetLabeledSliceIndices = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_SetLabeledSliceIndices)
    GetLabeledSliceIndices = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_GetLabeledSliceIndices)
    __swig_destroy__ = _itkMorphologicalContourInterpolatorPython.delete_itkMorphologicalContourInterpolatorIUC3
    cast = _swig_new_static_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalContourInterpolatorIUC3

        Create a new object of the class itkMorphologicalContourInterpolatorIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalContourInterpolatorIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalContourInterpolatorIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalContourInterpolatorIUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalContourInterpolatorIUC3 in _itkMorphologicalContourInterpolatorPython:
_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_swigregister(itkMorphologicalContourInterpolatorIUC3)
itkMorphologicalContourInterpolatorIUC3___New_orig__ = _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3___New_orig__
itkMorphologicalContourInterpolatorIUC3_cast = _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUC3_cast


def itkMorphologicalContourInterpolatorIUS3_New():
    return itkMorphologicalContourInterpolatorIUS3.New()

class itkMorphologicalContourInterpolatorIUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkMorphologicalContourInterpolatorIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_Clone)
    SetLabel = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_SetLabel)
    GetLabel = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_GetLabel)
    SetAxis = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_SetAxis)
    GetAxis = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_GetAxis)
    SetHeuristicAlignment = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_SetHeuristicAlignment)
    GetHeuristicAlignment = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_GetHeuristicAlignment)
    SetUseDistanceTransform = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_SetUseDistanceTransform)
    GetUseDistanceTransform = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_GetUseDistanceTransform)
    SetUseCustomSlicePositions = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_SetUseCustomSlicePositions)
    GetUseCustomSlicePositions = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_GetUseCustomSlicePositions)
    SetUseBallStructuringElement = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_SetUseBallStructuringElement)
    GetUseBallStructuringElement = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_GetUseBallStructuringElement)
    DetermineSliceOrientations = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_DetermineSliceOrientations)
    ClearLabeledSliceIndices = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_ClearLabeledSliceIndices)
    SetLabeledSliceIndices = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_SetLabeledSliceIndices)
    GetLabeledSliceIndices = _swig_new_instance_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_GetLabeledSliceIndices)
    __swig_destroy__ = _itkMorphologicalContourInterpolatorPython.delete_itkMorphologicalContourInterpolatorIUS3
    cast = _swig_new_static_method(_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalContourInterpolatorIUS3

        Create a new object of the class itkMorphologicalContourInterpolatorIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalContourInterpolatorIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalContourInterpolatorIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalContourInterpolatorIUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalContourInterpolatorIUS3 in _itkMorphologicalContourInterpolatorPython:
_itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_swigregister(itkMorphologicalContourInterpolatorIUS3)
itkMorphologicalContourInterpolatorIUS3___New_orig__ = _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3___New_orig__
itkMorphologicalContourInterpolatorIUS3_cast = _itkMorphologicalContourInterpolatorPython.itkMorphologicalContourInterpolatorIUS3_cast


from itk.support import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def morphological_contour_interpolator(*args, **kwargs):
    """Procedural interface for MorphologicalContourInterpolator"""
    import itk

    instance = itk.MorphologicalContourInterpolator.New(*args, **kwargs)
    return instance.__internal_call__()


def morphological_contour_interpolator_init_docstring():
    import itk
    from itk.support import itkTemplate
    from itk.support import itkHelpers

    if isinstance(itk.MorphologicalContourInterpolator, itkTemplate.itkTemplate):
        filter_object = itk.MorphologicalContourInterpolator.values()[0]
    else:
        filter_object = itk.MorphologicalContourInterpolator

    morphological_contour_interpolator.__doc__ = filter_object.__doc__
    morphological_contour_interpolator.__doc__ += "\n Args are Input(s) to the filter.\n"
    morphological_contour_interpolator.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.MorphologicalContourInterpolator, itkTemplate.itkTemplate):
        morphological_contour_interpolator.__doc__ += itkHelpers.filter_args(filter_object)[0]
        morphological_contour_interpolator.__doc__ += "\n"
        morphological_contour_interpolator.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        morphological_contour_interpolator.__doc__ += "".join(
            [
                "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
                for item in dir(filter_object)
                if item.startswith("Set")
            ]
        )




