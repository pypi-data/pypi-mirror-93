# coding: utf-8

"""
    gnomock

    `gnomock` is an HTTP wrapper for [Gnomock](https://github.com/orlangure/gnomock) integration and end-to-end testing toolkit. It allows to use Gnomock outside of Go ecosystem. Not all Gnomock features exist in this wrapper, but official presets, as well as basic general configuration, are supported.   # noqa: E501

    The version of the OpenAPI document: 1.4.7
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from gnomock.configuration import Configuration


class Mongo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'data_path': 'str',
        'user': 'str',
        'password': 'str',
        'version': 'str'
    }

    attribute_map = {
        'data_path': 'data_path',
        'user': 'user',
        'password': 'password',
        'version': 'version'
    }

    def __init__(self, data_path=None, user=None, password=None, version='latest', local_vars_configuration=None):  # noqa: E501
        """Mongo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._data_path = None
        self._user = None
        self._password = None
        self._version = None
        self.discriminator = None

        if data_path is not None:
            self.data_path = data_path
        if user is not None:
            self.user = user
        if password is not None:
            self.password = password
        if version is not None:
            self.version = version

    @property
    def data_path(self):
        """Gets the data_path of this Mongo.  # noqa: E501

        Path to folder to setup initial container state. Each top level folder maps to a database, every separate file under it is a collection, and every line is a document in that collection.   # noqa: E501

        :return: The data_path of this Mongo.  # noqa: E501
        :rtype: str
        """
        return self._data_path

    @data_path.setter
    def data_path(self, data_path):
        """Sets the data_path of this Mongo.

        Path to folder to setup initial container state. Each top level folder maps to a database, every separate file under it is a collection, and every line is a document in that collection.   # noqa: E501

        :param data_path: The data_path of this Mongo.  # noqa: E501
        :type: str
        """

        self._data_path = data_path

    @property
    def user(self):
        """Gets the user of this Mongo.  # noqa: E501

        Username to create inside the container.  # noqa: E501

        :return: The user of this Mongo.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Mongo.

        Username to create inside the container.  # noqa: E501

        :param user: The user of this Mongo.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def password(self):
        """Gets the password of this Mongo.  # noqa: E501

        Password to set for the created user.  # noqa: E501

        :return: The password of this Mongo.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Mongo.

        Password to set for the created user.  # noqa: E501

        :param password: The password of this Mongo.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def version(self):
        """Gets the version of this Mongo.  # noqa: E501

        Docker image tag (version)  # noqa: E501

        :return: The version of this Mongo.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Mongo.

        Docker image tag (version)  # noqa: E501

        :param version: The version of this Mongo.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Mongo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Mongo):
            return True

        return self.to_dict() != other.to_dict()
