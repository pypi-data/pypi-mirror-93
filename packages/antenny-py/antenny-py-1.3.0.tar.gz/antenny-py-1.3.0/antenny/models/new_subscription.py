# coding: utf-8

"""
    Antenny API

    This is an api that allows you to interact with the Antenny platform. It allows you to manage your clients and subscriptions.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: admin@antenny.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from antenny.configuration import Configuration


class NewSubscription(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'customer_id': 'str',
        'region': 'str',
        'resource': 'Resource',
        'endpoint': 'Endpoint'
    }

    attribute_map = {
        'name': 'name',
        'customer_id': 'customerId',
        'region': 'region',
        'resource': 'resource',
        'endpoint': 'endpoint'
    }

    def __init__(self, name=None, customer_id=None, region=None, resource=None, endpoint=None, local_vars_configuration=None):  # noqa: E501
        """NewSubscription - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._customer_id = None
        self._region = None
        self._resource = None
        self._endpoint = None
        self.discriminator = None

        if name is not None:
            self.name = name
        self.customer_id = customer_id
        self.region = region
        self.resource = resource
        self.endpoint = endpoint

    @property
    def name(self):
        """Gets the name of this NewSubscription.  # noqa: E501


        :return: The name of this NewSubscription.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NewSubscription.


        :param name: The name of this NewSubscription.  # noqa: E501
        :type name: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 32):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `32`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 3):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `3`")  # noqa: E501

        self._name = name

    @property
    def customer_id(self):
        """Gets the customer_id of this NewSubscription.  # noqa: E501


        :return: The customer_id of this NewSubscription.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this NewSubscription.


        :param customer_id: The customer_id of this NewSubscription.  # noqa: E501
        :type customer_id: str
        """
        if self.local_vars_configuration.client_side_validation and customer_id is None:  # noqa: E501
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def region(self):
        """Gets the region of this NewSubscription.  # noqa: E501


        :return: The region of this NewSubscription.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this NewSubscription.


        :param region: The region of this NewSubscription.  # noqa: E501
        :type region: str
        """
        if self.local_vars_configuration.client_side_validation and region is None:  # noqa: E501
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501
        allowed_values = ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "ap-northeast-1", "ap-northeast-2", "ap-southeast-1", "ap-southeast-2", "eu-central-1", "eu-west-1", "eu-west-2"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and region not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `region` ({0}), must be one of {1}"  # noqa: E501
                .format(region, allowed_values)
            )

        self._region = region

    @property
    def resource(self):
        """Gets the resource of this NewSubscription.  # noqa: E501


        :return: The resource of this NewSubscription.  # noqa: E501
        :rtype: Resource
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this NewSubscription.


        :param resource: The resource of this NewSubscription.  # noqa: E501
        :type resource: Resource
        """
        if self.local_vars_configuration.client_side_validation and resource is None:  # noqa: E501
            raise ValueError("Invalid value for `resource`, must not be `None`")  # noqa: E501

        self._resource = resource

    @property
    def endpoint(self):
        """Gets the endpoint of this NewSubscription.  # noqa: E501


        :return: The endpoint of this NewSubscription.  # noqa: E501
        :rtype: Endpoint
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this NewSubscription.


        :param endpoint: The endpoint of this NewSubscription.  # noqa: E501
        :type endpoint: Endpoint
        """
        if self.local_vars_configuration.client_side_validation and endpoint is None:  # noqa: E501
            raise ValueError("Invalid value for `endpoint`, must not be `None`")  # noqa: E501

        self._endpoint = endpoint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewSubscription):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NewSubscription):
            return True

        return self.to_dict() != other.to_dict()
