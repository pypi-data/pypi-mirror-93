#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Sat Mar  7 09:04:20 2020 by generateDS.py version 2.35.15.
# Python 3.8.1 (v3.8.1:1b293b6006, Dec 18 2019, 14:08:53)  [Clang 6.0 (clang-600.0.57)]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('-o', './python/ship_web_service_schema.py')
#
# Command line arguments:
#   ./schemas/ShipWebServiceSchema.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/.env/bin/generateDS --no-namespace-defs -o "./python/ship_web_service_schema.py" ./schemas/ShipWebServiceSchema.xsd
#
# Current working directory (os.getcwd()):
#   2020-03
#

from six.moves import zip_longest
import os
import sys
import re as re_
import base64
import datetime as datetime_
import decimal as decimal_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
SaveElementTreeNode = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ImportError:
    GenerateDSNamespaceTypePrefixes_ = {}

#
# You can replace the following class definition by defining an
# importable module named "generatedscollector" containing a class
# named "GdsCollector".  See the default class definition below for
# clues about the possible content of that class.
#
try:
    from generatedscollector import GdsCollector as GdsCollector_
except ImportError:

    class GdsCollector_(object):

        def __init__(self, messages=None):
            if messages is None:
                self.messages = []
            else:
                self.messages = messages

        def add_message(self, msg):
            self.messages.append(msg)

        def get_messages(self):
            return self.messages

        def clear_messages(self):
            self.messages = []

        def print_messages(self):
            for msg in self.messages:
                print("Warning: {}".format(msg))

        def write_messages(self, outstream):
            for msg in self.messages:
                outstream.write("Warning: {}\n".format(msg))


#
# The super-class for enum types
#

try:
    from enum import Enum
except ImportError:
    Enum = object

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        __hash__ = object.__hash__
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_parse_string(self, input_data, node=None, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_parse_integer(self, input_data, node=None, input_name=''):
            try:
                ival = int(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires integer value: %s' % exp)
            return ival
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            try:
                value = int(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires integer value')
            return value
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integer valuess')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_parse_float(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires float or double value: %s' % exp)
            return fval_
        def gds_validate_float(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires float value')
            return value
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of float values')
            return values
        def gds_format_decimal(self, input_data, input_name=''):
            return ('%s' % input_data).rstrip('0')
        def gds_parse_decimal(self, input_data, node=None, input_name=''):
            try:
                decimal_value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return decimal_value
        def gds_validate_decimal(self, input_data, node=None, input_name=''):
            try:
                value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return value
        def gds_format_decimal_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_decimal_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    decimal_.Decimal(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of decimal values')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_parse_double(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires double or float value: %s' % exp)
            return fval_
        def gds_validate_double(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires double or float value')
            return value
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(
                        node, 'Requires sequence of double or float values')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_parse_boolean(self, input_data, node=None, input_name=''):
            if input_data in ('true', '1'):
                bval = True
            elif input_data in ('false', '0'):
                bval = False
            else:
                raise_parse_error(node, 'Requires boolean value')
            return bval
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            if input_data not in (True, 1, False, 0, ):
                raise_parse_error(
                    node,
                    'Requires boolean value '
                    '(one of True, 1, False, 0)')
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in (True, 1, False, 0, ):
                    raise_parse_error(
                        node,
                        'Requires sequence of boolean values '
                        '(one of True, 1, False, 0)')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_check_cardinality_(
                self, value, input_name,
                min_occurs=0, max_occurs=1, required=None):
            if value is None:
                length = 0
            elif isinstance(value, list):
                length = len(value)
            else:
                length = 1
            if required is not None :
                if required and length < 1:
                    self.gds_collector_.add_message(
                        "Required value {}{} is missing".format(
                            input_name, self.gds_get_node_lineno_()))
            if length < min_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is below "
                    "the minimum allowed, "
                    "expected at least {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        min_occurs, length))
            elif length > max_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is above "
                    "the maximum allowed, "
                    "expected at most {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        max_occurs, length))
        def gds_validate_builtin_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value, input_name=input_name)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_validate_defined_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            # provide default value in case option --disable-xml is used.
            content = ""
            content = etree_.tostring(node, encoding="unicode")
            return content
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            def excl_select_objs_(obj):
                return (obj[0] != 'parent_object_' and
                        obj[0] != 'gds_collector_')
            if type(self) != type(other):
                return False
            return all(x == y for x, y in zip_longest(
                filter(excl_select_objs_, self.__dict__.items()),
                filter(excl_select_objs_, other.__dict__.items())))
        def __ne__(self, other):
            return not self.__eq__(other)
        # Django ETL transform hooks.
        def gds_djo_etl_transform(self):
            pass
        def gds_djo_etl_transform_db_obj(self, dbobj):
            pass
        # SQLAlchemy ETL transform hooks.
        def gds_sqa_etl_transform(self):
            return 0, None
        def gds_sqa_etl_transform_db_obj(self, dbobj):
            pass
        def gds_get_node_lineno_(self):
            if (hasattr(self, "gds_elementtree_node_") and
                    self.gds_elementtree_node_ is not None):
                return ' near line {}'.format(
                    self.gds_elementtree_node_.sourceline)
            else:
                return ""
    
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
# Set this to false in order to deactivate during export, the use of
# name space prefixes captured from the input document.
UseCapturedNS_ = True
CapturedNsmap_ = {}
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


def encode_str_2_3(instr):
    return instr


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if node is not None:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class ShipmentRequest(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Request=None, Shipment=None, LabelSpecification=None, ReceiptSpecification=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Request = Request
        self.Request_nsprefix_ = None
        self.Shipment = Shipment
        self.Shipment_nsprefix_ = None
        self.LabelSpecification = LabelSpecification
        self.LabelSpecification_nsprefix_ = None
        self.ReceiptSpecification = ReceiptSpecification
        self.ReceiptSpecification_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentRequest.subclass:
            return ShipmentRequest.subclass(*args_, **kwargs_)
        else:
            return ShipmentRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Request(self):
        return self.Request
    def set_Request(self, Request):
        self.Request = Request
    def get_Shipment(self):
        return self.Shipment
    def set_Shipment(self, Shipment):
        self.Shipment = Shipment
    def get_LabelSpecification(self):
        return self.LabelSpecification
    def set_LabelSpecification(self, LabelSpecification):
        self.LabelSpecification = LabelSpecification
    def get_ReceiptSpecification(self):
        return self.ReceiptSpecification
    def set_ReceiptSpecification(self, ReceiptSpecification):
        self.ReceiptSpecification = ReceiptSpecification
    def hasContent_(self):
        if (
            self.Request is not None or
            self.Shipment is not None or
            self.LabelSpecification is not None or
            self.ReceiptSpecification is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentRequest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentRequest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentRequest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Request is not None:
            namespaceprefix_ = self.Request_nsprefix_ + ':' if (UseCapturedNS_ and self.Request_nsprefix_) else ''
            self.Request.export(outfile, level, namespaceprefix_='common:', namespacedef_='', name_='Request', pretty_print=pretty_print)
        if self.Shipment is not None:
            namespaceprefix_ = self.Shipment_nsprefix_ + ':' if (UseCapturedNS_ and self.Shipment_nsprefix_) else ''
            self.Shipment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Shipment', pretty_print=pretty_print)
        if self.LabelSpecification is not None:
            namespaceprefix_ = self.LabelSpecification_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelSpecification_nsprefix_) else ''
            self.LabelSpecification.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LabelSpecification', pretty_print=pretty_print)
        if self.ReceiptSpecification is not None:
            namespaceprefix_ = self.ReceiptSpecification_nsprefix_ + ':' if (UseCapturedNS_ and self.ReceiptSpecification_nsprefix_) else ''
            self.ReceiptSpecification.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReceiptSpecification', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Request':
            obj_ = RequestType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Request = obj_
            obj_.original_tagname_ = 'Request'
        elif nodeName_ == 'Shipment':
            obj_ = ShipmentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Shipment = obj_
            obj_.original_tagname_ = 'Shipment'
        elif nodeName_ == 'LabelSpecification':
            obj_ = LabelSpecificationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LabelSpecification = obj_
            obj_.original_tagname_ = 'LabelSpecification'
        elif nodeName_ == 'ReceiptSpecification':
            obj_ = ReceiptSpecificationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReceiptSpecification = obj_
            obj_.original_tagname_ = 'ReceiptSpecification'
# end class ShipmentRequest


class ShipConfirmRequest(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Request=None, Shipment=None, LabelSpecification=None, ReceiptSpecification=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Request = Request
        self.Request_nsprefix_ = None
        self.Shipment = Shipment
        self.Shipment_nsprefix_ = None
        self.LabelSpecification = LabelSpecification
        self.LabelSpecification_nsprefix_ = None
        self.ReceiptSpecification = ReceiptSpecification
        self.ReceiptSpecification_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipConfirmRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipConfirmRequest.subclass:
            return ShipConfirmRequest.subclass(*args_, **kwargs_)
        else:
            return ShipConfirmRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Request(self):
        return self.Request
    def set_Request(self, Request):
        self.Request = Request
    def get_Shipment(self):
        return self.Shipment
    def set_Shipment(self, Shipment):
        self.Shipment = Shipment
    def get_LabelSpecification(self):
        return self.LabelSpecification
    def set_LabelSpecification(self, LabelSpecification):
        self.LabelSpecification = LabelSpecification
    def get_ReceiptSpecification(self):
        return self.ReceiptSpecification
    def set_ReceiptSpecification(self, ReceiptSpecification):
        self.ReceiptSpecification = ReceiptSpecification
    def hasContent_(self):
        if (
            self.Request is not None or
            self.Shipment is not None or
            self.LabelSpecification is not None or
            self.ReceiptSpecification is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipConfirmRequest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipConfirmRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipConfirmRequest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipConfirmRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipConfirmRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipConfirmRequest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipConfirmRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Request is not None:
            namespaceprefix_ = self.Request_nsprefix_ + ':' if (UseCapturedNS_ and self.Request_nsprefix_) else ''
            self.Request.export(outfile, level, namespaceprefix_='common:', namespacedef_='', name_='Request', pretty_print=pretty_print)
        if self.Shipment is not None:
            namespaceprefix_ = self.Shipment_nsprefix_ + ':' if (UseCapturedNS_ and self.Shipment_nsprefix_) else ''
            self.Shipment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Shipment', pretty_print=pretty_print)
        if self.LabelSpecification is not None:
            namespaceprefix_ = self.LabelSpecification_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelSpecification_nsprefix_) else ''
            self.LabelSpecification.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LabelSpecification', pretty_print=pretty_print)
        if self.ReceiptSpecification is not None:
            namespaceprefix_ = self.ReceiptSpecification_nsprefix_ + ':' if (UseCapturedNS_ and self.ReceiptSpecification_nsprefix_) else ''
            self.ReceiptSpecification.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReceiptSpecification', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Request':
            obj_ = RequestType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Request = obj_
            obj_.original_tagname_ = 'Request'
        elif nodeName_ == 'Shipment':
            obj_ = ShipmentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Shipment = obj_
            obj_.original_tagname_ = 'Shipment'
        elif nodeName_ == 'LabelSpecification':
            obj_ = LabelSpecificationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LabelSpecification = obj_
            obj_.original_tagname_ = 'LabelSpecification'
        elif nodeName_ == 'ReceiptSpecification':
            obj_ = ReceiptSpecificationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReceiptSpecification = obj_
            obj_.original_tagname_ = 'ReceiptSpecification'
# end class ShipConfirmRequest


class ShipAcceptRequest(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Request=None, ShipmentDigest=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Request = Request
        self.Request_nsprefix_ = None
        self.ShipmentDigest = ShipmentDigest
        self.ShipmentDigest_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipAcceptRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipAcceptRequest.subclass:
            return ShipAcceptRequest.subclass(*args_, **kwargs_)
        else:
            return ShipAcceptRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Request(self):
        return self.Request
    def set_Request(self, Request):
        self.Request = Request
    def get_ShipmentDigest(self):
        return self.ShipmentDigest
    def set_ShipmentDigest(self, ShipmentDigest):
        self.ShipmentDigest = ShipmentDigest
    def hasContent_(self):
        if (
            self.Request is not None or
            self.ShipmentDigest is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipAcceptRequest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipAcceptRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipAcceptRequest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipAcceptRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipAcceptRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipAcceptRequest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipAcceptRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Request is not None:
            namespaceprefix_ = self.Request_nsprefix_ + ':' if (UseCapturedNS_ and self.Request_nsprefix_) else ''
            self.Request.export(outfile, level, namespaceprefix_='common:', namespacedef_='', name_='Request', pretty_print=pretty_print)
        if self.ShipmentDigest is not None:
            namespaceprefix_ = self.ShipmentDigest_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentDigest_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipmentDigest>%s</%sShipmentDigest>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShipmentDigest), input_name='ShipmentDigest')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Request':
            obj_ = RequestType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Request = obj_
            obj_.original_tagname_ = 'Request'
        elif nodeName_ == 'ShipmentDigest':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShipmentDigest')
            value_ = self.gds_validate_string(value_, node, 'ShipmentDigest')
            self.ShipmentDigest = value_
            self.ShipmentDigest_nsprefix_ = child_.prefix
# end class ShipAcceptRequest


class ShipmentResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Response=None, ShipmentResults=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Response = Response
        self.Response_nsprefix_ = None
        self.ShipmentResults = ShipmentResults
        self.ShipmentResults_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentResponse.subclass:
            return ShipmentResponse.subclass(*args_, **kwargs_)
        else:
            return ShipmentResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Response(self):
        return self.Response
    def set_Response(self, Response):
        self.Response = Response
    def get_ShipmentResults(self):
        return self.ShipmentResults
    def set_ShipmentResults(self, ShipmentResults):
        self.ShipmentResults = ShipmentResults
    def hasContent_(self):
        if (
            self.Response is not None or
            self.ShipmentResults is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentResponse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentResponse'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Response is not None:
            namespaceprefix_ = self.Response_nsprefix_ + ':' if (UseCapturedNS_ and self.Response_nsprefix_) else ''
            self.Response.export(outfile, level, namespaceprefix_='common:', namespacedef_='', name_='Response', pretty_print=pretty_print)
        if self.ShipmentResults is not None:
            namespaceprefix_ = self.ShipmentResults_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentResults_nsprefix_) else ''
            self.ShipmentResults.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentResults', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Response':
            obj_ = ResponseType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Response = obj_
            obj_.original_tagname_ = 'Response'
        elif nodeName_ == 'ShipmentResults':
            obj_ = ShipmentResultsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentResults = obj_
            obj_.original_tagname_ = 'ShipmentResults'
# end class ShipmentResponse


class ShipConfirmResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Response=None, ShipmentResults=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Response = Response
        self.Response_nsprefix_ = None
        self.ShipmentResults = ShipmentResults
        self.ShipmentResults_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipConfirmResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipConfirmResponse.subclass:
            return ShipConfirmResponse.subclass(*args_, **kwargs_)
        else:
            return ShipConfirmResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Response(self):
        return self.Response
    def set_Response(self, Response):
        self.Response = Response
    def get_ShipmentResults(self):
        return self.ShipmentResults
    def set_ShipmentResults(self, ShipmentResults):
        self.ShipmentResults = ShipmentResults
    def hasContent_(self):
        if (
            self.Response is not None or
            self.ShipmentResults is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipConfirmResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipConfirmResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipConfirmResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipConfirmResponse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipConfirmResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipConfirmResponse'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipConfirmResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Response is not None:
            namespaceprefix_ = self.Response_nsprefix_ + ':' if (UseCapturedNS_ and self.Response_nsprefix_) else ''
            self.Response.export(outfile, level, namespaceprefix_='common:', namespacedef_='', name_='Response', pretty_print=pretty_print)
        if self.ShipmentResults is not None:
            namespaceprefix_ = self.ShipmentResults_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentResults_nsprefix_) else ''
            self.ShipmentResults.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentResults', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Response':
            obj_ = ResponseType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Response = obj_
            obj_.original_tagname_ = 'Response'
        elif nodeName_ == 'ShipmentResults':
            obj_ = ShipmentResultsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentResults = obj_
            obj_.original_tagname_ = 'ShipmentResults'
# end class ShipConfirmResponse


class ShipAcceptResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Response=None, ShipmentResults=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Response = Response
        self.Response_nsprefix_ = None
        self.ShipmentResults = ShipmentResults
        self.ShipmentResults_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipAcceptResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipAcceptResponse.subclass:
            return ShipAcceptResponse.subclass(*args_, **kwargs_)
        else:
            return ShipAcceptResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Response(self):
        return self.Response
    def set_Response(self, Response):
        self.Response = Response
    def get_ShipmentResults(self):
        return self.ShipmentResults
    def set_ShipmentResults(self, ShipmentResults):
        self.ShipmentResults = ShipmentResults
    def hasContent_(self):
        if (
            self.Response is not None or
            self.ShipmentResults is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipAcceptResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipAcceptResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipAcceptResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipAcceptResponse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipAcceptResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipAcceptResponse'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipAcceptResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Response is not None:
            namespaceprefix_ = self.Response_nsprefix_ + ':' if (UseCapturedNS_ and self.Response_nsprefix_) else ''
            self.Response.export(outfile, level, namespaceprefix_='common:', namespacedef_='', name_='Response', pretty_print=pretty_print)
        if self.ShipmentResults is not None:
            namespaceprefix_ = self.ShipmentResults_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentResults_nsprefix_) else ''
            self.ShipmentResults.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentResults', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Response':
            obj_ = ResponseType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Response = obj_
            obj_.original_tagname_ = 'Response'
        elif nodeName_ == 'ShipmentResults':
            obj_ = ShipmentResultsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentResults = obj_
            obj_.original_tagname_ = 'ShipmentResults'
# end class ShipAcceptResponse


class ShipmentType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Description=None, ReturnService=None, DocumentsOnlyIndicator=None, Shipper=None, ShipTo=None, AlternateDeliveryAddress=None, ShipFrom=None, PaymentInformation=None, FRSPaymentInformation=None, FreightShipmentInformation=None, GoodsNotInFreeCirculationIndicator=None, ShipmentRatingOptions=None, MovementReferenceNumber=None, ReferenceNumber=None, Service=None, InvoiceLineTotal=None, NumOfPiecesInShipment=None, USPSEndorsement=None, MILabelCN22Indicator=None, SubClassification=None, CostCenter=None, CostCenterBarcodeIndicator=None, PackageID=None, PackageIDBarcodeIndicator=None, IrregularIndicator=None, ShipmentIndicationType=None, MIDualReturnShipmentKey=None, MIDualReturnShipmentIndicator=None, RatingMethodRequestedIndicator=None, TaxInformationIndicator=None, PromotionalDiscountInformation=None, DGSignatoryInfo=None, MasterCartonID=None, MasterCartonIndicator=None, ShipmentServiceOptions=None, Package=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.ReturnService = ReturnService
        self.ReturnService_nsprefix_ = None
        self.DocumentsOnlyIndicator = DocumentsOnlyIndicator
        self.DocumentsOnlyIndicator_nsprefix_ = None
        self.Shipper = Shipper
        self.Shipper_nsprefix_ = None
        self.ShipTo = ShipTo
        self.ShipTo_nsprefix_ = None
        self.AlternateDeliveryAddress = AlternateDeliveryAddress
        self.AlternateDeliveryAddress_nsprefix_ = None
        self.ShipFrom = ShipFrom
        self.ShipFrom_nsprefix_ = None
        self.PaymentInformation = PaymentInformation
        self.PaymentInformation_nsprefix_ = None
        self.FRSPaymentInformation = FRSPaymentInformation
        self.FRSPaymentInformation_nsprefix_ = None
        self.FreightShipmentInformation = FreightShipmentInformation
        self.FreightShipmentInformation_nsprefix_ = None
        self.GoodsNotInFreeCirculationIndicator = GoodsNotInFreeCirculationIndicator
        self.GoodsNotInFreeCirculationIndicator_nsprefix_ = None
        self.ShipmentRatingOptions = ShipmentRatingOptions
        self.ShipmentRatingOptions_nsprefix_ = None
        self.MovementReferenceNumber = MovementReferenceNumber
        self.MovementReferenceNumber_nsprefix_ = None
        if ReferenceNumber is None:
            self.ReferenceNumber = []
        else:
            self.ReferenceNumber = ReferenceNumber
        self.ReferenceNumber_nsprefix_ = None
        self.Service = Service
        self.Service_nsprefix_ = None
        self.InvoiceLineTotal = InvoiceLineTotal
        self.InvoiceLineTotal_nsprefix_ = None
        self.NumOfPiecesInShipment = NumOfPiecesInShipment
        self.NumOfPiecesInShipment_nsprefix_ = None
        self.USPSEndorsement = USPSEndorsement
        self.USPSEndorsement_nsprefix_ = None
        self.MILabelCN22Indicator = MILabelCN22Indicator
        self.MILabelCN22Indicator_nsprefix_ = None
        self.SubClassification = SubClassification
        self.SubClassification_nsprefix_ = None
        self.CostCenter = CostCenter
        self.CostCenter_nsprefix_ = None
        self.CostCenterBarcodeIndicator = CostCenterBarcodeIndicator
        self.CostCenterBarcodeIndicator_nsprefix_ = None
        self.PackageID = PackageID
        self.PackageID_nsprefix_ = None
        self.PackageIDBarcodeIndicator = PackageIDBarcodeIndicator
        self.PackageIDBarcodeIndicator_nsprefix_ = None
        self.IrregularIndicator = IrregularIndicator
        self.IrregularIndicator_nsprefix_ = None
        if ShipmentIndicationType is None:
            self.ShipmentIndicationType = []
        else:
            self.ShipmentIndicationType = ShipmentIndicationType
        self.ShipmentIndicationType_nsprefix_ = None
        self.MIDualReturnShipmentKey = MIDualReturnShipmentKey
        self.MIDualReturnShipmentKey_nsprefix_ = None
        self.MIDualReturnShipmentIndicator = MIDualReturnShipmentIndicator
        self.MIDualReturnShipmentIndicator_nsprefix_ = None
        self.RatingMethodRequestedIndicator = RatingMethodRequestedIndicator
        self.RatingMethodRequestedIndicator_nsprefix_ = None
        self.TaxInformationIndicator = TaxInformationIndicator
        self.TaxInformationIndicator_nsprefix_ = None
        self.PromotionalDiscountInformation = PromotionalDiscountInformation
        self.PromotionalDiscountInformation_nsprefix_ = None
        self.DGSignatoryInfo = DGSignatoryInfo
        self.DGSignatoryInfo_nsprefix_ = None
        self.MasterCartonID = MasterCartonID
        self.MasterCartonID_nsprefix_ = None
        self.MasterCartonIndicator = MasterCartonIndicator
        self.MasterCartonIndicator_nsprefix_ = None
        self.ShipmentServiceOptions = ShipmentServiceOptions
        self.ShipmentServiceOptions_nsprefix_ = None
        if Package is None:
            self.Package = []
        else:
            self.Package = Package
        self.Package_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentType.subclass:
            return ShipmentType.subclass(*args_, **kwargs_)
        else:
            return ShipmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_ReturnService(self):
        return self.ReturnService
    def set_ReturnService(self, ReturnService):
        self.ReturnService = ReturnService
    def get_DocumentsOnlyIndicator(self):
        return self.DocumentsOnlyIndicator
    def set_DocumentsOnlyIndicator(self, DocumentsOnlyIndicator):
        self.DocumentsOnlyIndicator = DocumentsOnlyIndicator
    def get_Shipper(self):
        return self.Shipper
    def set_Shipper(self, Shipper):
        self.Shipper = Shipper
    def get_ShipTo(self):
        return self.ShipTo
    def set_ShipTo(self, ShipTo):
        self.ShipTo = ShipTo
    def get_AlternateDeliveryAddress(self):
        return self.AlternateDeliveryAddress
    def set_AlternateDeliveryAddress(self, AlternateDeliveryAddress):
        self.AlternateDeliveryAddress = AlternateDeliveryAddress
    def get_ShipFrom(self):
        return self.ShipFrom
    def set_ShipFrom(self, ShipFrom):
        self.ShipFrom = ShipFrom
    def get_PaymentInformation(self):
        return self.PaymentInformation
    def set_PaymentInformation(self, PaymentInformation):
        self.PaymentInformation = PaymentInformation
    def get_FRSPaymentInformation(self):
        return self.FRSPaymentInformation
    def set_FRSPaymentInformation(self, FRSPaymentInformation):
        self.FRSPaymentInformation = FRSPaymentInformation
    def get_FreightShipmentInformation(self):
        return self.FreightShipmentInformation
    def set_FreightShipmentInformation(self, FreightShipmentInformation):
        self.FreightShipmentInformation = FreightShipmentInformation
    def get_GoodsNotInFreeCirculationIndicator(self):
        return self.GoodsNotInFreeCirculationIndicator
    def set_GoodsNotInFreeCirculationIndicator(self, GoodsNotInFreeCirculationIndicator):
        self.GoodsNotInFreeCirculationIndicator = GoodsNotInFreeCirculationIndicator
    def get_ShipmentRatingOptions(self):
        return self.ShipmentRatingOptions
    def set_ShipmentRatingOptions(self, ShipmentRatingOptions):
        self.ShipmentRatingOptions = ShipmentRatingOptions
    def get_MovementReferenceNumber(self):
        return self.MovementReferenceNumber
    def set_MovementReferenceNumber(self, MovementReferenceNumber):
        self.MovementReferenceNumber = MovementReferenceNumber
    def get_ReferenceNumber(self):
        return self.ReferenceNumber
    def set_ReferenceNumber(self, ReferenceNumber):
        self.ReferenceNumber = ReferenceNumber
    def add_ReferenceNumber(self, value):
        self.ReferenceNumber.append(value)
    def insert_ReferenceNumber_at(self, index, value):
        self.ReferenceNumber.insert(index, value)
    def replace_ReferenceNumber_at(self, index, value):
        self.ReferenceNumber[index] = value
    def get_Service(self):
        return self.Service
    def set_Service(self, Service):
        self.Service = Service
    def get_InvoiceLineTotal(self):
        return self.InvoiceLineTotal
    def set_InvoiceLineTotal(self, InvoiceLineTotal):
        self.InvoiceLineTotal = InvoiceLineTotal
    def get_NumOfPiecesInShipment(self):
        return self.NumOfPiecesInShipment
    def set_NumOfPiecesInShipment(self, NumOfPiecesInShipment):
        self.NumOfPiecesInShipment = NumOfPiecesInShipment
    def get_USPSEndorsement(self):
        return self.USPSEndorsement
    def set_USPSEndorsement(self, USPSEndorsement):
        self.USPSEndorsement = USPSEndorsement
    def get_MILabelCN22Indicator(self):
        return self.MILabelCN22Indicator
    def set_MILabelCN22Indicator(self, MILabelCN22Indicator):
        self.MILabelCN22Indicator = MILabelCN22Indicator
    def get_SubClassification(self):
        return self.SubClassification
    def set_SubClassification(self, SubClassification):
        self.SubClassification = SubClassification
    def get_CostCenter(self):
        return self.CostCenter
    def set_CostCenter(self, CostCenter):
        self.CostCenter = CostCenter
    def get_CostCenterBarcodeIndicator(self):
        return self.CostCenterBarcodeIndicator
    def set_CostCenterBarcodeIndicator(self, CostCenterBarcodeIndicator):
        self.CostCenterBarcodeIndicator = CostCenterBarcodeIndicator
    def get_PackageID(self):
        return self.PackageID
    def set_PackageID(self, PackageID):
        self.PackageID = PackageID
    def get_PackageIDBarcodeIndicator(self):
        return self.PackageIDBarcodeIndicator
    def set_PackageIDBarcodeIndicator(self, PackageIDBarcodeIndicator):
        self.PackageIDBarcodeIndicator = PackageIDBarcodeIndicator
    def get_IrregularIndicator(self):
        return self.IrregularIndicator
    def set_IrregularIndicator(self, IrregularIndicator):
        self.IrregularIndicator = IrregularIndicator
    def get_ShipmentIndicationType(self):
        return self.ShipmentIndicationType
    def set_ShipmentIndicationType(self, ShipmentIndicationType):
        self.ShipmentIndicationType = ShipmentIndicationType
    def add_ShipmentIndicationType(self, value):
        self.ShipmentIndicationType.append(value)
    def insert_ShipmentIndicationType_at(self, index, value):
        self.ShipmentIndicationType.insert(index, value)
    def replace_ShipmentIndicationType_at(self, index, value):
        self.ShipmentIndicationType[index] = value
    def get_MIDualReturnShipmentKey(self):
        return self.MIDualReturnShipmentKey
    def set_MIDualReturnShipmentKey(self, MIDualReturnShipmentKey):
        self.MIDualReturnShipmentKey = MIDualReturnShipmentKey
    def get_MIDualReturnShipmentIndicator(self):
        return self.MIDualReturnShipmentIndicator
    def set_MIDualReturnShipmentIndicator(self, MIDualReturnShipmentIndicator):
        self.MIDualReturnShipmentIndicator = MIDualReturnShipmentIndicator
    def get_RatingMethodRequestedIndicator(self):
        return self.RatingMethodRequestedIndicator
    def set_RatingMethodRequestedIndicator(self, RatingMethodRequestedIndicator):
        self.RatingMethodRequestedIndicator = RatingMethodRequestedIndicator
    def get_TaxInformationIndicator(self):
        return self.TaxInformationIndicator
    def set_TaxInformationIndicator(self, TaxInformationIndicator):
        self.TaxInformationIndicator = TaxInformationIndicator
    def get_PromotionalDiscountInformation(self):
        return self.PromotionalDiscountInformation
    def set_PromotionalDiscountInformation(self, PromotionalDiscountInformation):
        self.PromotionalDiscountInformation = PromotionalDiscountInformation
    def get_DGSignatoryInfo(self):
        return self.DGSignatoryInfo
    def set_DGSignatoryInfo(self, DGSignatoryInfo):
        self.DGSignatoryInfo = DGSignatoryInfo
    def get_MasterCartonID(self):
        return self.MasterCartonID
    def set_MasterCartonID(self, MasterCartonID):
        self.MasterCartonID = MasterCartonID
    def get_MasterCartonIndicator(self):
        return self.MasterCartonIndicator
    def set_MasterCartonIndicator(self, MasterCartonIndicator):
        self.MasterCartonIndicator = MasterCartonIndicator
    def get_ShipmentServiceOptions(self):
        return self.ShipmentServiceOptions
    def set_ShipmentServiceOptions(self, ShipmentServiceOptions):
        self.ShipmentServiceOptions = ShipmentServiceOptions
    def get_Package(self):
        return self.Package
    def set_Package(self, Package):
        self.Package = Package
    def add_Package(self, value):
        self.Package.append(value)
    def insert_Package_at(self, index, value):
        self.Package.insert(index, value)
    def replace_Package_at(self, index, value):
        self.Package[index] = value
    def hasContent_(self):
        if (
            self.Description is not None or
            self.ReturnService is not None or
            self.DocumentsOnlyIndicator is not None or
            self.Shipper is not None or
            self.ShipTo is not None or
            self.AlternateDeliveryAddress is not None or
            self.ShipFrom is not None or
            self.PaymentInformation is not None or
            self.FRSPaymentInformation is not None or
            self.FreightShipmentInformation is not None or
            self.GoodsNotInFreeCirculationIndicator is not None or
            self.ShipmentRatingOptions is not None or
            self.MovementReferenceNumber is not None or
            self.ReferenceNumber or
            self.Service is not None or
            self.InvoiceLineTotal is not None or
            self.NumOfPiecesInShipment is not None or
            self.USPSEndorsement is not None or
            self.MILabelCN22Indicator is not None or
            self.SubClassification is not None or
            self.CostCenter is not None or
            self.CostCenterBarcodeIndicator is not None or
            self.PackageID is not None or
            self.PackageIDBarcodeIndicator is not None or
            self.IrregularIndicator is not None or
            self.ShipmentIndicationType or
            self.MIDualReturnShipmentKey is not None or
            self.MIDualReturnShipmentIndicator is not None or
            self.RatingMethodRequestedIndicator is not None or
            self.TaxInformationIndicator is not None or
            self.PromotionalDiscountInformation is not None or
            self.DGSignatoryInfo is not None or
            self.MasterCartonID is not None or
            self.MasterCartonIndicator is not None or
            self.ShipmentServiceOptions is not None or
            self.Package
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.ReturnService is not None:
            namespaceprefix_ = self.ReturnService_nsprefix_ + ':' if (UseCapturedNS_ and self.ReturnService_nsprefix_) else ''
            self.ReturnService.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReturnService', pretty_print=pretty_print)
        if self.DocumentsOnlyIndicator is not None:
            namespaceprefix_ = self.DocumentsOnlyIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentsOnlyIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentsOnlyIndicator>%s</%sDocumentsOnlyIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentsOnlyIndicator), input_name='DocumentsOnlyIndicator')), namespaceprefix_ , eol_))
        if self.Shipper is not None:
            namespaceprefix_ = self.Shipper_nsprefix_ + ':' if (UseCapturedNS_ and self.Shipper_nsprefix_) else ''
            self.Shipper.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Shipper', pretty_print=pretty_print)
        if self.ShipTo is not None:
            namespaceprefix_ = self.ShipTo_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipTo_nsprefix_) else ''
            self.ShipTo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipTo', pretty_print=pretty_print)
        if self.AlternateDeliveryAddress is not None:
            namespaceprefix_ = self.AlternateDeliveryAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.AlternateDeliveryAddress_nsprefix_) else ''
            self.AlternateDeliveryAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AlternateDeliveryAddress', pretty_print=pretty_print)
        if self.ShipFrom is not None:
            namespaceprefix_ = self.ShipFrom_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipFrom_nsprefix_) else ''
            self.ShipFrom.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipFrom', pretty_print=pretty_print)
        if self.PaymentInformation is not None:
            namespaceprefix_ = self.PaymentInformation_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentInformation_nsprefix_) else ''
            self.PaymentInformation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PaymentInformation', pretty_print=pretty_print)
        if self.FRSPaymentInformation is not None:
            namespaceprefix_ = self.FRSPaymentInformation_nsprefix_ + ':' if (UseCapturedNS_ and self.FRSPaymentInformation_nsprefix_) else ''
            self.FRSPaymentInformation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FRSPaymentInformation', pretty_print=pretty_print)
        if self.FreightShipmentInformation is not None:
            namespaceprefix_ = self.FreightShipmentInformation_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightShipmentInformation_nsprefix_) else ''
            self.FreightShipmentInformation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreightShipmentInformation', pretty_print=pretty_print)
        if self.GoodsNotInFreeCirculationIndicator is not None:
            namespaceprefix_ = self.GoodsNotInFreeCirculationIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsNotInFreeCirculationIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsNotInFreeCirculationIndicator>%s</%sGoodsNotInFreeCirculationIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GoodsNotInFreeCirculationIndicator), input_name='GoodsNotInFreeCirculationIndicator')), namespaceprefix_ , eol_))
        if self.ShipmentRatingOptions is not None:
            namespaceprefix_ = self.ShipmentRatingOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentRatingOptions_nsprefix_) else ''
            self.ShipmentRatingOptions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentRatingOptions', pretty_print=pretty_print)
        if self.MovementReferenceNumber is not None:
            namespaceprefix_ = self.MovementReferenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.MovementReferenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMovementReferenceNumber>%s</%sMovementReferenceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MovementReferenceNumber), input_name='MovementReferenceNumber')), namespaceprefix_ , eol_))
        for ReferenceNumber_ in self.ReferenceNumber:
            namespaceprefix_ = self.ReferenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ReferenceNumber_nsprefix_) else ''
            ReferenceNumber_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReferenceNumber', pretty_print=pretty_print)
        if self.Service is not None:
            namespaceprefix_ = self.Service_nsprefix_ + ':' if (UseCapturedNS_ and self.Service_nsprefix_) else ''
            self.Service.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Service', pretty_print=pretty_print)
        if self.InvoiceLineTotal is not None:
            namespaceprefix_ = self.InvoiceLineTotal_nsprefix_ + ':' if (UseCapturedNS_ and self.InvoiceLineTotal_nsprefix_) else ''
            self.InvoiceLineTotal.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InvoiceLineTotal', pretty_print=pretty_print)
        if self.NumOfPiecesInShipment is not None:
            namespaceprefix_ = self.NumOfPiecesInShipment_nsprefix_ + ':' if (UseCapturedNS_ and self.NumOfPiecesInShipment_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumOfPiecesInShipment>%s</%sNumOfPiecesInShipment>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NumOfPiecesInShipment), input_name='NumOfPiecesInShipment')), namespaceprefix_ , eol_))
        if self.USPSEndorsement is not None:
            namespaceprefix_ = self.USPSEndorsement_nsprefix_ + ':' if (UseCapturedNS_ and self.USPSEndorsement_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUSPSEndorsement>%s</%sUSPSEndorsement>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.USPSEndorsement), input_name='USPSEndorsement')), namespaceprefix_ , eol_))
        if self.MILabelCN22Indicator is not None:
            namespaceprefix_ = self.MILabelCN22Indicator_nsprefix_ + ':' if (UseCapturedNS_ and self.MILabelCN22Indicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMILabelCN22Indicator>%s</%sMILabelCN22Indicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MILabelCN22Indicator), input_name='MILabelCN22Indicator')), namespaceprefix_ , eol_))
        if self.SubClassification is not None:
            namespaceprefix_ = self.SubClassification_nsprefix_ + ':' if (UseCapturedNS_ and self.SubClassification_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSubClassification>%s</%sSubClassification>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SubClassification), input_name='SubClassification')), namespaceprefix_ , eol_))
        if self.CostCenter is not None:
            namespaceprefix_ = self.CostCenter_nsprefix_ + ':' if (UseCapturedNS_ and self.CostCenter_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCostCenter>%s</%sCostCenter>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CostCenter), input_name='CostCenter')), namespaceprefix_ , eol_))
        if self.CostCenterBarcodeIndicator is not None:
            namespaceprefix_ = self.CostCenterBarcodeIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.CostCenterBarcodeIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCostCenterBarcodeIndicator>%s</%sCostCenterBarcodeIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CostCenterBarcodeIndicator), input_name='CostCenterBarcodeIndicator')), namespaceprefix_ , eol_))
        if self.PackageID is not None:
            namespaceprefix_ = self.PackageID_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackageID>%s</%sPackageID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PackageID), input_name='PackageID')), namespaceprefix_ , eol_))
        if self.PackageIDBarcodeIndicator is not None:
            namespaceprefix_ = self.PackageIDBarcodeIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageIDBarcodeIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackageIDBarcodeIndicator>%s</%sPackageIDBarcodeIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PackageIDBarcodeIndicator), input_name='PackageIDBarcodeIndicator')), namespaceprefix_ , eol_))
        if self.IrregularIndicator is not None:
            namespaceprefix_ = self.IrregularIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.IrregularIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIrregularIndicator>%s</%sIrregularIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IrregularIndicator), input_name='IrregularIndicator')), namespaceprefix_ , eol_))
        for ShipmentIndicationType_ in self.ShipmentIndicationType:
            namespaceprefix_ = self.ShipmentIndicationType_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentIndicationType_nsprefix_) else ''
            ShipmentIndicationType_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentIndicationType', pretty_print=pretty_print)
        if self.MIDualReturnShipmentKey is not None:
            namespaceprefix_ = self.MIDualReturnShipmentKey_nsprefix_ + ':' if (UseCapturedNS_ and self.MIDualReturnShipmentKey_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMIDualReturnShipmentKey>%s</%sMIDualReturnShipmentKey>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MIDualReturnShipmentKey), input_name='MIDualReturnShipmentKey')), namespaceprefix_ , eol_))
        if self.MIDualReturnShipmentIndicator is not None:
            namespaceprefix_ = self.MIDualReturnShipmentIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.MIDualReturnShipmentIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMIDualReturnShipmentIndicator>%s</%sMIDualReturnShipmentIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MIDualReturnShipmentIndicator), input_name='MIDualReturnShipmentIndicator')), namespaceprefix_ , eol_))
        if self.RatingMethodRequestedIndicator is not None:
            namespaceprefix_ = self.RatingMethodRequestedIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.RatingMethodRequestedIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRatingMethodRequestedIndicator>%s</%sRatingMethodRequestedIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RatingMethodRequestedIndicator), input_name='RatingMethodRequestedIndicator')), namespaceprefix_ , eol_))
        if self.TaxInformationIndicator is not None:
            namespaceprefix_ = self.TaxInformationIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.TaxInformationIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxInformationIndicator>%s</%sTaxInformationIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TaxInformationIndicator), input_name='TaxInformationIndicator')), namespaceprefix_ , eol_))
        if self.PromotionalDiscountInformation is not None:
            namespaceprefix_ = self.PromotionalDiscountInformation_nsprefix_ + ':' if (UseCapturedNS_ and self.PromotionalDiscountInformation_nsprefix_) else ''
            self.PromotionalDiscountInformation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PromotionalDiscountInformation', pretty_print=pretty_print)
        if self.DGSignatoryInfo is not None:
            namespaceprefix_ = self.DGSignatoryInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.DGSignatoryInfo_nsprefix_) else ''
            self.DGSignatoryInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DGSignatoryInfo', pretty_print=pretty_print)
        if self.MasterCartonID is not None:
            namespaceprefix_ = self.MasterCartonID_nsprefix_ + ':' if (UseCapturedNS_ and self.MasterCartonID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMasterCartonID>%s</%sMasterCartonID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MasterCartonID), input_name='MasterCartonID')), namespaceprefix_ , eol_))
        if self.MasterCartonIndicator is not None:
            namespaceprefix_ = self.MasterCartonIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.MasterCartonIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMasterCartonIndicator>%s</%sMasterCartonIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MasterCartonIndicator), input_name='MasterCartonIndicator')), namespaceprefix_ , eol_))
        if self.ShipmentServiceOptions is not None:
            namespaceprefix_ = self.ShipmentServiceOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentServiceOptions_nsprefix_) else ''
            self.ShipmentServiceOptions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentServiceOptions', pretty_print=pretty_print)
        for Package_ in self.Package:
            namespaceprefix_ = self.Package_nsprefix_ + ':' if (UseCapturedNS_ and self.Package_nsprefix_) else ''
            Package_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Package', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'ReturnService':
            obj_ = ReturnServiceType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReturnService = obj_
            obj_.original_tagname_ = 'ReturnService'
        elif nodeName_ == 'DocumentsOnlyIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocumentsOnlyIndicator')
            value_ = self.gds_validate_string(value_, node, 'DocumentsOnlyIndicator')
            self.DocumentsOnlyIndicator = value_
            self.DocumentsOnlyIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'Shipper':
            obj_ = ShipperType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Shipper = obj_
            obj_.original_tagname_ = 'Shipper'
        elif nodeName_ == 'ShipTo':
            obj_ = ShipToType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipTo = obj_
            obj_.original_tagname_ = 'ShipTo'
        elif nodeName_ == 'AlternateDeliveryAddress':
            obj_ = AlternateDeliveryAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AlternateDeliveryAddress = obj_
            obj_.original_tagname_ = 'AlternateDeliveryAddress'
        elif nodeName_ == 'ShipFrom':
            obj_ = ShipFromType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipFrom = obj_
            obj_.original_tagname_ = 'ShipFrom'
        elif nodeName_ == 'PaymentInformation':
            obj_ = PaymentInfoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PaymentInformation = obj_
            obj_.original_tagname_ = 'PaymentInformation'
        elif nodeName_ == 'FRSPaymentInformation':
            obj_ = FRSPaymentInfoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FRSPaymentInformation = obj_
            obj_.original_tagname_ = 'FRSPaymentInformation'
        elif nodeName_ == 'FreightShipmentInformation':
            obj_ = FreightShipmentInformationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreightShipmentInformation = obj_
            obj_.original_tagname_ = 'FreightShipmentInformation'
        elif nodeName_ == 'GoodsNotInFreeCirculationIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GoodsNotInFreeCirculationIndicator')
            value_ = self.gds_validate_string(value_, node, 'GoodsNotInFreeCirculationIndicator')
            self.GoodsNotInFreeCirculationIndicator = value_
            self.GoodsNotInFreeCirculationIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShipmentRatingOptions':
            obj_ = RateInfoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentRatingOptions = obj_
            obj_.original_tagname_ = 'ShipmentRatingOptions'
        elif nodeName_ == 'MovementReferenceNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MovementReferenceNumber')
            value_ = self.gds_validate_string(value_, node, 'MovementReferenceNumber')
            self.MovementReferenceNumber = value_
            self.MovementReferenceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ReferenceNumber':
            obj_ = ReferenceNumberType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReferenceNumber.append(obj_)
            obj_.original_tagname_ = 'ReferenceNumber'
        elif nodeName_ == 'Service':
            obj_ = ServiceType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Service = obj_
            obj_.original_tagname_ = 'Service'
        elif nodeName_ == 'InvoiceLineTotal':
            obj_ = CurrencyMonetaryType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InvoiceLineTotal = obj_
            obj_.original_tagname_ = 'InvoiceLineTotal'
        elif nodeName_ == 'NumOfPiecesInShipment':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NumOfPiecesInShipment')
            value_ = self.gds_validate_string(value_, node, 'NumOfPiecesInShipment')
            self.NumOfPiecesInShipment = value_
            self.NumOfPiecesInShipment_nsprefix_ = child_.prefix
        elif nodeName_ == 'USPSEndorsement':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'USPSEndorsement')
            value_ = self.gds_validate_string(value_, node, 'USPSEndorsement')
            self.USPSEndorsement = value_
            self.USPSEndorsement_nsprefix_ = child_.prefix
        elif nodeName_ == 'MILabelCN22Indicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MILabelCN22Indicator')
            value_ = self.gds_validate_string(value_, node, 'MILabelCN22Indicator')
            self.MILabelCN22Indicator = value_
            self.MILabelCN22Indicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'SubClassification':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SubClassification')
            value_ = self.gds_validate_string(value_, node, 'SubClassification')
            self.SubClassification = value_
            self.SubClassification_nsprefix_ = child_.prefix
        elif nodeName_ == 'CostCenter':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CostCenter')
            value_ = self.gds_validate_string(value_, node, 'CostCenter')
            self.CostCenter = value_
            self.CostCenter_nsprefix_ = child_.prefix
        elif nodeName_ == 'CostCenterBarcodeIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CostCenterBarcodeIndicator')
            value_ = self.gds_validate_string(value_, node, 'CostCenterBarcodeIndicator')
            self.CostCenterBarcodeIndicator = value_
            self.CostCenterBarcodeIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'PackageID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackageID')
            value_ = self.gds_validate_string(value_, node, 'PackageID')
            self.PackageID = value_
            self.PackageID_nsprefix_ = child_.prefix
        elif nodeName_ == 'PackageIDBarcodeIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackageIDBarcodeIndicator')
            value_ = self.gds_validate_string(value_, node, 'PackageIDBarcodeIndicator')
            self.PackageIDBarcodeIndicator = value_
            self.PackageIDBarcodeIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'IrregularIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'IrregularIndicator')
            value_ = self.gds_validate_string(value_, node, 'IrregularIndicator')
            self.IrregularIndicator = value_
            self.IrregularIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShipmentIndicationType':
            obj_ = IndicationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentIndicationType.append(obj_)
            obj_.original_tagname_ = 'ShipmentIndicationType'
        elif nodeName_ == 'MIDualReturnShipmentKey':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MIDualReturnShipmentKey')
            value_ = self.gds_validate_string(value_, node, 'MIDualReturnShipmentKey')
            self.MIDualReturnShipmentKey = value_
            self.MIDualReturnShipmentKey_nsprefix_ = child_.prefix
        elif nodeName_ == 'MIDualReturnShipmentIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MIDualReturnShipmentIndicator')
            value_ = self.gds_validate_string(value_, node, 'MIDualReturnShipmentIndicator')
            self.MIDualReturnShipmentIndicator = value_
            self.MIDualReturnShipmentIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'RatingMethodRequestedIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RatingMethodRequestedIndicator')
            value_ = self.gds_validate_string(value_, node, 'RatingMethodRequestedIndicator')
            self.RatingMethodRequestedIndicator = value_
            self.RatingMethodRequestedIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'TaxInformationIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TaxInformationIndicator')
            value_ = self.gds_validate_string(value_, node, 'TaxInformationIndicator')
            self.TaxInformationIndicator = value_
            self.TaxInformationIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'PromotionalDiscountInformation':
            obj_ = PromotionalDiscountInformationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PromotionalDiscountInformation = obj_
            obj_.original_tagname_ = 'PromotionalDiscountInformation'
        elif nodeName_ == 'DGSignatoryInfo':
            obj_ = DGSignatoryInfoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DGSignatoryInfo = obj_
            obj_.original_tagname_ = 'DGSignatoryInfo'
        elif nodeName_ == 'MasterCartonID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MasterCartonID')
            value_ = self.gds_validate_string(value_, node, 'MasterCartonID')
            self.MasterCartonID = value_
            self.MasterCartonID_nsprefix_ = child_.prefix
        elif nodeName_ == 'MasterCartonIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MasterCartonIndicator')
            value_ = self.gds_validate_string(value_, node, 'MasterCartonIndicator')
            self.MasterCartonIndicator = value_
            self.MasterCartonIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShipmentServiceOptions':
            obj_ = ShipmentServiceOptionsType1.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentServiceOptions = obj_
            obj_.original_tagname_ = 'ShipmentServiceOptions'
        elif nodeName_ == 'Package':
            obj_ = PackageType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Package.append(obj_)
            obj_.original_tagname_ = 'Package'
# end class ShipmentType


class PromotionalDiscountInformationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PromoCode=None, PromoAliasCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PromoCode = PromoCode
        self.PromoCode_nsprefix_ = None
        self.PromoAliasCode = PromoAliasCode
        self.PromoAliasCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PromotionalDiscountInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PromotionalDiscountInformationType.subclass:
            return PromotionalDiscountInformationType.subclass(*args_, **kwargs_)
        else:
            return PromotionalDiscountInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PromoCode(self):
        return self.PromoCode
    def set_PromoCode(self, PromoCode):
        self.PromoCode = PromoCode
    def get_PromoAliasCode(self):
        return self.PromoAliasCode
    def set_PromoAliasCode(self, PromoAliasCode):
        self.PromoAliasCode = PromoAliasCode
    def hasContent_(self):
        if (
            self.PromoCode is not None or
            self.PromoAliasCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PromotionalDiscountInformationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PromotionalDiscountInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PromotionalDiscountInformationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PromotionalDiscountInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PromotionalDiscountInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PromotionalDiscountInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PromotionalDiscountInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PromoCode is not None:
            namespaceprefix_ = self.PromoCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PromoCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPromoCode>%s</%sPromoCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PromoCode), input_name='PromoCode')), namespaceprefix_ , eol_))
        if self.PromoAliasCode is not None:
            namespaceprefix_ = self.PromoAliasCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PromoAliasCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPromoAliasCode>%s</%sPromoAliasCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PromoAliasCode), input_name='PromoAliasCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PromoCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PromoCode')
            value_ = self.gds_validate_string(value_, node, 'PromoCode')
            self.PromoCode = value_
            self.PromoCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'PromoAliasCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PromoAliasCode')
            value_ = self.gds_validate_string(value_, node, 'PromoAliasCode')
            self.PromoAliasCode = value_
            self.PromoAliasCode_nsprefix_ = child_.prefix
# end class PromotionalDiscountInformationType


class ReturnServiceType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReturnServiceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReturnServiceType.subclass:
            return ReturnServiceType.subclass(*args_, **kwargs_)
        else:
            return ReturnServiceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReturnServiceType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReturnServiceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReturnServiceType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReturnServiceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReturnServiceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReturnServiceType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReturnServiceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class ReturnServiceType


class CompanyInfoType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Name=None, AttentionName=None, CompanyDisplayableName=None, TaxIdentificationNumber=None, TaxIDType=None, Phone=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Name = Name
        self.Name_nsprefix_ = None
        self.AttentionName = AttentionName
        self.AttentionName_nsprefix_ = None
        self.CompanyDisplayableName = CompanyDisplayableName
        self.CompanyDisplayableName_nsprefix_ = None
        self.TaxIdentificationNumber = TaxIdentificationNumber
        self.TaxIdentificationNumber_nsprefix_ = None
        self.TaxIDType = TaxIDType
        self.TaxIDType_nsprefix_ = None
        self.Phone = Phone
        self.Phone_nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CompanyInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CompanyInfoType.subclass:
            return CompanyInfoType.subclass(*args_, **kwargs_)
        else:
            return CompanyInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_AttentionName(self):
        return self.AttentionName
    def set_AttentionName(self, AttentionName):
        self.AttentionName = AttentionName
    def get_CompanyDisplayableName(self):
        return self.CompanyDisplayableName
    def set_CompanyDisplayableName(self, CompanyDisplayableName):
        self.CompanyDisplayableName = CompanyDisplayableName
    def get_TaxIdentificationNumber(self):
        return self.TaxIdentificationNumber
    def set_TaxIdentificationNumber(self, TaxIdentificationNumber):
        self.TaxIdentificationNumber = TaxIdentificationNumber
    def get_TaxIDType(self):
        return self.TaxIDType
    def set_TaxIDType(self, TaxIDType):
        self.TaxIDType = TaxIDType
    def get_Phone(self):
        return self.Phone
    def set_Phone(self, Phone):
        self.Phone = Phone
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (
            self.Name is not None or
            self.AttentionName is not None or
            self.CompanyDisplayableName is not None or
            self.TaxIdentificationNumber is not None or
            self.TaxIDType is not None or
            self.Phone is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompanyInfoType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CompanyInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CompanyInfoType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CompanyInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CompanyInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CompanyInfoType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompanyInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.AttentionName is not None:
            namespaceprefix_ = self.AttentionName_nsprefix_ + ':' if (UseCapturedNS_ and self.AttentionName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttentionName>%s</%sAttentionName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), namespaceprefix_ , eol_))
        if self.CompanyDisplayableName is not None:
            namespaceprefix_ = self.CompanyDisplayableName_nsprefix_ + ':' if (UseCapturedNS_ and self.CompanyDisplayableName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompanyDisplayableName>%s</%sCompanyDisplayableName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CompanyDisplayableName), input_name='CompanyDisplayableName')), namespaceprefix_ , eol_))
        if self.TaxIdentificationNumber is not None:
            namespaceprefix_ = self.TaxIdentificationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TaxIdentificationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxIdentificationNumber>%s</%sTaxIdentificationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TaxIdentificationNumber), input_name='TaxIdentificationNumber')), namespaceprefix_ , eol_))
        if self.TaxIDType is not None:
            namespaceprefix_ = self.TaxIDType_nsprefix_ + ':' if (UseCapturedNS_ and self.TaxIDType_nsprefix_) else ''
            self.TaxIDType.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TaxIDType', pretty_print=pretty_print)
        if self.Phone is not None:
            namespaceprefix_ = self.Phone_nsprefix_ + ':' if (UseCapturedNS_ and self.Phone_nsprefix_) else ''
            self.Phone.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Phone', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Name')
            value_ = self.gds_validate_string(value_, node, 'Name')
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
        elif nodeName_ == 'AttentionName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AttentionName')
            value_ = self.gds_validate_string(value_, node, 'AttentionName')
            self.AttentionName = value_
            self.AttentionName_nsprefix_ = child_.prefix
        elif nodeName_ == 'CompanyDisplayableName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CompanyDisplayableName')
            value_ = self.gds_validate_string(value_, node, 'CompanyDisplayableName')
            self.CompanyDisplayableName = value_
            self.CompanyDisplayableName_nsprefix_ = child_.prefix
        elif nodeName_ == 'TaxIdentificationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TaxIdentificationNumber')
            value_ = self.gds_validate_string(value_, node, 'TaxIdentificationNumber')
            self.TaxIdentificationNumber = value_
            self.TaxIdentificationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'TaxIDType':
            obj_ = TaxIDCodeDescType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TaxIDType = obj_
            obj_.original_tagname_ = 'TaxIDType'
        elif nodeName_ == 'Phone':
            obj_ = ShipPhoneType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Phone = obj_
            obj_.original_tagname_ = 'Phone'
# end class CompanyInfoType


class ShipPhoneType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Number=None, Extension=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Number = Number
        self.Number_nsprefix_ = None
        self.Extension = Extension
        self.Extension_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipPhoneType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipPhoneType.subclass:
            return ShipPhoneType.subclass(*args_, **kwargs_)
        else:
            return ShipPhoneType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_Extension(self):
        return self.Extension
    def set_Extension(self, Extension):
        self.Extension = Extension
    def hasContent_(self):
        if (
            self.Number is not None or
            self.Extension is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipPhoneType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipPhoneType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipPhoneType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipPhoneType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipPhoneType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipPhoneType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipPhoneType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
        if self.Extension is not None:
            namespaceprefix_ = self.Extension_nsprefix_ + ':' if (UseCapturedNS_ and self.Extension_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExtension>%s</%sExtension>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Extension), input_name='Extension')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
        elif nodeName_ == 'Extension':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Extension')
            value_ = self.gds_validate_string(value_, node, 'Extension')
            self.Extension = value_
            self.Extension_nsprefix_ = child_.prefix
# end class ShipPhoneType


class ShipAddressType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AddressLine=None, City=None, StateProvinceCode=None, PostalCode=None, CountryCode=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if AddressLine is None:
            self.AddressLine = []
        else:
            self.AddressLine = AddressLine
        self.AddressLine_nsprefix_ = None
        self.City = City
        self.City_nsprefix_ = None
        self.StateProvinceCode = StateProvinceCode
        self.StateProvinceCode_nsprefix_ = None
        self.PostalCode = PostalCode
        self.PostalCode_nsprefix_ = None
        self.CountryCode = CountryCode
        self.CountryCode_nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipAddressType.subclass:
            return ShipAddressType.subclass(*args_, **kwargs_)
        else:
            return ShipAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AddressLine(self):
        return self.AddressLine
    def set_AddressLine(self, AddressLine):
        self.AddressLine = AddressLine
    def add_AddressLine(self, value):
        self.AddressLine.append(value)
    def insert_AddressLine_at(self, index, value):
        self.AddressLine.insert(index, value)
    def replace_AddressLine_at(self, index, value):
        self.AddressLine[index] = value
    def get_City(self):
        return self.City
    def set_City(self, City):
        self.City = City
    def get_StateProvinceCode(self):
        return self.StateProvinceCode
    def set_StateProvinceCode(self, StateProvinceCode):
        self.StateProvinceCode = StateProvinceCode
    def get_PostalCode(self):
        return self.PostalCode
    def set_PostalCode(self, PostalCode):
        self.PostalCode = PostalCode
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (
            self.AddressLine or
            self.City is not None or
            self.StateProvinceCode is not None or
            self.PostalCode is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipAddressType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipAddressType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipAddressType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AddressLine_ in self.AddressLine:
            namespaceprefix_ = self.AddressLine_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressLine_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressLine>%s</%sAddressLine>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(AddressLine_), input_name='AddressLine')), namespaceprefix_ , eol_))
        if self.City is not None:
            namespaceprefix_ = self.City_nsprefix_ + ':' if (UseCapturedNS_ and self.City_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCity>%s</%sCity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), namespaceprefix_ , eol_))
        if self.StateProvinceCode is not None:
            namespaceprefix_ = self.StateProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.StateProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStateProvinceCode>%s</%sStateProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StateProvinceCode), input_name='StateProvinceCode')), namespaceprefix_ , eol_))
        if self.PostalCode is not None:
            namespaceprefix_ = self.PostalCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PostalCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AddressLine':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AddressLine')
            value_ = self.gds_validate_string(value_, node, 'AddressLine')
            self.AddressLine.append(value_)
            self.AddressLine_nsprefix_ = child_.prefix
        elif nodeName_ == 'City':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'City')
            value_ = self.gds_validate_string(value_, node, 'City')
            self.City = value_
            self.City_nsprefix_ = child_.prefix
        elif nodeName_ == 'StateProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StateProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'StateProvinceCode')
            self.StateProvinceCode = value_
            self.StateProvinceCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'PostalCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PostalCode')
            value_ = self.gds_validate_string(value_, node, 'PostalCode')
            self.PostalCode = value_
            self.PostalCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
# end class ShipAddressType


class ShipToType(CompanyInfoType):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = CompanyInfoType
    def __init__(self, Name=None, AttentionName=None, CompanyDisplayableName=None, TaxIdentificationNumber=None, TaxIDType=None, Phone=None, FaxNumber=None, EMailAddress=None, Address=None, LocationID=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(ShipToType, self).__init__(Name, AttentionName, CompanyDisplayableName, TaxIdentificationNumber, TaxIDType, Phone,  **kwargs_)
        self.FaxNumber = FaxNumber
        self.FaxNumber_nsprefix_ = None
        self.EMailAddress = EMailAddress
        self.EMailAddress_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
        self.LocationID = LocationID
        self.LocationID_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipToType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipToType.subclass:
            return ShipToType.subclass(*args_, **kwargs_)
        else:
            return ShipToType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FaxNumber(self):
        return self.FaxNumber
    def set_FaxNumber(self, FaxNumber):
        self.FaxNumber = FaxNumber
    def get_EMailAddress(self):
        return self.EMailAddress
    def set_EMailAddress(self, EMailAddress):
        self.EMailAddress = EMailAddress
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def get_LocationID(self):
        return self.LocationID
    def set_LocationID(self, LocationID):
        self.LocationID = LocationID
    def hasContent_(self):
        if (
            self.FaxNumber is not None or
            self.EMailAddress is not None or
            self.Address is not None or
            self.LocationID is not None or
            super(ShipToType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipToType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipToType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipToType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipToType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipToType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipToType'):
        super(ShipToType, self).exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipToType')
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipToType', fromsubclass_=False, pretty_print=True):
        super(ShipToType, self).exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FaxNumber is not None:
            namespaceprefix_ = self.FaxNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.FaxNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFaxNumber>%s</%sFaxNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FaxNumber), input_name='FaxNumber')), namespaceprefix_ , eol_))
        if self.EMailAddress is not None:
            namespaceprefix_ = self.EMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
        if self.LocationID is not None:
            namespaceprefix_ = self.LocationID_nsprefix_ + ':' if (UseCapturedNS_ and self.LocationID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationID>%s</%sLocationID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocationID), input_name='LocationID')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(ShipToType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FaxNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FaxNumber')
            value_ = self.gds_validate_string(value_, node, 'FaxNumber')
            self.FaxNumber = value_
            self.FaxNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'EMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EMailAddress')
            value_ = self.gds_validate_string(value_, node, 'EMailAddress')
            self.EMailAddress = value_
            self.EMailAddress_nsprefix_ = child_.prefix
        elif nodeName_ == 'Address':
            obj_ = ShipToAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'LocationID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocationID')
            value_ = self.gds_validate_string(value_, node, 'LocationID')
            self.LocationID = value_
            self.LocationID_nsprefix_ = child_.prefix
        super(ShipToType, self).buildChildren(child_, node, nodeName_, True)
# end class ShipToType


class ShipToAddressType(ShipAddressType):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = ShipAddressType
    def __init__(self, AddressLine=None, City=None, StateProvinceCode=None, PostalCode=None, CountryCode=None, ResidentialAddressIndicator=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(ShipToAddressType, self).__init__(AddressLine, City, StateProvinceCode, PostalCode, CountryCode,  **kwargs_)
        self.ResidentialAddressIndicator = ResidentialAddressIndicator
        self.ResidentialAddressIndicator_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipToAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipToAddressType.subclass:
            return ShipToAddressType.subclass(*args_, **kwargs_)
        else:
            return ShipToAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ResidentialAddressIndicator(self):
        return self.ResidentialAddressIndicator
    def set_ResidentialAddressIndicator(self, ResidentialAddressIndicator):
        self.ResidentialAddressIndicator = ResidentialAddressIndicator
    def hasContent_(self):
        if (
            self.ResidentialAddressIndicator is not None or
            super(ShipToAddressType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipToAddressType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipToAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipToAddressType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipToAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipToAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipToAddressType'):
        super(ShipToAddressType, self).exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipToAddressType')
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipToAddressType', fromsubclass_=False, pretty_print=True):
        super(ShipToAddressType, self).exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ResidentialAddressIndicator is not None:
            namespaceprefix_ = self.ResidentialAddressIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.ResidentialAddressIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sResidentialAddressIndicator>%s</%sResidentialAddressIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ResidentialAddressIndicator), input_name='ResidentialAddressIndicator')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(ShipToAddressType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ResidentialAddressIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ResidentialAddressIndicator')
            value_ = self.gds_validate_string(value_, node, 'ResidentialAddressIndicator')
            self.ResidentialAddressIndicator = value_
            self.ResidentialAddressIndicator_nsprefix_ = child_.prefix
        super(ShipToAddressType, self).buildChildren(child_, node, nodeName_, True)
# end class ShipToAddressType


class ShipFromType(CompanyInfoType):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = CompanyInfoType
    def __init__(self, Name=None, AttentionName=None, CompanyDisplayableName=None, TaxIdentificationNumber=None, TaxIDType=None, Phone=None, FaxNumber=None, Address=None, EMailAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(ShipFromType, self).__init__(Name, AttentionName, CompanyDisplayableName, TaxIdentificationNumber, TaxIDType, Phone,  **kwargs_)
        self.FaxNumber = FaxNumber
        self.FaxNumber_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
        self.EMailAddress = EMailAddress
        self.EMailAddress_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipFromType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipFromType.subclass:
            return ShipFromType.subclass(*args_, **kwargs_)
        else:
            return ShipFromType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FaxNumber(self):
        return self.FaxNumber
    def set_FaxNumber(self, FaxNumber):
        self.FaxNumber = FaxNumber
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def get_EMailAddress(self):
        return self.EMailAddress
    def set_EMailAddress(self, EMailAddress):
        self.EMailAddress = EMailAddress
    def hasContent_(self):
        if (
            self.FaxNumber is not None or
            self.Address is not None or
            self.EMailAddress is not None or
            super(ShipFromType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipFromType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipFromType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipFromType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipFromType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipFromType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipFromType'):
        super(ShipFromType, self).exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipFromType')
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipFromType', fromsubclass_=False, pretty_print=True):
        super(ShipFromType, self).exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FaxNumber is not None:
            namespaceprefix_ = self.FaxNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.FaxNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFaxNumber>%s</%sFaxNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FaxNumber), input_name='FaxNumber')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
        if self.EMailAddress is not None:
            namespaceprefix_ = self.EMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(ShipFromType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FaxNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FaxNumber')
            value_ = self.gds_validate_string(value_, node, 'FaxNumber')
            self.FaxNumber = value_
            self.FaxNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Address':
            class_obj_ = self.get_class_obj_(child_, ShipAddressType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'EMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EMailAddress')
            value_ = self.gds_validate_string(value_, node, 'EMailAddress')
            self.EMailAddress = value_
            self.EMailAddress_nsprefix_ = child_.prefix
        super(ShipFromType, self).buildChildren(child_, node, nodeName_, True)
# end class ShipFromType


class PrepaidType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, BillShipper=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.BillShipper = BillShipper
        self.BillShipper_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PrepaidType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PrepaidType.subclass:
            return PrepaidType.subclass(*args_, **kwargs_)
        else:
            return PrepaidType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_BillShipper(self):
        return self.BillShipper
    def set_BillShipper(self, BillShipper):
        self.BillShipper = BillShipper
    def hasContent_(self):
        if (
            self.BillShipper is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PrepaidType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PrepaidType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PrepaidType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PrepaidType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PrepaidType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PrepaidType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PrepaidType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BillShipper is not None:
            namespaceprefix_ = self.BillShipper_nsprefix_ + ':' if (UseCapturedNS_ and self.BillShipper_nsprefix_) else ''
            self.BillShipper.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BillShipper', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'BillShipper':
            obj_ = BillShipperType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BillShipper = obj_
            obj_.original_tagname_ = 'BillShipper'
# end class PrepaidType


class BillShipperType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, CreditCard=None, AlternatePaymentMethod=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AccountNumber = AccountNumber
        self.AccountNumber_nsprefix_ = None
        self.CreditCard = CreditCard
        self.CreditCard_nsprefix_ = None
        self.AlternatePaymentMethod = AlternatePaymentMethod
        self.AlternatePaymentMethod_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BillShipperType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BillShipperType.subclass:
            return BillShipperType.subclass(*args_, **kwargs_)
        else:
            return BillShipperType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AccountNumber(self):
        return self.AccountNumber
    def set_AccountNumber(self, AccountNumber):
        self.AccountNumber = AccountNumber
    def get_CreditCard(self):
        return self.CreditCard
    def set_CreditCard(self, CreditCard):
        self.CreditCard = CreditCard
    def get_AlternatePaymentMethod(self):
        return self.AlternatePaymentMethod
    def set_AlternatePaymentMethod(self, AlternatePaymentMethod):
        self.AlternatePaymentMethod = AlternatePaymentMethod
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.CreditCard is not None or
            self.AlternatePaymentMethod is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BillShipperType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BillShipperType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BillShipperType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BillShipperType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BillShipperType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BillShipperType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BillShipperType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountNumber is not None:
            namespaceprefix_ = self.AccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), namespaceprefix_ , eol_))
        if self.CreditCard is not None:
            namespaceprefix_ = self.CreditCard_nsprefix_ + ':' if (UseCapturedNS_ and self.CreditCard_nsprefix_) else ''
            self.CreditCard.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CreditCard', pretty_print=pretty_print)
        if self.AlternatePaymentMethod is not None:
            namespaceprefix_ = self.AlternatePaymentMethod_nsprefix_ + ':' if (UseCapturedNS_ and self.AlternatePaymentMethod_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAlternatePaymentMethod>%s</%sAlternatePaymentMethod>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AlternatePaymentMethod), input_name='AlternatePaymentMethod')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountNumber')
            value_ = self.gds_validate_string(value_, node, 'AccountNumber')
            self.AccountNumber = value_
            self.AccountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'CreditCard':
            obj_ = CreditCardType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CreditCard = obj_
            obj_.original_tagname_ = 'CreditCard'
        elif nodeName_ == 'AlternatePaymentMethod':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AlternatePaymentMethod')
            value_ = self.gds_validate_string(value_, node, 'AlternatePaymentMethod')
            self.AlternatePaymentMethod = value_
            self.AlternatePaymentMethod_nsprefix_ = child_.prefix
# end class BillShipperType


class CreditCardType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Number=None, ExpirationDate=None, SecurityCode=None, Address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.Type_nsprefix_ = None
        self.Number = Number
        self.Number_nsprefix_ = None
        self.ExpirationDate = ExpirationDate
        self.ExpirationDate_nsprefix_ = None
        self.SecurityCode = SecurityCode
        self.SecurityCode_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CreditCardType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CreditCardType.subclass:
            return CreditCardType.subclass(*args_, **kwargs_)
        else:
            return CreditCardType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_ExpirationDate(self):
        return self.ExpirationDate
    def set_ExpirationDate(self, ExpirationDate):
        self.ExpirationDate = ExpirationDate
    def get_SecurityCode(self):
        return self.SecurityCode
    def set_SecurityCode(self, SecurityCode):
        self.SecurityCode = SecurityCode
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Number is not None or
            self.ExpirationDate is not None or
            self.SecurityCode is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CreditCardType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CreditCardType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CreditCardType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CreditCardType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CreditCardType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CreditCardType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CreditCardType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
        if self.ExpirationDate is not None:
            namespaceprefix_ = self.ExpirationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ExpirationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExpirationDate>%s</%sExpirationDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExpirationDate), input_name='ExpirationDate')), namespaceprefix_ , eol_))
        if self.SecurityCode is not None:
            namespaceprefix_ = self.SecurityCode_nsprefix_ + ':' if (UseCapturedNS_ and self.SecurityCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSecurityCode>%s</%sSecurityCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SecurityCode), input_name='SecurityCode')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
        elif nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
        elif nodeName_ == 'ExpirationDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExpirationDate')
            value_ = self.gds_validate_string(value_, node, 'ExpirationDate')
            self.ExpirationDate = value_
            self.ExpirationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'SecurityCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SecurityCode')
            value_ = self.gds_validate_string(value_, node, 'SecurityCode')
            self.SecurityCode = value_
            self.SecurityCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'Address':
            obj_ = CreditCardAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class CreditCardType


class CreditCardAddressType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AddressLine=None, City=None, StateProvinceCode=None, PostalCode=None, CountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if AddressLine is None:
            self.AddressLine = []
        else:
            self.AddressLine = AddressLine
        self.AddressLine_nsprefix_ = None
        self.City = City
        self.City_nsprefix_ = None
        self.StateProvinceCode = StateProvinceCode
        self.StateProvinceCode_nsprefix_ = None
        self.PostalCode = PostalCode
        self.PostalCode_nsprefix_ = None
        self.CountryCode = CountryCode
        self.CountryCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CreditCardAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CreditCardAddressType.subclass:
            return CreditCardAddressType.subclass(*args_, **kwargs_)
        else:
            return CreditCardAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AddressLine(self):
        return self.AddressLine
    def set_AddressLine(self, AddressLine):
        self.AddressLine = AddressLine
    def add_AddressLine(self, value):
        self.AddressLine.append(value)
    def insert_AddressLine_at(self, index, value):
        self.AddressLine.insert(index, value)
    def replace_AddressLine_at(self, index, value):
        self.AddressLine[index] = value
    def get_City(self):
        return self.City
    def set_City(self, City):
        self.City = City
    def get_StateProvinceCode(self):
        return self.StateProvinceCode
    def set_StateProvinceCode(self, StateProvinceCode):
        self.StateProvinceCode = StateProvinceCode
    def get_PostalCode(self):
        return self.PostalCode
    def set_PostalCode(self, PostalCode):
        self.PostalCode = PostalCode
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def hasContent_(self):
        if (
            self.AddressLine or
            self.City is not None or
            self.StateProvinceCode is not None or
            self.PostalCode is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CreditCardAddressType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CreditCardAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CreditCardAddressType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CreditCardAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CreditCardAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CreditCardAddressType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CreditCardAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AddressLine_ in self.AddressLine:
            namespaceprefix_ = self.AddressLine_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressLine_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressLine>%s</%sAddressLine>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(AddressLine_), input_name='AddressLine')), namespaceprefix_ , eol_))
        if self.City is not None:
            namespaceprefix_ = self.City_nsprefix_ + ':' if (UseCapturedNS_ and self.City_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCity>%s</%sCity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), namespaceprefix_ , eol_))
        if self.StateProvinceCode is not None:
            namespaceprefix_ = self.StateProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.StateProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStateProvinceCode>%s</%sStateProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StateProvinceCode), input_name='StateProvinceCode')), namespaceprefix_ , eol_))
        if self.PostalCode is not None:
            namespaceprefix_ = self.PostalCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PostalCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AddressLine':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AddressLine')
            value_ = self.gds_validate_string(value_, node, 'AddressLine')
            self.AddressLine.append(value_)
            self.AddressLine_nsprefix_ = child_.prefix
        elif nodeName_ == 'City':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'City')
            value_ = self.gds_validate_string(value_, node, 'City')
            self.City = value_
            self.City_nsprefix_ = child_.prefix
        elif nodeName_ == 'StateProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StateProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'StateProvinceCode')
            self.StateProvinceCode = value_
            self.StateProvinceCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'PostalCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PostalCode')
            value_ = self.gds_validate_string(value_, node, 'PostalCode')
            self.PostalCode = value_
            self.PostalCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
# end class CreditCardAddressType


class BillThirdPartyChargeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, Address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AccountNumber = AccountNumber
        self.AccountNumber_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BillThirdPartyChargeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BillThirdPartyChargeType.subclass:
            return BillThirdPartyChargeType.subclass(*args_, **kwargs_)
        else:
            return BillThirdPartyChargeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AccountNumber(self):
        return self.AccountNumber
    def set_AccountNumber(self, AccountNumber):
        self.AccountNumber = AccountNumber
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BillThirdPartyChargeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BillThirdPartyChargeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BillThirdPartyChargeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BillThirdPartyChargeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BillThirdPartyChargeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BillThirdPartyChargeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BillThirdPartyChargeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountNumber is not None:
            namespaceprefix_ = self.AccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountNumber')
            value_ = self.gds_validate_string(value_, node, 'AccountNumber')
            self.AccountNumber = value_
            self.AccountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Address':
            obj_ = AccountAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class BillThirdPartyChargeType


class AccountAddressType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PostalCode=None, CountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PostalCode = PostalCode
        self.PostalCode_nsprefix_ = None
        self.CountryCode = CountryCode
        self.CountryCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AccountAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AccountAddressType.subclass:
            return AccountAddressType.subclass(*args_, **kwargs_)
        else:
            return AccountAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PostalCode(self):
        return self.PostalCode
    def set_PostalCode(self, PostalCode):
        self.PostalCode = PostalCode
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def hasContent_(self):
        if (
            self.PostalCode is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AccountAddressType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AccountAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AccountAddressType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AccountAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AccountAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AccountAddressType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AccountAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PostalCode is not None:
            namespaceprefix_ = self.PostalCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PostalCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PostalCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PostalCode')
            value_ = self.gds_validate_string(value_, node, 'PostalCode')
            self.PostalCode = value_
            self.PostalCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
# end class AccountAddressType


class FreightCollectType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, BillReceiver=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.BillReceiver = BillReceiver
        self.BillReceiver_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightCollectType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightCollectType.subclass:
            return FreightCollectType.subclass(*args_, **kwargs_)
        else:
            return FreightCollectType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_BillReceiver(self):
        return self.BillReceiver
    def set_BillReceiver(self, BillReceiver):
        self.BillReceiver = BillReceiver
    def hasContent_(self):
        if (
            self.BillReceiver is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightCollectType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightCollectType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightCollectType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightCollectType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightCollectType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightCollectType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightCollectType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BillReceiver is not None:
            namespaceprefix_ = self.BillReceiver_nsprefix_ + ':' if (UseCapturedNS_ and self.BillReceiver_nsprefix_) else ''
            self.BillReceiver.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BillReceiver', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'BillReceiver':
            obj_ = BillReceiverType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BillReceiver = obj_
            obj_.original_tagname_ = 'BillReceiver'
# end class FreightCollectType


class BillReceiverType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, Address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AccountNumber = AccountNumber
        self.AccountNumber_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BillReceiverType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BillReceiverType.subclass:
            return BillReceiverType.subclass(*args_, **kwargs_)
        else:
            return BillReceiverType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AccountNumber(self):
        return self.AccountNumber
    def set_AccountNumber(self, AccountNumber):
        self.AccountNumber = AccountNumber
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BillReceiverType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BillReceiverType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BillReceiverType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BillReceiverType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BillReceiverType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BillReceiverType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BillReceiverType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountNumber is not None:
            namespaceprefix_ = self.AccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountNumber')
            value_ = self.gds_validate_string(value_, node, 'AccountNumber')
            self.AccountNumber = value_
            self.AccountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Address':
            obj_ = BillReceiverAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class BillReceiverType


class BillReceiverAddressType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PostalCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PostalCode = PostalCode
        self.PostalCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BillReceiverAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BillReceiverAddressType.subclass:
            return BillReceiverAddressType.subclass(*args_, **kwargs_)
        else:
            return BillReceiverAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PostalCode(self):
        return self.PostalCode
    def set_PostalCode(self, PostalCode):
        self.PostalCode = PostalCode
    def hasContent_(self):
        if (
            self.PostalCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BillReceiverAddressType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BillReceiverAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BillReceiverAddressType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BillReceiverAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BillReceiverAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BillReceiverAddressType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BillReceiverAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PostalCode is not None:
            namespaceprefix_ = self.PostalCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PostalCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PostalCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PostalCode')
            value_ = self.gds_validate_string(value_, node, 'PostalCode')
            self.PostalCode = value_
            self.PostalCode_nsprefix_ = child_.prefix
# end class BillReceiverAddressType


class PaymentInfoType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ShipmentCharge=None, SplitDutyVATIndicator=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if ShipmentCharge is None:
            self.ShipmentCharge = []
        else:
            self.ShipmentCharge = ShipmentCharge
        self.ShipmentCharge_nsprefix_ = None
        self.SplitDutyVATIndicator = SplitDutyVATIndicator
        self.SplitDutyVATIndicator_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PaymentInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PaymentInfoType.subclass:
            return PaymentInfoType.subclass(*args_, **kwargs_)
        else:
            return PaymentInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ShipmentCharge(self):
        return self.ShipmentCharge
    def set_ShipmentCharge(self, ShipmentCharge):
        self.ShipmentCharge = ShipmentCharge
    def add_ShipmentCharge(self, value):
        self.ShipmentCharge.append(value)
    def insert_ShipmentCharge_at(self, index, value):
        self.ShipmentCharge.insert(index, value)
    def replace_ShipmentCharge_at(self, index, value):
        self.ShipmentCharge[index] = value
    def get_SplitDutyVATIndicator(self):
        return self.SplitDutyVATIndicator
    def set_SplitDutyVATIndicator(self, SplitDutyVATIndicator):
        self.SplitDutyVATIndicator = SplitDutyVATIndicator
    def hasContent_(self):
        if (
            self.ShipmentCharge or
            self.SplitDutyVATIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PaymentInfoType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PaymentInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PaymentInfoType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PaymentInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PaymentInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PaymentInfoType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PaymentInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ShipmentCharge_ in self.ShipmentCharge:
            namespaceprefix_ = self.ShipmentCharge_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentCharge_nsprefix_) else ''
            ShipmentCharge_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentCharge', pretty_print=pretty_print)
        if self.SplitDutyVATIndicator is not None:
            namespaceprefix_ = self.SplitDutyVATIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.SplitDutyVATIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSplitDutyVATIndicator>%s</%sSplitDutyVATIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SplitDutyVATIndicator), input_name='SplitDutyVATIndicator')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ShipmentCharge':
            obj_ = ShipmentChargeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentCharge.append(obj_)
            obj_.original_tagname_ = 'ShipmentCharge'
        elif nodeName_ == 'SplitDutyVATIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SplitDutyVATIndicator')
            value_ = self.gds_validate_string(value_, node, 'SplitDutyVATIndicator')
            self.SplitDutyVATIndicator = value_
            self.SplitDutyVATIndicator_nsprefix_ = child_.prefix
# end class PaymentInfoType


class ShipmentChargeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, BillShipper=None, BillReceiver=None, BillThirdParty=None, ConsigneeBilledIndicator=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.Type_nsprefix_ = None
        self.BillShipper = BillShipper
        self.BillShipper_nsprefix_ = None
        self.BillReceiver = BillReceiver
        self.BillReceiver_nsprefix_ = None
        self.BillThirdParty = BillThirdParty
        self.BillThirdParty_nsprefix_ = None
        self.ConsigneeBilledIndicator = ConsigneeBilledIndicator
        self.ConsigneeBilledIndicator_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentChargeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentChargeType.subclass:
            return ShipmentChargeType.subclass(*args_, **kwargs_)
        else:
            return ShipmentChargeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_BillShipper(self):
        return self.BillShipper
    def set_BillShipper(self, BillShipper):
        self.BillShipper = BillShipper
    def get_BillReceiver(self):
        return self.BillReceiver
    def set_BillReceiver(self, BillReceiver):
        self.BillReceiver = BillReceiver
    def get_BillThirdParty(self):
        return self.BillThirdParty
    def set_BillThirdParty(self, BillThirdParty):
        self.BillThirdParty = BillThirdParty
    def get_ConsigneeBilledIndicator(self):
        return self.ConsigneeBilledIndicator
    def set_ConsigneeBilledIndicator(self, ConsigneeBilledIndicator):
        self.ConsigneeBilledIndicator = ConsigneeBilledIndicator
    def hasContent_(self):
        if (
            self.Type is not None or
            self.BillShipper is not None or
            self.BillReceiver is not None or
            self.BillThirdParty is not None or
            self.ConsigneeBilledIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentChargeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentChargeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentChargeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentChargeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentChargeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentChargeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentChargeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.BillShipper is not None:
            namespaceprefix_ = self.BillShipper_nsprefix_ + ':' if (UseCapturedNS_ and self.BillShipper_nsprefix_) else ''
            self.BillShipper.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BillShipper', pretty_print=pretty_print)
        if self.BillReceiver is not None:
            namespaceprefix_ = self.BillReceiver_nsprefix_ + ':' if (UseCapturedNS_ and self.BillReceiver_nsprefix_) else ''
            self.BillReceiver.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BillReceiver', pretty_print=pretty_print)
        if self.BillThirdParty is not None:
            namespaceprefix_ = self.BillThirdParty_nsprefix_ + ':' if (UseCapturedNS_ and self.BillThirdParty_nsprefix_) else ''
            self.BillThirdParty.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BillThirdParty', pretty_print=pretty_print)
        if self.ConsigneeBilledIndicator is not None:
            namespaceprefix_ = self.ConsigneeBilledIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.ConsigneeBilledIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConsigneeBilledIndicator>%s</%sConsigneeBilledIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ConsigneeBilledIndicator), input_name='ConsigneeBilledIndicator')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
        elif nodeName_ == 'BillShipper':
            obj_ = BillShipperType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BillShipper = obj_
            obj_.original_tagname_ = 'BillShipper'
        elif nodeName_ == 'BillReceiver':
            obj_ = BillReceiverType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BillReceiver = obj_
            obj_.original_tagname_ = 'BillReceiver'
        elif nodeName_ == 'BillThirdParty':
            obj_ = BillThirdPartyChargeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BillThirdParty = obj_
            obj_.original_tagname_ = 'BillThirdParty'
        elif nodeName_ == 'ConsigneeBilledIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ConsigneeBilledIndicator')
            value_ = self.gds_validate_string(value_, node, 'ConsigneeBilledIndicator')
            self.ConsigneeBilledIndicator = value_
            self.ConsigneeBilledIndicator_nsprefix_ = child_.prefix
# end class ShipmentChargeType


class FRSPaymentInfoType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, AccountNumber=None, Address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.Type_nsprefix_ = None
        self.AccountNumber = AccountNumber
        self.AccountNumber_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FRSPaymentInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FRSPaymentInfoType.subclass:
            return FRSPaymentInfoType.subclass(*args_, **kwargs_)
        else:
            return FRSPaymentInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_AccountNumber(self):
        return self.AccountNumber
    def set_AccountNumber(self, AccountNumber):
        self.AccountNumber = AccountNumber
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def hasContent_(self):
        if (
            self.Type is not None or
            self.AccountNumber is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FRSPaymentInfoType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FRSPaymentInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FRSPaymentInfoType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FRSPaymentInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FRSPaymentInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FRSPaymentInfoType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FRSPaymentInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            self.Type.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Type', pretty_print=pretty_print)
        if self.AccountNumber is not None:
            namespaceprefix_ = self.AccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            obj_ = PaymentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Type = obj_
            obj_.original_tagname_ = 'Type'
        elif nodeName_ == 'AccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountNumber')
            value_ = self.gds_validate_string(value_, node, 'AccountNumber')
            self.AccountNumber = value_
            self.AccountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Address':
            obj_ = AccountAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class FRSPaymentInfoType


class PaymentType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PaymentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PaymentType.subclass:
            return PaymentType.subclass(*args_, **kwargs_)
        else:
            return PaymentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PaymentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PaymentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PaymentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PaymentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PaymentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PaymentType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PaymentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class PaymentType


class RateInfoType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, NegotiatedRatesIndicator=None, FRSShipmentIndicator=None, RateChartIndicator=None, TPFCNegotiatedRatesIndicator=None, UserLevelDiscountIndicator=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.NegotiatedRatesIndicator = NegotiatedRatesIndicator
        self.NegotiatedRatesIndicator_nsprefix_ = None
        self.FRSShipmentIndicator = FRSShipmentIndicator
        self.FRSShipmentIndicator_nsprefix_ = None
        self.RateChartIndicator = RateChartIndicator
        self.RateChartIndicator_nsprefix_ = None
        self.TPFCNegotiatedRatesIndicator = TPFCNegotiatedRatesIndicator
        self.TPFCNegotiatedRatesIndicator_nsprefix_ = None
        self.UserLevelDiscountIndicator = UserLevelDiscountIndicator
        self.UserLevelDiscountIndicator_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RateInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RateInfoType.subclass:
            return RateInfoType.subclass(*args_, **kwargs_)
        else:
            return RateInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_NegotiatedRatesIndicator(self):
        return self.NegotiatedRatesIndicator
    def set_NegotiatedRatesIndicator(self, NegotiatedRatesIndicator):
        self.NegotiatedRatesIndicator = NegotiatedRatesIndicator
    def get_FRSShipmentIndicator(self):
        return self.FRSShipmentIndicator
    def set_FRSShipmentIndicator(self, FRSShipmentIndicator):
        self.FRSShipmentIndicator = FRSShipmentIndicator
    def get_RateChartIndicator(self):
        return self.RateChartIndicator
    def set_RateChartIndicator(self, RateChartIndicator):
        self.RateChartIndicator = RateChartIndicator
    def get_TPFCNegotiatedRatesIndicator(self):
        return self.TPFCNegotiatedRatesIndicator
    def set_TPFCNegotiatedRatesIndicator(self, TPFCNegotiatedRatesIndicator):
        self.TPFCNegotiatedRatesIndicator = TPFCNegotiatedRatesIndicator
    def get_UserLevelDiscountIndicator(self):
        return self.UserLevelDiscountIndicator
    def set_UserLevelDiscountIndicator(self, UserLevelDiscountIndicator):
        self.UserLevelDiscountIndicator = UserLevelDiscountIndicator
    def hasContent_(self):
        if (
            self.NegotiatedRatesIndicator is not None or
            self.FRSShipmentIndicator is not None or
            self.RateChartIndicator is not None or
            self.TPFCNegotiatedRatesIndicator is not None or
            self.UserLevelDiscountIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RateInfoType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RateInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RateInfoType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RateInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RateInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RateInfoType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RateInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NegotiatedRatesIndicator is not None:
            namespaceprefix_ = self.NegotiatedRatesIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.NegotiatedRatesIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNegotiatedRatesIndicator>%s</%sNegotiatedRatesIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NegotiatedRatesIndicator), input_name='NegotiatedRatesIndicator')), namespaceprefix_ , eol_))
        if self.FRSShipmentIndicator is not None:
            namespaceprefix_ = self.FRSShipmentIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.FRSShipmentIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFRSShipmentIndicator>%s</%sFRSShipmentIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FRSShipmentIndicator), input_name='FRSShipmentIndicator')), namespaceprefix_ , eol_))
        if self.RateChartIndicator is not None:
            namespaceprefix_ = self.RateChartIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.RateChartIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateChartIndicator>%s</%sRateChartIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateChartIndicator), input_name='RateChartIndicator')), namespaceprefix_ , eol_))
        if self.TPFCNegotiatedRatesIndicator is not None:
            namespaceprefix_ = self.TPFCNegotiatedRatesIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.TPFCNegotiatedRatesIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTPFCNegotiatedRatesIndicator>%s</%sTPFCNegotiatedRatesIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TPFCNegotiatedRatesIndicator), input_name='TPFCNegotiatedRatesIndicator')), namespaceprefix_ , eol_))
        if self.UserLevelDiscountIndicator is not None:
            namespaceprefix_ = self.UserLevelDiscountIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.UserLevelDiscountIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUserLevelDiscountIndicator>%s</%sUserLevelDiscountIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UserLevelDiscountIndicator), input_name='UserLevelDiscountIndicator')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'NegotiatedRatesIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NegotiatedRatesIndicator')
            value_ = self.gds_validate_string(value_, node, 'NegotiatedRatesIndicator')
            self.NegotiatedRatesIndicator = value_
            self.NegotiatedRatesIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'FRSShipmentIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FRSShipmentIndicator')
            value_ = self.gds_validate_string(value_, node, 'FRSShipmentIndicator')
            self.FRSShipmentIndicator = value_
            self.FRSShipmentIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'RateChartIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RateChartIndicator')
            value_ = self.gds_validate_string(value_, node, 'RateChartIndicator')
            self.RateChartIndicator = value_
            self.RateChartIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'TPFCNegotiatedRatesIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TPFCNegotiatedRatesIndicator')
            value_ = self.gds_validate_string(value_, node, 'TPFCNegotiatedRatesIndicator')
            self.TPFCNegotiatedRatesIndicator = value_
            self.TPFCNegotiatedRatesIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'UserLevelDiscountIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UserLevelDiscountIndicator')
            value_ = self.gds_validate_string(value_, node, 'UserLevelDiscountIndicator')
            self.UserLevelDiscountIndicator = value_
            self.UserLevelDiscountIndicator_nsprefix_ = child_.prefix
# end class RateInfoType


class ReferenceNumberType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, BarCodeIndicator=None, Code=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.BarCodeIndicator = BarCodeIndicator
        self.BarCodeIndicator_nsprefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceNumberType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceNumberType.subclass:
            return ReferenceNumberType.subclass(*args_, **kwargs_)
        else:
            return ReferenceNumberType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_BarCodeIndicator(self):
        return self.BarCodeIndicator
    def set_BarCodeIndicator(self, BarCodeIndicator):
        self.BarCodeIndicator = BarCodeIndicator
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def hasContent_(self):
        if (
            self.BarCodeIndicator is not None or
            self.Code is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReferenceNumberType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReferenceNumberType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReferenceNumberType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReferenceNumberType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReferenceNumberType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReferenceNumberType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReferenceNumberType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BarCodeIndicator is not None:
            namespaceprefix_ = self.BarCodeIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.BarCodeIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBarCodeIndicator>%s</%sBarCodeIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BarCodeIndicator), input_name='BarCodeIndicator')), namespaceprefix_ , eol_))
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'BarCodeIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BarCodeIndicator')
            value_ = self.gds_validate_string(value_, node, 'BarCodeIndicator')
            self.BarCodeIndicator = value_
            self.BarCodeIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
# end class ReferenceNumberType


class ServiceType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceType.subclass:
            return ServiceType.subclass(*args_, **kwargs_)
        else:
            return ServiceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ServiceType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ServiceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ServiceType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ServiceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ServiceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ServiceType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ServiceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class ServiceType


class CurrencyMonetaryType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CurrencyCode = CurrencyCode
        self.CurrencyCode_nsprefix_ = None
        self.MonetaryValue = MonetaryValue
        self.MonetaryValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CurrencyMonetaryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CurrencyMonetaryType.subclass:
            return CurrencyMonetaryType.subclass(*args_, **kwargs_)
        else:
            return CurrencyMonetaryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CurrencyCode(self):
        return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode):
        self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self):
        return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue):
        self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CurrencyMonetaryType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CurrencyMonetaryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CurrencyMonetaryType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CurrencyMonetaryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CurrencyMonetaryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CurrencyMonetaryType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CurrencyMonetaryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            namespaceprefix_ = self.CurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyCode>%s</%sCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), namespaceprefix_ , eol_))
        if self.MonetaryValue is not None:
            namespaceprefix_ = self.MonetaryValue_nsprefix_ + ':' if (UseCapturedNS_ and self.MonetaryValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMonetaryValue>%s</%sMonetaryValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CurrencyCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'CurrencyCode')
            self.CurrencyCode = value_
            self.CurrencyCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'MonetaryValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MonetaryValue')
            value_ = self.gds_validate_string(value_, node, 'MonetaryValue')
            self.MonetaryValue = value_
            self.MonetaryValue_nsprefix_ = child_.prefix
# end class CurrencyMonetaryType


class ShipmentServiceOptionsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SaturdayDeliveryIndicator=None, SaturdayPickupIndicator=None, COD=None, AccessPointCOD=None, DeliverToAddresseeOnlyIndicator=None, DirectDeliveryOnlyIndicator=None, Notification=None, LabelDelivery=None, InternationalForms=None, DeliveryConfirmation=None, ReturnOfDocumentIndicator=None, ImportControlIndicator=None, LabelMethod=None, CommercialInvoiceRemovalIndicator=None, UPScarbonneutralIndicator=None, PreAlertNotification=None, ExchangeForwardIndicator=None, HoldForPickupIndicator=None, DropoffAtUPSFacilityIndicator=None, LiftGateForPickUpIndicator=None, LiftGateForDeliveryIndicator=None, SDLShipmentIndicator=None, EPRAReleaseCode=None, RestrictedArticles=None, InsideDelivery=None, ItemDisposal=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.SaturdayDeliveryIndicator = SaturdayDeliveryIndicator
        self.SaturdayDeliveryIndicator_nsprefix_ = None
        self.SaturdayPickupIndicator = SaturdayPickupIndicator
        self.SaturdayPickupIndicator_nsprefix_ = None
        self.COD = COD
        self.COD_nsprefix_ = None
        self.AccessPointCOD = AccessPointCOD
        self.AccessPointCOD_nsprefix_ = None
        self.DeliverToAddresseeOnlyIndicator = DeliverToAddresseeOnlyIndicator
        self.DeliverToAddresseeOnlyIndicator_nsprefix_ = None
        self.DirectDeliveryOnlyIndicator = DirectDeliveryOnlyIndicator
        self.DirectDeliveryOnlyIndicator_nsprefix_ = None
        if Notification is None:
            self.Notification = []
        else:
            self.Notification = Notification
        self.Notification_nsprefix_ = None
        self.LabelDelivery = LabelDelivery
        self.LabelDelivery_nsprefix_ = None
        self.InternationalForms = InternationalForms
        self.InternationalForms_nsprefix_ = None
        self.DeliveryConfirmation = DeliveryConfirmation
        self.DeliveryConfirmation_nsprefix_ = None
        self.ReturnOfDocumentIndicator = ReturnOfDocumentIndicator
        self.ReturnOfDocumentIndicator_nsprefix_ = None
        self.ImportControlIndicator = ImportControlIndicator
        self.ImportControlIndicator_nsprefix_ = None
        self.LabelMethod = LabelMethod
        self.LabelMethod_nsprefix_ = None
        self.CommercialInvoiceRemovalIndicator = CommercialInvoiceRemovalIndicator
        self.CommercialInvoiceRemovalIndicator_nsprefix_ = None
        self.UPScarbonneutralIndicator = UPScarbonneutralIndicator
        self.UPScarbonneutralIndicator_nsprefix_ = None
        if PreAlertNotification is None:
            self.PreAlertNotification = []
        else:
            self.PreAlertNotification = PreAlertNotification
        self.PreAlertNotification_nsprefix_ = None
        self.ExchangeForwardIndicator = ExchangeForwardIndicator
        self.ExchangeForwardIndicator_nsprefix_ = None
        self.HoldForPickupIndicator = HoldForPickupIndicator
        self.HoldForPickupIndicator_nsprefix_ = None
        self.DropoffAtUPSFacilityIndicator = DropoffAtUPSFacilityIndicator
        self.DropoffAtUPSFacilityIndicator_nsprefix_ = None
        self.LiftGateForPickUpIndicator = LiftGateForPickUpIndicator
        self.LiftGateForPickUpIndicator_nsprefix_ = None
        self.LiftGateForDeliveryIndicator = LiftGateForDeliveryIndicator
        self.LiftGateForDeliveryIndicator_nsprefix_ = None
        self.SDLShipmentIndicator = SDLShipmentIndicator
        self.SDLShipmentIndicator_nsprefix_ = None
        self.EPRAReleaseCode = EPRAReleaseCode
        self.EPRAReleaseCode_nsprefix_ = None
        self.RestrictedArticles = RestrictedArticles
        self.RestrictedArticles_nsprefix_ = None
        self.InsideDelivery = InsideDelivery
        self.InsideDelivery_nsprefix_ = None
        self.ItemDisposal = ItemDisposal
        self.ItemDisposal_nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentServiceOptionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentServiceOptionsType.subclass:
            return ShipmentServiceOptionsType.subclass(*args_, **kwargs_)
        else:
            return ShipmentServiceOptionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SaturdayDeliveryIndicator(self):
        return self.SaturdayDeliveryIndicator
    def set_SaturdayDeliveryIndicator(self, SaturdayDeliveryIndicator):
        self.SaturdayDeliveryIndicator = SaturdayDeliveryIndicator
    def get_SaturdayPickupIndicator(self):
        return self.SaturdayPickupIndicator
    def set_SaturdayPickupIndicator(self, SaturdayPickupIndicator):
        self.SaturdayPickupIndicator = SaturdayPickupIndicator
    def get_COD(self):
        return self.COD
    def set_COD(self, COD):
        self.COD = COD
    def get_AccessPointCOD(self):
        return self.AccessPointCOD
    def set_AccessPointCOD(self, AccessPointCOD):
        self.AccessPointCOD = AccessPointCOD
    def get_DeliverToAddresseeOnlyIndicator(self):
        return self.DeliverToAddresseeOnlyIndicator
    def set_DeliverToAddresseeOnlyIndicator(self, DeliverToAddresseeOnlyIndicator):
        self.DeliverToAddresseeOnlyIndicator = DeliverToAddresseeOnlyIndicator
    def get_DirectDeliveryOnlyIndicator(self):
        return self.DirectDeliveryOnlyIndicator
    def set_DirectDeliveryOnlyIndicator(self, DirectDeliveryOnlyIndicator):
        self.DirectDeliveryOnlyIndicator = DirectDeliveryOnlyIndicator
    def get_Notification(self):
        return self.Notification
    def set_Notification(self, Notification):
        self.Notification = Notification
    def add_Notification(self, value):
        self.Notification.append(value)
    def insert_Notification_at(self, index, value):
        self.Notification.insert(index, value)
    def replace_Notification_at(self, index, value):
        self.Notification[index] = value
    def get_LabelDelivery(self):
        return self.LabelDelivery
    def set_LabelDelivery(self, LabelDelivery):
        self.LabelDelivery = LabelDelivery
    def get_InternationalForms(self):
        return self.InternationalForms
    def set_InternationalForms(self, InternationalForms):
        self.InternationalForms = InternationalForms
    def get_DeliveryConfirmation(self):
        return self.DeliveryConfirmation
    def set_DeliveryConfirmation(self, DeliveryConfirmation):
        self.DeliveryConfirmation = DeliveryConfirmation
    def get_ReturnOfDocumentIndicator(self):
        return self.ReturnOfDocumentIndicator
    def set_ReturnOfDocumentIndicator(self, ReturnOfDocumentIndicator):
        self.ReturnOfDocumentIndicator = ReturnOfDocumentIndicator
    def get_ImportControlIndicator(self):
        return self.ImportControlIndicator
    def set_ImportControlIndicator(self, ImportControlIndicator):
        self.ImportControlIndicator = ImportControlIndicator
    def get_LabelMethod(self):
        return self.LabelMethod
    def set_LabelMethod(self, LabelMethod):
        self.LabelMethod = LabelMethod
    def get_CommercialInvoiceRemovalIndicator(self):
        return self.CommercialInvoiceRemovalIndicator
    def set_CommercialInvoiceRemovalIndicator(self, CommercialInvoiceRemovalIndicator):
        self.CommercialInvoiceRemovalIndicator = CommercialInvoiceRemovalIndicator
    def get_UPScarbonneutralIndicator(self):
        return self.UPScarbonneutralIndicator
    def set_UPScarbonneutralIndicator(self, UPScarbonneutralIndicator):
        self.UPScarbonneutralIndicator = UPScarbonneutralIndicator
    def get_PreAlertNotification(self):
        return self.PreAlertNotification
    def set_PreAlertNotification(self, PreAlertNotification):
        self.PreAlertNotification = PreAlertNotification
    def add_PreAlertNotification(self, value):
        self.PreAlertNotification.append(value)
    def insert_PreAlertNotification_at(self, index, value):
        self.PreAlertNotification.insert(index, value)
    def replace_PreAlertNotification_at(self, index, value):
        self.PreAlertNotification[index] = value
    def get_ExchangeForwardIndicator(self):
        return self.ExchangeForwardIndicator
    def set_ExchangeForwardIndicator(self, ExchangeForwardIndicator):
        self.ExchangeForwardIndicator = ExchangeForwardIndicator
    def get_HoldForPickupIndicator(self):
        return self.HoldForPickupIndicator
    def set_HoldForPickupIndicator(self, HoldForPickupIndicator):
        self.HoldForPickupIndicator = HoldForPickupIndicator
    def get_DropoffAtUPSFacilityIndicator(self):
        return self.DropoffAtUPSFacilityIndicator
    def set_DropoffAtUPSFacilityIndicator(self, DropoffAtUPSFacilityIndicator):
        self.DropoffAtUPSFacilityIndicator = DropoffAtUPSFacilityIndicator
    def get_LiftGateForPickUpIndicator(self):
        return self.LiftGateForPickUpIndicator
    def set_LiftGateForPickUpIndicator(self, LiftGateForPickUpIndicator):
        self.LiftGateForPickUpIndicator = LiftGateForPickUpIndicator
    def get_LiftGateForDeliveryIndicator(self):
        return self.LiftGateForDeliveryIndicator
    def set_LiftGateForDeliveryIndicator(self, LiftGateForDeliveryIndicator):
        self.LiftGateForDeliveryIndicator = LiftGateForDeliveryIndicator
    def get_SDLShipmentIndicator(self):
        return self.SDLShipmentIndicator
    def set_SDLShipmentIndicator(self, SDLShipmentIndicator):
        self.SDLShipmentIndicator = SDLShipmentIndicator
    def get_EPRAReleaseCode(self):
        return self.EPRAReleaseCode
    def set_EPRAReleaseCode(self, EPRAReleaseCode):
        self.EPRAReleaseCode = EPRAReleaseCode
    def get_RestrictedArticles(self):
        return self.RestrictedArticles
    def set_RestrictedArticles(self, RestrictedArticles):
        self.RestrictedArticles = RestrictedArticles
    def get_InsideDelivery(self):
        return self.InsideDelivery
    def set_InsideDelivery(self, InsideDelivery):
        self.InsideDelivery = InsideDelivery
    def get_ItemDisposal(self):
        return self.ItemDisposal
    def set_ItemDisposal(self, ItemDisposal):
        self.ItemDisposal = ItemDisposal
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (
            self.SaturdayDeliveryIndicator is not None or
            self.SaturdayPickupIndicator is not None or
            self.COD is not None or
            self.AccessPointCOD is not None or
            self.DeliverToAddresseeOnlyIndicator is not None or
            self.DirectDeliveryOnlyIndicator is not None or
            self.Notification or
            self.LabelDelivery is not None or
            self.InternationalForms is not None or
            self.DeliveryConfirmation is not None or
            self.ReturnOfDocumentIndicator is not None or
            self.ImportControlIndicator is not None or
            self.LabelMethod is not None or
            self.CommercialInvoiceRemovalIndicator is not None or
            self.UPScarbonneutralIndicator is not None or
            self.PreAlertNotification or
            self.ExchangeForwardIndicator is not None or
            self.HoldForPickupIndicator is not None or
            self.DropoffAtUPSFacilityIndicator is not None or
            self.LiftGateForPickUpIndicator is not None or
            self.LiftGateForDeliveryIndicator is not None or
            self.SDLShipmentIndicator is not None or
            self.EPRAReleaseCode is not None or
            self.RestrictedArticles is not None or
            self.InsideDelivery is not None or
            self.ItemDisposal is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentServiceOptionsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentServiceOptionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentServiceOptionsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentServiceOptionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentServiceOptionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentServiceOptionsType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentServiceOptionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SaturdayDeliveryIndicator is not None:
            namespaceprefix_ = self.SaturdayDeliveryIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.SaturdayDeliveryIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSaturdayDeliveryIndicator>%s</%sSaturdayDeliveryIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SaturdayDeliveryIndicator), input_name='SaturdayDeliveryIndicator')), namespaceprefix_ , eol_))
        if self.SaturdayPickupIndicator is not None:
            namespaceprefix_ = self.SaturdayPickupIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.SaturdayPickupIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSaturdayPickupIndicator>%s</%sSaturdayPickupIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SaturdayPickupIndicator), input_name='SaturdayPickupIndicator')), namespaceprefix_ , eol_))
        if self.COD is not None:
            namespaceprefix_ = self.COD_nsprefix_ + ':' if (UseCapturedNS_ and self.COD_nsprefix_) else ''
            self.COD.export(outfile, level, namespaceprefix_, namespacedef_='', name_='COD', pretty_print=pretty_print)
        if self.AccessPointCOD is not None:
            namespaceprefix_ = self.AccessPointCOD_nsprefix_ + ':' if (UseCapturedNS_ and self.AccessPointCOD_nsprefix_) else ''
            self.AccessPointCOD.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AccessPointCOD', pretty_print=pretty_print)
        if self.DeliverToAddresseeOnlyIndicator is not None:
            namespaceprefix_ = self.DeliverToAddresseeOnlyIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliverToAddresseeOnlyIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliverToAddresseeOnlyIndicator>%s</%sDeliverToAddresseeOnlyIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeliverToAddresseeOnlyIndicator), input_name='DeliverToAddresseeOnlyIndicator')), namespaceprefix_ , eol_))
        if self.DirectDeliveryOnlyIndicator is not None:
            namespaceprefix_ = self.DirectDeliveryOnlyIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.DirectDeliveryOnlyIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDirectDeliveryOnlyIndicator>%s</%sDirectDeliveryOnlyIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DirectDeliveryOnlyIndicator), input_name='DirectDeliveryOnlyIndicator')), namespaceprefix_ , eol_))
        for Notification_ in self.Notification:
            namespaceprefix_ = self.Notification_nsprefix_ + ':' if (UseCapturedNS_ and self.Notification_nsprefix_) else ''
            Notification_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Notification', pretty_print=pretty_print)
        if self.LabelDelivery is not None:
            namespaceprefix_ = self.LabelDelivery_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelDelivery_nsprefix_) else ''
            self.LabelDelivery.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LabelDelivery', pretty_print=pretty_print)
        if self.InternationalForms is not None:
            namespaceprefix_ = self.InternationalForms_nsprefix_ + ':' if (UseCapturedNS_ and self.InternationalForms_nsprefix_) else ''
            self.InternationalForms.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InternationalForms', pretty_print=pretty_print)
        if self.DeliveryConfirmation is not None:
            namespaceprefix_ = self.DeliveryConfirmation_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryConfirmation_nsprefix_) else ''
            self.DeliveryConfirmation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DeliveryConfirmation', pretty_print=pretty_print)
        if self.ReturnOfDocumentIndicator is not None:
            namespaceprefix_ = self.ReturnOfDocumentIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.ReturnOfDocumentIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReturnOfDocumentIndicator>%s</%sReturnOfDocumentIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReturnOfDocumentIndicator), input_name='ReturnOfDocumentIndicator')), namespaceprefix_ , eol_))
        if self.ImportControlIndicator is not None:
            namespaceprefix_ = self.ImportControlIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.ImportControlIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sImportControlIndicator>%s</%sImportControlIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ImportControlIndicator), input_name='ImportControlIndicator')), namespaceprefix_ , eol_))
        if self.LabelMethod is not None:
            namespaceprefix_ = self.LabelMethod_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelMethod_nsprefix_) else ''
            self.LabelMethod.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LabelMethod', pretty_print=pretty_print)
        if self.CommercialInvoiceRemovalIndicator is not None:
            namespaceprefix_ = self.CommercialInvoiceRemovalIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.CommercialInvoiceRemovalIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommercialInvoiceRemovalIndicator>%s</%sCommercialInvoiceRemovalIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CommercialInvoiceRemovalIndicator), input_name='CommercialInvoiceRemovalIndicator')), namespaceprefix_ , eol_))
        if self.UPScarbonneutralIndicator is not None:
            namespaceprefix_ = self.UPScarbonneutralIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.UPScarbonneutralIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUPScarbonneutralIndicator>%s</%sUPScarbonneutralIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UPScarbonneutralIndicator), input_name='UPScarbonneutralIndicator')), namespaceprefix_ , eol_))
        for PreAlertNotification_ in self.PreAlertNotification:
            namespaceprefix_ = self.PreAlertNotification_nsprefix_ + ':' if (UseCapturedNS_ and self.PreAlertNotification_nsprefix_) else ''
            PreAlertNotification_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PreAlertNotification', pretty_print=pretty_print)
        if self.ExchangeForwardIndicator is not None:
            namespaceprefix_ = self.ExchangeForwardIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.ExchangeForwardIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExchangeForwardIndicator>%s</%sExchangeForwardIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExchangeForwardIndicator), input_name='ExchangeForwardIndicator')), namespaceprefix_ , eol_))
        if self.HoldForPickupIndicator is not None:
            namespaceprefix_ = self.HoldForPickupIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.HoldForPickupIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHoldForPickupIndicator>%s</%sHoldForPickupIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HoldForPickupIndicator), input_name='HoldForPickupIndicator')), namespaceprefix_ , eol_))
        if self.DropoffAtUPSFacilityIndicator is not None:
            namespaceprefix_ = self.DropoffAtUPSFacilityIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.DropoffAtUPSFacilityIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDropoffAtUPSFacilityIndicator>%s</%sDropoffAtUPSFacilityIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DropoffAtUPSFacilityIndicator), input_name='DropoffAtUPSFacilityIndicator')), namespaceprefix_ , eol_))
        if self.LiftGateForPickUpIndicator is not None:
            namespaceprefix_ = self.LiftGateForPickUpIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.LiftGateForPickUpIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLiftGateForPickUpIndicator>%s</%sLiftGateForPickUpIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LiftGateForPickUpIndicator), input_name='LiftGateForPickUpIndicator')), namespaceprefix_ , eol_))
        if self.LiftGateForDeliveryIndicator is not None:
            namespaceprefix_ = self.LiftGateForDeliveryIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.LiftGateForDeliveryIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLiftGateForDeliveryIndicator>%s</%sLiftGateForDeliveryIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LiftGateForDeliveryIndicator), input_name='LiftGateForDeliveryIndicator')), namespaceprefix_ , eol_))
        if self.SDLShipmentIndicator is not None:
            namespaceprefix_ = self.SDLShipmentIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.SDLShipmentIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSDLShipmentIndicator>%s</%sSDLShipmentIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SDLShipmentIndicator), input_name='SDLShipmentIndicator')), namespaceprefix_ , eol_))
        if self.EPRAReleaseCode is not None:
            namespaceprefix_ = self.EPRAReleaseCode_nsprefix_ + ':' if (UseCapturedNS_ and self.EPRAReleaseCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEPRAReleaseCode>%s</%sEPRAReleaseCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EPRAReleaseCode), input_name='EPRAReleaseCode')), namespaceprefix_ , eol_))
        if self.RestrictedArticles is not None:
            namespaceprefix_ = self.RestrictedArticles_nsprefix_ + ':' if (UseCapturedNS_ and self.RestrictedArticles_nsprefix_) else ''
            self.RestrictedArticles.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RestrictedArticles', pretty_print=pretty_print)
        if self.InsideDelivery is not None:
            namespaceprefix_ = self.InsideDelivery_nsprefix_ + ':' if (UseCapturedNS_ and self.InsideDelivery_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInsideDelivery>%s</%sInsideDelivery>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InsideDelivery), input_name='InsideDelivery')), namespaceprefix_ , eol_))
        if self.ItemDisposal is not None:
            namespaceprefix_ = self.ItemDisposal_nsprefix_ + ':' if (UseCapturedNS_ and self.ItemDisposal_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemDisposal>%s</%sItemDisposal>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ItemDisposal), input_name='ItemDisposal')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SaturdayDeliveryIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SaturdayDeliveryIndicator')
            value_ = self.gds_validate_string(value_, node, 'SaturdayDeliveryIndicator')
            self.SaturdayDeliveryIndicator = value_
            self.SaturdayDeliveryIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'SaturdayPickupIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SaturdayPickupIndicator')
            value_ = self.gds_validate_string(value_, node, 'SaturdayPickupIndicator')
            self.SaturdayPickupIndicator = value_
            self.SaturdayPickupIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'COD':
            obj_ = CODType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.COD = obj_
            obj_.original_tagname_ = 'COD'
        elif nodeName_ == 'AccessPointCOD':
            obj_ = ShipmentServiceOptionsAccessPointCODType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AccessPointCOD = obj_
            obj_.original_tagname_ = 'AccessPointCOD'
        elif nodeName_ == 'DeliverToAddresseeOnlyIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DeliverToAddresseeOnlyIndicator')
            value_ = self.gds_validate_string(value_, node, 'DeliverToAddresseeOnlyIndicator')
            self.DeliverToAddresseeOnlyIndicator = value_
            self.DeliverToAddresseeOnlyIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'DirectDeliveryOnlyIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DirectDeliveryOnlyIndicator')
            value_ = self.gds_validate_string(value_, node, 'DirectDeliveryOnlyIndicator')
            self.DirectDeliveryOnlyIndicator = value_
            self.DirectDeliveryOnlyIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'Notification':
            obj_ = NotificationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Notification.append(obj_)
            obj_.original_tagname_ = 'Notification'
        elif nodeName_ == 'LabelDelivery':
            obj_ = LabelDeliveryType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LabelDelivery = obj_
            obj_.original_tagname_ = 'LabelDelivery'
        elif nodeName_ == 'InternationalForms':
            obj_ = InternationalFormType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InternationalForms = obj_
            obj_.original_tagname_ = 'InternationalForms'
        elif nodeName_ == 'DeliveryConfirmation':
            obj_ = DeliveryConfirmationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DeliveryConfirmation = obj_
            obj_.original_tagname_ = 'DeliveryConfirmation'
        elif nodeName_ == 'ReturnOfDocumentIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ReturnOfDocumentIndicator')
            value_ = self.gds_validate_string(value_, node, 'ReturnOfDocumentIndicator')
            self.ReturnOfDocumentIndicator = value_
            self.ReturnOfDocumentIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'ImportControlIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ImportControlIndicator')
            value_ = self.gds_validate_string(value_, node, 'ImportControlIndicator')
            self.ImportControlIndicator = value_
            self.ImportControlIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'LabelMethod':
            obj_ = LabelMethodType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LabelMethod = obj_
            obj_.original_tagname_ = 'LabelMethod'
        elif nodeName_ == 'CommercialInvoiceRemovalIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CommercialInvoiceRemovalIndicator')
            value_ = self.gds_validate_string(value_, node, 'CommercialInvoiceRemovalIndicator')
            self.CommercialInvoiceRemovalIndicator = value_
            self.CommercialInvoiceRemovalIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'UPScarbonneutralIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UPScarbonneutralIndicator')
            value_ = self.gds_validate_string(value_, node, 'UPScarbonneutralIndicator')
            self.UPScarbonneutralIndicator = value_
            self.UPScarbonneutralIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'PreAlertNotification':
            obj_ = PreAlertNotificationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PreAlertNotification.append(obj_)
            obj_.original_tagname_ = 'PreAlertNotification'
        elif nodeName_ == 'ExchangeForwardIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExchangeForwardIndicator')
            value_ = self.gds_validate_string(value_, node, 'ExchangeForwardIndicator')
            self.ExchangeForwardIndicator = value_
            self.ExchangeForwardIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'HoldForPickupIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HoldForPickupIndicator')
            value_ = self.gds_validate_string(value_, node, 'HoldForPickupIndicator')
            self.HoldForPickupIndicator = value_
            self.HoldForPickupIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'DropoffAtUPSFacilityIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DropoffAtUPSFacilityIndicator')
            value_ = self.gds_validate_string(value_, node, 'DropoffAtUPSFacilityIndicator')
            self.DropoffAtUPSFacilityIndicator = value_
            self.DropoffAtUPSFacilityIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'LiftGateForPickUpIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LiftGateForPickUpIndicator')
            value_ = self.gds_validate_string(value_, node, 'LiftGateForPickUpIndicator')
            self.LiftGateForPickUpIndicator = value_
            self.LiftGateForPickUpIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'LiftGateForDeliveryIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LiftGateForDeliveryIndicator')
            value_ = self.gds_validate_string(value_, node, 'LiftGateForDeliveryIndicator')
            self.LiftGateForDeliveryIndicator = value_
            self.LiftGateForDeliveryIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'SDLShipmentIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SDLShipmentIndicator')
            value_ = self.gds_validate_string(value_, node, 'SDLShipmentIndicator')
            self.SDLShipmentIndicator = value_
            self.SDLShipmentIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'EPRAReleaseCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EPRAReleaseCode')
            value_ = self.gds_validate_string(value_, node, 'EPRAReleaseCode')
            self.EPRAReleaseCode = value_
            self.EPRAReleaseCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'RestrictedArticles':
            obj_ = RestrictedArticlesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RestrictedArticles = obj_
            obj_.original_tagname_ = 'RestrictedArticles'
        elif nodeName_ == 'InsideDelivery':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InsideDelivery')
            value_ = self.gds_validate_string(value_, node, 'InsideDelivery')
            self.InsideDelivery = value_
            self.InsideDelivery_nsprefix_ = child_.prefix
        elif nodeName_ == 'ItemDisposal':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ItemDisposal')
            value_ = self.gds_validate_string(value_, node, 'ItemDisposal')
            self.ItemDisposal = value_
            self.ItemDisposal_nsprefix_ = child_.prefix
# end class ShipmentServiceOptionsType


class RestrictedArticlesType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DiagnosticSpecimensIndicator=None, AlcoholicBeveragesIndicator=None, PerishablesIndicator=None, PlantsIndicator=None, SeedsIndicator=None, SpecialExceptionsIndicator=None, TobaccoIndicator=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DiagnosticSpecimensIndicator = DiagnosticSpecimensIndicator
        self.DiagnosticSpecimensIndicator_nsprefix_ = None
        self.AlcoholicBeveragesIndicator = AlcoholicBeveragesIndicator
        self.AlcoholicBeveragesIndicator_nsprefix_ = None
        self.PerishablesIndicator = PerishablesIndicator
        self.PerishablesIndicator_nsprefix_ = None
        self.PlantsIndicator = PlantsIndicator
        self.PlantsIndicator_nsprefix_ = None
        self.SeedsIndicator = SeedsIndicator
        self.SeedsIndicator_nsprefix_ = None
        self.SpecialExceptionsIndicator = SpecialExceptionsIndicator
        self.SpecialExceptionsIndicator_nsprefix_ = None
        self.TobaccoIndicator = TobaccoIndicator
        self.TobaccoIndicator_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RestrictedArticlesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RestrictedArticlesType.subclass:
            return RestrictedArticlesType.subclass(*args_, **kwargs_)
        else:
            return RestrictedArticlesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DiagnosticSpecimensIndicator(self):
        return self.DiagnosticSpecimensIndicator
    def set_DiagnosticSpecimensIndicator(self, DiagnosticSpecimensIndicator):
        self.DiagnosticSpecimensIndicator = DiagnosticSpecimensIndicator
    def get_AlcoholicBeveragesIndicator(self):
        return self.AlcoholicBeveragesIndicator
    def set_AlcoholicBeveragesIndicator(self, AlcoholicBeveragesIndicator):
        self.AlcoholicBeveragesIndicator = AlcoholicBeveragesIndicator
    def get_PerishablesIndicator(self):
        return self.PerishablesIndicator
    def set_PerishablesIndicator(self, PerishablesIndicator):
        self.PerishablesIndicator = PerishablesIndicator
    def get_PlantsIndicator(self):
        return self.PlantsIndicator
    def set_PlantsIndicator(self, PlantsIndicator):
        self.PlantsIndicator = PlantsIndicator
    def get_SeedsIndicator(self):
        return self.SeedsIndicator
    def set_SeedsIndicator(self, SeedsIndicator):
        self.SeedsIndicator = SeedsIndicator
    def get_SpecialExceptionsIndicator(self):
        return self.SpecialExceptionsIndicator
    def set_SpecialExceptionsIndicator(self, SpecialExceptionsIndicator):
        self.SpecialExceptionsIndicator = SpecialExceptionsIndicator
    def get_TobaccoIndicator(self):
        return self.TobaccoIndicator
    def set_TobaccoIndicator(self, TobaccoIndicator):
        self.TobaccoIndicator = TobaccoIndicator
    def hasContent_(self):
        if (
            self.DiagnosticSpecimensIndicator is not None or
            self.AlcoholicBeveragesIndicator is not None or
            self.PerishablesIndicator is not None or
            self.PlantsIndicator is not None or
            self.SeedsIndicator is not None or
            self.SpecialExceptionsIndicator is not None or
            self.TobaccoIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RestrictedArticlesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RestrictedArticlesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RestrictedArticlesType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RestrictedArticlesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RestrictedArticlesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RestrictedArticlesType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RestrictedArticlesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DiagnosticSpecimensIndicator is not None:
            namespaceprefix_ = self.DiagnosticSpecimensIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.DiagnosticSpecimensIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDiagnosticSpecimensIndicator>%s</%sDiagnosticSpecimensIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DiagnosticSpecimensIndicator), input_name='DiagnosticSpecimensIndicator')), namespaceprefix_ , eol_))
        if self.AlcoholicBeveragesIndicator is not None:
            namespaceprefix_ = self.AlcoholicBeveragesIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.AlcoholicBeveragesIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAlcoholicBeveragesIndicator>%s</%sAlcoholicBeveragesIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AlcoholicBeveragesIndicator), input_name='AlcoholicBeveragesIndicator')), namespaceprefix_ , eol_))
        if self.PerishablesIndicator is not None:
            namespaceprefix_ = self.PerishablesIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.PerishablesIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPerishablesIndicator>%s</%sPerishablesIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PerishablesIndicator), input_name='PerishablesIndicator')), namespaceprefix_ , eol_))
        if self.PlantsIndicator is not None:
            namespaceprefix_ = self.PlantsIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.PlantsIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPlantsIndicator>%s</%sPlantsIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PlantsIndicator), input_name='PlantsIndicator')), namespaceprefix_ , eol_))
        if self.SeedsIndicator is not None:
            namespaceprefix_ = self.SeedsIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.SeedsIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSeedsIndicator>%s</%sSeedsIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SeedsIndicator), input_name='SeedsIndicator')), namespaceprefix_ , eol_))
        if self.SpecialExceptionsIndicator is not None:
            namespaceprefix_ = self.SpecialExceptionsIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialExceptionsIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialExceptionsIndicator>%s</%sSpecialExceptionsIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SpecialExceptionsIndicator), input_name='SpecialExceptionsIndicator')), namespaceprefix_ , eol_))
        if self.TobaccoIndicator is not None:
            namespaceprefix_ = self.TobaccoIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.TobaccoIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTobaccoIndicator>%s</%sTobaccoIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TobaccoIndicator), input_name='TobaccoIndicator')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DiagnosticSpecimensIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DiagnosticSpecimensIndicator')
            value_ = self.gds_validate_string(value_, node, 'DiagnosticSpecimensIndicator')
            self.DiagnosticSpecimensIndicator = value_
            self.DiagnosticSpecimensIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'AlcoholicBeveragesIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AlcoholicBeveragesIndicator')
            value_ = self.gds_validate_string(value_, node, 'AlcoholicBeveragesIndicator')
            self.AlcoholicBeveragesIndicator = value_
            self.AlcoholicBeveragesIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'PerishablesIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PerishablesIndicator')
            value_ = self.gds_validate_string(value_, node, 'PerishablesIndicator')
            self.PerishablesIndicator = value_
            self.PerishablesIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'PlantsIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PlantsIndicator')
            value_ = self.gds_validate_string(value_, node, 'PlantsIndicator')
            self.PlantsIndicator = value_
            self.PlantsIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'SeedsIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SeedsIndicator')
            value_ = self.gds_validate_string(value_, node, 'SeedsIndicator')
            self.SeedsIndicator = value_
            self.SeedsIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'SpecialExceptionsIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecialExceptionsIndicator')
            value_ = self.gds_validate_string(value_, node, 'SpecialExceptionsIndicator')
            self.SpecialExceptionsIndicator = value_
            self.SpecialExceptionsIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'TobaccoIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TobaccoIndicator')
            value_ = self.gds_validate_string(value_, node, 'TobaccoIndicator')
            self.TobaccoIndicator = value_
            self.TobaccoIndicator_nsprefix_ = child_.prefix
# end class RestrictedArticlesType


class PreAlertNotificationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EMailMessage=None, VoiceMessage=None, TextMessage=None, Locale=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.EMailMessage = EMailMessage
        self.EMailMessage_nsprefix_ = None
        self.VoiceMessage = VoiceMessage
        self.VoiceMessage_nsprefix_ = None
        self.TextMessage = TextMessage
        self.TextMessage_nsprefix_ = None
        self.Locale = Locale
        self.Locale_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PreAlertNotificationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PreAlertNotificationType.subclass:
            return PreAlertNotificationType.subclass(*args_, **kwargs_)
        else:
            return PreAlertNotificationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EMailMessage(self):
        return self.EMailMessage
    def set_EMailMessage(self, EMailMessage):
        self.EMailMessage = EMailMessage
    def get_VoiceMessage(self):
        return self.VoiceMessage
    def set_VoiceMessage(self, VoiceMessage):
        self.VoiceMessage = VoiceMessage
    def get_TextMessage(self):
        return self.TextMessage
    def set_TextMessage(self, TextMessage):
        self.TextMessage = TextMessage
    def get_Locale(self):
        return self.Locale
    def set_Locale(self, Locale):
        self.Locale = Locale
    def hasContent_(self):
        if (
            self.EMailMessage is not None or
            self.VoiceMessage is not None or
            self.TextMessage is not None or
            self.Locale is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PreAlertNotificationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PreAlertNotificationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PreAlertNotificationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PreAlertNotificationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PreAlertNotificationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PreAlertNotificationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PreAlertNotificationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EMailMessage is not None:
            namespaceprefix_ = self.EMailMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailMessage_nsprefix_) else ''
            self.EMailMessage.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EMailMessage', pretty_print=pretty_print)
        if self.VoiceMessage is not None:
            namespaceprefix_ = self.VoiceMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.VoiceMessage_nsprefix_) else ''
            self.VoiceMessage.export(outfile, level, namespaceprefix_, namespacedef_='', name_='VoiceMessage', pretty_print=pretty_print)
        if self.TextMessage is not None:
            namespaceprefix_ = self.TextMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.TextMessage_nsprefix_) else ''
            self.TextMessage.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TextMessage', pretty_print=pretty_print)
        if self.Locale is not None:
            namespaceprefix_ = self.Locale_nsprefix_ + ':' if (UseCapturedNS_ and self.Locale_nsprefix_) else ''
            self.Locale.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Locale', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EMailMessage':
            obj_ = PreAlertEMailMessageType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EMailMessage = obj_
            obj_.original_tagname_ = 'EMailMessage'
        elif nodeName_ == 'VoiceMessage':
            obj_ = PreAlertVoiceMessageType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.VoiceMessage = obj_
            obj_.original_tagname_ = 'VoiceMessage'
        elif nodeName_ == 'TextMessage':
            obj_ = PreAlertTextMessageType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TextMessage = obj_
            obj_.original_tagname_ = 'TextMessage'
        elif nodeName_ == 'Locale':
            obj_ = LocaleType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Locale = obj_
            obj_.original_tagname_ = 'Locale'
# end class PreAlertNotificationType


class PreAlertEMailMessageType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EMailAddress=None, UndeliverableEMailAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.EMailAddress = EMailAddress
        self.EMailAddress_nsprefix_ = None
        self.UndeliverableEMailAddress = UndeliverableEMailAddress
        self.UndeliverableEMailAddress_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PreAlertEMailMessageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PreAlertEMailMessageType.subclass:
            return PreAlertEMailMessageType.subclass(*args_, **kwargs_)
        else:
            return PreAlertEMailMessageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EMailAddress(self):
        return self.EMailAddress
    def set_EMailAddress(self, EMailAddress):
        self.EMailAddress = EMailAddress
    def get_UndeliverableEMailAddress(self):
        return self.UndeliverableEMailAddress
    def set_UndeliverableEMailAddress(self, UndeliverableEMailAddress):
        self.UndeliverableEMailAddress = UndeliverableEMailAddress
    def hasContent_(self):
        if (
            self.EMailAddress is not None or
            self.UndeliverableEMailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PreAlertEMailMessageType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PreAlertEMailMessageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PreAlertEMailMessageType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PreAlertEMailMessageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PreAlertEMailMessageType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PreAlertEMailMessageType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PreAlertEMailMessageType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EMailAddress is not None:
            namespaceprefix_ = self.EMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), namespaceprefix_ , eol_))
        if self.UndeliverableEMailAddress is not None:
            namespaceprefix_ = self.UndeliverableEMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.UndeliverableEMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUndeliverableEMailAddress>%s</%sUndeliverableEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UndeliverableEMailAddress), input_name='UndeliverableEMailAddress')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EMailAddress')
            value_ = self.gds_validate_string(value_, node, 'EMailAddress')
            self.EMailAddress = value_
            self.EMailAddress_nsprefix_ = child_.prefix
        elif nodeName_ == 'UndeliverableEMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UndeliverableEMailAddress')
            value_ = self.gds_validate_string(value_, node, 'UndeliverableEMailAddress')
            self.UndeliverableEMailAddress = value_
            self.UndeliverableEMailAddress_nsprefix_ = child_.prefix
# end class PreAlertEMailMessageType


class LocaleType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Language=None, Dialect=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Language = Language
        self.Language_nsprefix_ = None
        self.Dialect = Dialect
        self.Dialect_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LocaleType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LocaleType.subclass:
            return LocaleType.subclass(*args_, **kwargs_)
        else:
            return LocaleType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Language(self):
        return self.Language
    def set_Language(self, Language):
        self.Language = Language
    def get_Dialect(self):
        return self.Dialect
    def set_Dialect(self, Dialect):
        self.Dialect = Dialect
    def hasContent_(self):
        if (
            self.Language is not None or
            self.Dialect is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LocaleType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LocaleType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LocaleType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LocaleType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LocaleType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LocaleType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LocaleType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Language is not None:
            namespaceprefix_ = self.Language_nsprefix_ + ':' if (UseCapturedNS_ and self.Language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLanguage>%s</%sLanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Language), input_name='Language')), namespaceprefix_ , eol_))
        if self.Dialect is not None:
            namespaceprefix_ = self.Dialect_nsprefix_ + ':' if (UseCapturedNS_ and self.Dialect_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDialect>%s</%sDialect>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Dialect), input_name='Dialect')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Language')
            value_ = self.gds_validate_string(value_, node, 'Language')
            self.Language = value_
            self.Language_nsprefix_ = child_.prefix
        elif nodeName_ == 'Dialect':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Dialect')
            value_ = self.gds_validate_string(value_, node, 'Dialect')
            self.Dialect = value_
            self.Dialect_nsprefix_ = child_.prefix
# end class LocaleType


class PreAlertVoiceMessageType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PhoneNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PhoneNumber = PhoneNumber
        self.PhoneNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PreAlertVoiceMessageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PreAlertVoiceMessageType.subclass:
            return PreAlertVoiceMessageType.subclass(*args_, **kwargs_)
        else:
            return PreAlertVoiceMessageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PhoneNumber(self):
        return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber):
        self.PhoneNumber = PhoneNumber
    def hasContent_(self):
        if (
            self.PhoneNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PreAlertVoiceMessageType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PreAlertVoiceMessageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PreAlertVoiceMessageType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PreAlertVoiceMessageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PreAlertVoiceMessageType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PreAlertVoiceMessageType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PreAlertVoiceMessageType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PhoneNumber is not None:
            namespaceprefix_ = self.PhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhoneNumber>%s</%sPhoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PhoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhoneNumber')
            value_ = self.gds_validate_string(value_, node, 'PhoneNumber')
            self.PhoneNumber = value_
            self.PhoneNumber_nsprefix_ = child_.prefix
# end class PreAlertVoiceMessageType


class PreAlertTextMessageType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PhoneNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PhoneNumber = PhoneNumber
        self.PhoneNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PreAlertTextMessageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PreAlertTextMessageType.subclass:
            return PreAlertTextMessageType.subclass(*args_, **kwargs_)
        else:
            return PreAlertTextMessageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PhoneNumber(self):
        return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber):
        self.PhoneNumber = PhoneNumber
    def hasContent_(self):
        if (
            self.PhoneNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PreAlertTextMessageType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PreAlertTextMessageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PreAlertTextMessageType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PreAlertTextMessageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PreAlertTextMessageType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PreAlertTextMessageType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PreAlertTextMessageType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PhoneNumber is not None:
            namespaceprefix_ = self.PhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhoneNumber>%s</%sPhoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PhoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhoneNumber')
            value_ = self.gds_validate_string(value_, node, 'PhoneNumber')
            self.PhoneNumber = value_
            self.PhoneNumber_nsprefix_ = child_.prefix
# end class PreAlertTextMessageType


class ContactInfoType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Name=None, Phone=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Name = Name
        self.Name_nsprefix_ = None
        self.Phone = Phone
        self.Phone_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactInfoType.subclass:
            return ContactInfoType.subclass(*args_, **kwargs_)
        else:
            return ContactInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_Phone(self):
        return self.Phone
    def set_Phone(self, Phone):
        self.Phone = Phone
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Phone is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ContactInfoType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContactInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContactInfoType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContactInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContactInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContactInfoType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ContactInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.Phone is not None:
            namespaceprefix_ = self.Phone_nsprefix_ + ':' if (UseCapturedNS_ and self.Phone_nsprefix_) else ''
            self.Phone.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Phone', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Name')
            value_ = self.gds_validate_string(value_, node, 'Name')
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
        elif nodeName_ == 'Phone':
            obj_ = ShipPhoneType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Phone = obj_
            obj_.original_tagname_ = 'Phone'
# end class ContactInfoType


class CODType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CODFundsCode=None, CODAmount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CODFundsCode = CODFundsCode
        self.CODFundsCode_nsprefix_ = None
        self.CODAmount = CODAmount
        self.CODAmount_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CODType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CODType.subclass:
            return CODType.subclass(*args_, **kwargs_)
        else:
            return CODType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CODFundsCode(self):
        return self.CODFundsCode
    def set_CODFundsCode(self, CODFundsCode):
        self.CODFundsCode = CODFundsCode
    def get_CODAmount(self):
        return self.CODAmount
    def set_CODAmount(self, CODAmount):
        self.CODAmount = CODAmount
    def hasContent_(self):
        if (
            self.CODFundsCode is not None or
            self.CODAmount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CODType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CODType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CODType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CODType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CODType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CODType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CODType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CODFundsCode is not None:
            namespaceprefix_ = self.CODFundsCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CODFundsCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCODFundsCode>%s</%sCODFundsCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CODFundsCode), input_name='CODFundsCode')), namespaceprefix_ , eol_))
        if self.CODAmount is not None:
            namespaceprefix_ = self.CODAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.CODAmount_nsprefix_) else ''
            self.CODAmount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CODAmount', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CODFundsCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CODFundsCode')
            value_ = self.gds_validate_string(value_, node, 'CODFundsCode')
            self.CODFundsCode = value_
            self.CODFundsCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'CODAmount':
            obj_ = CurrencyMonetaryType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CODAmount = obj_
            obj_.original_tagname_ = 'CODAmount'
# end class CODType


class ShipmentServiceOptionsAccessPointCODType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CurrencyCode = CurrencyCode
        self.CurrencyCode_nsprefix_ = None
        self.MonetaryValue = MonetaryValue
        self.MonetaryValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentServiceOptionsAccessPointCODType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentServiceOptionsAccessPointCODType.subclass:
            return ShipmentServiceOptionsAccessPointCODType.subclass(*args_, **kwargs_)
        else:
            return ShipmentServiceOptionsAccessPointCODType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CurrencyCode(self):
        return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode):
        self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self):
        return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue):
        self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentServiceOptionsAccessPointCODType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentServiceOptionsAccessPointCODType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentServiceOptionsAccessPointCODType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentServiceOptionsAccessPointCODType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentServiceOptionsAccessPointCODType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentServiceOptionsAccessPointCODType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentServiceOptionsAccessPointCODType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            namespaceprefix_ = self.CurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyCode>%s</%sCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), namespaceprefix_ , eol_))
        if self.MonetaryValue is not None:
            namespaceprefix_ = self.MonetaryValue_nsprefix_ + ':' if (UseCapturedNS_ and self.MonetaryValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMonetaryValue>%s</%sMonetaryValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CurrencyCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'CurrencyCode')
            self.CurrencyCode = value_
            self.CurrencyCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'MonetaryValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MonetaryValue')
            value_ = self.gds_validate_string(value_, node, 'MonetaryValue')
            self.MonetaryValue = value_
            self.MonetaryValue_nsprefix_ = child_.prefix
# end class ShipmentServiceOptionsAccessPointCODType


class NotificationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, NotificationCode=None, EMail=None, VoiceMessage=None, TextMessage=None, Locale=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.NotificationCode = NotificationCode
        self.NotificationCode_nsprefix_ = None
        self.EMail = EMail
        self.EMail_nsprefix_ = None
        self.VoiceMessage = VoiceMessage
        self.VoiceMessage_nsprefix_ = None
        self.TextMessage = TextMessage
        self.TextMessage_nsprefix_ = None
        self.Locale = Locale
        self.Locale_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotificationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotificationType.subclass:
            return NotificationType.subclass(*args_, **kwargs_)
        else:
            return NotificationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_NotificationCode(self):
        return self.NotificationCode
    def set_NotificationCode(self, NotificationCode):
        self.NotificationCode = NotificationCode
    def get_EMail(self):
        return self.EMail
    def set_EMail(self, EMail):
        self.EMail = EMail
    def get_VoiceMessage(self):
        return self.VoiceMessage
    def set_VoiceMessage(self, VoiceMessage):
        self.VoiceMessage = VoiceMessage
    def get_TextMessage(self):
        return self.TextMessage
    def set_TextMessage(self, TextMessage):
        self.TextMessage = TextMessage
    def get_Locale(self):
        return self.Locale
    def set_Locale(self, Locale):
        self.Locale = Locale
    def hasContent_(self):
        if (
            self.NotificationCode is not None or
            self.EMail is not None or
            self.VoiceMessage is not None or
            self.TextMessage is not None or
            self.Locale is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NotificationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NotificationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NotificationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NotificationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NotificationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NotificationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NotificationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NotificationCode is not None:
            namespaceprefix_ = self.NotificationCode_nsprefix_ + ':' if (UseCapturedNS_ and self.NotificationCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNotificationCode>%s</%sNotificationCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NotificationCode), input_name='NotificationCode')), namespaceprefix_ , eol_))
        if self.EMail is not None:
            namespaceprefix_ = self.EMail_nsprefix_ + ':' if (UseCapturedNS_ and self.EMail_nsprefix_) else ''
            self.EMail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EMail', pretty_print=pretty_print)
        if self.VoiceMessage is not None:
            namespaceprefix_ = self.VoiceMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.VoiceMessage_nsprefix_) else ''
            self.VoiceMessage.export(outfile, level, namespaceprefix_, namespacedef_='', name_='VoiceMessage', pretty_print=pretty_print)
        if self.TextMessage is not None:
            namespaceprefix_ = self.TextMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.TextMessage_nsprefix_) else ''
            self.TextMessage.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TextMessage', pretty_print=pretty_print)
        if self.Locale is not None:
            namespaceprefix_ = self.Locale_nsprefix_ + ':' if (UseCapturedNS_ and self.Locale_nsprefix_) else ''
            self.Locale.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Locale', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'NotificationCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NotificationCode')
            value_ = self.gds_validate_string(value_, node, 'NotificationCode')
            self.NotificationCode = value_
            self.NotificationCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'EMail':
            obj_ = EmailDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EMail = obj_
            obj_.original_tagname_ = 'EMail'
        elif nodeName_ == 'VoiceMessage':
            obj_ = ShipmentServiceOptionsNotificationVoiceMessageType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.VoiceMessage = obj_
            obj_.original_tagname_ = 'VoiceMessage'
        elif nodeName_ == 'TextMessage':
            obj_ = ShipmentServiceOptionsNotificationTextMessageType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TextMessage = obj_
            obj_.original_tagname_ = 'TextMessage'
        elif nodeName_ == 'Locale':
            obj_ = LocaleType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Locale = obj_
            obj_.original_tagname_ = 'Locale'
# end class NotificationType


class LabelDeliveryType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EMail=None, LabelLinksIndicator=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.EMail = EMail
        self.EMail_nsprefix_ = None
        self.LabelLinksIndicator = LabelLinksIndicator
        self.LabelLinksIndicator_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LabelDeliveryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LabelDeliveryType.subclass:
            return LabelDeliveryType.subclass(*args_, **kwargs_)
        else:
            return LabelDeliveryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EMail(self):
        return self.EMail
    def set_EMail(self, EMail):
        self.EMail = EMail
    def get_LabelLinksIndicator(self):
        return self.LabelLinksIndicator
    def set_LabelLinksIndicator(self, LabelLinksIndicator):
        self.LabelLinksIndicator = LabelLinksIndicator
    def hasContent_(self):
        if (
            self.EMail is not None or
            self.LabelLinksIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LabelDeliveryType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LabelDeliveryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LabelDeliveryType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LabelDeliveryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LabelDeliveryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LabelDeliveryType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LabelDeliveryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EMail is not None:
            namespaceprefix_ = self.EMail_nsprefix_ + ':' if (UseCapturedNS_ and self.EMail_nsprefix_) else ''
            self.EMail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EMail', pretty_print=pretty_print)
        if self.LabelLinksIndicator is not None:
            namespaceprefix_ = self.LabelLinksIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelLinksIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelLinksIndicator>%s</%sLabelLinksIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LabelLinksIndicator), input_name='LabelLinksIndicator')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EMail':
            obj_ = EmailDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EMail = obj_
            obj_.original_tagname_ = 'EMail'
        elif nodeName_ == 'LabelLinksIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelLinksIndicator')
            value_ = self.gds_validate_string(value_, node, 'LabelLinksIndicator')
            self.LabelLinksIndicator = value_
            self.LabelLinksIndicator_nsprefix_ = child_.prefix
# end class LabelDeliveryType


class EmailDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EMailAddress=None, UndeliverableEMailAddress=None, FromEMailAddress=None, FromName=None, Memo=None, Subject=None, SubjectCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if EMailAddress is None:
            self.EMailAddress = []
        else:
            self.EMailAddress = EMailAddress
        self.EMailAddress_nsprefix_ = None
        self.UndeliverableEMailAddress = UndeliverableEMailAddress
        self.UndeliverableEMailAddress_nsprefix_ = None
        self.FromEMailAddress = FromEMailAddress
        self.FromEMailAddress_nsprefix_ = None
        self.FromName = FromName
        self.FromName_nsprefix_ = None
        self.Memo = Memo
        self.Memo_nsprefix_ = None
        self.Subject = Subject
        self.Subject_nsprefix_ = None
        self.SubjectCode = SubjectCode
        self.SubjectCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EmailDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EmailDetailsType.subclass:
            return EmailDetailsType.subclass(*args_, **kwargs_)
        else:
            return EmailDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EMailAddress(self):
        return self.EMailAddress
    def set_EMailAddress(self, EMailAddress):
        self.EMailAddress = EMailAddress
    def add_EMailAddress(self, value):
        self.EMailAddress.append(value)
    def insert_EMailAddress_at(self, index, value):
        self.EMailAddress.insert(index, value)
    def replace_EMailAddress_at(self, index, value):
        self.EMailAddress[index] = value
    def get_UndeliverableEMailAddress(self):
        return self.UndeliverableEMailAddress
    def set_UndeliverableEMailAddress(self, UndeliverableEMailAddress):
        self.UndeliverableEMailAddress = UndeliverableEMailAddress
    def get_FromEMailAddress(self):
        return self.FromEMailAddress
    def set_FromEMailAddress(self, FromEMailAddress):
        self.FromEMailAddress = FromEMailAddress
    def get_FromName(self):
        return self.FromName
    def set_FromName(self, FromName):
        self.FromName = FromName
    def get_Memo(self):
        return self.Memo
    def set_Memo(self, Memo):
        self.Memo = Memo
    def get_Subject(self):
        return self.Subject
    def set_Subject(self, Subject):
        self.Subject = Subject
    def get_SubjectCode(self):
        return self.SubjectCode
    def set_SubjectCode(self, SubjectCode):
        self.SubjectCode = SubjectCode
    def hasContent_(self):
        if (
            self.EMailAddress or
            self.UndeliverableEMailAddress is not None or
            self.FromEMailAddress is not None or
            self.FromName is not None or
            self.Memo is not None or
            self.Subject is not None or
            self.SubjectCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EmailDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EmailDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EmailDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EmailDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EmailDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EmailDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EmailDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for EMailAddress_ in self.EMailAddress:
            namespaceprefix_ = self.EMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(EMailAddress_), input_name='EMailAddress')), namespaceprefix_ , eol_))
        if self.UndeliverableEMailAddress is not None:
            namespaceprefix_ = self.UndeliverableEMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.UndeliverableEMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUndeliverableEMailAddress>%s</%sUndeliverableEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UndeliverableEMailAddress), input_name='UndeliverableEMailAddress')), namespaceprefix_ , eol_))
        if self.FromEMailAddress is not None:
            namespaceprefix_ = self.FromEMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.FromEMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFromEMailAddress>%s</%sFromEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FromEMailAddress), input_name='FromEMailAddress')), namespaceprefix_ , eol_))
        if self.FromName is not None:
            namespaceprefix_ = self.FromName_nsprefix_ + ':' if (UseCapturedNS_ and self.FromName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFromName>%s</%sFromName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FromName), input_name='FromName')), namespaceprefix_ , eol_))
        if self.Memo is not None:
            namespaceprefix_ = self.Memo_nsprefix_ + ':' if (UseCapturedNS_ and self.Memo_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMemo>%s</%sMemo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Memo), input_name='Memo')), namespaceprefix_ , eol_))
        if self.Subject is not None:
            namespaceprefix_ = self.Subject_nsprefix_ + ':' if (UseCapturedNS_ and self.Subject_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSubject>%s</%sSubject>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Subject), input_name='Subject')), namespaceprefix_ , eol_))
        if self.SubjectCode is not None:
            namespaceprefix_ = self.SubjectCode_nsprefix_ + ':' if (UseCapturedNS_ and self.SubjectCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSubjectCode>%s</%sSubjectCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SubjectCode), input_name='SubjectCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EMailAddress')
            value_ = self.gds_validate_string(value_, node, 'EMailAddress')
            self.EMailAddress.append(value_)
            self.EMailAddress_nsprefix_ = child_.prefix
        elif nodeName_ == 'UndeliverableEMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UndeliverableEMailAddress')
            value_ = self.gds_validate_string(value_, node, 'UndeliverableEMailAddress')
            self.UndeliverableEMailAddress = value_
            self.UndeliverableEMailAddress_nsprefix_ = child_.prefix
        elif nodeName_ == 'FromEMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FromEMailAddress')
            value_ = self.gds_validate_string(value_, node, 'FromEMailAddress')
            self.FromEMailAddress = value_
            self.FromEMailAddress_nsprefix_ = child_.prefix
        elif nodeName_ == 'FromName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FromName')
            value_ = self.gds_validate_string(value_, node, 'FromName')
            self.FromName = value_
            self.FromName_nsprefix_ = child_.prefix
        elif nodeName_ == 'Memo':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Memo')
            value_ = self.gds_validate_string(value_, node, 'Memo')
            self.Memo = value_
            self.Memo_nsprefix_ = child_.prefix
        elif nodeName_ == 'Subject':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Subject')
            value_ = self.gds_validate_string(value_, node, 'Subject')
            self.Subject = value_
            self.Subject_nsprefix_ = child_.prefix
        elif nodeName_ == 'SubjectCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SubjectCode')
            value_ = self.gds_validate_string(value_, node, 'SubjectCode')
            self.SubjectCode = value_
            self.SubjectCode_nsprefix_ = child_.prefix
# end class EmailDetailsType


class PackageType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Description=None, Packaging=None, Dimensions=None, DimWeight=None, PackageWeight=None, LargePackageIndicator=None, ReferenceNumber=None, AdditionalHandlingIndicator=None, PackageServiceOptions=None, Commodity=None, HazMatPackageInformation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.Packaging = Packaging
        self.Packaging_nsprefix_ = None
        self.Dimensions = Dimensions
        self.Dimensions_nsprefix_ = None
        self.DimWeight = DimWeight
        self.DimWeight_nsprefix_ = None
        self.PackageWeight = PackageWeight
        self.PackageWeight_nsprefix_ = None
        self.LargePackageIndicator = LargePackageIndicator
        self.LargePackageIndicator_nsprefix_ = None
        if ReferenceNumber is None:
            self.ReferenceNumber = []
        else:
            self.ReferenceNumber = ReferenceNumber
        self.ReferenceNumber_nsprefix_ = None
        self.AdditionalHandlingIndicator = AdditionalHandlingIndicator
        self.AdditionalHandlingIndicator_nsprefix_ = None
        self.PackageServiceOptions = PackageServiceOptions
        self.PackageServiceOptions_nsprefix_ = None
        self.Commodity = Commodity
        self.Commodity_nsprefix_ = None
        self.HazMatPackageInformation = HazMatPackageInformation
        self.HazMatPackageInformation_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageType.subclass:
            return PackageType.subclass(*args_, **kwargs_)
        else:
            return PackageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_Packaging(self):
        return self.Packaging
    def set_Packaging(self, Packaging):
        self.Packaging = Packaging
    def get_Dimensions(self):
        return self.Dimensions
    def set_Dimensions(self, Dimensions):
        self.Dimensions = Dimensions
    def get_DimWeight(self):
        return self.DimWeight
    def set_DimWeight(self, DimWeight):
        self.DimWeight = DimWeight
    def get_PackageWeight(self):
        return self.PackageWeight
    def set_PackageWeight(self, PackageWeight):
        self.PackageWeight = PackageWeight
    def get_LargePackageIndicator(self):
        return self.LargePackageIndicator
    def set_LargePackageIndicator(self, LargePackageIndicator):
        self.LargePackageIndicator = LargePackageIndicator
    def get_ReferenceNumber(self):
        return self.ReferenceNumber
    def set_ReferenceNumber(self, ReferenceNumber):
        self.ReferenceNumber = ReferenceNumber
    def add_ReferenceNumber(self, value):
        self.ReferenceNumber.append(value)
    def insert_ReferenceNumber_at(self, index, value):
        self.ReferenceNumber.insert(index, value)
    def replace_ReferenceNumber_at(self, index, value):
        self.ReferenceNumber[index] = value
    def get_AdditionalHandlingIndicator(self):
        return self.AdditionalHandlingIndicator
    def set_AdditionalHandlingIndicator(self, AdditionalHandlingIndicator):
        self.AdditionalHandlingIndicator = AdditionalHandlingIndicator
    def get_PackageServiceOptions(self):
        return self.PackageServiceOptions
    def set_PackageServiceOptions(self, PackageServiceOptions):
        self.PackageServiceOptions = PackageServiceOptions
    def get_Commodity(self):
        return self.Commodity
    def set_Commodity(self, Commodity):
        self.Commodity = Commodity
    def get_HazMatPackageInformation(self):
        return self.HazMatPackageInformation
    def set_HazMatPackageInformation(self, HazMatPackageInformation):
        self.HazMatPackageInformation = HazMatPackageInformation
    def hasContent_(self):
        if (
            self.Description is not None or
            self.Packaging is not None or
            self.Dimensions is not None or
            self.DimWeight is not None or
            self.PackageWeight is not None or
            self.LargePackageIndicator is not None or
            self.ReferenceNumber or
            self.AdditionalHandlingIndicator is not None or
            self.PackageServiceOptions is not None or
            self.Commodity is not None or
            self.HazMatPackageInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackageType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackageType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackageType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackageType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackageType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.Packaging is not None:
            namespaceprefix_ = self.Packaging_nsprefix_ + ':' if (UseCapturedNS_ and self.Packaging_nsprefix_) else ''
            self.Packaging.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Packaging', pretty_print=pretty_print)
        if self.Dimensions is not None:
            namespaceprefix_ = self.Dimensions_nsprefix_ + ':' if (UseCapturedNS_ and self.Dimensions_nsprefix_) else ''
            self.Dimensions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Dimensions', pretty_print=pretty_print)
        if self.DimWeight is not None:
            namespaceprefix_ = self.DimWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.DimWeight_nsprefix_) else ''
            self.DimWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DimWeight', pretty_print=pretty_print)
        if self.PackageWeight is not None:
            namespaceprefix_ = self.PackageWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageWeight_nsprefix_) else ''
            self.PackageWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackageWeight', pretty_print=pretty_print)
        if self.LargePackageIndicator is not None:
            namespaceprefix_ = self.LargePackageIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.LargePackageIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLargePackageIndicator>%s</%sLargePackageIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LargePackageIndicator), input_name='LargePackageIndicator')), namespaceprefix_ , eol_))
        for ReferenceNumber_ in self.ReferenceNumber:
            namespaceprefix_ = self.ReferenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ReferenceNumber_nsprefix_) else ''
            ReferenceNumber_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReferenceNumber', pretty_print=pretty_print)
        if self.AdditionalHandlingIndicator is not None:
            namespaceprefix_ = self.AdditionalHandlingIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.AdditionalHandlingIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAdditionalHandlingIndicator>%s</%sAdditionalHandlingIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AdditionalHandlingIndicator), input_name='AdditionalHandlingIndicator')), namespaceprefix_ , eol_))
        if self.PackageServiceOptions is not None:
            namespaceprefix_ = self.PackageServiceOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageServiceOptions_nsprefix_) else ''
            self.PackageServiceOptions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackageServiceOptions', pretty_print=pretty_print)
        if self.Commodity is not None:
            namespaceprefix_ = self.Commodity_nsprefix_ + ':' if (UseCapturedNS_ and self.Commodity_nsprefix_) else ''
            self.Commodity.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Commodity', pretty_print=pretty_print)
        if self.HazMatPackageInformation is not None:
            namespaceprefix_ = self.HazMatPackageInformation_nsprefix_ + ':' if (UseCapturedNS_ and self.HazMatPackageInformation_nsprefix_) else ''
            self.HazMatPackageInformation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HazMatPackageInformation', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'Packaging':
            obj_ = PackagingType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Packaging = obj_
            obj_.original_tagname_ = 'Packaging'
        elif nodeName_ == 'Dimensions':
            obj_ = DimensionsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
        elif nodeName_ == 'DimWeight':
            obj_ = PackageWeightType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DimWeight = obj_
            obj_.original_tagname_ = 'DimWeight'
        elif nodeName_ == 'PackageWeight':
            obj_ = PackageWeightType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackageWeight = obj_
            obj_.original_tagname_ = 'PackageWeight'
        elif nodeName_ == 'LargePackageIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LargePackageIndicator')
            value_ = self.gds_validate_string(value_, node, 'LargePackageIndicator')
            self.LargePackageIndicator = value_
            self.LargePackageIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'ReferenceNumber':
            obj_ = ReferenceNumberType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReferenceNumber.append(obj_)
            obj_.original_tagname_ = 'ReferenceNumber'
        elif nodeName_ == 'AdditionalHandlingIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AdditionalHandlingIndicator')
            value_ = self.gds_validate_string(value_, node, 'AdditionalHandlingIndicator')
            self.AdditionalHandlingIndicator = value_
            self.AdditionalHandlingIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'PackageServiceOptions':
            obj_ = PackageServiceOptionsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackageServiceOptions = obj_
            obj_.original_tagname_ = 'PackageServiceOptions'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Commodity = obj_
            obj_.original_tagname_ = 'Commodity'
        elif nodeName_ == 'HazMatPackageInformation':
            obj_ = HazMatPackageInformationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HazMatPackageInformation = obj_
            obj_.original_tagname_ = 'HazMatPackageInformation'
# end class PackageType


class PackagingType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackagingType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackagingType.subclass:
            return PackagingType.subclass(*args_, **kwargs_)
        else:
            return PackagingType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackagingType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackagingType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackagingType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackagingType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackagingType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackagingType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackagingType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class PackagingType


class DimensionsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Length=None, Width=None, Height=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.UnitOfMeasurement_nsprefix_ = None
        self.Length = Length
        self.Length_nsprefix_ = None
        self.Width = Width
        self.Width_nsprefix_ = None
        self.Height = Height
        self.Height_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DimensionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DimensionsType.subclass:
            return DimensionsType.subclass(*args_, **kwargs_)
        else:
            return DimensionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UnitOfMeasurement(self):
        return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement):
        self.UnitOfMeasurement = UnitOfMeasurement
    def get_Length(self):
        return self.Length
    def set_Length(self, Length):
        self.Length = Length
    def get_Width(self):
        return self.Width
    def set_Width(self, Width):
        self.Width = Width
    def get_Height(self):
        return self.Height
    def set_Height(self, Height):
        self.Height = Height
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Length is not None or
            self.Width is not None or
            self.Height is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DimensionsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DimensionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DimensionsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DimensionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DimensionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DimensionsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DimensionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitOfMeasurement is not None:
            namespaceprefix_ = self.UnitOfMeasurement_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitOfMeasurement_nsprefix_) else ''
            self.UnitOfMeasurement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Length is not None:
            namespaceprefix_ = self.Length_nsprefix_ + ':' if (UseCapturedNS_ and self.Length_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLength>%s</%sLength>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Length), input_name='Length')), namespaceprefix_ , eol_))
        if self.Width is not None:
            namespaceprefix_ = self.Width_nsprefix_ + ':' if (UseCapturedNS_ and self.Width_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWidth>%s</%sWidth>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Width), input_name='Width')), namespaceprefix_ , eol_))
        if self.Height is not None:
            namespaceprefix_ = self.Height_nsprefix_ + ':' if (UseCapturedNS_ and self.Height_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHeight>%s</%sHeight>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Height), input_name='Height')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = ShipUnitOfMeasurementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Length':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Length')
            value_ = self.gds_validate_string(value_, node, 'Length')
            self.Length = value_
            self.Length_nsprefix_ = child_.prefix
        elif nodeName_ == 'Width':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Width')
            value_ = self.gds_validate_string(value_, node, 'Width')
            self.Width = value_
            self.Width_nsprefix_ = child_.prefix
        elif nodeName_ == 'Height':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Height')
            value_ = self.gds_validate_string(value_, node, 'Height')
            self.Height = value_
            self.Height_nsprefix_ = child_.prefix
# end class DimensionsType


class ShipUnitOfMeasurementType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipUnitOfMeasurementType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipUnitOfMeasurementType.subclass:
            return ShipUnitOfMeasurementType.subclass(*args_, **kwargs_)
        else:
            return ShipUnitOfMeasurementType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipUnitOfMeasurementType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipUnitOfMeasurementType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipUnitOfMeasurementType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipUnitOfMeasurementType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipUnitOfMeasurementType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipUnitOfMeasurementType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipUnitOfMeasurementType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class ShipUnitOfMeasurementType


class PackageWeightType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Weight=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.UnitOfMeasurement_nsprefix_ = None
        self.Weight = Weight
        self.Weight_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageWeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageWeightType.subclass:
            return PackageWeightType.subclass(*args_, **kwargs_)
        else:
            return PackageWeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UnitOfMeasurement(self):
        return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement):
        self.UnitOfMeasurement = UnitOfMeasurement
    def get_Weight(self):
        return self.Weight
    def set_Weight(self, Weight):
        self.Weight = Weight
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackageWeightType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageWeightType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackageWeightType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackageWeightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackageWeightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackageWeightType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackageWeightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitOfMeasurement is not None:
            namespaceprefix_ = self.UnitOfMeasurement_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitOfMeasurement_nsprefix_) else ''
            self.UnitOfMeasurement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Weight is not None:
            namespaceprefix_ = self.Weight_nsprefix_ + ':' if (UseCapturedNS_ and self.Weight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeight>%s</%sWeight>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Weight), input_name='Weight')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = ShipUnitOfMeasurementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Weight':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Weight')
            value_ = self.gds_validate_string(value_, node, 'Weight')
            self.Weight = value_
            self.Weight_nsprefix_ = child_.prefix
# end class PackageWeightType


class PackageServiceOptionsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DeliveryConfirmation=None, DeclaredValue=None, COD=None, AccessPointCOD=None, VerbalConfirmation=None, ShipperReleaseIndicator=None, Notification=None, HazMat=None, DryIce=None, UPSPremiumCareIndicator=None, ProactiveIndicator=None, PackageIdentifier=None, ClinicalTrialsID=None, RefrigerationIndicator=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DeliveryConfirmation = DeliveryConfirmation
        self.DeliveryConfirmation_nsprefix_ = None
        self.DeclaredValue = DeclaredValue
        self.DeclaredValue_nsprefix_ = None
        self.COD = COD
        self.COD_nsprefix_ = None
        self.AccessPointCOD = AccessPointCOD
        self.AccessPointCOD_nsprefix_ = None
        self.VerbalConfirmation = VerbalConfirmation
        self.VerbalConfirmation_nsprefix_ = None
        self.ShipperReleaseIndicator = ShipperReleaseIndicator
        self.ShipperReleaseIndicator_nsprefix_ = None
        self.Notification = Notification
        self.Notification_nsprefix_ = None
        if HazMat is None:
            self.HazMat = []
        else:
            self.HazMat = HazMat
        self.HazMat_nsprefix_ = None
        self.DryIce = DryIce
        self.DryIce_nsprefix_ = None
        self.UPSPremiumCareIndicator = UPSPremiumCareIndicator
        self.UPSPremiumCareIndicator_nsprefix_ = None
        self.ProactiveIndicator = ProactiveIndicator
        self.ProactiveIndicator_nsprefix_ = None
        self.PackageIdentifier = PackageIdentifier
        self.PackageIdentifier_nsprefix_ = None
        self.ClinicalTrialsID = ClinicalTrialsID
        self.ClinicalTrialsID_nsprefix_ = None
        self.RefrigerationIndicator = RefrigerationIndicator
        self.RefrigerationIndicator_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageServiceOptionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageServiceOptionsType.subclass:
            return PackageServiceOptionsType.subclass(*args_, **kwargs_)
        else:
            return PackageServiceOptionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DeliveryConfirmation(self):
        return self.DeliveryConfirmation
    def set_DeliveryConfirmation(self, DeliveryConfirmation):
        self.DeliveryConfirmation = DeliveryConfirmation
    def get_DeclaredValue(self):
        return self.DeclaredValue
    def set_DeclaredValue(self, DeclaredValue):
        self.DeclaredValue = DeclaredValue
    def get_COD(self):
        return self.COD
    def set_COD(self, COD):
        self.COD = COD
    def get_AccessPointCOD(self):
        return self.AccessPointCOD
    def set_AccessPointCOD(self, AccessPointCOD):
        self.AccessPointCOD = AccessPointCOD
    def get_VerbalConfirmation(self):
        return self.VerbalConfirmation
    def set_VerbalConfirmation(self, VerbalConfirmation):
        self.VerbalConfirmation = VerbalConfirmation
    def get_ShipperReleaseIndicator(self):
        return self.ShipperReleaseIndicator
    def set_ShipperReleaseIndicator(self, ShipperReleaseIndicator):
        self.ShipperReleaseIndicator = ShipperReleaseIndicator
    def get_Notification(self):
        return self.Notification
    def set_Notification(self, Notification):
        self.Notification = Notification
    def get_HazMat(self):
        return self.HazMat
    def set_HazMat(self, HazMat):
        self.HazMat = HazMat
    def add_HazMat(self, value):
        self.HazMat.append(value)
    def insert_HazMat_at(self, index, value):
        self.HazMat.insert(index, value)
    def replace_HazMat_at(self, index, value):
        self.HazMat[index] = value
    def get_DryIce(self):
        return self.DryIce
    def set_DryIce(self, DryIce):
        self.DryIce = DryIce
    def get_UPSPremiumCareIndicator(self):
        return self.UPSPremiumCareIndicator
    def set_UPSPremiumCareIndicator(self, UPSPremiumCareIndicator):
        self.UPSPremiumCareIndicator = UPSPremiumCareIndicator
    def get_ProactiveIndicator(self):
        return self.ProactiveIndicator
    def set_ProactiveIndicator(self, ProactiveIndicator):
        self.ProactiveIndicator = ProactiveIndicator
    def get_PackageIdentifier(self):
        return self.PackageIdentifier
    def set_PackageIdentifier(self, PackageIdentifier):
        self.PackageIdentifier = PackageIdentifier
    def get_ClinicalTrialsID(self):
        return self.ClinicalTrialsID
    def set_ClinicalTrialsID(self, ClinicalTrialsID):
        self.ClinicalTrialsID = ClinicalTrialsID
    def get_RefrigerationIndicator(self):
        return self.RefrigerationIndicator
    def set_RefrigerationIndicator(self, RefrigerationIndicator):
        self.RefrigerationIndicator = RefrigerationIndicator
    def hasContent_(self):
        if (
            self.DeliveryConfirmation is not None or
            self.DeclaredValue is not None or
            self.COD is not None or
            self.AccessPointCOD is not None or
            self.VerbalConfirmation is not None or
            self.ShipperReleaseIndicator is not None or
            self.Notification is not None or
            self.HazMat or
            self.DryIce is not None or
            self.UPSPremiumCareIndicator is not None or
            self.ProactiveIndicator is not None or
            self.PackageIdentifier is not None or
            self.ClinicalTrialsID is not None or
            self.RefrigerationIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackageServiceOptionsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageServiceOptionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackageServiceOptionsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackageServiceOptionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackageServiceOptionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackageServiceOptionsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackageServiceOptionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DeliveryConfirmation is not None:
            namespaceprefix_ = self.DeliveryConfirmation_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryConfirmation_nsprefix_) else ''
            self.DeliveryConfirmation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DeliveryConfirmation', pretty_print=pretty_print)
        if self.DeclaredValue is not None:
            namespaceprefix_ = self.DeclaredValue_nsprefix_ + ':' if (UseCapturedNS_ and self.DeclaredValue_nsprefix_) else ''
            self.DeclaredValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DeclaredValue', pretty_print=pretty_print)
        if self.COD is not None:
            namespaceprefix_ = self.COD_nsprefix_ + ':' if (UseCapturedNS_ and self.COD_nsprefix_) else ''
            self.COD.export(outfile, level, namespaceprefix_, namespacedef_='', name_='COD', pretty_print=pretty_print)
        if self.AccessPointCOD is not None:
            namespaceprefix_ = self.AccessPointCOD_nsprefix_ + ':' if (UseCapturedNS_ and self.AccessPointCOD_nsprefix_) else ''
            self.AccessPointCOD.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AccessPointCOD', pretty_print=pretty_print)
        if self.VerbalConfirmation is not None:
            namespaceprefix_ = self.VerbalConfirmation_nsprefix_ + ':' if (UseCapturedNS_ and self.VerbalConfirmation_nsprefix_) else ''
            self.VerbalConfirmation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='VerbalConfirmation', pretty_print=pretty_print)
        if self.ShipperReleaseIndicator is not None:
            namespaceprefix_ = self.ShipperReleaseIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipperReleaseIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipperReleaseIndicator>%s</%sShipperReleaseIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShipperReleaseIndicator), input_name='ShipperReleaseIndicator')), namespaceprefix_ , eol_))
        if self.Notification is not None:
            namespaceprefix_ = self.Notification_nsprefix_ + ':' if (UseCapturedNS_ and self.Notification_nsprefix_) else ''
            self.Notification.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Notification', pretty_print=pretty_print)
        for HazMat_ in self.HazMat:
            namespaceprefix_ = self.HazMat_nsprefix_ + ':' if (UseCapturedNS_ and self.HazMat_nsprefix_) else ''
            HazMat_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HazMat', pretty_print=pretty_print)
        if self.DryIce is not None:
            namespaceprefix_ = self.DryIce_nsprefix_ + ':' if (UseCapturedNS_ and self.DryIce_nsprefix_) else ''
            self.DryIce.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DryIce', pretty_print=pretty_print)
        if self.UPSPremiumCareIndicator is not None:
            namespaceprefix_ = self.UPSPremiumCareIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.UPSPremiumCareIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUPSPremiumCareIndicator>%s</%sUPSPremiumCareIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UPSPremiumCareIndicator), input_name='UPSPremiumCareIndicator')), namespaceprefix_ , eol_))
        if self.ProactiveIndicator is not None:
            namespaceprefix_ = self.ProactiveIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.ProactiveIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProactiveIndicator>%s</%sProactiveIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProactiveIndicator), input_name='ProactiveIndicator')), namespaceprefix_ , eol_))
        if self.PackageIdentifier is not None:
            namespaceprefix_ = self.PackageIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackageIdentifier>%s</%sPackageIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PackageIdentifier), input_name='PackageIdentifier')), namespaceprefix_ , eol_))
        if self.ClinicalTrialsID is not None:
            namespaceprefix_ = self.ClinicalTrialsID_nsprefix_ + ':' if (UseCapturedNS_ and self.ClinicalTrialsID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClinicalTrialsID>%s</%sClinicalTrialsID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClinicalTrialsID), input_name='ClinicalTrialsID')), namespaceprefix_ , eol_))
        if self.RefrigerationIndicator is not None:
            namespaceprefix_ = self.RefrigerationIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.RefrigerationIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRefrigerationIndicator>%s</%sRefrigerationIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RefrigerationIndicator), input_name='RefrigerationIndicator')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DeliveryConfirmation':
            obj_ = DeliveryConfirmationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DeliveryConfirmation = obj_
            obj_.original_tagname_ = 'DeliveryConfirmation'
        elif nodeName_ == 'DeclaredValue':
            obj_ = PackageDeclaredValueType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DeclaredValue = obj_
            obj_.original_tagname_ = 'DeclaredValue'
        elif nodeName_ == 'COD':
            obj_ = PSOCODType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.COD = obj_
            obj_.original_tagname_ = 'COD'
        elif nodeName_ == 'AccessPointCOD':
            obj_ = PackageServiceOptionsAccessPointCODType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AccessPointCOD = obj_
            obj_.original_tagname_ = 'AccessPointCOD'
        elif nodeName_ == 'VerbalConfirmation':
            obj_ = VerbalConfirmationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.VerbalConfirmation = obj_
            obj_.original_tagname_ = 'VerbalConfirmation'
        elif nodeName_ == 'ShipperReleaseIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShipperReleaseIndicator')
            value_ = self.gds_validate_string(value_, node, 'ShipperReleaseIndicator')
            self.ShipperReleaseIndicator = value_
            self.ShipperReleaseIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'Notification':
            obj_ = PSONotificationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Notification = obj_
            obj_.original_tagname_ = 'Notification'
        elif nodeName_ == 'HazMat':
            obj_ = HazMatType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HazMat.append(obj_)
            obj_.original_tagname_ = 'HazMat'
        elif nodeName_ == 'DryIce':
            obj_ = DryIceType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DryIce = obj_
            obj_.original_tagname_ = 'DryIce'
        elif nodeName_ == 'UPSPremiumCareIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UPSPremiumCareIndicator')
            value_ = self.gds_validate_string(value_, node, 'UPSPremiumCareIndicator')
            self.UPSPremiumCareIndicator = value_
            self.UPSPremiumCareIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'ProactiveIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProactiveIndicator')
            value_ = self.gds_validate_string(value_, node, 'ProactiveIndicator')
            self.ProactiveIndicator = value_
            self.ProactiveIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'PackageIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackageIdentifier')
            value_ = self.gds_validate_string(value_, node, 'PackageIdentifier')
            self.PackageIdentifier = value_
            self.PackageIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'ClinicalTrialsID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClinicalTrialsID')
            value_ = self.gds_validate_string(value_, node, 'ClinicalTrialsID')
            self.ClinicalTrialsID = value_
            self.ClinicalTrialsID_nsprefix_ = child_.prefix
        elif nodeName_ == 'RefrigerationIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RefrigerationIndicator')
            value_ = self.gds_validate_string(value_, node, 'RefrigerationIndicator')
            self.RefrigerationIndicator = value_
            self.RefrigerationIndicator_nsprefix_ = child_.prefix
# end class PackageServiceOptionsType


class PackageDeclaredValueType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, CurrencyCode=None, MonetaryValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.Type_nsprefix_ = None
        self.CurrencyCode = CurrencyCode
        self.CurrencyCode_nsprefix_ = None
        self.MonetaryValue = MonetaryValue
        self.MonetaryValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageDeclaredValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageDeclaredValueType.subclass:
            return PackageDeclaredValueType.subclass(*args_, **kwargs_)
        else:
            return PackageDeclaredValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_CurrencyCode(self):
        return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode):
        self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self):
        return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue):
        self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.Type is not None or
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackageDeclaredValueType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageDeclaredValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackageDeclaredValueType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackageDeclaredValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackageDeclaredValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackageDeclaredValueType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackageDeclaredValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            self.Type.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Type', pretty_print=pretty_print)
        if self.CurrencyCode is not None:
            namespaceprefix_ = self.CurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyCode>%s</%sCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), namespaceprefix_ , eol_))
        if self.MonetaryValue is not None:
            namespaceprefix_ = self.MonetaryValue_nsprefix_ + ':' if (UseCapturedNS_ and self.MonetaryValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMonetaryValue>%s</%sMonetaryValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            obj_ = DeclaredValueType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Type = obj_
            obj_.original_tagname_ = 'Type'
        elif nodeName_ == 'CurrencyCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'CurrencyCode')
            self.CurrencyCode = value_
            self.CurrencyCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'MonetaryValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MonetaryValue')
            value_ = self.gds_validate_string(value_, node, 'MonetaryValue')
            self.MonetaryValue = value_
            self.MonetaryValue_nsprefix_ = child_.prefix
# end class PackageDeclaredValueType


class DeclaredValueType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeclaredValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeclaredValueType.subclass:
            return DeclaredValueType.subclass(*args_, **kwargs_)
        else:
            return DeclaredValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeclaredValueType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeclaredValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DeclaredValueType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DeclaredValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DeclaredValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DeclaredValueType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeclaredValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class DeclaredValueType


class DeliveryConfirmationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DCISType=None, DCISNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DCISType = DCISType
        self.DCISType_nsprefix_ = None
        self.DCISNumber = DCISNumber
        self.DCISNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeliveryConfirmationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeliveryConfirmationType.subclass:
            return DeliveryConfirmationType.subclass(*args_, **kwargs_)
        else:
            return DeliveryConfirmationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DCISType(self):
        return self.DCISType
    def set_DCISType(self, DCISType):
        self.DCISType = DCISType
    def get_DCISNumber(self):
        return self.DCISNumber
    def set_DCISNumber(self, DCISNumber):
        self.DCISNumber = DCISNumber
    def hasContent_(self):
        if (
            self.DCISType is not None or
            self.DCISNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeliveryConfirmationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeliveryConfirmationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DeliveryConfirmationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DeliveryConfirmationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DeliveryConfirmationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DeliveryConfirmationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeliveryConfirmationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DCISType is not None:
            namespaceprefix_ = self.DCISType_nsprefix_ + ':' if (UseCapturedNS_ and self.DCISType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDCISType>%s</%sDCISType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DCISType), input_name='DCISType')), namespaceprefix_ , eol_))
        if self.DCISNumber is not None:
            namespaceprefix_ = self.DCISNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.DCISNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDCISNumber>%s</%sDCISNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DCISNumber), input_name='DCISNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DCISType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DCISType')
            value_ = self.gds_validate_string(value_, node, 'DCISType')
            self.DCISType = value_
            self.DCISType_nsprefix_ = child_.prefix
        elif nodeName_ == 'DCISNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DCISNumber')
            value_ = self.gds_validate_string(value_, node, 'DCISNumber')
            self.DCISNumber = value_
            self.DCISNumber_nsprefix_ = child_.prefix
# end class DeliveryConfirmationType


class LabelMethodType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LabelMethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LabelMethodType.subclass:
            return LabelMethodType.subclass(*args_, **kwargs_)
        else:
            return LabelMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LabelMethodType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LabelMethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LabelMethodType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LabelMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LabelMethodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LabelMethodType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LabelMethodType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class LabelMethodType


class VerbalConfirmationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ContactInfo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ContactInfo = ContactInfo
        self.ContactInfo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VerbalConfirmationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VerbalConfirmationType.subclass:
            return VerbalConfirmationType.subclass(*args_, **kwargs_)
        else:
            return VerbalConfirmationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ContactInfo(self):
        return self.ContactInfo
    def set_ContactInfo(self, ContactInfo):
        self.ContactInfo = ContactInfo
    def hasContent_(self):
        if (
            self.ContactInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='VerbalConfirmationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VerbalConfirmationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'VerbalConfirmationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='VerbalConfirmationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='VerbalConfirmationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='VerbalConfirmationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='VerbalConfirmationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactInfo is not None:
            namespaceprefix_ = self.ContactInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.ContactInfo_nsprefix_) else ''
            self.ContactInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ContactInfo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ContactInfo':
            obj_ = ContactInfoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ContactInfo = obj_
            obj_.original_tagname_ = 'ContactInfo'
# end class VerbalConfirmationType


class PSOCODType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CODFundsCode=None, CODAmount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CODFundsCode = CODFundsCode
        self.CODFundsCode_nsprefix_ = None
        self.CODAmount = CODAmount
        self.CODAmount_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PSOCODType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PSOCODType.subclass:
            return PSOCODType.subclass(*args_, **kwargs_)
        else:
            return PSOCODType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CODFundsCode(self):
        return self.CODFundsCode
    def set_CODFundsCode(self, CODFundsCode):
        self.CODFundsCode = CODFundsCode
    def get_CODAmount(self):
        return self.CODAmount
    def set_CODAmount(self, CODAmount):
        self.CODAmount = CODAmount
    def hasContent_(self):
        if (
            self.CODFundsCode is not None or
            self.CODAmount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PSOCODType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PSOCODType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PSOCODType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PSOCODType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PSOCODType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PSOCODType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PSOCODType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CODFundsCode is not None:
            namespaceprefix_ = self.CODFundsCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CODFundsCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCODFundsCode>%s</%sCODFundsCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CODFundsCode), input_name='CODFundsCode')), namespaceprefix_ , eol_))
        if self.CODAmount is not None:
            namespaceprefix_ = self.CODAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.CODAmount_nsprefix_) else ''
            self.CODAmount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CODAmount', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CODFundsCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CODFundsCode')
            value_ = self.gds_validate_string(value_, node, 'CODFundsCode')
            self.CODFundsCode = value_
            self.CODFundsCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'CODAmount':
            obj_ = CurrencyMonetaryType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CODAmount = obj_
            obj_.original_tagname_ = 'CODAmount'
# end class PSOCODType


class PackageServiceOptionsAccessPointCODType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CurrencyCode = CurrencyCode
        self.CurrencyCode_nsprefix_ = None
        self.MonetaryValue = MonetaryValue
        self.MonetaryValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageServiceOptionsAccessPointCODType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageServiceOptionsAccessPointCODType.subclass:
            return PackageServiceOptionsAccessPointCODType.subclass(*args_, **kwargs_)
        else:
            return PackageServiceOptionsAccessPointCODType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CurrencyCode(self):
        return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode):
        self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self):
        return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue):
        self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackageServiceOptionsAccessPointCODType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageServiceOptionsAccessPointCODType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackageServiceOptionsAccessPointCODType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackageServiceOptionsAccessPointCODType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackageServiceOptionsAccessPointCODType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackageServiceOptionsAccessPointCODType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackageServiceOptionsAccessPointCODType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            namespaceprefix_ = self.CurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyCode>%s</%sCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), namespaceprefix_ , eol_))
        if self.MonetaryValue is not None:
            namespaceprefix_ = self.MonetaryValue_nsprefix_ + ':' if (UseCapturedNS_ and self.MonetaryValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMonetaryValue>%s</%sMonetaryValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CurrencyCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'CurrencyCode')
            self.CurrencyCode = value_
            self.CurrencyCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'MonetaryValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MonetaryValue')
            value_ = self.gds_validate_string(value_, node, 'MonetaryValue')
            self.MonetaryValue = value_
            self.MonetaryValue_nsprefix_ = child_.prefix
# end class PackageServiceOptionsAccessPointCODType


class PSONotificationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, NotificationCode=None, EMail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.NotificationCode = NotificationCode
        self.NotificationCode_nsprefix_ = None
        self.EMail = EMail
        self.EMail_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PSONotificationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PSONotificationType.subclass:
            return PSONotificationType.subclass(*args_, **kwargs_)
        else:
            return PSONotificationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_NotificationCode(self):
        return self.NotificationCode
    def set_NotificationCode(self, NotificationCode):
        self.NotificationCode = NotificationCode
    def get_EMail(self):
        return self.EMail
    def set_EMail(self, EMail):
        self.EMail = EMail
    def hasContent_(self):
        if (
            self.NotificationCode is not None or
            self.EMail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PSONotificationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PSONotificationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PSONotificationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PSONotificationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PSONotificationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PSONotificationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PSONotificationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NotificationCode is not None:
            namespaceprefix_ = self.NotificationCode_nsprefix_ + ':' if (UseCapturedNS_ and self.NotificationCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNotificationCode>%s</%sNotificationCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NotificationCode), input_name='NotificationCode')), namespaceprefix_ , eol_))
        if self.EMail is not None:
            namespaceprefix_ = self.EMail_nsprefix_ + ':' if (UseCapturedNS_ and self.EMail_nsprefix_) else ''
            self.EMail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EMail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'NotificationCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NotificationCode')
            value_ = self.gds_validate_string(value_, node, 'NotificationCode')
            self.NotificationCode = value_
            self.NotificationCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'EMail':
            obj_ = EmailDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EMail = obj_
            obj_.original_tagname_ = 'EMail'
# end class PSONotificationType


class LabelSpecificationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LabelImageFormat=None, HTTPUserAgent=None, LabelStockSize=None, Instruction=None, CharacterSet=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.LabelImageFormat = LabelImageFormat
        self.LabelImageFormat_nsprefix_ = None
        self.HTTPUserAgent = HTTPUserAgent
        self.HTTPUserAgent_nsprefix_ = None
        self.LabelStockSize = LabelStockSize
        self.LabelStockSize_nsprefix_ = None
        if Instruction is None:
            self.Instruction = []
        else:
            self.Instruction = Instruction
        self.Instruction_nsprefix_ = None
        self.CharacterSet = CharacterSet
        self.CharacterSet_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LabelSpecificationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LabelSpecificationType.subclass:
            return LabelSpecificationType.subclass(*args_, **kwargs_)
        else:
            return LabelSpecificationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LabelImageFormat(self):
        return self.LabelImageFormat
    def set_LabelImageFormat(self, LabelImageFormat):
        self.LabelImageFormat = LabelImageFormat
    def get_HTTPUserAgent(self):
        return self.HTTPUserAgent
    def set_HTTPUserAgent(self, HTTPUserAgent):
        self.HTTPUserAgent = HTTPUserAgent
    def get_LabelStockSize(self):
        return self.LabelStockSize
    def set_LabelStockSize(self, LabelStockSize):
        self.LabelStockSize = LabelStockSize
    def get_Instruction(self):
        return self.Instruction
    def set_Instruction(self, Instruction):
        self.Instruction = Instruction
    def add_Instruction(self, value):
        self.Instruction.append(value)
    def insert_Instruction_at(self, index, value):
        self.Instruction.insert(index, value)
    def replace_Instruction_at(self, index, value):
        self.Instruction[index] = value
    def get_CharacterSet(self):
        return self.CharacterSet
    def set_CharacterSet(self, CharacterSet):
        self.CharacterSet = CharacterSet
    def hasContent_(self):
        if (
            self.LabelImageFormat is not None or
            self.HTTPUserAgent is not None or
            self.LabelStockSize is not None or
            self.Instruction or
            self.CharacterSet is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LabelSpecificationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LabelSpecificationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LabelSpecificationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LabelSpecificationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LabelSpecificationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LabelSpecificationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LabelSpecificationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LabelImageFormat is not None:
            namespaceprefix_ = self.LabelImageFormat_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelImageFormat_nsprefix_) else ''
            self.LabelImageFormat.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LabelImageFormat', pretty_print=pretty_print)
        if self.HTTPUserAgent is not None:
            namespaceprefix_ = self.HTTPUserAgent_nsprefix_ + ':' if (UseCapturedNS_ and self.HTTPUserAgent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHTTPUserAgent>%s</%sHTTPUserAgent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HTTPUserAgent), input_name='HTTPUserAgent')), namespaceprefix_ , eol_))
        if self.LabelStockSize is not None:
            namespaceprefix_ = self.LabelStockSize_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelStockSize_nsprefix_) else ''
            self.LabelStockSize.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LabelStockSize', pretty_print=pretty_print)
        for Instruction_ in self.Instruction:
            namespaceprefix_ = self.Instruction_nsprefix_ + ':' if (UseCapturedNS_ and self.Instruction_nsprefix_) else ''
            Instruction_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Instruction', pretty_print=pretty_print)
        if self.CharacterSet is not None:
            namespaceprefix_ = self.CharacterSet_nsprefix_ + ':' if (UseCapturedNS_ and self.CharacterSet_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCharacterSet>%s</%sCharacterSet>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CharacterSet), input_name='CharacterSet')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LabelImageFormat':
            obj_ = LabelImageFormatType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LabelImageFormat = obj_
            obj_.original_tagname_ = 'LabelImageFormat'
        elif nodeName_ == 'HTTPUserAgent':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HTTPUserAgent')
            value_ = self.gds_validate_string(value_, node, 'HTTPUserAgent')
            self.HTTPUserAgent = value_
            self.HTTPUserAgent_nsprefix_ = child_.prefix
        elif nodeName_ == 'LabelStockSize':
            obj_ = LabelStockSizeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LabelStockSize = obj_
            obj_.original_tagname_ = 'LabelStockSize'
        elif nodeName_ == 'Instruction':
            obj_ = InstructionCodeDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Instruction.append(obj_)
            obj_.original_tagname_ = 'Instruction'
        elif nodeName_ == 'CharacterSet':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CharacterSet')
            value_ = self.gds_validate_string(value_, node, 'CharacterSet')
            self.CharacterSet = value_
            self.CharacterSet_nsprefix_ = child_.prefix
# end class LabelSpecificationType


class InstructionCodeDescriptionType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InstructionCodeDescriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InstructionCodeDescriptionType.subclass:
            return InstructionCodeDescriptionType.subclass(*args_, **kwargs_)
        else:
            return InstructionCodeDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstructionCodeDescriptionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InstructionCodeDescriptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InstructionCodeDescriptionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InstructionCodeDescriptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InstructionCodeDescriptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InstructionCodeDescriptionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InstructionCodeDescriptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class InstructionCodeDescriptionType


class LabelImageFormatType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LabelImageFormatType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LabelImageFormatType.subclass:
            return LabelImageFormatType.subclass(*args_, **kwargs_)
        else:
            return LabelImageFormatType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LabelImageFormatType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LabelImageFormatType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LabelImageFormatType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LabelImageFormatType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LabelImageFormatType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LabelImageFormatType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LabelImageFormatType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class LabelImageFormatType


class LabelStockSizeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Height=None, Width=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Height = Height
        self.Height_nsprefix_ = None
        self.Width = Width
        self.Width_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LabelStockSizeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LabelStockSizeType.subclass:
            return LabelStockSizeType.subclass(*args_, **kwargs_)
        else:
            return LabelStockSizeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Height(self):
        return self.Height
    def set_Height(self, Height):
        self.Height = Height
    def get_Width(self):
        return self.Width
    def set_Width(self, Width):
        self.Width = Width
    def hasContent_(self):
        if (
            self.Height is not None or
            self.Width is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LabelStockSizeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LabelStockSizeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LabelStockSizeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LabelStockSizeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LabelStockSizeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LabelStockSizeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LabelStockSizeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Height is not None:
            namespaceprefix_ = self.Height_nsprefix_ + ':' if (UseCapturedNS_ and self.Height_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHeight>%s</%sHeight>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Height), input_name='Height')), namespaceprefix_ , eol_))
        if self.Width is not None:
            namespaceprefix_ = self.Width_nsprefix_ + ':' if (UseCapturedNS_ and self.Width_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWidth>%s</%sWidth>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Width), input_name='Width')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Height':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Height')
            value_ = self.gds_validate_string(value_, node, 'Height')
            self.Height = value_
            self.Height_nsprefix_ = child_.prefix
        elif nodeName_ == 'Width':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Width')
            value_ = self.gds_validate_string(value_, node, 'Width')
            self.Width = value_
            self.Width_nsprefix_ = child_.prefix
# end class LabelStockSizeType


class CommodityType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FreightClass=None, NMFC=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.FreightClass = FreightClass
        self.FreightClass_nsprefix_ = None
        self.NMFC = NMFC
        self.NMFC_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType.subclass:
            return CommodityType.subclass(*args_, **kwargs_)
        else:
            return CommodityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FreightClass(self):
        return self.FreightClass
    def set_FreightClass(self, FreightClass):
        self.FreightClass = FreightClass
    def get_NMFC(self):
        return self.NMFC
    def set_NMFC(self, NMFC):
        self.NMFC = NMFC
    def hasContent_(self):
        if (
            self.FreightClass is not None or
            self.NMFC is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CommodityType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CommodityType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CommodityType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CommodityType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CommodityType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CommodityType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CommodityType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FreightClass is not None:
            namespaceprefix_ = self.FreightClass_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightClass_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFreightClass>%s</%sFreightClass>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FreightClass), input_name='FreightClass')), namespaceprefix_ , eol_))
        if self.NMFC is not None:
            namespaceprefix_ = self.NMFC_nsprefix_ + ':' if (UseCapturedNS_ and self.NMFC_nsprefix_) else ''
            self.NMFC.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NMFC', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FreightClass':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FreightClass')
            value_ = self.gds_validate_string(value_, node, 'FreightClass')
            self.FreightClass = value_
            self.FreightClass_nsprefix_ = child_.prefix
        elif nodeName_ == 'NMFC':
            obj_ = NMFCType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NMFC = obj_
            obj_.original_tagname_ = 'NMFC'
# end class CommodityType


class NMFCType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PrimeCode=None, SubCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PrimeCode = PrimeCode
        self.PrimeCode_nsprefix_ = None
        self.SubCode = SubCode
        self.SubCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NMFCType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NMFCType.subclass:
            return NMFCType.subclass(*args_, **kwargs_)
        else:
            return NMFCType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PrimeCode(self):
        return self.PrimeCode
    def set_PrimeCode(self, PrimeCode):
        self.PrimeCode = PrimeCode
    def get_SubCode(self):
        return self.SubCode
    def set_SubCode(self, SubCode):
        self.SubCode = SubCode
    def hasContent_(self):
        if (
            self.PrimeCode is not None or
            self.SubCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NMFCType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NMFCType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NMFCType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NMFCType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NMFCType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NMFCType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NMFCType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PrimeCode is not None:
            namespaceprefix_ = self.PrimeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PrimeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrimeCode>%s</%sPrimeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrimeCode), input_name='PrimeCode')), namespaceprefix_ , eol_))
        if self.SubCode is not None:
            namespaceprefix_ = self.SubCode_nsprefix_ + ':' if (UseCapturedNS_ and self.SubCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSubCode>%s</%sSubCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SubCode), input_name='SubCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PrimeCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PrimeCode')
            value_ = self.gds_validate_string(value_, node, 'PrimeCode')
            self.PrimeCode = value_
            self.PrimeCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'SubCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SubCode')
            value_ = self.gds_validate_string(value_, node, 'SubCode')
            self.SubCode = value_
            self.SubCode_nsprefix_ = child_.prefix
# end class NMFCType


class ShipmentResultsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Disclaimer=None, ShipmentCharges=None, NegotiatedRateCharges=None, FRSShipmentData=None, RatingMethod=None, BillableWeightCalculationMethod=None, BillingWeight=None, ShipmentIdentificationNumber=None, MIDualReturnShipmentKey=None, ShipmentDigest=None, PackageResults=None, ControlLogReceipt=None, Form=None, CODTurnInPage=None, HighValueReport=None, LabelURL=None, LocalLanguageLabelURL=None, ReceiptURL=None, LocalLanguageReceiptURL=None, DGPaperImage=None, MasterCartonID=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Disclaimer is None:
            self.Disclaimer = []
        else:
            self.Disclaimer = Disclaimer
        self.Disclaimer_nsprefix_ = None
        self.ShipmentCharges = ShipmentCharges
        self.ShipmentCharges_nsprefix_ = None
        self.NegotiatedRateCharges = NegotiatedRateCharges
        self.NegotiatedRateCharges_nsprefix_ = None
        self.FRSShipmentData = FRSShipmentData
        self.FRSShipmentData_nsprefix_ = None
        self.RatingMethod = RatingMethod
        self.RatingMethod_nsprefix_ = None
        self.BillableWeightCalculationMethod = BillableWeightCalculationMethod
        self.BillableWeightCalculationMethod_nsprefix_ = None
        self.BillingWeight = BillingWeight
        self.BillingWeight_nsprefix_ = None
        self.ShipmentIdentificationNumber = ShipmentIdentificationNumber
        self.ShipmentIdentificationNumber_nsprefix_ = None
        self.MIDualReturnShipmentKey = MIDualReturnShipmentKey
        self.MIDualReturnShipmentKey_nsprefix_ = None
        self.ShipmentDigest = ShipmentDigest
        self.ShipmentDigest_nsprefix_ = None
        if PackageResults is None:
            self.PackageResults = []
        else:
            self.PackageResults = PackageResults
        self.PackageResults_nsprefix_ = None
        if ControlLogReceipt is None:
            self.ControlLogReceipt = []
        else:
            self.ControlLogReceipt = ControlLogReceipt
        self.ControlLogReceipt_nsprefix_ = None
        self.Form = Form
        self.Form_nsprefix_ = None
        self.CODTurnInPage = CODTurnInPage
        self.CODTurnInPage_nsprefix_ = None
        self.HighValueReport = HighValueReport
        self.HighValueReport_nsprefix_ = None
        self.LabelURL = LabelURL
        self.LabelURL_nsprefix_ = None
        self.LocalLanguageLabelURL = LocalLanguageLabelURL
        self.LocalLanguageLabelURL_nsprefix_ = None
        self.ReceiptURL = ReceiptURL
        self.ReceiptURL_nsprefix_ = None
        self.LocalLanguageReceiptURL = LocalLanguageReceiptURL
        self.LocalLanguageReceiptURL_nsprefix_ = None
        if DGPaperImage is None:
            self.DGPaperImage = []
        else:
            self.DGPaperImage = DGPaperImage
        self.DGPaperImage_nsprefix_ = None
        self.MasterCartonID = MasterCartonID
        self.MasterCartonID_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentResultsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentResultsType.subclass:
            return ShipmentResultsType.subclass(*args_, **kwargs_)
        else:
            return ShipmentResultsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Disclaimer(self):
        return self.Disclaimer
    def set_Disclaimer(self, Disclaimer):
        self.Disclaimer = Disclaimer
    def add_Disclaimer(self, value):
        self.Disclaimer.append(value)
    def insert_Disclaimer_at(self, index, value):
        self.Disclaimer.insert(index, value)
    def replace_Disclaimer_at(self, index, value):
        self.Disclaimer[index] = value
    def get_ShipmentCharges(self):
        return self.ShipmentCharges
    def set_ShipmentCharges(self, ShipmentCharges):
        self.ShipmentCharges = ShipmentCharges
    def get_NegotiatedRateCharges(self):
        return self.NegotiatedRateCharges
    def set_NegotiatedRateCharges(self, NegotiatedRateCharges):
        self.NegotiatedRateCharges = NegotiatedRateCharges
    def get_FRSShipmentData(self):
        return self.FRSShipmentData
    def set_FRSShipmentData(self, FRSShipmentData):
        self.FRSShipmentData = FRSShipmentData
    def get_RatingMethod(self):
        return self.RatingMethod
    def set_RatingMethod(self, RatingMethod):
        self.RatingMethod = RatingMethod
    def get_BillableWeightCalculationMethod(self):
        return self.BillableWeightCalculationMethod
    def set_BillableWeightCalculationMethod(self, BillableWeightCalculationMethod):
        self.BillableWeightCalculationMethod = BillableWeightCalculationMethod
    def get_BillingWeight(self):
        return self.BillingWeight
    def set_BillingWeight(self, BillingWeight):
        self.BillingWeight = BillingWeight
    def get_ShipmentIdentificationNumber(self):
        return self.ShipmentIdentificationNumber
    def set_ShipmentIdentificationNumber(self, ShipmentIdentificationNumber):
        self.ShipmentIdentificationNumber = ShipmentIdentificationNumber
    def get_MIDualReturnShipmentKey(self):
        return self.MIDualReturnShipmentKey
    def set_MIDualReturnShipmentKey(self, MIDualReturnShipmentKey):
        self.MIDualReturnShipmentKey = MIDualReturnShipmentKey
    def get_ShipmentDigest(self):
        return self.ShipmentDigest
    def set_ShipmentDigest(self, ShipmentDigest):
        self.ShipmentDigest = ShipmentDigest
    def get_PackageResults(self):
        return self.PackageResults
    def set_PackageResults(self, PackageResults):
        self.PackageResults = PackageResults
    def add_PackageResults(self, value):
        self.PackageResults.append(value)
    def insert_PackageResults_at(self, index, value):
        self.PackageResults.insert(index, value)
    def replace_PackageResults_at(self, index, value):
        self.PackageResults[index] = value
    def get_ControlLogReceipt(self):
        return self.ControlLogReceipt
    def set_ControlLogReceipt(self, ControlLogReceipt):
        self.ControlLogReceipt = ControlLogReceipt
    def add_ControlLogReceipt(self, value):
        self.ControlLogReceipt.append(value)
    def insert_ControlLogReceipt_at(self, index, value):
        self.ControlLogReceipt.insert(index, value)
    def replace_ControlLogReceipt_at(self, index, value):
        self.ControlLogReceipt[index] = value
    def get_Form(self):
        return self.Form
    def set_Form(self, Form):
        self.Form = Form
    def get_CODTurnInPage(self):
        return self.CODTurnInPage
    def set_CODTurnInPage(self, CODTurnInPage):
        self.CODTurnInPage = CODTurnInPage
    def get_HighValueReport(self):
        return self.HighValueReport
    def set_HighValueReport(self, HighValueReport):
        self.HighValueReport = HighValueReport
    def get_LabelURL(self):
        return self.LabelURL
    def set_LabelURL(self, LabelURL):
        self.LabelURL = LabelURL
    def get_LocalLanguageLabelURL(self):
        return self.LocalLanguageLabelURL
    def set_LocalLanguageLabelURL(self, LocalLanguageLabelURL):
        self.LocalLanguageLabelURL = LocalLanguageLabelURL
    def get_ReceiptURL(self):
        return self.ReceiptURL
    def set_ReceiptURL(self, ReceiptURL):
        self.ReceiptURL = ReceiptURL
    def get_LocalLanguageReceiptURL(self):
        return self.LocalLanguageReceiptURL
    def set_LocalLanguageReceiptURL(self, LocalLanguageReceiptURL):
        self.LocalLanguageReceiptURL = LocalLanguageReceiptURL
    def get_DGPaperImage(self):
        return self.DGPaperImage
    def set_DGPaperImage(self, DGPaperImage):
        self.DGPaperImage = DGPaperImage
    def add_DGPaperImage(self, value):
        self.DGPaperImage.append(value)
    def insert_DGPaperImage_at(self, index, value):
        self.DGPaperImage.insert(index, value)
    def replace_DGPaperImage_at(self, index, value):
        self.DGPaperImage[index] = value
    def get_MasterCartonID(self):
        return self.MasterCartonID
    def set_MasterCartonID(self, MasterCartonID):
        self.MasterCartonID = MasterCartonID
    def hasContent_(self):
        if (
            self.Disclaimer or
            self.ShipmentCharges is not None or
            self.NegotiatedRateCharges is not None or
            self.FRSShipmentData is not None or
            self.RatingMethod is not None or
            self.BillableWeightCalculationMethod is not None or
            self.BillingWeight is not None or
            self.ShipmentIdentificationNumber is not None or
            self.MIDualReturnShipmentKey is not None or
            self.ShipmentDigest is not None or
            self.PackageResults or
            self.ControlLogReceipt or
            self.Form is not None or
            self.CODTurnInPage is not None or
            self.HighValueReport is not None or
            self.LabelURL is not None or
            self.LocalLanguageLabelURL is not None or
            self.ReceiptURL is not None or
            self.LocalLanguageReceiptURL is not None or
            self.DGPaperImage or
            self.MasterCartonID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentResultsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentResultsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentResultsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentResultsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentResultsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentResultsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentResultsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Disclaimer_ in self.Disclaimer:
            namespaceprefix_ = self.Disclaimer_nsprefix_ + ':' if (UseCapturedNS_ and self.Disclaimer_nsprefix_) else ''
            Disclaimer_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Disclaimer', pretty_print=pretty_print)
        if self.ShipmentCharges is not None:
            namespaceprefix_ = self.ShipmentCharges_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentCharges_nsprefix_) else ''
            self.ShipmentCharges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentCharges', pretty_print=pretty_print)
        if self.NegotiatedRateCharges is not None:
            namespaceprefix_ = self.NegotiatedRateCharges_nsprefix_ + ':' if (UseCapturedNS_ and self.NegotiatedRateCharges_nsprefix_) else ''
            self.NegotiatedRateCharges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NegotiatedRateCharges', pretty_print=pretty_print)
        if self.FRSShipmentData is not None:
            namespaceprefix_ = self.FRSShipmentData_nsprefix_ + ':' if (UseCapturedNS_ and self.FRSShipmentData_nsprefix_) else ''
            self.FRSShipmentData.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FRSShipmentData', pretty_print=pretty_print)
        if self.RatingMethod is not None:
            namespaceprefix_ = self.RatingMethod_nsprefix_ + ':' if (UseCapturedNS_ and self.RatingMethod_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRatingMethod>%s</%sRatingMethod>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RatingMethod), input_name='RatingMethod')), namespaceprefix_ , eol_))
        if self.BillableWeightCalculationMethod is not None:
            namespaceprefix_ = self.BillableWeightCalculationMethod_nsprefix_ + ':' if (UseCapturedNS_ and self.BillableWeightCalculationMethod_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBillableWeightCalculationMethod>%s</%sBillableWeightCalculationMethod>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BillableWeightCalculationMethod), input_name='BillableWeightCalculationMethod')), namespaceprefix_ , eol_))
        if self.BillingWeight is not None:
            namespaceprefix_ = self.BillingWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.BillingWeight_nsprefix_) else ''
            self.BillingWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BillingWeight', pretty_print=pretty_print)
        if self.ShipmentIdentificationNumber is not None:
            namespaceprefix_ = self.ShipmentIdentificationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentIdentificationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipmentIdentificationNumber>%s</%sShipmentIdentificationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShipmentIdentificationNumber), input_name='ShipmentIdentificationNumber')), namespaceprefix_ , eol_))
        if self.MIDualReturnShipmentKey is not None:
            namespaceprefix_ = self.MIDualReturnShipmentKey_nsprefix_ + ':' if (UseCapturedNS_ and self.MIDualReturnShipmentKey_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMIDualReturnShipmentKey>%s</%sMIDualReturnShipmentKey>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MIDualReturnShipmentKey), input_name='MIDualReturnShipmentKey')), namespaceprefix_ , eol_))
        if self.ShipmentDigest is not None:
            namespaceprefix_ = self.ShipmentDigest_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentDigest_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipmentDigest>%s</%sShipmentDigest>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShipmentDigest), input_name='ShipmentDigest')), namespaceprefix_ , eol_))
        for PackageResults_ in self.PackageResults:
            namespaceprefix_ = self.PackageResults_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageResults_nsprefix_) else ''
            PackageResults_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackageResults', pretty_print=pretty_print)
        for ControlLogReceipt_ in self.ControlLogReceipt:
            namespaceprefix_ = self.ControlLogReceipt_nsprefix_ + ':' if (UseCapturedNS_ and self.ControlLogReceipt_nsprefix_) else ''
            ControlLogReceipt_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ControlLogReceipt', pretty_print=pretty_print)
        if self.Form is not None:
            namespaceprefix_ = self.Form_nsprefix_ + ':' if (UseCapturedNS_ and self.Form_nsprefix_) else ''
            self.Form.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Form', pretty_print=pretty_print)
        if self.CODTurnInPage is not None:
            namespaceprefix_ = self.CODTurnInPage_nsprefix_ + ':' if (UseCapturedNS_ and self.CODTurnInPage_nsprefix_) else ''
            self.CODTurnInPage.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CODTurnInPage', pretty_print=pretty_print)
        if self.HighValueReport is not None:
            namespaceprefix_ = self.HighValueReport_nsprefix_ + ':' if (UseCapturedNS_ and self.HighValueReport_nsprefix_) else ''
            self.HighValueReport.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HighValueReport', pretty_print=pretty_print)
        if self.LabelURL is not None:
            namespaceprefix_ = self.LabelURL_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelURL_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelURL>%s</%sLabelURL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LabelURL), input_name='LabelURL')), namespaceprefix_ , eol_))
        if self.LocalLanguageLabelURL is not None:
            namespaceprefix_ = self.LocalLanguageLabelURL_nsprefix_ + ':' if (UseCapturedNS_ and self.LocalLanguageLabelURL_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocalLanguageLabelURL>%s</%sLocalLanguageLabelURL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocalLanguageLabelURL), input_name='LocalLanguageLabelURL')), namespaceprefix_ , eol_))
        if self.ReceiptURL is not None:
            namespaceprefix_ = self.ReceiptURL_nsprefix_ + ':' if (UseCapturedNS_ and self.ReceiptURL_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReceiptURL>%s</%sReceiptURL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReceiptURL), input_name='ReceiptURL')), namespaceprefix_ , eol_))
        if self.LocalLanguageReceiptURL is not None:
            namespaceprefix_ = self.LocalLanguageReceiptURL_nsprefix_ + ':' if (UseCapturedNS_ and self.LocalLanguageReceiptURL_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocalLanguageReceiptURL>%s</%sLocalLanguageReceiptURL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocalLanguageReceiptURL), input_name='LocalLanguageReceiptURL')), namespaceprefix_ , eol_))
        for DGPaperImage_ in self.DGPaperImage:
            namespaceprefix_ = self.DGPaperImage_nsprefix_ + ':' if (UseCapturedNS_ and self.DGPaperImage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDGPaperImage>%s</%sDGPaperImage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(DGPaperImage_), input_name='DGPaperImage')), namespaceprefix_ , eol_))
        if self.MasterCartonID is not None:
            namespaceprefix_ = self.MasterCartonID_nsprefix_ + ':' if (UseCapturedNS_ and self.MasterCartonID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMasterCartonID>%s</%sMasterCartonID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MasterCartonID), input_name='MasterCartonID')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Disclaimer':
            obj_ = DisclaimerType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Disclaimer.append(obj_)
            obj_.original_tagname_ = 'Disclaimer'
        elif nodeName_ == 'ShipmentCharges':
            obj_ = ShipmentChargesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentCharges = obj_
            obj_.original_tagname_ = 'ShipmentCharges'
        elif nodeName_ == 'NegotiatedRateCharges':
            obj_ = NegotiatedRateChargesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NegotiatedRateCharges = obj_
            obj_.original_tagname_ = 'NegotiatedRateCharges'
        elif nodeName_ == 'FRSShipmentData':
            obj_ = FRSShipmentDataType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FRSShipmentData = obj_
            obj_.original_tagname_ = 'FRSShipmentData'
        elif nodeName_ == 'RatingMethod':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RatingMethod')
            value_ = self.gds_validate_string(value_, node, 'RatingMethod')
            self.RatingMethod = value_
            self.RatingMethod_nsprefix_ = child_.prefix
        elif nodeName_ == 'BillableWeightCalculationMethod':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BillableWeightCalculationMethod')
            value_ = self.gds_validate_string(value_, node, 'BillableWeightCalculationMethod')
            self.BillableWeightCalculationMethod = value_
            self.BillableWeightCalculationMethod_nsprefix_ = child_.prefix
        elif nodeName_ == 'BillingWeight':
            obj_ = BillingWeightType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BillingWeight = obj_
            obj_.original_tagname_ = 'BillingWeight'
        elif nodeName_ == 'ShipmentIdentificationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShipmentIdentificationNumber')
            value_ = self.gds_validate_string(value_, node, 'ShipmentIdentificationNumber')
            self.ShipmentIdentificationNumber = value_
            self.ShipmentIdentificationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'MIDualReturnShipmentKey':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MIDualReturnShipmentKey')
            value_ = self.gds_validate_string(value_, node, 'MIDualReturnShipmentKey')
            self.MIDualReturnShipmentKey = value_
            self.MIDualReturnShipmentKey_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShipmentDigest':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShipmentDigest')
            value_ = self.gds_validate_string(value_, node, 'ShipmentDigest')
            self.ShipmentDigest = value_
            self.ShipmentDigest_nsprefix_ = child_.prefix
        elif nodeName_ == 'PackageResults':
            obj_ = PackageResultsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackageResults.append(obj_)
            obj_.original_tagname_ = 'PackageResults'
        elif nodeName_ == 'ControlLogReceipt':
            class_obj_ = self.get_class_obj_(child_, ImageType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ControlLogReceipt.append(obj_)
            obj_.original_tagname_ = 'ControlLogReceipt'
        elif nodeName_ == 'Form':
            obj_ = FormType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Form = obj_
            obj_.original_tagname_ = 'Form'
        elif nodeName_ == 'CODTurnInPage':
            obj_ = SCReportType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CODTurnInPage = obj_
            obj_.original_tagname_ = 'CODTurnInPage'
        elif nodeName_ == 'HighValueReport':
            obj_ = HighValueReportType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HighValueReport = obj_
            obj_.original_tagname_ = 'HighValueReport'
        elif nodeName_ == 'LabelURL':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelURL')
            value_ = self.gds_validate_string(value_, node, 'LabelURL')
            self.LabelURL = value_
            self.LabelURL_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocalLanguageLabelURL':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocalLanguageLabelURL')
            value_ = self.gds_validate_string(value_, node, 'LocalLanguageLabelURL')
            self.LocalLanguageLabelURL = value_
            self.LocalLanguageLabelURL_nsprefix_ = child_.prefix
        elif nodeName_ == 'ReceiptURL':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ReceiptURL')
            value_ = self.gds_validate_string(value_, node, 'ReceiptURL')
            self.ReceiptURL = value_
            self.ReceiptURL_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocalLanguageReceiptURL':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocalLanguageReceiptURL')
            value_ = self.gds_validate_string(value_, node, 'LocalLanguageReceiptURL')
            self.LocalLanguageReceiptURL = value_
            self.LocalLanguageReceiptURL_nsprefix_ = child_.prefix
        elif nodeName_ == 'DGPaperImage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DGPaperImage')
            value_ = self.gds_validate_string(value_, node, 'DGPaperImage')
            self.DGPaperImage.append(value_)
            self.DGPaperImage_nsprefix_ = child_.prefix
        elif nodeName_ == 'MasterCartonID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MasterCartonID')
            value_ = self.gds_validate_string(value_, node, 'MasterCartonID')
            self.MasterCartonID = value_
            self.MasterCartonID_nsprefix_ = child_.prefix
# end class ShipmentResultsType


class DisclaimerType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DisclaimerType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DisclaimerType.subclass:
            return DisclaimerType.subclass(*args_, **kwargs_)
        else:
            return DisclaimerType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DisclaimerType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DisclaimerType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DisclaimerType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DisclaimerType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DisclaimerType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DisclaimerType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DisclaimerType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class DisclaimerType


class ShipmentChargesType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RateChart=None, BaseServiceCharge=None, TransportationCharges=None, ItemizedCharges=None, ServiceOptionsCharges=None, TaxCharges=None, TotalCharges=None, TotalChargesWithTaxes=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RateChart = RateChart
        self.RateChart_nsprefix_ = None
        self.BaseServiceCharge = BaseServiceCharge
        self.BaseServiceCharge_nsprefix_ = None
        self.TransportationCharges = TransportationCharges
        self.TransportationCharges_nsprefix_ = None
        if ItemizedCharges is None:
            self.ItemizedCharges = []
        else:
            self.ItemizedCharges = ItemizedCharges
        self.ItemizedCharges_nsprefix_ = None
        self.ServiceOptionsCharges = ServiceOptionsCharges
        self.ServiceOptionsCharges_nsprefix_ = None
        if TaxCharges is None:
            self.TaxCharges = []
        else:
            self.TaxCharges = TaxCharges
        self.TaxCharges_nsprefix_ = None
        self.TotalCharges = TotalCharges
        self.TotalCharges_nsprefix_ = None
        self.TotalChargesWithTaxes = TotalChargesWithTaxes
        self.TotalChargesWithTaxes_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentChargesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentChargesType.subclass:
            return ShipmentChargesType.subclass(*args_, **kwargs_)
        else:
            return ShipmentChargesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RateChart(self):
        return self.RateChart
    def set_RateChart(self, RateChart):
        self.RateChart = RateChart
    def get_BaseServiceCharge(self):
        return self.BaseServiceCharge
    def set_BaseServiceCharge(self, BaseServiceCharge):
        self.BaseServiceCharge = BaseServiceCharge
    def get_TransportationCharges(self):
        return self.TransportationCharges
    def set_TransportationCharges(self, TransportationCharges):
        self.TransportationCharges = TransportationCharges
    def get_ItemizedCharges(self):
        return self.ItemizedCharges
    def set_ItemizedCharges(self, ItemizedCharges):
        self.ItemizedCharges = ItemizedCharges
    def add_ItemizedCharges(self, value):
        self.ItemizedCharges.append(value)
    def insert_ItemizedCharges_at(self, index, value):
        self.ItemizedCharges.insert(index, value)
    def replace_ItemizedCharges_at(self, index, value):
        self.ItemizedCharges[index] = value
    def get_ServiceOptionsCharges(self):
        return self.ServiceOptionsCharges
    def set_ServiceOptionsCharges(self, ServiceOptionsCharges):
        self.ServiceOptionsCharges = ServiceOptionsCharges
    def get_TaxCharges(self):
        return self.TaxCharges
    def set_TaxCharges(self, TaxCharges):
        self.TaxCharges = TaxCharges
    def add_TaxCharges(self, value):
        self.TaxCharges.append(value)
    def insert_TaxCharges_at(self, index, value):
        self.TaxCharges.insert(index, value)
    def replace_TaxCharges_at(self, index, value):
        self.TaxCharges[index] = value
    def get_TotalCharges(self):
        return self.TotalCharges
    def set_TotalCharges(self, TotalCharges):
        self.TotalCharges = TotalCharges
    def get_TotalChargesWithTaxes(self):
        return self.TotalChargesWithTaxes
    def set_TotalChargesWithTaxes(self, TotalChargesWithTaxes):
        self.TotalChargesWithTaxes = TotalChargesWithTaxes
    def hasContent_(self):
        if (
            self.RateChart is not None or
            self.BaseServiceCharge is not None or
            self.TransportationCharges is not None or
            self.ItemizedCharges or
            self.ServiceOptionsCharges is not None or
            self.TaxCharges or
            self.TotalCharges is not None or
            self.TotalChargesWithTaxes is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentChargesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentChargesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentChargesType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentChargesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentChargesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentChargesType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentChargesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RateChart is not None:
            namespaceprefix_ = self.RateChart_nsprefix_ + ':' if (UseCapturedNS_ and self.RateChart_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateChart>%s</%sRateChart>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateChart), input_name='RateChart')), namespaceprefix_ , eol_))
        if self.BaseServiceCharge is not None:
            namespaceprefix_ = self.BaseServiceCharge_nsprefix_ + ':' if (UseCapturedNS_ and self.BaseServiceCharge_nsprefix_) else ''
            self.BaseServiceCharge.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BaseServiceCharge', pretty_print=pretty_print)
        if self.TransportationCharges is not None:
            namespaceprefix_ = self.TransportationCharges_nsprefix_ + ':' if (UseCapturedNS_ and self.TransportationCharges_nsprefix_) else ''
            self.TransportationCharges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransportationCharges', pretty_print=pretty_print)
        for ItemizedCharges_ in self.ItemizedCharges:
            namespaceprefix_ = self.ItemizedCharges_nsprefix_ + ':' if (UseCapturedNS_ and self.ItemizedCharges_nsprefix_) else ''
            ItemizedCharges_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ItemizedCharges', pretty_print=pretty_print)
        if self.ServiceOptionsCharges is not None:
            namespaceprefix_ = self.ServiceOptionsCharges_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceOptionsCharges_nsprefix_) else ''
            self.ServiceOptionsCharges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ServiceOptionsCharges', pretty_print=pretty_print)
        for TaxCharges_ in self.TaxCharges:
            namespaceprefix_ = self.TaxCharges_nsprefix_ + ':' if (UseCapturedNS_ and self.TaxCharges_nsprefix_) else ''
            TaxCharges_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TaxCharges', pretty_print=pretty_print)
        if self.TotalCharges is not None:
            namespaceprefix_ = self.TotalCharges_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalCharges_nsprefix_) else ''
            self.TotalCharges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalCharges', pretty_print=pretty_print)
        if self.TotalChargesWithTaxes is not None:
            namespaceprefix_ = self.TotalChargesWithTaxes_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalChargesWithTaxes_nsprefix_) else ''
            self.TotalChargesWithTaxes.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalChargesWithTaxes', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RateChart':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RateChart')
            value_ = self.gds_validate_string(value_, node, 'RateChart')
            self.RateChart = value_
            self.RateChart_nsprefix_ = child_.prefix
        elif nodeName_ == 'BaseServiceCharge':
            obj_ = ShipChargeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BaseServiceCharge = obj_
            obj_.original_tagname_ = 'BaseServiceCharge'
        elif nodeName_ == 'TransportationCharges':
            obj_ = ShipChargeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransportationCharges = obj_
            obj_.original_tagname_ = 'TransportationCharges'
        elif nodeName_ == 'ItemizedCharges':
            obj_ = ShipChargeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ItemizedCharges.append(obj_)
            obj_.original_tagname_ = 'ItemizedCharges'
        elif nodeName_ == 'ServiceOptionsCharges':
            obj_ = ShipChargeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ServiceOptionsCharges = obj_
            obj_.original_tagname_ = 'ServiceOptionsCharges'
        elif nodeName_ == 'TaxCharges':
            obj_ = TaxChargeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TaxCharges.append(obj_)
            obj_.original_tagname_ = 'TaxCharges'
        elif nodeName_ == 'TotalCharges':
            obj_ = ShipChargeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalCharges = obj_
            obj_.original_tagname_ = 'TotalCharges'
        elif nodeName_ == 'TotalChargesWithTaxes':
            obj_ = ShipChargeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalChargesWithTaxes = obj_
            obj_.original_tagname_ = 'TotalChargesWithTaxes'
# end class ShipmentChargesType


class NegotiatedRateChargesType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ItemizedCharges=None, TaxCharges=None, TotalCharge=None, TotalChargesWithTaxes=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if ItemizedCharges is None:
            self.ItemizedCharges = []
        else:
            self.ItemizedCharges = ItemizedCharges
        self.ItemizedCharges_nsprefix_ = None
        if TaxCharges is None:
            self.TaxCharges = []
        else:
            self.TaxCharges = TaxCharges
        self.TaxCharges_nsprefix_ = None
        self.TotalCharge = TotalCharge
        self.TotalCharge_nsprefix_ = None
        self.TotalChargesWithTaxes = TotalChargesWithTaxes
        self.TotalChargesWithTaxes_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NegotiatedRateChargesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NegotiatedRateChargesType.subclass:
            return NegotiatedRateChargesType.subclass(*args_, **kwargs_)
        else:
            return NegotiatedRateChargesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ItemizedCharges(self):
        return self.ItemizedCharges
    def set_ItemizedCharges(self, ItemizedCharges):
        self.ItemizedCharges = ItemizedCharges
    def add_ItemizedCharges(self, value):
        self.ItemizedCharges.append(value)
    def insert_ItemizedCharges_at(self, index, value):
        self.ItemizedCharges.insert(index, value)
    def replace_ItemizedCharges_at(self, index, value):
        self.ItemizedCharges[index] = value
    def get_TaxCharges(self):
        return self.TaxCharges
    def set_TaxCharges(self, TaxCharges):
        self.TaxCharges = TaxCharges
    def add_TaxCharges(self, value):
        self.TaxCharges.append(value)
    def insert_TaxCharges_at(self, index, value):
        self.TaxCharges.insert(index, value)
    def replace_TaxCharges_at(self, index, value):
        self.TaxCharges[index] = value
    def get_TotalCharge(self):
        return self.TotalCharge
    def set_TotalCharge(self, TotalCharge):
        self.TotalCharge = TotalCharge
    def get_TotalChargesWithTaxes(self):
        return self.TotalChargesWithTaxes
    def set_TotalChargesWithTaxes(self, TotalChargesWithTaxes):
        self.TotalChargesWithTaxes = TotalChargesWithTaxes
    def hasContent_(self):
        if (
            self.ItemizedCharges or
            self.TaxCharges or
            self.TotalCharge is not None or
            self.TotalChargesWithTaxes is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NegotiatedRateChargesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NegotiatedRateChargesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NegotiatedRateChargesType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NegotiatedRateChargesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NegotiatedRateChargesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NegotiatedRateChargesType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NegotiatedRateChargesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ItemizedCharges_ in self.ItemizedCharges:
            namespaceprefix_ = self.ItemizedCharges_nsprefix_ + ':' if (UseCapturedNS_ and self.ItemizedCharges_nsprefix_) else ''
            ItemizedCharges_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ItemizedCharges', pretty_print=pretty_print)
        for TaxCharges_ in self.TaxCharges:
            namespaceprefix_ = self.TaxCharges_nsprefix_ + ':' if (UseCapturedNS_ and self.TaxCharges_nsprefix_) else ''
            TaxCharges_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TaxCharges', pretty_print=pretty_print)
        if self.TotalCharge is not None:
            namespaceprefix_ = self.TotalCharge_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalCharge_nsprefix_) else ''
            self.TotalCharge.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalCharge', pretty_print=pretty_print)
        if self.TotalChargesWithTaxes is not None:
            namespaceprefix_ = self.TotalChargesWithTaxes_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalChargesWithTaxes_nsprefix_) else ''
            self.TotalChargesWithTaxes.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalChargesWithTaxes', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ItemizedCharges':
            obj_ = ShipChargeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ItemizedCharges.append(obj_)
            obj_.original_tagname_ = 'ItemizedCharges'
        elif nodeName_ == 'TaxCharges':
            obj_ = TaxChargeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TaxCharges.append(obj_)
            obj_.original_tagname_ = 'TaxCharges'
        elif nodeName_ == 'TotalCharge':
            obj_ = ShipChargeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalCharge = obj_
            obj_.original_tagname_ = 'TotalCharge'
        elif nodeName_ == 'TotalChargesWithTaxes':
            obj_ = ShipChargeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalChargesWithTaxes = obj_
            obj_.original_tagname_ = 'TotalChargesWithTaxes'
# end class NegotiatedRateChargesType


class ShipChargeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, CurrencyCode=None, MonetaryValue=None, SubType=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.CurrencyCode = CurrencyCode
        self.CurrencyCode_nsprefix_ = None
        self.MonetaryValue = MonetaryValue
        self.MonetaryValue_nsprefix_ = None
        self.SubType = SubType
        self.SubType_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipChargeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipChargeType.subclass:
            return ShipChargeType.subclass(*args_, **kwargs_)
        else:
            return ShipChargeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_CurrencyCode(self):
        return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode):
        self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self):
        return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue):
        self.MonetaryValue = MonetaryValue
    def get_SubType(self):
        return self.SubType
    def set_SubType(self, SubType):
        self.SubType = SubType
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None or
            self.CurrencyCode is not None or
            self.MonetaryValue is not None or
            self.SubType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipChargeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipChargeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipChargeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipChargeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipChargeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipChargeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipChargeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.CurrencyCode is not None:
            namespaceprefix_ = self.CurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyCode>%s</%sCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), namespaceprefix_ , eol_))
        if self.MonetaryValue is not None:
            namespaceprefix_ = self.MonetaryValue_nsprefix_ + ':' if (UseCapturedNS_ and self.MonetaryValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMonetaryValue>%s</%sMonetaryValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), namespaceprefix_ , eol_))
        if self.SubType is not None:
            namespaceprefix_ = self.SubType_nsprefix_ + ':' if (UseCapturedNS_ and self.SubType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSubType>%s</%sSubType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SubType), input_name='SubType')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'CurrencyCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'CurrencyCode')
            self.CurrencyCode = value_
            self.CurrencyCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'MonetaryValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MonetaryValue')
            value_ = self.gds_validate_string(value_, node, 'MonetaryValue')
            self.MonetaryValue = value_
            self.MonetaryValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'SubType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SubType')
            value_ = self.gds_validate_string(value_, node, 'SubType')
            self.SubType = value_
            self.SubType_nsprefix_ = child_.prefix
# end class ShipChargeType


class TaxChargeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, MonetaryValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.Type_nsprefix_ = None
        self.MonetaryValue = MonetaryValue
        self.MonetaryValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxChargeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxChargeType.subclass:
            return TaxChargeType.subclass(*args_, **kwargs_)
        else:
            return TaxChargeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_MonetaryValue(self):
        return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue):
        self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.Type is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TaxChargeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TaxChargeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TaxChargeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TaxChargeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TaxChargeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TaxChargeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TaxChargeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.MonetaryValue is not None:
            namespaceprefix_ = self.MonetaryValue_nsprefix_ + ':' if (UseCapturedNS_ and self.MonetaryValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMonetaryValue>%s</%sMonetaryValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
        elif nodeName_ == 'MonetaryValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MonetaryValue')
            value_ = self.gds_validate_string(value_, node, 'MonetaryValue')
            self.MonetaryValue = value_
            self.MonetaryValue_nsprefix_ = child_.prefix
# end class TaxChargeType


class FRSShipmentDataType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TransportationCharges=None, FreightDensityRate=None, HandlingUnits=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TransportationCharges = TransportationCharges
        self.TransportationCharges_nsprefix_ = None
        self.FreightDensityRate = FreightDensityRate
        self.FreightDensityRate_nsprefix_ = None
        if HandlingUnits is None:
            self.HandlingUnits = []
        else:
            self.HandlingUnits = HandlingUnits
        self.HandlingUnits_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FRSShipmentDataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FRSShipmentDataType.subclass:
            return FRSShipmentDataType.subclass(*args_, **kwargs_)
        else:
            return FRSShipmentDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TransportationCharges(self):
        return self.TransportationCharges
    def set_TransportationCharges(self, TransportationCharges):
        self.TransportationCharges = TransportationCharges
    def get_FreightDensityRate(self):
        return self.FreightDensityRate
    def set_FreightDensityRate(self, FreightDensityRate):
        self.FreightDensityRate = FreightDensityRate
    def get_HandlingUnits(self):
        return self.HandlingUnits
    def set_HandlingUnits(self, HandlingUnits):
        self.HandlingUnits = HandlingUnits
    def add_HandlingUnits(self, value):
        self.HandlingUnits.append(value)
    def insert_HandlingUnits_at(self, index, value):
        self.HandlingUnits.insert(index, value)
    def replace_HandlingUnits_at(self, index, value):
        self.HandlingUnits[index] = value
    def hasContent_(self):
        if (
            self.TransportationCharges is not None or
            self.FreightDensityRate is not None or
            self.HandlingUnits
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FRSShipmentDataType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FRSShipmentDataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FRSShipmentDataType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FRSShipmentDataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FRSShipmentDataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FRSShipmentDataType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FRSShipmentDataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TransportationCharges is not None:
            namespaceprefix_ = self.TransportationCharges_nsprefix_ + ':' if (UseCapturedNS_ and self.TransportationCharges_nsprefix_) else ''
            self.TransportationCharges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransportationCharges', pretty_print=pretty_print)
        if self.FreightDensityRate is not None:
            namespaceprefix_ = self.FreightDensityRate_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightDensityRate_nsprefix_) else ''
            self.FreightDensityRate.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreightDensityRate', pretty_print=pretty_print)
        for HandlingUnits_ in self.HandlingUnits:
            namespaceprefix_ = self.HandlingUnits_nsprefix_ + ':' if (UseCapturedNS_ and self.HandlingUnits_nsprefix_) else ''
            HandlingUnits_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HandlingUnits', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TransportationCharges':
            obj_ = TransportationChargeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransportationCharges = obj_
            obj_.original_tagname_ = 'TransportationCharges'
        elif nodeName_ == 'FreightDensityRate':
            obj_ = FreightDensityRateType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreightDensityRate = obj_
            obj_.original_tagname_ = 'FreightDensityRate'
        elif nodeName_ == 'HandlingUnits':
            obj_ = HandlingUnitsResponseType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HandlingUnits.append(obj_)
            obj_.original_tagname_ = 'HandlingUnits'
# end class FRSShipmentDataType


class TransportationChargeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, GrossCharge=None, DiscountAmount=None, DiscountPercentage=None, NetCharge=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.GrossCharge = GrossCharge
        self.GrossCharge_nsprefix_ = None
        self.DiscountAmount = DiscountAmount
        self.DiscountAmount_nsprefix_ = None
        self.DiscountPercentage = DiscountPercentage
        self.DiscountPercentage_nsprefix_ = None
        self.NetCharge = NetCharge
        self.NetCharge_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransportationChargeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransportationChargeType.subclass:
            return TransportationChargeType.subclass(*args_, **kwargs_)
        else:
            return TransportationChargeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_GrossCharge(self):
        return self.GrossCharge
    def set_GrossCharge(self, GrossCharge):
        self.GrossCharge = GrossCharge
    def get_DiscountAmount(self):
        return self.DiscountAmount
    def set_DiscountAmount(self, DiscountAmount):
        self.DiscountAmount = DiscountAmount
    def get_DiscountPercentage(self):
        return self.DiscountPercentage
    def set_DiscountPercentage(self, DiscountPercentage):
        self.DiscountPercentage = DiscountPercentage
    def get_NetCharge(self):
        return self.NetCharge
    def set_NetCharge(self, NetCharge):
        self.NetCharge = NetCharge
    def hasContent_(self):
        if (
            self.GrossCharge is not None or
            self.DiscountAmount is not None or
            self.DiscountPercentage is not None or
            self.NetCharge is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TransportationChargeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransportationChargeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransportationChargeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransportationChargeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransportationChargeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TransportationChargeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TransportationChargeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.GrossCharge is not None:
            namespaceprefix_ = self.GrossCharge_nsprefix_ + ':' if (UseCapturedNS_ and self.GrossCharge_nsprefix_) else ''
            self.GrossCharge.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GrossCharge', pretty_print=pretty_print)
        if self.DiscountAmount is not None:
            namespaceprefix_ = self.DiscountAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.DiscountAmount_nsprefix_) else ''
            self.DiscountAmount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DiscountAmount', pretty_print=pretty_print)
        if self.DiscountPercentage is not None:
            namespaceprefix_ = self.DiscountPercentage_nsprefix_ + ':' if (UseCapturedNS_ and self.DiscountPercentage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDiscountPercentage>%s</%sDiscountPercentage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DiscountPercentage), input_name='DiscountPercentage')), namespaceprefix_ , eol_))
        if self.NetCharge is not None:
            namespaceprefix_ = self.NetCharge_nsprefix_ + ':' if (UseCapturedNS_ and self.NetCharge_nsprefix_) else ''
            self.NetCharge.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NetCharge', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'GrossCharge':
            obj_ = ShipChargeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GrossCharge = obj_
            obj_.original_tagname_ = 'GrossCharge'
        elif nodeName_ == 'DiscountAmount':
            obj_ = ShipChargeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DiscountAmount = obj_
            obj_.original_tagname_ = 'DiscountAmount'
        elif nodeName_ == 'DiscountPercentage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DiscountPercentage')
            value_ = self.gds_validate_string(value_, node, 'DiscountPercentage')
            self.DiscountPercentage = value_
            self.DiscountPercentage_nsprefix_ = child_.prefix
        elif nodeName_ == 'NetCharge':
            obj_ = ShipChargeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NetCharge = obj_
            obj_.original_tagname_ = 'NetCharge'
# end class TransportationChargeType


class BillingWeightType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Weight=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.UnitOfMeasurement_nsprefix_ = None
        self.Weight = Weight
        self.Weight_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BillingWeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BillingWeightType.subclass:
            return BillingWeightType.subclass(*args_, **kwargs_)
        else:
            return BillingWeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UnitOfMeasurement(self):
        return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement):
        self.UnitOfMeasurement = UnitOfMeasurement
    def get_Weight(self):
        return self.Weight
    def set_Weight(self, Weight):
        self.Weight = Weight
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BillingWeightType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BillingWeightType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BillingWeightType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BillingWeightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BillingWeightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BillingWeightType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BillingWeightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitOfMeasurement is not None:
            namespaceprefix_ = self.UnitOfMeasurement_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitOfMeasurement_nsprefix_) else ''
            self.UnitOfMeasurement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Weight is not None:
            namespaceprefix_ = self.Weight_nsprefix_ + ':' if (UseCapturedNS_ and self.Weight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeight>%s</%sWeight>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Weight), input_name='Weight')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = BillingUnitOfMeasurementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Weight':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Weight')
            value_ = self.gds_validate_string(value_, node, 'Weight')
            self.Weight = value_
            self.Weight_nsprefix_ = child_.prefix
# end class BillingWeightType


class BillingUnitOfMeasurementType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BillingUnitOfMeasurementType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BillingUnitOfMeasurementType.subclass:
            return BillingUnitOfMeasurementType.subclass(*args_, **kwargs_)
        else:
            return BillingUnitOfMeasurementType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BillingUnitOfMeasurementType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BillingUnitOfMeasurementType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BillingUnitOfMeasurementType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BillingUnitOfMeasurementType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BillingUnitOfMeasurementType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BillingUnitOfMeasurementType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BillingUnitOfMeasurementType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class BillingUnitOfMeasurementType


class PackageResultsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TrackingNumber=None, BaseServiceCharge=None, ServiceOptionsCharges=None, ShippingLabel=None, ShippingReceipt=None, USPSPICNumber=None, CN22Number=None, Accessorial=None, Form=None, ItemizedCharges=None, NegotiatedCharges=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TrackingNumber = TrackingNumber
        self.TrackingNumber_nsprefix_ = None
        self.BaseServiceCharge = BaseServiceCharge
        self.BaseServiceCharge_nsprefix_ = None
        self.ServiceOptionsCharges = ServiceOptionsCharges
        self.ServiceOptionsCharges_nsprefix_ = None
        self.ShippingLabel = ShippingLabel
        self.ShippingLabel_nsprefix_ = None
        self.ShippingReceipt = ShippingReceipt
        self.ShippingReceipt_nsprefix_ = None
        self.USPSPICNumber = USPSPICNumber
        self.USPSPICNumber_nsprefix_ = None
        self.CN22Number = CN22Number
        self.CN22Number_nsprefix_ = None
        if Accessorial is None:
            self.Accessorial = []
        else:
            self.Accessorial = Accessorial
        self.Accessorial_nsprefix_ = None
        self.Form = Form
        self.Form_nsprefix_ = None
        if ItemizedCharges is None:
            self.ItemizedCharges = []
        else:
            self.ItemizedCharges = ItemizedCharges
        self.ItemizedCharges_nsprefix_ = None
        self.NegotiatedCharges = NegotiatedCharges
        self.NegotiatedCharges_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageResultsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageResultsType.subclass:
            return PackageResultsType.subclass(*args_, **kwargs_)
        else:
            return PackageResultsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TrackingNumber(self):
        return self.TrackingNumber
    def set_TrackingNumber(self, TrackingNumber):
        self.TrackingNumber = TrackingNumber
    def get_BaseServiceCharge(self):
        return self.BaseServiceCharge
    def set_BaseServiceCharge(self, BaseServiceCharge):
        self.BaseServiceCharge = BaseServiceCharge
    def get_ServiceOptionsCharges(self):
        return self.ServiceOptionsCharges
    def set_ServiceOptionsCharges(self, ServiceOptionsCharges):
        self.ServiceOptionsCharges = ServiceOptionsCharges
    def get_ShippingLabel(self):
        return self.ShippingLabel
    def set_ShippingLabel(self, ShippingLabel):
        self.ShippingLabel = ShippingLabel
    def get_ShippingReceipt(self):
        return self.ShippingReceipt
    def set_ShippingReceipt(self, ShippingReceipt):
        self.ShippingReceipt = ShippingReceipt
    def get_USPSPICNumber(self):
        return self.USPSPICNumber
    def set_USPSPICNumber(self, USPSPICNumber):
        self.USPSPICNumber = USPSPICNumber
    def get_CN22Number(self):
        return self.CN22Number
    def set_CN22Number(self, CN22Number):
        self.CN22Number = CN22Number
    def get_Accessorial(self):
        return self.Accessorial
    def set_Accessorial(self, Accessorial):
        self.Accessorial = Accessorial
    def add_Accessorial(self, value):
        self.Accessorial.append(value)
    def insert_Accessorial_at(self, index, value):
        self.Accessorial.insert(index, value)
    def replace_Accessorial_at(self, index, value):
        self.Accessorial[index] = value
    def get_Form(self):
        return self.Form
    def set_Form(self, Form):
        self.Form = Form
    def get_ItemizedCharges(self):
        return self.ItemizedCharges
    def set_ItemizedCharges(self, ItemizedCharges):
        self.ItemizedCharges = ItemizedCharges
    def add_ItemizedCharges(self, value):
        self.ItemizedCharges.append(value)
    def insert_ItemizedCharges_at(self, index, value):
        self.ItemizedCharges.insert(index, value)
    def replace_ItemizedCharges_at(self, index, value):
        self.ItemizedCharges[index] = value
    def get_NegotiatedCharges(self):
        return self.NegotiatedCharges
    def set_NegotiatedCharges(self, NegotiatedCharges):
        self.NegotiatedCharges = NegotiatedCharges
    def hasContent_(self):
        if (
            self.TrackingNumber is not None or
            self.BaseServiceCharge is not None or
            self.ServiceOptionsCharges is not None or
            self.ShippingLabel is not None or
            self.ShippingReceipt is not None or
            self.USPSPICNumber is not None or
            self.CN22Number is not None or
            self.Accessorial or
            self.Form is not None or
            self.ItemizedCharges or
            self.NegotiatedCharges is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackageResultsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageResultsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackageResultsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackageResultsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackageResultsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackageResultsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackageResultsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TrackingNumber is not None:
            namespaceprefix_ = self.TrackingNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTrackingNumber>%s</%sTrackingNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumber), input_name='TrackingNumber')), namespaceprefix_ , eol_))
        if self.BaseServiceCharge is not None:
            namespaceprefix_ = self.BaseServiceCharge_nsprefix_ + ':' if (UseCapturedNS_ and self.BaseServiceCharge_nsprefix_) else ''
            self.BaseServiceCharge.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BaseServiceCharge', pretty_print=pretty_print)
        if self.ServiceOptionsCharges is not None:
            namespaceprefix_ = self.ServiceOptionsCharges_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceOptionsCharges_nsprefix_) else ''
            self.ServiceOptionsCharges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ServiceOptionsCharges', pretty_print=pretty_print)
        if self.ShippingLabel is not None:
            namespaceprefix_ = self.ShippingLabel_nsprefix_ + ':' if (UseCapturedNS_ and self.ShippingLabel_nsprefix_) else ''
            self.ShippingLabel.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShippingLabel', pretty_print=pretty_print)
        if self.ShippingReceipt is not None:
            namespaceprefix_ = self.ShippingReceipt_nsprefix_ + ':' if (UseCapturedNS_ and self.ShippingReceipt_nsprefix_) else ''
            self.ShippingReceipt.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShippingReceipt', pretty_print=pretty_print)
        if self.USPSPICNumber is not None:
            namespaceprefix_ = self.USPSPICNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.USPSPICNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUSPSPICNumber>%s</%sUSPSPICNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.USPSPICNumber), input_name='USPSPICNumber')), namespaceprefix_ , eol_))
        if self.CN22Number is not None:
            namespaceprefix_ = self.CN22Number_nsprefix_ + ':' if (UseCapturedNS_ and self.CN22Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCN22Number>%s</%sCN22Number>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CN22Number), input_name='CN22Number')), namespaceprefix_ , eol_))
        for Accessorial_ in self.Accessorial:
            namespaceprefix_ = self.Accessorial_nsprefix_ + ':' if (UseCapturedNS_ and self.Accessorial_nsprefix_) else ''
            Accessorial_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Accessorial', pretty_print=pretty_print)
        if self.Form is not None:
            namespaceprefix_ = self.Form_nsprefix_ + ':' if (UseCapturedNS_ and self.Form_nsprefix_) else ''
            self.Form.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Form', pretty_print=pretty_print)
        for ItemizedCharges_ in self.ItemizedCharges:
            namespaceprefix_ = self.ItemizedCharges_nsprefix_ + ':' if (UseCapturedNS_ and self.ItemizedCharges_nsprefix_) else ''
            ItemizedCharges_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ItemizedCharges', pretty_print=pretty_print)
        if self.NegotiatedCharges is not None:
            namespaceprefix_ = self.NegotiatedCharges_nsprefix_ + ':' if (UseCapturedNS_ and self.NegotiatedCharges_nsprefix_) else ''
            self.NegotiatedCharges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NegotiatedCharges', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TrackingNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TrackingNumber')
            value_ = self.gds_validate_string(value_, node, 'TrackingNumber')
            self.TrackingNumber = value_
            self.TrackingNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'BaseServiceCharge':
            obj_ = ShipChargeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BaseServiceCharge = obj_
            obj_.original_tagname_ = 'BaseServiceCharge'
        elif nodeName_ == 'ServiceOptionsCharges':
            obj_ = ShipChargeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ServiceOptionsCharges = obj_
            obj_.original_tagname_ = 'ServiceOptionsCharges'
        elif nodeName_ == 'ShippingLabel':
            obj_ = LabelType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShippingLabel = obj_
            obj_.original_tagname_ = 'ShippingLabel'
        elif nodeName_ == 'ShippingReceipt':
            obj_ = ReceiptType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShippingReceipt = obj_
            obj_.original_tagname_ = 'ShippingReceipt'
        elif nodeName_ == 'USPSPICNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'USPSPICNumber')
            value_ = self.gds_validate_string(value_, node, 'USPSPICNumber')
            self.USPSPICNumber = value_
            self.USPSPICNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'CN22Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CN22Number')
            value_ = self.gds_validate_string(value_, node, 'CN22Number')
            self.CN22Number = value_
            self.CN22Number_nsprefix_ = child_.prefix
        elif nodeName_ == 'Accessorial':
            obj_ = AccessorialType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Accessorial.append(obj_)
            obj_.original_tagname_ = 'Accessorial'
        elif nodeName_ == 'Form':
            obj_ = FormType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Form = obj_
            obj_.original_tagname_ = 'Form'
        elif nodeName_ == 'ItemizedCharges':
            obj_ = ShipChargeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ItemizedCharges.append(obj_)
            obj_.original_tagname_ = 'ItemizedCharges'
        elif nodeName_ == 'NegotiatedCharges':
            obj_ = NegotiatedChargesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NegotiatedCharges = obj_
            obj_.original_tagname_ = 'NegotiatedCharges'
# end class PackageResultsType


class AccessorialType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AccessorialType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AccessorialType.subclass:
            return AccessorialType.subclass(*args_, **kwargs_)
        else:
            return AccessorialType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AccessorialType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AccessorialType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AccessorialType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AccessorialType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AccessorialType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AccessorialType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AccessorialType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class AccessorialType


class ImageType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ImageFormat=None, GraphicImage=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ImageFormat = ImageFormat
        self.ImageFormat_nsprefix_ = None
        self.GraphicImage = GraphicImage
        self.GraphicImage_nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ImageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ImageType.subclass:
            return ImageType.subclass(*args_, **kwargs_)
        else:
            return ImageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ImageFormat(self):
        return self.ImageFormat
    def set_ImageFormat(self, ImageFormat):
        self.ImageFormat = ImageFormat
    def get_GraphicImage(self):
        return self.GraphicImage
    def set_GraphicImage(self, GraphicImage):
        self.GraphicImage = GraphicImage
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (
            self.ImageFormat is not None or
            self.GraphicImage is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ImageType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ImageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ImageType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ImageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ImageType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ImageType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ImageType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ImageFormat is not None:
            namespaceprefix_ = self.ImageFormat_nsprefix_ + ':' if (UseCapturedNS_ and self.ImageFormat_nsprefix_) else ''
            self.ImageFormat.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ImageFormat', pretty_print=pretty_print)
        if self.GraphicImage is not None:
            namespaceprefix_ = self.GraphicImage_nsprefix_ + ':' if (UseCapturedNS_ and self.GraphicImage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGraphicImage>%s</%sGraphicImage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GraphicImage), input_name='GraphicImage')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ImageFormat':
            obj_ = ImageFormatType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ImageFormat = obj_
            obj_.original_tagname_ = 'ImageFormat'
        elif nodeName_ == 'GraphicImage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GraphicImage')
            value_ = self.gds_validate_string(value_, node, 'GraphicImage')
            self.GraphicImage = value_
            self.GraphicImage_nsprefix_ = child_.prefix
# end class ImageType


class FormType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, Image=None, FormGroupId=None, FormGroupIdName=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.Image = Image
        self.Image_nsprefix_ = None
        self.FormGroupId = FormGroupId
        self.FormGroupId_nsprefix_ = None
        self.FormGroupIdName = FormGroupIdName
        self.FormGroupIdName_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FormType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FormType.subclass:
            return FormType.subclass(*args_, **kwargs_)
        else:
            return FormType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_Image(self):
        return self.Image
    def set_Image(self, Image):
        self.Image = Image
    def get_FormGroupId(self):
        return self.FormGroupId
    def set_FormGroupId(self, FormGroupId):
        self.FormGroupId = FormGroupId
    def get_FormGroupIdName(self):
        return self.FormGroupIdName
    def set_FormGroupIdName(self, FormGroupIdName):
        self.FormGroupIdName = FormGroupIdName
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None or
            self.Image is not None or
            self.FormGroupId is not None or
            self.FormGroupIdName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FormType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FormType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FormType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FormType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FormType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FormType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FormType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.Image is not None:
            namespaceprefix_ = self.Image_nsprefix_ + ':' if (UseCapturedNS_ and self.Image_nsprefix_) else ''
            self.Image.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Image', pretty_print=pretty_print)
        if self.FormGroupId is not None:
            namespaceprefix_ = self.FormGroupId_nsprefix_ + ':' if (UseCapturedNS_ and self.FormGroupId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormGroupId>%s</%sFormGroupId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FormGroupId), input_name='FormGroupId')), namespaceprefix_ , eol_))
        if self.FormGroupIdName is not None:
            namespaceprefix_ = self.FormGroupIdName_nsprefix_ + ':' if (UseCapturedNS_ and self.FormGroupIdName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormGroupIdName>%s</%sFormGroupIdName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FormGroupIdName), input_name='FormGroupIdName')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'Image':
            obj_ = FormImageType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Image = obj_
            obj_.original_tagname_ = 'Image'
        elif nodeName_ == 'FormGroupId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FormGroupId')
            value_ = self.gds_validate_string(value_, node, 'FormGroupId')
            self.FormGroupId = value_
            self.FormGroupId_nsprefix_ = child_.prefix
        elif nodeName_ == 'FormGroupIdName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FormGroupIdName')
            value_ = self.gds_validate_string(value_, node, 'FormGroupIdName')
            self.FormGroupIdName = value_
            self.FormGroupIdName_nsprefix_ = child_.prefix
# end class FormType


class FormImageType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ImageFormat=None, GraphicImage=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ImageFormat = ImageFormat
        self.ImageFormat_nsprefix_ = None
        self.GraphicImage = GraphicImage
        self.GraphicImage_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FormImageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FormImageType.subclass:
            return FormImageType.subclass(*args_, **kwargs_)
        else:
            return FormImageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ImageFormat(self):
        return self.ImageFormat
    def set_ImageFormat(self, ImageFormat):
        self.ImageFormat = ImageFormat
    def get_GraphicImage(self):
        return self.GraphicImage
    def set_GraphicImage(self, GraphicImage):
        self.GraphicImage = GraphicImage
    def hasContent_(self):
        if (
            self.ImageFormat is not None or
            self.GraphicImage is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FormImageType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FormImageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FormImageType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FormImageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FormImageType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FormImageType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FormImageType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ImageFormat is not None:
            namespaceprefix_ = self.ImageFormat_nsprefix_ + ':' if (UseCapturedNS_ and self.ImageFormat_nsprefix_) else ''
            self.ImageFormat.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ImageFormat', pretty_print=pretty_print)
        if self.GraphicImage is not None:
            namespaceprefix_ = self.GraphicImage_nsprefix_ + ':' if (UseCapturedNS_ and self.GraphicImage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGraphicImage>%s</%sGraphicImage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GraphicImage), input_name='GraphicImage')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ImageFormat':
            obj_ = ImageFormatType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ImageFormat = obj_
            obj_.original_tagname_ = 'ImageFormat'
        elif nodeName_ == 'GraphicImage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GraphicImage')
            value_ = self.gds_validate_string(value_, node, 'GraphicImage')
            self.GraphicImage = value_
            self.GraphicImage_nsprefix_ = child_.prefix
# end class FormImageType


class ImageFormatType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ImageFormatType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ImageFormatType.subclass:
            return ImageFormatType.subclass(*args_, **kwargs_)
        else:
            return ImageFormatType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ImageFormatType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ImageFormatType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ImageFormatType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ImageFormatType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ImageFormatType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ImageFormatType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ImageFormatType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class ImageFormatType


class SCReportType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Image=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Image = Image
        self.Image_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SCReportType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SCReportType.subclass:
            return SCReportType.subclass(*args_, **kwargs_)
        else:
            return SCReportType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Image(self):
        return self.Image
    def set_Image(self, Image):
        self.Image = Image
    def hasContent_(self):
        if (
            self.Image is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SCReportType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SCReportType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SCReportType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SCReportType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SCReportType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SCReportType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SCReportType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Image is not None:
            namespaceprefix_ = self.Image_nsprefix_ + ':' if (UseCapturedNS_ and self.Image_nsprefix_) else ''
            self.Image.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Image', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Image':
            class_obj_ = self.get_class_obj_(child_, ImageType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Image = obj_
            obj_.original_tagname_ = 'Image'
# end class SCReportType


class HighValueReportType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Image=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Image = Image
        self.Image_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HighValueReportType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HighValueReportType.subclass:
            return HighValueReportType.subclass(*args_, **kwargs_)
        else:
            return HighValueReportType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Image(self):
        return self.Image
    def set_Image(self, Image):
        self.Image = Image
    def hasContent_(self):
        if (
            self.Image is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HighValueReportType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HighValueReportType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HighValueReportType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HighValueReportType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HighValueReportType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HighValueReportType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HighValueReportType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Image is not None:
            namespaceprefix_ = self.Image_nsprefix_ + ':' if (UseCapturedNS_ and self.Image_nsprefix_) else ''
            self.Image.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Image', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Image':
            class_obj_ = self.get_class_obj_(child_, ImageType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Image = obj_
            obj_.original_tagname_ = 'Image'
# end class HighValueReportType


class HazMatPackageInformationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AllPackedInOneIndicator=None, OverPackedIndicator=None, QValue=None, OuterPackagingType=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AllPackedInOneIndicator = AllPackedInOneIndicator
        self.AllPackedInOneIndicator_nsprefix_ = None
        self.OverPackedIndicator = OverPackedIndicator
        self.OverPackedIndicator_nsprefix_ = None
        self.QValue = QValue
        self.QValue_nsprefix_ = None
        self.OuterPackagingType = OuterPackagingType
        self.OuterPackagingType_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HazMatPackageInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HazMatPackageInformationType.subclass:
            return HazMatPackageInformationType.subclass(*args_, **kwargs_)
        else:
            return HazMatPackageInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AllPackedInOneIndicator(self):
        return self.AllPackedInOneIndicator
    def set_AllPackedInOneIndicator(self, AllPackedInOneIndicator):
        self.AllPackedInOneIndicator = AllPackedInOneIndicator
    def get_OverPackedIndicator(self):
        return self.OverPackedIndicator
    def set_OverPackedIndicator(self, OverPackedIndicator):
        self.OverPackedIndicator = OverPackedIndicator
    def get_QValue(self):
        return self.QValue
    def set_QValue(self, QValue):
        self.QValue = QValue
    def get_OuterPackagingType(self):
        return self.OuterPackagingType
    def set_OuterPackagingType(self, OuterPackagingType):
        self.OuterPackagingType = OuterPackagingType
    def hasContent_(self):
        if (
            self.AllPackedInOneIndicator is not None or
            self.OverPackedIndicator is not None or
            self.QValue is not None or
            self.OuterPackagingType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazMatPackageInformationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HazMatPackageInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HazMatPackageInformationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HazMatPackageInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HazMatPackageInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HazMatPackageInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazMatPackageInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AllPackedInOneIndicator is not None:
            namespaceprefix_ = self.AllPackedInOneIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.AllPackedInOneIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllPackedInOneIndicator>%s</%sAllPackedInOneIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AllPackedInOneIndicator), input_name='AllPackedInOneIndicator')), namespaceprefix_ , eol_))
        if self.OverPackedIndicator is not None:
            namespaceprefix_ = self.OverPackedIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.OverPackedIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOverPackedIndicator>%s</%sOverPackedIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OverPackedIndicator), input_name='OverPackedIndicator')), namespaceprefix_ , eol_))
        if self.QValue is not None:
            namespaceprefix_ = self.QValue_nsprefix_ + ':' if (UseCapturedNS_ and self.QValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQValue>%s</%sQValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QValue), input_name='QValue')), namespaceprefix_ , eol_))
        if self.OuterPackagingType is not None:
            namespaceprefix_ = self.OuterPackagingType_nsprefix_ + ':' if (UseCapturedNS_ and self.OuterPackagingType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOuterPackagingType>%s</%sOuterPackagingType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OuterPackagingType), input_name='OuterPackagingType')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AllPackedInOneIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AllPackedInOneIndicator')
            value_ = self.gds_validate_string(value_, node, 'AllPackedInOneIndicator')
            self.AllPackedInOneIndicator = value_
            self.AllPackedInOneIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'OverPackedIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OverPackedIndicator')
            value_ = self.gds_validate_string(value_, node, 'OverPackedIndicator')
            self.OverPackedIndicator = value_
            self.OverPackedIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'QValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'QValue')
            value_ = self.gds_validate_string(value_, node, 'QValue')
            self.QValue = value_
            self.QValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'OuterPackagingType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OuterPackagingType')
            value_ = self.gds_validate_string(value_, node, 'OuterPackagingType')
            self.OuterPackagingType = value_
            self.OuterPackagingType_nsprefix_ = child_.prefix
# end class HazMatPackageInformationType


class HazMatType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PackagingTypeQuantity=None, RecordIdentifier1=None, RecordIdentifier2=None, RecordIdentifier3=None, SubRiskClass=None, aDRItemNumber=None, aDRPackingGroupLetter=None, TechnicalName=None, HazardLabelRequired=None, ClassDivisionNumber=None, ReferenceNumber=None, Quantity=None, UOM=None, PackagingType=None, IDNumber=None, ProperShippingName=None, AdditionalDescription=None, PackagingGroupType=None, PackagingInstructionCode=None, EmergencyPhone=None, EmergencyContact=None, ReportableQuantity=None, RegulationSet=None, TransportationMode=None, CommodityRegulatedLevelCode=None, TransportCategory=None, TunnelRestrictionCode=None, ChemicalRecordIdentifier=None, LocalTechnicalName=None, LocalProperShippingName=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PackagingTypeQuantity = PackagingTypeQuantity
        self.PackagingTypeQuantity_nsprefix_ = None
        self.RecordIdentifier1 = RecordIdentifier1
        self.RecordIdentifier1_nsprefix_ = None
        self.RecordIdentifier2 = RecordIdentifier2
        self.RecordIdentifier2_nsprefix_ = None
        self.RecordIdentifier3 = RecordIdentifier3
        self.RecordIdentifier3_nsprefix_ = None
        self.SubRiskClass = SubRiskClass
        self.SubRiskClass_nsprefix_ = None
        self.aDRItemNumber = aDRItemNumber
        self.aDRItemNumber_nsprefix_ = None
        self.aDRPackingGroupLetter = aDRPackingGroupLetter
        self.aDRPackingGroupLetter_nsprefix_ = None
        self.TechnicalName = TechnicalName
        self.TechnicalName_nsprefix_ = None
        self.HazardLabelRequired = HazardLabelRequired
        self.HazardLabelRequired_nsprefix_ = None
        self.ClassDivisionNumber = ClassDivisionNumber
        self.ClassDivisionNumber_nsprefix_ = None
        self.ReferenceNumber = ReferenceNumber
        self.ReferenceNumber_nsprefix_ = None
        self.Quantity = Quantity
        self.Quantity_nsprefix_ = None
        self.UOM = UOM
        self.UOM_nsprefix_ = None
        self.PackagingType = PackagingType
        self.PackagingType_nsprefix_ = None
        self.IDNumber = IDNumber
        self.IDNumber_nsprefix_ = None
        self.ProperShippingName = ProperShippingName
        self.ProperShippingName_nsprefix_ = None
        self.AdditionalDescription = AdditionalDescription
        self.AdditionalDescription_nsprefix_ = None
        self.PackagingGroupType = PackagingGroupType
        self.PackagingGroupType_nsprefix_ = None
        self.PackagingInstructionCode = PackagingInstructionCode
        self.PackagingInstructionCode_nsprefix_ = None
        self.EmergencyPhone = EmergencyPhone
        self.EmergencyPhone_nsprefix_ = None
        self.EmergencyContact = EmergencyContact
        self.EmergencyContact_nsprefix_ = None
        self.ReportableQuantity = ReportableQuantity
        self.ReportableQuantity_nsprefix_ = None
        self.RegulationSet = RegulationSet
        self.RegulationSet_nsprefix_ = None
        self.TransportationMode = TransportationMode
        self.TransportationMode_nsprefix_ = None
        self.CommodityRegulatedLevelCode = CommodityRegulatedLevelCode
        self.CommodityRegulatedLevelCode_nsprefix_ = None
        self.TransportCategory = TransportCategory
        self.TransportCategory_nsprefix_ = None
        self.TunnelRestrictionCode = TunnelRestrictionCode
        self.TunnelRestrictionCode_nsprefix_ = None
        self.ChemicalRecordIdentifier = ChemicalRecordIdentifier
        self.ChemicalRecordIdentifier_nsprefix_ = None
        self.LocalTechnicalName = LocalTechnicalName
        self.LocalTechnicalName_nsprefix_ = None
        self.LocalProperShippingName = LocalProperShippingName
        self.LocalProperShippingName_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HazMatType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HazMatType.subclass:
            return HazMatType.subclass(*args_, **kwargs_)
        else:
            return HazMatType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PackagingTypeQuantity(self):
        return self.PackagingTypeQuantity
    def set_PackagingTypeQuantity(self, PackagingTypeQuantity):
        self.PackagingTypeQuantity = PackagingTypeQuantity
    def get_RecordIdentifier1(self):
        return self.RecordIdentifier1
    def set_RecordIdentifier1(self, RecordIdentifier1):
        self.RecordIdentifier1 = RecordIdentifier1
    def get_RecordIdentifier2(self):
        return self.RecordIdentifier2
    def set_RecordIdentifier2(self, RecordIdentifier2):
        self.RecordIdentifier2 = RecordIdentifier2
    def get_RecordIdentifier3(self):
        return self.RecordIdentifier3
    def set_RecordIdentifier3(self, RecordIdentifier3):
        self.RecordIdentifier3 = RecordIdentifier3
    def get_SubRiskClass(self):
        return self.SubRiskClass
    def set_SubRiskClass(self, SubRiskClass):
        self.SubRiskClass = SubRiskClass
    def get_aDRItemNumber(self):
        return self.aDRItemNumber
    def set_aDRItemNumber(self, aDRItemNumber):
        self.aDRItemNumber = aDRItemNumber
    def get_aDRPackingGroupLetter(self):
        return self.aDRPackingGroupLetter
    def set_aDRPackingGroupLetter(self, aDRPackingGroupLetter):
        self.aDRPackingGroupLetter = aDRPackingGroupLetter
    def get_TechnicalName(self):
        return self.TechnicalName
    def set_TechnicalName(self, TechnicalName):
        self.TechnicalName = TechnicalName
    def get_HazardLabelRequired(self):
        return self.HazardLabelRequired
    def set_HazardLabelRequired(self, HazardLabelRequired):
        self.HazardLabelRequired = HazardLabelRequired
    def get_ClassDivisionNumber(self):
        return self.ClassDivisionNumber
    def set_ClassDivisionNumber(self, ClassDivisionNumber):
        self.ClassDivisionNumber = ClassDivisionNumber
    def get_ReferenceNumber(self):
        return self.ReferenceNumber
    def set_ReferenceNumber(self, ReferenceNumber):
        self.ReferenceNumber = ReferenceNumber
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_UOM(self):
        return self.UOM
    def set_UOM(self, UOM):
        self.UOM = UOM
    def get_PackagingType(self):
        return self.PackagingType
    def set_PackagingType(self, PackagingType):
        self.PackagingType = PackagingType
    def get_IDNumber(self):
        return self.IDNumber
    def set_IDNumber(self, IDNumber):
        self.IDNumber = IDNumber
    def get_ProperShippingName(self):
        return self.ProperShippingName
    def set_ProperShippingName(self, ProperShippingName):
        self.ProperShippingName = ProperShippingName
    def get_AdditionalDescription(self):
        return self.AdditionalDescription
    def set_AdditionalDescription(self, AdditionalDescription):
        self.AdditionalDescription = AdditionalDescription
    def get_PackagingGroupType(self):
        return self.PackagingGroupType
    def set_PackagingGroupType(self, PackagingGroupType):
        self.PackagingGroupType = PackagingGroupType
    def get_PackagingInstructionCode(self):
        return self.PackagingInstructionCode
    def set_PackagingInstructionCode(self, PackagingInstructionCode):
        self.PackagingInstructionCode = PackagingInstructionCode
    def get_EmergencyPhone(self):
        return self.EmergencyPhone
    def set_EmergencyPhone(self, EmergencyPhone):
        self.EmergencyPhone = EmergencyPhone
    def get_EmergencyContact(self):
        return self.EmergencyContact
    def set_EmergencyContact(self, EmergencyContact):
        self.EmergencyContact = EmergencyContact
    def get_ReportableQuantity(self):
        return self.ReportableQuantity
    def set_ReportableQuantity(self, ReportableQuantity):
        self.ReportableQuantity = ReportableQuantity
    def get_RegulationSet(self):
        return self.RegulationSet
    def set_RegulationSet(self, RegulationSet):
        self.RegulationSet = RegulationSet
    def get_TransportationMode(self):
        return self.TransportationMode
    def set_TransportationMode(self, TransportationMode):
        self.TransportationMode = TransportationMode
    def get_CommodityRegulatedLevelCode(self):
        return self.CommodityRegulatedLevelCode
    def set_CommodityRegulatedLevelCode(self, CommodityRegulatedLevelCode):
        self.CommodityRegulatedLevelCode = CommodityRegulatedLevelCode
    def get_TransportCategory(self):
        return self.TransportCategory
    def set_TransportCategory(self, TransportCategory):
        self.TransportCategory = TransportCategory
    def get_TunnelRestrictionCode(self):
        return self.TunnelRestrictionCode
    def set_TunnelRestrictionCode(self, TunnelRestrictionCode):
        self.TunnelRestrictionCode = TunnelRestrictionCode
    def get_ChemicalRecordIdentifier(self):
        return self.ChemicalRecordIdentifier
    def set_ChemicalRecordIdentifier(self, ChemicalRecordIdentifier):
        self.ChemicalRecordIdentifier = ChemicalRecordIdentifier
    def get_LocalTechnicalName(self):
        return self.LocalTechnicalName
    def set_LocalTechnicalName(self, LocalTechnicalName):
        self.LocalTechnicalName = LocalTechnicalName
    def get_LocalProperShippingName(self):
        return self.LocalProperShippingName
    def set_LocalProperShippingName(self, LocalProperShippingName):
        self.LocalProperShippingName = LocalProperShippingName
    def hasContent_(self):
        if (
            self.PackagingTypeQuantity is not None or
            self.RecordIdentifier1 is not None or
            self.RecordIdentifier2 is not None or
            self.RecordIdentifier3 is not None or
            self.SubRiskClass is not None or
            self.aDRItemNumber is not None or
            self.aDRPackingGroupLetter is not None or
            self.TechnicalName is not None or
            self.HazardLabelRequired is not None or
            self.ClassDivisionNumber is not None or
            self.ReferenceNumber is not None or
            self.Quantity is not None or
            self.UOM is not None or
            self.PackagingType is not None or
            self.IDNumber is not None or
            self.ProperShippingName is not None or
            self.AdditionalDescription is not None or
            self.PackagingGroupType is not None or
            self.PackagingInstructionCode is not None or
            self.EmergencyPhone is not None or
            self.EmergencyContact is not None or
            self.ReportableQuantity is not None or
            self.RegulationSet is not None or
            self.TransportationMode is not None or
            self.CommodityRegulatedLevelCode is not None or
            self.TransportCategory is not None or
            self.TunnelRestrictionCode is not None or
            self.ChemicalRecordIdentifier is not None or
            self.LocalTechnicalName is not None or
            self.LocalProperShippingName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazMatType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HazMatType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HazMatType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HazMatType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HazMatType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HazMatType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazMatType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackagingTypeQuantity is not None:
            namespaceprefix_ = self.PackagingTypeQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.PackagingTypeQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackagingTypeQuantity>%s</%sPackagingTypeQuantity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PackagingTypeQuantity), input_name='PackagingTypeQuantity')), namespaceprefix_ , eol_))
        if self.RecordIdentifier1 is not None:
            namespaceprefix_ = self.RecordIdentifier1_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordIdentifier1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordIdentifier1>%s</%sRecordIdentifier1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordIdentifier1), input_name='RecordIdentifier1')), namespaceprefix_ , eol_))
        if self.RecordIdentifier2 is not None:
            namespaceprefix_ = self.RecordIdentifier2_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordIdentifier2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordIdentifier2>%s</%sRecordIdentifier2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordIdentifier2), input_name='RecordIdentifier2')), namespaceprefix_ , eol_))
        if self.RecordIdentifier3 is not None:
            namespaceprefix_ = self.RecordIdentifier3_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordIdentifier3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordIdentifier3>%s</%sRecordIdentifier3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordIdentifier3), input_name='RecordIdentifier3')), namespaceprefix_ , eol_))
        if self.SubRiskClass is not None:
            namespaceprefix_ = self.SubRiskClass_nsprefix_ + ':' if (UseCapturedNS_ and self.SubRiskClass_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSubRiskClass>%s</%sSubRiskClass>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SubRiskClass), input_name='SubRiskClass')), namespaceprefix_ , eol_))
        if self.aDRItemNumber is not None:
            namespaceprefix_ = self.aDRItemNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.aDRItemNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saDRItemNumber>%s</%saDRItemNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.aDRItemNumber), input_name='aDRItemNumber')), namespaceprefix_ , eol_))
        if self.aDRPackingGroupLetter is not None:
            namespaceprefix_ = self.aDRPackingGroupLetter_nsprefix_ + ':' if (UseCapturedNS_ and self.aDRPackingGroupLetter_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saDRPackingGroupLetter>%s</%saDRPackingGroupLetter>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.aDRPackingGroupLetter), input_name='aDRPackingGroupLetter')), namespaceprefix_ , eol_))
        if self.TechnicalName is not None:
            namespaceprefix_ = self.TechnicalName_nsprefix_ + ':' if (UseCapturedNS_ and self.TechnicalName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTechnicalName>%s</%sTechnicalName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TechnicalName), input_name='TechnicalName')), namespaceprefix_ , eol_))
        if self.HazardLabelRequired is not None:
            namespaceprefix_ = self.HazardLabelRequired_nsprefix_ + ':' if (UseCapturedNS_ and self.HazardLabelRequired_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHazardLabelRequired>%s</%sHazardLabelRequired>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HazardLabelRequired), input_name='HazardLabelRequired')), namespaceprefix_ , eol_))
        if self.ClassDivisionNumber is not None:
            namespaceprefix_ = self.ClassDivisionNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ClassDivisionNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassDivisionNumber>%s</%sClassDivisionNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClassDivisionNumber), input_name='ClassDivisionNumber')), namespaceprefix_ , eol_))
        if self.ReferenceNumber is not None:
            namespaceprefix_ = self.ReferenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ReferenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceNumber>%s</%sReferenceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceNumber), input_name='ReferenceNumber')), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Quantity), input_name='Quantity')), namespaceprefix_ , eol_))
        if self.UOM is not None:
            namespaceprefix_ = self.UOM_nsprefix_ + ':' if (UseCapturedNS_ and self.UOM_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUOM>%s</%sUOM>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UOM), input_name='UOM')), namespaceprefix_ , eol_))
        if self.PackagingType is not None:
            namespaceprefix_ = self.PackagingType_nsprefix_ + ':' if (UseCapturedNS_ and self.PackagingType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackagingType>%s</%sPackagingType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PackagingType), input_name='PackagingType')), namespaceprefix_ , eol_))
        if self.IDNumber is not None:
            namespaceprefix_ = self.IDNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.IDNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIDNumber>%s</%sIDNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IDNumber), input_name='IDNumber')), namespaceprefix_ , eol_))
        if self.ProperShippingName is not None:
            namespaceprefix_ = self.ProperShippingName_nsprefix_ + ':' if (UseCapturedNS_ and self.ProperShippingName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProperShippingName>%s</%sProperShippingName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProperShippingName), input_name='ProperShippingName')), namespaceprefix_ , eol_))
        if self.AdditionalDescription is not None:
            namespaceprefix_ = self.AdditionalDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.AdditionalDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAdditionalDescription>%s</%sAdditionalDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AdditionalDescription), input_name='AdditionalDescription')), namespaceprefix_ , eol_))
        if self.PackagingGroupType is not None:
            namespaceprefix_ = self.PackagingGroupType_nsprefix_ + ':' if (UseCapturedNS_ and self.PackagingGroupType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackagingGroupType>%s</%sPackagingGroupType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PackagingGroupType), input_name='PackagingGroupType')), namespaceprefix_ , eol_))
        if self.PackagingInstructionCode is not None:
            namespaceprefix_ = self.PackagingInstructionCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PackagingInstructionCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackagingInstructionCode>%s</%sPackagingInstructionCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PackagingInstructionCode), input_name='PackagingInstructionCode')), namespaceprefix_ , eol_))
        if self.EmergencyPhone is not None:
            namespaceprefix_ = self.EmergencyPhone_nsprefix_ + ':' if (UseCapturedNS_ and self.EmergencyPhone_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmergencyPhone>%s</%sEmergencyPhone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EmergencyPhone), input_name='EmergencyPhone')), namespaceprefix_ , eol_))
        if self.EmergencyContact is not None:
            namespaceprefix_ = self.EmergencyContact_nsprefix_ + ':' if (UseCapturedNS_ and self.EmergencyContact_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmergencyContact>%s</%sEmergencyContact>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EmergencyContact), input_name='EmergencyContact')), namespaceprefix_ , eol_))
        if self.ReportableQuantity is not None:
            namespaceprefix_ = self.ReportableQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.ReportableQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReportableQuantity>%s</%sReportableQuantity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReportableQuantity), input_name='ReportableQuantity')), namespaceprefix_ , eol_))
        if self.RegulationSet is not None:
            namespaceprefix_ = self.RegulationSet_nsprefix_ + ':' if (UseCapturedNS_ and self.RegulationSet_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegulationSet>%s</%sRegulationSet>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegulationSet), input_name='RegulationSet')), namespaceprefix_ , eol_))
        if self.TransportationMode is not None:
            namespaceprefix_ = self.TransportationMode_nsprefix_ + ':' if (UseCapturedNS_ and self.TransportationMode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransportationMode>%s</%sTransportationMode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransportationMode), input_name='TransportationMode')), namespaceprefix_ , eol_))
        if self.CommodityRegulatedLevelCode is not None:
            namespaceprefix_ = self.CommodityRegulatedLevelCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CommodityRegulatedLevelCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommodityRegulatedLevelCode>%s</%sCommodityRegulatedLevelCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CommodityRegulatedLevelCode), input_name='CommodityRegulatedLevelCode')), namespaceprefix_ , eol_))
        if self.TransportCategory is not None:
            namespaceprefix_ = self.TransportCategory_nsprefix_ + ':' if (UseCapturedNS_ and self.TransportCategory_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransportCategory>%s</%sTransportCategory>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransportCategory), input_name='TransportCategory')), namespaceprefix_ , eol_))
        if self.TunnelRestrictionCode is not None:
            namespaceprefix_ = self.TunnelRestrictionCode_nsprefix_ + ':' if (UseCapturedNS_ and self.TunnelRestrictionCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTunnelRestrictionCode>%s</%sTunnelRestrictionCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TunnelRestrictionCode), input_name='TunnelRestrictionCode')), namespaceprefix_ , eol_))
        if self.ChemicalRecordIdentifier is not None:
            namespaceprefix_ = self.ChemicalRecordIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.ChemicalRecordIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChemicalRecordIdentifier>%s</%sChemicalRecordIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ChemicalRecordIdentifier), input_name='ChemicalRecordIdentifier')), namespaceprefix_ , eol_))
        if self.LocalTechnicalName is not None:
            namespaceprefix_ = self.LocalTechnicalName_nsprefix_ + ':' if (UseCapturedNS_ and self.LocalTechnicalName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocalTechnicalName>%s</%sLocalTechnicalName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocalTechnicalName), input_name='LocalTechnicalName')), namespaceprefix_ , eol_))
        if self.LocalProperShippingName is not None:
            namespaceprefix_ = self.LocalProperShippingName_nsprefix_ + ':' if (UseCapturedNS_ and self.LocalProperShippingName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocalProperShippingName>%s</%sLocalProperShippingName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocalProperShippingName), input_name='LocalProperShippingName')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PackagingTypeQuantity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackagingTypeQuantity')
            value_ = self.gds_validate_string(value_, node, 'PackagingTypeQuantity')
            self.PackagingTypeQuantity = value_
            self.PackagingTypeQuantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordIdentifier1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecordIdentifier1')
            value_ = self.gds_validate_string(value_, node, 'RecordIdentifier1')
            self.RecordIdentifier1 = value_
            self.RecordIdentifier1_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordIdentifier2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecordIdentifier2')
            value_ = self.gds_validate_string(value_, node, 'RecordIdentifier2')
            self.RecordIdentifier2 = value_
            self.RecordIdentifier2_nsprefix_ = child_.prefix
        elif nodeName_ == 'RecordIdentifier3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecordIdentifier3')
            value_ = self.gds_validate_string(value_, node, 'RecordIdentifier3')
            self.RecordIdentifier3 = value_
            self.RecordIdentifier3_nsprefix_ = child_.prefix
        elif nodeName_ == 'SubRiskClass':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SubRiskClass')
            value_ = self.gds_validate_string(value_, node, 'SubRiskClass')
            self.SubRiskClass = value_
            self.SubRiskClass_nsprefix_ = child_.prefix
        elif nodeName_ == 'aDRItemNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'aDRItemNumber')
            value_ = self.gds_validate_string(value_, node, 'aDRItemNumber')
            self.aDRItemNumber = value_
            self.aDRItemNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'aDRPackingGroupLetter':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'aDRPackingGroupLetter')
            value_ = self.gds_validate_string(value_, node, 'aDRPackingGroupLetter')
            self.aDRPackingGroupLetter = value_
            self.aDRPackingGroupLetter_nsprefix_ = child_.prefix
        elif nodeName_ == 'TechnicalName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TechnicalName')
            value_ = self.gds_validate_string(value_, node, 'TechnicalName')
            self.TechnicalName = value_
            self.TechnicalName_nsprefix_ = child_.prefix
        elif nodeName_ == 'HazardLabelRequired':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HazardLabelRequired')
            value_ = self.gds_validate_string(value_, node, 'HazardLabelRequired')
            self.HazardLabelRequired = value_
            self.HazardLabelRequired_nsprefix_ = child_.prefix
        elif nodeName_ == 'ClassDivisionNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClassDivisionNumber')
            value_ = self.gds_validate_string(value_, node, 'ClassDivisionNumber')
            self.ClassDivisionNumber = value_
            self.ClassDivisionNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ReferenceNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ReferenceNumber')
            value_ = self.gds_validate_string(value_, node, 'ReferenceNumber')
            self.ReferenceNumber = value_
            self.ReferenceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Quantity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Quantity')
            value_ = self.gds_validate_string(value_, node, 'Quantity')
            self.Quantity = value_
            self.Quantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'UOM':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UOM')
            value_ = self.gds_validate_string(value_, node, 'UOM')
            self.UOM = value_
            self.UOM_nsprefix_ = child_.prefix
        elif nodeName_ == 'PackagingType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackagingType')
            value_ = self.gds_validate_string(value_, node, 'PackagingType')
            self.PackagingType = value_
            self.PackagingType_nsprefix_ = child_.prefix
        elif nodeName_ == 'IDNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'IDNumber')
            value_ = self.gds_validate_string(value_, node, 'IDNumber')
            self.IDNumber = value_
            self.IDNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ProperShippingName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProperShippingName')
            value_ = self.gds_validate_string(value_, node, 'ProperShippingName')
            self.ProperShippingName = value_
            self.ProperShippingName_nsprefix_ = child_.prefix
        elif nodeName_ == 'AdditionalDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AdditionalDescription')
            value_ = self.gds_validate_string(value_, node, 'AdditionalDescription')
            self.AdditionalDescription = value_
            self.AdditionalDescription_nsprefix_ = child_.prefix
        elif nodeName_ == 'PackagingGroupType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackagingGroupType')
            value_ = self.gds_validate_string(value_, node, 'PackagingGroupType')
            self.PackagingGroupType = value_
            self.PackagingGroupType_nsprefix_ = child_.prefix
        elif nodeName_ == 'PackagingInstructionCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackagingInstructionCode')
            value_ = self.gds_validate_string(value_, node, 'PackagingInstructionCode')
            self.PackagingInstructionCode = value_
            self.PackagingInstructionCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'EmergencyPhone':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EmergencyPhone')
            value_ = self.gds_validate_string(value_, node, 'EmergencyPhone')
            self.EmergencyPhone = value_
            self.EmergencyPhone_nsprefix_ = child_.prefix
        elif nodeName_ == 'EmergencyContact':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EmergencyContact')
            value_ = self.gds_validate_string(value_, node, 'EmergencyContact')
            self.EmergencyContact = value_
            self.EmergencyContact_nsprefix_ = child_.prefix
        elif nodeName_ == 'ReportableQuantity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ReportableQuantity')
            value_ = self.gds_validate_string(value_, node, 'ReportableQuantity')
            self.ReportableQuantity = value_
            self.ReportableQuantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'RegulationSet':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegulationSet')
            value_ = self.gds_validate_string(value_, node, 'RegulationSet')
            self.RegulationSet = value_
            self.RegulationSet_nsprefix_ = child_.prefix
        elif nodeName_ == 'TransportationMode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TransportationMode')
            value_ = self.gds_validate_string(value_, node, 'TransportationMode')
            self.TransportationMode = value_
            self.TransportationMode_nsprefix_ = child_.prefix
        elif nodeName_ == 'CommodityRegulatedLevelCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CommodityRegulatedLevelCode')
            value_ = self.gds_validate_string(value_, node, 'CommodityRegulatedLevelCode')
            self.CommodityRegulatedLevelCode = value_
            self.CommodityRegulatedLevelCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'TransportCategory':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TransportCategory')
            value_ = self.gds_validate_string(value_, node, 'TransportCategory')
            self.TransportCategory = value_
            self.TransportCategory_nsprefix_ = child_.prefix
        elif nodeName_ == 'TunnelRestrictionCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TunnelRestrictionCode')
            value_ = self.gds_validate_string(value_, node, 'TunnelRestrictionCode')
            self.TunnelRestrictionCode = value_
            self.TunnelRestrictionCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'ChemicalRecordIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ChemicalRecordIdentifier')
            value_ = self.gds_validate_string(value_, node, 'ChemicalRecordIdentifier')
            self.ChemicalRecordIdentifier = value_
            self.ChemicalRecordIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocalTechnicalName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocalTechnicalName')
            value_ = self.gds_validate_string(value_, node, 'LocalTechnicalName')
            self.LocalTechnicalName = value_
            self.LocalTechnicalName_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocalProperShippingName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocalProperShippingName')
            value_ = self.gds_validate_string(value_, node, 'LocalProperShippingName')
            self.LocalProperShippingName = value_
            self.LocalProperShippingName_nsprefix_ = child_.prefix
# end class HazMatType


class DryIceType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RegulationSet=None, DryIceWeight=None, MedicalUseIndicator=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RegulationSet = RegulationSet
        self.RegulationSet_nsprefix_ = None
        self.DryIceWeight = DryIceWeight
        self.DryIceWeight_nsprefix_ = None
        self.MedicalUseIndicator = MedicalUseIndicator
        self.MedicalUseIndicator_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DryIceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DryIceType.subclass:
            return DryIceType.subclass(*args_, **kwargs_)
        else:
            return DryIceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RegulationSet(self):
        return self.RegulationSet
    def set_RegulationSet(self, RegulationSet):
        self.RegulationSet = RegulationSet
    def get_DryIceWeight(self):
        return self.DryIceWeight
    def set_DryIceWeight(self, DryIceWeight):
        self.DryIceWeight = DryIceWeight
    def get_MedicalUseIndicator(self):
        return self.MedicalUseIndicator
    def set_MedicalUseIndicator(self, MedicalUseIndicator):
        self.MedicalUseIndicator = MedicalUseIndicator
    def hasContent_(self):
        if (
            self.RegulationSet is not None or
            self.DryIceWeight is not None or
            self.MedicalUseIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DryIceType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DryIceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DryIceType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DryIceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DryIceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DryIceType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DryIceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RegulationSet is not None:
            namespaceprefix_ = self.RegulationSet_nsprefix_ + ':' if (UseCapturedNS_ and self.RegulationSet_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegulationSet>%s</%sRegulationSet>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegulationSet), input_name='RegulationSet')), namespaceprefix_ , eol_))
        if self.DryIceWeight is not None:
            namespaceprefix_ = self.DryIceWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.DryIceWeight_nsprefix_) else ''
            self.DryIceWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DryIceWeight', pretty_print=pretty_print)
        if self.MedicalUseIndicator is not None:
            namespaceprefix_ = self.MedicalUseIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.MedicalUseIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMedicalUseIndicator>%s</%sMedicalUseIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MedicalUseIndicator), input_name='MedicalUseIndicator')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RegulationSet':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegulationSet')
            value_ = self.gds_validate_string(value_, node, 'RegulationSet')
            self.RegulationSet = value_
            self.RegulationSet_nsprefix_ = child_.prefix
        elif nodeName_ == 'DryIceWeight':
            obj_ = DryIceWeightType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DryIceWeight = obj_
            obj_.original_tagname_ = 'DryIceWeight'
        elif nodeName_ == 'MedicalUseIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MedicalUseIndicator')
            value_ = self.gds_validate_string(value_, node, 'MedicalUseIndicator')
            self.MedicalUseIndicator = value_
            self.MedicalUseIndicator_nsprefix_ = child_.prefix
# end class DryIceType


class DryIceWeightType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Weight=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.UnitOfMeasurement_nsprefix_ = None
        self.Weight = Weight
        self.Weight_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DryIceWeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DryIceWeightType.subclass:
            return DryIceWeightType.subclass(*args_, **kwargs_)
        else:
            return DryIceWeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UnitOfMeasurement(self):
        return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement):
        self.UnitOfMeasurement = UnitOfMeasurement
    def get_Weight(self):
        return self.Weight
    def set_Weight(self, Weight):
        self.Weight = Weight
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DryIceWeightType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DryIceWeightType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DryIceWeightType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DryIceWeightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DryIceWeightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DryIceWeightType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DryIceWeightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitOfMeasurement is not None:
            namespaceprefix_ = self.UnitOfMeasurement_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitOfMeasurement_nsprefix_) else ''
            self.UnitOfMeasurement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Weight is not None:
            namespaceprefix_ = self.Weight_nsprefix_ + ':' if (UseCapturedNS_ and self.Weight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeight>%s</%sWeight>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Weight), input_name='Weight')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = ShipUnitOfMeasurementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Weight':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Weight')
            value_ = self.gds_validate_string(value_, node, 'Weight')
            self.Weight = value_
            self.Weight_nsprefix_ = child_.prefix
# end class DryIceWeightType


class ReceiptSpecificationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ImageFormat=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ImageFormat = ImageFormat
        self.ImageFormat_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReceiptSpecificationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReceiptSpecificationType.subclass:
            return ReceiptSpecificationType.subclass(*args_, **kwargs_)
        else:
            return ReceiptSpecificationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ImageFormat(self):
        return self.ImageFormat
    def set_ImageFormat(self, ImageFormat):
        self.ImageFormat = ImageFormat
    def hasContent_(self):
        if (
            self.ImageFormat is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReceiptSpecificationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReceiptSpecificationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReceiptSpecificationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReceiptSpecificationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReceiptSpecificationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReceiptSpecificationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReceiptSpecificationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ImageFormat is not None:
            namespaceprefix_ = self.ImageFormat_nsprefix_ + ':' if (UseCapturedNS_ and self.ImageFormat_nsprefix_) else ''
            self.ImageFormat.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ImageFormat', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ImageFormat':
            obj_ = ReceiptImageFormatType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ImageFormat = obj_
            obj_.original_tagname_ = 'ImageFormat'
# end class ReceiptSpecificationType


class ReceiptImageFormatType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReceiptImageFormatType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReceiptImageFormatType.subclass:
            return ReceiptImageFormatType.subclass(*args_, **kwargs_)
        else:
            return ReceiptImageFormatType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReceiptImageFormatType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReceiptImageFormatType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReceiptImageFormatType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReceiptImageFormatType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReceiptImageFormatType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReceiptImageFormatType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReceiptImageFormatType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class ReceiptImageFormatType


class TaxIDCodeDescType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxIDCodeDescType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxIDCodeDescType.subclass:
            return TaxIDCodeDescType.subclass(*args_, **kwargs_)
        else:
            return TaxIDCodeDescType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TaxIDCodeDescType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TaxIDCodeDescType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TaxIDCodeDescType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TaxIDCodeDescType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TaxIDCodeDescType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TaxIDCodeDescType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TaxIDCodeDescType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class TaxIDCodeDescType


class IndicationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IndicationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IndicationType.subclass:
            return IndicationType.subclass(*args_, **kwargs_)
        else:
            return IndicationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='IndicationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IndicationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'IndicationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IndicationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IndicationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='IndicationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='IndicationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class IndicationType


class AlternateDeliveryAddressType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Name=None, AttentionName=None, UPSAccessPointID=None, Address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Name = Name
        self.Name_nsprefix_ = None
        self.AttentionName = AttentionName
        self.AttentionName_nsprefix_ = None
        self.UPSAccessPointID = UPSAccessPointID
        self.UPSAccessPointID_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AlternateDeliveryAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AlternateDeliveryAddressType.subclass:
            return AlternateDeliveryAddressType.subclass(*args_, **kwargs_)
        else:
            return AlternateDeliveryAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_AttentionName(self):
        return self.AttentionName
    def set_AttentionName(self, AttentionName):
        self.AttentionName = AttentionName
    def get_UPSAccessPointID(self):
        return self.UPSAccessPointID
    def set_UPSAccessPointID(self, UPSAccessPointID):
        self.UPSAccessPointID = UPSAccessPointID
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def hasContent_(self):
        if (
            self.Name is not None or
            self.AttentionName is not None or
            self.UPSAccessPointID is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AlternateDeliveryAddressType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AlternateDeliveryAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AlternateDeliveryAddressType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AlternateDeliveryAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AlternateDeliveryAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AlternateDeliveryAddressType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AlternateDeliveryAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.AttentionName is not None:
            namespaceprefix_ = self.AttentionName_nsprefix_ + ':' if (UseCapturedNS_ and self.AttentionName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttentionName>%s</%sAttentionName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), namespaceprefix_ , eol_))
        if self.UPSAccessPointID is not None:
            namespaceprefix_ = self.UPSAccessPointID_nsprefix_ + ':' if (UseCapturedNS_ and self.UPSAccessPointID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUPSAccessPointID>%s</%sUPSAccessPointID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UPSAccessPointID), input_name='UPSAccessPointID')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Name')
            value_ = self.gds_validate_string(value_, node, 'Name')
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
        elif nodeName_ == 'AttentionName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AttentionName')
            value_ = self.gds_validate_string(value_, node, 'AttentionName')
            self.AttentionName = value_
            self.AttentionName_nsprefix_ = child_.prefix
        elif nodeName_ == 'UPSAccessPointID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UPSAccessPointID')
            value_ = self.gds_validate_string(value_, node, 'UPSAccessPointID')
            self.UPSAccessPointID = value_
            self.UPSAccessPointID_nsprefix_ = child_.prefix
        elif nodeName_ == 'Address':
            obj_ = ADLAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class AlternateDeliveryAddressType


class ShipmentServiceOptionsNotificationVoiceMessageType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PhoneNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PhoneNumber = PhoneNumber
        self.PhoneNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentServiceOptionsNotificationVoiceMessageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentServiceOptionsNotificationVoiceMessageType.subclass:
            return ShipmentServiceOptionsNotificationVoiceMessageType.subclass(*args_, **kwargs_)
        else:
            return ShipmentServiceOptionsNotificationVoiceMessageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PhoneNumber(self):
        return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber):
        self.PhoneNumber = PhoneNumber
    def hasContent_(self):
        if (
            self.PhoneNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentServiceOptionsNotificationVoiceMessageType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentServiceOptionsNotificationVoiceMessageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentServiceOptionsNotificationVoiceMessageType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentServiceOptionsNotificationVoiceMessageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentServiceOptionsNotificationVoiceMessageType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentServiceOptionsNotificationVoiceMessageType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentServiceOptionsNotificationVoiceMessageType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PhoneNumber is not None:
            namespaceprefix_ = self.PhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhoneNumber>%s</%sPhoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PhoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhoneNumber')
            value_ = self.gds_validate_string(value_, node, 'PhoneNumber')
            self.PhoneNumber = value_
            self.PhoneNumber_nsprefix_ = child_.prefix
# end class ShipmentServiceOptionsNotificationVoiceMessageType


class ShipmentServiceOptionsNotificationTextMessageType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PhoneNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PhoneNumber = PhoneNumber
        self.PhoneNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentServiceOptionsNotificationTextMessageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentServiceOptionsNotificationTextMessageType.subclass:
            return ShipmentServiceOptionsNotificationTextMessageType.subclass(*args_, **kwargs_)
        else:
            return ShipmentServiceOptionsNotificationTextMessageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PhoneNumber(self):
        return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber):
        self.PhoneNumber = PhoneNumber
    def hasContent_(self):
        if (
            self.PhoneNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentServiceOptionsNotificationTextMessageType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentServiceOptionsNotificationTextMessageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentServiceOptionsNotificationTextMessageType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentServiceOptionsNotificationTextMessageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentServiceOptionsNotificationTextMessageType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentServiceOptionsNotificationTextMessageType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentServiceOptionsNotificationTextMessageType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PhoneNumber is not None:
            namespaceprefix_ = self.PhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhoneNumber>%s</%sPhoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PhoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhoneNumber')
            value_ = self.gds_validate_string(value_, node, 'PhoneNumber')
            self.PhoneNumber = value_
            self.PhoneNumber_nsprefix_ = child_.prefix
# end class ShipmentServiceOptionsNotificationTextMessageType


class ADLAddressType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AddressLine=None, City=None, StateProvinceCode=None, PostalCode=None, CountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if AddressLine is None:
            self.AddressLine = []
        else:
            self.AddressLine = AddressLine
        self.AddressLine_nsprefix_ = None
        self.City = City
        self.City_nsprefix_ = None
        self.StateProvinceCode = StateProvinceCode
        self.StateProvinceCode_nsprefix_ = None
        self.PostalCode = PostalCode
        self.PostalCode_nsprefix_ = None
        self.CountryCode = CountryCode
        self.CountryCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ADLAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ADLAddressType.subclass:
            return ADLAddressType.subclass(*args_, **kwargs_)
        else:
            return ADLAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AddressLine(self):
        return self.AddressLine
    def set_AddressLine(self, AddressLine):
        self.AddressLine = AddressLine
    def add_AddressLine(self, value):
        self.AddressLine.append(value)
    def insert_AddressLine_at(self, index, value):
        self.AddressLine.insert(index, value)
    def replace_AddressLine_at(self, index, value):
        self.AddressLine[index] = value
    def get_City(self):
        return self.City
    def set_City(self, City):
        self.City = City
    def get_StateProvinceCode(self):
        return self.StateProvinceCode
    def set_StateProvinceCode(self, StateProvinceCode):
        self.StateProvinceCode = StateProvinceCode
    def get_PostalCode(self):
        return self.PostalCode
    def set_PostalCode(self, PostalCode):
        self.PostalCode = PostalCode
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def hasContent_(self):
        if (
            self.AddressLine or
            self.City is not None or
            self.StateProvinceCode is not None or
            self.PostalCode is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ADLAddressType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ADLAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ADLAddressType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ADLAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ADLAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ADLAddressType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ADLAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AddressLine_ in self.AddressLine:
            namespaceprefix_ = self.AddressLine_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressLine_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressLine>%s</%sAddressLine>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(AddressLine_), input_name='AddressLine')), namespaceprefix_ , eol_))
        if self.City is not None:
            namespaceprefix_ = self.City_nsprefix_ + ':' if (UseCapturedNS_ and self.City_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCity>%s</%sCity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), namespaceprefix_ , eol_))
        if self.StateProvinceCode is not None:
            namespaceprefix_ = self.StateProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.StateProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStateProvinceCode>%s</%sStateProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StateProvinceCode), input_name='StateProvinceCode')), namespaceprefix_ , eol_))
        if self.PostalCode is not None:
            namespaceprefix_ = self.PostalCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PostalCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AddressLine':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AddressLine')
            value_ = self.gds_validate_string(value_, node, 'AddressLine')
            self.AddressLine.append(value_)
            self.AddressLine_nsprefix_ = child_.prefix
        elif nodeName_ == 'City':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'City')
            value_ = self.gds_validate_string(value_, node, 'City')
            self.City = value_
            self.City_nsprefix_ = child_.prefix
        elif nodeName_ == 'StateProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StateProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'StateProvinceCode')
            self.StateProvinceCode = value_
            self.StateProvinceCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'PostalCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PostalCode')
            value_ = self.gds_validate_string(value_, node, 'PostalCode')
            self.PostalCode = value_
            self.PostalCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
# end class ADLAddressType


class FreightShipmentInformationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FreightDensityInfo=None, DensityEligibleIndicator=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.FreightDensityInfo = FreightDensityInfo
        self.FreightDensityInfo_nsprefix_ = None
        self.DensityEligibleIndicator = DensityEligibleIndicator
        self.DensityEligibleIndicator_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightShipmentInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightShipmentInformationType.subclass:
            return FreightShipmentInformationType.subclass(*args_, **kwargs_)
        else:
            return FreightShipmentInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FreightDensityInfo(self):
        return self.FreightDensityInfo
    def set_FreightDensityInfo(self, FreightDensityInfo):
        self.FreightDensityInfo = FreightDensityInfo
    def get_DensityEligibleIndicator(self):
        return self.DensityEligibleIndicator
    def set_DensityEligibleIndicator(self, DensityEligibleIndicator):
        self.DensityEligibleIndicator = DensityEligibleIndicator
    def hasContent_(self):
        if (
            self.FreightDensityInfo is not None or
            self.DensityEligibleIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightShipmentInformationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightShipmentInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightShipmentInformationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightShipmentInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightShipmentInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightShipmentInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightShipmentInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FreightDensityInfo is not None:
            namespaceprefix_ = self.FreightDensityInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightDensityInfo_nsprefix_) else ''
            self.FreightDensityInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreightDensityInfo', pretty_print=pretty_print)
        if self.DensityEligibleIndicator is not None:
            namespaceprefix_ = self.DensityEligibleIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.DensityEligibleIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDensityEligibleIndicator>%s</%sDensityEligibleIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DensityEligibleIndicator), input_name='DensityEligibleIndicator')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FreightDensityInfo':
            obj_ = FreightDensityInfoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreightDensityInfo = obj_
            obj_.original_tagname_ = 'FreightDensityInfo'
        elif nodeName_ == 'DensityEligibleIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DensityEligibleIndicator')
            value_ = self.gds_validate_string(value_, node, 'DensityEligibleIndicator')
            self.DensityEligibleIndicator = value_
            self.DensityEligibleIndicator_nsprefix_ = child_.prefix
# end class FreightShipmentInformationType


class HandlingUnitsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Quantity=None, Type=None, Dimensions=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Quantity = Quantity
        self.Quantity_nsprefix_ = None
        self.Type = Type
        self.Type_nsprefix_ = None
        self.Dimensions = Dimensions
        self.Dimensions_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HandlingUnitsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HandlingUnitsType.subclass:
            return HandlingUnitsType.subclass(*args_, **kwargs_)
        else:
            return HandlingUnitsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Dimensions(self):
        return self.Dimensions
    def set_Dimensions(self, Dimensions):
        self.Dimensions = Dimensions
    def hasContent_(self):
        if (
            self.Quantity is not None or
            self.Type is not None or
            self.Dimensions is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HandlingUnitsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HandlingUnitsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HandlingUnitsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HandlingUnitsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HandlingUnitsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HandlingUnitsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HandlingUnitsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Quantity), input_name='Quantity')), namespaceprefix_ , eol_))
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            self.Type.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Type', pretty_print=pretty_print)
        if self.Dimensions is not None:
            namespaceprefix_ = self.Dimensions_nsprefix_ + ':' if (UseCapturedNS_ and self.Dimensions_nsprefix_) else ''
            self.Dimensions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Dimensions', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Quantity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Quantity')
            value_ = self.gds_validate_string(value_, node, 'Quantity')
            self.Quantity = value_
            self.Quantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'Type':
            obj_ = ShipUnitOfMeasurementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Type = obj_
            obj_.original_tagname_ = 'Type'
        elif nodeName_ == 'Dimensions':
            obj_ = HandlingUnitsDimensionsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
# end class HandlingUnitsType


class HandlingUnitsResponseType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Quantity=None, Type=None, Dimensions=None, AdjustedHeight=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Quantity = Quantity
        self.Quantity_nsprefix_ = None
        self.Type = Type
        self.Type_nsprefix_ = None
        self.Dimensions = Dimensions
        self.Dimensions_nsprefix_ = None
        self.AdjustedHeight = AdjustedHeight
        self.AdjustedHeight_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HandlingUnitsResponseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HandlingUnitsResponseType.subclass:
            return HandlingUnitsResponseType.subclass(*args_, **kwargs_)
        else:
            return HandlingUnitsResponseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Dimensions(self):
        return self.Dimensions
    def set_Dimensions(self, Dimensions):
        self.Dimensions = Dimensions
    def get_AdjustedHeight(self):
        return self.AdjustedHeight
    def set_AdjustedHeight(self, AdjustedHeight):
        self.AdjustedHeight = AdjustedHeight
    def hasContent_(self):
        if (
            self.Quantity is not None or
            self.Type is not None or
            self.Dimensions is not None or
            self.AdjustedHeight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HandlingUnitsResponseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HandlingUnitsResponseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HandlingUnitsResponseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HandlingUnitsResponseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HandlingUnitsResponseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HandlingUnitsResponseType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HandlingUnitsResponseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Quantity), input_name='Quantity')), namespaceprefix_ , eol_))
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            self.Type.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Type', pretty_print=pretty_print)
        if self.Dimensions is not None:
            namespaceprefix_ = self.Dimensions_nsprefix_ + ':' if (UseCapturedNS_ and self.Dimensions_nsprefix_) else ''
            self.Dimensions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Dimensions', pretty_print=pretty_print)
        if self.AdjustedHeight is not None:
            namespaceprefix_ = self.AdjustedHeight_nsprefix_ + ':' if (UseCapturedNS_ and self.AdjustedHeight_nsprefix_) else ''
            self.AdjustedHeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AdjustedHeight', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Quantity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Quantity')
            value_ = self.gds_validate_string(value_, node, 'Quantity')
            self.Quantity = value_
            self.Quantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'Type':
            obj_ = ShipUnitOfMeasurementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Type = obj_
            obj_.original_tagname_ = 'Type'
        elif nodeName_ == 'Dimensions':
            obj_ = HandlingUnitsDimensionsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
        elif nodeName_ == 'AdjustedHeight':
            obj_ = AdjustedHeightType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AdjustedHeight = obj_
            obj_.original_tagname_ = 'AdjustedHeight'
# end class HandlingUnitsResponseType


class HandlingUnitsDimensionsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Length=None, Width=None, Height=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.UnitOfMeasurement_nsprefix_ = None
        self.Length = Length
        self.Length_nsprefix_ = None
        self.Width = Width
        self.Width_nsprefix_ = None
        self.Height = Height
        self.Height_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HandlingUnitsDimensionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HandlingUnitsDimensionsType.subclass:
            return HandlingUnitsDimensionsType.subclass(*args_, **kwargs_)
        else:
            return HandlingUnitsDimensionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UnitOfMeasurement(self):
        return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement):
        self.UnitOfMeasurement = UnitOfMeasurement
    def get_Length(self):
        return self.Length
    def set_Length(self, Length):
        self.Length = Length
    def get_Width(self):
        return self.Width
    def set_Width(self, Width):
        self.Width = Width
    def get_Height(self):
        return self.Height
    def set_Height(self, Height):
        self.Height = Height
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Length is not None or
            self.Width is not None or
            self.Height is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HandlingUnitsDimensionsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HandlingUnitsDimensionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HandlingUnitsDimensionsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HandlingUnitsDimensionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HandlingUnitsDimensionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HandlingUnitsDimensionsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HandlingUnitsDimensionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitOfMeasurement is not None:
            namespaceprefix_ = self.UnitOfMeasurement_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitOfMeasurement_nsprefix_) else ''
            self.UnitOfMeasurement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Length is not None:
            namespaceprefix_ = self.Length_nsprefix_ + ':' if (UseCapturedNS_ and self.Length_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLength>%s</%sLength>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Length), input_name='Length')), namespaceprefix_ , eol_))
        if self.Width is not None:
            namespaceprefix_ = self.Width_nsprefix_ + ':' if (UseCapturedNS_ and self.Width_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWidth>%s</%sWidth>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Width), input_name='Width')), namespaceprefix_ , eol_))
        if self.Height is not None:
            namespaceprefix_ = self.Height_nsprefix_ + ':' if (UseCapturedNS_ and self.Height_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHeight>%s</%sHeight>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Height), input_name='Height')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = ShipUnitOfMeasurementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Length':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Length')
            value_ = self.gds_validate_string(value_, node, 'Length')
            self.Length = value_
            self.Length_nsprefix_ = child_.prefix
        elif nodeName_ == 'Width':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Width')
            value_ = self.gds_validate_string(value_, node, 'Width')
            self.Width = value_
            self.Width_nsprefix_ = child_.prefix
        elif nodeName_ == 'Height':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Height')
            value_ = self.gds_validate_string(value_, node, 'Height')
            self.Height = value_
            self.Height_nsprefix_ = child_.prefix
# end class HandlingUnitsDimensionsType


class FreightDensityRateType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Density=None, TotalCubicFeet=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Density = Density
        self.Density_nsprefix_ = None
        self.TotalCubicFeet = TotalCubicFeet
        self.TotalCubicFeet_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightDensityRateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightDensityRateType.subclass:
            return FreightDensityRateType.subclass(*args_, **kwargs_)
        else:
            return FreightDensityRateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Density(self):
        return self.Density
    def set_Density(self, Density):
        self.Density = Density
    def get_TotalCubicFeet(self):
        return self.TotalCubicFeet
    def set_TotalCubicFeet(self, TotalCubicFeet):
        self.TotalCubicFeet = TotalCubicFeet
    def hasContent_(self):
        if (
            self.Density is not None or
            self.TotalCubicFeet is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightDensityRateType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightDensityRateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightDensityRateType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightDensityRateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightDensityRateType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightDensityRateType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightDensityRateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Density is not None:
            namespaceprefix_ = self.Density_nsprefix_ + ':' if (UseCapturedNS_ and self.Density_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDensity>%s</%sDensity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Density), input_name='Density')), namespaceprefix_ , eol_))
        if self.TotalCubicFeet is not None:
            namespaceprefix_ = self.TotalCubicFeet_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalCubicFeet_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalCubicFeet>%s</%sTotalCubicFeet>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TotalCubicFeet), input_name='TotalCubicFeet')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Density':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Density')
            value_ = self.gds_validate_string(value_, node, 'Density')
            self.Density = value_
            self.Density_nsprefix_ = child_.prefix
        elif nodeName_ == 'TotalCubicFeet':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TotalCubicFeet')
            value_ = self.gds_validate_string(value_, node, 'TotalCubicFeet')
            self.TotalCubicFeet = value_
            self.TotalCubicFeet_nsprefix_ = child_.prefix
# end class FreightDensityRateType


class FreightDensityInfoType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AdjustedHeightIndicator=None, AdjustedHeight=None, HandlingUnits=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AdjustedHeightIndicator = AdjustedHeightIndicator
        self.AdjustedHeightIndicator_nsprefix_ = None
        self.AdjustedHeight = AdjustedHeight
        self.AdjustedHeight_nsprefix_ = None
        if HandlingUnits is None:
            self.HandlingUnits = []
        else:
            self.HandlingUnits = HandlingUnits
        self.HandlingUnits_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightDensityInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightDensityInfoType.subclass:
            return FreightDensityInfoType.subclass(*args_, **kwargs_)
        else:
            return FreightDensityInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AdjustedHeightIndicator(self):
        return self.AdjustedHeightIndicator
    def set_AdjustedHeightIndicator(self, AdjustedHeightIndicator):
        self.AdjustedHeightIndicator = AdjustedHeightIndicator
    def get_AdjustedHeight(self):
        return self.AdjustedHeight
    def set_AdjustedHeight(self, AdjustedHeight):
        self.AdjustedHeight = AdjustedHeight
    def get_HandlingUnits(self):
        return self.HandlingUnits
    def set_HandlingUnits(self, HandlingUnits):
        self.HandlingUnits = HandlingUnits
    def add_HandlingUnits(self, value):
        self.HandlingUnits.append(value)
    def insert_HandlingUnits_at(self, index, value):
        self.HandlingUnits.insert(index, value)
    def replace_HandlingUnits_at(self, index, value):
        self.HandlingUnits[index] = value
    def hasContent_(self):
        if (
            self.AdjustedHeightIndicator is not None or
            self.AdjustedHeight is not None or
            self.HandlingUnits
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightDensityInfoType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightDensityInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightDensityInfoType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightDensityInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightDensityInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightDensityInfoType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightDensityInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AdjustedHeightIndicator is not None:
            namespaceprefix_ = self.AdjustedHeightIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.AdjustedHeightIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAdjustedHeightIndicator>%s</%sAdjustedHeightIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AdjustedHeightIndicator), input_name='AdjustedHeightIndicator')), namespaceprefix_ , eol_))
        if self.AdjustedHeight is not None:
            namespaceprefix_ = self.AdjustedHeight_nsprefix_ + ':' if (UseCapturedNS_ and self.AdjustedHeight_nsprefix_) else ''
            self.AdjustedHeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AdjustedHeight', pretty_print=pretty_print)
        for HandlingUnits_ in self.HandlingUnits:
            namespaceprefix_ = self.HandlingUnits_nsprefix_ + ':' if (UseCapturedNS_ and self.HandlingUnits_nsprefix_) else ''
            HandlingUnits_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HandlingUnits', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AdjustedHeightIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AdjustedHeightIndicator')
            value_ = self.gds_validate_string(value_, node, 'AdjustedHeightIndicator')
            self.AdjustedHeightIndicator = value_
            self.AdjustedHeightIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'AdjustedHeight':
            obj_ = AdjustedHeightType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AdjustedHeight = obj_
            obj_.original_tagname_ = 'AdjustedHeight'
        elif nodeName_ == 'HandlingUnits':
            obj_ = HandlingUnitsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HandlingUnits.append(obj_)
            obj_.original_tagname_ = 'HandlingUnits'
# end class FreightDensityInfoType


class AdjustedHeightType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Value=None, UnitOfMeasurement=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.UnitOfMeasurement_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdjustedHeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdjustedHeightType.subclass:
            return AdjustedHeightType.subclass(*args_, **kwargs_)
        else:
            return AdjustedHeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def get_UnitOfMeasurement(self):
        return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement):
        self.UnitOfMeasurement = UnitOfMeasurement
    def hasContent_(self):
        if (
            self.Value is not None or
            self.UnitOfMeasurement is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AdjustedHeightType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AdjustedHeightType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AdjustedHeightType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AdjustedHeightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AdjustedHeightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AdjustedHeightType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AdjustedHeightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
        if self.UnitOfMeasurement is not None:
            namespaceprefix_ = self.UnitOfMeasurement_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitOfMeasurement_nsprefix_) else ''
            self.UnitOfMeasurement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UnitOfMeasurement', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = ShipUnitOfMeasurementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
# end class AdjustedHeightType


class NegotiatedChargesType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ItemizedCharges=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if ItemizedCharges is None:
            self.ItemizedCharges = []
        else:
            self.ItemizedCharges = ItemizedCharges
        self.ItemizedCharges_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NegotiatedChargesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NegotiatedChargesType.subclass:
            return NegotiatedChargesType.subclass(*args_, **kwargs_)
        else:
            return NegotiatedChargesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ItemizedCharges(self):
        return self.ItemizedCharges
    def set_ItemizedCharges(self, ItemizedCharges):
        self.ItemizedCharges = ItemizedCharges
    def add_ItemizedCharges(self, value):
        self.ItemizedCharges.append(value)
    def insert_ItemizedCharges_at(self, index, value):
        self.ItemizedCharges.insert(index, value)
    def replace_ItemizedCharges_at(self, index, value):
        self.ItemizedCharges[index] = value
    def hasContent_(self):
        if (
            self.ItemizedCharges
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NegotiatedChargesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NegotiatedChargesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NegotiatedChargesType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NegotiatedChargesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NegotiatedChargesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NegotiatedChargesType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NegotiatedChargesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ItemizedCharges_ in self.ItemizedCharges:
            namespaceprefix_ = self.ItemizedCharges_nsprefix_ + ':' if (UseCapturedNS_ and self.ItemizedCharges_nsprefix_) else ''
            ItemizedCharges_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ItemizedCharges', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ItemizedCharges':
            obj_ = ShipChargeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ItemizedCharges.append(obj_)
            obj_.original_tagname_ = 'ItemizedCharges'
# end class NegotiatedChargesType


class DGSignatoryInfoType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Name=None, Title=None, Place=None, Date=None, ShipperDeclaration=None, UploadOnlyIndicator=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Name = Name
        self.Name_nsprefix_ = None
        self.Title = Title
        self.Title_nsprefix_ = None
        self.Place = Place
        self.Place_nsprefix_ = None
        self.Date = Date
        self.Date_nsprefix_ = None
        self.ShipperDeclaration = ShipperDeclaration
        self.ShipperDeclaration_nsprefix_ = None
        self.UploadOnlyIndicator = UploadOnlyIndicator
        self.UploadOnlyIndicator_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DGSignatoryInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DGSignatoryInfoType.subclass:
            return DGSignatoryInfoType.subclass(*args_, **kwargs_)
        else:
            return DGSignatoryInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_Title(self):
        return self.Title
    def set_Title(self, Title):
        self.Title = Title
    def get_Place(self):
        return self.Place
    def set_Place(self, Place):
        self.Place = Place
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_ShipperDeclaration(self):
        return self.ShipperDeclaration
    def set_ShipperDeclaration(self, ShipperDeclaration):
        self.ShipperDeclaration = ShipperDeclaration
    def get_UploadOnlyIndicator(self):
        return self.UploadOnlyIndicator
    def set_UploadOnlyIndicator(self, UploadOnlyIndicator):
        self.UploadOnlyIndicator = UploadOnlyIndicator
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Title is not None or
            self.Place is not None or
            self.Date is not None or
            self.ShipperDeclaration is not None or
            self.UploadOnlyIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DGSignatoryInfoType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DGSignatoryInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DGSignatoryInfoType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DGSignatoryInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DGSignatoryInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DGSignatoryInfoType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DGSignatoryInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.Title is not None:
            namespaceprefix_ = self.Title_nsprefix_ + ':' if (UseCapturedNS_ and self.Title_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTitle>%s</%sTitle>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Title), input_name='Title')), namespaceprefix_ , eol_))
        if self.Place is not None:
            namespaceprefix_ = self.Place_nsprefix_ + ':' if (UseCapturedNS_ and self.Place_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPlace>%s</%sPlace>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Place), input_name='Place')), namespaceprefix_ , eol_))
        if self.Date is not None:
            namespaceprefix_ = self.Date_nsprefix_ + ':' if (UseCapturedNS_ and self.Date_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Date), input_name='Date')), namespaceprefix_ , eol_))
        if self.ShipperDeclaration is not None:
            namespaceprefix_ = self.ShipperDeclaration_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipperDeclaration_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipperDeclaration>%s</%sShipperDeclaration>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShipperDeclaration), input_name='ShipperDeclaration')), namespaceprefix_ , eol_))
        if self.UploadOnlyIndicator is not None:
            namespaceprefix_ = self.UploadOnlyIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.UploadOnlyIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUploadOnlyIndicator>%s</%sUploadOnlyIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UploadOnlyIndicator), input_name='UploadOnlyIndicator')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Name')
            value_ = self.gds_validate_string(value_, node, 'Name')
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
        elif nodeName_ == 'Title':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Title')
            value_ = self.gds_validate_string(value_, node, 'Title')
            self.Title = value_
            self.Title_nsprefix_ = child_.prefix
        elif nodeName_ == 'Place':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Place')
            value_ = self.gds_validate_string(value_, node, 'Place')
            self.Place = value_
            self.Place_nsprefix_ = child_.prefix
        elif nodeName_ == 'Date':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Date')
            value_ = self.gds_validate_string(value_, node, 'Date')
            self.Date = value_
            self.Date_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShipperDeclaration':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShipperDeclaration')
            value_ = self.gds_validate_string(value_, node, 'ShipperDeclaration')
            self.ShipperDeclaration = value_
            self.ShipperDeclaration_nsprefix_ = child_.prefix
        elif nodeName_ == 'UploadOnlyIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UploadOnlyIndicator')
            value_ = self.gds_validate_string(value_, node, 'UploadOnlyIndicator')
            self.UploadOnlyIndicator = value_
            self.UploadOnlyIndicator_nsprefix_ = child_.prefix
# end class DGSignatoryInfoType


class ClientInformationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Property=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Property is None:
            self.Property = []
        else:
            self.Property = Property
        self.Property_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClientInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClientInformationType.subclass:
            return ClientInformationType.subclass(*args_, **kwargs_)
        else:
            return ClientInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Property(self):
        return self.Property
    def set_Property(self, Property):
        self.Property = Property
    def add_Property(self, value):
        self.Property.append(value)
    def insert_Property_at(self, index, value):
        self.Property.insert(index, value)
    def replace_Property_at(self, index, value):
        self.Property[index] = value
    def hasContent_(self):
        if (
            self.Property
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='ClientInformationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClientInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ClientInformationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ClientInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ClientInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='common:', name_='ClientInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='ClientInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Property_ in self.Property:
            namespaceprefix_ = self.Property_nsprefix_ + ':' if (UseCapturedNS_ and self.Property_nsprefix_) else ''
            Property_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Property', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Property':
            obj_ = PropertyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Property.append(obj_)
            obj_.original_tagname_ = 'Property'
# end class ClientInformationType


class RequestType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RequestOption=None, SubVersion=None, TransactionReference=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RequestOption is None:
            self.RequestOption = []
        else:
            self.RequestOption = RequestOption
        self.RequestOption_nsprefix_ = None
        self.SubVersion = SubVersion
        self.SubVersion_nsprefix_ = None
        self.TransactionReference = TransactionReference
        self.TransactionReference_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestType.subclass:
            return RequestType.subclass(*args_, **kwargs_)
        else:
            return RequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RequestOption(self):
        return self.RequestOption
    def set_RequestOption(self, RequestOption):
        self.RequestOption = RequestOption
    def add_RequestOption(self, value):
        self.RequestOption.append(value)
    def insert_RequestOption_at(self, index, value):
        self.RequestOption.insert(index, value)
    def replace_RequestOption_at(self, index, value):
        self.RequestOption[index] = value
    def get_SubVersion(self):
        return self.SubVersion
    def set_SubVersion(self, SubVersion):
        self.SubVersion = SubVersion
    def get_TransactionReference(self):
        return self.TransactionReference
    def set_TransactionReference(self, TransactionReference):
        self.TransactionReference = TransactionReference
    def hasContent_(self):
        if (
            self.RequestOption or
            self.SubVersion is not None or
            self.TransactionReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='RequestType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RequestType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RequestType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RequestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='common:', name_='RequestType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='RequestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RequestOption_ in self.RequestOption:
            namespaceprefix_ = self.RequestOption_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestOption_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestOption>%s</%sRequestOption>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(RequestOption_), input_name='RequestOption')), namespaceprefix_ , eol_))
        if self.SubVersion is not None:
            namespaceprefix_ = self.SubVersion_nsprefix_ + ':' if (UseCapturedNS_ and self.SubVersion_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSubVersion>%s</%sSubVersion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SubVersion), input_name='SubVersion')), namespaceprefix_ , eol_))
        if self.TransactionReference is not None:
            namespaceprefix_ = self.TransactionReference_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionReference_nsprefix_) else ''
            self.TransactionReference.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionReference', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RequestOption':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequestOption')
            value_ = self.gds_validate_string(value_, node, 'RequestOption')
            self.RequestOption.append(value_)
            self.RequestOption_nsprefix_ = child_.prefix
        elif nodeName_ == 'SubVersion':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SubVersion')
            value_ = self.gds_validate_string(value_, node, 'SubVersion')
            self.SubVersion = value_
            self.SubVersion_nsprefix_ = child_.prefix
        elif nodeName_ == 'TransactionReference':
            obj_ = TransactionReferenceType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionReference = obj_
            obj_.original_tagname_ = 'TransactionReference'
# end class RequestType


class TransactionReferenceType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CustomerContext=None, TransactionIdentifier=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CustomerContext = CustomerContext
        self.CustomerContext_nsprefix_ = None
        self.TransactionIdentifier = TransactionIdentifier
        self.TransactionIdentifier_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransactionReferenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransactionReferenceType.subclass:
            return TransactionReferenceType.subclass(*args_, **kwargs_)
        else:
            return TransactionReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CustomerContext(self):
        return self.CustomerContext
    def set_CustomerContext(self, CustomerContext):
        self.CustomerContext = CustomerContext
    def get_TransactionIdentifier(self):
        return self.TransactionIdentifier
    def set_TransactionIdentifier(self, TransactionIdentifier):
        self.TransactionIdentifier = TransactionIdentifier
    def hasContent_(self):
        if (
            self.CustomerContext is not None or
            self.TransactionIdentifier is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='TransactionReferenceType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransactionReferenceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransactionReferenceType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransactionReferenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransactionReferenceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='common:', name_='TransactionReferenceType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='TransactionReferenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomerContext is not None:
            namespaceprefix_ = self.CustomerContext_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerContext_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomerContext>%s</%sCustomerContext>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomerContext), input_name='CustomerContext')), namespaceprefix_ , eol_))
        if self.TransactionIdentifier is not None:
            namespaceprefix_ = self.TransactionIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransactionIdentifier>%s</%sTransactionIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransactionIdentifier), input_name='TransactionIdentifier')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CustomerContext':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomerContext')
            value_ = self.gds_validate_string(value_, node, 'CustomerContext')
            self.CustomerContext = value_
            self.CustomerContext_nsprefix_ = child_.prefix
        elif nodeName_ == 'TransactionIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TransactionIdentifier')
            value_ = self.gds_validate_string(value_, node, 'TransactionIdentifier')
            self.TransactionIdentifier = value_
            self.TransactionIdentifier_nsprefix_ = child_.prefix
# end class TransactionReferenceType


class ResponseType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ResponseStatus=None, Alert=None, AlertDetail=None, TransactionReference=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ResponseStatus = ResponseStatus
        self.ResponseStatus_nsprefix_ = None
        if Alert is None:
            self.Alert = []
        else:
            self.Alert = Alert
        self.Alert_nsprefix_ = None
        if AlertDetail is None:
            self.AlertDetail = []
        else:
            self.AlertDetail = AlertDetail
        self.AlertDetail_nsprefix_ = None
        self.TransactionReference = TransactionReference
        self.TransactionReference_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ResponseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ResponseType.subclass:
            return ResponseType.subclass(*args_, **kwargs_)
        else:
            return ResponseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ResponseStatus(self):
        return self.ResponseStatus
    def set_ResponseStatus(self, ResponseStatus):
        self.ResponseStatus = ResponseStatus
    def get_Alert(self):
        return self.Alert
    def set_Alert(self, Alert):
        self.Alert = Alert
    def add_Alert(self, value):
        self.Alert.append(value)
    def insert_Alert_at(self, index, value):
        self.Alert.insert(index, value)
    def replace_Alert_at(self, index, value):
        self.Alert[index] = value
    def get_AlertDetail(self):
        return self.AlertDetail
    def set_AlertDetail(self, AlertDetail):
        self.AlertDetail = AlertDetail
    def add_AlertDetail(self, value):
        self.AlertDetail.append(value)
    def insert_AlertDetail_at(self, index, value):
        self.AlertDetail.insert(index, value)
    def replace_AlertDetail_at(self, index, value):
        self.AlertDetail[index] = value
    def get_TransactionReference(self):
        return self.TransactionReference
    def set_TransactionReference(self, TransactionReference):
        self.TransactionReference = TransactionReference
    def hasContent_(self):
        if (
            self.ResponseStatus is not None or
            self.Alert or
            self.AlertDetail or
            self.TransactionReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='ResponseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ResponseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ResponseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ResponseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ResponseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='common:', name_='ResponseType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='ResponseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ResponseStatus is not None:
            namespaceprefix_ = self.ResponseStatus_nsprefix_ + ':' if (UseCapturedNS_ and self.ResponseStatus_nsprefix_) else ''
            self.ResponseStatus.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ResponseStatus', pretty_print=pretty_print)
        for Alert_ in self.Alert:
            namespaceprefix_ = self.Alert_nsprefix_ + ':' if (UseCapturedNS_ and self.Alert_nsprefix_) else ''
            Alert_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Alert', pretty_print=pretty_print)
        for AlertDetail_ in self.AlertDetail:
            namespaceprefix_ = self.AlertDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.AlertDetail_nsprefix_) else ''
            AlertDetail_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AlertDetail', pretty_print=pretty_print)
        if self.TransactionReference is not None:
            namespaceprefix_ = self.TransactionReference_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionReference_nsprefix_) else ''
            self.TransactionReference.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionReference', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ResponseStatus':
            obj_ = CodeDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ResponseStatus = obj_
            obj_.original_tagname_ = 'ResponseStatus'
        elif nodeName_ == 'Alert':
            obj_ = CodeDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Alert.append(obj_)
            obj_.original_tagname_ = 'Alert'
        elif nodeName_ == 'AlertDetail':
            obj_ = DetailType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AlertDetail.append(obj_)
            obj_.original_tagname_ = 'AlertDetail'
        elif nodeName_ == 'TransactionReference':
            obj_ = TransactionReferenceType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionReference = obj_
            obj_.original_tagname_ = 'TransactionReference'
# end class ResponseType


class CodeDescriptionType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CodeDescriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CodeDescriptionType.subclass:
            return CodeDescriptionType.subclass(*args_, **kwargs_)
        else:
            return CodeDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='CodeDescriptionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CodeDescriptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CodeDescriptionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CodeDescriptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CodeDescriptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='common:', name_='CodeDescriptionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='CodeDescriptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class CodeDescriptionType


class DetailType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, ElementLevelInformation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.ElementLevelInformation = ElementLevelInformation
        self.ElementLevelInformation_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DetailType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DetailType.subclass:
            return DetailType.subclass(*args_, **kwargs_)
        else:
            return DetailType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_ElementLevelInformation(self):
        return self.ElementLevelInformation
    def set_ElementLevelInformation(self, ElementLevelInformation):
        self.ElementLevelInformation = ElementLevelInformation
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None or
            self.ElementLevelInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='DetailType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DetailType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DetailType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DetailType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DetailType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='common:', name_='DetailType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='DetailType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.ElementLevelInformation is not None:
            namespaceprefix_ = self.ElementLevelInformation_nsprefix_ + ':' if (UseCapturedNS_ and self.ElementLevelInformation_nsprefix_) else ''
            self.ElementLevelInformation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ElementLevelInformation', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'ElementLevelInformation':
            obj_ = ElementLevelInformationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ElementLevelInformation = obj_
            obj_.original_tagname_ = 'ElementLevelInformation'
# end class DetailType


class ElementLevelInformationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Level=None, ElementIdentifier=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Level = Level
        self.Level_nsprefix_ = None
        if ElementIdentifier is None:
            self.ElementIdentifier = []
        else:
            self.ElementIdentifier = ElementIdentifier
        self.ElementIdentifier_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ElementLevelInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ElementLevelInformationType.subclass:
            return ElementLevelInformationType.subclass(*args_, **kwargs_)
        else:
            return ElementLevelInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Level(self):
        return self.Level
    def set_Level(self, Level):
        self.Level = Level
    def get_ElementIdentifier(self):
        return self.ElementIdentifier
    def set_ElementIdentifier(self, ElementIdentifier):
        self.ElementIdentifier = ElementIdentifier
    def add_ElementIdentifier(self, value):
        self.ElementIdentifier.append(value)
    def insert_ElementIdentifier_at(self, index, value):
        self.ElementIdentifier.insert(index, value)
    def replace_ElementIdentifier_at(self, index, value):
        self.ElementIdentifier[index] = value
    def hasContent_(self):
        if (
            self.Level is not None or
            self.ElementIdentifier
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='ElementLevelInformationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ElementLevelInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ElementLevelInformationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ElementLevelInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ElementLevelInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='common:', name_='ElementLevelInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='ElementLevelInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Level is not None:
            namespaceprefix_ = self.Level_nsprefix_ + ':' if (UseCapturedNS_ and self.Level_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLevel>%s</%sLevel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Level), input_name='Level')), namespaceprefix_ , eol_))
        for ElementIdentifier_ in self.ElementIdentifier:
            namespaceprefix_ = self.ElementIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.ElementIdentifier_nsprefix_) else ''
            ElementIdentifier_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ElementIdentifier', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Level':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Level')
            value_ = self.gds_validate_string(value_, node, 'Level')
            self.Level = value_
            self.Level_nsprefix_ = child_.prefix
        elif nodeName_ == 'ElementIdentifier':
            obj_ = ElementIdentifierType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ElementIdentifier.append(obj_)
            obj_.original_tagname_ = 'ElementIdentifier'
# end class ElementLevelInformationType


class ElementIdentifierType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ElementIdentifierType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ElementIdentifierType.subclass:
            return ElementIdentifierType.subclass(*args_, **kwargs_)
        else:
            return ElementIdentifierType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='ElementIdentifierType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ElementIdentifierType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ElementIdentifierType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ElementIdentifierType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ElementIdentifierType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='common:', name_='ElementIdentifierType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='ElementIdentifierType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
# end class ElementIdentifierType


class InternationalFormType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FormType=None, UserCreatedForm=None, CN22Form=None, UPSPremiumCareForm=None, AdditionalDocumentIndicator=None, FormGroupIdName=None, SEDFilingOption=None, EEIFilingOption=None, Contacts=None, Product=None, InvoiceNumber=None, InvoiceDate=None, PurchaseOrderNumber=None, TermsOfShipment=None, ReasonForExport=None, Comments=None, DeclarationStatement=None, Discount=None, FreightCharges=None, InsuranceCharges=None, OtherCharges=None, CurrencyCode=None, BlanketPeriod=None, ExportDate=None, ExportingCarrier=None, CarrierID=None, InBondCode=None, EntryNumber=None, PointOfOrigin=None, PointOfOriginType=None, ModeOfTransport=None, PortOfExport=None, PortOfUnloading=None, LoadingPier=None, PartiesToTransaction=None, RoutedExportTransactionIndicator=None, ContainerizedIndicator=None, License=None, ECCNNumber=None, OverridePaperlessIndicator=None, ShipperMemo=None, MultiCurrencyInvoiceLineTotal=None, HazardousMaterialsIndicator=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if FormType is None:
            self.FormType = []
        else:
            self.FormType = FormType
        self.FormType_nsprefix_ = None
        self.UserCreatedForm = UserCreatedForm
        self.UserCreatedForm_nsprefix_ = None
        self.CN22Form = CN22Form
        self.CN22Form_nsprefix_ = None
        self.UPSPremiumCareForm = UPSPremiumCareForm
        self.UPSPremiumCareForm_nsprefix_ = None
        self.AdditionalDocumentIndicator = AdditionalDocumentIndicator
        self.AdditionalDocumentIndicator_nsprefix_ = None
        self.FormGroupIdName = FormGroupIdName
        self.FormGroupIdName_nsprefix_ = None
        self.SEDFilingOption = SEDFilingOption
        self.SEDFilingOption_nsprefix_ = None
        self.EEIFilingOption = EEIFilingOption
        self.EEIFilingOption_nsprefix_ = None
        self.Contacts = Contacts
        self.Contacts_nsprefix_ = None
        if Product is None:
            self.Product = []
        else:
            self.Product = Product
        self.Product_nsprefix_ = None
        self.InvoiceNumber = InvoiceNumber
        self.InvoiceNumber_nsprefix_ = None
        self.InvoiceDate = InvoiceDate
        self.InvoiceDate_nsprefix_ = None
        self.PurchaseOrderNumber = PurchaseOrderNumber
        self.PurchaseOrderNumber_nsprefix_ = None
        self.TermsOfShipment = TermsOfShipment
        self.TermsOfShipment_nsprefix_ = None
        self.ReasonForExport = ReasonForExport
        self.ReasonForExport_nsprefix_ = None
        self.Comments = Comments
        self.Comments_nsprefix_ = None
        self.DeclarationStatement = DeclarationStatement
        self.DeclarationStatement_nsprefix_ = None
        self.Discount = Discount
        self.Discount_nsprefix_ = None
        self.FreightCharges = FreightCharges
        self.FreightCharges_nsprefix_ = None
        self.InsuranceCharges = InsuranceCharges
        self.InsuranceCharges_nsprefix_ = None
        self.OtherCharges = OtherCharges
        self.OtherCharges_nsprefix_ = None
        self.CurrencyCode = CurrencyCode
        self.CurrencyCode_nsprefix_ = None
        self.BlanketPeriod = BlanketPeriod
        self.BlanketPeriod_nsprefix_ = None
        self.ExportDate = ExportDate
        self.ExportDate_nsprefix_ = None
        self.ExportingCarrier = ExportingCarrier
        self.ExportingCarrier_nsprefix_ = None
        self.CarrierID = CarrierID
        self.CarrierID_nsprefix_ = None
        self.InBondCode = InBondCode
        self.InBondCode_nsprefix_ = None
        self.EntryNumber = EntryNumber
        self.EntryNumber_nsprefix_ = None
        self.PointOfOrigin = PointOfOrigin
        self.PointOfOrigin_nsprefix_ = None
        self.PointOfOriginType = PointOfOriginType
        self.PointOfOriginType_nsprefix_ = None
        self.ModeOfTransport = ModeOfTransport
        self.ModeOfTransport_nsprefix_ = None
        self.PortOfExport = PortOfExport
        self.PortOfExport_nsprefix_ = None
        self.PortOfUnloading = PortOfUnloading
        self.PortOfUnloading_nsprefix_ = None
        self.LoadingPier = LoadingPier
        self.LoadingPier_nsprefix_ = None
        self.PartiesToTransaction = PartiesToTransaction
        self.PartiesToTransaction_nsprefix_ = None
        self.RoutedExportTransactionIndicator = RoutedExportTransactionIndicator
        self.RoutedExportTransactionIndicator_nsprefix_ = None
        self.ContainerizedIndicator = ContainerizedIndicator
        self.ContainerizedIndicator_nsprefix_ = None
        self.License = License
        self.License_nsprefix_ = None
        self.ECCNNumber = ECCNNumber
        self.ECCNNumber_nsprefix_ = None
        self.OverridePaperlessIndicator = OverridePaperlessIndicator
        self.OverridePaperlessIndicator_nsprefix_ = None
        self.ShipperMemo = ShipperMemo
        self.ShipperMemo_nsprefix_ = None
        self.MultiCurrencyInvoiceLineTotal = MultiCurrencyInvoiceLineTotal
        self.MultiCurrencyInvoiceLineTotal_nsprefix_ = None
        self.HazardousMaterialsIndicator = HazardousMaterialsIndicator
        self.HazardousMaterialsIndicator_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InternationalFormType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InternationalFormType.subclass:
            return InternationalFormType.subclass(*args_, **kwargs_)
        else:
            return InternationalFormType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FormType(self):
        return self.FormType
    def set_FormType(self, FormType):
        self.FormType = FormType
    def add_FormType(self, value):
        self.FormType.append(value)
    def insert_FormType_at(self, index, value):
        self.FormType.insert(index, value)
    def replace_FormType_at(self, index, value):
        self.FormType[index] = value
    def get_UserCreatedForm(self):
        return self.UserCreatedForm
    def set_UserCreatedForm(self, UserCreatedForm):
        self.UserCreatedForm = UserCreatedForm
    def get_CN22Form(self):
        return self.CN22Form
    def set_CN22Form(self, CN22Form):
        self.CN22Form = CN22Form
    def get_UPSPremiumCareForm(self):
        return self.UPSPremiumCareForm
    def set_UPSPremiumCareForm(self, UPSPremiumCareForm):
        self.UPSPremiumCareForm = UPSPremiumCareForm
    def get_AdditionalDocumentIndicator(self):
        return self.AdditionalDocumentIndicator
    def set_AdditionalDocumentIndicator(self, AdditionalDocumentIndicator):
        self.AdditionalDocumentIndicator = AdditionalDocumentIndicator
    def get_FormGroupIdName(self):
        return self.FormGroupIdName
    def set_FormGroupIdName(self, FormGroupIdName):
        self.FormGroupIdName = FormGroupIdName
    def get_SEDFilingOption(self):
        return self.SEDFilingOption
    def set_SEDFilingOption(self, SEDFilingOption):
        self.SEDFilingOption = SEDFilingOption
    def get_EEIFilingOption(self):
        return self.EEIFilingOption
    def set_EEIFilingOption(self, EEIFilingOption):
        self.EEIFilingOption = EEIFilingOption
    def get_Contacts(self):
        return self.Contacts
    def set_Contacts(self, Contacts):
        self.Contacts = Contacts
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def add_Product(self, value):
        self.Product.append(value)
    def insert_Product_at(self, index, value):
        self.Product.insert(index, value)
    def replace_Product_at(self, index, value):
        self.Product[index] = value
    def get_InvoiceNumber(self):
        return self.InvoiceNumber
    def set_InvoiceNumber(self, InvoiceNumber):
        self.InvoiceNumber = InvoiceNumber
    def get_InvoiceDate(self):
        return self.InvoiceDate
    def set_InvoiceDate(self, InvoiceDate):
        self.InvoiceDate = InvoiceDate
    def get_PurchaseOrderNumber(self):
        return self.PurchaseOrderNumber
    def set_PurchaseOrderNumber(self, PurchaseOrderNumber):
        self.PurchaseOrderNumber = PurchaseOrderNumber
    def get_TermsOfShipment(self):
        return self.TermsOfShipment
    def set_TermsOfShipment(self, TermsOfShipment):
        self.TermsOfShipment = TermsOfShipment
    def get_ReasonForExport(self):
        return self.ReasonForExport
    def set_ReasonForExport(self, ReasonForExport):
        self.ReasonForExport = ReasonForExport
    def get_Comments(self):
        return self.Comments
    def set_Comments(self, Comments):
        self.Comments = Comments
    def get_DeclarationStatement(self):
        return self.DeclarationStatement
    def set_DeclarationStatement(self, DeclarationStatement):
        self.DeclarationStatement = DeclarationStatement
    def get_Discount(self):
        return self.Discount
    def set_Discount(self, Discount):
        self.Discount = Discount
    def get_FreightCharges(self):
        return self.FreightCharges
    def set_FreightCharges(self, FreightCharges):
        self.FreightCharges = FreightCharges
    def get_InsuranceCharges(self):
        return self.InsuranceCharges
    def set_InsuranceCharges(self, InsuranceCharges):
        self.InsuranceCharges = InsuranceCharges
    def get_OtherCharges(self):
        return self.OtherCharges
    def set_OtherCharges(self, OtherCharges):
        self.OtherCharges = OtherCharges
    def get_CurrencyCode(self):
        return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode):
        self.CurrencyCode = CurrencyCode
    def get_BlanketPeriod(self):
        return self.BlanketPeriod
    def set_BlanketPeriod(self, BlanketPeriod):
        self.BlanketPeriod = BlanketPeriod
    def get_ExportDate(self):
        return self.ExportDate
    def set_ExportDate(self, ExportDate):
        self.ExportDate = ExportDate
    def get_ExportingCarrier(self):
        return self.ExportingCarrier
    def set_ExportingCarrier(self, ExportingCarrier):
        self.ExportingCarrier = ExportingCarrier
    def get_CarrierID(self):
        return self.CarrierID
    def set_CarrierID(self, CarrierID):
        self.CarrierID = CarrierID
    def get_InBondCode(self):
        return self.InBondCode
    def set_InBondCode(self, InBondCode):
        self.InBondCode = InBondCode
    def get_EntryNumber(self):
        return self.EntryNumber
    def set_EntryNumber(self, EntryNumber):
        self.EntryNumber = EntryNumber
    def get_PointOfOrigin(self):
        return self.PointOfOrigin
    def set_PointOfOrigin(self, PointOfOrigin):
        self.PointOfOrigin = PointOfOrigin
    def get_PointOfOriginType(self):
        return self.PointOfOriginType
    def set_PointOfOriginType(self, PointOfOriginType):
        self.PointOfOriginType = PointOfOriginType
    def get_ModeOfTransport(self):
        return self.ModeOfTransport
    def set_ModeOfTransport(self, ModeOfTransport):
        self.ModeOfTransport = ModeOfTransport
    def get_PortOfExport(self):
        return self.PortOfExport
    def set_PortOfExport(self, PortOfExport):
        self.PortOfExport = PortOfExport
    def get_PortOfUnloading(self):
        return self.PortOfUnloading
    def set_PortOfUnloading(self, PortOfUnloading):
        self.PortOfUnloading = PortOfUnloading
    def get_LoadingPier(self):
        return self.LoadingPier
    def set_LoadingPier(self, LoadingPier):
        self.LoadingPier = LoadingPier
    def get_PartiesToTransaction(self):
        return self.PartiesToTransaction
    def set_PartiesToTransaction(self, PartiesToTransaction):
        self.PartiesToTransaction = PartiesToTransaction
    def get_RoutedExportTransactionIndicator(self):
        return self.RoutedExportTransactionIndicator
    def set_RoutedExportTransactionIndicator(self, RoutedExportTransactionIndicator):
        self.RoutedExportTransactionIndicator = RoutedExportTransactionIndicator
    def get_ContainerizedIndicator(self):
        return self.ContainerizedIndicator
    def set_ContainerizedIndicator(self, ContainerizedIndicator):
        self.ContainerizedIndicator = ContainerizedIndicator
    def get_License(self):
        return self.License
    def set_License(self, License):
        self.License = License
    def get_ECCNNumber(self):
        return self.ECCNNumber
    def set_ECCNNumber(self, ECCNNumber):
        self.ECCNNumber = ECCNNumber
    def get_OverridePaperlessIndicator(self):
        return self.OverridePaperlessIndicator
    def set_OverridePaperlessIndicator(self, OverridePaperlessIndicator):
        self.OverridePaperlessIndicator = OverridePaperlessIndicator
    def get_ShipperMemo(self):
        return self.ShipperMemo
    def set_ShipperMemo(self, ShipperMemo):
        self.ShipperMemo = ShipperMemo
    def get_MultiCurrencyInvoiceLineTotal(self):
        return self.MultiCurrencyInvoiceLineTotal
    def set_MultiCurrencyInvoiceLineTotal(self, MultiCurrencyInvoiceLineTotal):
        self.MultiCurrencyInvoiceLineTotal = MultiCurrencyInvoiceLineTotal
    def get_HazardousMaterialsIndicator(self):
        return self.HazardousMaterialsIndicator
    def set_HazardousMaterialsIndicator(self, HazardousMaterialsIndicator):
        self.HazardousMaterialsIndicator = HazardousMaterialsIndicator
    def hasContent_(self):
        if (
            self.FormType or
            self.UserCreatedForm is not None or
            self.CN22Form is not None or
            self.UPSPremiumCareForm is not None or
            self.AdditionalDocumentIndicator is not None or
            self.FormGroupIdName is not None or
            self.SEDFilingOption is not None or
            self.EEIFilingOption is not None or
            self.Contacts is not None or
            self.Product or
            self.InvoiceNumber is not None or
            self.InvoiceDate is not None or
            self.PurchaseOrderNumber is not None or
            self.TermsOfShipment is not None or
            self.ReasonForExport is not None or
            self.Comments is not None or
            self.DeclarationStatement is not None or
            self.Discount is not None or
            self.FreightCharges is not None or
            self.InsuranceCharges is not None or
            self.OtherCharges is not None or
            self.CurrencyCode is not None or
            self.BlanketPeriod is not None or
            self.ExportDate is not None or
            self.ExportingCarrier is not None or
            self.CarrierID is not None or
            self.InBondCode is not None or
            self.EntryNumber is not None or
            self.PointOfOrigin is not None or
            self.PointOfOriginType is not None or
            self.ModeOfTransport is not None or
            self.PortOfExport is not None or
            self.PortOfUnloading is not None or
            self.LoadingPier is not None or
            self.PartiesToTransaction is not None or
            self.RoutedExportTransactionIndicator is not None or
            self.ContainerizedIndicator is not None or
            self.License is not None or
            self.ECCNNumber is not None or
            self.OverridePaperlessIndicator is not None or
            self.ShipperMemo is not None or
            self.MultiCurrencyInvoiceLineTotal is not None or
            self.HazardousMaterialsIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='InternationalFormType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InternationalFormType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InternationalFormType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InternationalFormType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InternationalFormType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='InternationalFormType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='InternationalFormType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for FormType_ in self.FormType:
            namespaceprefix_ = self.FormType_nsprefix_ + ':' if (UseCapturedNS_ and self.FormType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormType>%s</%sFormType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(FormType_), input_name='FormType')), namespaceprefix_ , eol_))
        if self.UserCreatedForm is not None:
            namespaceprefix_ = self.UserCreatedForm_nsprefix_ + ':' if (UseCapturedNS_ and self.UserCreatedForm_nsprefix_) else ''
            self.UserCreatedForm.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UserCreatedForm', pretty_print=pretty_print)
        if self.CN22Form is not None:
            namespaceprefix_ = self.CN22Form_nsprefix_ + ':' if (UseCapturedNS_ and self.CN22Form_nsprefix_) else ''
            self.CN22Form.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CN22Form', pretty_print=pretty_print)
        if self.UPSPremiumCareForm is not None:
            namespaceprefix_ = self.UPSPremiumCareForm_nsprefix_ + ':' if (UseCapturedNS_ and self.UPSPremiumCareForm_nsprefix_) else ''
            self.UPSPremiumCareForm.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UPSPremiumCareForm', pretty_print=pretty_print)
        if self.AdditionalDocumentIndicator is not None:
            namespaceprefix_ = self.AdditionalDocumentIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.AdditionalDocumentIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAdditionalDocumentIndicator>%s</%sAdditionalDocumentIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AdditionalDocumentIndicator), input_name='AdditionalDocumentIndicator')), namespaceprefix_ , eol_))
        if self.FormGroupIdName is not None:
            namespaceprefix_ = self.FormGroupIdName_nsprefix_ + ':' if (UseCapturedNS_ and self.FormGroupIdName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormGroupIdName>%s</%sFormGroupIdName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FormGroupIdName), input_name='FormGroupIdName')), namespaceprefix_ , eol_))
        if self.SEDFilingOption is not None:
            namespaceprefix_ = self.SEDFilingOption_nsprefix_ + ':' if (UseCapturedNS_ and self.SEDFilingOption_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSEDFilingOption>%s</%sSEDFilingOption>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SEDFilingOption), input_name='SEDFilingOption')), namespaceprefix_ , eol_))
        if self.EEIFilingOption is not None:
            namespaceprefix_ = self.EEIFilingOption_nsprefix_ + ':' if (UseCapturedNS_ and self.EEIFilingOption_nsprefix_) else ''
            self.EEIFilingOption.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EEIFilingOption', pretty_print=pretty_print)
        if self.Contacts is not None:
            namespaceprefix_ = self.Contacts_nsprefix_ + ':' if (UseCapturedNS_ and self.Contacts_nsprefix_) else ''
            self.Contacts.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Contacts', pretty_print=pretty_print)
        for Product_ in self.Product:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            Product_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
        if self.InvoiceNumber is not None:
            namespaceprefix_ = self.InvoiceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.InvoiceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInvoiceNumber>%s</%sInvoiceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InvoiceNumber), input_name='InvoiceNumber')), namespaceprefix_ , eol_))
        if self.InvoiceDate is not None:
            namespaceprefix_ = self.InvoiceDate_nsprefix_ + ':' if (UseCapturedNS_ and self.InvoiceDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInvoiceDate>%s</%sInvoiceDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InvoiceDate), input_name='InvoiceDate')), namespaceprefix_ , eol_))
        if self.PurchaseOrderNumber is not None:
            namespaceprefix_ = self.PurchaseOrderNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PurchaseOrderNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchaseOrderNumber>%s</%sPurchaseOrderNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PurchaseOrderNumber), input_name='PurchaseOrderNumber')), namespaceprefix_ , eol_))
        if self.TermsOfShipment is not None:
            namespaceprefix_ = self.TermsOfShipment_nsprefix_ + ':' if (UseCapturedNS_ and self.TermsOfShipment_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTermsOfShipment>%s</%sTermsOfShipment>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TermsOfShipment), input_name='TermsOfShipment')), namespaceprefix_ , eol_))
        if self.ReasonForExport is not None:
            namespaceprefix_ = self.ReasonForExport_nsprefix_ + ':' if (UseCapturedNS_ and self.ReasonForExport_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReasonForExport>%s</%sReasonForExport>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReasonForExport), input_name='ReasonForExport')), namespaceprefix_ , eol_))
        if self.Comments is not None:
            namespaceprefix_ = self.Comments_nsprefix_ + ':' if (UseCapturedNS_ and self.Comments_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComments>%s</%sComments>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Comments), input_name='Comments')), namespaceprefix_ , eol_))
        if self.DeclarationStatement is not None:
            namespaceprefix_ = self.DeclarationStatement_nsprefix_ + ':' if (UseCapturedNS_ and self.DeclarationStatement_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeclarationStatement>%s</%sDeclarationStatement>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeclarationStatement), input_name='DeclarationStatement')), namespaceprefix_ , eol_))
        if self.Discount is not None:
            namespaceprefix_ = self.Discount_nsprefix_ + ':' if (UseCapturedNS_ and self.Discount_nsprefix_) else ''
            self.Discount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Discount', pretty_print=pretty_print)
        if self.FreightCharges is not None:
            namespaceprefix_ = self.FreightCharges_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightCharges_nsprefix_) else ''
            self.FreightCharges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreightCharges', pretty_print=pretty_print)
        if self.InsuranceCharges is not None:
            namespaceprefix_ = self.InsuranceCharges_nsprefix_ + ':' if (UseCapturedNS_ and self.InsuranceCharges_nsprefix_) else ''
            self.InsuranceCharges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InsuranceCharges', pretty_print=pretty_print)
        if self.OtherCharges is not None:
            namespaceprefix_ = self.OtherCharges_nsprefix_ + ':' if (UseCapturedNS_ and self.OtherCharges_nsprefix_) else ''
            self.OtherCharges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OtherCharges', pretty_print=pretty_print)
        if self.CurrencyCode is not None:
            namespaceprefix_ = self.CurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyCode>%s</%sCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), namespaceprefix_ , eol_))
        if self.BlanketPeriod is not None:
            namespaceprefix_ = self.BlanketPeriod_nsprefix_ + ':' if (UseCapturedNS_ and self.BlanketPeriod_nsprefix_) else ''
            self.BlanketPeriod.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BlanketPeriod', pretty_print=pretty_print)
        if self.ExportDate is not None:
            namespaceprefix_ = self.ExportDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ExportDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExportDate>%s</%sExportDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExportDate), input_name='ExportDate')), namespaceprefix_ , eol_))
        if self.ExportingCarrier is not None:
            namespaceprefix_ = self.ExportingCarrier_nsprefix_ + ':' if (UseCapturedNS_ and self.ExportingCarrier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExportingCarrier>%s</%sExportingCarrier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExportingCarrier), input_name='ExportingCarrier')), namespaceprefix_ , eol_))
        if self.CarrierID is not None:
            namespaceprefix_ = self.CarrierID_nsprefix_ + ':' if (UseCapturedNS_ and self.CarrierID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierID>%s</%sCarrierID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CarrierID), input_name='CarrierID')), namespaceprefix_ , eol_))
        if self.InBondCode is not None:
            namespaceprefix_ = self.InBondCode_nsprefix_ + ':' if (UseCapturedNS_ and self.InBondCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInBondCode>%s</%sInBondCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InBondCode), input_name='InBondCode')), namespaceprefix_ , eol_))
        if self.EntryNumber is not None:
            namespaceprefix_ = self.EntryNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.EntryNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEntryNumber>%s</%sEntryNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EntryNumber), input_name='EntryNumber')), namespaceprefix_ , eol_))
        if self.PointOfOrigin is not None:
            namespaceprefix_ = self.PointOfOrigin_nsprefix_ + ':' if (UseCapturedNS_ and self.PointOfOrigin_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPointOfOrigin>%s</%sPointOfOrigin>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PointOfOrigin), input_name='PointOfOrigin')), namespaceprefix_ , eol_))
        if self.PointOfOriginType is not None:
            namespaceprefix_ = self.PointOfOriginType_nsprefix_ + ':' if (UseCapturedNS_ and self.PointOfOriginType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPointOfOriginType>%s</%sPointOfOriginType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PointOfOriginType), input_name='PointOfOriginType')), namespaceprefix_ , eol_))
        if self.ModeOfTransport is not None:
            namespaceprefix_ = self.ModeOfTransport_nsprefix_ + ':' if (UseCapturedNS_ and self.ModeOfTransport_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sModeOfTransport>%s</%sModeOfTransport>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ModeOfTransport), input_name='ModeOfTransport')), namespaceprefix_ , eol_))
        if self.PortOfExport is not None:
            namespaceprefix_ = self.PortOfExport_nsprefix_ + ':' if (UseCapturedNS_ and self.PortOfExport_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPortOfExport>%s</%sPortOfExport>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PortOfExport), input_name='PortOfExport')), namespaceprefix_ , eol_))
        if self.PortOfUnloading is not None:
            namespaceprefix_ = self.PortOfUnloading_nsprefix_ + ':' if (UseCapturedNS_ and self.PortOfUnloading_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPortOfUnloading>%s</%sPortOfUnloading>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PortOfUnloading), input_name='PortOfUnloading')), namespaceprefix_ , eol_))
        if self.LoadingPier is not None:
            namespaceprefix_ = self.LoadingPier_nsprefix_ + ':' if (UseCapturedNS_ and self.LoadingPier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLoadingPier>%s</%sLoadingPier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LoadingPier), input_name='LoadingPier')), namespaceprefix_ , eol_))
        if self.PartiesToTransaction is not None:
            namespaceprefix_ = self.PartiesToTransaction_nsprefix_ + ':' if (UseCapturedNS_ and self.PartiesToTransaction_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPartiesToTransaction>%s</%sPartiesToTransaction>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PartiesToTransaction), input_name='PartiesToTransaction')), namespaceprefix_ , eol_))
        if self.RoutedExportTransactionIndicator is not None:
            namespaceprefix_ = self.RoutedExportTransactionIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.RoutedExportTransactionIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRoutedExportTransactionIndicator>%s</%sRoutedExportTransactionIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RoutedExportTransactionIndicator), input_name='RoutedExportTransactionIndicator')), namespaceprefix_ , eol_))
        if self.ContainerizedIndicator is not None:
            namespaceprefix_ = self.ContainerizedIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.ContainerizedIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContainerizedIndicator>%s</%sContainerizedIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ContainerizedIndicator), input_name='ContainerizedIndicator')), namespaceprefix_ , eol_))
        if self.License is not None:
            namespaceprefix_ = self.License_nsprefix_ + ':' if (UseCapturedNS_ and self.License_nsprefix_) else ''
            self.License.export(outfile, level, namespaceprefix_, namespacedef_='', name_='License', pretty_print=pretty_print)
        if self.ECCNNumber is not None:
            namespaceprefix_ = self.ECCNNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ECCNNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sECCNNumber>%s</%sECCNNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ECCNNumber), input_name='ECCNNumber')), namespaceprefix_ , eol_))
        if self.OverridePaperlessIndicator is not None:
            namespaceprefix_ = self.OverridePaperlessIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.OverridePaperlessIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOverridePaperlessIndicator>%s</%sOverridePaperlessIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OverridePaperlessIndicator), input_name='OverridePaperlessIndicator')), namespaceprefix_ , eol_))
        if self.ShipperMemo is not None:
            namespaceprefix_ = self.ShipperMemo_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipperMemo_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipperMemo>%s</%sShipperMemo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShipperMemo), input_name='ShipperMemo')), namespaceprefix_ , eol_))
        if self.MultiCurrencyInvoiceLineTotal is not None:
            namespaceprefix_ = self.MultiCurrencyInvoiceLineTotal_nsprefix_ + ':' if (UseCapturedNS_ and self.MultiCurrencyInvoiceLineTotal_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMultiCurrencyInvoiceLineTotal>%s</%sMultiCurrencyInvoiceLineTotal>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MultiCurrencyInvoiceLineTotal), input_name='MultiCurrencyInvoiceLineTotal')), namespaceprefix_ , eol_))
        if self.HazardousMaterialsIndicator is not None:
            namespaceprefix_ = self.HazardousMaterialsIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.HazardousMaterialsIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHazardousMaterialsIndicator>%s</%sHazardousMaterialsIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HazardousMaterialsIndicator), input_name='HazardousMaterialsIndicator')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FormType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FormType')
            value_ = self.gds_validate_string(value_, node, 'FormType')
            self.FormType.append(value_)
            self.FormType_nsprefix_ = child_.prefix
        elif nodeName_ == 'UserCreatedForm':
            obj_ = UserCreatedFormType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UserCreatedForm = obj_
            obj_.original_tagname_ = 'UserCreatedForm'
        elif nodeName_ == 'CN22Form':
            obj_ = CN22FormType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CN22Form = obj_
            obj_.original_tagname_ = 'CN22Form'
        elif nodeName_ == 'UPSPremiumCareForm':
            obj_ = UPSPremiumCareFormType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UPSPremiumCareForm = obj_
            obj_.original_tagname_ = 'UPSPremiumCareForm'
        elif nodeName_ == 'AdditionalDocumentIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AdditionalDocumentIndicator')
            value_ = self.gds_validate_string(value_, node, 'AdditionalDocumentIndicator')
            self.AdditionalDocumentIndicator = value_
            self.AdditionalDocumentIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'FormGroupIdName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FormGroupIdName')
            value_ = self.gds_validate_string(value_, node, 'FormGroupIdName')
            self.FormGroupIdName = value_
            self.FormGroupIdName_nsprefix_ = child_.prefix
        elif nodeName_ == 'SEDFilingOption':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SEDFilingOption')
            value_ = self.gds_validate_string(value_, node, 'SEDFilingOption')
            self.SEDFilingOption = value_
            self.SEDFilingOption_nsprefix_ = child_.prefix
        elif nodeName_ == 'EEIFilingOption':
            obj_ = EEIFilingOptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EEIFilingOption = obj_
            obj_.original_tagname_ = 'EEIFilingOption'
        elif nodeName_ == 'Contacts':
            obj_ = ContactType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Contacts = obj_
            obj_.original_tagname_ = 'Contacts'
        elif nodeName_ == 'Product':
            obj_ = ProductType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product.append(obj_)
            obj_.original_tagname_ = 'Product'
        elif nodeName_ == 'InvoiceNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InvoiceNumber')
            value_ = self.gds_validate_string(value_, node, 'InvoiceNumber')
            self.InvoiceNumber = value_
            self.InvoiceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'InvoiceDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InvoiceDate')
            value_ = self.gds_validate_string(value_, node, 'InvoiceDate')
            self.InvoiceDate = value_
            self.InvoiceDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'PurchaseOrderNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PurchaseOrderNumber')
            value_ = self.gds_validate_string(value_, node, 'PurchaseOrderNumber')
            self.PurchaseOrderNumber = value_
            self.PurchaseOrderNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'TermsOfShipment':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TermsOfShipment')
            value_ = self.gds_validate_string(value_, node, 'TermsOfShipment')
            self.TermsOfShipment = value_
            self.TermsOfShipment_nsprefix_ = child_.prefix
        elif nodeName_ == 'ReasonForExport':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ReasonForExport')
            value_ = self.gds_validate_string(value_, node, 'ReasonForExport')
            self.ReasonForExport = value_
            self.ReasonForExport_nsprefix_ = child_.prefix
        elif nodeName_ == 'Comments':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Comments')
            value_ = self.gds_validate_string(value_, node, 'Comments')
            self.Comments = value_
            self.Comments_nsprefix_ = child_.prefix
        elif nodeName_ == 'DeclarationStatement':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DeclarationStatement')
            value_ = self.gds_validate_string(value_, node, 'DeclarationStatement')
            self.DeclarationStatement = value_
            self.DeclarationStatement_nsprefix_ = child_.prefix
        elif nodeName_ == 'Discount':
            obj_ = IFChargesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Discount = obj_
            obj_.original_tagname_ = 'Discount'
        elif nodeName_ == 'FreightCharges':
            obj_ = IFChargesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreightCharges = obj_
            obj_.original_tagname_ = 'FreightCharges'
        elif nodeName_ == 'InsuranceCharges':
            obj_ = IFChargesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InsuranceCharges = obj_
            obj_.original_tagname_ = 'InsuranceCharges'
        elif nodeName_ == 'OtherCharges':
            obj_ = OtherChargesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OtherCharges = obj_
            obj_.original_tagname_ = 'OtherCharges'
        elif nodeName_ == 'CurrencyCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'CurrencyCode')
            self.CurrencyCode = value_
            self.CurrencyCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'BlanketPeriod':
            obj_ = BlanketPeriodType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BlanketPeriod = obj_
            obj_.original_tagname_ = 'BlanketPeriod'
        elif nodeName_ == 'ExportDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExportDate')
            value_ = self.gds_validate_string(value_, node, 'ExportDate')
            self.ExportDate = value_
            self.ExportDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'ExportingCarrier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExportingCarrier')
            value_ = self.gds_validate_string(value_, node, 'ExportingCarrier')
            self.ExportingCarrier = value_
            self.ExportingCarrier_nsprefix_ = child_.prefix
        elif nodeName_ == 'CarrierID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CarrierID')
            value_ = self.gds_validate_string(value_, node, 'CarrierID')
            self.CarrierID = value_
            self.CarrierID_nsprefix_ = child_.prefix
        elif nodeName_ == 'InBondCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InBondCode')
            value_ = self.gds_validate_string(value_, node, 'InBondCode')
            self.InBondCode = value_
            self.InBondCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'EntryNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EntryNumber')
            value_ = self.gds_validate_string(value_, node, 'EntryNumber')
            self.EntryNumber = value_
            self.EntryNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'PointOfOrigin':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PointOfOrigin')
            value_ = self.gds_validate_string(value_, node, 'PointOfOrigin')
            self.PointOfOrigin = value_
            self.PointOfOrigin_nsprefix_ = child_.prefix
        elif nodeName_ == 'PointOfOriginType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PointOfOriginType')
            value_ = self.gds_validate_string(value_, node, 'PointOfOriginType')
            self.PointOfOriginType = value_
            self.PointOfOriginType_nsprefix_ = child_.prefix
        elif nodeName_ == 'ModeOfTransport':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ModeOfTransport')
            value_ = self.gds_validate_string(value_, node, 'ModeOfTransport')
            self.ModeOfTransport = value_
            self.ModeOfTransport_nsprefix_ = child_.prefix
        elif nodeName_ == 'PortOfExport':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PortOfExport')
            value_ = self.gds_validate_string(value_, node, 'PortOfExport')
            self.PortOfExport = value_
            self.PortOfExport_nsprefix_ = child_.prefix
        elif nodeName_ == 'PortOfUnloading':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PortOfUnloading')
            value_ = self.gds_validate_string(value_, node, 'PortOfUnloading')
            self.PortOfUnloading = value_
            self.PortOfUnloading_nsprefix_ = child_.prefix
        elif nodeName_ == 'LoadingPier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LoadingPier')
            value_ = self.gds_validate_string(value_, node, 'LoadingPier')
            self.LoadingPier = value_
            self.LoadingPier_nsprefix_ = child_.prefix
        elif nodeName_ == 'PartiesToTransaction':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PartiesToTransaction')
            value_ = self.gds_validate_string(value_, node, 'PartiesToTransaction')
            self.PartiesToTransaction = value_
            self.PartiesToTransaction_nsprefix_ = child_.prefix
        elif nodeName_ == 'RoutedExportTransactionIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RoutedExportTransactionIndicator')
            value_ = self.gds_validate_string(value_, node, 'RoutedExportTransactionIndicator')
            self.RoutedExportTransactionIndicator = value_
            self.RoutedExportTransactionIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'ContainerizedIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ContainerizedIndicator')
            value_ = self.gds_validate_string(value_, node, 'ContainerizedIndicator')
            self.ContainerizedIndicator = value_
            self.ContainerizedIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'License':
            obj_ = LicenseType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.License = obj_
            obj_.original_tagname_ = 'License'
        elif nodeName_ == 'ECCNNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ECCNNumber')
            value_ = self.gds_validate_string(value_, node, 'ECCNNumber')
            self.ECCNNumber = value_
            self.ECCNNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'OverridePaperlessIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OverridePaperlessIndicator')
            value_ = self.gds_validate_string(value_, node, 'OverridePaperlessIndicator')
            self.OverridePaperlessIndicator = value_
            self.OverridePaperlessIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShipperMemo':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShipperMemo')
            value_ = self.gds_validate_string(value_, node, 'ShipperMemo')
            self.ShipperMemo = value_
            self.ShipperMemo_nsprefix_ = child_.prefix
        elif nodeName_ == 'MultiCurrencyInvoiceLineTotal':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MultiCurrencyInvoiceLineTotal')
            value_ = self.gds_validate_string(value_, node, 'MultiCurrencyInvoiceLineTotal')
            self.MultiCurrencyInvoiceLineTotal = value_
            self.MultiCurrencyInvoiceLineTotal_nsprefix_ = child_.prefix
        elif nodeName_ == 'HazardousMaterialsIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HazardousMaterialsIndicator')
            value_ = self.gds_validate_string(value_, node, 'HazardousMaterialsIndicator')
            self.HazardousMaterialsIndicator = value_
            self.HazardousMaterialsIndicator_nsprefix_ = child_.prefix
# end class InternationalFormType


class UPSPremiumCareFormType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ShipmentDate=None, PageSize=None, PrintType=None, NumOfCopies=None, LanguageForUPSPremiumCare=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ShipmentDate = ShipmentDate
        self.ShipmentDate_nsprefix_ = None
        self.PageSize = PageSize
        self.PageSize_nsprefix_ = None
        self.PrintType = PrintType
        self.PrintType_nsprefix_ = None
        self.NumOfCopies = NumOfCopies
        self.NumOfCopies_nsprefix_ = None
        self.LanguageForUPSPremiumCare = LanguageForUPSPremiumCare
        self.LanguageForUPSPremiumCare_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UPSPremiumCareFormType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UPSPremiumCareFormType.subclass:
            return UPSPremiumCareFormType.subclass(*args_, **kwargs_)
        else:
            return UPSPremiumCareFormType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ShipmentDate(self):
        return self.ShipmentDate
    def set_ShipmentDate(self, ShipmentDate):
        self.ShipmentDate = ShipmentDate
    def get_PageSize(self):
        return self.PageSize
    def set_PageSize(self, PageSize):
        self.PageSize = PageSize
    def get_PrintType(self):
        return self.PrintType
    def set_PrintType(self, PrintType):
        self.PrintType = PrintType
    def get_NumOfCopies(self):
        return self.NumOfCopies
    def set_NumOfCopies(self, NumOfCopies):
        self.NumOfCopies = NumOfCopies
    def get_LanguageForUPSPremiumCare(self):
        return self.LanguageForUPSPremiumCare
    def set_LanguageForUPSPremiumCare(self, LanguageForUPSPremiumCare):
        self.LanguageForUPSPremiumCare = LanguageForUPSPremiumCare
    def hasContent_(self):
        if (
            self.ShipmentDate is not None or
            self.PageSize is not None or
            self.PrintType is not None or
            self.NumOfCopies is not None or
            self.LanguageForUPSPremiumCare is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='UPSPremiumCareFormType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UPSPremiumCareFormType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UPSPremiumCareFormType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UPSPremiumCareFormType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UPSPremiumCareFormType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='UPSPremiumCareFormType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='UPSPremiumCareFormType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShipmentDate is not None:
            namespaceprefix_ = self.ShipmentDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipmentDate>%s</%sShipmentDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShipmentDate), input_name='ShipmentDate')), namespaceprefix_ , eol_))
        if self.PageSize is not None:
            namespaceprefix_ = self.PageSize_nsprefix_ + ':' if (UseCapturedNS_ and self.PageSize_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPageSize>%s</%sPageSize>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PageSize), input_name='PageSize')), namespaceprefix_ , eol_))
        if self.PrintType is not None:
            namespaceprefix_ = self.PrintType_nsprefix_ + ':' if (UseCapturedNS_ and self.PrintType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrintType>%s</%sPrintType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrintType), input_name='PrintType')), namespaceprefix_ , eol_))
        if self.NumOfCopies is not None:
            namespaceprefix_ = self.NumOfCopies_nsprefix_ + ':' if (UseCapturedNS_ and self.NumOfCopies_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumOfCopies>%s</%sNumOfCopies>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NumOfCopies), input_name='NumOfCopies')), namespaceprefix_ , eol_))
        if self.LanguageForUPSPremiumCare is not None:
            namespaceprefix_ = self.LanguageForUPSPremiumCare_nsprefix_ + ':' if (UseCapturedNS_ and self.LanguageForUPSPremiumCare_nsprefix_) else ''
            self.LanguageForUPSPremiumCare.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LanguageForUPSPremiumCare', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ShipmentDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShipmentDate')
            value_ = self.gds_validate_string(value_, node, 'ShipmentDate')
            self.ShipmentDate = value_
            self.ShipmentDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'PageSize':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PageSize')
            value_ = self.gds_validate_string(value_, node, 'PageSize')
            self.PageSize = value_
            self.PageSize_nsprefix_ = child_.prefix
        elif nodeName_ == 'PrintType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PrintType')
            value_ = self.gds_validate_string(value_, node, 'PrintType')
            self.PrintType = value_
            self.PrintType_nsprefix_ = child_.prefix
        elif nodeName_ == 'NumOfCopies':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NumOfCopies')
            value_ = self.gds_validate_string(value_, node, 'NumOfCopies')
            self.NumOfCopies = value_
            self.NumOfCopies_nsprefix_ = child_.prefix
        elif nodeName_ == 'LanguageForUPSPremiumCare':
            obj_ = LanguageForUPSPremiumCareType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LanguageForUPSPremiumCare = obj_
            obj_.original_tagname_ = 'LanguageForUPSPremiumCare'
# end class UPSPremiumCareFormType


class LanguageForUPSPremiumCareType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Language=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Language is None:
            self.Language = []
        else:
            self.Language = Language
        self.Language_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LanguageForUPSPremiumCareType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LanguageForUPSPremiumCareType.subclass:
            return LanguageForUPSPremiumCareType.subclass(*args_, **kwargs_)
        else:
            return LanguageForUPSPremiumCareType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Language(self):
        return self.Language
    def set_Language(self, Language):
        self.Language = Language
    def add_Language(self, value):
        self.Language.append(value)
    def insert_Language_at(self, index, value):
        self.Language.insert(index, value)
    def replace_Language_at(self, index, value):
        self.Language[index] = value
    def hasContent_(self):
        if (
            self.Language
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='LanguageForUPSPremiumCareType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LanguageForUPSPremiumCareType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LanguageForUPSPremiumCareType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LanguageForUPSPremiumCareType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LanguageForUPSPremiumCareType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='LanguageForUPSPremiumCareType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='LanguageForUPSPremiumCareType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Language_ in self.Language:
            namespaceprefix_ = self.Language_nsprefix_ + ':' if (UseCapturedNS_ and self.Language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLanguage>%s</%sLanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Language_), input_name='Language')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Language')
            value_ = self.gds_validate_string(value_, node, 'Language')
            self.Language.append(value_)
            self.Language_nsprefix_ = child_.prefix
# end class LanguageForUPSPremiumCareType


class UserCreatedFormType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DocumentID=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if DocumentID is None:
            self.DocumentID = []
        else:
            self.DocumentID = DocumentID
        self.DocumentID_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UserCreatedFormType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UserCreatedFormType.subclass:
            return UserCreatedFormType.subclass(*args_, **kwargs_)
        else:
            return UserCreatedFormType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocumentID(self):
        return self.DocumentID
    def set_DocumentID(self, DocumentID):
        self.DocumentID = DocumentID
    def add_DocumentID(self, value):
        self.DocumentID.append(value)
    def insert_DocumentID_at(self, index, value):
        self.DocumentID.insert(index, value)
    def replace_DocumentID_at(self, index, value):
        self.DocumentID[index] = value
    def hasContent_(self):
        if (
            self.DocumentID
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='UserCreatedFormType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UserCreatedFormType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UserCreatedFormType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UserCreatedFormType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UserCreatedFormType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='UserCreatedFormType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='UserCreatedFormType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DocumentID_ in self.DocumentID:
            namespaceprefix_ = self.DocumentID_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentID>%s</%sDocumentID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(DocumentID_), input_name='DocumentID')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocumentID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocumentID')
            value_ = self.gds_validate_string(value_, node, 'DocumentID')
            self.DocumentID.append(value_)
            self.DocumentID_nsprefix_ = child_.prefix
# end class UserCreatedFormType


class CN22FormType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LabelSize=None, PrintsPerPage=None, LabelPrintType=None, CN22Type=None, CN22OtherDescription=None, FoldHereText=None, CN22Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.LabelSize = LabelSize
        self.LabelSize_nsprefix_ = None
        self.PrintsPerPage = PrintsPerPage
        self.PrintsPerPage_nsprefix_ = None
        self.LabelPrintType = LabelPrintType
        self.LabelPrintType_nsprefix_ = None
        self.CN22Type = CN22Type
        self.CN22Type_nsprefix_ = None
        self.CN22OtherDescription = CN22OtherDescription
        self.CN22OtherDescription_nsprefix_ = None
        self.FoldHereText = FoldHereText
        self.FoldHereText_nsprefix_ = None
        if CN22Content is None:
            self.CN22Content = []
        else:
            self.CN22Content = CN22Content
        self.CN22Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CN22FormType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CN22FormType.subclass:
            return CN22FormType.subclass(*args_, **kwargs_)
        else:
            return CN22FormType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LabelSize(self):
        return self.LabelSize
    def set_LabelSize(self, LabelSize):
        self.LabelSize = LabelSize
    def get_PrintsPerPage(self):
        return self.PrintsPerPage
    def set_PrintsPerPage(self, PrintsPerPage):
        self.PrintsPerPage = PrintsPerPage
    def get_LabelPrintType(self):
        return self.LabelPrintType
    def set_LabelPrintType(self, LabelPrintType):
        self.LabelPrintType = LabelPrintType
    def get_CN22Type(self):
        return self.CN22Type
    def set_CN22Type(self, CN22Type):
        self.CN22Type = CN22Type
    def get_CN22OtherDescription(self):
        return self.CN22OtherDescription
    def set_CN22OtherDescription(self, CN22OtherDescription):
        self.CN22OtherDescription = CN22OtherDescription
    def get_FoldHereText(self):
        return self.FoldHereText
    def set_FoldHereText(self, FoldHereText):
        self.FoldHereText = FoldHereText
    def get_CN22Content(self):
        return self.CN22Content
    def set_CN22Content(self, CN22Content):
        self.CN22Content = CN22Content
    def add_CN22Content(self, value):
        self.CN22Content.append(value)
    def insert_CN22Content_at(self, index, value):
        self.CN22Content.insert(index, value)
    def replace_CN22Content_at(self, index, value):
        self.CN22Content[index] = value
    def hasContent_(self):
        if (
            self.LabelSize is not None or
            self.PrintsPerPage is not None or
            self.LabelPrintType is not None or
            self.CN22Type is not None or
            self.CN22OtherDescription is not None or
            self.FoldHereText is not None or
            self.CN22Content
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='CN22FormType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CN22FormType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CN22FormType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CN22FormType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CN22FormType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='CN22FormType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='CN22FormType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LabelSize is not None:
            namespaceprefix_ = self.LabelSize_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelSize_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelSize>%s</%sLabelSize>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LabelSize), input_name='LabelSize')), namespaceprefix_ , eol_))
        if self.PrintsPerPage is not None:
            namespaceprefix_ = self.PrintsPerPage_nsprefix_ + ':' if (UseCapturedNS_ and self.PrintsPerPage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrintsPerPage>%s</%sPrintsPerPage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrintsPerPage), input_name='PrintsPerPage')), namespaceprefix_ , eol_))
        if self.LabelPrintType is not None:
            namespaceprefix_ = self.LabelPrintType_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelPrintType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelPrintType>%s</%sLabelPrintType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LabelPrintType), input_name='LabelPrintType')), namespaceprefix_ , eol_))
        if self.CN22Type is not None:
            namespaceprefix_ = self.CN22Type_nsprefix_ + ':' if (UseCapturedNS_ and self.CN22Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCN22Type>%s</%sCN22Type>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CN22Type), input_name='CN22Type')), namespaceprefix_ , eol_))
        if self.CN22OtherDescription is not None:
            namespaceprefix_ = self.CN22OtherDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.CN22OtherDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCN22OtherDescription>%s</%sCN22OtherDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CN22OtherDescription), input_name='CN22OtherDescription')), namespaceprefix_ , eol_))
        if self.FoldHereText is not None:
            namespaceprefix_ = self.FoldHereText_nsprefix_ + ':' if (UseCapturedNS_ and self.FoldHereText_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFoldHereText>%s</%sFoldHereText>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FoldHereText), input_name='FoldHereText')), namespaceprefix_ , eol_))
        for CN22Content_ in self.CN22Content:
            namespaceprefix_ = self.CN22Content_nsprefix_ + ':' if (UseCapturedNS_ and self.CN22Content_nsprefix_) else ''
            CN22Content_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CN22Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LabelSize':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelSize')
            value_ = self.gds_validate_string(value_, node, 'LabelSize')
            self.LabelSize = value_
            self.LabelSize_nsprefix_ = child_.prefix
        elif nodeName_ == 'PrintsPerPage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PrintsPerPage')
            value_ = self.gds_validate_string(value_, node, 'PrintsPerPage')
            self.PrintsPerPage = value_
            self.PrintsPerPage_nsprefix_ = child_.prefix
        elif nodeName_ == 'LabelPrintType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelPrintType')
            value_ = self.gds_validate_string(value_, node, 'LabelPrintType')
            self.LabelPrintType = value_
            self.LabelPrintType_nsprefix_ = child_.prefix
        elif nodeName_ == 'CN22Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CN22Type')
            value_ = self.gds_validate_string(value_, node, 'CN22Type')
            self.CN22Type = value_
            self.CN22Type_nsprefix_ = child_.prefix
        elif nodeName_ == 'CN22OtherDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CN22OtherDescription')
            value_ = self.gds_validate_string(value_, node, 'CN22OtherDescription')
            self.CN22OtherDescription = value_
            self.CN22OtherDescription_nsprefix_ = child_.prefix
        elif nodeName_ == 'FoldHereText':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FoldHereText')
            value_ = self.gds_validate_string(value_, node, 'FoldHereText')
            self.FoldHereText = value_
            self.FoldHereText_nsprefix_ = child_.prefix
        elif nodeName_ == 'CN22Content':
            obj_ = CN22ContentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CN22Content.append(obj_)
            obj_.original_tagname_ = 'CN22Content'
# end class CN22FormType


class CN22ContentType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CN22ContentQuantity=None, CN22ContentDescription=None, CN22ContentWeight=None, CN22ContentTotalValue=None, CN22ContentCurrencyCode=None, CN22ContentCountryOfOrigin=None, CN22ContentTariffNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CN22ContentQuantity = CN22ContentQuantity
        self.CN22ContentQuantity_nsprefix_ = None
        self.CN22ContentDescription = CN22ContentDescription
        self.CN22ContentDescription_nsprefix_ = None
        self.CN22ContentWeight = CN22ContentWeight
        self.CN22ContentWeight_nsprefix_ = None
        self.CN22ContentTotalValue = CN22ContentTotalValue
        self.CN22ContentTotalValue_nsprefix_ = None
        self.CN22ContentCurrencyCode = CN22ContentCurrencyCode
        self.CN22ContentCurrencyCode_nsprefix_ = None
        self.CN22ContentCountryOfOrigin = CN22ContentCountryOfOrigin
        self.CN22ContentCountryOfOrigin_nsprefix_ = None
        self.CN22ContentTariffNumber = CN22ContentTariffNumber
        self.CN22ContentTariffNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CN22ContentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CN22ContentType.subclass:
            return CN22ContentType.subclass(*args_, **kwargs_)
        else:
            return CN22ContentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CN22ContentQuantity(self):
        return self.CN22ContentQuantity
    def set_CN22ContentQuantity(self, CN22ContentQuantity):
        self.CN22ContentQuantity = CN22ContentQuantity
    def get_CN22ContentDescription(self):
        return self.CN22ContentDescription
    def set_CN22ContentDescription(self, CN22ContentDescription):
        self.CN22ContentDescription = CN22ContentDescription
    def get_CN22ContentWeight(self):
        return self.CN22ContentWeight
    def set_CN22ContentWeight(self, CN22ContentWeight):
        self.CN22ContentWeight = CN22ContentWeight
    def get_CN22ContentTotalValue(self):
        return self.CN22ContentTotalValue
    def set_CN22ContentTotalValue(self, CN22ContentTotalValue):
        self.CN22ContentTotalValue = CN22ContentTotalValue
    def get_CN22ContentCurrencyCode(self):
        return self.CN22ContentCurrencyCode
    def set_CN22ContentCurrencyCode(self, CN22ContentCurrencyCode):
        self.CN22ContentCurrencyCode = CN22ContentCurrencyCode
    def get_CN22ContentCountryOfOrigin(self):
        return self.CN22ContentCountryOfOrigin
    def set_CN22ContentCountryOfOrigin(self, CN22ContentCountryOfOrigin):
        self.CN22ContentCountryOfOrigin = CN22ContentCountryOfOrigin
    def get_CN22ContentTariffNumber(self):
        return self.CN22ContentTariffNumber
    def set_CN22ContentTariffNumber(self, CN22ContentTariffNumber):
        self.CN22ContentTariffNumber = CN22ContentTariffNumber
    def hasContent_(self):
        if (
            self.CN22ContentQuantity is not None or
            self.CN22ContentDescription is not None or
            self.CN22ContentWeight is not None or
            self.CN22ContentTotalValue is not None or
            self.CN22ContentCurrencyCode is not None or
            self.CN22ContentCountryOfOrigin is not None or
            self.CN22ContentTariffNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='CN22ContentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CN22ContentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CN22ContentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CN22ContentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CN22ContentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='CN22ContentType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='CN22ContentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CN22ContentQuantity is not None:
            namespaceprefix_ = self.CN22ContentQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.CN22ContentQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCN22ContentQuantity>%s</%sCN22ContentQuantity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CN22ContentQuantity), input_name='CN22ContentQuantity')), namespaceprefix_ , eol_))
        if self.CN22ContentDescription is not None:
            namespaceprefix_ = self.CN22ContentDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.CN22ContentDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCN22ContentDescription>%s</%sCN22ContentDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CN22ContentDescription), input_name='CN22ContentDescription')), namespaceprefix_ , eol_))
        if self.CN22ContentWeight is not None:
            namespaceprefix_ = self.CN22ContentWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.CN22ContentWeight_nsprefix_) else ''
            self.CN22ContentWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CN22ContentWeight', pretty_print=pretty_print)
        if self.CN22ContentTotalValue is not None:
            namespaceprefix_ = self.CN22ContentTotalValue_nsprefix_ + ':' if (UseCapturedNS_ and self.CN22ContentTotalValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCN22ContentTotalValue>%s</%sCN22ContentTotalValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CN22ContentTotalValue), input_name='CN22ContentTotalValue')), namespaceprefix_ , eol_))
        if self.CN22ContentCurrencyCode is not None:
            namespaceprefix_ = self.CN22ContentCurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CN22ContentCurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCN22ContentCurrencyCode>%s</%sCN22ContentCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CN22ContentCurrencyCode), input_name='CN22ContentCurrencyCode')), namespaceprefix_ , eol_))
        if self.CN22ContentCountryOfOrigin is not None:
            namespaceprefix_ = self.CN22ContentCountryOfOrigin_nsprefix_ + ':' if (UseCapturedNS_ and self.CN22ContentCountryOfOrigin_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCN22ContentCountryOfOrigin>%s</%sCN22ContentCountryOfOrigin>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CN22ContentCountryOfOrigin), input_name='CN22ContentCountryOfOrigin')), namespaceprefix_ , eol_))
        if self.CN22ContentTariffNumber is not None:
            namespaceprefix_ = self.CN22ContentTariffNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.CN22ContentTariffNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCN22ContentTariffNumber>%s</%sCN22ContentTariffNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CN22ContentTariffNumber), input_name='CN22ContentTariffNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CN22ContentQuantity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CN22ContentQuantity')
            value_ = self.gds_validate_string(value_, node, 'CN22ContentQuantity')
            self.CN22ContentQuantity = value_
            self.CN22ContentQuantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'CN22ContentDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CN22ContentDescription')
            value_ = self.gds_validate_string(value_, node, 'CN22ContentDescription')
            self.CN22ContentDescription = value_
            self.CN22ContentDescription_nsprefix_ = child_.prefix
        elif nodeName_ == 'CN22ContentWeight':
            obj_ = ProductWeightType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CN22ContentWeight = obj_
            obj_.original_tagname_ = 'CN22ContentWeight'
        elif nodeName_ == 'CN22ContentTotalValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CN22ContentTotalValue')
            value_ = self.gds_validate_string(value_, node, 'CN22ContentTotalValue')
            self.CN22ContentTotalValue = value_
            self.CN22ContentTotalValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'CN22ContentCurrencyCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CN22ContentCurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'CN22ContentCurrencyCode')
            self.CN22ContentCurrencyCode = value_
            self.CN22ContentCurrencyCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'CN22ContentCountryOfOrigin':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CN22ContentCountryOfOrigin')
            value_ = self.gds_validate_string(value_, node, 'CN22ContentCountryOfOrigin')
            self.CN22ContentCountryOfOrigin = value_
            self.CN22ContentCountryOfOrigin_nsprefix_ = child_.prefix
        elif nodeName_ == 'CN22ContentTariffNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CN22ContentTariffNumber')
            value_ = self.gds_validate_string(value_, node, 'CN22ContentTariffNumber')
            self.CN22ContentTariffNumber = value_
            self.CN22ContentTariffNumber_nsprefix_ = child_.prefix
# end class CN22ContentType


class ContactType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ForwardAgent=None, UltimateConsignee=None, IntermediateConsignee=None, Producer=None, SoldTo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ForwardAgent = ForwardAgent
        self.ForwardAgent_nsprefix_ = None
        self.UltimateConsignee = UltimateConsignee
        self.UltimateConsignee_nsprefix_ = None
        self.IntermediateConsignee = IntermediateConsignee
        self.IntermediateConsignee_nsprefix_ = None
        self.Producer = Producer
        self.Producer_nsprefix_ = None
        self.SoldTo = SoldTo
        self.SoldTo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType.subclass:
            return ContactType.subclass(*args_, **kwargs_)
        else:
            return ContactType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ForwardAgent(self):
        return self.ForwardAgent
    def set_ForwardAgent(self, ForwardAgent):
        self.ForwardAgent = ForwardAgent
    def get_UltimateConsignee(self):
        return self.UltimateConsignee
    def set_UltimateConsignee(self, UltimateConsignee):
        self.UltimateConsignee = UltimateConsignee
    def get_IntermediateConsignee(self):
        return self.IntermediateConsignee
    def set_IntermediateConsignee(self, IntermediateConsignee):
        self.IntermediateConsignee = IntermediateConsignee
    def get_Producer(self):
        return self.Producer
    def set_Producer(self, Producer):
        self.Producer = Producer
    def get_SoldTo(self):
        return self.SoldTo
    def set_SoldTo(self, SoldTo):
        self.SoldTo = SoldTo
    def hasContent_(self):
        if (
            self.ForwardAgent is not None or
            self.UltimateConsignee is not None or
            self.IntermediateConsignee is not None or
            self.Producer is not None or
            self.SoldTo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ContactType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContactType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContactType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContactType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContactType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='ContactType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ContactType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ForwardAgent is not None:
            namespaceprefix_ = self.ForwardAgent_nsprefix_ + ':' if (UseCapturedNS_ and self.ForwardAgent_nsprefix_) else ''
            self.ForwardAgent.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ForwardAgent', pretty_print=pretty_print)
        if self.UltimateConsignee is not None:
            namespaceprefix_ = self.UltimateConsignee_nsprefix_ + ':' if (UseCapturedNS_ and self.UltimateConsignee_nsprefix_) else ''
            self.UltimateConsignee.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UltimateConsignee', pretty_print=pretty_print)
        if self.IntermediateConsignee is not None:
            namespaceprefix_ = self.IntermediateConsignee_nsprefix_ + ':' if (UseCapturedNS_ and self.IntermediateConsignee_nsprefix_) else ''
            self.IntermediateConsignee.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IntermediateConsignee', pretty_print=pretty_print)
        if self.Producer is not None:
            namespaceprefix_ = self.Producer_nsprefix_ + ':' if (UseCapturedNS_ and self.Producer_nsprefix_) else ''
            self.Producer.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Producer', pretty_print=pretty_print)
        if self.SoldTo is not None:
            namespaceprefix_ = self.SoldTo_nsprefix_ + ':' if (UseCapturedNS_ and self.SoldTo_nsprefix_) else ''
            self.SoldTo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SoldTo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ForwardAgent':
            obj_ = ForwardAgentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ForwardAgent = obj_
            obj_.original_tagname_ = 'ForwardAgent'
        elif nodeName_ == 'UltimateConsignee':
            obj_ = UltimateConsigneeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UltimateConsignee = obj_
            obj_.original_tagname_ = 'UltimateConsignee'
        elif nodeName_ == 'IntermediateConsignee':
            obj_ = IntermediateConsigneeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.IntermediateConsignee = obj_
            obj_.original_tagname_ = 'IntermediateConsignee'
        elif nodeName_ == 'Producer':
            obj_ = ProducerType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Producer = obj_
            obj_.original_tagname_ = 'Producer'
        elif nodeName_ == 'SoldTo':
            obj_ = SoldToType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SoldTo = obj_
            obj_.original_tagname_ = 'SoldTo'
# end class ContactType


class ForwardAgentType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CompanyName=None, TaxIdentificationNumber=None, Address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CompanyName = CompanyName
        self.CompanyName_nsprefix_ = None
        self.TaxIdentificationNumber = TaxIdentificationNumber
        self.TaxIdentificationNumber_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ForwardAgentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ForwardAgentType.subclass:
            return ForwardAgentType.subclass(*args_, **kwargs_)
        else:
            return ForwardAgentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CompanyName(self):
        return self.CompanyName
    def set_CompanyName(self, CompanyName):
        self.CompanyName = CompanyName
    def get_TaxIdentificationNumber(self):
        return self.TaxIdentificationNumber
    def set_TaxIdentificationNumber(self, TaxIdentificationNumber):
        self.TaxIdentificationNumber = TaxIdentificationNumber
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def hasContent_(self):
        if (
            self.CompanyName is not None or
            self.TaxIdentificationNumber is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ForwardAgentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ForwardAgentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ForwardAgentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ForwardAgentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ForwardAgentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='ForwardAgentType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ForwardAgentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CompanyName is not None:
            namespaceprefix_ = self.CompanyName_nsprefix_ + ':' if (UseCapturedNS_ and self.CompanyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompanyName>%s</%sCompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CompanyName), input_name='CompanyName')), namespaceprefix_ , eol_))
        if self.TaxIdentificationNumber is not None:
            namespaceprefix_ = self.TaxIdentificationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TaxIdentificationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxIdentificationNumber>%s</%sTaxIdentificationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TaxIdentificationNumber), input_name='TaxIdentificationNumber')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CompanyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CompanyName')
            value_ = self.gds_validate_string(value_, node, 'CompanyName')
            self.CompanyName = value_
            self.CompanyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'TaxIdentificationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TaxIdentificationNumber')
            value_ = self.gds_validate_string(value_, node, 'TaxIdentificationNumber')
            self.TaxIdentificationNumber = value_
            self.TaxIdentificationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class ForwardAgentType


class AddressType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AddressLine=None, City=None, StateProvinceCode=None, Town=None, PostalCode=None, CountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if AddressLine is None:
            self.AddressLine = []
        else:
            self.AddressLine = AddressLine
        self.AddressLine_nsprefix_ = None
        self.City = City
        self.City_nsprefix_ = None
        self.StateProvinceCode = StateProvinceCode
        self.StateProvinceCode_nsprefix_ = None
        self.Town = Town
        self.Town_nsprefix_ = None
        self.PostalCode = PostalCode
        self.PostalCode_nsprefix_ = None
        self.CountryCode = CountryCode
        self.CountryCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType.subclass:
            return AddressType.subclass(*args_, **kwargs_)
        else:
            return AddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AddressLine(self):
        return self.AddressLine
    def set_AddressLine(self, AddressLine):
        self.AddressLine = AddressLine
    def add_AddressLine(self, value):
        self.AddressLine.append(value)
    def insert_AddressLine_at(self, index, value):
        self.AddressLine.insert(index, value)
    def replace_AddressLine_at(self, index, value):
        self.AddressLine[index] = value
    def get_City(self):
        return self.City
    def set_City(self, City):
        self.City = City
    def get_StateProvinceCode(self):
        return self.StateProvinceCode
    def set_StateProvinceCode(self, StateProvinceCode):
        self.StateProvinceCode = StateProvinceCode
    def get_Town(self):
        return self.Town
    def set_Town(self, Town):
        self.Town = Town
    def get_PostalCode(self):
        return self.PostalCode
    def set_PostalCode(self, PostalCode):
        self.PostalCode = PostalCode
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def hasContent_(self):
        if (
            self.AddressLine or
            self.City is not None or
            self.StateProvinceCode is not None or
            self.Town is not None or
            self.PostalCode is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='AddressType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AddressType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='AddressType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='AddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AddressLine_ in self.AddressLine:
            namespaceprefix_ = self.AddressLine_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressLine_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressLine>%s</%sAddressLine>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(AddressLine_), input_name='AddressLine')), namespaceprefix_ , eol_))
        if self.City is not None:
            namespaceprefix_ = self.City_nsprefix_ + ':' if (UseCapturedNS_ and self.City_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCity>%s</%sCity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), namespaceprefix_ , eol_))
        if self.StateProvinceCode is not None:
            namespaceprefix_ = self.StateProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.StateProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStateProvinceCode>%s</%sStateProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StateProvinceCode), input_name='StateProvinceCode')), namespaceprefix_ , eol_))
        if self.Town is not None:
            namespaceprefix_ = self.Town_nsprefix_ + ':' if (UseCapturedNS_ and self.Town_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTown>%s</%sTown>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Town), input_name='Town')), namespaceprefix_ , eol_))
        if self.PostalCode is not None:
            namespaceprefix_ = self.PostalCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PostalCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AddressLine':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AddressLine')
            value_ = self.gds_validate_string(value_, node, 'AddressLine')
            self.AddressLine.append(value_)
            self.AddressLine_nsprefix_ = child_.prefix
        elif nodeName_ == 'City':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'City')
            value_ = self.gds_validate_string(value_, node, 'City')
            self.City = value_
            self.City_nsprefix_ = child_.prefix
        elif nodeName_ == 'StateProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StateProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'StateProvinceCode')
            self.StateProvinceCode = value_
            self.StateProvinceCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'Town':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Town')
            value_ = self.gds_validate_string(value_, node, 'Town')
            self.Town = value_
            self.Town_nsprefix_ = child_.prefix
        elif nodeName_ == 'PostalCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PostalCode')
            value_ = self.gds_validate_string(value_, node, 'PostalCode')
            self.PostalCode = value_
            self.PostalCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
# end class AddressType


class UltimateConsigneeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CompanyName=None, Address=None, UltimateConsigneeType_member=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CompanyName = CompanyName
        self.CompanyName_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
        self.UltimateConsigneeType = UltimateConsigneeType_member
        self.UltimateConsigneeType_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UltimateConsigneeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UltimateConsigneeType.subclass:
            return UltimateConsigneeType.subclass(*args_, **kwargs_)
        else:
            return UltimateConsigneeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CompanyName(self):
        return self.CompanyName
    def set_CompanyName(self, CompanyName):
        self.CompanyName = CompanyName
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def get_UltimateConsigneeType(self):
        return self.UltimateConsigneeType
    def set_UltimateConsigneeType(self, UltimateConsigneeType):
        self.UltimateConsigneeType = UltimateConsigneeType
    def hasContent_(self):
        if (
            self.CompanyName is not None or
            self.Address is not None or
            self.UltimateConsigneeType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='UltimateConsigneeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UltimateConsigneeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UltimateConsigneeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UltimateConsigneeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UltimateConsigneeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='UltimateConsigneeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='UltimateConsigneeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CompanyName is not None:
            namespaceprefix_ = self.CompanyName_nsprefix_ + ':' if (UseCapturedNS_ and self.CompanyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompanyName>%s</%sCompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CompanyName), input_name='CompanyName')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
        if self.UltimateConsigneeType is not None:
            namespaceprefix_ = self.UltimateConsigneeType_nsprefix_ + ':' if (UseCapturedNS_ and self.UltimateConsigneeType_nsprefix_) else ''
            self.UltimateConsigneeType.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UltimateConsigneeType', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CompanyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CompanyName')
            value_ = self.gds_validate_string(value_, node, 'CompanyName')
            self.CompanyName = value_
            self.CompanyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'UltimateConsigneeType':
            obj_ = UltimateConsigneeTypeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UltimateConsigneeType = obj_
            obj_.original_tagname_ = 'UltimateConsigneeType'
# end class UltimateConsigneeType


class IntermediateConsigneeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CompanyName=None, Address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CompanyName = CompanyName
        self.CompanyName_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IntermediateConsigneeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IntermediateConsigneeType.subclass:
            return IntermediateConsigneeType.subclass(*args_, **kwargs_)
        else:
            return IntermediateConsigneeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CompanyName(self):
        return self.CompanyName
    def set_CompanyName(self, CompanyName):
        self.CompanyName = CompanyName
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def hasContent_(self):
        if (
            self.CompanyName is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='IntermediateConsigneeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IntermediateConsigneeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'IntermediateConsigneeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IntermediateConsigneeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IntermediateConsigneeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='IntermediateConsigneeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='IntermediateConsigneeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CompanyName is not None:
            namespaceprefix_ = self.CompanyName_nsprefix_ + ':' if (UseCapturedNS_ and self.CompanyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompanyName>%s</%sCompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CompanyName), input_name='CompanyName')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CompanyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CompanyName')
            value_ = self.gds_validate_string(value_, node, 'CompanyName')
            self.CompanyName = value_
            self.CompanyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class IntermediateConsigneeType


class ProducerType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Option=None, CompanyName=None, TaxIdentificationNumber=None, Address=None, AttentionName=None, Phone=None, EMailAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Option = Option
        self.Option_nsprefix_ = None
        self.CompanyName = CompanyName
        self.CompanyName_nsprefix_ = None
        self.TaxIdentificationNumber = TaxIdentificationNumber
        self.TaxIdentificationNumber_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
        self.AttentionName = AttentionName
        self.AttentionName_nsprefix_ = None
        self.Phone = Phone
        self.Phone_nsprefix_ = None
        self.EMailAddress = EMailAddress
        self.EMailAddress_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProducerType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProducerType.subclass:
            return ProducerType.subclass(*args_, **kwargs_)
        else:
            return ProducerType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Option(self):
        return self.Option
    def set_Option(self, Option):
        self.Option = Option
    def get_CompanyName(self):
        return self.CompanyName
    def set_CompanyName(self, CompanyName):
        self.CompanyName = CompanyName
    def get_TaxIdentificationNumber(self):
        return self.TaxIdentificationNumber
    def set_TaxIdentificationNumber(self, TaxIdentificationNumber):
        self.TaxIdentificationNumber = TaxIdentificationNumber
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def get_AttentionName(self):
        return self.AttentionName
    def set_AttentionName(self, AttentionName):
        self.AttentionName = AttentionName
    def get_Phone(self):
        return self.Phone
    def set_Phone(self, Phone):
        self.Phone = Phone
    def get_EMailAddress(self):
        return self.EMailAddress
    def set_EMailAddress(self, EMailAddress):
        self.EMailAddress = EMailAddress
    def hasContent_(self):
        if (
            self.Option is not None or
            self.CompanyName is not None or
            self.TaxIdentificationNumber is not None or
            self.Address is not None or
            self.AttentionName is not None or
            self.Phone is not None or
            self.EMailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ProducerType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProducerType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProducerType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProducerType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProducerType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='ProducerType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ProducerType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Option is not None:
            namespaceprefix_ = self.Option_nsprefix_ + ':' if (UseCapturedNS_ and self.Option_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOption>%s</%sOption>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Option), input_name='Option')), namespaceprefix_ , eol_))
        if self.CompanyName is not None:
            namespaceprefix_ = self.CompanyName_nsprefix_ + ':' if (UseCapturedNS_ and self.CompanyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompanyName>%s</%sCompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CompanyName), input_name='CompanyName')), namespaceprefix_ , eol_))
        if self.TaxIdentificationNumber is not None:
            namespaceprefix_ = self.TaxIdentificationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TaxIdentificationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxIdentificationNumber>%s</%sTaxIdentificationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TaxIdentificationNumber), input_name='TaxIdentificationNumber')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
        if self.AttentionName is not None:
            namespaceprefix_ = self.AttentionName_nsprefix_ + ':' if (UseCapturedNS_ and self.AttentionName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttentionName>%s</%sAttentionName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), namespaceprefix_ , eol_))
        if self.Phone is not None:
            namespaceprefix_ = self.Phone_nsprefix_ + ':' if (UseCapturedNS_ and self.Phone_nsprefix_) else ''
            self.Phone.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Phone', pretty_print=pretty_print)
        if self.EMailAddress is not None:
            namespaceprefix_ = self.EMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Option':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Option')
            value_ = self.gds_validate_string(value_, node, 'Option')
            self.Option = value_
            self.Option_nsprefix_ = child_.prefix
        elif nodeName_ == 'CompanyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CompanyName')
            value_ = self.gds_validate_string(value_, node, 'CompanyName')
            self.CompanyName = value_
            self.CompanyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'TaxIdentificationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TaxIdentificationNumber')
            value_ = self.gds_validate_string(value_, node, 'TaxIdentificationNumber')
            self.TaxIdentificationNumber = value_
            self.TaxIdentificationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'AttentionName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AttentionName')
            value_ = self.gds_validate_string(value_, node, 'AttentionName')
            self.AttentionName = value_
            self.AttentionName_nsprefix_ = child_.prefix
        elif nodeName_ == 'Phone':
            obj_ = PhoneType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Phone = obj_
            obj_.original_tagname_ = 'Phone'
        elif nodeName_ == 'EMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EMailAddress')
            value_ = self.gds_validate_string(value_, node, 'EMailAddress')
            self.EMailAddress = value_
            self.EMailAddress_nsprefix_ = child_.prefix
# end class ProducerType


class ProductType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Description=None, Unit=None, CommodityCode=None, PartNumber=None, OriginCountryCode=None, JointProductionIndicator=None, NetCostCode=None, NetCostDateRange=None, PreferenceCriteria=None, ProducerInfo=None, MarksAndNumbers=None, NumberOfPackagesPerCommodity=None, ProductWeight=None, VehicleID=None, ScheduleB=None, ExportType=None, SEDTotalValue=None, ExcludeFromForm=None, ProductCurrencyCode=None, PackingListInfo=None, EEIInformation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Description is None:
            self.Description = []
        else:
            self.Description = Description
        self.Description_nsprefix_ = None
        self.Unit = Unit
        self.Unit_nsprefix_ = None
        self.CommodityCode = CommodityCode
        self.CommodityCode_nsprefix_ = None
        self.PartNumber = PartNumber
        self.PartNumber_nsprefix_ = None
        self.OriginCountryCode = OriginCountryCode
        self.OriginCountryCode_nsprefix_ = None
        self.JointProductionIndicator = JointProductionIndicator
        self.JointProductionIndicator_nsprefix_ = None
        self.NetCostCode = NetCostCode
        self.NetCostCode_nsprefix_ = None
        self.NetCostDateRange = NetCostDateRange
        self.NetCostDateRange_nsprefix_ = None
        self.PreferenceCriteria = PreferenceCriteria
        self.PreferenceCriteria_nsprefix_ = None
        self.ProducerInfo = ProducerInfo
        self.ProducerInfo_nsprefix_ = None
        self.MarksAndNumbers = MarksAndNumbers
        self.MarksAndNumbers_nsprefix_ = None
        self.NumberOfPackagesPerCommodity = NumberOfPackagesPerCommodity
        self.NumberOfPackagesPerCommodity_nsprefix_ = None
        self.ProductWeight = ProductWeight
        self.ProductWeight_nsprefix_ = None
        self.VehicleID = VehicleID
        self.VehicleID_nsprefix_ = None
        self.ScheduleB = ScheduleB
        self.ScheduleB_nsprefix_ = None
        self.ExportType = ExportType
        self.ExportType_nsprefix_ = None
        self.SEDTotalValue = SEDTotalValue
        self.SEDTotalValue_nsprefix_ = None
        self.ExcludeFromForm = ExcludeFromForm
        self.ExcludeFromForm_nsprefix_ = None
        self.ProductCurrencyCode = ProductCurrencyCode
        self.ProductCurrencyCode_nsprefix_ = None
        self.PackingListInfo = PackingListInfo
        self.PackingListInfo_nsprefix_ = None
        self.EEIInformation = EEIInformation
        self.EEIInformation_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductType.subclass:
            return ProductType.subclass(*args_, **kwargs_)
        else:
            return ProductType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def add_Description(self, value):
        self.Description.append(value)
    def insert_Description_at(self, index, value):
        self.Description.insert(index, value)
    def replace_Description_at(self, index, value):
        self.Description[index] = value
    def get_Unit(self):
        return self.Unit
    def set_Unit(self, Unit):
        self.Unit = Unit
    def get_CommodityCode(self):
        return self.CommodityCode
    def set_CommodityCode(self, CommodityCode):
        self.CommodityCode = CommodityCode
    def get_PartNumber(self):
        return self.PartNumber
    def set_PartNumber(self, PartNumber):
        self.PartNumber = PartNumber
    def get_OriginCountryCode(self):
        return self.OriginCountryCode
    def set_OriginCountryCode(self, OriginCountryCode):
        self.OriginCountryCode = OriginCountryCode
    def get_JointProductionIndicator(self):
        return self.JointProductionIndicator
    def set_JointProductionIndicator(self, JointProductionIndicator):
        self.JointProductionIndicator = JointProductionIndicator
    def get_NetCostCode(self):
        return self.NetCostCode
    def set_NetCostCode(self, NetCostCode):
        self.NetCostCode = NetCostCode
    def get_NetCostDateRange(self):
        return self.NetCostDateRange
    def set_NetCostDateRange(self, NetCostDateRange):
        self.NetCostDateRange = NetCostDateRange
    def get_PreferenceCriteria(self):
        return self.PreferenceCriteria
    def set_PreferenceCriteria(self, PreferenceCriteria):
        self.PreferenceCriteria = PreferenceCriteria
    def get_ProducerInfo(self):
        return self.ProducerInfo
    def set_ProducerInfo(self, ProducerInfo):
        self.ProducerInfo = ProducerInfo
    def get_MarksAndNumbers(self):
        return self.MarksAndNumbers
    def set_MarksAndNumbers(self, MarksAndNumbers):
        self.MarksAndNumbers = MarksAndNumbers
    def get_NumberOfPackagesPerCommodity(self):
        return self.NumberOfPackagesPerCommodity
    def set_NumberOfPackagesPerCommodity(self, NumberOfPackagesPerCommodity):
        self.NumberOfPackagesPerCommodity = NumberOfPackagesPerCommodity
    def get_ProductWeight(self):
        return self.ProductWeight
    def set_ProductWeight(self, ProductWeight):
        self.ProductWeight = ProductWeight
    def get_VehicleID(self):
        return self.VehicleID
    def set_VehicleID(self, VehicleID):
        self.VehicleID = VehicleID
    def get_ScheduleB(self):
        return self.ScheduleB
    def set_ScheduleB(self, ScheduleB):
        self.ScheduleB = ScheduleB
    def get_ExportType(self):
        return self.ExportType
    def set_ExportType(self, ExportType):
        self.ExportType = ExportType
    def get_SEDTotalValue(self):
        return self.SEDTotalValue
    def set_SEDTotalValue(self, SEDTotalValue):
        self.SEDTotalValue = SEDTotalValue
    def get_ExcludeFromForm(self):
        return self.ExcludeFromForm
    def set_ExcludeFromForm(self, ExcludeFromForm):
        self.ExcludeFromForm = ExcludeFromForm
    def get_ProductCurrencyCode(self):
        return self.ProductCurrencyCode
    def set_ProductCurrencyCode(self, ProductCurrencyCode):
        self.ProductCurrencyCode = ProductCurrencyCode
    def get_PackingListInfo(self):
        return self.PackingListInfo
    def set_PackingListInfo(self, PackingListInfo):
        self.PackingListInfo = PackingListInfo
    def get_EEIInformation(self):
        return self.EEIInformation
    def set_EEIInformation(self, EEIInformation):
        self.EEIInformation = EEIInformation
    def hasContent_(self):
        if (
            self.Description or
            self.Unit is not None or
            self.CommodityCode is not None or
            self.PartNumber is not None or
            self.OriginCountryCode is not None or
            self.JointProductionIndicator is not None or
            self.NetCostCode is not None or
            self.NetCostDateRange is not None or
            self.PreferenceCriteria is not None or
            self.ProducerInfo is not None or
            self.MarksAndNumbers is not None or
            self.NumberOfPackagesPerCommodity is not None or
            self.ProductWeight is not None or
            self.VehicleID is not None or
            self.ScheduleB is not None or
            self.ExportType is not None or
            self.SEDTotalValue is not None or
            self.ExcludeFromForm is not None or
            self.ProductCurrencyCode is not None or
            self.PackingListInfo is not None or
            self.EEIInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ProductType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='ProductType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ProductType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Description_ in self.Description:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Description_), input_name='Description')), namespaceprefix_ , eol_))
        if self.Unit is not None:
            namespaceprefix_ = self.Unit_nsprefix_ + ':' if (UseCapturedNS_ and self.Unit_nsprefix_) else ''
            self.Unit.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Unit', pretty_print=pretty_print)
        if self.CommodityCode is not None:
            namespaceprefix_ = self.CommodityCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CommodityCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommodityCode>%s</%sCommodityCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CommodityCode), input_name='CommodityCode')), namespaceprefix_ , eol_))
        if self.PartNumber is not None:
            namespaceprefix_ = self.PartNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PartNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPartNumber>%s</%sPartNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PartNumber), input_name='PartNumber')), namespaceprefix_ , eol_))
        if self.OriginCountryCode is not None:
            namespaceprefix_ = self.OriginCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginCountryCode>%s</%sOriginCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OriginCountryCode), input_name='OriginCountryCode')), namespaceprefix_ , eol_))
        if self.JointProductionIndicator is not None:
            namespaceprefix_ = self.JointProductionIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.JointProductionIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJointProductionIndicator>%s</%sJointProductionIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.JointProductionIndicator), input_name='JointProductionIndicator')), namespaceprefix_ , eol_))
        if self.NetCostCode is not None:
            namespaceprefix_ = self.NetCostCode_nsprefix_ + ':' if (UseCapturedNS_ and self.NetCostCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNetCostCode>%s</%sNetCostCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NetCostCode), input_name='NetCostCode')), namespaceprefix_ , eol_))
        if self.NetCostDateRange is not None:
            namespaceprefix_ = self.NetCostDateRange_nsprefix_ + ':' if (UseCapturedNS_ and self.NetCostDateRange_nsprefix_) else ''
            self.NetCostDateRange.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NetCostDateRange', pretty_print=pretty_print)
        if self.PreferenceCriteria is not None:
            namespaceprefix_ = self.PreferenceCriteria_nsprefix_ + ':' if (UseCapturedNS_ and self.PreferenceCriteria_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPreferenceCriteria>%s</%sPreferenceCriteria>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PreferenceCriteria), input_name='PreferenceCriteria')), namespaceprefix_ , eol_))
        if self.ProducerInfo is not None:
            namespaceprefix_ = self.ProducerInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.ProducerInfo_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProducerInfo>%s</%sProducerInfo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProducerInfo), input_name='ProducerInfo')), namespaceprefix_ , eol_))
        if self.MarksAndNumbers is not None:
            namespaceprefix_ = self.MarksAndNumbers_nsprefix_ + ':' if (UseCapturedNS_ and self.MarksAndNumbers_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarksAndNumbers>%s</%sMarksAndNumbers>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarksAndNumbers), input_name='MarksAndNumbers')), namespaceprefix_ , eol_))
        if self.NumberOfPackagesPerCommodity is not None:
            namespaceprefix_ = self.NumberOfPackagesPerCommodity_nsprefix_ + ':' if (UseCapturedNS_ and self.NumberOfPackagesPerCommodity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfPackagesPerCommodity>%s</%sNumberOfPackagesPerCommodity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NumberOfPackagesPerCommodity), input_name='NumberOfPackagesPerCommodity')), namespaceprefix_ , eol_))
        if self.ProductWeight is not None:
            namespaceprefix_ = self.ProductWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductWeight_nsprefix_) else ''
            self.ProductWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ProductWeight', pretty_print=pretty_print)
        if self.VehicleID is not None:
            namespaceprefix_ = self.VehicleID_nsprefix_ + ':' if (UseCapturedNS_ and self.VehicleID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVehicleID>%s</%sVehicleID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.VehicleID), input_name='VehicleID')), namespaceprefix_ , eol_))
        if self.ScheduleB is not None:
            namespaceprefix_ = self.ScheduleB_nsprefix_ + ':' if (UseCapturedNS_ and self.ScheduleB_nsprefix_) else ''
            self.ScheduleB.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ScheduleB', pretty_print=pretty_print)
        if self.ExportType is not None:
            namespaceprefix_ = self.ExportType_nsprefix_ + ':' if (UseCapturedNS_ and self.ExportType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExportType>%s</%sExportType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExportType), input_name='ExportType')), namespaceprefix_ , eol_))
        if self.SEDTotalValue is not None:
            namespaceprefix_ = self.SEDTotalValue_nsprefix_ + ':' if (UseCapturedNS_ and self.SEDTotalValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSEDTotalValue>%s</%sSEDTotalValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SEDTotalValue), input_name='SEDTotalValue')), namespaceprefix_ , eol_))
        if self.ExcludeFromForm is not None:
            namespaceprefix_ = self.ExcludeFromForm_nsprefix_ + ':' if (UseCapturedNS_ and self.ExcludeFromForm_nsprefix_) else ''
            self.ExcludeFromForm.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExcludeFromForm', pretty_print=pretty_print)
        if self.ProductCurrencyCode is not None:
            namespaceprefix_ = self.ProductCurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductCurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductCurrencyCode>%s</%sProductCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProductCurrencyCode), input_name='ProductCurrencyCode')), namespaceprefix_ , eol_))
        if self.PackingListInfo is not None:
            namespaceprefix_ = self.PackingListInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.PackingListInfo_nsprefix_) else ''
            self.PackingListInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackingListInfo', pretty_print=pretty_print)
        if self.EEIInformation is not None:
            namespaceprefix_ = self.EEIInformation_nsprefix_ + ':' if (UseCapturedNS_ and self.EEIInformation_nsprefix_) else ''
            self.EEIInformation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EEIInformation', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description.append(value_)
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'Unit':
            obj_ = UnitType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Unit = obj_
            obj_.original_tagname_ = 'Unit'
        elif nodeName_ == 'CommodityCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CommodityCode')
            value_ = self.gds_validate_string(value_, node, 'CommodityCode')
            self.CommodityCode = value_
            self.CommodityCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'PartNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PartNumber')
            value_ = self.gds_validate_string(value_, node, 'PartNumber')
            self.PartNumber = value_
            self.PartNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'OriginCountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OriginCountryCode')
            value_ = self.gds_validate_string(value_, node, 'OriginCountryCode')
            self.OriginCountryCode = value_
            self.OriginCountryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'JointProductionIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'JointProductionIndicator')
            value_ = self.gds_validate_string(value_, node, 'JointProductionIndicator')
            self.JointProductionIndicator = value_
            self.JointProductionIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'NetCostCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NetCostCode')
            value_ = self.gds_validate_string(value_, node, 'NetCostCode')
            self.NetCostCode = value_
            self.NetCostCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'NetCostDateRange':
            obj_ = NetCostDateType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NetCostDateRange = obj_
            obj_.original_tagname_ = 'NetCostDateRange'
        elif nodeName_ == 'PreferenceCriteria':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PreferenceCriteria')
            value_ = self.gds_validate_string(value_, node, 'PreferenceCriteria')
            self.PreferenceCriteria = value_
            self.PreferenceCriteria_nsprefix_ = child_.prefix
        elif nodeName_ == 'ProducerInfo':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProducerInfo')
            value_ = self.gds_validate_string(value_, node, 'ProducerInfo')
            self.ProducerInfo = value_
            self.ProducerInfo_nsprefix_ = child_.prefix
        elif nodeName_ == 'MarksAndNumbers':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MarksAndNumbers')
            value_ = self.gds_validate_string(value_, node, 'MarksAndNumbers')
            self.MarksAndNumbers = value_
            self.MarksAndNumbers_nsprefix_ = child_.prefix
        elif nodeName_ == 'NumberOfPackagesPerCommodity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NumberOfPackagesPerCommodity')
            value_ = self.gds_validate_string(value_, node, 'NumberOfPackagesPerCommodity')
            self.NumberOfPackagesPerCommodity = value_
            self.NumberOfPackagesPerCommodity_nsprefix_ = child_.prefix
        elif nodeName_ == 'ProductWeight':
            obj_ = ProductWeightType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ProductWeight = obj_
            obj_.original_tagname_ = 'ProductWeight'
        elif nodeName_ == 'VehicleID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'VehicleID')
            value_ = self.gds_validate_string(value_, node, 'VehicleID')
            self.VehicleID = value_
            self.VehicleID_nsprefix_ = child_.prefix
        elif nodeName_ == 'ScheduleB':
            obj_ = ScheduleBType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ScheduleB = obj_
            obj_.original_tagname_ = 'ScheduleB'
        elif nodeName_ == 'ExportType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExportType')
            value_ = self.gds_validate_string(value_, node, 'ExportType')
            self.ExportType = value_
            self.ExportType_nsprefix_ = child_.prefix
        elif nodeName_ == 'SEDTotalValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SEDTotalValue')
            value_ = self.gds_validate_string(value_, node, 'SEDTotalValue')
            self.SEDTotalValue = value_
            self.SEDTotalValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'ExcludeFromForm':
            obj_ = ExcludeFromFormType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExcludeFromForm = obj_
            obj_.original_tagname_ = 'ExcludeFromForm'
        elif nodeName_ == 'ProductCurrencyCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProductCurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'ProductCurrencyCode')
            self.ProductCurrencyCode = value_
            self.ProductCurrencyCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'PackingListInfo':
            obj_ = PackingListInfoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackingListInfo = obj_
            obj_.original_tagname_ = 'PackingListInfo'
        elif nodeName_ == 'EEIInformation':
            obj_ = EEIInformationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EEIInformation = obj_
            obj_.original_tagname_ = 'EEIInformation'
# end class ProductType


class ExcludeFromFormType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FormType=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if FormType is None:
            self.FormType = []
        else:
            self.FormType = FormType
        self.FormType_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExcludeFromFormType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExcludeFromFormType.subclass:
            return ExcludeFromFormType.subclass(*args_, **kwargs_)
        else:
            return ExcludeFromFormType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FormType(self):
        return self.FormType
    def set_FormType(self, FormType):
        self.FormType = FormType
    def add_FormType(self, value):
        self.FormType.append(value)
    def insert_FormType_at(self, index, value):
        self.FormType.insert(index, value)
    def replace_FormType_at(self, index, value):
        self.FormType[index] = value
    def hasContent_(self):
        if (
            self.FormType
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ExcludeFromFormType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExcludeFromFormType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ExcludeFromFormType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ExcludeFromFormType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ExcludeFromFormType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='ExcludeFromFormType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ExcludeFromFormType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for FormType_ in self.FormType:
            namespaceprefix_ = self.FormType_nsprefix_ + ':' if (UseCapturedNS_ and self.FormType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormType>%s</%sFormType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(FormType_), input_name='FormType')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FormType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FormType')
            value_ = self.gds_validate_string(value_, node, 'FormType')
            self.FormType.append(value_)
            self.FormType_nsprefix_ = child_.prefix
# end class ExcludeFromFormType


class UnitType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Number=None, UnitOfMeasurement=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Number = Number
        self.Number_nsprefix_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.UnitOfMeasurement_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UnitType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UnitType.subclass:
            return UnitType.subclass(*args_, **kwargs_)
        else:
            return UnitType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_UnitOfMeasurement(self):
        return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement):
        self.UnitOfMeasurement = UnitOfMeasurement
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def hasContent_(self):
        if (
            self.Number is not None or
            self.UnitOfMeasurement is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='UnitType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UnitType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UnitType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UnitType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UnitType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='UnitType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='UnitType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
        if self.UnitOfMeasurement is not None:
            namespaceprefix_ = self.UnitOfMeasurement_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitOfMeasurement_nsprefix_) else ''
            self.UnitOfMeasurement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = UnitOfMeasurementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
# end class UnitType


class PackingListInfoType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PackageAssociated=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if PackageAssociated is None:
            self.PackageAssociated = []
        else:
            self.PackageAssociated = PackageAssociated
        self.PackageAssociated_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackingListInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackingListInfoType.subclass:
            return PackingListInfoType.subclass(*args_, **kwargs_)
        else:
            return PackingListInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PackageAssociated(self):
        return self.PackageAssociated
    def set_PackageAssociated(self, PackageAssociated):
        self.PackageAssociated = PackageAssociated
    def add_PackageAssociated(self, value):
        self.PackageAssociated.append(value)
    def insert_PackageAssociated_at(self, index, value):
        self.PackageAssociated.insert(index, value)
    def replace_PackageAssociated_at(self, index, value):
        self.PackageAssociated[index] = value
    def hasContent_(self):
        if (
            self.PackageAssociated
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='PackingListInfoType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackingListInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackingListInfoType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackingListInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackingListInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='PackingListInfoType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='PackingListInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for PackageAssociated_ in self.PackageAssociated:
            namespaceprefix_ = self.PackageAssociated_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageAssociated_nsprefix_) else ''
            PackageAssociated_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackageAssociated', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PackageAssociated':
            obj_ = PackageAssociatedType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackageAssociated.append(obj_)
            obj_.original_tagname_ = 'PackageAssociated'
# end class PackingListInfoType


class PackageAssociatedType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PackageNumber=None, ProductAmount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PackageNumber = PackageNumber
        self.PackageNumber_nsprefix_ = None
        self.ProductAmount = ProductAmount
        self.ProductAmount_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageAssociatedType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageAssociatedType.subclass:
            return PackageAssociatedType.subclass(*args_, **kwargs_)
        else:
            return PackageAssociatedType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PackageNumber(self):
        return self.PackageNumber
    def set_PackageNumber(self, PackageNumber):
        self.PackageNumber = PackageNumber
    def get_ProductAmount(self):
        return self.ProductAmount
    def set_ProductAmount(self, ProductAmount):
        self.ProductAmount = ProductAmount
    def hasContent_(self):
        if (
            self.PackageNumber is not None or
            self.ProductAmount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='PackageAssociatedType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageAssociatedType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackageAssociatedType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackageAssociatedType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackageAssociatedType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='PackageAssociatedType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='PackageAssociatedType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackageNumber is not None:
            namespaceprefix_ = self.PackageNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackageNumber>%s</%sPackageNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PackageNumber), input_name='PackageNumber')), namespaceprefix_ , eol_))
        if self.ProductAmount is not None:
            namespaceprefix_ = self.ProductAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductAmount>%s</%sProductAmount>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProductAmount), input_name='ProductAmount')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PackageNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackageNumber')
            value_ = self.gds_validate_string(value_, node, 'PackageNumber')
            self.PackageNumber = value_
            self.PackageNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ProductAmount':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProductAmount')
            value_ = self.gds_validate_string(value_, node, 'ProductAmount')
            self.ProductAmount = value_
            self.ProductAmount_nsprefix_ = child_.prefix
# end class PackageAssociatedType


class UnitOfMeasurementType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UnitOfMeasurementType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UnitOfMeasurementType.subclass:
            return UnitOfMeasurementType.subclass(*args_, **kwargs_)
        else:
            return UnitOfMeasurementType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='UnitOfMeasurementType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UnitOfMeasurementType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UnitOfMeasurementType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UnitOfMeasurementType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UnitOfMeasurementType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='UnitOfMeasurementType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='UnitOfMeasurementType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class UnitOfMeasurementType


class NetCostDateType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, BeginDate=None, EndDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.BeginDate = BeginDate
        self.BeginDate_nsprefix_ = None
        self.EndDate = EndDate
        self.EndDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NetCostDateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NetCostDateType.subclass:
            return NetCostDateType.subclass(*args_, **kwargs_)
        else:
            return NetCostDateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_BeginDate(self):
        return self.BeginDate
    def set_BeginDate(self, BeginDate):
        self.BeginDate = BeginDate
    def get_EndDate(self):
        return self.EndDate
    def set_EndDate(self, EndDate):
        self.EndDate = EndDate
    def hasContent_(self):
        if (
            self.BeginDate is not None or
            self.EndDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='NetCostDateType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NetCostDateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NetCostDateType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NetCostDateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NetCostDateType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='NetCostDateType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='NetCostDateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BeginDate is not None:
            namespaceprefix_ = self.BeginDate_nsprefix_ + ':' if (UseCapturedNS_ and self.BeginDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBeginDate>%s</%sBeginDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BeginDate), input_name='BeginDate')), namespaceprefix_ , eol_))
        if self.EndDate is not None:
            namespaceprefix_ = self.EndDate_nsprefix_ + ':' if (UseCapturedNS_ and self.EndDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEndDate>%s</%sEndDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EndDate), input_name='EndDate')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'BeginDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BeginDate')
            value_ = self.gds_validate_string(value_, node, 'BeginDate')
            self.BeginDate = value_
            self.BeginDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'EndDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EndDate')
            value_ = self.gds_validate_string(value_, node, 'EndDate')
            self.EndDate = value_
            self.EndDate_nsprefix_ = child_.prefix
# end class NetCostDateType


class ProductWeightType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Weight=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.UnitOfMeasurement_nsprefix_ = None
        self.Weight = Weight
        self.Weight_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductWeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductWeightType.subclass:
            return ProductWeightType.subclass(*args_, **kwargs_)
        else:
            return ProductWeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UnitOfMeasurement(self):
        return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement):
        self.UnitOfMeasurement = UnitOfMeasurement
    def get_Weight(self):
        return self.Weight
    def set_Weight(self, Weight):
        self.Weight = Weight
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ProductWeightType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductWeightType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductWeightType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductWeightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductWeightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='ProductWeightType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ProductWeightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitOfMeasurement is not None:
            namespaceprefix_ = self.UnitOfMeasurement_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitOfMeasurement_nsprefix_) else ''
            self.UnitOfMeasurement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Weight is not None:
            namespaceprefix_ = self.Weight_nsprefix_ + ':' if (UseCapturedNS_ and self.Weight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeight>%s</%sWeight>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Weight), input_name='Weight')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = UnitOfMeasurementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Weight':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Weight')
            value_ = self.gds_validate_string(value_, node, 'Weight')
            self.Weight = value_
            self.Weight_nsprefix_ = child_.prefix
# end class ProductWeightType


class ScheduleBType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Number=None, Quantity=None, UnitOfMeasurement=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Number = Number
        self.Number_nsprefix_ = None
        if Quantity is None:
            self.Quantity = []
        else:
            self.Quantity = Quantity
        self.Quantity_nsprefix_ = None
        if UnitOfMeasurement is None:
            self.UnitOfMeasurement = []
        else:
            self.UnitOfMeasurement = UnitOfMeasurement
        self.UnitOfMeasurement_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ScheduleBType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ScheduleBType.subclass:
            return ScheduleBType.subclass(*args_, **kwargs_)
        else:
            return ScheduleBType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def add_Quantity(self, value):
        self.Quantity.append(value)
    def insert_Quantity_at(self, index, value):
        self.Quantity.insert(index, value)
    def replace_Quantity_at(self, index, value):
        self.Quantity[index] = value
    def get_UnitOfMeasurement(self):
        return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement):
        self.UnitOfMeasurement = UnitOfMeasurement
    def add_UnitOfMeasurement(self, value):
        self.UnitOfMeasurement.append(value)
    def insert_UnitOfMeasurement_at(self, index, value):
        self.UnitOfMeasurement.insert(index, value)
    def replace_UnitOfMeasurement_at(self, index, value):
        self.UnitOfMeasurement[index] = value
    def hasContent_(self):
        if (
            self.Number is not None or
            self.Quantity or
            self.UnitOfMeasurement
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ScheduleBType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ScheduleBType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ScheduleBType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ScheduleBType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ScheduleBType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='ScheduleBType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ScheduleBType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
        for Quantity_ in self.Quantity:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Quantity_), input_name='Quantity')), namespaceprefix_ , eol_))
        for UnitOfMeasurement_ in self.UnitOfMeasurement:
            namespaceprefix_ = self.UnitOfMeasurement_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitOfMeasurement_nsprefix_) else ''
            UnitOfMeasurement_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UnitOfMeasurement', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
        elif nodeName_ == 'Quantity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Quantity')
            value_ = self.gds_validate_string(value_, node, 'Quantity')
            self.Quantity.append(value_)
            self.Quantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = UnitOfMeasurementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UnitOfMeasurement.append(obj_)
            obj_.original_tagname_ = 'UnitOfMeasurement'
# end class ScheduleBType


class IFChargesType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MonetaryValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.MonetaryValue = MonetaryValue
        self.MonetaryValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IFChargesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IFChargesType.subclass:
            return IFChargesType.subclass(*args_, **kwargs_)
        else:
            return IFChargesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MonetaryValue(self):
        return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue):
        self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='IFChargesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IFChargesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'IFChargesType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IFChargesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IFChargesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='IFChargesType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='IFChargesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MonetaryValue is not None:
            namespaceprefix_ = self.MonetaryValue_nsprefix_ + ':' if (UseCapturedNS_ and self.MonetaryValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMonetaryValue>%s</%sMonetaryValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MonetaryValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MonetaryValue')
            value_ = self.gds_validate_string(value_, node, 'MonetaryValue')
            self.MonetaryValue = value_
            self.MonetaryValue_nsprefix_ = child_.prefix
# end class IFChargesType


class OtherChargesType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MonetaryValue=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.MonetaryValue = MonetaryValue
        self.MonetaryValue_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OtherChargesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OtherChargesType.subclass:
            return OtherChargesType.subclass(*args_, **kwargs_)
        else:
            return OtherChargesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MonetaryValue(self):
        return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue):
        self.MonetaryValue = MonetaryValue
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.MonetaryValue is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='OtherChargesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OtherChargesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OtherChargesType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OtherChargesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OtherChargesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='OtherChargesType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='OtherChargesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MonetaryValue is not None:
            namespaceprefix_ = self.MonetaryValue_nsprefix_ + ':' if (UseCapturedNS_ and self.MonetaryValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMonetaryValue>%s</%sMonetaryValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MonetaryValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MonetaryValue')
            value_ = self.gds_validate_string(value_, node, 'MonetaryValue')
            self.MonetaryValue = value_
            self.MonetaryValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class OtherChargesType


class BlanketPeriodType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, BeginDate=None, EndDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.BeginDate = BeginDate
        self.BeginDate_nsprefix_ = None
        self.EndDate = EndDate
        self.EndDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BlanketPeriodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BlanketPeriodType.subclass:
            return BlanketPeriodType.subclass(*args_, **kwargs_)
        else:
            return BlanketPeriodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_BeginDate(self):
        return self.BeginDate
    def set_BeginDate(self, BeginDate):
        self.BeginDate = BeginDate
    def get_EndDate(self):
        return self.EndDate
    def set_EndDate(self, EndDate):
        self.EndDate = EndDate
    def hasContent_(self):
        if (
            self.BeginDate is not None or
            self.EndDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='BlanketPeriodType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BlanketPeriodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BlanketPeriodType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BlanketPeriodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BlanketPeriodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='BlanketPeriodType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='BlanketPeriodType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BeginDate is not None:
            namespaceprefix_ = self.BeginDate_nsprefix_ + ':' if (UseCapturedNS_ and self.BeginDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBeginDate>%s</%sBeginDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BeginDate), input_name='BeginDate')), namespaceprefix_ , eol_))
        if self.EndDate is not None:
            namespaceprefix_ = self.EndDate_nsprefix_ + ':' if (UseCapturedNS_ and self.EndDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEndDate>%s</%sEndDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EndDate), input_name='EndDate')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'BeginDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BeginDate')
            value_ = self.gds_validate_string(value_, node, 'BeginDate')
            self.BeginDate = value_
            self.BeginDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'EndDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EndDate')
            value_ = self.gds_validate_string(value_, node, 'EndDate')
            self.EndDate = value_
            self.EndDate_nsprefix_ = child_.prefix
# end class BlanketPeriodType


class LicenseType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Number=None, Date=None, ExceptionCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Number = Number
        self.Number_nsprefix_ = None
        self.Date = Date
        self.Date_nsprefix_ = None
        self.ExceptionCode = ExceptionCode
        self.ExceptionCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LicenseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LicenseType.subclass:
            return LicenseType.subclass(*args_, **kwargs_)
        else:
            return LicenseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_ExceptionCode(self):
        return self.ExceptionCode
    def set_ExceptionCode(self, ExceptionCode):
        self.ExceptionCode = ExceptionCode
    def hasContent_(self):
        if (
            self.Number is not None or
            self.Date is not None or
            self.ExceptionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='LicenseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LicenseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LicenseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LicenseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LicenseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='LicenseType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='LicenseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
        if self.Date is not None:
            namespaceprefix_ = self.Date_nsprefix_ + ':' if (UseCapturedNS_ and self.Date_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Date), input_name='Date')), namespaceprefix_ , eol_))
        if self.ExceptionCode is not None:
            namespaceprefix_ = self.ExceptionCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ExceptionCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExceptionCode>%s</%sExceptionCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExceptionCode), input_name='ExceptionCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
        elif nodeName_ == 'Date':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Date')
            value_ = self.gds_validate_string(value_, node, 'Date')
            self.Date = value_
            self.Date_nsprefix_ = child_.prefix
        elif nodeName_ == 'ExceptionCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExceptionCode')
            value_ = self.gds_validate_string(value_, node, 'ExceptionCode')
            self.ExceptionCode = value_
            self.ExceptionCode_nsprefix_ = child_.prefix
# end class LicenseType


class SoldToType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Name=None, AttentionName=None, TaxIdentificationNumber=None, Phone=None, Option=None, Address=None, EMailAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Name = Name
        self.Name_nsprefix_ = None
        self.AttentionName = AttentionName
        self.AttentionName_nsprefix_ = None
        self.TaxIdentificationNumber = TaxIdentificationNumber
        self.TaxIdentificationNumber_nsprefix_ = None
        self.Phone = Phone
        self.Phone_nsprefix_ = None
        self.Option = Option
        self.Option_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
        self.EMailAddress = EMailAddress
        self.EMailAddress_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SoldToType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SoldToType.subclass:
            return SoldToType.subclass(*args_, **kwargs_)
        else:
            return SoldToType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_AttentionName(self):
        return self.AttentionName
    def set_AttentionName(self, AttentionName):
        self.AttentionName = AttentionName
    def get_TaxIdentificationNumber(self):
        return self.TaxIdentificationNumber
    def set_TaxIdentificationNumber(self, TaxIdentificationNumber):
        self.TaxIdentificationNumber = TaxIdentificationNumber
    def get_Phone(self):
        return self.Phone
    def set_Phone(self, Phone):
        self.Phone = Phone
    def get_Option(self):
        return self.Option
    def set_Option(self, Option):
        self.Option = Option
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def get_EMailAddress(self):
        return self.EMailAddress
    def set_EMailAddress(self, EMailAddress):
        self.EMailAddress = EMailAddress
    def hasContent_(self):
        if (
            self.Name is not None or
            self.AttentionName is not None or
            self.TaxIdentificationNumber is not None or
            self.Phone is not None or
            self.Option is not None or
            self.Address is not None or
            self.EMailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='SoldToType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SoldToType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SoldToType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SoldToType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SoldToType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='SoldToType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='SoldToType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.AttentionName is not None:
            namespaceprefix_ = self.AttentionName_nsprefix_ + ':' if (UseCapturedNS_ and self.AttentionName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttentionName>%s</%sAttentionName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), namespaceprefix_ , eol_))
        if self.TaxIdentificationNumber is not None:
            namespaceprefix_ = self.TaxIdentificationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TaxIdentificationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxIdentificationNumber>%s</%sTaxIdentificationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TaxIdentificationNumber), input_name='TaxIdentificationNumber')), namespaceprefix_ , eol_))
        if self.Phone is not None:
            namespaceprefix_ = self.Phone_nsprefix_ + ':' if (UseCapturedNS_ and self.Phone_nsprefix_) else ''
            self.Phone.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Phone', pretty_print=pretty_print)
        if self.Option is not None:
            namespaceprefix_ = self.Option_nsprefix_ + ':' if (UseCapturedNS_ and self.Option_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOption>%s</%sOption>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Option), input_name='Option')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
        if self.EMailAddress is not None:
            namespaceprefix_ = self.EMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Name')
            value_ = self.gds_validate_string(value_, node, 'Name')
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
        elif nodeName_ == 'AttentionName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AttentionName')
            value_ = self.gds_validate_string(value_, node, 'AttentionName')
            self.AttentionName = value_
            self.AttentionName_nsprefix_ = child_.prefix
        elif nodeName_ == 'TaxIdentificationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TaxIdentificationNumber')
            value_ = self.gds_validate_string(value_, node, 'TaxIdentificationNumber')
            self.TaxIdentificationNumber = value_
            self.TaxIdentificationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Phone':
            obj_ = PhoneType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Phone = obj_
            obj_.original_tagname_ = 'Phone'
        elif nodeName_ == 'Option':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Option')
            value_ = self.gds_validate_string(value_, node, 'Option')
            self.Option = value_
            self.Option_nsprefix_ = child_.prefix
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'EMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EMailAddress')
            value_ = self.gds_validate_string(value_, node, 'EMailAddress')
            self.EMailAddress = value_
            self.EMailAddress_nsprefix_ = child_.prefix
# end class SoldToType


class PhoneType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Number=None, Extension=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Number = Number
        self.Number_nsprefix_ = None
        self.Extension = Extension
        self.Extension_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PhoneType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PhoneType.subclass:
            return PhoneType.subclass(*args_, **kwargs_)
        else:
            return PhoneType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_Extension(self):
        return self.Extension
    def set_Extension(self, Extension):
        self.Extension = Extension
    def hasContent_(self):
        if (
            self.Number is not None or
            self.Extension is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='PhoneType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PhoneType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PhoneType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PhoneType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PhoneType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='PhoneType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='PhoneType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
        if self.Extension is not None:
            namespaceprefix_ = self.Extension_nsprefix_ + ':' if (UseCapturedNS_ and self.Extension_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExtension>%s</%sExtension>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Extension), input_name='Extension')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
        elif nodeName_ == 'Extension':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Extension')
            value_ = self.gds_validate_string(value_, node, 'Extension')
            self.Extension = value_
            self.Extension_nsprefix_ = child_.prefix
# end class PhoneType


class DDTCInformationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ITARExemptionNumber=None, USMLCategoryCode=None, EligiblePartyIndicator=None, RegistrationNumber=None, Quantity=None, UnitOfMeasurement=None, SignificantMilitaryEquipmentIndicator=None, ACMNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ITARExemptionNumber = ITARExemptionNumber
        self.ITARExemptionNumber_nsprefix_ = None
        self.USMLCategoryCode = USMLCategoryCode
        self.USMLCategoryCode_nsprefix_ = None
        self.EligiblePartyIndicator = EligiblePartyIndicator
        self.EligiblePartyIndicator_nsprefix_ = None
        self.RegistrationNumber = RegistrationNumber
        self.RegistrationNumber_nsprefix_ = None
        self.Quantity = Quantity
        self.Quantity_nsprefix_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.UnitOfMeasurement_nsprefix_ = None
        self.SignificantMilitaryEquipmentIndicator = SignificantMilitaryEquipmentIndicator
        self.SignificantMilitaryEquipmentIndicator_nsprefix_ = None
        self.ACMNumber = ACMNumber
        self.ACMNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DDTCInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DDTCInformationType.subclass:
            return DDTCInformationType.subclass(*args_, **kwargs_)
        else:
            return DDTCInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ITARExemptionNumber(self):
        return self.ITARExemptionNumber
    def set_ITARExemptionNumber(self, ITARExemptionNumber):
        self.ITARExemptionNumber = ITARExemptionNumber
    def get_USMLCategoryCode(self):
        return self.USMLCategoryCode
    def set_USMLCategoryCode(self, USMLCategoryCode):
        self.USMLCategoryCode = USMLCategoryCode
    def get_EligiblePartyIndicator(self):
        return self.EligiblePartyIndicator
    def set_EligiblePartyIndicator(self, EligiblePartyIndicator):
        self.EligiblePartyIndicator = EligiblePartyIndicator
    def get_RegistrationNumber(self):
        return self.RegistrationNumber
    def set_RegistrationNumber(self, RegistrationNumber):
        self.RegistrationNumber = RegistrationNumber
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_UnitOfMeasurement(self):
        return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement):
        self.UnitOfMeasurement = UnitOfMeasurement
    def get_SignificantMilitaryEquipmentIndicator(self):
        return self.SignificantMilitaryEquipmentIndicator
    def set_SignificantMilitaryEquipmentIndicator(self, SignificantMilitaryEquipmentIndicator):
        self.SignificantMilitaryEquipmentIndicator = SignificantMilitaryEquipmentIndicator
    def get_ACMNumber(self):
        return self.ACMNumber
    def set_ACMNumber(self, ACMNumber):
        self.ACMNumber = ACMNumber
    def hasContent_(self):
        if (
            self.ITARExemptionNumber is not None or
            self.USMLCategoryCode is not None or
            self.EligiblePartyIndicator is not None or
            self.RegistrationNumber is not None or
            self.Quantity is not None or
            self.UnitOfMeasurement is not None or
            self.SignificantMilitaryEquipmentIndicator is not None or
            self.ACMNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='DDTCInformationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DDTCInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DDTCInformationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DDTCInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DDTCInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='DDTCInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='DDTCInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ITARExemptionNumber is not None:
            namespaceprefix_ = self.ITARExemptionNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ITARExemptionNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sITARExemptionNumber>%s</%sITARExemptionNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ITARExemptionNumber), input_name='ITARExemptionNumber')), namespaceprefix_ , eol_))
        if self.USMLCategoryCode is not None:
            namespaceprefix_ = self.USMLCategoryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.USMLCategoryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUSMLCategoryCode>%s</%sUSMLCategoryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.USMLCategoryCode), input_name='USMLCategoryCode')), namespaceprefix_ , eol_))
        if self.EligiblePartyIndicator is not None:
            namespaceprefix_ = self.EligiblePartyIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.EligiblePartyIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEligiblePartyIndicator>%s</%sEligiblePartyIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EligiblePartyIndicator), input_name='EligiblePartyIndicator')), namespaceprefix_ , eol_))
        if self.RegistrationNumber is not None:
            namespaceprefix_ = self.RegistrationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.RegistrationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegistrationNumber>%s</%sRegistrationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegistrationNumber), input_name='RegistrationNumber')), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Quantity), input_name='Quantity')), namespaceprefix_ , eol_))
        if self.UnitOfMeasurement is not None:
            namespaceprefix_ = self.UnitOfMeasurement_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitOfMeasurement_nsprefix_) else ''
            self.UnitOfMeasurement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.SignificantMilitaryEquipmentIndicator is not None:
            namespaceprefix_ = self.SignificantMilitaryEquipmentIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.SignificantMilitaryEquipmentIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSignificantMilitaryEquipmentIndicator>%s</%sSignificantMilitaryEquipmentIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SignificantMilitaryEquipmentIndicator), input_name='SignificantMilitaryEquipmentIndicator')), namespaceprefix_ , eol_))
        if self.ACMNumber is not None:
            namespaceprefix_ = self.ACMNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ACMNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sACMNumber>%s</%sACMNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ACMNumber), input_name='ACMNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ITARExemptionNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ITARExemptionNumber')
            value_ = self.gds_validate_string(value_, node, 'ITARExemptionNumber')
            self.ITARExemptionNumber = value_
            self.ITARExemptionNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'USMLCategoryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'USMLCategoryCode')
            value_ = self.gds_validate_string(value_, node, 'USMLCategoryCode')
            self.USMLCategoryCode = value_
            self.USMLCategoryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'EligiblePartyIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EligiblePartyIndicator')
            value_ = self.gds_validate_string(value_, node, 'EligiblePartyIndicator')
            self.EligiblePartyIndicator = value_
            self.EligiblePartyIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'RegistrationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegistrationNumber')
            value_ = self.gds_validate_string(value_, node, 'RegistrationNumber')
            self.RegistrationNumber = value_
            self.RegistrationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Quantity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Quantity')
            value_ = self.gds_validate_string(value_, node, 'Quantity')
            self.Quantity = value_
            self.Quantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = UnitOfMeasurementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'SignificantMilitaryEquipmentIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SignificantMilitaryEquipmentIndicator')
            value_ = self.gds_validate_string(value_, node, 'SignificantMilitaryEquipmentIndicator')
            self.SignificantMilitaryEquipmentIndicator = value_
            self.SignificantMilitaryEquipmentIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'ACMNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ACMNumber')
            value_ = self.gds_validate_string(value_, node, 'ACMNumber')
            self.ACMNumber = value_
            self.ACMNumber_nsprefix_ = child_.prefix
# end class DDTCInformationType


class EEILicenseType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Number=None, Code=None, LicenseLineValue=None, ECCNNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Number = Number
        self.Number_nsprefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.LicenseLineValue = LicenseLineValue
        self.LicenseLineValue_nsprefix_ = None
        self.ECCNNumber = ECCNNumber
        self.ECCNNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EEILicenseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EEILicenseType.subclass:
            return EEILicenseType.subclass(*args_, **kwargs_)
        else:
            return EEILicenseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_LicenseLineValue(self):
        return self.LicenseLineValue
    def set_LicenseLineValue(self, LicenseLineValue):
        self.LicenseLineValue = LicenseLineValue
    def get_ECCNNumber(self):
        return self.ECCNNumber
    def set_ECCNNumber(self, ECCNNumber):
        self.ECCNNumber = ECCNNumber
    def hasContent_(self):
        if (
            self.Number is not None or
            self.Code is not None or
            self.LicenseLineValue is not None or
            self.ECCNNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='EEILicenseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EEILicenseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EEILicenseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EEILicenseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EEILicenseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='EEILicenseType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='EEILicenseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.LicenseLineValue is not None:
            namespaceprefix_ = self.LicenseLineValue_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenseLineValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicenseLineValue>%s</%sLicenseLineValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LicenseLineValue), input_name='LicenseLineValue')), namespaceprefix_ , eol_))
        if self.ECCNNumber is not None:
            namespaceprefix_ = self.ECCNNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ECCNNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sECCNNumber>%s</%sECCNNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ECCNNumber), input_name='ECCNNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
        elif nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'LicenseLineValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LicenseLineValue')
            value_ = self.gds_validate_string(value_, node, 'LicenseLineValue')
            self.LicenseLineValue = value_
            self.LicenseLineValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'ECCNNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ECCNNumber')
            value_ = self.gds_validate_string(value_, node, 'ECCNNumber')
            self.ECCNNumber = value_
            self.ECCNNumber_nsprefix_ = child_.prefix
# end class EEILicenseType


class EEIFilingOptionType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, EMailAddress=None, Description=None, UPSFiled=None, ShipperFiled=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.EMailAddress = EMailAddress
        self.EMailAddress_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.UPSFiled = UPSFiled
        self.UPSFiled_nsprefix_ = None
        self.ShipperFiled = ShipperFiled
        self.ShipperFiled_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EEIFilingOptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EEIFilingOptionType.subclass:
            return EEIFilingOptionType.subclass(*args_, **kwargs_)
        else:
            return EEIFilingOptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_EMailAddress(self):
        return self.EMailAddress
    def set_EMailAddress(self, EMailAddress):
        self.EMailAddress = EMailAddress
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_UPSFiled(self):
        return self.UPSFiled
    def set_UPSFiled(self, UPSFiled):
        self.UPSFiled = UPSFiled
    def get_ShipperFiled(self):
        return self.ShipperFiled
    def set_ShipperFiled(self, ShipperFiled):
        self.ShipperFiled = ShipperFiled
    def hasContent_(self):
        if (
            self.Code is not None or
            self.EMailAddress is not None or
            self.Description is not None or
            self.UPSFiled is not None or
            self.ShipperFiled is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='EEIFilingOptionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EEIFilingOptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EEIFilingOptionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EEIFilingOptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EEIFilingOptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='EEIFilingOptionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='EEIFilingOptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.EMailAddress is not None:
            namespaceprefix_ = self.EMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.UPSFiled is not None:
            namespaceprefix_ = self.UPSFiled_nsprefix_ + ':' if (UseCapturedNS_ and self.UPSFiled_nsprefix_) else ''
            self.UPSFiled.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UPSFiled', pretty_print=pretty_print)
        if self.ShipperFiled is not None:
            namespaceprefix_ = self.ShipperFiled_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipperFiled_nsprefix_) else ''
            self.ShipperFiled.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipperFiled', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'EMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EMailAddress')
            value_ = self.gds_validate_string(value_, node, 'EMailAddress')
            self.EMailAddress = value_
            self.EMailAddress_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'UPSFiled':
            obj_ = UPSFiledType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UPSFiled = obj_
            obj_.original_tagname_ = 'UPSFiled'
        elif nodeName_ == 'ShipperFiled':
            obj_ = ShipperFiledType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipperFiled = obj_
            obj_.original_tagname_ = 'ShipperFiled'
# end class EEIFilingOptionType


class UPSFiledType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, POA=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.POA = POA
        self.POA_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UPSFiledType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UPSFiledType.subclass:
            return UPSFiledType.subclass(*args_, **kwargs_)
        else:
            return UPSFiledType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_POA(self):
        return self.POA
    def set_POA(self, POA):
        self.POA = POA
    def hasContent_(self):
        if (
            self.POA is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='UPSFiledType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UPSFiledType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UPSFiledType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UPSFiledType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UPSFiledType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='UPSFiledType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='UPSFiledType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.POA is not None:
            namespaceprefix_ = self.POA_nsprefix_ + ':' if (UseCapturedNS_ and self.POA_nsprefix_) else ''
            self.POA.export(outfile, level, namespaceprefix_, namespacedef_='', name_='POA', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'POA':
            obj_ = POAType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.POA = obj_
            obj_.original_tagname_ = 'POA'
# end class UPSFiledType


class ShipperFiledType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, PreDepartureITNNumber=None, ExemptionLegend=None, EEIShipmentReferenceNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.PreDepartureITNNumber = PreDepartureITNNumber
        self.PreDepartureITNNumber_nsprefix_ = None
        self.ExemptionLegend = ExemptionLegend
        self.ExemptionLegend_nsprefix_ = None
        self.EEIShipmentReferenceNumber = EEIShipmentReferenceNumber
        self.EEIShipmentReferenceNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipperFiledType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipperFiledType.subclass:
            return ShipperFiledType.subclass(*args_, **kwargs_)
        else:
            return ShipperFiledType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_PreDepartureITNNumber(self):
        return self.PreDepartureITNNumber
    def set_PreDepartureITNNumber(self, PreDepartureITNNumber):
        self.PreDepartureITNNumber = PreDepartureITNNumber
    def get_ExemptionLegend(self):
        return self.ExemptionLegend
    def set_ExemptionLegend(self, ExemptionLegend):
        self.ExemptionLegend = ExemptionLegend
    def get_EEIShipmentReferenceNumber(self):
        return self.EEIShipmentReferenceNumber
    def set_EEIShipmentReferenceNumber(self, EEIShipmentReferenceNumber):
        self.EEIShipmentReferenceNumber = EEIShipmentReferenceNumber
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None or
            self.PreDepartureITNNumber is not None or
            self.ExemptionLegend is not None or
            self.EEIShipmentReferenceNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ShipperFiledType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipperFiledType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipperFiledType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipperFiledType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipperFiledType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='ShipperFiledType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ShipperFiledType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.PreDepartureITNNumber is not None:
            namespaceprefix_ = self.PreDepartureITNNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PreDepartureITNNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPreDepartureITNNumber>%s</%sPreDepartureITNNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PreDepartureITNNumber), input_name='PreDepartureITNNumber')), namespaceprefix_ , eol_))
        if self.ExemptionLegend is not None:
            namespaceprefix_ = self.ExemptionLegend_nsprefix_ + ':' if (UseCapturedNS_ and self.ExemptionLegend_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExemptionLegend>%s</%sExemptionLegend>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExemptionLegend), input_name='ExemptionLegend')), namespaceprefix_ , eol_))
        if self.EEIShipmentReferenceNumber is not None:
            namespaceprefix_ = self.EEIShipmentReferenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.EEIShipmentReferenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEEIShipmentReferenceNumber>%s</%sEEIShipmentReferenceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EEIShipmentReferenceNumber), input_name='EEIShipmentReferenceNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'PreDepartureITNNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PreDepartureITNNumber')
            value_ = self.gds_validate_string(value_, node, 'PreDepartureITNNumber')
            self.PreDepartureITNNumber = value_
            self.PreDepartureITNNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ExemptionLegend':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExemptionLegend')
            value_ = self.gds_validate_string(value_, node, 'ExemptionLegend')
            self.ExemptionLegend = value_
            self.ExemptionLegend_nsprefix_ = child_.prefix
        elif nodeName_ == 'EEIShipmentReferenceNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EEIShipmentReferenceNumber')
            value_ = self.gds_validate_string(value_, node, 'EEIShipmentReferenceNumber')
            self.EEIShipmentReferenceNumber = value_
            self.EEIShipmentReferenceNumber_nsprefix_ = child_.prefix
# end class ShipperFiledType


class EEIInformationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ExportInformation=None, License=None, DDTCInformation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ExportInformation = ExportInformation
        self.ExportInformation_nsprefix_ = None
        self.License = License
        self.License_nsprefix_ = None
        self.DDTCInformation = DDTCInformation
        self.DDTCInformation_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EEIInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EEIInformationType.subclass:
            return EEIInformationType.subclass(*args_, **kwargs_)
        else:
            return EEIInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ExportInformation(self):
        return self.ExportInformation
    def set_ExportInformation(self, ExportInformation):
        self.ExportInformation = ExportInformation
    def get_License(self):
        return self.License
    def set_License(self, License):
        self.License = License
    def get_DDTCInformation(self):
        return self.DDTCInformation
    def set_DDTCInformation(self, DDTCInformation):
        self.DDTCInformation = DDTCInformation
    def hasContent_(self):
        if (
            self.ExportInformation is not None or
            self.License is not None or
            self.DDTCInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='EEIInformationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EEIInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EEIInformationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EEIInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EEIInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='EEIInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='EEIInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ExportInformation is not None:
            namespaceprefix_ = self.ExportInformation_nsprefix_ + ':' if (UseCapturedNS_ and self.ExportInformation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExportInformation>%s</%sExportInformation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExportInformation), input_name='ExportInformation')), namespaceprefix_ , eol_))
        if self.License is not None:
            namespaceprefix_ = self.License_nsprefix_ + ':' if (UseCapturedNS_ and self.License_nsprefix_) else ''
            self.License.export(outfile, level, namespaceprefix_, namespacedef_='', name_='License', pretty_print=pretty_print)
        if self.DDTCInformation is not None:
            namespaceprefix_ = self.DDTCInformation_nsprefix_ + ':' if (UseCapturedNS_ and self.DDTCInformation_nsprefix_) else ''
            self.DDTCInformation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DDTCInformation', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ExportInformation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExportInformation')
            value_ = self.gds_validate_string(value_, node, 'ExportInformation')
            self.ExportInformation = value_
            self.ExportInformation_nsprefix_ = child_.prefix
        elif nodeName_ == 'License':
            obj_ = EEILicenseType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.License = obj_
            obj_.original_tagname_ = 'License'
        elif nodeName_ == 'DDTCInformation':
            obj_ = DDTCInformationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DDTCInformation = obj_
            obj_.original_tagname_ = 'DDTCInformation'
# end class EEIInformationType


class POAType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, POAType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if POAType.subclass:
            return POAType.subclass(*args_, **kwargs_)
        else:
            return POAType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='POAType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('POAType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'POAType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='POAType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='POAType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='POAType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='POAType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class POAType


class UltimateConsigneeTypeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UltimateConsigneeTypeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UltimateConsigneeTypeType.subclass:
            return UltimateConsigneeTypeType.subclass(*args_, **kwargs_)
        else:
            return UltimateConsigneeTypeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='UltimateConsigneeTypeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UltimateConsigneeTypeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UltimateConsigneeTypeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UltimateConsigneeTypeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UltimateConsigneeTypeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='UltimateConsigneeTypeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='UltimateConsigneeTypeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class UltimateConsigneeTypeType


class ShipmentServiceOptionsType1(ShipmentServiceOptionsType):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = ShipmentServiceOptionsType
    def __init__(self, SaturdayDeliveryIndicator=None, SaturdayPickupIndicator=None, COD=None, AccessPointCOD=None, DeliverToAddresseeOnlyIndicator=None, DirectDeliveryOnlyIndicator=None, Notification=None, LabelDelivery=None, InternationalForms=None, DeliveryConfirmation=None, ReturnOfDocumentIndicator=None, ImportControlIndicator=None, LabelMethod=None, CommercialInvoiceRemovalIndicator=None, UPScarbonneutralIndicator=None, PreAlertNotification=None, ExchangeForwardIndicator=None, HoldForPickupIndicator=None, DropoffAtUPSFacilityIndicator=None, LiftGateForPickUpIndicator=None, LiftGateForDeliveryIndicator=None, SDLShipmentIndicator=None, EPRAReleaseCode=None, RestrictedArticles=None, InsideDelivery=None, ItemDisposal=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(ShipmentServiceOptionsType1, self).__init__(SaturdayDeliveryIndicator, SaturdayPickupIndicator, COD, AccessPointCOD, DeliverToAddresseeOnlyIndicator, DirectDeliveryOnlyIndicator, Notification, LabelDelivery, InternationalForms, DeliveryConfirmation, ReturnOfDocumentIndicator, ImportControlIndicator, LabelMethod, CommercialInvoiceRemovalIndicator, UPScarbonneutralIndicator, PreAlertNotification, ExchangeForwardIndicator, HoldForPickupIndicator, DropoffAtUPSFacilityIndicator, LiftGateForPickUpIndicator, LiftGateForDeliveryIndicator, SDLShipmentIndicator, EPRAReleaseCode, RestrictedArticles, InsideDelivery, ItemDisposal,  **kwargs_)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentServiceOptionsType1)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentServiceOptionsType1.subclass:
            return ShipmentServiceOptionsType1.subclass(*args_, **kwargs_)
        else:
            return ShipmentServiceOptionsType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def hasContent_(self):
        if (
            super(ShipmentServiceOptionsType1, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentServiceOptionsType1', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentServiceOptionsType1')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentServiceOptionsType1':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentServiceOptionsType1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentServiceOptionsType1', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentServiceOptionsType1'):
        super(ShipmentServiceOptionsType1, self).exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentServiceOptionsType1')
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentServiceOptionsType1', fromsubclass_=False, pretty_print=True):
        super(ShipmentServiceOptionsType1, self).exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(ShipmentServiceOptionsType1, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        super(ShipmentServiceOptionsType1, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class ShipmentServiceOptionsType1


class PropertyType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Key=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Key = _cast(None, Key)
        self.Key_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PropertyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PropertyType.subclass:
            return PropertyType.subclass(*args_, **kwargs_)
        else:
            return PropertyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Key(self):
        return self.Key
    def set_Key(self, Key):
        self.Key = Key
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PropertyType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PropertyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PropertyType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PropertyType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PropertyType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PropertyType'):
        if self.Key is not None and 'Key' not in already_processed:
            already_processed.add('Key')
            outfile.write(' Key=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Key), input_name='Key')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PropertyType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Key', node)
        if value is not None and 'Key' not in already_processed:
            already_processed.add('Key')
            self.Key = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class PropertyType


class ReceiptType(ImageType):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = ImageType
    def __init__(self, ImageFormat=None, GraphicImage=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(ReceiptType, self).__init__(ImageFormat, GraphicImage,  **kwargs_)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReceiptType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReceiptType.subclass:
            return ReceiptType.subclass(*args_, **kwargs_)
        else:
            return ReceiptType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def hasContent_(self):
        if (
            super(ReceiptType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReceiptType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReceiptType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReceiptType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReceiptType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReceiptType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReceiptType'):
        super(ReceiptType, self).exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReceiptType')
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReceiptType', fromsubclass_=False, pretty_print=True):
        super(ReceiptType, self).exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(ReceiptType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        super(ReceiptType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class ReceiptType


class LabelType(ImageType):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = ImageType
    def __init__(self, ImageFormat=None, GraphicImage=None, GraphicImagePart=None, InternationalSignatureGraphicImage=None, HTMLImage=None, PDF417=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(LabelType, self).__init__(ImageFormat, GraphicImage,  **kwargs_)
        if GraphicImagePart is None:
            self.GraphicImagePart = []
        else:
            self.GraphicImagePart = GraphicImagePart
        self.GraphicImagePart_nsprefix_ = None
        self.InternationalSignatureGraphicImage = InternationalSignatureGraphicImage
        self.InternationalSignatureGraphicImage_nsprefix_ = None
        self.HTMLImage = HTMLImage
        self.HTMLImage_nsprefix_ = None
        self.PDF417 = PDF417
        self.PDF417_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LabelType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LabelType.subclass:
            return LabelType.subclass(*args_, **kwargs_)
        else:
            return LabelType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_GraphicImagePart(self):
        return self.GraphicImagePart
    def set_GraphicImagePart(self, GraphicImagePart):
        self.GraphicImagePart = GraphicImagePart
    def add_GraphicImagePart(self, value):
        self.GraphicImagePart.append(value)
    def insert_GraphicImagePart_at(self, index, value):
        self.GraphicImagePart.insert(index, value)
    def replace_GraphicImagePart_at(self, index, value):
        self.GraphicImagePart[index] = value
    def get_InternationalSignatureGraphicImage(self):
        return self.InternationalSignatureGraphicImage
    def set_InternationalSignatureGraphicImage(self, InternationalSignatureGraphicImage):
        self.InternationalSignatureGraphicImage = InternationalSignatureGraphicImage
    def get_HTMLImage(self):
        return self.HTMLImage
    def set_HTMLImage(self, HTMLImage):
        self.HTMLImage = HTMLImage
    def get_PDF417(self):
        return self.PDF417
    def set_PDF417(self, PDF417):
        self.PDF417 = PDF417
    def hasContent_(self):
        if (
            self.GraphicImagePart or
            self.InternationalSignatureGraphicImage is not None or
            self.HTMLImage is not None or
            self.PDF417 is not None or
            super(LabelType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LabelType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LabelType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LabelType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LabelType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LabelType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LabelType'):
        super(LabelType, self).exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LabelType')
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LabelType', fromsubclass_=False, pretty_print=True):
        super(LabelType, self).exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for GraphicImagePart_ in self.GraphicImagePart:
            namespaceprefix_ = self.GraphicImagePart_nsprefix_ + ':' if (UseCapturedNS_ and self.GraphicImagePart_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGraphicImagePart>%s</%sGraphicImagePart>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(GraphicImagePart_), input_name='GraphicImagePart')), namespaceprefix_ , eol_))
        if self.InternationalSignatureGraphicImage is not None:
            namespaceprefix_ = self.InternationalSignatureGraphicImage_nsprefix_ + ':' if (UseCapturedNS_ and self.InternationalSignatureGraphicImage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInternationalSignatureGraphicImage>%s</%sInternationalSignatureGraphicImage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InternationalSignatureGraphicImage), input_name='InternationalSignatureGraphicImage')), namespaceprefix_ , eol_))
        if self.HTMLImage is not None:
            namespaceprefix_ = self.HTMLImage_nsprefix_ + ':' if (UseCapturedNS_ and self.HTMLImage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHTMLImage>%s</%sHTMLImage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HTMLImage), input_name='HTMLImage')), namespaceprefix_ , eol_))
        if self.PDF417 is not None:
            namespaceprefix_ = self.PDF417_nsprefix_ + ':' if (UseCapturedNS_ and self.PDF417_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPDF417>%s</%sPDF417>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PDF417), input_name='PDF417')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(LabelType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'GraphicImagePart':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GraphicImagePart')
            value_ = self.gds_validate_string(value_, node, 'GraphicImagePart')
            self.GraphicImagePart.append(value_)
            self.GraphicImagePart_nsprefix_ = child_.prefix
        elif nodeName_ == 'InternationalSignatureGraphicImage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InternationalSignatureGraphicImage')
            value_ = self.gds_validate_string(value_, node, 'InternationalSignatureGraphicImage')
            self.InternationalSignatureGraphicImage = value_
            self.InternationalSignatureGraphicImage_nsprefix_ = child_.prefix
        elif nodeName_ == 'HTMLImage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HTMLImage')
            value_ = self.gds_validate_string(value_, node, 'HTMLImage')
            self.HTMLImage = value_
            self.HTMLImage_nsprefix_ = child_.prefix
        elif nodeName_ == 'PDF417':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PDF417')
            value_ = self.gds_validate_string(value_, node, 'PDF417')
            self.PDF417 = value_
            self.PDF417_nsprefix_ = child_.prefix
        super(LabelType, self).buildChildren(child_, node, nodeName_, True)
# end class LabelType


class ShipperType(CompanyInfoType):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = CompanyInfoType
    def __init__(self, Name=None, AttentionName=None, CompanyDisplayableName=None, TaxIdentificationNumber=None, TaxIDType=None, Phone=None, ShipperNumber=None, FaxNumber=None, EMailAddress=None, Address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(ShipperType, self).__init__(Name, AttentionName, CompanyDisplayableName, TaxIdentificationNumber, TaxIDType, Phone,  **kwargs_)
        self.ShipperNumber = ShipperNumber
        self.ShipperNumber_nsprefix_ = None
        self.FaxNumber = FaxNumber
        self.FaxNumber_nsprefix_ = None
        self.EMailAddress = EMailAddress
        self.EMailAddress_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipperType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipperType.subclass:
            return ShipperType.subclass(*args_, **kwargs_)
        else:
            return ShipperType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ShipperNumber(self):
        return self.ShipperNumber
    def set_ShipperNumber(self, ShipperNumber):
        self.ShipperNumber = ShipperNumber
    def get_FaxNumber(self):
        return self.FaxNumber
    def set_FaxNumber(self, FaxNumber):
        self.FaxNumber = FaxNumber
    def get_EMailAddress(self):
        return self.EMailAddress
    def set_EMailAddress(self, EMailAddress):
        self.EMailAddress = EMailAddress
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def hasContent_(self):
        if (
            self.ShipperNumber is not None or
            self.FaxNumber is not None or
            self.EMailAddress is not None or
            self.Address is not None or
            super(ShipperType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipperType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipperType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipperType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipperType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipperType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipperType'):
        super(ShipperType, self).exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipperType')
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipperType', fromsubclass_=False, pretty_print=True):
        super(ShipperType, self).exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShipperNumber is not None:
            namespaceprefix_ = self.ShipperNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipperNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipperNumber>%s</%sShipperNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShipperNumber), input_name='ShipperNumber')), namespaceprefix_ , eol_))
        if self.FaxNumber is not None:
            namespaceprefix_ = self.FaxNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.FaxNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFaxNumber>%s</%sFaxNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FaxNumber), input_name='FaxNumber')), namespaceprefix_ , eol_))
        if self.EMailAddress is not None:
            namespaceprefix_ = self.EMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(ShipperType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ShipperNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShipperNumber')
            value_ = self.gds_validate_string(value_, node, 'ShipperNumber')
            self.ShipperNumber = value_
            self.ShipperNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'FaxNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FaxNumber')
            value_ = self.gds_validate_string(value_, node, 'FaxNumber')
            self.FaxNumber = value_
            self.FaxNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'EMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EMailAddress')
            value_ = self.gds_validate_string(value_, node, 'EMailAddress')
            self.EMailAddress = value_
            self.EMailAddress_nsprefix_ = child_.prefix
        elif nodeName_ == 'Address':
            class_obj_ = self.get_class_obj_(child_, ShipAddressType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        super(ShipperType, self).buildChildren(child_, node, nodeName_, True)
# end class ShipperType


GDSClassesMapping = {
    'ClientInformation': ClientInformationType,
    'Request': RequestType,
    'Response': ResponseType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def get_required_ns_prefix_defs(rootNode):
    '''Get all name space prefix definitions required in this XML doc.
    Return a dictionary of definitions and a char string of definitions.
    '''
    nsmap = {
        prefix: uri
        for node in rootNode.iter()
        for (prefix, uri) in node.nsmap.items()
        if prefix is not None
    }
    namespacedefs = ' '.join([
        'xmlns:{}="{}"'.format(prefix, uri)
        for prefix, uri in nsmap.items()
    ])
    return nsmap, namespacedefs


def parse(inFileName, silence=False, print_warnings=True):
    global CapturedNsmap_
    gds_collector = GdsCollector_()
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ShipmentRequest'
        rootClass = ShipmentRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    CapturedNsmap_, namespacedefs = get_required_ns_prefix_defs(rootNode)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_=namespacedefs,
            pretty_print=True)
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseEtree(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ShipmentRequest'
        rootClass = ShipmentRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(str(content))
        sys.stdout.write('\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False, print_warnings=True):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    gds_collector = GdsCollector_()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ShipmentRequest'
        rootClass = ShipmentRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if not SaveElementTreeNode:
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:ship="http://www.ups.com/XMLSchema/XOLTWS/Ship/v1.0"')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseLiteral(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ShipmentRequest'
        rootClass = ShipmentRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('#from ship_web_service_schema import *\n\n')
        sys.stdout.write('import ship_web_service_schema as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

RenameMappings_ = {
}

__all__ = [
    "ADLAddressType",
    "AccessorialType",
    "AccountAddressType",
    "AddressType",
    "AdjustedHeightType",
    "AlternateDeliveryAddressType",
    "BillReceiverAddressType",
    "BillReceiverType",
    "BillShipperType",
    "BillThirdPartyChargeType",
    "BillingUnitOfMeasurementType",
    "BillingWeightType",
    "BlanketPeriodType",
    "CN22ContentType",
    "CN22FormType",
    "CODType",
    "ClientInformationType",
    "CodeDescriptionType",
    "CommodityType",
    "CompanyInfoType",
    "ContactInfoType",
    "ContactType",
    "CreditCardAddressType",
    "CreditCardType",
    "CurrencyMonetaryType",
    "DDTCInformationType",
    "DGSignatoryInfoType",
    "DeclaredValueType",
    "DeliveryConfirmationType",
    "DetailType",
    "DimensionsType",
    "DisclaimerType",
    "DryIceType",
    "DryIceWeightType",
    "EEIFilingOptionType",
    "EEIInformationType",
    "EEILicenseType",
    "ElementIdentifierType",
    "ElementLevelInformationType",
    "EmailDetailsType",
    "ExcludeFromFormType",
    "FRSPaymentInfoType",
    "FRSShipmentDataType",
    "FormImageType",
    "FormType",
    "ForwardAgentType",
    "FreightCollectType",
    "FreightDensityInfoType",
    "FreightDensityRateType",
    "FreightShipmentInformationType",
    "HandlingUnitsDimensionsType",
    "HandlingUnitsResponseType",
    "HandlingUnitsType",
    "HazMatPackageInformationType",
    "HazMatType",
    "HighValueReportType",
    "IFChargesType",
    "ImageFormatType",
    "ImageType",
    "IndicationType",
    "InstructionCodeDescriptionType",
    "IntermediateConsigneeType",
    "InternationalFormType",
    "LabelDeliveryType",
    "LabelImageFormatType",
    "LabelMethodType",
    "LabelSpecificationType",
    "LabelStockSizeType",
    "LabelType",
    "LanguageForUPSPremiumCareType",
    "LicenseType",
    "LocaleType",
    "NMFCType",
    "NegotiatedChargesType",
    "NegotiatedRateChargesType",
    "NetCostDateType",
    "NotificationType",
    "OtherChargesType",
    "POAType",
    "PSOCODType",
    "PSONotificationType",
    "PackageAssociatedType",
    "PackageDeclaredValueType",
    "PackageResultsType",
    "PackageServiceOptionsAccessPointCODType",
    "PackageServiceOptionsType",
    "PackageType",
    "PackageWeightType",
    "PackagingType",
    "PackingListInfoType",
    "PaymentInfoType",
    "PaymentType",
    "PhoneType",
    "PreAlertEMailMessageType",
    "PreAlertNotificationType",
    "PreAlertTextMessageType",
    "PreAlertVoiceMessageType",
    "PrepaidType",
    "ProducerType",
    "ProductType",
    "ProductWeightType",
    "PromotionalDiscountInformationType",
    "PropertyType",
    "RateInfoType",
    "ReceiptImageFormatType",
    "ReceiptSpecificationType",
    "ReceiptType",
    "ReferenceNumberType",
    "RequestType",
    "ResponseType",
    "RestrictedArticlesType",
    "ReturnServiceType",
    "SCReportType",
    "ScheduleBType",
    "ServiceType",
    "ShipAcceptRequest",
    "ShipAcceptResponse",
    "ShipAddressType",
    "ShipChargeType",
    "ShipConfirmRequest",
    "ShipConfirmResponse",
    "ShipFromType",
    "ShipPhoneType",
    "ShipToAddressType",
    "ShipToType",
    "ShipUnitOfMeasurementType",
    "ShipmentChargeType",
    "ShipmentChargesType",
    "ShipmentRequest",
    "ShipmentResponse",
    "ShipmentResultsType",
    "ShipmentServiceOptionsAccessPointCODType",
    "ShipmentServiceOptionsNotificationTextMessageType",
    "ShipmentServiceOptionsNotificationVoiceMessageType",
    "ShipmentServiceOptionsType",
    "ShipmentServiceOptionsType1",
    "ShipmentType",
    "ShipperFiledType",
    "ShipperType",
    "SoldToType",
    "TaxChargeType",
    "TaxIDCodeDescType",
    "TransactionReferenceType",
    "TransportationChargeType",
    "UPSFiledType",
    "UPSPremiumCareFormType",
    "UltimateConsigneeType",
    "UltimateConsigneeTypeType",
    "UnitOfMeasurementType",
    "UnitType",
    "UserCreatedFormType",
    "VerbalConfirmationType"
]
