#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Sat Mar  7 09:04:15 2020 by generateDS.py version 2.35.15.
# Python 3.8.1 (v3.8.1:1b293b6006, Dec 18 2019, 14:08:53)  [Clang 6.0 (clang-600.0.57)]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('-o', './python/freight_ship_web_service_schema.py')
#
# Command line arguments:
#   ./schemas/FreightShipWebServiceSchema.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/.env/bin/generateDS --no-namespace-defs -o "./python/freight_ship_web_service_schema.py" ./schemas/FreightShipWebServiceSchema.xsd
#
# Current working directory (os.getcwd()):
#   2020-03
#

from six.moves import zip_longest
import os
import sys
import re as re_
import base64
import datetime as datetime_
import decimal as decimal_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
SaveElementTreeNode = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ImportError:
    GenerateDSNamespaceTypePrefixes_ = {}

#
# You can replace the following class definition by defining an
# importable module named "generatedscollector" containing a class
# named "GdsCollector".  See the default class definition below for
# clues about the possible content of that class.
#
try:
    from generatedscollector import GdsCollector as GdsCollector_
except ImportError:

    class GdsCollector_(object):

        def __init__(self, messages=None):
            if messages is None:
                self.messages = []
            else:
                self.messages = messages

        def add_message(self, msg):
            self.messages.append(msg)

        def get_messages(self):
            return self.messages

        def clear_messages(self):
            self.messages = []

        def print_messages(self):
            for msg in self.messages:
                print("Warning: {}".format(msg))

        def write_messages(self, outstream):
            for msg in self.messages:
                outstream.write("Warning: {}\n".format(msg))


#
# The super-class for enum types
#

try:
    from enum import Enum
except ImportError:
    Enum = object

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        __hash__ = object.__hash__
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_parse_string(self, input_data, node=None, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_parse_integer(self, input_data, node=None, input_name=''):
            try:
                ival = int(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires integer value: %s' % exp)
            return ival
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            try:
                value = int(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires integer value')
            return value
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integer valuess')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_parse_float(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires float or double value: %s' % exp)
            return fval_
        def gds_validate_float(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires float value')
            return value
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of float values')
            return values
        def gds_format_decimal(self, input_data, input_name=''):
            return ('%s' % input_data).rstrip('0')
        def gds_parse_decimal(self, input_data, node=None, input_name=''):
            try:
                decimal_value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return decimal_value
        def gds_validate_decimal(self, input_data, node=None, input_name=''):
            try:
                value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return value
        def gds_format_decimal_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_decimal_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    decimal_.Decimal(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of decimal values')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_parse_double(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires double or float value: %s' % exp)
            return fval_
        def gds_validate_double(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires double or float value')
            return value
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(
                        node, 'Requires sequence of double or float values')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_parse_boolean(self, input_data, node=None, input_name=''):
            if input_data in ('true', '1'):
                bval = True
            elif input_data in ('false', '0'):
                bval = False
            else:
                raise_parse_error(node, 'Requires boolean value')
            return bval
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            if input_data not in (True, 1, False, 0, ):
                raise_parse_error(
                    node,
                    'Requires boolean value '
                    '(one of True, 1, False, 0)')
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in (True, 1, False, 0, ):
                    raise_parse_error(
                        node,
                        'Requires sequence of boolean values '
                        '(one of True, 1, False, 0)')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_check_cardinality_(
                self, value, input_name,
                min_occurs=0, max_occurs=1, required=None):
            if value is None:
                length = 0
            elif isinstance(value, list):
                length = len(value)
            else:
                length = 1
            if required is not None :
                if required and length < 1:
                    self.gds_collector_.add_message(
                        "Required value {}{} is missing".format(
                            input_name, self.gds_get_node_lineno_()))
            if length < min_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is below "
                    "the minimum allowed, "
                    "expected at least {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        min_occurs, length))
            elif length > max_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is above "
                    "the maximum allowed, "
                    "expected at most {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        max_occurs, length))
        def gds_validate_builtin_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value, input_name=input_name)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_validate_defined_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            # provide default value in case option --disable-xml is used.
            content = ""
            content = etree_.tostring(node, encoding="unicode")
            return content
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            def excl_select_objs_(obj):
                return (obj[0] != 'parent_object_' and
                        obj[0] != 'gds_collector_')
            if type(self) != type(other):
                return False
            return all(x == y for x, y in zip_longest(
                filter(excl_select_objs_, self.__dict__.items()),
                filter(excl_select_objs_, other.__dict__.items())))
        def __ne__(self, other):
            return not self.__eq__(other)
        # Django ETL transform hooks.
        def gds_djo_etl_transform(self):
            pass
        def gds_djo_etl_transform_db_obj(self, dbobj):
            pass
        # SQLAlchemy ETL transform hooks.
        def gds_sqa_etl_transform(self):
            return 0, None
        def gds_sqa_etl_transform_db_obj(self, dbobj):
            pass
        def gds_get_node_lineno_(self):
            if (hasattr(self, "gds_elementtree_node_") and
                    self.gds_elementtree_node_ is not None):
                return ' near line {}'.format(
                    self.gds_elementtree_node_.sourceline)
            else:
                return ""
    
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
# Set this to false in order to deactivate during export, the use of
# name space prefixes captured from the input document.
UseCapturedNS_ = True
CapturedNsmap_ = {}
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


def encode_str_2_3(instr):
    return instr


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if node is not None:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class FreightShipRequest(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Request=None, Shipment=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Request = Request
        self.Request_nsprefix_ = None
        self.Shipment = Shipment
        self.Shipment_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightShipRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightShipRequest.subclass:
            return FreightShipRequest.subclass(*args_, **kwargs_)
        else:
            return FreightShipRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Request(self):
        return self.Request
    def set_Request(self, Request):
        self.Request = Request
    def get_Shipment(self):
        return self.Shipment
    def set_Shipment(self, Shipment):
        self.Shipment = Shipment
    def hasContent_(self):
        if (
            self.Request is not None or
            self.Shipment is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightShipRequest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightShipRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightShipRequest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightShipRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightShipRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightShipRequest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightShipRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Request is not None:
            namespaceprefix_ = self.Request_nsprefix_ + ':' if (UseCapturedNS_ and self.Request_nsprefix_) else ''
            self.Request.export(outfile, level, namespaceprefix_='common:', namespacedef_='', name_='Request', pretty_print=pretty_print)
        if self.Shipment is not None:
            namespaceprefix_ = self.Shipment_nsprefix_ + ':' if (UseCapturedNS_ and self.Shipment_nsprefix_) else ''
            self.Shipment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Shipment', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Request':
            obj_ = RequestType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Request = obj_
            obj_.original_tagname_ = 'Request'
        elif nodeName_ == 'Shipment':
            obj_ = ShipmentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Shipment = obj_
            obj_.original_tagname_ = 'Shipment'
# end class FreightShipRequest


class FreightShipResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Response=None, ShipmentResults=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Response = Response
        self.Response_nsprefix_ = None
        self.ShipmentResults = ShipmentResults
        self.ShipmentResults_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightShipResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightShipResponse.subclass:
            return FreightShipResponse.subclass(*args_, **kwargs_)
        else:
            return FreightShipResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Response(self):
        return self.Response
    def set_Response(self, Response):
        self.Response = Response
    def get_ShipmentResults(self):
        return self.ShipmentResults
    def set_ShipmentResults(self, ShipmentResults):
        self.ShipmentResults = ShipmentResults
    def hasContent_(self):
        if (
            self.Response is not None or
            self.ShipmentResults is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightShipResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightShipResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightShipResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightShipResponse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightShipResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightShipResponse'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightShipResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Response is not None:
            namespaceprefix_ = self.Response_nsprefix_ + ':' if (UseCapturedNS_ and self.Response_nsprefix_) else ''
            self.Response.export(outfile, level, namespaceprefix_='common:', namespacedef_='', name_='Response', pretty_print=pretty_print)
        if self.ShipmentResults is not None:
            namespaceprefix_ = self.ShipmentResults_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentResults_nsprefix_) else ''
            self.ShipmentResults.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentResults', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Response':
            obj_ = ResponseType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Response = obj_
            obj_.original_tagname_ = 'Response'
        elif nodeName_ == 'ShipmentResults':
            obj_ = ShipmentResultsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentResults = obj_
            obj_.original_tagname_ = 'ShipmentResults'
# end class FreightShipResponse


class ShipmentType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ShipFrom=None, ShipperNumber=None, ShipTo=None, PaymentInformation=None, ManufactureInformation=None, Service=None, HandlingUnitOne=None, HandlingUnitTwo=None, ExistingShipmentID=None, HandlingInstructions=None, DeliveryInstructions=None, PickupInstructions=None, SpecialInstructions=None, ShipmentTotalWeight=None, Commodity=None, Reference=None, ShipmentServiceOptions=None, PickupRequest=None, Documents=None, ITNNumber=None, TaxID=None, MovementReferenceNumber=None, EICNumberAndStatement=None, TimeInTransitIndicator=None, HandlingUnits=None, DensityEligibleIndicator=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ShipFrom = ShipFrom
        self.ShipFrom_nsprefix_ = None
        self.ShipperNumber = ShipperNumber
        self.ShipperNumber_nsprefix_ = None
        self.ShipTo = ShipTo
        self.ShipTo_nsprefix_ = None
        self.PaymentInformation = PaymentInformation
        self.PaymentInformation_nsprefix_ = None
        if ManufactureInformation is None:
            self.ManufactureInformation = []
        else:
            self.ManufactureInformation = ManufactureInformation
        self.ManufactureInformation_nsprefix_ = None
        self.Service = Service
        self.Service_nsprefix_ = None
        self.HandlingUnitOne = HandlingUnitOne
        self.HandlingUnitOne_nsprefix_ = None
        self.HandlingUnitTwo = HandlingUnitTwo
        self.HandlingUnitTwo_nsprefix_ = None
        self.ExistingShipmentID = ExistingShipmentID
        self.ExistingShipmentID_nsprefix_ = None
        self.HandlingInstructions = HandlingInstructions
        self.HandlingInstructions_nsprefix_ = None
        self.DeliveryInstructions = DeliveryInstructions
        self.DeliveryInstructions_nsprefix_ = None
        self.PickupInstructions = PickupInstructions
        self.PickupInstructions_nsprefix_ = None
        self.SpecialInstructions = SpecialInstructions
        self.SpecialInstructions_nsprefix_ = None
        self.ShipmentTotalWeight = ShipmentTotalWeight
        self.ShipmentTotalWeight_nsprefix_ = None
        if Commodity is None:
            self.Commodity = []
        else:
            self.Commodity = Commodity
        self.Commodity_nsprefix_ = None
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        self.Reference_nsprefix_ = None
        self.ShipmentServiceOptions = ShipmentServiceOptions
        self.ShipmentServiceOptions_nsprefix_ = None
        self.PickupRequest = PickupRequest
        self.PickupRequest_nsprefix_ = None
        self.Documents = Documents
        self.Documents_nsprefix_ = None
        self.ITNNumber = ITNNumber
        self.ITNNumber_nsprefix_ = None
        self.TaxID = TaxID
        self.TaxID_nsprefix_ = None
        self.MovementReferenceNumber = MovementReferenceNumber
        self.MovementReferenceNumber_nsprefix_ = None
        self.EICNumberAndStatement = EICNumberAndStatement
        self.EICNumberAndStatement_nsprefix_ = None
        self.TimeInTransitIndicator = TimeInTransitIndicator
        self.TimeInTransitIndicator_nsprefix_ = None
        if HandlingUnits is None:
            self.HandlingUnits = []
        else:
            self.HandlingUnits = HandlingUnits
        self.HandlingUnits_nsprefix_ = None
        self.DensityEligibleIndicator = DensityEligibleIndicator
        self.DensityEligibleIndicator_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentType.subclass:
            return ShipmentType.subclass(*args_, **kwargs_)
        else:
            return ShipmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ShipFrom(self):
        return self.ShipFrom
    def set_ShipFrom(self, ShipFrom):
        self.ShipFrom = ShipFrom
    def get_ShipperNumber(self):
        return self.ShipperNumber
    def set_ShipperNumber(self, ShipperNumber):
        self.ShipperNumber = ShipperNumber
    def get_ShipTo(self):
        return self.ShipTo
    def set_ShipTo(self, ShipTo):
        self.ShipTo = ShipTo
    def get_PaymentInformation(self):
        return self.PaymentInformation
    def set_PaymentInformation(self, PaymentInformation):
        self.PaymentInformation = PaymentInformation
    def get_ManufactureInformation(self):
        return self.ManufactureInformation
    def set_ManufactureInformation(self, ManufactureInformation):
        self.ManufactureInformation = ManufactureInformation
    def add_ManufactureInformation(self, value):
        self.ManufactureInformation.append(value)
    def insert_ManufactureInformation_at(self, index, value):
        self.ManufactureInformation.insert(index, value)
    def replace_ManufactureInformation_at(self, index, value):
        self.ManufactureInformation[index] = value
    def get_Service(self):
        return self.Service
    def set_Service(self, Service):
        self.Service = Service
    def get_HandlingUnitOne(self):
        return self.HandlingUnitOne
    def set_HandlingUnitOne(self, HandlingUnitOne):
        self.HandlingUnitOne = HandlingUnitOne
    def get_HandlingUnitTwo(self):
        return self.HandlingUnitTwo
    def set_HandlingUnitTwo(self, HandlingUnitTwo):
        self.HandlingUnitTwo = HandlingUnitTwo
    def get_ExistingShipmentID(self):
        return self.ExistingShipmentID
    def set_ExistingShipmentID(self, ExistingShipmentID):
        self.ExistingShipmentID = ExistingShipmentID
    def get_HandlingInstructions(self):
        return self.HandlingInstructions
    def set_HandlingInstructions(self, HandlingInstructions):
        self.HandlingInstructions = HandlingInstructions
    def get_DeliveryInstructions(self):
        return self.DeliveryInstructions
    def set_DeliveryInstructions(self, DeliveryInstructions):
        self.DeliveryInstructions = DeliveryInstructions
    def get_PickupInstructions(self):
        return self.PickupInstructions
    def set_PickupInstructions(self, PickupInstructions):
        self.PickupInstructions = PickupInstructions
    def get_SpecialInstructions(self):
        return self.SpecialInstructions
    def set_SpecialInstructions(self, SpecialInstructions):
        self.SpecialInstructions = SpecialInstructions
    def get_ShipmentTotalWeight(self):
        return self.ShipmentTotalWeight
    def set_ShipmentTotalWeight(self, ShipmentTotalWeight):
        self.ShipmentTotalWeight = ShipmentTotalWeight
    def get_Commodity(self):
        return self.Commodity
    def set_Commodity(self, Commodity):
        self.Commodity = Commodity
    def add_Commodity(self, value):
        self.Commodity.append(value)
    def insert_Commodity_at(self, index, value):
        self.Commodity.insert(index, value)
    def replace_Commodity_at(self, index, value):
        self.Commodity[index] = value
    def get_Reference(self):
        return self.Reference
    def set_Reference(self, Reference):
        self.Reference = Reference
    def add_Reference(self, value):
        self.Reference.append(value)
    def insert_Reference_at(self, index, value):
        self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value):
        self.Reference[index] = value
    def get_ShipmentServiceOptions(self):
        return self.ShipmentServiceOptions
    def set_ShipmentServiceOptions(self, ShipmentServiceOptions):
        self.ShipmentServiceOptions = ShipmentServiceOptions
    def get_PickupRequest(self):
        return self.PickupRequest
    def set_PickupRequest(self, PickupRequest):
        self.PickupRequest = PickupRequest
    def get_Documents(self):
        return self.Documents
    def set_Documents(self, Documents):
        self.Documents = Documents
    def get_ITNNumber(self):
        return self.ITNNumber
    def set_ITNNumber(self, ITNNumber):
        self.ITNNumber = ITNNumber
    def get_TaxID(self):
        return self.TaxID
    def set_TaxID(self, TaxID):
        self.TaxID = TaxID
    def get_MovementReferenceNumber(self):
        return self.MovementReferenceNumber
    def set_MovementReferenceNumber(self, MovementReferenceNumber):
        self.MovementReferenceNumber = MovementReferenceNumber
    def get_EICNumberAndStatement(self):
        return self.EICNumberAndStatement
    def set_EICNumberAndStatement(self, EICNumberAndStatement):
        self.EICNumberAndStatement = EICNumberAndStatement
    def get_TimeInTransitIndicator(self):
        return self.TimeInTransitIndicator
    def set_TimeInTransitIndicator(self, TimeInTransitIndicator):
        self.TimeInTransitIndicator = TimeInTransitIndicator
    def get_HandlingUnits(self):
        return self.HandlingUnits
    def set_HandlingUnits(self, HandlingUnits):
        self.HandlingUnits = HandlingUnits
    def add_HandlingUnits(self, value):
        self.HandlingUnits.append(value)
    def insert_HandlingUnits_at(self, index, value):
        self.HandlingUnits.insert(index, value)
    def replace_HandlingUnits_at(self, index, value):
        self.HandlingUnits[index] = value
    def get_DensityEligibleIndicator(self):
        return self.DensityEligibleIndicator
    def set_DensityEligibleIndicator(self, DensityEligibleIndicator):
        self.DensityEligibleIndicator = DensityEligibleIndicator
    def hasContent_(self):
        if (
            self.ShipFrom is not None or
            self.ShipperNumber is not None or
            self.ShipTo is not None or
            self.PaymentInformation is not None or
            self.ManufactureInformation or
            self.Service is not None or
            self.HandlingUnitOne is not None or
            self.HandlingUnitTwo is not None or
            self.ExistingShipmentID is not None or
            self.HandlingInstructions is not None or
            self.DeliveryInstructions is not None or
            self.PickupInstructions is not None or
            self.SpecialInstructions is not None or
            self.ShipmentTotalWeight is not None or
            self.Commodity or
            self.Reference or
            self.ShipmentServiceOptions is not None or
            self.PickupRequest is not None or
            self.Documents is not None or
            self.ITNNumber is not None or
            self.TaxID is not None or
            self.MovementReferenceNumber is not None or
            self.EICNumberAndStatement is not None or
            self.TimeInTransitIndicator is not None or
            self.HandlingUnits or
            self.DensityEligibleIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShipFrom is not None:
            namespaceprefix_ = self.ShipFrom_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipFrom_nsprefix_) else ''
            self.ShipFrom.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipFrom', pretty_print=pretty_print)
        if self.ShipperNumber is not None:
            namespaceprefix_ = self.ShipperNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipperNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipperNumber>%s</%sShipperNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShipperNumber), input_name='ShipperNumber')), namespaceprefix_ , eol_))
        if self.ShipTo is not None:
            namespaceprefix_ = self.ShipTo_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipTo_nsprefix_) else ''
            self.ShipTo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipTo', pretty_print=pretty_print)
        if self.PaymentInformation is not None:
            namespaceprefix_ = self.PaymentInformation_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentInformation_nsprefix_) else ''
            self.PaymentInformation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PaymentInformation', pretty_print=pretty_print)
        for ManufactureInformation_ in self.ManufactureInformation:
            namespaceprefix_ = self.ManufactureInformation_nsprefix_ + ':' if (UseCapturedNS_ and self.ManufactureInformation_nsprefix_) else ''
            ManufactureInformation_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ManufactureInformation', pretty_print=pretty_print)
        if self.Service is not None:
            namespaceprefix_ = self.Service_nsprefix_ + ':' if (UseCapturedNS_ and self.Service_nsprefix_) else ''
            self.Service.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Service', pretty_print=pretty_print)
        if self.HandlingUnitOne is not None:
            namespaceprefix_ = self.HandlingUnitOne_nsprefix_ + ':' if (UseCapturedNS_ and self.HandlingUnitOne_nsprefix_) else ''
            self.HandlingUnitOne.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HandlingUnitOne', pretty_print=pretty_print)
        if self.HandlingUnitTwo is not None:
            namespaceprefix_ = self.HandlingUnitTwo_nsprefix_ + ':' if (UseCapturedNS_ and self.HandlingUnitTwo_nsprefix_) else ''
            self.HandlingUnitTwo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HandlingUnitTwo', pretty_print=pretty_print)
        if self.ExistingShipmentID is not None:
            namespaceprefix_ = self.ExistingShipmentID_nsprefix_ + ':' if (UseCapturedNS_ and self.ExistingShipmentID_nsprefix_) else ''
            self.ExistingShipmentID.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExistingShipmentID', pretty_print=pretty_print)
        if self.HandlingInstructions is not None:
            namespaceprefix_ = self.HandlingInstructions_nsprefix_ + ':' if (UseCapturedNS_ and self.HandlingInstructions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHandlingInstructions>%s</%sHandlingInstructions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HandlingInstructions), input_name='HandlingInstructions')), namespaceprefix_ , eol_))
        if self.DeliveryInstructions is not None:
            namespaceprefix_ = self.DeliveryInstructions_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryInstructions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryInstructions>%s</%sDeliveryInstructions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryInstructions), input_name='DeliveryInstructions')), namespaceprefix_ , eol_))
        if self.PickupInstructions is not None:
            namespaceprefix_ = self.PickupInstructions_nsprefix_ + ':' if (UseCapturedNS_ and self.PickupInstructions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPickupInstructions>%s</%sPickupInstructions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PickupInstructions), input_name='PickupInstructions')), namespaceprefix_ , eol_))
        if self.SpecialInstructions is not None:
            namespaceprefix_ = self.SpecialInstructions_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialInstructions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialInstructions>%s</%sSpecialInstructions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SpecialInstructions), input_name='SpecialInstructions')), namespaceprefix_ , eol_))
        if self.ShipmentTotalWeight is not None:
            namespaceprefix_ = self.ShipmentTotalWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentTotalWeight_nsprefix_) else ''
            self.ShipmentTotalWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentTotalWeight', pretty_print=pretty_print)
        for Commodity_ in self.Commodity:
            namespaceprefix_ = self.Commodity_nsprefix_ + ':' if (UseCapturedNS_ and self.Commodity_nsprefix_) else ''
            Commodity_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Commodity', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            namespaceprefix_ = self.Reference_nsprefix_ + ':' if (UseCapturedNS_ and self.Reference_nsprefix_) else ''
            Reference_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Reference', pretty_print=pretty_print)
        if self.ShipmentServiceOptions is not None:
            namespaceprefix_ = self.ShipmentServiceOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentServiceOptions_nsprefix_) else ''
            self.ShipmentServiceOptions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentServiceOptions', pretty_print=pretty_print)
        if self.PickupRequest is not None:
            namespaceprefix_ = self.PickupRequest_nsprefix_ + ':' if (UseCapturedNS_ and self.PickupRequest_nsprefix_) else ''
            self.PickupRequest.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PickupRequest', pretty_print=pretty_print)
        if self.Documents is not None:
            namespaceprefix_ = self.Documents_nsprefix_ + ':' if (UseCapturedNS_ and self.Documents_nsprefix_) else ''
            self.Documents.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Documents', pretty_print=pretty_print)
        if self.ITNNumber is not None:
            namespaceprefix_ = self.ITNNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ITNNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sITNNumber>%s</%sITNNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ITNNumber), input_name='ITNNumber')), namespaceprefix_ , eol_))
        if self.TaxID is not None:
            namespaceprefix_ = self.TaxID_nsprefix_ + ':' if (UseCapturedNS_ and self.TaxID_nsprefix_) else ''
            self.TaxID.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TaxID', pretty_print=pretty_print)
        if self.MovementReferenceNumber is not None:
            namespaceprefix_ = self.MovementReferenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.MovementReferenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMovementReferenceNumber>%s</%sMovementReferenceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MovementReferenceNumber), input_name='MovementReferenceNumber')), namespaceprefix_ , eol_))
        if self.EICNumberAndStatement is not None:
            namespaceprefix_ = self.EICNumberAndStatement_nsprefix_ + ':' if (UseCapturedNS_ and self.EICNumberAndStatement_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEICNumberAndStatement>%s</%sEICNumberAndStatement>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EICNumberAndStatement), input_name='EICNumberAndStatement')), namespaceprefix_ , eol_))
        if self.TimeInTransitIndicator is not None:
            namespaceprefix_ = self.TimeInTransitIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.TimeInTransitIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeInTransitIndicator>%s</%sTimeInTransitIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TimeInTransitIndicator), input_name='TimeInTransitIndicator')), namespaceprefix_ , eol_))
        for HandlingUnits_ in self.HandlingUnits:
            namespaceprefix_ = self.HandlingUnits_nsprefix_ + ':' if (UseCapturedNS_ and self.HandlingUnits_nsprefix_) else ''
            HandlingUnits_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HandlingUnits', pretty_print=pretty_print)
        if self.DensityEligibleIndicator is not None:
            namespaceprefix_ = self.DensityEligibleIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.DensityEligibleIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDensityEligibleIndicator>%s</%sDensityEligibleIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DensityEligibleIndicator), input_name='DensityEligibleIndicator')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ShipFrom':
            obj_ = ShipFromType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipFrom = obj_
            obj_.original_tagname_ = 'ShipFrom'
        elif nodeName_ == 'ShipperNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShipperNumber')
            value_ = self.gds_validate_string(value_, node, 'ShipperNumber')
            self.ShipperNumber = value_
            self.ShipperNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShipTo':
            obj_ = ShipToType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipTo = obj_
            obj_.original_tagname_ = 'ShipTo'
        elif nodeName_ == 'PaymentInformation':
            obj_ = PaymentInformationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PaymentInformation = obj_
            obj_.original_tagname_ = 'PaymentInformation'
        elif nodeName_ == 'ManufactureInformation':
            obj_ = CountryOfManufactureType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ManufactureInformation.append(obj_)
            obj_.original_tagname_ = 'ManufactureInformation'
        elif nodeName_ == 'Service':
            obj_ = ShipCodeDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Service = obj_
            obj_.original_tagname_ = 'Service'
        elif nodeName_ == 'HandlingUnitOne':
            obj_ = HandlingUnitType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HandlingUnitOne = obj_
            obj_.original_tagname_ = 'HandlingUnitOne'
        elif nodeName_ == 'HandlingUnitTwo':
            obj_ = HandlingUnitType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HandlingUnitTwo = obj_
            obj_.original_tagname_ = 'HandlingUnitTwo'
        elif nodeName_ == 'ExistingShipmentID':
            obj_ = ExistingShipmentIDType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExistingShipmentID = obj_
            obj_.original_tagname_ = 'ExistingShipmentID'
        elif nodeName_ == 'HandlingInstructions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HandlingInstructions')
            value_ = self.gds_validate_string(value_, node, 'HandlingInstructions')
            self.HandlingInstructions = value_
            self.HandlingInstructions_nsprefix_ = child_.prefix
        elif nodeName_ == 'DeliveryInstructions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DeliveryInstructions')
            value_ = self.gds_validate_string(value_, node, 'DeliveryInstructions')
            self.DeliveryInstructions = value_
            self.DeliveryInstructions_nsprefix_ = child_.prefix
        elif nodeName_ == 'PickupInstructions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PickupInstructions')
            value_ = self.gds_validate_string(value_, node, 'PickupInstructions')
            self.PickupInstructions = value_
            self.PickupInstructions_nsprefix_ = child_.prefix
        elif nodeName_ == 'SpecialInstructions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecialInstructions')
            value_ = self.gds_validate_string(value_, node, 'SpecialInstructions')
            self.SpecialInstructions = value_
            self.SpecialInstructions_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShipmentTotalWeight':
            obj_ = ShipmentTotalWeightType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentTotalWeight = obj_
            obj_.original_tagname_ = 'ShipmentTotalWeight'
        elif nodeName_ == 'Commodity':
            obj_ = CommodityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Commodity.append(obj_)
            obj_.original_tagname_ = 'Commodity'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'ShipmentServiceOptions':
            obj_ = ShipmentServiceOptionsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentServiceOptions = obj_
            obj_.original_tagname_ = 'ShipmentServiceOptions'
        elif nodeName_ == 'PickupRequest':
            obj_ = PickupRequestType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PickupRequest = obj_
            obj_.original_tagname_ = 'PickupRequest'
        elif nodeName_ == 'Documents':
            obj_ = DocumentsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Documents = obj_
            obj_.original_tagname_ = 'Documents'
        elif nodeName_ == 'ITNNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ITNNumber')
            value_ = self.gds_validate_string(value_, node, 'ITNNumber')
            self.ITNNumber = value_
            self.ITNNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'TaxID':
            obj_ = TaxIDType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TaxID = obj_
            obj_.original_tagname_ = 'TaxID'
        elif nodeName_ == 'MovementReferenceNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MovementReferenceNumber')
            value_ = self.gds_validate_string(value_, node, 'MovementReferenceNumber')
            self.MovementReferenceNumber = value_
            self.MovementReferenceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'EICNumberAndStatement':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EICNumberAndStatement')
            value_ = self.gds_validate_string(value_, node, 'EICNumberAndStatement')
            self.EICNumberAndStatement = value_
            self.EICNumberAndStatement_nsprefix_ = child_.prefix
        elif nodeName_ == 'TimeInTransitIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TimeInTransitIndicator')
            value_ = self.gds_validate_string(value_, node, 'TimeInTransitIndicator')
            self.TimeInTransitIndicator = value_
            self.TimeInTransitIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'HandlingUnits':
            obj_ = HandlingUnitsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HandlingUnits.append(obj_)
            obj_.original_tagname_ = 'HandlingUnits'
        elif nodeName_ == 'DensityEligibleIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DensityEligibleIndicator')
            value_ = self.gds_validate_string(value_, node, 'DensityEligibleIndicator')
            self.DensityEligibleIndicator = value_
            self.DensityEligibleIndicator_nsprefix_ = child_.prefix
# end class ShipmentType


class ShipFromType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Name=None, TaxIdentificationNumber=None, TaxIDType=None, TariffPoint=None, Address=None, AttentionName=None, Phone=None, FaxNumber=None, EMailAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Name = Name
        self.Name_nsprefix_ = None
        self.TaxIdentificationNumber = TaxIdentificationNumber
        self.TaxIdentificationNumber_nsprefix_ = None
        self.TaxIDType = TaxIDType
        self.TaxIDType_nsprefix_ = None
        self.TariffPoint = TariffPoint
        self.TariffPoint_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
        self.AttentionName = AttentionName
        self.AttentionName_nsprefix_ = None
        self.Phone = Phone
        self.Phone_nsprefix_ = None
        self.FaxNumber = FaxNumber
        self.FaxNumber_nsprefix_ = None
        self.EMailAddress = EMailAddress
        self.EMailAddress_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipFromType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipFromType.subclass:
            return ShipFromType.subclass(*args_, **kwargs_)
        else:
            return ShipFromType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_TaxIdentificationNumber(self):
        return self.TaxIdentificationNumber
    def set_TaxIdentificationNumber(self, TaxIdentificationNumber):
        self.TaxIdentificationNumber = TaxIdentificationNumber
    def get_TaxIDType(self):
        return self.TaxIDType
    def set_TaxIDType(self, TaxIDType):
        self.TaxIDType = TaxIDType
    def get_TariffPoint(self):
        return self.TariffPoint
    def set_TariffPoint(self, TariffPoint):
        self.TariffPoint = TariffPoint
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def get_AttentionName(self):
        return self.AttentionName
    def set_AttentionName(self, AttentionName):
        self.AttentionName = AttentionName
    def get_Phone(self):
        return self.Phone
    def set_Phone(self, Phone):
        self.Phone = Phone
    def get_FaxNumber(self):
        return self.FaxNumber
    def set_FaxNumber(self, FaxNumber):
        self.FaxNumber = FaxNumber
    def get_EMailAddress(self):
        return self.EMailAddress
    def set_EMailAddress(self, EMailAddress):
        self.EMailAddress = EMailAddress
    def hasContent_(self):
        if (
            self.Name is not None or
            self.TaxIdentificationNumber is not None or
            self.TaxIDType is not None or
            self.TariffPoint is not None or
            self.Address is not None or
            self.AttentionName is not None or
            self.Phone is not None or
            self.FaxNumber is not None or
            self.EMailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipFromType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipFromType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipFromType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipFromType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipFromType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipFromType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipFromType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.TaxIdentificationNumber is not None:
            namespaceprefix_ = self.TaxIdentificationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TaxIdentificationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxIdentificationNumber>%s</%sTaxIdentificationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TaxIdentificationNumber), input_name='TaxIdentificationNumber')), namespaceprefix_ , eol_))
        if self.TaxIDType is not None:
            namespaceprefix_ = self.TaxIDType_nsprefix_ + ':' if (UseCapturedNS_ and self.TaxIDType_nsprefix_) else ''
            self.TaxIDType.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TaxIDType', pretty_print=pretty_print)
        if self.TariffPoint is not None:
            namespaceprefix_ = self.TariffPoint_nsprefix_ + ':' if (UseCapturedNS_ and self.TariffPoint_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTariffPoint>%s</%sTariffPoint>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TariffPoint), input_name='TariffPoint')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
        if self.AttentionName is not None:
            namespaceprefix_ = self.AttentionName_nsprefix_ + ':' if (UseCapturedNS_ and self.AttentionName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttentionName>%s</%sAttentionName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), namespaceprefix_ , eol_))
        if self.Phone is not None:
            namespaceprefix_ = self.Phone_nsprefix_ + ':' if (UseCapturedNS_ and self.Phone_nsprefix_) else ''
            self.Phone.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Phone', pretty_print=pretty_print)
        if self.FaxNumber is not None:
            namespaceprefix_ = self.FaxNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.FaxNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFaxNumber>%s</%sFaxNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FaxNumber), input_name='FaxNumber')), namespaceprefix_ , eol_))
        if self.EMailAddress is not None:
            namespaceprefix_ = self.EMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Name')
            value_ = self.gds_validate_string(value_, node, 'Name')
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
        elif nodeName_ == 'TaxIdentificationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TaxIdentificationNumber')
            value_ = self.gds_validate_string(value_, node, 'TaxIdentificationNumber')
            self.TaxIdentificationNumber = value_
            self.TaxIdentificationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'TaxIDType':
            obj_ = TaxIDCodeDescType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TaxIDType = obj_
            obj_.original_tagname_ = 'TaxIDType'
        elif nodeName_ == 'TariffPoint':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TariffPoint')
            value_ = self.gds_validate_string(value_, node, 'TariffPoint')
            self.TariffPoint = value_
            self.TariffPoint_nsprefix_ = child_.prefix
        elif nodeName_ == 'Address':
            obj_ = FreightShipAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'AttentionName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AttentionName')
            value_ = self.gds_validate_string(value_, node, 'AttentionName')
            self.AttentionName = value_
            self.AttentionName_nsprefix_ = child_.prefix
        elif nodeName_ == 'Phone':
            obj_ = FreightShipPhoneType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Phone = obj_
            obj_.original_tagname_ = 'Phone'
        elif nodeName_ == 'FaxNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FaxNumber')
            value_ = self.gds_validate_string(value_, node, 'FaxNumber')
            self.FaxNumber = value_
            self.FaxNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'EMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EMailAddress')
            value_ = self.gds_validate_string(value_, node, 'EMailAddress')
            self.EMailAddress = value_
            self.EMailAddress_nsprefix_ = child_.prefix
# end class ShipFromType


class ShipToType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Name=None, TaxIdentificationNumber=None, Address=None, TariffPoint=None, AttentionName=None, Phone=None, FaxNumber=None, EMailAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Name = Name
        self.Name_nsprefix_ = None
        self.TaxIdentificationNumber = TaxIdentificationNumber
        self.TaxIdentificationNumber_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
        self.TariffPoint = TariffPoint
        self.TariffPoint_nsprefix_ = None
        self.AttentionName = AttentionName
        self.AttentionName_nsprefix_ = None
        self.Phone = Phone
        self.Phone_nsprefix_ = None
        self.FaxNumber = FaxNumber
        self.FaxNumber_nsprefix_ = None
        self.EMailAddress = EMailAddress
        self.EMailAddress_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipToType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipToType.subclass:
            return ShipToType.subclass(*args_, **kwargs_)
        else:
            return ShipToType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_TaxIdentificationNumber(self):
        return self.TaxIdentificationNumber
    def set_TaxIdentificationNumber(self, TaxIdentificationNumber):
        self.TaxIdentificationNumber = TaxIdentificationNumber
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def get_TariffPoint(self):
        return self.TariffPoint
    def set_TariffPoint(self, TariffPoint):
        self.TariffPoint = TariffPoint
    def get_AttentionName(self):
        return self.AttentionName
    def set_AttentionName(self, AttentionName):
        self.AttentionName = AttentionName
    def get_Phone(self):
        return self.Phone
    def set_Phone(self, Phone):
        self.Phone = Phone
    def get_FaxNumber(self):
        return self.FaxNumber
    def set_FaxNumber(self, FaxNumber):
        self.FaxNumber = FaxNumber
    def get_EMailAddress(self):
        return self.EMailAddress
    def set_EMailAddress(self, EMailAddress):
        self.EMailAddress = EMailAddress
    def hasContent_(self):
        if (
            self.Name is not None or
            self.TaxIdentificationNumber is not None or
            self.Address is not None or
            self.TariffPoint is not None or
            self.AttentionName is not None or
            self.Phone is not None or
            self.FaxNumber is not None or
            self.EMailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipToType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipToType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipToType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipToType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipToType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipToType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipToType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.TaxIdentificationNumber is not None:
            namespaceprefix_ = self.TaxIdentificationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TaxIdentificationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxIdentificationNumber>%s</%sTaxIdentificationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TaxIdentificationNumber), input_name='TaxIdentificationNumber')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
        if self.TariffPoint is not None:
            namespaceprefix_ = self.TariffPoint_nsprefix_ + ':' if (UseCapturedNS_ and self.TariffPoint_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTariffPoint>%s</%sTariffPoint>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TariffPoint), input_name='TariffPoint')), namespaceprefix_ , eol_))
        if self.AttentionName is not None:
            namespaceprefix_ = self.AttentionName_nsprefix_ + ':' if (UseCapturedNS_ and self.AttentionName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttentionName>%s</%sAttentionName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), namespaceprefix_ , eol_))
        if self.Phone is not None:
            namespaceprefix_ = self.Phone_nsprefix_ + ':' if (UseCapturedNS_ and self.Phone_nsprefix_) else ''
            self.Phone.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Phone', pretty_print=pretty_print)
        if self.FaxNumber is not None:
            namespaceprefix_ = self.FaxNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.FaxNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFaxNumber>%s</%sFaxNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FaxNumber), input_name='FaxNumber')), namespaceprefix_ , eol_))
        if self.EMailAddress is not None:
            namespaceprefix_ = self.EMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Name')
            value_ = self.gds_validate_string(value_, node, 'Name')
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
        elif nodeName_ == 'TaxIdentificationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TaxIdentificationNumber')
            value_ = self.gds_validate_string(value_, node, 'TaxIdentificationNumber')
            self.TaxIdentificationNumber = value_
            self.TaxIdentificationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Address':
            obj_ = FreightShipAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'TariffPoint':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TariffPoint')
            value_ = self.gds_validate_string(value_, node, 'TariffPoint')
            self.TariffPoint = value_
            self.TariffPoint_nsprefix_ = child_.prefix
        elif nodeName_ == 'AttentionName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AttentionName')
            value_ = self.gds_validate_string(value_, node, 'AttentionName')
            self.AttentionName = value_
            self.AttentionName_nsprefix_ = child_.prefix
        elif nodeName_ == 'Phone':
            obj_ = FreightShipPhoneType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Phone = obj_
            obj_.original_tagname_ = 'Phone'
        elif nodeName_ == 'FaxNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FaxNumber')
            value_ = self.gds_validate_string(value_, node, 'FaxNumber')
            self.FaxNumber = value_
            self.FaxNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'EMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EMailAddress')
            value_ = self.gds_validate_string(value_, node, 'EMailAddress')
            self.EMailAddress = value_
            self.EMailAddress_nsprefix_ = child_.prefix
# end class ShipToType


class PaymentInformationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Payer=None, ShipmentBillingOption=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Payer = Payer
        self.Payer_nsprefix_ = None
        self.ShipmentBillingOption = ShipmentBillingOption
        self.ShipmentBillingOption_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PaymentInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PaymentInformationType.subclass:
            return PaymentInformationType.subclass(*args_, **kwargs_)
        else:
            return PaymentInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Payer(self):
        return self.Payer
    def set_Payer(self, Payer):
        self.Payer = Payer
    def get_ShipmentBillingOption(self):
        return self.ShipmentBillingOption
    def set_ShipmentBillingOption(self, ShipmentBillingOption):
        self.ShipmentBillingOption = ShipmentBillingOption
    def hasContent_(self):
        if (
            self.Payer is not None or
            self.ShipmentBillingOption is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PaymentInformationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PaymentInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PaymentInformationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PaymentInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PaymentInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PaymentInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PaymentInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Payer is not None:
            namespaceprefix_ = self.Payer_nsprefix_ + ':' if (UseCapturedNS_ and self.Payer_nsprefix_) else ''
            self.Payer.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Payer', pretty_print=pretty_print)
        if self.ShipmentBillingOption is not None:
            namespaceprefix_ = self.ShipmentBillingOption_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentBillingOption_nsprefix_) else ''
            self.ShipmentBillingOption.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentBillingOption', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Payer':
            obj_ = PayerType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Payer = obj_
            obj_.original_tagname_ = 'Payer'
        elif nodeName_ == 'ShipmentBillingOption':
            obj_ = ShipCodeDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentBillingOption = obj_
            obj_.original_tagname_ = 'ShipmentBillingOption'
# end class PaymentInformationType


class PayerType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Name=None, Address=None, ShipperNumber=None, AttentionName=None, Phone=None, FaxNumber=None, EMailAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Name = Name
        self.Name_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
        self.ShipperNumber = ShipperNumber
        self.ShipperNumber_nsprefix_ = None
        self.AttentionName = AttentionName
        self.AttentionName_nsprefix_ = None
        self.Phone = Phone
        self.Phone_nsprefix_ = None
        self.FaxNumber = FaxNumber
        self.FaxNumber_nsprefix_ = None
        self.EMailAddress = EMailAddress
        self.EMailAddress_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PayerType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PayerType.subclass:
            return PayerType.subclass(*args_, **kwargs_)
        else:
            return PayerType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def get_ShipperNumber(self):
        return self.ShipperNumber
    def set_ShipperNumber(self, ShipperNumber):
        self.ShipperNumber = ShipperNumber
    def get_AttentionName(self):
        return self.AttentionName
    def set_AttentionName(self, AttentionName):
        self.AttentionName = AttentionName
    def get_Phone(self):
        return self.Phone
    def set_Phone(self, Phone):
        self.Phone = Phone
    def get_FaxNumber(self):
        return self.FaxNumber
    def set_FaxNumber(self, FaxNumber):
        self.FaxNumber = FaxNumber
    def get_EMailAddress(self):
        return self.EMailAddress
    def set_EMailAddress(self, EMailAddress):
        self.EMailAddress = EMailAddress
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Address is not None or
            self.ShipperNumber is not None or
            self.AttentionName is not None or
            self.Phone is not None or
            self.FaxNumber is not None or
            self.EMailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PayerType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PayerType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PayerType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PayerType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PayerType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PayerType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PayerType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
        if self.ShipperNumber is not None:
            namespaceprefix_ = self.ShipperNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipperNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipperNumber>%s</%sShipperNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShipperNumber), input_name='ShipperNumber')), namespaceprefix_ , eol_))
        if self.AttentionName is not None:
            namespaceprefix_ = self.AttentionName_nsprefix_ + ':' if (UseCapturedNS_ and self.AttentionName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttentionName>%s</%sAttentionName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), namespaceprefix_ , eol_))
        if self.Phone is not None:
            namespaceprefix_ = self.Phone_nsprefix_ + ':' if (UseCapturedNS_ and self.Phone_nsprefix_) else ''
            self.Phone.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Phone', pretty_print=pretty_print)
        if self.FaxNumber is not None:
            namespaceprefix_ = self.FaxNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.FaxNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFaxNumber>%s</%sFaxNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FaxNumber), input_name='FaxNumber')), namespaceprefix_ , eol_))
        if self.EMailAddress is not None:
            namespaceprefix_ = self.EMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Name')
            value_ = self.gds_validate_string(value_, node, 'Name')
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
        elif nodeName_ == 'Address':
            obj_ = FreightShipAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'ShipperNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShipperNumber')
            value_ = self.gds_validate_string(value_, node, 'ShipperNumber')
            self.ShipperNumber = value_
            self.ShipperNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'AttentionName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AttentionName')
            value_ = self.gds_validate_string(value_, node, 'AttentionName')
            self.AttentionName = value_
            self.AttentionName_nsprefix_ = child_.prefix
        elif nodeName_ == 'Phone':
            obj_ = FreightShipPhoneType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Phone = obj_
            obj_.original_tagname_ = 'Phone'
        elif nodeName_ == 'FaxNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FaxNumber')
            value_ = self.gds_validate_string(value_, node, 'FaxNumber')
            self.FaxNumber = value_
            self.FaxNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'EMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EMailAddress')
            value_ = self.gds_validate_string(value_, node, 'EMailAddress')
            self.EMailAddress = value_
            self.EMailAddress_nsprefix_ = child_.prefix
# end class PayerType


class FreightShipAddressType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AddressLine=None, City=None, StateProvinceCode=None, Town=None, PostalCode=None, CountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if AddressLine is None:
            self.AddressLine = []
        else:
            self.AddressLine = AddressLine
        self.AddressLine_nsprefix_ = None
        self.City = City
        self.City_nsprefix_ = None
        self.StateProvinceCode = StateProvinceCode
        self.StateProvinceCode_nsprefix_ = None
        self.Town = Town
        self.Town_nsprefix_ = None
        self.PostalCode = PostalCode
        self.PostalCode_nsprefix_ = None
        self.CountryCode = CountryCode
        self.CountryCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightShipAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightShipAddressType.subclass:
            return FreightShipAddressType.subclass(*args_, **kwargs_)
        else:
            return FreightShipAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AddressLine(self):
        return self.AddressLine
    def set_AddressLine(self, AddressLine):
        self.AddressLine = AddressLine
    def add_AddressLine(self, value):
        self.AddressLine.append(value)
    def insert_AddressLine_at(self, index, value):
        self.AddressLine.insert(index, value)
    def replace_AddressLine_at(self, index, value):
        self.AddressLine[index] = value
    def get_City(self):
        return self.City
    def set_City(self, City):
        self.City = City
    def get_StateProvinceCode(self):
        return self.StateProvinceCode
    def set_StateProvinceCode(self, StateProvinceCode):
        self.StateProvinceCode = StateProvinceCode
    def get_Town(self):
        return self.Town
    def set_Town(self, Town):
        self.Town = Town
    def get_PostalCode(self):
        return self.PostalCode
    def set_PostalCode(self, PostalCode):
        self.PostalCode = PostalCode
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def hasContent_(self):
        if (
            self.AddressLine or
            self.City is not None or
            self.StateProvinceCode is not None or
            self.Town is not None or
            self.PostalCode is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightShipAddressType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightShipAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightShipAddressType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightShipAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightShipAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightShipAddressType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightShipAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AddressLine_ in self.AddressLine:
            namespaceprefix_ = self.AddressLine_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressLine_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressLine>%s</%sAddressLine>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(AddressLine_), input_name='AddressLine')), namespaceprefix_ , eol_))
        if self.City is not None:
            namespaceprefix_ = self.City_nsprefix_ + ':' if (UseCapturedNS_ and self.City_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCity>%s</%sCity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), namespaceprefix_ , eol_))
        if self.StateProvinceCode is not None:
            namespaceprefix_ = self.StateProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.StateProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStateProvinceCode>%s</%sStateProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StateProvinceCode), input_name='StateProvinceCode')), namespaceprefix_ , eol_))
        if self.Town is not None:
            namespaceprefix_ = self.Town_nsprefix_ + ':' if (UseCapturedNS_ and self.Town_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTown>%s</%sTown>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Town), input_name='Town')), namespaceprefix_ , eol_))
        if self.PostalCode is not None:
            namespaceprefix_ = self.PostalCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PostalCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AddressLine':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AddressLine')
            value_ = self.gds_validate_string(value_, node, 'AddressLine')
            self.AddressLine.append(value_)
            self.AddressLine_nsprefix_ = child_.prefix
        elif nodeName_ == 'City':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'City')
            value_ = self.gds_validate_string(value_, node, 'City')
            self.City = value_
            self.City_nsprefix_ = child_.prefix
        elif nodeName_ == 'StateProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StateProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'StateProvinceCode')
            self.StateProvinceCode = value_
            self.StateProvinceCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'Town':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Town')
            value_ = self.gds_validate_string(value_, node, 'Town')
            self.Town = value_
            self.Town_nsprefix_ = child_.prefix
        elif nodeName_ == 'PostalCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PostalCode')
            value_ = self.gds_validate_string(value_, node, 'PostalCode')
            self.PostalCode = value_
            self.PostalCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
# end class FreightShipAddressType


class FreightShipPhoneType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Number=None, Extension=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Number = Number
        self.Number_nsprefix_ = None
        self.Extension = Extension
        self.Extension_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightShipPhoneType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightShipPhoneType.subclass:
            return FreightShipPhoneType.subclass(*args_, **kwargs_)
        else:
            return FreightShipPhoneType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_Extension(self):
        return self.Extension
    def set_Extension(self, Extension):
        self.Extension = Extension
    def hasContent_(self):
        if (
            self.Number is not None or
            self.Extension is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightShipPhoneType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightShipPhoneType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightShipPhoneType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightShipPhoneType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightShipPhoneType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightShipPhoneType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightShipPhoneType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
        if self.Extension is not None:
            namespaceprefix_ = self.Extension_nsprefix_ + ':' if (UseCapturedNS_ and self.Extension_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExtension>%s</%sExtension>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Extension), input_name='Extension')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
        elif nodeName_ == 'Extension':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Extension')
            value_ = self.gds_validate_string(value_, node, 'Extension')
            self.Extension = value_
            self.Extension_nsprefix_ = child_.prefix
# end class FreightShipPhoneType


class ShipCodeDescriptionType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipCodeDescriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipCodeDescriptionType.subclass:
            return ShipCodeDescriptionType.subclass(*args_, **kwargs_)
        else:
            return ShipCodeDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipCodeDescriptionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipCodeDescriptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipCodeDescriptionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipCodeDescriptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipCodeDescriptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipCodeDescriptionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipCodeDescriptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class ShipCodeDescriptionType


class HandlingUnitType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Quantity=None, Type=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Quantity = Quantity
        self.Quantity_nsprefix_ = None
        self.Type = Type
        self.Type_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HandlingUnitType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HandlingUnitType.subclass:
            return HandlingUnitType.subclass(*args_, **kwargs_)
        else:
            return HandlingUnitType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def hasContent_(self):
        if (
            self.Quantity is not None or
            self.Type is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HandlingUnitType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HandlingUnitType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HandlingUnitType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HandlingUnitType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HandlingUnitType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HandlingUnitType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HandlingUnitType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Quantity), input_name='Quantity')), namespaceprefix_ , eol_))
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            self.Type.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Type', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Quantity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Quantity')
            value_ = self.gds_validate_string(value_, node, 'Quantity')
            self.Quantity = value_
            self.Quantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'Type':
            obj_ = ShipCodeDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Type = obj_
            obj_.original_tagname_ = 'Type'
# end class HandlingUnitType


class ExistingShipmentIDType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ShipmentNumber=None, ConfirmationNumber=None, CreationDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ShipmentNumber = ShipmentNumber
        self.ShipmentNumber_nsprefix_ = None
        self.ConfirmationNumber = ConfirmationNumber
        self.ConfirmationNumber_nsprefix_ = None
        self.CreationDate = CreationDate
        self.CreationDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExistingShipmentIDType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExistingShipmentIDType.subclass:
            return ExistingShipmentIDType.subclass(*args_, **kwargs_)
        else:
            return ExistingShipmentIDType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ShipmentNumber(self):
        return self.ShipmentNumber
    def set_ShipmentNumber(self, ShipmentNumber):
        self.ShipmentNumber = ShipmentNumber
    def get_ConfirmationNumber(self):
        return self.ConfirmationNumber
    def set_ConfirmationNumber(self, ConfirmationNumber):
        self.ConfirmationNumber = ConfirmationNumber
    def get_CreationDate(self):
        return self.CreationDate
    def set_CreationDate(self, CreationDate):
        self.CreationDate = CreationDate
    def hasContent_(self):
        if (
            self.ShipmentNumber is not None or
            self.ConfirmationNumber is not None or
            self.CreationDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExistingShipmentIDType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExistingShipmentIDType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ExistingShipmentIDType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ExistingShipmentIDType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ExistingShipmentIDType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ExistingShipmentIDType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExistingShipmentIDType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShipmentNumber is not None:
            namespaceprefix_ = self.ShipmentNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipmentNumber>%s</%sShipmentNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShipmentNumber), input_name='ShipmentNumber')), namespaceprefix_ , eol_))
        if self.ConfirmationNumber is not None:
            namespaceprefix_ = self.ConfirmationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ConfirmationNumber_nsprefix_) else ''
            self.ConfirmationNumber.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ConfirmationNumber', pretty_print=pretty_print)
        if self.CreationDate is not None:
            namespaceprefix_ = self.CreationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.CreationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreationDate>%s</%sCreationDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreationDate), input_name='CreationDate')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ShipmentNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShipmentNumber')
            value_ = self.gds_validate_string(value_, node, 'ShipmentNumber')
            self.ShipmentNumber = value_
            self.ShipmentNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ConfirmationNumber':
            obj_ = ConfirmationNumberType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ConfirmationNumber = obj_
            obj_.original_tagname_ = 'ConfirmationNumber'
        elif nodeName_ == 'CreationDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CreationDate')
            value_ = self.gds_validate_string(value_, node, 'CreationDate')
            self.CreationDate = value_
            self.CreationDate_nsprefix_ = child_.prefix
# end class ExistingShipmentIDType


class CommodityType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CommodityID=None, Description=None, Weight=None, Dimensions=None, NumberOfPieces=None, PackagingType=None, DangerousGoodsIndicator=None, CommodityValue=None, FreightClass=None, NMFCCommodityCode=None, NMFCCommodity=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CommodityID = CommodityID
        self.CommodityID_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.Weight = Weight
        self.Weight_nsprefix_ = None
        self.Dimensions = Dimensions
        self.Dimensions_nsprefix_ = None
        self.NumberOfPieces = NumberOfPieces
        self.NumberOfPieces_nsprefix_ = None
        self.PackagingType = PackagingType
        self.PackagingType_nsprefix_ = None
        self.DangerousGoodsIndicator = DangerousGoodsIndicator
        self.DangerousGoodsIndicator_nsprefix_ = None
        self.CommodityValue = CommodityValue
        self.CommodityValue_nsprefix_ = None
        self.FreightClass = FreightClass
        self.FreightClass_nsprefix_ = None
        self.NMFCCommodityCode = NMFCCommodityCode
        self.NMFCCommodityCode_nsprefix_ = None
        self.NMFCCommodity = NMFCCommodity
        self.NMFCCommodity_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityType.subclass:
            return CommodityType.subclass(*args_, **kwargs_)
        else:
            return CommodityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CommodityID(self):
        return self.CommodityID
    def set_CommodityID(self, CommodityID):
        self.CommodityID = CommodityID
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_Weight(self):
        return self.Weight
    def set_Weight(self, Weight):
        self.Weight = Weight
    def get_Dimensions(self):
        return self.Dimensions
    def set_Dimensions(self, Dimensions):
        self.Dimensions = Dimensions
    def get_NumberOfPieces(self):
        return self.NumberOfPieces
    def set_NumberOfPieces(self, NumberOfPieces):
        self.NumberOfPieces = NumberOfPieces
    def get_PackagingType(self):
        return self.PackagingType
    def set_PackagingType(self, PackagingType):
        self.PackagingType = PackagingType
    def get_DangerousGoodsIndicator(self):
        return self.DangerousGoodsIndicator
    def set_DangerousGoodsIndicator(self, DangerousGoodsIndicator):
        self.DangerousGoodsIndicator = DangerousGoodsIndicator
    def get_CommodityValue(self):
        return self.CommodityValue
    def set_CommodityValue(self, CommodityValue):
        self.CommodityValue = CommodityValue
    def get_FreightClass(self):
        return self.FreightClass
    def set_FreightClass(self, FreightClass):
        self.FreightClass = FreightClass
    def get_NMFCCommodityCode(self):
        return self.NMFCCommodityCode
    def set_NMFCCommodityCode(self, NMFCCommodityCode):
        self.NMFCCommodityCode = NMFCCommodityCode
    def get_NMFCCommodity(self):
        return self.NMFCCommodity
    def set_NMFCCommodity(self, NMFCCommodity):
        self.NMFCCommodity = NMFCCommodity
    def hasContent_(self):
        if (
            self.CommodityID is not None or
            self.Description is not None or
            self.Weight is not None or
            self.Dimensions is not None or
            self.NumberOfPieces is not None or
            self.PackagingType is not None or
            self.DangerousGoodsIndicator is not None or
            self.CommodityValue is not None or
            self.FreightClass is not None or
            self.NMFCCommodityCode is not None or
            self.NMFCCommodity is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CommodityType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CommodityType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CommodityType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CommodityType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CommodityType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CommodityType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CommodityType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityID is not None:
            namespaceprefix_ = self.CommodityID_nsprefix_ + ':' if (UseCapturedNS_ and self.CommodityID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommodityID>%s</%sCommodityID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CommodityID), input_name='CommodityID')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.Weight is not None:
            namespaceprefix_ = self.Weight_nsprefix_ + ':' if (UseCapturedNS_ and self.Weight_nsprefix_) else ''
            self.Weight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Weight', pretty_print=pretty_print)
        if self.Dimensions is not None:
            namespaceprefix_ = self.Dimensions_nsprefix_ + ':' if (UseCapturedNS_ and self.Dimensions_nsprefix_) else ''
            self.Dimensions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Dimensions', pretty_print=pretty_print)
        if self.NumberOfPieces is not None:
            namespaceprefix_ = self.NumberOfPieces_nsprefix_ + ':' if (UseCapturedNS_ and self.NumberOfPieces_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfPieces>%s</%sNumberOfPieces>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NumberOfPieces), input_name='NumberOfPieces')), namespaceprefix_ , eol_))
        if self.PackagingType is not None:
            namespaceprefix_ = self.PackagingType_nsprefix_ + ':' if (UseCapturedNS_ and self.PackagingType_nsprefix_) else ''
            self.PackagingType.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackagingType', pretty_print=pretty_print)
        if self.DangerousGoodsIndicator is not None:
            namespaceprefix_ = self.DangerousGoodsIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.DangerousGoodsIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDangerousGoodsIndicator>%s</%sDangerousGoodsIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DangerousGoodsIndicator), input_name='DangerousGoodsIndicator')), namespaceprefix_ , eol_))
        if self.CommodityValue is not None:
            namespaceprefix_ = self.CommodityValue_nsprefix_ + ':' if (UseCapturedNS_ and self.CommodityValue_nsprefix_) else ''
            self.CommodityValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CommodityValue', pretty_print=pretty_print)
        if self.FreightClass is not None:
            namespaceprefix_ = self.FreightClass_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightClass_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFreightClass>%s</%sFreightClass>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FreightClass), input_name='FreightClass')), namespaceprefix_ , eol_))
        if self.NMFCCommodityCode is not None:
            namespaceprefix_ = self.NMFCCommodityCode_nsprefix_ + ':' if (UseCapturedNS_ and self.NMFCCommodityCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNMFCCommodityCode>%s</%sNMFCCommodityCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NMFCCommodityCode), input_name='NMFCCommodityCode')), namespaceprefix_ , eol_))
        if self.NMFCCommodity is not None:
            namespaceprefix_ = self.NMFCCommodity_nsprefix_ + ':' if (UseCapturedNS_ and self.NMFCCommodity_nsprefix_) else ''
            self.NMFCCommodity.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NMFCCommodity', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CommodityID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CommodityID')
            value_ = self.gds_validate_string(value_, node, 'CommodityID')
            self.CommodityID = value_
            self.CommodityID_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'Weight':
            obj_ = WeightType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
        elif nodeName_ == 'Dimensions':
            obj_ = DimensionsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
        elif nodeName_ == 'NumberOfPieces':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NumberOfPieces')
            value_ = self.gds_validate_string(value_, node, 'NumberOfPieces')
            self.NumberOfPieces = value_
            self.NumberOfPieces_nsprefix_ = child_.prefix
        elif nodeName_ == 'PackagingType':
            obj_ = ShipCodeDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackagingType = obj_
            obj_.original_tagname_ = 'PackagingType'
        elif nodeName_ == 'DangerousGoodsIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DangerousGoodsIndicator')
            value_ = self.gds_validate_string(value_, node, 'DangerousGoodsIndicator')
            self.DangerousGoodsIndicator = value_
            self.DangerousGoodsIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'CommodityValue':
            obj_ = CommodityValueType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CommodityValue = obj_
            obj_.original_tagname_ = 'CommodityValue'
        elif nodeName_ == 'FreightClass':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FreightClass')
            value_ = self.gds_validate_string(value_, node, 'FreightClass')
            self.FreightClass = value_
            self.FreightClass_nsprefix_ = child_.prefix
        elif nodeName_ == 'NMFCCommodityCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NMFCCommodityCode')
            value_ = self.gds_validate_string(value_, node, 'NMFCCommodityCode')
            self.NMFCCommodityCode = value_
            self.NMFCCommodityCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'NMFCCommodity':
            obj_ = NMFCCommodityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NMFCCommodity = obj_
            obj_.original_tagname_ = 'NMFCCommodity'
# end class CommodityType


class NMFCCommodityType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PrimeCode=None, SubCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PrimeCode = PrimeCode
        self.PrimeCode_nsprefix_ = None
        self.SubCode = SubCode
        self.SubCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NMFCCommodityType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NMFCCommodityType.subclass:
            return NMFCCommodityType.subclass(*args_, **kwargs_)
        else:
            return NMFCCommodityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PrimeCode(self):
        return self.PrimeCode
    def set_PrimeCode(self, PrimeCode):
        self.PrimeCode = PrimeCode
    def get_SubCode(self):
        return self.SubCode
    def set_SubCode(self, SubCode):
        self.SubCode = SubCode
    def hasContent_(self):
        if (
            self.PrimeCode is not None or
            self.SubCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NMFCCommodityType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NMFCCommodityType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NMFCCommodityType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NMFCCommodityType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NMFCCommodityType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NMFCCommodityType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NMFCCommodityType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PrimeCode is not None:
            namespaceprefix_ = self.PrimeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PrimeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrimeCode>%s</%sPrimeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrimeCode), input_name='PrimeCode')), namespaceprefix_ , eol_))
        if self.SubCode is not None:
            namespaceprefix_ = self.SubCode_nsprefix_ + ':' if (UseCapturedNS_ and self.SubCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSubCode>%s</%sSubCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SubCode), input_name='SubCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PrimeCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PrimeCode')
            value_ = self.gds_validate_string(value_, node, 'PrimeCode')
            self.PrimeCode = value_
            self.PrimeCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'SubCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SubCode')
            value_ = self.gds_validate_string(value_, node, 'SubCode')
            self.SubCode = value_
            self.SubCode_nsprefix_ = child_.prefix
# end class NMFCCommodityType


class WeightType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.UnitOfMeasurement_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WeightType.subclass:
            return WeightType.subclass(*args_, **kwargs_)
        else:
            return WeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UnitOfMeasurement(self):
        return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement):
        self.UnitOfMeasurement = UnitOfMeasurement
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WeightType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WeightType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'WeightType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='WeightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='WeightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='WeightType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WeightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitOfMeasurement is not None:
            namespaceprefix_ = self.UnitOfMeasurement_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitOfMeasurement_nsprefix_) else ''
            self.UnitOfMeasurement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = FreightShipUnitOfMeasurementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
# end class WeightType


class FreightShipUnitOfMeasurementType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightShipUnitOfMeasurementType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightShipUnitOfMeasurementType.subclass:
            return FreightShipUnitOfMeasurementType.subclass(*args_, **kwargs_)
        else:
            return FreightShipUnitOfMeasurementType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightShipUnitOfMeasurementType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightShipUnitOfMeasurementType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightShipUnitOfMeasurementType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightShipUnitOfMeasurementType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightShipUnitOfMeasurementType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightShipUnitOfMeasurementType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightShipUnitOfMeasurementType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class FreightShipUnitOfMeasurementType


class DimensionsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Length=None, Width=None, Height=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.UnitOfMeasurement_nsprefix_ = None
        self.Length = Length
        self.Length_nsprefix_ = None
        self.Width = Width
        self.Width_nsprefix_ = None
        self.Height = Height
        self.Height_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DimensionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DimensionsType.subclass:
            return DimensionsType.subclass(*args_, **kwargs_)
        else:
            return DimensionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UnitOfMeasurement(self):
        return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement):
        self.UnitOfMeasurement = UnitOfMeasurement
    def get_Length(self):
        return self.Length
    def set_Length(self, Length):
        self.Length = Length
    def get_Width(self):
        return self.Width
    def set_Width(self, Width):
        self.Width = Width
    def get_Height(self):
        return self.Height
    def set_Height(self, Height):
        self.Height = Height
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Length is not None or
            self.Width is not None or
            self.Height is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DimensionsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DimensionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DimensionsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DimensionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DimensionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DimensionsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DimensionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitOfMeasurement is not None:
            namespaceprefix_ = self.UnitOfMeasurement_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitOfMeasurement_nsprefix_) else ''
            self.UnitOfMeasurement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Length is not None:
            namespaceprefix_ = self.Length_nsprefix_ + ':' if (UseCapturedNS_ and self.Length_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLength>%s</%sLength>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Length), input_name='Length')), namespaceprefix_ , eol_))
        if self.Width is not None:
            namespaceprefix_ = self.Width_nsprefix_ + ':' if (UseCapturedNS_ and self.Width_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWidth>%s</%sWidth>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Width), input_name='Width')), namespaceprefix_ , eol_))
        if self.Height is not None:
            namespaceprefix_ = self.Height_nsprefix_ + ':' if (UseCapturedNS_ and self.Height_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHeight>%s</%sHeight>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Height), input_name='Height')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = FreightShipUnitOfMeasurementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Length':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Length')
            value_ = self.gds_validate_string(value_, node, 'Length')
            self.Length = value_
            self.Length_nsprefix_ = child_.prefix
        elif nodeName_ == 'Width':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Width')
            value_ = self.gds_validate_string(value_, node, 'Width')
            self.Width = value_
            self.Width_nsprefix_ = child_.prefix
        elif nodeName_ == 'Height':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Height')
            value_ = self.gds_validate_string(value_, node, 'Height')
            self.Height = value_
            self.Height_nsprefix_ = child_.prefix
# end class DimensionsType


class CommodityValueType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CurrencyCode = CurrencyCode
        self.CurrencyCode_nsprefix_ = None
        self.MonetaryValue = MonetaryValue
        self.MonetaryValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityValueType.subclass:
            return CommodityValueType.subclass(*args_, **kwargs_)
        else:
            return CommodityValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CurrencyCode(self):
        return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode):
        self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self):
        return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue):
        self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CommodityValueType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CommodityValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CommodityValueType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CommodityValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CommodityValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CommodityValueType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CommodityValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            namespaceprefix_ = self.CurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyCode>%s</%sCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), namespaceprefix_ , eol_))
        if self.MonetaryValue is not None:
            namespaceprefix_ = self.MonetaryValue_nsprefix_ + ':' if (UseCapturedNS_ and self.MonetaryValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMonetaryValue>%s</%sMonetaryValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CurrencyCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'CurrencyCode')
            self.CurrencyCode = value_
            self.CurrencyCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'MonetaryValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MonetaryValue')
            value_ = self.gds_validate_string(value_, node, 'MonetaryValue')
            self.MonetaryValue = value_
            self.MonetaryValue_nsprefix_ = child_.prefix
# end class CommodityValueType


class ReferenceType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Number=None, BarCodeIndicator=None, NumberOfCartons=None, Weight=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Number = Number
        self.Number_nsprefix_ = None
        self.BarCodeIndicator = BarCodeIndicator
        self.BarCodeIndicator_nsprefix_ = None
        self.NumberOfCartons = NumberOfCartons
        self.NumberOfCartons_nsprefix_ = None
        self.Weight = Weight
        self.Weight_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType.subclass:
            return ReferenceType.subclass(*args_, **kwargs_)
        else:
            return ReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_BarCodeIndicator(self):
        return self.BarCodeIndicator
    def set_BarCodeIndicator(self, BarCodeIndicator):
        self.BarCodeIndicator = BarCodeIndicator
    def get_NumberOfCartons(self):
        return self.NumberOfCartons
    def set_NumberOfCartons(self, NumberOfCartons):
        self.NumberOfCartons = NumberOfCartons
    def get_Weight(self):
        return self.Weight
    def set_Weight(self, Weight):
        self.Weight = Weight
    def hasContent_(self):
        if (
            self.Number is not None or
            self.BarCodeIndicator is not None or
            self.NumberOfCartons is not None or
            self.Weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReferenceType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReferenceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReferenceType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReferenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReferenceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReferenceType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReferenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            self.Number.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Number', pretty_print=pretty_print)
        if self.BarCodeIndicator is not None:
            namespaceprefix_ = self.BarCodeIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.BarCodeIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBarCodeIndicator>%s</%sBarCodeIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BarCodeIndicator), input_name='BarCodeIndicator')), namespaceprefix_ , eol_))
        if self.NumberOfCartons is not None:
            namespaceprefix_ = self.NumberOfCartons_nsprefix_ + ':' if (UseCapturedNS_ and self.NumberOfCartons_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfCartons>%s</%sNumberOfCartons>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NumberOfCartons), input_name='NumberOfCartons')), namespaceprefix_ , eol_))
        if self.Weight is not None:
            namespaceprefix_ = self.Weight_nsprefix_ + ':' if (UseCapturedNS_ and self.Weight_nsprefix_) else ''
            self.Weight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Weight', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Number':
            obj_ = ReferenceNumberType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Number = obj_
            obj_.original_tagname_ = 'Number'
        elif nodeName_ == 'BarCodeIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BarCodeIndicator')
            value_ = self.gds_validate_string(value_, node, 'BarCodeIndicator')
            self.BarCodeIndicator = value_
            self.BarCodeIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'NumberOfCartons':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NumberOfCartons')
            value_ = self.gds_validate_string(value_, node, 'NumberOfCartons')
            self.NumberOfCartons = value_
            self.NumberOfCartons_nsprefix_ = child_.prefix
        elif nodeName_ == 'Weight':
            obj_ = WeightType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
# end class ReferenceType


class ReferenceNumberType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceNumberType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceNumberType.subclass:
            return ReferenceNumberType.subclass(*args_, **kwargs_)
        else:
            return ReferenceNumberType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReferenceNumberType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReferenceNumberType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReferenceNumberType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReferenceNumberType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReferenceNumberType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReferenceNumberType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReferenceNumberType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
# end class ReferenceNumberType


class ShipmentServiceOptionsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EMailInformation=None, PickupOptions=None, DeliveryOptions=None, OverSeasLeg=None, COD=None, DangerousGoods=None, SortingAndSegregating=None, DeclaredValue=None, ExcessDeclaredValue=None, CustomsValue=None, DeliveryDutiesPaidIndicator=None, DeliveryDutiesUnpaidIndicator=None, HandlingCharge=None, CustomsClearanceIndicator=None, FreezableProtectionIndicator=None, ExtremeLengthIndicator=None, LinearFeet=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if EMailInformation is None:
            self.EMailInformation = []
        else:
            self.EMailInformation = EMailInformation
        self.EMailInformation_nsprefix_ = None
        self.PickupOptions = PickupOptions
        self.PickupOptions_nsprefix_ = None
        self.DeliveryOptions = DeliveryOptions
        self.DeliveryOptions_nsprefix_ = None
        self.OverSeasLeg = OverSeasLeg
        self.OverSeasLeg_nsprefix_ = None
        self.COD = COD
        self.COD_nsprefix_ = None
        self.DangerousGoods = DangerousGoods
        self.DangerousGoods_nsprefix_ = None
        self.SortingAndSegregating = SortingAndSegregating
        self.SortingAndSegregating_nsprefix_ = None
        self.DeclaredValue = DeclaredValue
        self.DeclaredValue_nsprefix_ = None
        self.ExcessDeclaredValue = ExcessDeclaredValue
        self.ExcessDeclaredValue_nsprefix_ = None
        self.CustomsValue = CustomsValue
        self.CustomsValue_nsprefix_ = None
        self.DeliveryDutiesPaidIndicator = DeliveryDutiesPaidIndicator
        self.DeliveryDutiesPaidIndicator_nsprefix_ = None
        self.DeliveryDutiesUnpaidIndicator = DeliveryDutiesUnpaidIndicator
        self.DeliveryDutiesUnpaidIndicator_nsprefix_ = None
        self.HandlingCharge = HandlingCharge
        self.HandlingCharge_nsprefix_ = None
        self.CustomsClearanceIndicator = CustomsClearanceIndicator
        self.CustomsClearanceIndicator_nsprefix_ = None
        self.FreezableProtectionIndicator = FreezableProtectionIndicator
        self.FreezableProtectionIndicator_nsprefix_ = None
        self.ExtremeLengthIndicator = ExtremeLengthIndicator
        self.ExtremeLengthIndicator_nsprefix_ = None
        self.LinearFeet = LinearFeet
        self.LinearFeet_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentServiceOptionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentServiceOptionsType.subclass:
            return ShipmentServiceOptionsType.subclass(*args_, **kwargs_)
        else:
            return ShipmentServiceOptionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EMailInformation(self):
        return self.EMailInformation
    def set_EMailInformation(self, EMailInformation):
        self.EMailInformation = EMailInformation
    def add_EMailInformation(self, value):
        self.EMailInformation.append(value)
    def insert_EMailInformation_at(self, index, value):
        self.EMailInformation.insert(index, value)
    def replace_EMailInformation_at(self, index, value):
        self.EMailInformation[index] = value
    def get_PickupOptions(self):
        return self.PickupOptions
    def set_PickupOptions(self, PickupOptions):
        self.PickupOptions = PickupOptions
    def get_DeliveryOptions(self):
        return self.DeliveryOptions
    def set_DeliveryOptions(self, DeliveryOptions):
        self.DeliveryOptions = DeliveryOptions
    def get_OverSeasLeg(self):
        return self.OverSeasLeg
    def set_OverSeasLeg(self, OverSeasLeg):
        self.OverSeasLeg = OverSeasLeg
    def get_COD(self):
        return self.COD
    def set_COD(self, COD):
        self.COD = COD
    def get_DangerousGoods(self):
        return self.DangerousGoods
    def set_DangerousGoods(self, DangerousGoods):
        self.DangerousGoods = DangerousGoods
    def get_SortingAndSegregating(self):
        return self.SortingAndSegregating
    def set_SortingAndSegregating(self, SortingAndSegregating):
        self.SortingAndSegregating = SortingAndSegregating
    def get_DeclaredValue(self):
        return self.DeclaredValue
    def set_DeclaredValue(self, DeclaredValue):
        self.DeclaredValue = DeclaredValue
    def get_ExcessDeclaredValue(self):
        return self.ExcessDeclaredValue
    def set_ExcessDeclaredValue(self, ExcessDeclaredValue):
        self.ExcessDeclaredValue = ExcessDeclaredValue
    def get_CustomsValue(self):
        return self.CustomsValue
    def set_CustomsValue(self, CustomsValue):
        self.CustomsValue = CustomsValue
    def get_DeliveryDutiesPaidIndicator(self):
        return self.DeliveryDutiesPaidIndicator
    def set_DeliveryDutiesPaidIndicator(self, DeliveryDutiesPaidIndicator):
        self.DeliveryDutiesPaidIndicator = DeliveryDutiesPaidIndicator
    def get_DeliveryDutiesUnpaidIndicator(self):
        return self.DeliveryDutiesUnpaidIndicator
    def set_DeliveryDutiesUnpaidIndicator(self, DeliveryDutiesUnpaidIndicator):
        self.DeliveryDutiesUnpaidIndicator = DeliveryDutiesUnpaidIndicator
    def get_HandlingCharge(self):
        return self.HandlingCharge
    def set_HandlingCharge(self, HandlingCharge):
        self.HandlingCharge = HandlingCharge
    def get_CustomsClearanceIndicator(self):
        return self.CustomsClearanceIndicator
    def set_CustomsClearanceIndicator(self, CustomsClearanceIndicator):
        self.CustomsClearanceIndicator = CustomsClearanceIndicator
    def get_FreezableProtectionIndicator(self):
        return self.FreezableProtectionIndicator
    def set_FreezableProtectionIndicator(self, FreezableProtectionIndicator):
        self.FreezableProtectionIndicator = FreezableProtectionIndicator
    def get_ExtremeLengthIndicator(self):
        return self.ExtremeLengthIndicator
    def set_ExtremeLengthIndicator(self, ExtremeLengthIndicator):
        self.ExtremeLengthIndicator = ExtremeLengthIndicator
    def get_LinearFeet(self):
        return self.LinearFeet
    def set_LinearFeet(self, LinearFeet):
        self.LinearFeet = LinearFeet
    def hasContent_(self):
        if (
            self.EMailInformation or
            self.PickupOptions is not None or
            self.DeliveryOptions is not None or
            self.OverSeasLeg is not None or
            self.COD is not None or
            self.DangerousGoods is not None or
            self.SortingAndSegregating is not None or
            self.DeclaredValue is not None or
            self.ExcessDeclaredValue is not None or
            self.CustomsValue is not None or
            self.DeliveryDutiesPaidIndicator is not None or
            self.DeliveryDutiesUnpaidIndicator is not None or
            self.HandlingCharge is not None or
            self.CustomsClearanceIndicator is not None or
            self.FreezableProtectionIndicator is not None or
            self.ExtremeLengthIndicator is not None or
            self.LinearFeet is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentServiceOptionsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentServiceOptionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentServiceOptionsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentServiceOptionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentServiceOptionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentServiceOptionsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentServiceOptionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for EMailInformation_ in self.EMailInformation:
            namespaceprefix_ = self.EMailInformation_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailInformation_nsprefix_) else ''
            EMailInformation_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EMailInformation', pretty_print=pretty_print)
        if self.PickupOptions is not None:
            namespaceprefix_ = self.PickupOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.PickupOptions_nsprefix_) else ''
            self.PickupOptions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PickupOptions', pretty_print=pretty_print)
        if self.DeliveryOptions is not None:
            namespaceprefix_ = self.DeliveryOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryOptions_nsprefix_) else ''
            self.DeliveryOptions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DeliveryOptions', pretty_print=pretty_print)
        if self.OverSeasLeg is not None:
            namespaceprefix_ = self.OverSeasLeg_nsprefix_ + ':' if (UseCapturedNS_ and self.OverSeasLeg_nsprefix_) else ''
            self.OverSeasLeg.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OverSeasLeg', pretty_print=pretty_print)
        if self.COD is not None:
            namespaceprefix_ = self.COD_nsprefix_ + ':' if (UseCapturedNS_ and self.COD_nsprefix_) else ''
            self.COD.export(outfile, level, namespaceprefix_, namespacedef_='', name_='COD', pretty_print=pretty_print)
        if self.DangerousGoods is not None:
            namespaceprefix_ = self.DangerousGoods_nsprefix_ + ':' if (UseCapturedNS_ and self.DangerousGoods_nsprefix_) else ''
            self.DangerousGoods.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DangerousGoods', pretty_print=pretty_print)
        if self.SortingAndSegregating is not None:
            namespaceprefix_ = self.SortingAndSegregating_nsprefix_ + ':' if (UseCapturedNS_ and self.SortingAndSegregating_nsprefix_) else ''
            self.SortingAndSegregating.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SortingAndSegregating', pretty_print=pretty_print)
        if self.DeclaredValue is not None:
            namespaceprefix_ = self.DeclaredValue_nsprefix_ + ':' if (UseCapturedNS_ and self.DeclaredValue_nsprefix_) else ''
            self.DeclaredValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DeclaredValue', pretty_print=pretty_print)
        if self.ExcessDeclaredValue is not None:
            namespaceprefix_ = self.ExcessDeclaredValue_nsprefix_ + ':' if (UseCapturedNS_ and self.ExcessDeclaredValue_nsprefix_) else ''
            self.ExcessDeclaredValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExcessDeclaredValue', pretty_print=pretty_print)
        if self.CustomsValue is not None:
            namespaceprefix_ = self.CustomsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsValue_nsprefix_) else ''
            self.CustomsValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomsValue', pretty_print=pretty_print)
        if self.DeliveryDutiesPaidIndicator is not None:
            namespaceprefix_ = self.DeliveryDutiesPaidIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryDutiesPaidIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryDutiesPaidIndicator>%s</%sDeliveryDutiesPaidIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryDutiesPaidIndicator), input_name='DeliveryDutiesPaidIndicator')), namespaceprefix_ , eol_))
        if self.DeliveryDutiesUnpaidIndicator is not None:
            namespaceprefix_ = self.DeliveryDutiesUnpaidIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryDutiesUnpaidIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryDutiesUnpaidIndicator>%s</%sDeliveryDutiesUnpaidIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryDutiesUnpaidIndicator), input_name='DeliveryDutiesUnpaidIndicator')), namespaceprefix_ , eol_))
        if self.HandlingCharge is not None:
            namespaceprefix_ = self.HandlingCharge_nsprefix_ + ':' if (UseCapturedNS_ and self.HandlingCharge_nsprefix_) else ''
            self.HandlingCharge.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HandlingCharge', pretty_print=pretty_print)
        if self.CustomsClearanceIndicator is not None:
            namespaceprefix_ = self.CustomsClearanceIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsClearanceIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomsClearanceIndicator>%s</%sCustomsClearanceIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomsClearanceIndicator), input_name='CustomsClearanceIndicator')), namespaceprefix_ , eol_))
        if self.FreezableProtectionIndicator is not None:
            namespaceprefix_ = self.FreezableProtectionIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.FreezableProtectionIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFreezableProtectionIndicator>%s</%sFreezableProtectionIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FreezableProtectionIndicator), input_name='FreezableProtectionIndicator')), namespaceprefix_ , eol_))
        if self.ExtremeLengthIndicator is not None:
            namespaceprefix_ = self.ExtremeLengthIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.ExtremeLengthIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExtremeLengthIndicator>%s</%sExtremeLengthIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExtremeLengthIndicator), input_name='ExtremeLengthIndicator')), namespaceprefix_ , eol_))
        if self.LinearFeet is not None:
            namespaceprefix_ = self.LinearFeet_nsprefix_ + ':' if (UseCapturedNS_ and self.LinearFeet_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLinearFeet>%s</%sLinearFeet>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LinearFeet), input_name='LinearFeet')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EMailInformation':
            obj_ = EMailInformationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EMailInformation.append(obj_)
            obj_.original_tagname_ = 'EMailInformation'
        elif nodeName_ == 'PickupOptions':
            obj_ = PickupOptionsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PickupOptions = obj_
            obj_.original_tagname_ = 'PickupOptions'
        elif nodeName_ == 'DeliveryOptions':
            obj_ = DeliveryOptionsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DeliveryOptions = obj_
            obj_.original_tagname_ = 'DeliveryOptions'
        elif nodeName_ == 'OverSeasLeg':
            obj_ = OverSeasLegType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OverSeasLeg = obj_
            obj_.original_tagname_ = 'OverSeasLeg'
        elif nodeName_ == 'COD':
            obj_ = CODType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.COD = obj_
            obj_.original_tagname_ = 'COD'
        elif nodeName_ == 'DangerousGoods':
            obj_ = DangerousGoodsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DangerousGoods = obj_
            obj_.original_tagname_ = 'DangerousGoods'
        elif nodeName_ == 'SortingAndSegregating':
            obj_ = SortingAndSegregatingType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SortingAndSegregating = obj_
            obj_.original_tagname_ = 'SortingAndSegregating'
        elif nodeName_ == 'DeclaredValue':
            obj_ = DeclaredValueType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DeclaredValue = obj_
            obj_.original_tagname_ = 'DeclaredValue'
        elif nodeName_ == 'ExcessDeclaredValue':
            obj_ = DeclaredValueType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExcessDeclaredValue = obj_
            obj_.original_tagname_ = 'ExcessDeclaredValue'
        elif nodeName_ == 'CustomsValue':
            obj_ = CustomsValueType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomsValue = obj_
            obj_.original_tagname_ = 'CustomsValue'
        elif nodeName_ == 'DeliveryDutiesPaidIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DeliveryDutiesPaidIndicator')
            value_ = self.gds_validate_string(value_, node, 'DeliveryDutiesPaidIndicator')
            self.DeliveryDutiesPaidIndicator = value_
            self.DeliveryDutiesPaidIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'DeliveryDutiesUnpaidIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DeliveryDutiesUnpaidIndicator')
            value_ = self.gds_validate_string(value_, node, 'DeliveryDutiesUnpaidIndicator')
            self.DeliveryDutiesUnpaidIndicator = value_
            self.DeliveryDutiesUnpaidIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'HandlingCharge':
            obj_ = HandlingChargeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HandlingCharge = obj_
            obj_.original_tagname_ = 'HandlingCharge'
        elif nodeName_ == 'CustomsClearanceIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomsClearanceIndicator')
            value_ = self.gds_validate_string(value_, node, 'CustomsClearanceIndicator')
            self.CustomsClearanceIndicator = value_
            self.CustomsClearanceIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'FreezableProtectionIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FreezableProtectionIndicator')
            value_ = self.gds_validate_string(value_, node, 'FreezableProtectionIndicator')
            self.FreezableProtectionIndicator = value_
            self.FreezableProtectionIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'ExtremeLengthIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExtremeLengthIndicator')
            value_ = self.gds_validate_string(value_, node, 'ExtremeLengthIndicator')
            self.ExtremeLengthIndicator = value_
            self.ExtremeLengthIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'LinearFeet':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LinearFeet')
            value_ = self.gds_validate_string(value_, node, 'LinearFeet')
            self.LinearFeet = value_
            self.LinearFeet_nsprefix_ = child_.prefix
# end class ShipmentServiceOptionsType


class EMailInformationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EMailType=None, EMail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.EMailType = EMailType
        self.EMailType_nsprefix_ = None
        self.EMail = EMail
        self.EMail_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EMailInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EMailInformationType.subclass:
            return EMailInformationType.subclass(*args_, **kwargs_)
        else:
            return EMailInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EMailType(self):
        return self.EMailType
    def set_EMailType(self, EMailType):
        self.EMailType = EMailType
    def get_EMail(self):
        return self.EMail
    def set_EMail(self, EMail):
        self.EMail = EMail
    def hasContent_(self):
        if (
            self.EMailType is not None or
            self.EMail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMailInformationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EMailInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EMailInformationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EMailInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EMailInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EMailInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMailInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EMailType is not None:
            namespaceprefix_ = self.EMailType_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailType_nsprefix_) else ''
            self.EMailType.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EMailType', pretty_print=pretty_print)
        if self.EMail is not None:
            namespaceprefix_ = self.EMail_nsprefix_ + ':' if (UseCapturedNS_ and self.EMail_nsprefix_) else ''
            self.EMail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EMail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EMailType':
            obj_ = ShipCodeDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EMailType = obj_
            obj_.original_tagname_ = 'EMailType'
        elif nodeName_ == 'EMail':
            obj_ = EMailType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EMail = obj_
            obj_.original_tagname_ = 'EMail'
# end class EMailInformationType


class EMailType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EMailAddress=None, EMailText=None, UndeliverableEMailAddress=None, Subject=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if EMailAddress is None:
            self.EMailAddress = []
        else:
            self.EMailAddress = EMailAddress
        self.EMailAddress_nsprefix_ = None
        self.EMailText = EMailText
        self.EMailText_nsprefix_ = None
        self.UndeliverableEMailAddress = UndeliverableEMailAddress
        self.UndeliverableEMailAddress_nsprefix_ = None
        self.Subject = Subject
        self.Subject_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EMailType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EMailType.subclass:
            return EMailType.subclass(*args_, **kwargs_)
        else:
            return EMailType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EMailAddress(self):
        return self.EMailAddress
    def set_EMailAddress(self, EMailAddress):
        self.EMailAddress = EMailAddress
    def add_EMailAddress(self, value):
        self.EMailAddress.append(value)
    def insert_EMailAddress_at(self, index, value):
        self.EMailAddress.insert(index, value)
    def replace_EMailAddress_at(self, index, value):
        self.EMailAddress[index] = value
    def get_EMailText(self):
        return self.EMailText
    def set_EMailText(self, EMailText):
        self.EMailText = EMailText
    def get_UndeliverableEMailAddress(self):
        return self.UndeliverableEMailAddress
    def set_UndeliverableEMailAddress(self, UndeliverableEMailAddress):
        self.UndeliverableEMailAddress = UndeliverableEMailAddress
    def get_Subject(self):
        return self.Subject
    def set_Subject(self, Subject):
        self.Subject = Subject
    def hasContent_(self):
        if (
            self.EMailAddress or
            self.EMailText is not None or
            self.UndeliverableEMailAddress is not None or
            self.Subject is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMailType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EMailType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EMailType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EMailType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EMailType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EMailType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMailType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for EMailAddress_ in self.EMailAddress:
            namespaceprefix_ = self.EMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(EMailAddress_), input_name='EMailAddress')), namespaceprefix_ , eol_))
        if self.EMailText is not None:
            namespaceprefix_ = self.EMailText_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailText_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEMailText>%s</%sEMailText>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EMailText), input_name='EMailText')), namespaceprefix_ , eol_))
        if self.UndeliverableEMailAddress is not None:
            namespaceprefix_ = self.UndeliverableEMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.UndeliverableEMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUndeliverableEMailAddress>%s</%sUndeliverableEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UndeliverableEMailAddress), input_name='UndeliverableEMailAddress')), namespaceprefix_ , eol_))
        if self.Subject is not None:
            namespaceprefix_ = self.Subject_nsprefix_ + ':' if (UseCapturedNS_ and self.Subject_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSubject>%s</%sSubject>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Subject), input_name='Subject')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EMailAddress')
            value_ = self.gds_validate_string(value_, node, 'EMailAddress')
            self.EMailAddress.append(value_)
            self.EMailAddress_nsprefix_ = child_.prefix
        elif nodeName_ == 'EMailText':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EMailText')
            value_ = self.gds_validate_string(value_, node, 'EMailText')
            self.EMailText = value_
            self.EMailText_nsprefix_ = child_.prefix
        elif nodeName_ == 'UndeliverableEMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UndeliverableEMailAddress')
            value_ = self.gds_validate_string(value_, node, 'UndeliverableEMailAddress')
            self.UndeliverableEMailAddress = value_
            self.UndeliverableEMailAddress_nsprefix_ = child_.prefix
        elif nodeName_ == 'Subject':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Subject')
            value_ = self.gds_validate_string(value_, node, 'Subject')
            self.Subject = value_
            self.Subject_nsprefix_ = child_.prefix
# end class EMailType


class PickupOptionsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HolidayPickupIndicator=None, InsidePickupIndicator=None, ResidentialPickupIndicator=None, WeekendPickupIndicator=None, LiftGateRequiredIndicator=None, HoldAtAirportForPickup=None, PickupFromDoorIndicator=None, LimitedAccessPickupIndicator=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HolidayPickupIndicator = HolidayPickupIndicator
        self.HolidayPickupIndicator_nsprefix_ = None
        self.InsidePickupIndicator = InsidePickupIndicator
        self.InsidePickupIndicator_nsprefix_ = None
        self.ResidentialPickupIndicator = ResidentialPickupIndicator
        self.ResidentialPickupIndicator_nsprefix_ = None
        self.WeekendPickupIndicator = WeekendPickupIndicator
        self.WeekendPickupIndicator_nsprefix_ = None
        self.LiftGateRequiredIndicator = LiftGateRequiredIndicator
        self.LiftGateRequiredIndicator_nsprefix_ = None
        self.HoldAtAirportForPickup = HoldAtAirportForPickup
        self.HoldAtAirportForPickup_nsprefix_ = None
        self.PickupFromDoorIndicator = PickupFromDoorIndicator
        self.PickupFromDoorIndicator_nsprefix_ = None
        self.LimitedAccessPickupIndicator = LimitedAccessPickupIndicator
        self.LimitedAccessPickupIndicator_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickupOptionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickupOptionsType.subclass:
            return PickupOptionsType.subclass(*args_, **kwargs_)
        else:
            return PickupOptionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HolidayPickupIndicator(self):
        return self.HolidayPickupIndicator
    def set_HolidayPickupIndicator(self, HolidayPickupIndicator):
        self.HolidayPickupIndicator = HolidayPickupIndicator
    def get_InsidePickupIndicator(self):
        return self.InsidePickupIndicator
    def set_InsidePickupIndicator(self, InsidePickupIndicator):
        self.InsidePickupIndicator = InsidePickupIndicator
    def get_ResidentialPickupIndicator(self):
        return self.ResidentialPickupIndicator
    def set_ResidentialPickupIndicator(self, ResidentialPickupIndicator):
        self.ResidentialPickupIndicator = ResidentialPickupIndicator
    def get_WeekendPickupIndicator(self):
        return self.WeekendPickupIndicator
    def set_WeekendPickupIndicator(self, WeekendPickupIndicator):
        self.WeekendPickupIndicator = WeekendPickupIndicator
    def get_LiftGateRequiredIndicator(self):
        return self.LiftGateRequiredIndicator
    def set_LiftGateRequiredIndicator(self, LiftGateRequiredIndicator):
        self.LiftGateRequiredIndicator = LiftGateRequiredIndicator
    def get_HoldAtAirportForPickup(self):
        return self.HoldAtAirportForPickup
    def set_HoldAtAirportForPickup(self, HoldAtAirportForPickup):
        self.HoldAtAirportForPickup = HoldAtAirportForPickup
    def get_PickupFromDoorIndicator(self):
        return self.PickupFromDoorIndicator
    def set_PickupFromDoorIndicator(self, PickupFromDoorIndicator):
        self.PickupFromDoorIndicator = PickupFromDoorIndicator
    def get_LimitedAccessPickupIndicator(self):
        return self.LimitedAccessPickupIndicator
    def set_LimitedAccessPickupIndicator(self, LimitedAccessPickupIndicator):
        self.LimitedAccessPickupIndicator = LimitedAccessPickupIndicator
    def hasContent_(self):
        if (
            self.HolidayPickupIndicator is not None or
            self.InsidePickupIndicator is not None or
            self.ResidentialPickupIndicator is not None or
            self.WeekendPickupIndicator is not None or
            self.LiftGateRequiredIndicator is not None or
            self.HoldAtAirportForPickup is not None or
            self.PickupFromDoorIndicator is not None or
            self.LimitedAccessPickupIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PickupOptionsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickupOptionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PickupOptionsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PickupOptionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PickupOptionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PickupOptionsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PickupOptionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HolidayPickupIndicator is not None:
            namespaceprefix_ = self.HolidayPickupIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.HolidayPickupIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHolidayPickupIndicator>%s</%sHolidayPickupIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HolidayPickupIndicator), input_name='HolidayPickupIndicator')), namespaceprefix_ , eol_))
        if self.InsidePickupIndicator is not None:
            namespaceprefix_ = self.InsidePickupIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.InsidePickupIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInsidePickupIndicator>%s</%sInsidePickupIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InsidePickupIndicator), input_name='InsidePickupIndicator')), namespaceprefix_ , eol_))
        if self.ResidentialPickupIndicator is not None:
            namespaceprefix_ = self.ResidentialPickupIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.ResidentialPickupIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sResidentialPickupIndicator>%s</%sResidentialPickupIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ResidentialPickupIndicator), input_name='ResidentialPickupIndicator')), namespaceprefix_ , eol_))
        if self.WeekendPickupIndicator is not None:
            namespaceprefix_ = self.WeekendPickupIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.WeekendPickupIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeekendPickupIndicator>%s</%sWeekendPickupIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.WeekendPickupIndicator), input_name='WeekendPickupIndicator')), namespaceprefix_ , eol_))
        if self.LiftGateRequiredIndicator is not None:
            namespaceprefix_ = self.LiftGateRequiredIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.LiftGateRequiredIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLiftGateRequiredIndicator>%s</%sLiftGateRequiredIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LiftGateRequiredIndicator), input_name='LiftGateRequiredIndicator')), namespaceprefix_ , eol_))
        if self.HoldAtAirportForPickup is not None:
            namespaceprefix_ = self.HoldAtAirportForPickup_nsprefix_ + ':' if (UseCapturedNS_ and self.HoldAtAirportForPickup_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHoldAtAirportForPickup>%s</%sHoldAtAirportForPickup>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HoldAtAirportForPickup), input_name='HoldAtAirportForPickup')), namespaceprefix_ , eol_))
        if self.PickupFromDoorIndicator is not None:
            namespaceprefix_ = self.PickupFromDoorIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.PickupFromDoorIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPickupFromDoorIndicator>%s</%sPickupFromDoorIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PickupFromDoorIndicator), input_name='PickupFromDoorIndicator')), namespaceprefix_ , eol_))
        if self.LimitedAccessPickupIndicator is not None:
            namespaceprefix_ = self.LimitedAccessPickupIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.LimitedAccessPickupIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLimitedAccessPickupIndicator>%s</%sLimitedAccessPickupIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LimitedAccessPickupIndicator), input_name='LimitedAccessPickupIndicator')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HolidayPickupIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HolidayPickupIndicator')
            value_ = self.gds_validate_string(value_, node, 'HolidayPickupIndicator')
            self.HolidayPickupIndicator = value_
            self.HolidayPickupIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'InsidePickupIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InsidePickupIndicator')
            value_ = self.gds_validate_string(value_, node, 'InsidePickupIndicator')
            self.InsidePickupIndicator = value_
            self.InsidePickupIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'ResidentialPickupIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ResidentialPickupIndicator')
            value_ = self.gds_validate_string(value_, node, 'ResidentialPickupIndicator')
            self.ResidentialPickupIndicator = value_
            self.ResidentialPickupIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'WeekendPickupIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'WeekendPickupIndicator')
            value_ = self.gds_validate_string(value_, node, 'WeekendPickupIndicator')
            self.WeekendPickupIndicator = value_
            self.WeekendPickupIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'LiftGateRequiredIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LiftGateRequiredIndicator')
            value_ = self.gds_validate_string(value_, node, 'LiftGateRequiredIndicator')
            self.LiftGateRequiredIndicator = value_
            self.LiftGateRequiredIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'HoldAtAirportForPickup':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HoldAtAirportForPickup')
            value_ = self.gds_validate_string(value_, node, 'HoldAtAirportForPickup')
            self.HoldAtAirportForPickup = value_
            self.HoldAtAirportForPickup_nsprefix_ = child_.prefix
        elif nodeName_ == 'PickupFromDoorIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PickupFromDoorIndicator')
            value_ = self.gds_validate_string(value_, node, 'PickupFromDoorIndicator')
            self.PickupFromDoorIndicator = value_
            self.PickupFromDoorIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'LimitedAccessPickupIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LimitedAccessPickupIndicator')
            value_ = self.gds_validate_string(value_, node, 'LimitedAccessPickupIndicator')
            self.LimitedAccessPickupIndicator = value_
            self.LimitedAccessPickupIndicator_nsprefix_ = child_.prefix
# end class PickupOptionsType


class DeliveryOptionsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CallBeforeDeliveryIndicator=None, HolidayDeliveryIndicator=None, InsideDeliveryIndicator=None, ResidentialDeliveryIndicator=None, WeekendDeliveryIndicator=None, LiftGateRequiredIndicator=None, SaturdayDeliveryIndicator=None, DeliveryToDoorIndicator=None, LimitedAccessDeliveryIndicator=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CallBeforeDeliveryIndicator = CallBeforeDeliveryIndicator
        self.CallBeforeDeliveryIndicator_nsprefix_ = None
        self.HolidayDeliveryIndicator = HolidayDeliveryIndicator
        self.HolidayDeliveryIndicator_nsprefix_ = None
        self.InsideDeliveryIndicator = InsideDeliveryIndicator
        self.InsideDeliveryIndicator_nsprefix_ = None
        self.ResidentialDeliveryIndicator = ResidentialDeliveryIndicator
        self.ResidentialDeliveryIndicator_nsprefix_ = None
        self.WeekendDeliveryIndicator = WeekendDeliveryIndicator
        self.WeekendDeliveryIndicator_nsprefix_ = None
        self.LiftGateRequiredIndicator = LiftGateRequiredIndicator
        self.LiftGateRequiredIndicator_nsprefix_ = None
        self.SaturdayDeliveryIndicator = SaturdayDeliveryIndicator
        self.SaturdayDeliveryIndicator_nsprefix_ = None
        self.DeliveryToDoorIndicator = DeliveryToDoorIndicator
        self.DeliveryToDoorIndicator_nsprefix_ = None
        self.LimitedAccessDeliveryIndicator = LimitedAccessDeliveryIndicator
        self.LimitedAccessDeliveryIndicator_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeliveryOptionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeliveryOptionsType.subclass:
            return DeliveryOptionsType.subclass(*args_, **kwargs_)
        else:
            return DeliveryOptionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CallBeforeDeliveryIndicator(self):
        return self.CallBeforeDeliveryIndicator
    def set_CallBeforeDeliveryIndicator(self, CallBeforeDeliveryIndicator):
        self.CallBeforeDeliveryIndicator = CallBeforeDeliveryIndicator
    def get_HolidayDeliveryIndicator(self):
        return self.HolidayDeliveryIndicator
    def set_HolidayDeliveryIndicator(self, HolidayDeliveryIndicator):
        self.HolidayDeliveryIndicator = HolidayDeliveryIndicator
    def get_InsideDeliveryIndicator(self):
        return self.InsideDeliveryIndicator
    def set_InsideDeliveryIndicator(self, InsideDeliveryIndicator):
        self.InsideDeliveryIndicator = InsideDeliveryIndicator
    def get_ResidentialDeliveryIndicator(self):
        return self.ResidentialDeliveryIndicator
    def set_ResidentialDeliveryIndicator(self, ResidentialDeliveryIndicator):
        self.ResidentialDeliveryIndicator = ResidentialDeliveryIndicator
    def get_WeekendDeliveryIndicator(self):
        return self.WeekendDeliveryIndicator
    def set_WeekendDeliveryIndicator(self, WeekendDeliveryIndicator):
        self.WeekendDeliveryIndicator = WeekendDeliveryIndicator
    def get_LiftGateRequiredIndicator(self):
        return self.LiftGateRequiredIndicator
    def set_LiftGateRequiredIndicator(self, LiftGateRequiredIndicator):
        self.LiftGateRequiredIndicator = LiftGateRequiredIndicator
    def get_SaturdayDeliveryIndicator(self):
        return self.SaturdayDeliveryIndicator
    def set_SaturdayDeliveryIndicator(self, SaturdayDeliveryIndicator):
        self.SaturdayDeliveryIndicator = SaturdayDeliveryIndicator
    def get_DeliveryToDoorIndicator(self):
        return self.DeliveryToDoorIndicator
    def set_DeliveryToDoorIndicator(self, DeliveryToDoorIndicator):
        self.DeliveryToDoorIndicator = DeliveryToDoorIndicator
    def get_LimitedAccessDeliveryIndicator(self):
        return self.LimitedAccessDeliveryIndicator
    def set_LimitedAccessDeliveryIndicator(self, LimitedAccessDeliveryIndicator):
        self.LimitedAccessDeliveryIndicator = LimitedAccessDeliveryIndicator
    def hasContent_(self):
        if (
            self.CallBeforeDeliveryIndicator is not None or
            self.HolidayDeliveryIndicator is not None or
            self.InsideDeliveryIndicator is not None or
            self.ResidentialDeliveryIndicator is not None or
            self.WeekendDeliveryIndicator is not None or
            self.LiftGateRequiredIndicator is not None or
            self.SaturdayDeliveryIndicator is not None or
            self.DeliveryToDoorIndicator is not None or
            self.LimitedAccessDeliveryIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeliveryOptionsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeliveryOptionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DeliveryOptionsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DeliveryOptionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DeliveryOptionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DeliveryOptionsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeliveryOptionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CallBeforeDeliveryIndicator is not None:
            namespaceprefix_ = self.CallBeforeDeliveryIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.CallBeforeDeliveryIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCallBeforeDeliveryIndicator>%s</%sCallBeforeDeliveryIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CallBeforeDeliveryIndicator), input_name='CallBeforeDeliveryIndicator')), namespaceprefix_ , eol_))
        if self.HolidayDeliveryIndicator is not None:
            namespaceprefix_ = self.HolidayDeliveryIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.HolidayDeliveryIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHolidayDeliveryIndicator>%s</%sHolidayDeliveryIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HolidayDeliveryIndicator), input_name='HolidayDeliveryIndicator')), namespaceprefix_ , eol_))
        if self.InsideDeliveryIndicator is not None:
            namespaceprefix_ = self.InsideDeliveryIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.InsideDeliveryIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInsideDeliveryIndicator>%s</%sInsideDeliveryIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InsideDeliveryIndicator), input_name='InsideDeliveryIndicator')), namespaceprefix_ , eol_))
        if self.ResidentialDeliveryIndicator is not None:
            namespaceprefix_ = self.ResidentialDeliveryIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.ResidentialDeliveryIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sResidentialDeliveryIndicator>%s</%sResidentialDeliveryIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ResidentialDeliveryIndicator), input_name='ResidentialDeliveryIndicator')), namespaceprefix_ , eol_))
        if self.WeekendDeliveryIndicator is not None:
            namespaceprefix_ = self.WeekendDeliveryIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.WeekendDeliveryIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeekendDeliveryIndicator>%s</%sWeekendDeliveryIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.WeekendDeliveryIndicator), input_name='WeekendDeliveryIndicator')), namespaceprefix_ , eol_))
        if self.LiftGateRequiredIndicator is not None:
            namespaceprefix_ = self.LiftGateRequiredIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.LiftGateRequiredIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLiftGateRequiredIndicator>%s</%sLiftGateRequiredIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LiftGateRequiredIndicator), input_name='LiftGateRequiredIndicator')), namespaceprefix_ , eol_))
        if self.SaturdayDeliveryIndicator is not None:
            namespaceprefix_ = self.SaturdayDeliveryIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.SaturdayDeliveryIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSaturdayDeliveryIndicator>%s</%sSaturdayDeliveryIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SaturdayDeliveryIndicator), input_name='SaturdayDeliveryIndicator')), namespaceprefix_ , eol_))
        if self.DeliveryToDoorIndicator is not None:
            namespaceprefix_ = self.DeliveryToDoorIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryToDoorIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryToDoorIndicator>%s</%sDeliveryToDoorIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryToDoorIndicator), input_name='DeliveryToDoorIndicator')), namespaceprefix_ , eol_))
        if self.LimitedAccessDeliveryIndicator is not None:
            namespaceprefix_ = self.LimitedAccessDeliveryIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.LimitedAccessDeliveryIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLimitedAccessDeliveryIndicator>%s</%sLimitedAccessDeliveryIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LimitedAccessDeliveryIndicator), input_name='LimitedAccessDeliveryIndicator')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CallBeforeDeliveryIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CallBeforeDeliveryIndicator')
            value_ = self.gds_validate_string(value_, node, 'CallBeforeDeliveryIndicator')
            self.CallBeforeDeliveryIndicator = value_
            self.CallBeforeDeliveryIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'HolidayDeliveryIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HolidayDeliveryIndicator')
            value_ = self.gds_validate_string(value_, node, 'HolidayDeliveryIndicator')
            self.HolidayDeliveryIndicator = value_
            self.HolidayDeliveryIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'InsideDeliveryIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InsideDeliveryIndicator')
            value_ = self.gds_validate_string(value_, node, 'InsideDeliveryIndicator')
            self.InsideDeliveryIndicator = value_
            self.InsideDeliveryIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'ResidentialDeliveryIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ResidentialDeliveryIndicator')
            value_ = self.gds_validate_string(value_, node, 'ResidentialDeliveryIndicator')
            self.ResidentialDeliveryIndicator = value_
            self.ResidentialDeliveryIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'WeekendDeliveryIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'WeekendDeliveryIndicator')
            value_ = self.gds_validate_string(value_, node, 'WeekendDeliveryIndicator')
            self.WeekendDeliveryIndicator = value_
            self.WeekendDeliveryIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'LiftGateRequiredIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LiftGateRequiredIndicator')
            value_ = self.gds_validate_string(value_, node, 'LiftGateRequiredIndicator')
            self.LiftGateRequiredIndicator = value_
            self.LiftGateRequiredIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'SaturdayDeliveryIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SaturdayDeliveryIndicator')
            value_ = self.gds_validate_string(value_, node, 'SaturdayDeliveryIndicator')
            self.SaturdayDeliveryIndicator = value_
            self.SaturdayDeliveryIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'DeliveryToDoorIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DeliveryToDoorIndicator')
            value_ = self.gds_validate_string(value_, node, 'DeliveryToDoorIndicator')
            self.DeliveryToDoorIndicator = value_
            self.DeliveryToDoorIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'LimitedAccessDeliveryIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LimitedAccessDeliveryIndicator')
            value_ = self.gds_validate_string(value_, node, 'LimitedAccessDeliveryIndicator')
            self.LimitedAccessDeliveryIndicator = value_
            self.LimitedAccessDeliveryIndicator_nsprefix_ = child_.prefix
# end class DeliveryOptionsType


class OverSeasLegType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Dimensions=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Dimensions = Dimensions
        self.Dimensions_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OverSeasLegType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OverSeasLegType.subclass:
            return OverSeasLegType.subclass(*args_, **kwargs_)
        else:
            return OverSeasLegType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Dimensions(self):
        return self.Dimensions
    def set_Dimensions(self, Dimensions):
        self.Dimensions = Dimensions
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def hasContent_(self):
        if (
            self.Dimensions is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='OverSeasLegType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OverSeasLegType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OverSeasLegType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OverSeasLegType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OverSeasLegType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='OverSeasLegType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='OverSeasLegType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Dimensions is not None:
            namespaceprefix_ = self.Dimensions_nsprefix_ + ':' if (UseCapturedNS_ and self.Dimensions_nsprefix_) else ''
            self.Dimensions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Dimensions', pretty_print=pretty_print)
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            self.Value.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Value', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Dimensions':
            obj_ = DimensionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
        elif nodeName_ == 'Value':
            obj_ = DimensionValueType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Value = obj_
            obj_.original_tagname_ = 'Value'
# end class OverSeasLegType


class DimensionType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Volume=None, Height=None, Length=None, Width=None, UnitOfMeasurement=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Volume = Volume
        self.Volume_nsprefix_ = None
        self.Height = Height
        self.Height_nsprefix_ = None
        self.Length = Length
        self.Length_nsprefix_ = None
        self.Width = Width
        self.Width_nsprefix_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.UnitOfMeasurement_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DimensionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DimensionType.subclass:
            return DimensionType.subclass(*args_, **kwargs_)
        else:
            return DimensionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Volume(self):
        return self.Volume
    def set_Volume(self, Volume):
        self.Volume = Volume
    def get_Height(self):
        return self.Height
    def set_Height(self, Height):
        self.Height = Height
    def get_Length(self):
        return self.Length
    def set_Length(self, Length):
        self.Length = Length
    def get_Width(self):
        return self.Width
    def set_Width(self, Width):
        self.Width = Width
    def get_UnitOfMeasurement(self):
        return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement):
        self.UnitOfMeasurement = UnitOfMeasurement
    def hasContent_(self):
        if (
            self.Volume is not None or
            self.Height is not None or
            self.Length is not None or
            self.Width is not None or
            self.UnitOfMeasurement is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DimensionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DimensionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DimensionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DimensionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DimensionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DimensionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DimensionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Volume is not None:
            namespaceprefix_ = self.Volume_nsprefix_ + ':' if (UseCapturedNS_ and self.Volume_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVolume>%s</%sVolume>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Volume), input_name='Volume')), namespaceprefix_ , eol_))
        if self.Height is not None:
            namespaceprefix_ = self.Height_nsprefix_ + ':' if (UseCapturedNS_ and self.Height_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHeight>%s</%sHeight>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Height), input_name='Height')), namespaceprefix_ , eol_))
        if self.Length is not None:
            namespaceprefix_ = self.Length_nsprefix_ + ':' if (UseCapturedNS_ and self.Length_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLength>%s</%sLength>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Length), input_name='Length')), namespaceprefix_ , eol_))
        if self.Width is not None:
            namespaceprefix_ = self.Width_nsprefix_ + ':' if (UseCapturedNS_ and self.Width_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWidth>%s</%sWidth>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Width), input_name='Width')), namespaceprefix_ , eol_))
        if self.UnitOfMeasurement is not None:
            namespaceprefix_ = self.UnitOfMeasurement_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitOfMeasurement_nsprefix_) else ''
            self.UnitOfMeasurement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UnitOfMeasurement', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Volume':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Volume')
            value_ = self.gds_validate_string(value_, node, 'Volume')
            self.Volume = value_
            self.Volume_nsprefix_ = child_.prefix
        elif nodeName_ == 'Height':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Height')
            value_ = self.gds_validate_string(value_, node, 'Height')
            self.Height = value_
            self.Height_nsprefix_ = child_.prefix
        elif nodeName_ == 'Length':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Length')
            value_ = self.gds_validate_string(value_, node, 'Length')
            self.Length = value_
            self.Length_nsprefix_ = child_.prefix
        elif nodeName_ == 'Width':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Width')
            value_ = self.gds_validate_string(value_, node, 'Width')
            self.Width = value_
            self.Width_nsprefix_ = child_.prefix
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = FreightShipUnitOfMeasurementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
# end class DimensionType


class DimensionValueType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Cube=None, CWT=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Cube = Cube
        self.Cube_nsprefix_ = None
        self.CWT = CWT
        self.CWT_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DimensionValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DimensionValueType.subclass:
            return DimensionValueType.subclass(*args_, **kwargs_)
        else:
            return DimensionValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Cube(self):
        return self.Cube
    def set_Cube(self, Cube):
        self.Cube = Cube
    def get_CWT(self):
        return self.CWT
    def set_CWT(self, CWT):
        self.CWT = CWT
    def hasContent_(self):
        if (
            self.Cube is not None or
            self.CWT is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DimensionValueType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DimensionValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DimensionValueType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DimensionValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DimensionValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DimensionValueType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DimensionValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Cube is not None:
            namespaceprefix_ = self.Cube_nsprefix_ + ':' if (UseCapturedNS_ and self.Cube_nsprefix_) else ''
            self.Cube.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Cube', pretty_print=pretty_print)
        if self.CWT is not None:
            namespaceprefix_ = self.CWT_nsprefix_ + ':' if (UseCapturedNS_ and self.CWT_nsprefix_) else ''
            self.CWT.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CWT', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Cube':
            obj_ = CubeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Cube = obj_
            obj_.original_tagname_ = 'Cube'
        elif nodeName_ == 'CWT':
            obj_ = CWTType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CWT = obj_
            obj_.original_tagname_ = 'CWT'
# end class DimensionValueType


class CubeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CurrencyCode = CurrencyCode
        self.CurrencyCode_nsprefix_ = None
        self.MonetaryValue = MonetaryValue
        self.MonetaryValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CubeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CubeType.subclass:
            return CubeType.subclass(*args_, **kwargs_)
        else:
            return CubeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CurrencyCode(self):
        return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode):
        self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self):
        return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue):
        self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CubeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CubeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CubeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CubeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CubeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CubeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CubeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            namespaceprefix_ = self.CurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyCode>%s</%sCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), namespaceprefix_ , eol_))
        if self.MonetaryValue is not None:
            namespaceprefix_ = self.MonetaryValue_nsprefix_ + ':' if (UseCapturedNS_ and self.MonetaryValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMonetaryValue>%s</%sMonetaryValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CurrencyCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'CurrencyCode')
            self.CurrencyCode = value_
            self.CurrencyCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'MonetaryValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MonetaryValue')
            value_ = self.gds_validate_string(value_, node, 'MonetaryValue')
            self.MonetaryValue = value_
            self.MonetaryValue_nsprefix_ = child_.prefix
# end class CubeType


class CWTType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CurrencyCode = CurrencyCode
        self.CurrencyCode_nsprefix_ = None
        self.MonetaryValue = MonetaryValue
        self.MonetaryValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CWTType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CWTType.subclass:
            return CWTType.subclass(*args_, **kwargs_)
        else:
            return CWTType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CurrencyCode(self):
        return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode):
        self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self):
        return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue):
        self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CWTType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CWTType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CWTType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CWTType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CWTType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CWTType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CWTType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            namespaceprefix_ = self.CurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyCode>%s</%sCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), namespaceprefix_ , eol_))
        if self.MonetaryValue is not None:
            namespaceprefix_ = self.MonetaryValue_nsprefix_ + ':' if (UseCapturedNS_ and self.MonetaryValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMonetaryValue>%s</%sMonetaryValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CurrencyCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'CurrencyCode')
            self.CurrencyCode = value_
            self.CurrencyCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'MonetaryValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MonetaryValue')
            value_ = self.gds_validate_string(value_, node, 'MonetaryValue')
            self.MonetaryValue = value_
            self.MonetaryValue_nsprefix_ = child_.prefix
# end class CWTType


class CODType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CODValue=None, CODPaymentMethod=None, CODBillingOption=None, RemitTo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CODValue = CODValue
        self.CODValue_nsprefix_ = None
        self.CODPaymentMethod = CODPaymentMethod
        self.CODPaymentMethod_nsprefix_ = None
        self.CODBillingOption = CODBillingOption
        self.CODBillingOption_nsprefix_ = None
        self.RemitTo = RemitTo
        self.RemitTo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CODType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CODType.subclass:
            return CODType.subclass(*args_, **kwargs_)
        else:
            return CODType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CODValue(self):
        return self.CODValue
    def set_CODValue(self, CODValue):
        self.CODValue = CODValue
    def get_CODPaymentMethod(self):
        return self.CODPaymentMethod
    def set_CODPaymentMethod(self, CODPaymentMethod):
        self.CODPaymentMethod = CODPaymentMethod
    def get_CODBillingOption(self):
        return self.CODBillingOption
    def set_CODBillingOption(self, CODBillingOption):
        self.CODBillingOption = CODBillingOption
    def get_RemitTo(self):
        return self.RemitTo
    def set_RemitTo(self, RemitTo):
        self.RemitTo = RemitTo
    def hasContent_(self):
        if (
            self.CODValue is not None or
            self.CODPaymentMethod is not None or
            self.CODBillingOption is not None or
            self.RemitTo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CODType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CODType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CODType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CODType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CODType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CODType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CODType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CODValue is not None:
            namespaceprefix_ = self.CODValue_nsprefix_ + ':' if (UseCapturedNS_ and self.CODValue_nsprefix_) else ''
            self.CODValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CODValue', pretty_print=pretty_print)
        if self.CODPaymentMethod is not None:
            namespaceprefix_ = self.CODPaymentMethod_nsprefix_ + ':' if (UseCapturedNS_ and self.CODPaymentMethod_nsprefix_) else ''
            self.CODPaymentMethod.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CODPaymentMethod', pretty_print=pretty_print)
        if self.CODBillingOption is not None:
            namespaceprefix_ = self.CODBillingOption_nsprefix_ + ':' if (UseCapturedNS_ and self.CODBillingOption_nsprefix_) else ''
            self.CODBillingOption.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CODBillingOption', pretty_print=pretty_print)
        if self.RemitTo is not None:
            namespaceprefix_ = self.RemitTo_nsprefix_ + ':' if (UseCapturedNS_ and self.RemitTo_nsprefix_) else ''
            self.RemitTo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RemitTo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CODValue':
            obj_ = CODValueType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CODValue = obj_
            obj_.original_tagname_ = 'CODValue'
        elif nodeName_ == 'CODPaymentMethod':
            obj_ = ShipCodeDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CODPaymentMethod = obj_
            obj_.original_tagname_ = 'CODPaymentMethod'
        elif nodeName_ == 'CODBillingOption':
            obj_ = ShipCodeDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CODBillingOption = obj_
            obj_.original_tagname_ = 'CODBillingOption'
        elif nodeName_ == 'RemitTo':
            obj_ = RemitToType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RemitTo = obj_
            obj_.original_tagname_ = 'RemitTo'
# end class CODType


class CODValueType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CurrencyCode = CurrencyCode
        self.CurrencyCode_nsprefix_ = None
        self.MonetaryValue = MonetaryValue
        self.MonetaryValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CODValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CODValueType.subclass:
            return CODValueType.subclass(*args_, **kwargs_)
        else:
            return CODValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CurrencyCode(self):
        return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode):
        self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self):
        return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue):
        self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CODValueType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CODValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CODValueType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CODValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CODValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CODValueType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CODValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            namespaceprefix_ = self.CurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyCode>%s</%sCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), namespaceprefix_ , eol_))
        if self.MonetaryValue is not None:
            namespaceprefix_ = self.MonetaryValue_nsprefix_ + ':' if (UseCapturedNS_ and self.MonetaryValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMonetaryValue>%s</%sMonetaryValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CurrencyCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'CurrencyCode')
            self.CurrencyCode = value_
            self.CurrencyCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'MonetaryValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MonetaryValue')
            value_ = self.gds_validate_string(value_, node, 'MonetaryValue')
            self.MonetaryValue = value_
            self.MonetaryValue_nsprefix_ = child_.prefix
# end class CODValueType


class RemitToType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Name=None, Address=None, AttentionName=None, Phone=None, FaxNumber=None, EMailAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Name = Name
        self.Name_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
        self.AttentionName = AttentionName
        self.AttentionName_nsprefix_ = None
        self.Phone = Phone
        self.Phone_nsprefix_ = None
        self.FaxNumber = FaxNumber
        self.FaxNumber_nsprefix_ = None
        self.EMailAddress = EMailAddress
        self.EMailAddress_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RemitToType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RemitToType.subclass:
            return RemitToType.subclass(*args_, **kwargs_)
        else:
            return RemitToType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def get_AttentionName(self):
        return self.AttentionName
    def set_AttentionName(self, AttentionName):
        self.AttentionName = AttentionName
    def get_Phone(self):
        return self.Phone
    def set_Phone(self, Phone):
        self.Phone = Phone
    def get_FaxNumber(self):
        return self.FaxNumber
    def set_FaxNumber(self, FaxNumber):
        self.FaxNumber = FaxNumber
    def get_EMailAddress(self):
        return self.EMailAddress
    def set_EMailAddress(self, EMailAddress):
        self.EMailAddress = EMailAddress
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Address is not None or
            self.AttentionName is not None or
            self.Phone is not None or
            self.FaxNumber is not None or
            self.EMailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RemitToType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RemitToType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RemitToType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RemitToType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RemitToType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RemitToType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RemitToType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
        if self.AttentionName is not None:
            namespaceprefix_ = self.AttentionName_nsprefix_ + ':' if (UseCapturedNS_ and self.AttentionName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttentionName>%s</%sAttentionName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), namespaceprefix_ , eol_))
        if self.Phone is not None:
            namespaceprefix_ = self.Phone_nsprefix_ + ':' if (UseCapturedNS_ and self.Phone_nsprefix_) else ''
            self.Phone.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Phone', pretty_print=pretty_print)
        if self.FaxNumber is not None:
            namespaceprefix_ = self.FaxNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.FaxNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFaxNumber>%s</%sFaxNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FaxNumber), input_name='FaxNumber')), namespaceprefix_ , eol_))
        if self.EMailAddress is not None:
            namespaceprefix_ = self.EMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Name')
            value_ = self.gds_validate_string(value_, node, 'Name')
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
        elif nodeName_ == 'Address':
            obj_ = FreightShipAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'AttentionName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AttentionName')
            value_ = self.gds_validate_string(value_, node, 'AttentionName')
            self.AttentionName = value_
            self.AttentionName_nsprefix_ = child_.prefix
        elif nodeName_ == 'Phone':
            obj_ = FreightShipPhoneType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Phone = obj_
            obj_.original_tagname_ = 'Phone'
        elif nodeName_ == 'FaxNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FaxNumber')
            value_ = self.gds_validate_string(value_, node, 'FaxNumber')
            self.FaxNumber = value_
            self.FaxNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'EMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EMailAddress')
            value_ = self.gds_validate_string(value_, node, 'EMailAddress')
            self.EMailAddress = value_
            self.EMailAddress_nsprefix_ = child_.prefix
# end class RemitToType


class DangerousGoodsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Name=None, Phone=None, TransportationMode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Name = Name
        self.Name_nsprefix_ = None
        self.Phone = Phone
        self.Phone_nsprefix_ = None
        self.TransportationMode = TransportationMode
        self.TransportationMode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DangerousGoodsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DangerousGoodsType.subclass:
            return DangerousGoodsType.subclass(*args_, **kwargs_)
        else:
            return DangerousGoodsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_Phone(self):
        return self.Phone
    def set_Phone(self, Phone):
        self.Phone = Phone
    def get_TransportationMode(self):
        return self.TransportationMode
    def set_TransportationMode(self, TransportationMode):
        self.TransportationMode = TransportationMode
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Phone is not None or
            self.TransportationMode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DangerousGoodsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DangerousGoodsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DangerousGoodsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DangerousGoodsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DangerousGoodsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DangerousGoodsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DangerousGoodsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.Phone is not None:
            namespaceprefix_ = self.Phone_nsprefix_ + ':' if (UseCapturedNS_ and self.Phone_nsprefix_) else ''
            self.Phone.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Phone', pretty_print=pretty_print)
        if self.TransportationMode is not None:
            namespaceprefix_ = self.TransportationMode_nsprefix_ + ':' if (UseCapturedNS_ and self.TransportationMode_nsprefix_) else ''
            self.TransportationMode.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransportationMode', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Name')
            value_ = self.gds_validate_string(value_, node, 'Name')
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
        elif nodeName_ == 'Phone':
            obj_ = FreightShipPhoneType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Phone = obj_
            obj_.original_tagname_ = 'Phone'
        elif nodeName_ == 'TransportationMode':
            obj_ = ShipCodeDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransportationMode = obj_
            obj_.original_tagname_ = 'TransportationMode'
# end class DangerousGoodsType


class SortingAndSegregatingType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Quantity=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Quantity = Quantity
        self.Quantity_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SortingAndSegregatingType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SortingAndSegregatingType.subclass:
            return SortingAndSegregatingType.subclass(*args_, **kwargs_)
        else:
            return SortingAndSegregatingType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def hasContent_(self):
        if (
            self.Quantity is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SortingAndSegregatingType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SortingAndSegregatingType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SortingAndSegregatingType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SortingAndSegregatingType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SortingAndSegregatingType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SortingAndSegregatingType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SortingAndSegregatingType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Quantity), input_name='Quantity')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Quantity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Quantity')
            value_ = self.gds_validate_string(value_, node, 'Quantity')
            self.Quantity = value_
            self.Quantity_nsprefix_ = child_.prefix
# end class SortingAndSegregatingType


class DeclaredValueType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CurrencyCode = CurrencyCode
        self.CurrencyCode_nsprefix_ = None
        self.MonetaryValue = MonetaryValue
        self.MonetaryValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeclaredValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeclaredValueType.subclass:
            return DeclaredValueType.subclass(*args_, **kwargs_)
        else:
            return DeclaredValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CurrencyCode(self):
        return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode):
        self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self):
        return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue):
        self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeclaredValueType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeclaredValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DeclaredValueType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DeclaredValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DeclaredValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DeclaredValueType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeclaredValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            namespaceprefix_ = self.CurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyCode>%s</%sCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), namespaceprefix_ , eol_))
        if self.MonetaryValue is not None:
            namespaceprefix_ = self.MonetaryValue_nsprefix_ + ':' if (UseCapturedNS_ and self.MonetaryValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMonetaryValue>%s</%sMonetaryValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CurrencyCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'CurrencyCode')
            self.CurrencyCode = value_
            self.CurrencyCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'MonetaryValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MonetaryValue')
            value_ = self.gds_validate_string(value_, node, 'MonetaryValue')
            self.MonetaryValue = value_
            self.MonetaryValue_nsprefix_ = child_.prefix
# end class DeclaredValueType


class CustomsValueType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CurrencyCode = CurrencyCode
        self.CurrencyCode_nsprefix_ = None
        self.MonetaryValue = MonetaryValue
        self.MonetaryValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomsValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomsValueType.subclass:
            return CustomsValueType.subclass(*args_, **kwargs_)
        else:
            return CustomsValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CurrencyCode(self):
        return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode):
        self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self):
        return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue):
        self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomsValueType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomsValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomsValueType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomsValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomsValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomsValueType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomsValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            namespaceprefix_ = self.CurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyCode>%s</%sCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), namespaceprefix_ , eol_))
        if self.MonetaryValue is not None:
            namespaceprefix_ = self.MonetaryValue_nsprefix_ + ':' if (UseCapturedNS_ and self.MonetaryValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMonetaryValue>%s</%sMonetaryValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CurrencyCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'CurrencyCode')
            self.CurrencyCode = value_
            self.CurrencyCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'MonetaryValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MonetaryValue')
            value_ = self.gds_validate_string(value_, node, 'MonetaryValue')
            self.MonetaryValue = value_
            self.MonetaryValue_nsprefix_ = child_.prefix
# end class CustomsValueType


class HandlingChargeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Percentage=None, Amount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Percentage = Percentage
        self.Percentage_nsprefix_ = None
        self.Amount = Amount
        self.Amount_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HandlingChargeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HandlingChargeType.subclass:
            return HandlingChargeType.subclass(*args_, **kwargs_)
        else:
            return HandlingChargeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Percentage(self):
        return self.Percentage
    def set_Percentage(self, Percentage):
        self.Percentage = Percentage
    def get_Amount(self):
        return self.Amount
    def set_Amount(self, Amount):
        self.Amount = Amount
    def hasContent_(self):
        if (
            self.Percentage is not None or
            self.Amount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HandlingChargeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HandlingChargeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HandlingChargeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HandlingChargeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HandlingChargeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HandlingChargeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HandlingChargeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Percentage is not None:
            namespaceprefix_ = self.Percentage_nsprefix_ + ':' if (UseCapturedNS_ and self.Percentage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPercentage>%s</%sPercentage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Percentage), input_name='Percentage')), namespaceprefix_ , eol_))
        if self.Amount is not None:
            namespaceprefix_ = self.Amount_nsprefix_ + ':' if (UseCapturedNS_ and self.Amount_nsprefix_) else ''
            self.Amount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Amount', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Percentage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Percentage')
            value_ = self.gds_validate_string(value_, node, 'Percentage')
            self.Percentage = value_
            self.Percentage_nsprefix_ = child_.prefix
        elif nodeName_ == 'Amount':
            obj_ = HandlingChargeAmountType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Amount = obj_
            obj_.original_tagname_ = 'Amount'
# end class HandlingChargeType


class HandlingChargeAmountType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CurrencyCode = CurrencyCode
        self.CurrencyCode_nsprefix_ = None
        self.MonetaryValue = MonetaryValue
        self.MonetaryValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HandlingChargeAmountType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HandlingChargeAmountType.subclass:
            return HandlingChargeAmountType.subclass(*args_, **kwargs_)
        else:
            return HandlingChargeAmountType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CurrencyCode(self):
        return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode):
        self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self):
        return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue):
        self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HandlingChargeAmountType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HandlingChargeAmountType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HandlingChargeAmountType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HandlingChargeAmountType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HandlingChargeAmountType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HandlingChargeAmountType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HandlingChargeAmountType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            namespaceprefix_ = self.CurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyCode>%s</%sCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), namespaceprefix_ , eol_))
        if self.MonetaryValue is not None:
            namespaceprefix_ = self.MonetaryValue_nsprefix_ + ':' if (UseCapturedNS_ and self.MonetaryValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMonetaryValue>%s</%sMonetaryValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CurrencyCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'CurrencyCode')
            self.CurrencyCode = value_
            self.CurrencyCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'MonetaryValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MonetaryValue')
            value_ = self.gds_validate_string(value_, node, 'MonetaryValue')
            self.MonetaryValue = value_
            self.MonetaryValue_nsprefix_ = child_.prefix
# end class HandlingChargeAmountType


class PickupRequestType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AdditionalComments=None, Requester=None, PickupDate=None, EarliestTimeReady=None, LatestTimeReady=None, PickupTimeReady=None, DropoffTimeReady=None, POM=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AdditionalComments = AdditionalComments
        self.AdditionalComments_nsprefix_ = None
        self.Requester = Requester
        self.Requester_nsprefix_ = None
        self.PickupDate = PickupDate
        self.PickupDate_nsprefix_ = None
        self.EarliestTimeReady = EarliestTimeReady
        self.EarliestTimeReady_nsprefix_ = None
        self.LatestTimeReady = LatestTimeReady
        self.LatestTimeReady_nsprefix_ = None
        self.PickupTimeReady = PickupTimeReady
        self.PickupTimeReady_nsprefix_ = None
        self.DropoffTimeReady = DropoffTimeReady
        self.DropoffTimeReady_nsprefix_ = None
        self.POM = POM
        self.POM_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickupRequestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickupRequestType.subclass:
            return PickupRequestType.subclass(*args_, **kwargs_)
        else:
            return PickupRequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AdditionalComments(self):
        return self.AdditionalComments
    def set_AdditionalComments(self, AdditionalComments):
        self.AdditionalComments = AdditionalComments
    def get_Requester(self):
        return self.Requester
    def set_Requester(self, Requester):
        self.Requester = Requester
    def get_PickupDate(self):
        return self.PickupDate
    def set_PickupDate(self, PickupDate):
        self.PickupDate = PickupDate
    def get_EarliestTimeReady(self):
        return self.EarliestTimeReady
    def set_EarliestTimeReady(self, EarliestTimeReady):
        self.EarliestTimeReady = EarliestTimeReady
    def get_LatestTimeReady(self):
        return self.LatestTimeReady
    def set_LatestTimeReady(self, LatestTimeReady):
        self.LatestTimeReady = LatestTimeReady
    def get_PickupTimeReady(self):
        return self.PickupTimeReady
    def set_PickupTimeReady(self, PickupTimeReady):
        self.PickupTimeReady = PickupTimeReady
    def get_DropoffTimeReady(self):
        return self.DropoffTimeReady
    def set_DropoffTimeReady(self, DropoffTimeReady):
        self.DropoffTimeReady = DropoffTimeReady
    def get_POM(self):
        return self.POM
    def set_POM(self, POM):
        self.POM = POM
    def hasContent_(self):
        if (
            self.AdditionalComments is not None or
            self.Requester is not None or
            self.PickupDate is not None or
            self.EarliestTimeReady is not None or
            self.LatestTimeReady is not None or
            self.PickupTimeReady is not None or
            self.DropoffTimeReady is not None or
            self.POM is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PickupRequestType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickupRequestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PickupRequestType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PickupRequestType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PickupRequestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PickupRequestType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PickupRequestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AdditionalComments is not None:
            namespaceprefix_ = self.AdditionalComments_nsprefix_ + ':' if (UseCapturedNS_ and self.AdditionalComments_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAdditionalComments>%s</%sAdditionalComments>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AdditionalComments), input_name='AdditionalComments')), namespaceprefix_ , eol_))
        if self.Requester is not None:
            namespaceprefix_ = self.Requester_nsprefix_ + ':' if (UseCapturedNS_ and self.Requester_nsprefix_) else ''
            self.Requester.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Requester', pretty_print=pretty_print)
        if self.PickupDate is not None:
            namespaceprefix_ = self.PickupDate_nsprefix_ + ':' if (UseCapturedNS_ and self.PickupDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPickupDate>%s</%sPickupDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PickupDate), input_name='PickupDate')), namespaceprefix_ , eol_))
        if self.EarliestTimeReady is not None:
            namespaceprefix_ = self.EarliestTimeReady_nsprefix_ + ':' if (UseCapturedNS_ and self.EarliestTimeReady_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEarliestTimeReady>%s</%sEarliestTimeReady>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EarliestTimeReady), input_name='EarliestTimeReady')), namespaceprefix_ , eol_))
        if self.LatestTimeReady is not None:
            namespaceprefix_ = self.LatestTimeReady_nsprefix_ + ':' if (UseCapturedNS_ and self.LatestTimeReady_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLatestTimeReady>%s</%sLatestTimeReady>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LatestTimeReady), input_name='LatestTimeReady')), namespaceprefix_ , eol_))
        if self.PickupTimeReady is not None:
            namespaceprefix_ = self.PickupTimeReady_nsprefix_ + ':' if (UseCapturedNS_ and self.PickupTimeReady_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPickupTimeReady>%s</%sPickupTimeReady>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PickupTimeReady), input_name='PickupTimeReady')), namespaceprefix_ , eol_))
        if self.DropoffTimeReady is not None:
            namespaceprefix_ = self.DropoffTimeReady_nsprefix_ + ':' if (UseCapturedNS_ and self.DropoffTimeReady_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDropoffTimeReady>%s</%sDropoffTimeReady>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DropoffTimeReady), input_name='DropoffTimeReady')), namespaceprefix_ , eol_))
        if self.POM is not None:
            namespaceprefix_ = self.POM_nsprefix_ + ':' if (UseCapturedNS_ and self.POM_nsprefix_) else ''
            self.POM.export(outfile, level, namespaceprefix_, namespacedef_='', name_='POM', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AdditionalComments':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AdditionalComments')
            value_ = self.gds_validate_string(value_, node, 'AdditionalComments')
            self.AdditionalComments = value_
            self.AdditionalComments_nsprefix_ = child_.prefix
        elif nodeName_ == 'Requester':
            obj_ = RequesterType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Requester = obj_
            obj_.original_tagname_ = 'Requester'
        elif nodeName_ == 'PickupDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PickupDate')
            value_ = self.gds_validate_string(value_, node, 'PickupDate')
            self.PickupDate = value_
            self.PickupDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'EarliestTimeReady':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EarliestTimeReady')
            value_ = self.gds_validate_string(value_, node, 'EarliestTimeReady')
            self.EarliestTimeReady = value_
            self.EarliestTimeReady_nsprefix_ = child_.prefix
        elif nodeName_ == 'LatestTimeReady':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LatestTimeReady')
            value_ = self.gds_validate_string(value_, node, 'LatestTimeReady')
            self.LatestTimeReady = value_
            self.LatestTimeReady_nsprefix_ = child_.prefix
        elif nodeName_ == 'PickupTimeReady':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PickupTimeReady')
            value_ = self.gds_validate_string(value_, node, 'PickupTimeReady')
            self.PickupTimeReady = value_
            self.PickupTimeReady_nsprefix_ = child_.prefix
        elif nodeName_ == 'DropoffTimeReady':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DropoffTimeReady')
            value_ = self.gds_validate_string(value_, node, 'DropoffTimeReady')
            self.DropoffTimeReady = value_
            self.DropoffTimeReady_nsprefix_ = child_.prefix
        elif nodeName_ == 'POM':
            obj_ = POMType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.POM = obj_
            obj_.original_tagname_ = 'POM'
# end class PickupRequestType


class POMType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, POMNumber=None, POMNumberType=None, PickupNotifications=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.POMNumber = POMNumber
        self.POMNumber_nsprefix_ = None
        self.POMNumberType = POMNumberType
        self.POMNumberType_nsprefix_ = None
        self.PickupNotifications = PickupNotifications
        self.PickupNotifications_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, POMType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if POMType.subclass:
            return POMType.subclass(*args_, **kwargs_)
        else:
            return POMType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_POMNumber(self):
        return self.POMNumber
    def set_POMNumber(self, POMNumber):
        self.POMNumber = POMNumber
    def get_POMNumberType(self):
        return self.POMNumberType
    def set_POMNumberType(self, POMNumberType):
        self.POMNumberType = POMNumberType
    def get_PickupNotifications(self):
        return self.PickupNotifications
    def set_PickupNotifications(self, PickupNotifications):
        self.PickupNotifications = PickupNotifications
    def hasContent_(self):
        if (
            self.POMNumber is not None or
            self.POMNumberType is not None or
            self.PickupNotifications is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='POMType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('POMType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'POMType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='POMType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='POMType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='POMType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='POMType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.POMNumber is not None:
            namespaceprefix_ = self.POMNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.POMNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPOMNumber>%s</%sPOMNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.POMNumber), input_name='POMNumber')), namespaceprefix_ , eol_))
        if self.POMNumberType is not None:
            namespaceprefix_ = self.POMNumberType_nsprefix_ + ':' if (UseCapturedNS_ and self.POMNumberType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPOMNumberType>%s</%sPOMNumberType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.POMNumberType), input_name='POMNumberType')), namespaceprefix_ , eol_))
        if self.PickupNotifications is not None:
            namespaceprefix_ = self.PickupNotifications_nsprefix_ + ':' if (UseCapturedNS_ and self.PickupNotifications_nsprefix_) else ''
            self.PickupNotifications.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PickupNotifications', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'POMNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'POMNumber')
            value_ = self.gds_validate_string(value_, node, 'POMNumber')
            self.POMNumber = value_
            self.POMNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'POMNumberType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'POMNumberType')
            value_ = self.gds_validate_string(value_, node, 'POMNumberType')
            self.POMNumberType = value_
            self.POMNumberType_nsprefix_ = child_.prefix
        elif nodeName_ == 'PickupNotifications':
            obj_ = PickupNotificationsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PickupNotifications = obj_
            obj_.original_tagname_ = 'PickupNotifications'
# end class POMType


class PickupNotificationsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CompanyName=None, EMailNotification=None, FailedEMail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CompanyName = CompanyName
        self.CompanyName_nsprefix_ = None
        if EMailNotification is None:
            self.EMailNotification = []
        else:
            self.EMailNotification = EMailNotification
        self.EMailNotification_nsprefix_ = None
        self.FailedEMail = FailedEMail
        self.FailedEMail_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickupNotificationsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickupNotificationsType.subclass:
            return PickupNotificationsType.subclass(*args_, **kwargs_)
        else:
            return PickupNotificationsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CompanyName(self):
        return self.CompanyName
    def set_CompanyName(self, CompanyName):
        self.CompanyName = CompanyName
    def get_EMailNotification(self):
        return self.EMailNotification
    def set_EMailNotification(self, EMailNotification):
        self.EMailNotification = EMailNotification
    def add_EMailNotification(self, value):
        self.EMailNotification.append(value)
    def insert_EMailNotification_at(self, index, value):
        self.EMailNotification.insert(index, value)
    def replace_EMailNotification_at(self, index, value):
        self.EMailNotification[index] = value
    def get_FailedEMail(self):
        return self.FailedEMail
    def set_FailedEMail(self, FailedEMail):
        self.FailedEMail = FailedEMail
    def hasContent_(self):
        if (
            self.CompanyName is not None or
            self.EMailNotification or
            self.FailedEMail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PickupNotificationsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickupNotificationsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PickupNotificationsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PickupNotificationsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PickupNotificationsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PickupNotificationsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PickupNotificationsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CompanyName is not None:
            namespaceprefix_ = self.CompanyName_nsprefix_ + ':' if (UseCapturedNS_ and self.CompanyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompanyName>%s</%sCompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CompanyName), input_name='CompanyName')), namespaceprefix_ , eol_))
        for EMailNotification_ in self.EMailNotification:
            namespaceprefix_ = self.EMailNotification_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailNotification_nsprefix_) else ''
            EMailNotification_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EMailNotification', pretty_print=pretty_print)
        if self.FailedEMail is not None:
            namespaceprefix_ = self.FailedEMail_nsprefix_ + ':' if (UseCapturedNS_ and self.FailedEMail_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFailedEMail>%s</%sFailedEMail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FailedEMail), input_name='FailedEMail')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CompanyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CompanyName')
            value_ = self.gds_validate_string(value_, node, 'CompanyName')
            self.CompanyName = value_
            self.CompanyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'EMailNotification':
            obj_ = EMailNotificationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EMailNotification.append(obj_)
            obj_.original_tagname_ = 'EMailNotification'
        elif nodeName_ == 'FailedEMail':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FailedEMail')
            value_ = self.gds_validate_string(value_, node, 'FailedEMail')
            self.FailedEMail = value_
            self.FailedEMail_nsprefix_ = child_.prefix
# end class PickupNotificationsType


class EMailNotificationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EMailAddress=None, EventType=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.EMailAddress = EMailAddress
        self.EMailAddress_nsprefix_ = None
        if EventType is None:
            self.EventType = []
        else:
            self.EventType = EventType
        self.EventType_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EMailNotificationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EMailNotificationType.subclass:
            return EMailNotificationType.subclass(*args_, **kwargs_)
        else:
            return EMailNotificationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EMailAddress(self):
        return self.EMailAddress
    def set_EMailAddress(self, EMailAddress):
        self.EMailAddress = EMailAddress
    def get_EventType(self):
        return self.EventType
    def set_EventType(self, EventType):
        self.EventType = EventType
    def add_EventType(self, value):
        self.EventType.append(value)
    def insert_EventType_at(self, index, value):
        self.EventType.insert(index, value)
    def replace_EventType_at(self, index, value):
        self.EventType[index] = value
    def hasContent_(self):
        if (
            self.EMailAddress is not None or
            self.EventType
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMailNotificationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EMailNotificationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EMailNotificationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EMailNotificationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EMailNotificationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EMailNotificationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMailNotificationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EMailAddress is not None:
            namespaceprefix_ = self.EMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), namespaceprefix_ , eol_))
        for EventType_ in self.EventType:
            namespaceprefix_ = self.EventType_nsprefix_ + ':' if (UseCapturedNS_ and self.EventType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEventType>%s</%sEventType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(EventType_), input_name='EventType')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EMailAddress')
            value_ = self.gds_validate_string(value_, node, 'EMailAddress')
            self.EMailAddress = value_
            self.EMailAddress_nsprefix_ = child_.prefix
        elif nodeName_ == 'EventType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EventType')
            value_ = self.gds_validate_string(value_, node, 'EventType')
            self.EventType.append(value_)
            self.EventType_nsprefix_ = child_.prefix
# end class EMailNotificationType


class SMSType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TelephoneNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TelephoneNumber = TelephoneNumber
        self.TelephoneNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SMSType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SMSType.subclass:
            return SMSType.subclass(*args_, **kwargs_)
        else:
            return SMSType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TelephoneNumber(self):
        return self.TelephoneNumber
    def set_TelephoneNumber(self, TelephoneNumber):
        self.TelephoneNumber = TelephoneNumber
    def hasContent_(self):
        if (
            self.TelephoneNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SMSType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SMSType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SMSType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SMSType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SMSType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SMSType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SMSType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TelephoneNumber is not None:
            namespaceprefix_ = self.TelephoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TelephoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTelephoneNumber>%s</%sTelephoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TelephoneNumber), input_name='TelephoneNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TelephoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TelephoneNumber')
            value_ = self.gds_validate_string(value_, node, 'TelephoneNumber')
            self.TelephoneNumber = value_
            self.TelephoneNumber_nsprefix_ = child_.prefix
# end class SMSType


class RequesterType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ThirdPartyIndicator=None, AttentionName=None, EMailAddress=None, Name=None, Phone=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ThirdPartyIndicator = ThirdPartyIndicator
        self.ThirdPartyIndicator_nsprefix_ = None
        self.AttentionName = AttentionName
        self.AttentionName_nsprefix_ = None
        self.EMailAddress = EMailAddress
        self.EMailAddress_nsprefix_ = None
        self.Name = Name
        self.Name_nsprefix_ = None
        self.Phone = Phone
        self.Phone_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequesterType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequesterType.subclass:
            return RequesterType.subclass(*args_, **kwargs_)
        else:
            return RequesterType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ThirdPartyIndicator(self):
        return self.ThirdPartyIndicator
    def set_ThirdPartyIndicator(self, ThirdPartyIndicator):
        self.ThirdPartyIndicator = ThirdPartyIndicator
    def get_AttentionName(self):
        return self.AttentionName
    def set_AttentionName(self, AttentionName):
        self.AttentionName = AttentionName
    def get_EMailAddress(self):
        return self.EMailAddress
    def set_EMailAddress(self, EMailAddress):
        self.EMailAddress = EMailAddress
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_Phone(self):
        return self.Phone
    def set_Phone(self, Phone):
        self.Phone = Phone
    def hasContent_(self):
        if (
            self.ThirdPartyIndicator is not None or
            self.AttentionName is not None or
            self.EMailAddress is not None or
            self.Name is not None or
            self.Phone is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RequesterType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequesterType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RequesterType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RequesterType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RequesterType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RequesterType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RequesterType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ThirdPartyIndicator is not None:
            namespaceprefix_ = self.ThirdPartyIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.ThirdPartyIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sThirdPartyIndicator>%s</%sThirdPartyIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ThirdPartyIndicator), input_name='ThirdPartyIndicator')), namespaceprefix_ , eol_))
        if self.AttentionName is not None:
            namespaceprefix_ = self.AttentionName_nsprefix_ + ':' if (UseCapturedNS_ and self.AttentionName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttentionName>%s</%sAttentionName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), namespaceprefix_ , eol_))
        if self.EMailAddress is not None:
            namespaceprefix_ = self.EMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), namespaceprefix_ , eol_))
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.Phone is not None:
            namespaceprefix_ = self.Phone_nsprefix_ + ':' if (UseCapturedNS_ and self.Phone_nsprefix_) else ''
            self.Phone.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Phone', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ThirdPartyIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ThirdPartyIndicator')
            value_ = self.gds_validate_string(value_, node, 'ThirdPartyIndicator')
            self.ThirdPartyIndicator = value_
            self.ThirdPartyIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'AttentionName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AttentionName')
            value_ = self.gds_validate_string(value_, node, 'AttentionName')
            self.AttentionName = value_
            self.AttentionName_nsprefix_ = child_.prefix
        elif nodeName_ == 'EMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EMailAddress')
            value_ = self.gds_validate_string(value_, node, 'EMailAddress')
            self.EMailAddress = value_
            self.EMailAddress_nsprefix_ = child_.prefix
        elif nodeName_ == 'Name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Name')
            value_ = self.gds_validate_string(value_, node, 'Name')
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
        elif nodeName_ == 'Phone':
            obj_ = FreightShipPhoneType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Phone = obj_
            obj_.original_tagname_ = 'Phone'
# end class RequesterType


class DocumentsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FormGroupId=None, FormGroupIdName=None, Image=None, PackingList=None, InternationalForms=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.FormGroupId = FormGroupId
        self.FormGroupId_nsprefix_ = None
        self.FormGroupIdName = FormGroupIdName
        self.FormGroupIdName_nsprefix_ = None
        if Image is None:
            self.Image = []
        else:
            self.Image = Image
        self.Image_nsprefix_ = None
        self.PackingList = PackingList
        self.PackingList_nsprefix_ = None
        self.InternationalForms = InternationalForms
        self.InternationalForms_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocumentsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocumentsType.subclass:
            return DocumentsType.subclass(*args_, **kwargs_)
        else:
            return DocumentsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FormGroupId(self):
        return self.FormGroupId
    def set_FormGroupId(self, FormGroupId):
        self.FormGroupId = FormGroupId
    def get_FormGroupIdName(self):
        return self.FormGroupIdName
    def set_FormGroupIdName(self, FormGroupIdName):
        self.FormGroupIdName = FormGroupIdName
    def get_Image(self):
        return self.Image
    def set_Image(self, Image):
        self.Image = Image
    def add_Image(self, value):
        self.Image.append(value)
    def insert_Image_at(self, index, value):
        self.Image.insert(index, value)
    def replace_Image_at(self, index, value):
        self.Image[index] = value
    def get_PackingList(self):
        return self.PackingList
    def set_PackingList(self, PackingList):
        self.PackingList = PackingList
    def get_InternationalForms(self):
        return self.InternationalForms
    def set_InternationalForms(self, InternationalForms):
        self.InternationalForms = InternationalForms
    def hasContent_(self):
        if (
            self.FormGroupId is not None or
            self.FormGroupIdName is not None or
            self.Image or
            self.PackingList is not None or
            self.InternationalForms is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocumentsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocumentsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DocumentsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocumentsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DocumentsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DocumentsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocumentsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FormGroupId is not None:
            namespaceprefix_ = self.FormGroupId_nsprefix_ + ':' if (UseCapturedNS_ and self.FormGroupId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormGroupId>%s</%sFormGroupId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FormGroupId), input_name='FormGroupId')), namespaceprefix_ , eol_))
        if self.FormGroupIdName is not None:
            namespaceprefix_ = self.FormGroupIdName_nsprefix_ + ':' if (UseCapturedNS_ and self.FormGroupIdName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormGroupIdName>%s</%sFormGroupIdName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FormGroupIdName), input_name='FormGroupIdName')), namespaceprefix_ , eol_))
        for Image_ in self.Image:
            namespaceprefix_ = self.Image_nsprefix_ + ':' if (UseCapturedNS_ and self.Image_nsprefix_) else ''
            Image_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Image', pretty_print=pretty_print)
        if self.PackingList is not None:
            namespaceprefix_ = self.PackingList_nsprefix_ + ':' if (UseCapturedNS_ and self.PackingList_nsprefix_) else ''
            self.PackingList.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackingList', pretty_print=pretty_print)
        if self.InternationalForms is not None:
            namespaceprefix_ = self.InternationalForms_nsprefix_ + ':' if (UseCapturedNS_ and self.InternationalForms_nsprefix_) else ''
            self.InternationalForms.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InternationalForms', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FormGroupId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FormGroupId')
            value_ = self.gds_validate_string(value_, node, 'FormGroupId')
            self.FormGroupId = value_
            self.FormGroupId_nsprefix_ = child_.prefix
        elif nodeName_ == 'FormGroupIdName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FormGroupIdName')
            value_ = self.gds_validate_string(value_, node, 'FormGroupIdName')
            self.FormGroupIdName = value_
            self.FormGroupIdName_nsprefix_ = child_.prefix
        elif nodeName_ == 'Image':
            obj_ = ImageType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Image.append(obj_)
            obj_.original_tagname_ = 'Image'
        elif nodeName_ == 'PackingList':
            obj_ = PackingListType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackingList = obj_
            obj_.original_tagname_ = 'PackingList'
        elif nodeName_ == 'InternationalForms':
            obj_ = InternationalFormType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InternationalForms = obj_
            obj_.original_tagname_ = 'InternationalForms'
# end class DocumentsType


class ImageType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, LabelsPerPage=None, Format=None, PrintFormat=None, PrintSize=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.Type_nsprefix_ = None
        self.LabelsPerPage = LabelsPerPage
        self.LabelsPerPage_nsprefix_ = None
        self.Format = Format
        self.Format_nsprefix_ = None
        self.PrintFormat = PrintFormat
        self.PrintFormat_nsprefix_ = None
        self.PrintSize = PrintSize
        self.PrintSize_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ImageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ImageType.subclass:
            return ImageType.subclass(*args_, **kwargs_)
        else:
            return ImageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_LabelsPerPage(self):
        return self.LabelsPerPage
    def set_LabelsPerPage(self, LabelsPerPage):
        self.LabelsPerPage = LabelsPerPage
    def get_Format(self):
        return self.Format
    def set_Format(self, Format):
        self.Format = Format
    def get_PrintFormat(self):
        return self.PrintFormat
    def set_PrintFormat(self, PrintFormat):
        self.PrintFormat = PrintFormat
    def get_PrintSize(self):
        return self.PrintSize
    def set_PrintSize(self, PrintSize):
        self.PrintSize = PrintSize
    def hasContent_(self):
        if (
            self.Type is not None or
            self.LabelsPerPage is not None or
            self.Format is not None or
            self.PrintFormat is not None or
            self.PrintSize is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ImageType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ImageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ImageType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ImageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ImageType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ImageType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ImageType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            self.Type.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Type', pretty_print=pretty_print)
        if self.LabelsPerPage is not None:
            namespaceprefix_ = self.LabelsPerPage_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelsPerPage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelsPerPage>%s</%sLabelsPerPage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LabelsPerPage), input_name='LabelsPerPage')), namespaceprefix_ , eol_))
        if self.Format is not None:
            namespaceprefix_ = self.Format_nsprefix_ + ':' if (UseCapturedNS_ and self.Format_nsprefix_) else ''
            self.Format.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Format', pretty_print=pretty_print)
        if self.PrintFormat is not None:
            namespaceprefix_ = self.PrintFormat_nsprefix_ + ':' if (UseCapturedNS_ and self.PrintFormat_nsprefix_) else ''
            self.PrintFormat.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PrintFormat', pretty_print=pretty_print)
        if self.PrintSize is not None:
            namespaceprefix_ = self.PrintSize_nsprefix_ + ':' if (UseCapturedNS_ and self.PrintSize_nsprefix_) else ''
            self.PrintSize.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PrintSize', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            obj_ = ShipCodeDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Type = obj_
            obj_.original_tagname_ = 'Type'
        elif nodeName_ == 'LabelsPerPage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelsPerPage')
            value_ = self.gds_validate_string(value_, node, 'LabelsPerPage')
            self.LabelsPerPage = value_
            self.LabelsPerPage_nsprefix_ = child_.prefix
        elif nodeName_ == 'Format':
            obj_ = ShipCodeDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Format = obj_
            obj_.original_tagname_ = 'Format'
        elif nodeName_ == 'PrintFormat':
            obj_ = ShipCodeDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PrintFormat = obj_
            obj_.original_tagname_ = 'PrintFormat'
        elif nodeName_ == 'PrintSize':
            obj_ = PrintSizeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PrintSize = obj_
            obj_.original_tagname_ = 'PrintSize'
# end class ImageType


class PrintSizeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Length=None, Width=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Length = Length
        self.Length_nsprefix_ = None
        self.Width = Width
        self.Width_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PrintSizeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PrintSizeType.subclass:
            return PrintSizeType.subclass(*args_, **kwargs_)
        else:
            return PrintSizeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Length(self):
        return self.Length
    def set_Length(self, Length):
        self.Length = Length
    def get_Width(self):
        return self.Width
    def set_Width(self, Width):
        self.Width = Width
    def hasContent_(self):
        if (
            self.Length is not None or
            self.Width is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PrintSizeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PrintSizeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PrintSizeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PrintSizeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PrintSizeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PrintSizeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PrintSizeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Length is not None:
            namespaceprefix_ = self.Length_nsprefix_ + ':' if (UseCapturedNS_ and self.Length_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLength>%s</%sLength>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Length), input_name='Length')), namespaceprefix_ , eol_))
        if self.Width is not None:
            namespaceprefix_ = self.Width_nsprefix_ + ':' if (UseCapturedNS_ and self.Width_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWidth>%s</%sWidth>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Width), input_name='Width')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Length':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Length')
            value_ = self.gds_validate_string(value_, node, 'Length')
            self.Length = value_
            self.Length_nsprefix_ = child_.prefix
        elif nodeName_ == 'Width':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Width')
            value_ = self.gds_validate_string(value_, node, 'Width')
            self.Width = value_
            self.Width_nsprefix_ = child_.prefix
# end class PrintSizeType


class PackingListType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ShipFrom=None, ShipTo=None, Reference=None, HandlingUnit=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ShipFrom = ShipFrom
        self.ShipFrom_nsprefix_ = None
        self.ShipTo = ShipTo
        self.ShipTo_nsprefix_ = None
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
        self.Reference_nsprefix_ = None
        self.HandlingUnit = HandlingUnit
        self.HandlingUnit_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackingListType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackingListType.subclass:
            return PackingListType.subclass(*args_, **kwargs_)
        else:
            return PackingListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ShipFrom(self):
        return self.ShipFrom
    def set_ShipFrom(self, ShipFrom):
        self.ShipFrom = ShipFrom
    def get_ShipTo(self):
        return self.ShipTo
    def set_ShipTo(self, ShipTo):
        self.ShipTo = ShipTo
    def get_Reference(self):
        return self.Reference
    def set_Reference(self, Reference):
        self.Reference = Reference
    def add_Reference(self, value):
        self.Reference.append(value)
    def insert_Reference_at(self, index, value):
        self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value):
        self.Reference[index] = value
    def get_HandlingUnit(self):
        return self.HandlingUnit
    def set_HandlingUnit(self, HandlingUnit):
        self.HandlingUnit = HandlingUnit
    def hasContent_(self):
        if (
            self.ShipFrom is not None or
            self.ShipTo is not None or
            self.Reference or
            self.HandlingUnit is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackingListType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackingListType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackingListType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackingListType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackingListType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackingListType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackingListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShipFrom is not None:
            namespaceprefix_ = self.ShipFrom_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipFrom_nsprefix_) else ''
            self.ShipFrom.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipFrom', pretty_print=pretty_print)
        if self.ShipTo is not None:
            namespaceprefix_ = self.ShipTo_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipTo_nsprefix_) else ''
            self.ShipTo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipTo', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            namespaceprefix_ = self.Reference_nsprefix_ + ':' if (UseCapturedNS_ and self.Reference_nsprefix_) else ''
            Reference_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Reference', pretty_print=pretty_print)
        if self.HandlingUnit is not None:
            namespaceprefix_ = self.HandlingUnit_nsprefix_ + ':' if (UseCapturedNS_ and self.HandlingUnit_nsprefix_) else ''
            self.HandlingUnit.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HandlingUnit', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ShipFrom':
            obj_ = PackingListContactType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipFrom = obj_
            obj_.original_tagname_ = 'ShipFrom'
        elif nodeName_ == 'ShipTo':
            obj_ = PackingListContactType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipTo = obj_
            obj_.original_tagname_ = 'ShipTo'
        elif nodeName_ == 'Reference':
            obj_ = PackingListReferenceType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
        elif nodeName_ == 'HandlingUnit':
            obj_ = PackingListHandlingUnitType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HandlingUnit = obj_
            obj_.original_tagname_ = 'HandlingUnit'
# end class PackingListType


class PackingListContactType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Name=None, AttentionName=None, Address=None, PhoneNumber=None, EMailAddress=None, PhoneExtension=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Name = Name
        self.Name_nsprefix_ = None
        self.AttentionName = AttentionName
        self.AttentionName_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
        self.PhoneNumber = PhoneNumber
        self.PhoneNumber_nsprefix_ = None
        self.EMailAddress = EMailAddress
        self.EMailAddress_nsprefix_ = None
        self.PhoneExtension = PhoneExtension
        self.PhoneExtension_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackingListContactType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackingListContactType.subclass:
            return PackingListContactType.subclass(*args_, **kwargs_)
        else:
            return PackingListContactType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_AttentionName(self):
        return self.AttentionName
    def set_AttentionName(self, AttentionName):
        self.AttentionName = AttentionName
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def get_PhoneNumber(self):
        return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber):
        self.PhoneNumber = PhoneNumber
    def get_EMailAddress(self):
        return self.EMailAddress
    def set_EMailAddress(self, EMailAddress):
        self.EMailAddress = EMailAddress
    def get_PhoneExtension(self):
        return self.PhoneExtension
    def set_PhoneExtension(self, PhoneExtension):
        self.PhoneExtension = PhoneExtension
    def hasContent_(self):
        if (
            self.Name is not None or
            self.AttentionName is not None or
            self.Address is not None or
            self.PhoneNumber is not None or
            self.EMailAddress is not None or
            self.PhoneExtension is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackingListContactType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackingListContactType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackingListContactType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackingListContactType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackingListContactType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackingListContactType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackingListContactType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.AttentionName is not None:
            namespaceprefix_ = self.AttentionName_nsprefix_ + ':' if (UseCapturedNS_ and self.AttentionName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttentionName>%s</%sAttentionName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
        if self.PhoneNumber is not None:
            namespaceprefix_ = self.PhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhoneNumber>%s</%sPhoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), namespaceprefix_ , eol_))
        if self.EMailAddress is not None:
            namespaceprefix_ = self.EMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), namespaceprefix_ , eol_))
        if self.PhoneExtension is not None:
            namespaceprefix_ = self.PhoneExtension_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneExtension_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhoneExtension>%s</%sPhoneExtension>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhoneExtension), input_name='PhoneExtension')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Name')
            value_ = self.gds_validate_string(value_, node, 'Name')
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
        elif nodeName_ == 'AttentionName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AttentionName')
            value_ = self.gds_validate_string(value_, node, 'AttentionName')
            self.AttentionName = value_
            self.AttentionName_nsprefix_ = child_.prefix
        elif nodeName_ == 'Address':
            obj_ = FreightShipAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'PhoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhoneNumber')
            value_ = self.gds_validate_string(value_, node, 'PhoneNumber')
            self.PhoneNumber = value_
            self.PhoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'EMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EMailAddress')
            value_ = self.gds_validate_string(value_, node, 'EMailAddress')
            self.EMailAddress = value_
            self.EMailAddress_nsprefix_ = child_.prefix
        elif nodeName_ == 'PhoneExtension':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhoneExtension')
            value_ = self.gds_validate_string(value_, node, 'PhoneExtension')
            self.PhoneExtension = value_
            self.PhoneExtension_nsprefix_ = child_.prefix
# end class PackingListContactType


class PackingListReferenceType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Label=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Label = Label
        self.Label_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackingListReferenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackingListReferenceType.subclass:
            return PackingListReferenceType.subclass(*args_, **kwargs_)
        else:
            return PackingListReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Label(self):
        return self.Label
    def set_Label(self, Label):
        self.Label = Label
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def hasContent_(self):
        if (
            self.Label is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackingListReferenceType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackingListReferenceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackingListReferenceType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackingListReferenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackingListReferenceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackingListReferenceType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackingListReferenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Label is not None:
            namespaceprefix_ = self.Label_nsprefix_ + ':' if (UseCapturedNS_ and self.Label_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabel>%s</%sLabel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Label), input_name='Label')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Label':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Label')
            value_ = self.gds_validate_string(value_, node, 'Label')
            self.Label = value_
            self.Label_nsprefix_ = child_.prefix
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
# end class PackingListReferenceType


class PackingListHandlingUnitType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Commodity=None, SpecialInstructions=None, TotalNumberOfPieces=None, TotalWeight=None, UnitOfMeasurement=None, CurrencyCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Commodity is None:
            self.Commodity = []
        else:
            self.Commodity = Commodity
        self.Commodity_nsprefix_ = None
        self.SpecialInstructions = SpecialInstructions
        self.SpecialInstructions_nsprefix_ = None
        self.TotalNumberOfPieces = TotalNumberOfPieces
        self.TotalNumberOfPieces_nsprefix_ = None
        self.TotalWeight = TotalWeight
        self.TotalWeight_nsprefix_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.UnitOfMeasurement_nsprefix_ = None
        self.CurrencyCode = CurrencyCode
        self.CurrencyCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackingListHandlingUnitType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackingListHandlingUnitType.subclass:
            return PackingListHandlingUnitType.subclass(*args_, **kwargs_)
        else:
            return PackingListHandlingUnitType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Commodity(self):
        return self.Commodity
    def set_Commodity(self, Commodity):
        self.Commodity = Commodity
    def add_Commodity(self, value):
        self.Commodity.append(value)
    def insert_Commodity_at(self, index, value):
        self.Commodity.insert(index, value)
    def replace_Commodity_at(self, index, value):
        self.Commodity[index] = value
    def get_SpecialInstructions(self):
        return self.SpecialInstructions
    def set_SpecialInstructions(self, SpecialInstructions):
        self.SpecialInstructions = SpecialInstructions
    def get_TotalNumberOfPieces(self):
        return self.TotalNumberOfPieces
    def set_TotalNumberOfPieces(self, TotalNumberOfPieces):
        self.TotalNumberOfPieces = TotalNumberOfPieces
    def get_TotalWeight(self):
        return self.TotalWeight
    def set_TotalWeight(self, TotalWeight):
        self.TotalWeight = TotalWeight
    def get_UnitOfMeasurement(self):
        return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement):
        self.UnitOfMeasurement = UnitOfMeasurement
    def get_CurrencyCode(self):
        return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode):
        self.CurrencyCode = CurrencyCode
    def hasContent_(self):
        if (
            self.Commodity or
            self.SpecialInstructions is not None or
            self.TotalNumberOfPieces is not None or
            self.TotalWeight is not None or
            self.UnitOfMeasurement is not None or
            self.CurrencyCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackingListHandlingUnitType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackingListHandlingUnitType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackingListHandlingUnitType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackingListHandlingUnitType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackingListHandlingUnitType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackingListHandlingUnitType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackingListHandlingUnitType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Commodity_ in self.Commodity:
            namespaceprefix_ = self.Commodity_nsprefix_ + ':' if (UseCapturedNS_ and self.Commodity_nsprefix_) else ''
            Commodity_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Commodity', pretty_print=pretty_print)
        if self.SpecialInstructions is not None:
            namespaceprefix_ = self.SpecialInstructions_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialInstructions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialInstructions>%s</%sSpecialInstructions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SpecialInstructions), input_name='SpecialInstructions')), namespaceprefix_ , eol_))
        if self.TotalNumberOfPieces is not None:
            namespaceprefix_ = self.TotalNumberOfPieces_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalNumberOfPieces_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalNumberOfPieces>%s</%sTotalNumberOfPieces>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TotalNumberOfPieces), input_name='TotalNumberOfPieces')), namespaceprefix_ , eol_))
        if self.TotalWeight is not None:
            namespaceprefix_ = self.TotalWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalWeight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalWeight>%s</%sTotalWeight>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TotalWeight), input_name='TotalWeight')), namespaceprefix_ , eol_))
        if self.UnitOfMeasurement is not None:
            namespaceprefix_ = self.UnitOfMeasurement_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitOfMeasurement_nsprefix_) else ''
            self.UnitOfMeasurement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.CurrencyCode is not None:
            namespaceprefix_ = self.CurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyCode>%s</%sCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Commodity':
            obj_ = PackingListCommodityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Commodity.append(obj_)
            obj_.original_tagname_ = 'Commodity'
        elif nodeName_ == 'SpecialInstructions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecialInstructions')
            value_ = self.gds_validate_string(value_, node, 'SpecialInstructions')
            self.SpecialInstructions = value_
            self.SpecialInstructions_nsprefix_ = child_.prefix
        elif nodeName_ == 'TotalNumberOfPieces':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TotalNumberOfPieces')
            value_ = self.gds_validate_string(value_, node, 'TotalNumberOfPieces')
            self.TotalNumberOfPieces = value_
            self.TotalNumberOfPieces_nsprefix_ = child_.prefix
        elif nodeName_ == 'TotalWeight':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TotalWeight')
            value_ = self.gds_validate_string(value_, node, 'TotalWeight')
            self.TotalWeight = value_
            self.TotalWeight_nsprefix_ = child_.prefix
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = FreightShipUnitOfMeasurementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'CurrencyCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'CurrencyCode')
            self.CurrencyCode = value_
            self.CurrencyCode_nsprefix_ = child_.prefix
# end class PackingListHandlingUnitType


class PackingListCommodityType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, NumberOfPieces=None, PackagingType=None, DangerousGoodsIndicator=None, Description=None, NMFCCommodityCode=None, FreightClass=None, Dimensions=None, Weight=None, CommodityValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.NumberOfPieces = NumberOfPieces
        self.NumberOfPieces_nsprefix_ = None
        self.PackagingType = PackagingType
        self.PackagingType_nsprefix_ = None
        self.DangerousGoodsIndicator = DangerousGoodsIndicator
        self.DangerousGoodsIndicator_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.NMFCCommodityCode = NMFCCommodityCode
        self.NMFCCommodityCode_nsprefix_ = None
        self.FreightClass = FreightClass
        self.FreightClass_nsprefix_ = None
        self.Dimensions = Dimensions
        self.Dimensions_nsprefix_ = None
        self.Weight = Weight
        self.Weight_nsprefix_ = None
        self.CommodityValue = CommodityValue
        self.CommodityValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackingListCommodityType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackingListCommodityType.subclass:
            return PackingListCommodityType.subclass(*args_, **kwargs_)
        else:
            return PackingListCommodityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_NumberOfPieces(self):
        return self.NumberOfPieces
    def set_NumberOfPieces(self, NumberOfPieces):
        self.NumberOfPieces = NumberOfPieces
    def get_PackagingType(self):
        return self.PackagingType
    def set_PackagingType(self, PackagingType):
        self.PackagingType = PackagingType
    def get_DangerousGoodsIndicator(self):
        return self.DangerousGoodsIndicator
    def set_DangerousGoodsIndicator(self, DangerousGoodsIndicator):
        self.DangerousGoodsIndicator = DangerousGoodsIndicator
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_NMFCCommodityCode(self):
        return self.NMFCCommodityCode
    def set_NMFCCommodityCode(self, NMFCCommodityCode):
        self.NMFCCommodityCode = NMFCCommodityCode
    def get_FreightClass(self):
        return self.FreightClass
    def set_FreightClass(self, FreightClass):
        self.FreightClass = FreightClass
    def get_Dimensions(self):
        return self.Dimensions
    def set_Dimensions(self, Dimensions):
        self.Dimensions = Dimensions
    def get_Weight(self):
        return self.Weight
    def set_Weight(self, Weight):
        self.Weight = Weight
    def get_CommodityValue(self):
        return self.CommodityValue
    def set_CommodityValue(self, CommodityValue):
        self.CommodityValue = CommodityValue
    def hasContent_(self):
        if (
            self.NumberOfPieces is not None or
            self.PackagingType is not None or
            self.DangerousGoodsIndicator is not None or
            self.Description is not None or
            self.NMFCCommodityCode is not None or
            self.FreightClass is not None or
            self.Dimensions is not None or
            self.Weight is not None or
            self.CommodityValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackingListCommodityType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackingListCommodityType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackingListCommodityType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackingListCommodityType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackingListCommodityType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackingListCommodityType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackingListCommodityType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NumberOfPieces is not None:
            namespaceprefix_ = self.NumberOfPieces_nsprefix_ + ':' if (UseCapturedNS_ and self.NumberOfPieces_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfPieces>%s</%sNumberOfPieces>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NumberOfPieces), input_name='NumberOfPieces')), namespaceprefix_ , eol_))
        if self.PackagingType is not None:
            namespaceprefix_ = self.PackagingType_nsprefix_ + ':' if (UseCapturedNS_ and self.PackagingType_nsprefix_) else ''
            self.PackagingType.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackagingType', pretty_print=pretty_print)
        if self.DangerousGoodsIndicator is not None:
            namespaceprefix_ = self.DangerousGoodsIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.DangerousGoodsIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDangerousGoodsIndicator>%s</%sDangerousGoodsIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DangerousGoodsIndicator), input_name='DangerousGoodsIndicator')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.NMFCCommodityCode is not None:
            namespaceprefix_ = self.NMFCCommodityCode_nsprefix_ + ':' if (UseCapturedNS_ and self.NMFCCommodityCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNMFCCommodityCode>%s</%sNMFCCommodityCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NMFCCommodityCode), input_name='NMFCCommodityCode')), namespaceprefix_ , eol_))
        if self.FreightClass is not None:
            namespaceprefix_ = self.FreightClass_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightClass_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFreightClass>%s</%sFreightClass>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FreightClass), input_name='FreightClass')), namespaceprefix_ , eol_))
        if self.Dimensions is not None:
            namespaceprefix_ = self.Dimensions_nsprefix_ + ':' if (UseCapturedNS_ and self.Dimensions_nsprefix_) else ''
            self.Dimensions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Dimensions', pretty_print=pretty_print)
        if self.Weight is not None:
            namespaceprefix_ = self.Weight_nsprefix_ + ':' if (UseCapturedNS_ and self.Weight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeight>%s</%sWeight>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Weight), input_name='Weight')), namespaceprefix_ , eol_))
        if self.CommodityValue is not None:
            namespaceprefix_ = self.CommodityValue_nsprefix_ + ':' if (UseCapturedNS_ and self.CommodityValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommodityValue>%s</%sCommodityValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CommodityValue), input_name='CommodityValue')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'NumberOfPieces':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NumberOfPieces')
            value_ = self.gds_validate_string(value_, node, 'NumberOfPieces')
            self.NumberOfPieces = value_
            self.NumberOfPieces_nsprefix_ = child_.prefix
        elif nodeName_ == 'PackagingType':
            obj_ = ShipCodeDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackagingType = obj_
            obj_.original_tagname_ = 'PackagingType'
        elif nodeName_ == 'DangerousGoodsIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DangerousGoodsIndicator')
            value_ = self.gds_validate_string(value_, node, 'DangerousGoodsIndicator')
            self.DangerousGoodsIndicator = value_
            self.DangerousGoodsIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'NMFCCommodityCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NMFCCommodityCode')
            value_ = self.gds_validate_string(value_, node, 'NMFCCommodityCode')
            self.NMFCCommodityCode = value_
            self.NMFCCommodityCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'FreightClass':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FreightClass')
            value_ = self.gds_validate_string(value_, node, 'FreightClass')
            self.FreightClass = value_
            self.FreightClass_nsprefix_ = child_.prefix
        elif nodeName_ == 'Dimensions':
            obj_ = PackingListDimensionsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
        elif nodeName_ == 'Weight':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Weight')
            value_ = self.gds_validate_string(value_, node, 'Weight')
            self.Weight = value_
            self.Weight_nsprefix_ = child_.prefix
        elif nodeName_ == 'CommodityValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CommodityValue')
            value_ = self.gds_validate_string(value_, node, 'CommodityValue')
            self.CommodityValue = value_
            self.CommodityValue_nsprefix_ = child_.prefix
# end class PackingListCommodityType


class PackingListDimensionsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Length=None, Width=None, Height=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Length = Length
        self.Length_nsprefix_ = None
        self.Width = Width
        self.Width_nsprefix_ = None
        self.Height = Height
        self.Height_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackingListDimensionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackingListDimensionsType.subclass:
            return PackingListDimensionsType.subclass(*args_, **kwargs_)
        else:
            return PackingListDimensionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Length(self):
        return self.Length
    def set_Length(self, Length):
        self.Length = Length
    def get_Width(self):
        return self.Width
    def set_Width(self, Width):
        self.Width = Width
    def get_Height(self):
        return self.Height
    def set_Height(self, Height):
        self.Height = Height
    def hasContent_(self):
        if (
            self.Length is not None or
            self.Width is not None or
            self.Height is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackingListDimensionsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackingListDimensionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackingListDimensionsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackingListDimensionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackingListDimensionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackingListDimensionsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackingListDimensionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Length is not None:
            namespaceprefix_ = self.Length_nsprefix_ + ':' if (UseCapturedNS_ and self.Length_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLength>%s</%sLength>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Length), input_name='Length')), namespaceprefix_ , eol_))
        if self.Width is not None:
            namespaceprefix_ = self.Width_nsprefix_ + ':' if (UseCapturedNS_ and self.Width_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWidth>%s</%sWidth>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Width), input_name='Width')), namespaceprefix_ , eol_))
        if self.Height is not None:
            namespaceprefix_ = self.Height_nsprefix_ + ':' if (UseCapturedNS_ and self.Height_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHeight>%s</%sHeight>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Height), input_name='Height')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Length':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Length')
            value_ = self.gds_validate_string(value_, node, 'Length')
            self.Length = value_
            self.Length_nsprefix_ = child_.prefix
        elif nodeName_ == 'Width':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Width')
            value_ = self.gds_validate_string(value_, node, 'Width')
            self.Width = value_
            self.Width_nsprefix_ = child_.prefix
        elif nodeName_ == 'Height':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Height')
            value_ = self.gds_validate_string(value_, node, 'Height')
            self.Height = value_
            self.Height_nsprefix_ = child_.prefix
# end class PackingListDimensionsType


class ShipmentResultsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AirFreightPickupRequest=None, ShipperNumber=None, CreationDate=None, CustomerServiceInformation=None, OriginServiceCenterCode=None, DestinationServiceCenterCode=None, LabelServiceCode=None, AirFreightModularID=None, PickupRequestConfirmationNumber=None, DeliveryDate=None, ShipmentNumber=None, BOLID=None, GuaranteedIndicator=None, MinimumChargeAppliedIndicator=None, Rate=None, FreightDensityRate=None, TotalShipmentCharge=None, MinimumBillableWeightAppliedIndicator=None, BillableShipmentWeight=None, RatingSchedule=None, DimensionalWeight=None, Service=None, Documents=None, HoldAtAirportPickupDate=None, NextAvailablePickupDate=None, TimeInTransit=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AirFreightPickupRequest = AirFreightPickupRequest
        self.AirFreightPickupRequest_nsprefix_ = None
        self.ShipperNumber = ShipperNumber
        self.ShipperNumber_nsprefix_ = None
        self.CreationDate = CreationDate
        self.CreationDate_nsprefix_ = None
        self.CustomerServiceInformation = CustomerServiceInformation
        self.CustomerServiceInformation_nsprefix_ = None
        self.OriginServiceCenterCode = OriginServiceCenterCode
        self.OriginServiceCenterCode_nsprefix_ = None
        self.DestinationServiceCenterCode = DestinationServiceCenterCode
        self.DestinationServiceCenterCode_nsprefix_ = None
        self.LabelServiceCode = LabelServiceCode
        self.LabelServiceCode_nsprefix_ = None
        self.AirFreightModularID = AirFreightModularID
        self.AirFreightModularID_nsprefix_ = None
        self.PickupRequestConfirmationNumber = PickupRequestConfirmationNumber
        self.PickupRequestConfirmationNumber_nsprefix_ = None
        self.DeliveryDate = DeliveryDate
        self.DeliveryDate_nsprefix_ = None
        self.ShipmentNumber = ShipmentNumber
        self.ShipmentNumber_nsprefix_ = None
        self.BOLID = BOLID
        self.BOLID_nsprefix_ = None
        self.GuaranteedIndicator = GuaranteedIndicator
        self.GuaranteedIndicator_nsprefix_ = None
        self.MinimumChargeAppliedIndicator = MinimumChargeAppliedIndicator
        self.MinimumChargeAppliedIndicator_nsprefix_ = None
        if Rate is None:
            self.Rate = []
        else:
            self.Rate = Rate
        self.Rate_nsprefix_ = None
        self.FreightDensityRate = FreightDensityRate
        self.FreightDensityRate_nsprefix_ = None
        self.TotalShipmentCharge = TotalShipmentCharge
        self.TotalShipmentCharge_nsprefix_ = None
        self.MinimumBillableWeightAppliedIndicator = MinimumBillableWeightAppliedIndicator
        self.MinimumBillableWeightAppliedIndicator_nsprefix_ = None
        self.BillableShipmentWeight = BillableShipmentWeight
        self.BillableShipmentWeight_nsprefix_ = None
        self.RatingSchedule = RatingSchedule
        self.RatingSchedule_nsprefix_ = None
        self.DimensionalWeight = DimensionalWeight
        self.DimensionalWeight_nsprefix_ = None
        self.Service = Service
        self.Service_nsprefix_ = None
        self.Documents = Documents
        self.Documents_nsprefix_ = None
        self.HoldAtAirportPickupDate = HoldAtAirportPickupDate
        self.HoldAtAirportPickupDate_nsprefix_ = None
        self.NextAvailablePickupDate = NextAvailablePickupDate
        self.NextAvailablePickupDate_nsprefix_ = None
        self.TimeInTransit = TimeInTransit
        self.TimeInTransit_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentResultsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentResultsType.subclass:
            return ShipmentResultsType.subclass(*args_, **kwargs_)
        else:
            return ShipmentResultsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AirFreightPickupRequest(self):
        return self.AirFreightPickupRequest
    def set_AirFreightPickupRequest(self, AirFreightPickupRequest):
        self.AirFreightPickupRequest = AirFreightPickupRequest
    def get_ShipperNumber(self):
        return self.ShipperNumber
    def set_ShipperNumber(self, ShipperNumber):
        self.ShipperNumber = ShipperNumber
    def get_CreationDate(self):
        return self.CreationDate
    def set_CreationDate(self, CreationDate):
        self.CreationDate = CreationDate
    def get_CustomerServiceInformation(self):
        return self.CustomerServiceInformation
    def set_CustomerServiceInformation(self, CustomerServiceInformation):
        self.CustomerServiceInformation = CustomerServiceInformation
    def get_OriginServiceCenterCode(self):
        return self.OriginServiceCenterCode
    def set_OriginServiceCenterCode(self, OriginServiceCenterCode):
        self.OriginServiceCenterCode = OriginServiceCenterCode
    def get_DestinationServiceCenterCode(self):
        return self.DestinationServiceCenterCode
    def set_DestinationServiceCenterCode(self, DestinationServiceCenterCode):
        self.DestinationServiceCenterCode = DestinationServiceCenterCode
    def get_LabelServiceCode(self):
        return self.LabelServiceCode
    def set_LabelServiceCode(self, LabelServiceCode):
        self.LabelServiceCode = LabelServiceCode
    def get_AirFreightModularID(self):
        return self.AirFreightModularID
    def set_AirFreightModularID(self, AirFreightModularID):
        self.AirFreightModularID = AirFreightModularID
    def get_PickupRequestConfirmationNumber(self):
        return self.PickupRequestConfirmationNumber
    def set_PickupRequestConfirmationNumber(self, PickupRequestConfirmationNumber):
        self.PickupRequestConfirmationNumber = PickupRequestConfirmationNumber
    def get_DeliveryDate(self):
        return self.DeliveryDate
    def set_DeliveryDate(self, DeliveryDate):
        self.DeliveryDate = DeliveryDate
    def get_ShipmentNumber(self):
        return self.ShipmentNumber
    def set_ShipmentNumber(self, ShipmentNumber):
        self.ShipmentNumber = ShipmentNumber
    def get_BOLID(self):
        return self.BOLID
    def set_BOLID(self, BOLID):
        self.BOLID = BOLID
    def get_GuaranteedIndicator(self):
        return self.GuaranteedIndicator
    def set_GuaranteedIndicator(self, GuaranteedIndicator):
        self.GuaranteedIndicator = GuaranteedIndicator
    def get_MinimumChargeAppliedIndicator(self):
        return self.MinimumChargeAppliedIndicator
    def set_MinimumChargeAppliedIndicator(self, MinimumChargeAppliedIndicator):
        self.MinimumChargeAppliedIndicator = MinimumChargeAppliedIndicator
    def get_Rate(self):
        return self.Rate
    def set_Rate(self, Rate):
        self.Rate = Rate
    def add_Rate(self, value):
        self.Rate.append(value)
    def insert_Rate_at(self, index, value):
        self.Rate.insert(index, value)
    def replace_Rate_at(self, index, value):
        self.Rate[index] = value
    def get_FreightDensityRate(self):
        return self.FreightDensityRate
    def set_FreightDensityRate(self, FreightDensityRate):
        self.FreightDensityRate = FreightDensityRate
    def get_TotalShipmentCharge(self):
        return self.TotalShipmentCharge
    def set_TotalShipmentCharge(self, TotalShipmentCharge):
        self.TotalShipmentCharge = TotalShipmentCharge
    def get_MinimumBillableWeightAppliedIndicator(self):
        return self.MinimumBillableWeightAppliedIndicator
    def set_MinimumBillableWeightAppliedIndicator(self, MinimumBillableWeightAppliedIndicator):
        self.MinimumBillableWeightAppliedIndicator = MinimumBillableWeightAppliedIndicator
    def get_BillableShipmentWeight(self):
        return self.BillableShipmentWeight
    def set_BillableShipmentWeight(self, BillableShipmentWeight):
        self.BillableShipmentWeight = BillableShipmentWeight
    def get_RatingSchedule(self):
        return self.RatingSchedule
    def set_RatingSchedule(self, RatingSchedule):
        self.RatingSchedule = RatingSchedule
    def get_DimensionalWeight(self):
        return self.DimensionalWeight
    def set_DimensionalWeight(self, DimensionalWeight):
        self.DimensionalWeight = DimensionalWeight
    def get_Service(self):
        return self.Service
    def set_Service(self, Service):
        self.Service = Service
    def get_Documents(self):
        return self.Documents
    def set_Documents(self, Documents):
        self.Documents = Documents
    def get_HoldAtAirportPickupDate(self):
        return self.HoldAtAirportPickupDate
    def set_HoldAtAirportPickupDate(self, HoldAtAirportPickupDate):
        self.HoldAtAirportPickupDate = HoldAtAirportPickupDate
    def get_NextAvailablePickupDate(self):
        return self.NextAvailablePickupDate
    def set_NextAvailablePickupDate(self, NextAvailablePickupDate):
        self.NextAvailablePickupDate = NextAvailablePickupDate
    def get_TimeInTransit(self):
        return self.TimeInTransit
    def set_TimeInTransit(self, TimeInTransit):
        self.TimeInTransit = TimeInTransit
    def hasContent_(self):
        if (
            self.AirFreightPickupRequest is not None or
            self.ShipperNumber is not None or
            self.CreationDate is not None or
            self.CustomerServiceInformation is not None or
            self.OriginServiceCenterCode is not None or
            self.DestinationServiceCenterCode is not None or
            self.LabelServiceCode is not None or
            self.AirFreightModularID is not None or
            self.PickupRequestConfirmationNumber is not None or
            self.DeliveryDate is not None or
            self.ShipmentNumber is not None or
            self.BOLID is not None or
            self.GuaranteedIndicator is not None or
            self.MinimumChargeAppliedIndicator is not None or
            self.Rate or
            self.FreightDensityRate is not None or
            self.TotalShipmentCharge is not None or
            self.MinimumBillableWeightAppliedIndicator is not None or
            self.BillableShipmentWeight is not None or
            self.RatingSchedule is not None or
            self.DimensionalWeight is not None or
            self.Service is not None or
            self.Documents is not None or
            self.HoldAtAirportPickupDate is not None or
            self.NextAvailablePickupDate is not None or
            self.TimeInTransit is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentResultsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentResultsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentResultsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentResultsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentResultsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentResultsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentResultsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AirFreightPickupRequest is not None:
            namespaceprefix_ = self.AirFreightPickupRequest_nsprefix_ + ':' if (UseCapturedNS_ and self.AirFreightPickupRequest_nsprefix_) else ''
            self.AirFreightPickupRequest.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AirFreightPickupRequest', pretty_print=pretty_print)
        if self.ShipperNumber is not None:
            namespaceprefix_ = self.ShipperNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipperNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipperNumber>%s</%sShipperNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShipperNumber), input_name='ShipperNumber')), namespaceprefix_ , eol_))
        if self.CreationDate is not None:
            namespaceprefix_ = self.CreationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.CreationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreationDate>%s</%sCreationDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreationDate), input_name='CreationDate')), namespaceprefix_ , eol_))
        if self.CustomerServiceInformation is not None:
            namespaceprefix_ = self.CustomerServiceInformation_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerServiceInformation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomerServiceInformation>%s</%sCustomerServiceInformation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomerServiceInformation), input_name='CustomerServiceInformation')), namespaceprefix_ , eol_))
        if self.OriginServiceCenterCode is not None:
            namespaceprefix_ = self.OriginServiceCenterCode_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginServiceCenterCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginServiceCenterCode>%s</%sOriginServiceCenterCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OriginServiceCenterCode), input_name='OriginServiceCenterCode')), namespaceprefix_ , eol_))
        if self.DestinationServiceCenterCode is not None:
            namespaceprefix_ = self.DestinationServiceCenterCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationServiceCenterCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDestinationServiceCenterCode>%s</%sDestinationServiceCenterCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DestinationServiceCenterCode), input_name='DestinationServiceCenterCode')), namespaceprefix_ , eol_))
        if self.LabelServiceCode is not None:
            namespaceprefix_ = self.LabelServiceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelServiceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelServiceCode>%s</%sLabelServiceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LabelServiceCode), input_name='LabelServiceCode')), namespaceprefix_ , eol_))
        if self.AirFreightModularID is not None:
            namespaceprefix_ = self.AirFreightModularID_nsprefix_ + ':' if (UseCapturedNS_ and self.AirFreightModularID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAirFreightModularID>%s</%sAirFreightModularID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AirFreightModularID), input_name='AirFreightModularID')), namespaceprefix_ , eol_))
        if self.PickupRequestConfirmationNumber is not None:
            namespaceprefix_ = self.PickupRequestConfirmationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PickupRequestConfirmationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPickupRequestConfirmationNumber>%s</%sPickupRequestConfirmationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PickupRequestConfirmationNumber), input_name='PickupRequestConfirmationNumber')), namespaceprefix_ , eol_))
        if self.DeliveryDate is not None:
            namespaceprefix_ = self.DeliveryDate_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryDate>%s</%sDeliveryDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryDate), input_name='DeliveryDate')), namespaceprefix_ , eol_))
        if self.ShipmentNumber is not None:
            namespaceprefix_ = self.ShipmentNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipmentNumber>%s</%sShipmentNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShipmentNumber), input_name='ShipmentNumber')), namespaceprefix_ , eol_))
        if self.BOLID is not None:
            namespaceprefix_ = self.BOLID_nsprefix_ + ':' if (UseCapturedNS_ and self.BOLID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBOLID>%s</%sBOLID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BOLID), input_name='BOLID')), namespaceprefix_ , eol_))
        if self.GuaranteedIndicator is not None:
            namespaceprefix_ = self.GuaranteedIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.GuaranteedIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGuaranteedIndicator>%s</%sGuaranteedIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GuaranteedIndicator), input_name='GuaranteedIndicator')), namespaceprefix_ , eol_))
        if self.MinimumChargeAppliedIndicator is not None:
            namespaceprefix_ = self.MinimumChargeAppliedIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.MinimumChargeAppliedIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMinimumChargeAppliedIndicator>%s</%sMinimumChargeAppliedIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MinimumChargeAppliedIndicator), input_name='MinimumChargeAppliedIndicator')), namespaceprefix_ , eol_))
        for Rate_ in self.Rate:
            namespaceprefix_ = self.Rate_nsprefix_ + ':' if (UseCapturedNS_ and self.Rate_nsprefix_) else ''
            Rate_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Rate', pretty_print=pretty_print)
        if self.FreightDensityRate is not None:
            namespaceprefix_ = self.FreightDensityRate_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightDensityRate_nsprefix_) else ''
            self.FreightDensityRate.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreightDensityRate', pretty_print=pretty_print)
        if self.TotalShipmentCharge is not None:
            namespaceprefix_ = self.TotalShipmentCharge_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalShipmentCharge_nsprefix_) else ''
            self.TotalShipmentCharge.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalShipmentCharge', pretty_print=pretty_print)
        if self.MinimumBillableWeightAppliedIndicator is not None:
            namespaceprefix_ = self.MinimumBillableWeightAppliedIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.MinimumBillableWeightAppliedIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMinimumBillableWeightAppliedIndicator>%s</%sMinimumBillableWeightAppliedIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MinimumBillableWeightAppliedIndicator), input_name='MinimumBillableWeightAppliedIndicator')), namespaceprefix_ , eol_))
        if self.BillableShipmentWeight is not None:
            namespaceprefix_ = self.BillableShipmentWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.BillableShipmentWeight_nsprefix_) else ''
            self.BillableShipmentWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BillableShipmentWeight', pretty_print=pretty_print)
        if self.RatingSchedule is not None:
            namespaceprefix_ = self.RatingSchedule_nsprefix_ + ':' if (UseCapturedNS_ and self.RatingSchedule_nsprefix_) else ''
            self.RatingSchedule.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RatingSchedule', pretty_print=pretty_print)
        if self.DimensionalWeight is not None:
            namespaceprefix_ = self.DimensionalWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.DimensionalWeight_nsprefix_) else ''
            self.DimensionalWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DimensionalWeight', pretty_print=pretty_print)
        if self.Service is not None:
            namespaceprefix_ = self.Service_nsprefix_ + ':' if (UseCapturedNS_ and self.Service_nsprefix_) else ''
            self.Service.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Service', pretty_print=pretty_print)
        if self.Documents is not None:
            namespaceprefix_ = self.Documents_nsprefix_ + ':' if (UseCapturedNS_ and self.Documents_nsprefix_) else ''
            self.Documents.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Documents', pretty_print=pretty_print)
        if self.HoldAtAirportPickupDate is not None:
            namespaceprefix_ = self.HoldAtAirportPickupDate_nsprefix_ + ':' if (UseCapturedNS_ and self.HoldAtAirportPickupDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHoldAtAirportPickupDate>%s</%sHoldAtAirportPickupDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HoldAtAirportPickupDate), input_name='HoldAtAirportPickupDate')), namespaceprefix_ , eol_))
        if self.NextAvailablePickupDate is not None:
            namespaceprefix_ = self.NextAvailablePickupDate_nsprefix_ + ':' if (UseCapturedNS_ and self.NextAvailablePickupDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNextAvailablePickupDate>%s</%sNextAvailablePickupDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NextAvailablePickupDate), input_name='NextAvailablePickupDate')), namespaceprefix_ , eol_))
        if self.TimeInTransit is not None:
            namespaceprefix_ = self.TimeInTransit_nsprefix_ + ':' if (UseCapturedNS_ and self.TimeInTransit_nsprefix_) else ''
            self.TimeInTransit.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TimeInTransit', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AirFreightPickupRequest':
            obj_ = AirFreightStatusType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AirFreightPickupRequest = obj_
            obj_.original_tagname_ = 'AirFreightPickupRequest'
        elif nodeName_ == 'ShipperNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShipperNumber')
            value_ = self.gds_validate_string(value_, node, 'ShipperNumber')
            self.ShipperNumber = value_
            self.ShipperNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'CreationDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CreationDate')
            value_ = self.gds_validate_string(value_, node, 'CreationDate')
            self.CreationDate = value_
            self.CreationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'CustomerServiceInformation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomerServiceInformation')
            value_ = self.gds_validate_string(value_, node, 'CustomerServiceInformation')
            self.CustomerServiceInformation = value_
            self.CustomerServiceInformation_nsprefix_ = child_.prefix
        elif nodeName_ == 'OriginServiceCenterCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OriginServiceCenterCode')
            value_ = self.gds_validate_string(value_, node, 'OriginServiceCenterCode')
            self.OriginServiceCenterCode = value_
            self.OriginServiceCenterCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'DestinationServiceCenterCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DestinationServiceCenterCode')
            value_ = self.gds_validate_string(value_, node, 'DestinationServiceCenterCode')
            self.DestinationServiceCenterCode = value_
            self.DestinationServiceCenterCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'LabelServiceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelServiceCode')
            value_ = self.gds_validate_string(value_, node, 'LabelServiceCode')
            self.LabelServiceCode = value_
            self.LabelServiceCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'AirFreightModularID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AirFreightModularID')
            value_ = self.gds_validate_string(value_, node, 'AirFreightModularID')
            self.AirFreightModularID = value_
            self.AirFreightModularID_nsprefix_ = child_.prefix
        elif nodeName_ == 'PickupRequestConfirmationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PickupRequestConfirmationNumber')
            value_ = self.gds_validate_string(value_, node, 'PickupRequestConfirmationNumber')
            self.PickupRequestConfirmationNumber = value_
            self.PickupRequestConfirmationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'DeliveryDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DeliveryDate')
            value_ = self.gds_validate_string(value_, node, 'DeliveryDate')
            self.DeliveryDate = value_
            self.DeliveryDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShipmentNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShipmentNumber')
            value_ = self.gds_validate_string(value_, node, 'ShipmentNumber')
            self.ShipmentNumber = value_
            self.ShipmentNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'BOLID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BOLID')
            value_ = self.gds_validate_string(value_, node, 'BOLID')
            self.BOLID = value_
            self.BOLID_nsprefix_ = child_.prefix
        elif nodeName_ == 'GuaranteedIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GuaranteedIndicator')
            value_ = self.gds_validate_string(value_, node, 'GuaranteedIndicator')
            self.GuaranteedIndicator = value_
            self.GuaranteedIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'MinimumChargeAppliedIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MinimumChargeAppliedIndicator')
            value_ = self.gds_validate_string(value_, node, 'MinimumChargeAppliedIndicator')
            self.MinimumChargeAppliedIndicator = value_
            self.MinimumChargeAppliedIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'Rate':
            obj_ = RateType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Rate.append(obj_)
            obj_.original_tagname_ = 'Rate'
        elif nodeName_ == 'FreightDensityRate':
            obj_ = FreightDensityRateType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreightDensityRate = obj_
            obj_.original_tagname_ = 'FreightDensityRate'
        elif nodeName_ == 'TotalShipmentCharge':
            obj_ = TotalShipmentChargeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalShipmentCharge = obj_
            obj_.original_tagname_ = 'TotalShipmentCharge'
        elif nodeName_ == 'MinimumBillableWeightAppliedIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MinimumBillableWeightAppliedIndicator')
            value_ = self.gds_validate_string(value_, node, 'MinimumBillableWeightAppliedIndicator')
            self.MinimumBillableWeightAppliedIndicator = value_
            self.MinimumBillableWeightAppliedIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'BillableShipmentWeight':
            obj_ = WeightType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BillableShipmentWeight = obj_
            obj_.original_tagname_ = 'BillableShipmentWeight'
        elif nodeName_ == 'RatingSchedule':
            obj_ = ShipCodeDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RatingSchedule = obj_
            obj_.original_tagname_ = 'RatingSchedule'
        elif nodeName_ == 'DimensionalWeight':
            obj_ = WeightType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DimensionalWeight = obj_
            obj_.original_tagname_ = 'DimensionalWeight'
        elif nodeName_ == 'Service':
            obj_ = ShipCodeDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Service = obj_
            obj_.original_tagname_ = 'Service'
        elif nodeName_ == 'Documents':
            obj_ = DocumentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Documents = obj_
            obj_.original_tagname_ = 'Documents'
        elif nodeName_ == 'HoldAtAirportPickupDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HoldAtAirportPickupDate')
            value_ = self.gds_validate_string(value_, node, 'HoldAtAirportPickupDate')
            self.HoldAtAirportPickupDate = value_
            self.HoldAtAirportPickupDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'NextAvailablePickupDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NextAvailablePickupDate')
            value_ = self.gds_validate_string(value_, node, 'NextAvailablePickupDate')
            self.NextAvailablePickupDate = value_
            self.NextAvailablePickupDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'TimeInTransit':
            obj_ = TimeInTransitResponseType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TimeInTransit = obj_
            obj_.original_tagname_ = 'TimeInTransit'
# end class ShipmentResultsType


class RateType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Factor=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.Type_nsprefix_ = None
        self.Factor = Factor
        self.Factor_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RateType.subclass:
            return RateType.subclass(*args_, **kwargs_)
        else:
            return RateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Factor(self):
        return self.Factor
    def set_Factor(self, Factor):
        self.Factor = Factor
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Factor is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RateType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RateType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RateType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RateType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            self.Type.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Type', pretty_print=pretty_print)
        if self.Factor is not None:
            namespaceprefix_ = self.Factor_nsprefix_ + ':' if (UseCapturedNS_ and self.Factor_nsprefix_) else ''
            self.Factor.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Factor', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            obj_ = ShipCodeDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Type = obj_
            obj_.original_tagname_ = 'Type'
        elif nodeName_ == 'Factor':
            obj_ = FactorType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Factor = obj_
            obj_.original_tagname_ = 'Factor'
# end class RateType


class AirFreightStatusType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Status=None, PreAuthorizationReason=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Status = Status
        self.Status_nsprefix_ = None
        if PreAuthorizationReason is None:
            self.PreAuthorizationReason = []
        else:
            self.PreAuthorizationReason = PreAuthorizationReason
        self.PreAuthorizationReason_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AirFreightStatusType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AirFreightStatusType.subclass:
            return AirFreightStatusType.subclass(*args_, **kwargs_)
        else:
            return AirFreightStatusType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Status(self):
        return self.Status
    def set_Status(self, Status):
        self.Status = Status
    def get_PreAuthorizationReason(self):
        return self.PreAuthorizationReason
    def set_PreAuthorizationReason(self, PreAuthorizationReason):
        self.PreAuthorizationReason = PreAuthorizationReason
    def add_PreAuthorizationReason(self, value):
        self.PreAuthorizationReason.append(value)
    def insert_PreAuthorizationReason_at(self, index, value):
        self.PreAuthorizationReason.insert(index, value)
    def replace_PreAuthorizationReason_at(self, index, value):
        self.PreAuthorizationReason[index] = value
    def hasContent_(self):
        if (
            self.Status is not None or
            self.PreAuthorizationReason
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AirFreightStatusType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AirFreightStatusType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AirFreightStatusType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AirFreightStatusType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AirFreightStatusType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AirFreightStatusType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AirFreightStatusType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Status is not None:
            namespaceprefix_ = self.Status_nsprefix_ + ':' if (UseCapturedNS_ and self.Status_nsprefix_) else ''
            self.Status.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Status', pretty_print=pretty_print)
        for PreAuthorizationReason_ in self.PreAuthorizationReason:
            namespaceprefix_ = self.PreAuthorizationReason_nsprefix_ + ':' if (UseCapturedNS_ and self.PreAuthorizationReason_nsprefix_) else ''
            PreAuthorizationReason_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PreAuthorizationReason', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Status':
            obj_ = StatusType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Status = obj_
            obj_.original_tagname_ = 'Status'
        elif nodeName_ == 'PreAuthorizationReason':
            obj_ = PreAuthReasonType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PreAuthorizationReason.append(obj_)
            obj_.original_tagname_ = 'PreAuthorizationReason'
# end class AirFreightStatusType


class ValidServiceType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Service=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Service = Service
        self.Service_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ValidServiceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ValidServiceType.subclass:
            return ValidServiceType.subclass(*args_, **kwargs_)
        else:
            return ValidServiceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Service(self):
        return self.Service
    def set_Service(self, Service):
        self.Service = Service
    def hasContent_(self):
        if (
            self.Service is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ValidServiceType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ValidServiceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ValidServiceType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ValidServiceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ValidServiceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ValidServiceType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ValidServiceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Service is not None:
            namespaceprefix_ = self.Service_nsprefix_ + ':' if (UseCapturedNS_ and self.Service_nsprefix_) else ''
            self.Service.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Service', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Service':
            obj_ = ShipCodeDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Service = obj_
            obj_.original_tagname_ = 'Service'
# end class ValidServiceType


class StatusType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StatusType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StatusType.subclass:
            return StatusType.subclass(*args_, **kwargs_)
        else:
            return StatusType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='StatusType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StatusType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'StatusType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='StatusType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='StatusType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='StatusType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='StatusType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class StatusType


class ValidAccessorialType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Accessorial=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Accessorial = Accessorial
        self.Accessorial_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ValidAccessorialType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ValidAccessorialType.subclass:
            return ValidAccessorialType.subclass(*args_, **kwargs_)
        else:
            return ValidAccessorialType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Accessorial(self):
        return self.Accessorial
    def set_Accessorial(self, Accessorial):
        self.Accessorial = Accessorial
    def hasContent_(self):
        if (
            self.Accessorial is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ValidAccessorialType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ValidAccessorialType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ValidAccessorialType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ValidAccessorialType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ValidAccessorialType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ValidAccessorialType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ValidAccessorialType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Accessorial is not None:
            namespaceprefix_ = self.Accessorial_nsprefix_ + ':' if (UseCapturedNS_ and self.Accessorial_nsprefix_) else ''
            self.Accessorial.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Accessorial', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Accessorial':
            obj_ = ShipCodeDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Accessorial = obj_
            obj_.original_tagname_ = 'Accessorial'
# end class ValidAccessorialType


class PreAuthReasonType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PreAuthReasonType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PreAuthReasonType.subclass:
            return PreAuthReasonType.subclass(*args_, **kwargs_)
        else:
            return PreAuthReasonType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PreAuthReasonType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PreAuthReasonType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PreAuthReasonType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PreAuthReasonType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PreAuthReasonType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PreAuthReasonType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PreAuthReasonType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class PreAuthReasonType


class ConfirmationNumberType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.Type_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ConfirmationNumberType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ConfirmationNumberType.subclass:
            return ConfirmationNumberType.subclass(*args_, **kwargs_)
        else:
            return ConfirmationNumberType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConfirmationNumberType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ConfirmationNumberType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ConfirmationNumberType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ConfirmationNumberType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ConfirmationNumberType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ConfirmationNumberType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConfirmationNumberType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            self.Type.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Type', pretty_print=pretty_print)
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            obj_ = ShipCodeDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Type = obj_
            obj_.original_tagname_ = 'Type'
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
# end class ConfirmationNumberType


class FactorType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Value=None, UnitOfMeasurement=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.UnitOfMeasurement_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FactorType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FactorType.subclass:
            return FactorType.subclass(*args_, **kwargs_)
        else:
            return FactorType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def get_UnitOfMeasurement(self):
        return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement):
        self.UnitOfMeasurement = UnitOfMeasurement
    def hasContent_(self):
        if (
            self.Value is not None or
            self.UnitOfMeasurement is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FactorType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FactorType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FactorType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FactorType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FactorType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FactorType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FactorType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
        if self.UnitOfMeasurement is not None:
            namespaceprefix_ = self.UnitOfMeasurement_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitOfMeasurement_nsprefix_) else ''
            self.UnitOfMeasurement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UnitOfMeasurement', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = FreightShipUnitOfMeasurementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
# end class FactorType


class AmountType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CurrencyCode = CurrencyCode
        self.CurrencyCode_nsprefix_ = None
        self.MonetaryValue = MonetaryValue
        self.MonetaryValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AmountType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AmountType.subclass:
            return AmountType.subclass(*args_, **kwargs_)
        else:
            return AmountType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CurrencyCode(self):
        return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode):
        self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self):
        return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue):
        self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AmountType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AmountType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AmountType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AmountType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AmountType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AmountType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AmountType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            namespaceprefix_ = self.CurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyCode>%s</%sCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), namespaceprefix_ , eol_))
        if self.MonetaryValue is not None:
            namespaceprefix_ = self.MonetaryValue_nsprefix_ + ':' if (UseCapturedNS_ and self.MonetaryValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMonetaryValue>%s</%sMonetaryValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CurrencyCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'CurrencyCode')
            self.CurrencyCode = value_
            self.CurrencyCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'MonetaryValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MonetaryValue')
            value_ = self.gds_validate_string(value_, node, 'MonetaryValue')
            self.MonetaryValue = value_
            self.MonetaryValue_nsprefix_ = child_.prefix
# end class AmountType


class TotalShipmentChargeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CurrencyCode = CurrencyCode
        self.CurrencyCode_nsprefix_ = None
        self.MonetaryValue = MonetaryValue
        self.MonetaryValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TotalShipmentChargeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TotalShipmentChargeType.subclass:
            return TotalShipmentChargeType.subclass(*args_, **kwargs_)
        else:
            return TotalShipmentChargeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CurrencyCode(self):
        return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode):
        self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self):
        return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue):
        self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TotalShipmentChargeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TotalShipmentChargeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TotalShipmentChargeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TotalShipmentChargeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TotalShipmentChargeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TotalShipmentChargeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TotalShipmentChargeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyCode is not None:
            namespaceprefix_ = self.CurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyCode>%s</%sCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), namespaceprefix_ , eol_))
        if self.MonetaryValue is not None:
            namespaceprefix_ = self.MonetaryValue_nsprefix_ + ':' if (UseCapturedNS_ and self.MonetaryValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMonetaryValue>%s</%sMonetaryValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CurrencyCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'CurrencyCode')
            self.CurrencyCode = value_
            self.CurrencyCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'MonetaryValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MonetaryValue')
            value_ = self.gds_validate_string(value_, node, 'MonetaryValue')
            self.MonetaryValue = value_
            self.MonetaryValue_nsprefix_ = child_.prefix
# end class TotalShipmentChargeType


class DocumentType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Image=None, Forms=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Image is None:
            self.Image = []
        else:
            self.Image = Image
        self.Image_nsprefix_ = None
        if Forms is None:
            self.Forms = []
        else:
            self.Forms = Forms
        self.Forms_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocumentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocumentType.subclass:
            return DocumentType.subclass(*args_, **kwargs_)
        else:
            return DocumentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Image(self):
        return self.Image
    def set_Image(self, Image):
        self.Image = Image
    def add_Image(self, value):
        self.Image.append(value)
    def insert_Image_at(self, index, value):
        self.Image.insert(index, value)
    def replace_Image_at(self, index, value):
        self.Image[index] = value
    def get_Forms(self):
        return self.Forms
    def set_Forms(self, Forms):
        self.Forms = Forms
    def add_Forms(self, value):
        self.Forms.append(value)
    def insert_Forms_at(self, index, value):
        self.Forms.insert(index, value)
    def replace_Forms_at(self, index, value):
        self.Forms[index] = value
    def hasContent_(self):
        if (
            self.Image or
            self.Forms
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocumentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocumentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DocumentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocumentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DocumentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DocumentType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocumentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Image_ in self.Image:
            namespaceprefix_ = self.Image_nsprefix_ + ':' if (UseCapturedNS_ and self.Image_nsprefix_) else ''
            Image_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Image', pretty_print=pretty_print)
        for Forms_ in self.Forms:
            namespaceprefix_ = self.Forms_nsprefix_ + ':' if (UseCapturedNS_ and self.Forms_nsprefix_) else ''
            Forms_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Forms', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Image':
            obj_ = ImageFormsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Image.append(obj_)
            obj_.original_tagname_ = 'Image'
        elif nodeName_ == 'Forms':
            obj_ = ImageFormsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Forms.append(obj_)
            obj_.original_tagname_ = 'Forms'
# end class DocumentType


class ImageFormsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, GraphicImage=None, Format=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.Type_nsprefix_ = None
        self.GraphicImage = GraphicImage
        self.GraphicImage_nsprefix_ = None
        self.Format = Format
        self.Format_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ImageFormsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ImageFormsType.subclass:
            return ImageFormsType.subclass(*args_, **kwargs_)
        else:
            return ImageFormsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_GraphicImage(self):
        return self.GraphicImage
    def set_GraphicImage(self, GraphicImage):
        self.GraphicImage = GraphicImage
    def get_Format(self):
        return self.Format
    def set_Format(self, Format):
        self.Format = Format
    def hasContent_(self):
        if (
            self.Type is not None or
            self.GraphicImage is not None or
            self.Format is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ImageFormsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ImageFormsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ImageFormsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ImageFormsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ImageFormsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ImageFormsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ImageFormsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            self.Type.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Type', pretty_print=pretty_print)
        if self.GraphicImage is not None:
            namespaceprefix_ = self.GraphicImage_nsprefix_ + ':' if (UseCapturedNS_ and self.GraphicImage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGraphicImage>%s</%sGraphicImage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GraphicImage), input_name='GraphicImage')), namespaceprefix_ , eol_))
        if self.Format is not None:
            namespaceprefix_ = self.Format_nsprefix_ + ':' if (UseCapturedNS_ and self.Format_nsprefix_) else ''
            self.Format.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Format', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            obj_ = ImageCodeDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Type = obj_
            obj_.original_tagname_ = 'Type'
        elif nodeName_ == 'GraphicImage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GraphicImage')
            value_ = self.gds_validate_string(value_, node, 'GraphicImage')
            self.GraphicImage = value_
            self.GraphicImage_nsprefix_ = child_.prefix
        elif nodeName_ == 'Format':
            obj_ = ImageCodeDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Format = obj_
            obj_.original_tagname_ = 'Format'
# end class ImageFormsType


class ImageCodeDescriptionType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ImageCodeDescriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ImageCodeDescriptionType.subclass:
            return ImageCodeDescriptionType.subclass(*args_, **kwargs_)
        else:
            return ImageCodeDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ImageCodeDescriptionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ImageCodeDescriptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ImageCodeDescriptionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ImageCodeDescriptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ImageCodeDescriptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ImageCodeDescriptionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ImageCodeDescriptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class ImageCodeDescriptionType


class CountryOfManufactureType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CountryCode = CountryCode
        self.CountryCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CountryOfManufactureType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CountryOfManufactureType.subclass:
            return CountryOfManufactureType.subclass(*args_, **kwargs_)
        else:
            return CountryOfManufactureType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def hasContent_(self):
        if (
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CountryOfManufactureType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CountryOfManufactureType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CountryOfManufactureType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CountryOfManufactureType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CountryOfManufactureType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CountryOfManufactureType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CountryOfManufactureType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
# end class CountryOfManufactureType


class ShipmentTotalWeightType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Value=None, UnitOfMeasurement=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.UnitOfMeasurement_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentTotalWeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentTotalWeightType.subclass:
            return ShipmentTotalWeightType.subclass(*args_, **kwargs_)
        else:
            return ShipmentTotalWeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def get_UnitOfMeasurement(self):
        return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement):
        self.UnitOfMeasurement = UnitOfMeasurement
    def hasContent_(self):
        if (
            self.Value is not None or
            self.UnitOfMeasurement is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentTotalWeightType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentTotalWeightType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentTotalWeightType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentTotalWeightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentTotalWeightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentTotalWeightType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentTotalWeightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
        if self.UnitOfMeasurement is not None:
            namespaceprefix_ = self.UnitOfMeasurement_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitOfMeasurement_nsprefix_) else ''
            self.UnitOfMeasurement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UnitOfMeasurement', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = FreightShipUnitOfMeasurementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
# end class ShipmentTotalWeightType


class TaxIDCodeDescType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxIDCodeDescType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxIDCodeDescType.subclass:
            return TaxIDCodeDescType.subclass(*args_, **kwargs_)
        else:
            return TaxIDCodeDescType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TaxIDCodeDescType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TaxIDCodeDescType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TaxIDCodeDescType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TaxIDCodeDescType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TaxIDCodeDescType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TaxIDCodeDescType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TaxIDCodeDescType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class TaxIDCodeDescType


class TaxIDType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Number=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.Type_nsprefix_ = None
        self.Number = Number
        self.Number_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxIDType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxIDType.subclass:
            return TaxIDType.subclass(*args_, **kwargs_)
        else:
            return TaxIDType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Number is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TaxIDType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TaxIDType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TaxIDType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TaxIDType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TaxIDType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TaxIDType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TaxIDType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            self.Type.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Type', pretty_print=pretty_print)
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            obj_ = TaxIDCodeDescType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Type = obj_
            obj_.original_tagname_ = 'Type'
        elif nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
# end class TaxIDType


class TimeInTransitResponseType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DaysInTransit=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DaysInTransit = DaysInTransit
        self.DaysInTransit_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TimeInTransitResponseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TimeInTransitResponseType.subclass:
            return TimeInTransitResponseType.subclass(*args_, **kwargs_)
        else:
            return TimeInTransitResponseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DaysInTransit(self):
        return self.DaysInTransit
    def set_DaysInTransit(self, DaysInTransit):
        self.DaysInTransit = DaysInTransit
    def hasContent_(self):
        if (
            self.DaysInTransit is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TimeInTransitResponseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TimeInTransitResponseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TimeInTransitResponseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TimeInTransitResponseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TimeInTransitResponseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TimeInTransitResponseType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TimeInTransitResponseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DaysInTransit is not None:
            namespaceprefix_ = self.DaysInTransit_nsprefix_ + ':' if (UseCapturedNS_ and self.DaysInTransit_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDaysInTransit>%s</%sDaysInTransit>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DaysInTransit), input_name='DaysInTransit')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DaysInTransit':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DaysInTransit')
            value_ = self.gds_validate_string(value_, node, 'DaysInTransit')
            self.DaysInTransit = value_
            self.DaysInTransit_nsprefix_ = child_.prefix
# end class TimeInTransitResponseType


class HandlingUnitsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Quantity=None, Type=None, Dimensions=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Quantity = Quantity
        self.Quantity_nsprefix_ = None
        self.Type = Type
        self.Type_nsprefix_ = None
        self.Dimensions = Dimensions
        self.Dimensions_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HandlingUnitsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HandlingUnitsType.subclass:
            return HandlingUnitsType.subclass(*args_, **kwargs_)
        else:
            return HandlingUnitsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Dimensions(self):
        return self.Dimensions
    def set_Dimensions(self, Dimensions):
        self.Dimensions = Dimensions
    def hasContent_(self):
        if (
            self.Quantity is not None or
            self.Type is not None or
            self.Dimensions is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HandlingUnitsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HandlingUnitsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HandlingUnitsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HandlingUnitsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HandlingUnitsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HandlingUnitsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HandlingUnitsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Quantity), input_name='Quantity')), namespaceprefix_ , eol_))
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            self.Type.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Type', pretty_print=pretty_print)
        if self.Dimensions is not None:
            namespaceprefix_ = self.Dimensions_nsprefix_ + ':' if (UseCapturedNS_ and self.Dimensions_nsprefix_) else ''
            self.Dimensions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Dimensions', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Quantity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Quantity')
            value_ = self.gds_validate_string(value_, node, 'Quantity')
            self.Quantity = value_
            self.Quantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'Type':
            obj_ = ShipCodeDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Type = obj_
            obj_.original_tagname_ = 'Type'
        elif nodeName_ == 'Dimensions':
            obj_ = HandlingUnitsDimensionsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
# end class HandlingUnitsType


class FreightDensityRateType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Density=None, TotalCubicFeet=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Density = Density
        self.Density_nsprefix_ = None
        self.TotalCubicFeet = TotalCubicFeet
        self.TotalCubicFeet_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightDensityRateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightDensityRateType.subclass:
            return FreightDensityRateType.subclass(*args_, **kwargs_)
        else:
            return FreightDensityRateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Density(self):
        return self.Density
    def set_Density(self, Density):
        self.Density = Density
    def get_TotalCubicFeet(self):
        return self.TotalCubicFeet
    def set_TotalCubicFeet(self, TotalCubicFeet):
        self.TotalCubicFeet = TotalCubicFeet
    def hasContent_(self):
        if (
            self.Density is not None or
            self.TotalCubicFeet is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightDensityRateType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightDensityRateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightDensityRateType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightDensityRateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightDensityRateType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightDensityRateType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightDensityRateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Density is not None:
            namespaceprefix_ = self.Density_nsprefix_ + ':' if (UseCapturedNS_ and self.Density_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDensity>%s</%sDensity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Density), input_name='Density')), namespaceprefix_ , eol_))
        if self.TotalCubicFeet is not None:
            namespaceprefix_ = self.TotalCubicFeet_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalCubicFeet_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalCubicFeet>%s</%sTotalCubicFeet>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TotalCubicFeet), input_name='TotalCubicFeet')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Density':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Density')
            value_ = self.gds_validate_string(value_, node, 'Density')
            self.Density = value_
            self.Density_nsprefix_ = child_.prefix
        elif nodeName_ == 'TotalCubicFeet':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TotalCubicFeet')
            value_ = self.gds_validate_string(value_, node, 'TotalCubicFeet')
            self.TotalCubicFeet = value_
            self.TotalCubicFeet_nsprefix_ = child_.prefix
# end class FreightDensityRateType


class HandlingUnitsDimensionsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Length=None, Width=None, Height=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.UnitOfMeasurement_nsprefix_ = None
        self.Length = Length
        self.Length_nsprefix_ = None
        self.Width = Width
        self.Width_nsprefix_ = None
        self.Height = Height
        self.Height_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HandlingUnitsDimensionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HandlingUnitsDimensionsType.subclass:
            return HandlingUnitsDimensionsType.subclass(*args_, **kwargs_)
        else:
            return HandlingUnitsDimensionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UnitOfMeasurement(self):
        return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement):
        self.UnitOfMeasurement = UnitOfMeasurement
    def get_Length(self):
        return self.Length
    def set_Length(self, Length):
        self.Length = Length
    def get_Width(self):
        return self.Width
    def set_Width(self, Width):
        self.Width = Width
    def get_Height(self):
        return self.Height
    def set_Height(self, Height):
        self.Height = Height
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Length is not None or
            self.Width is not None or
            self.Height is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HandlingUnitsDimensionsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HandlingUnitsDimensionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HandlingUnitsDimensionsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HandlingUnitsDimensionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HandlingUnitsDimensionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HandlingUnitsDimensionsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HandlingUnitsDimensionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitOfMeasurement is not None:
            namespaceprefix_ = self.UnitOfMeasurement_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitOfMeasurement_nsprefix_) else ''
            self.UnitOfMeasurement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Length is not None:
            namespaceprefix_ = self.Length_nsprefix_ + ':' if (UseCapturedNS_ and self.Length_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLength>%s</%sLength>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Length), input_name='Length')), namespaceprefix_ , eol_))
        if self.Width is not None:
            namespaceprefix_ = self.Width_nsprefix_ + ':' if (UseCapturedNS_ and self.Width_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWidth>%s</%sWidth>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Width), input_name='Width')), namespaceprefix_ , eol_))
        if self.Height is not None:
            namespaceprefix_ = self.Height_nsprefix_ + ':' if (UseCapturedNS_ and self.Height_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHeight>%s</%sHeight>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Height), input_name='Height')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = FreightShipUnitOfMeasurementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Length':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Length')
            value_ = self.gds_validate_string(value_, node, 'Length')
            self.Length = value_
            self.Length_nsprefix_ = child_.prefix
        elif nodeName_ == 'Width':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Width')
            value_ = self.gds_validate_string(value_, node, 'Width')
            self.Width = value_
            self.Width_nsprefix_ = child_.prefix
        elif nodeName_ == 'Height':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Height')
            value_ = self.gds_validate_string(value_, node, 'Height')
            self.Height = value_
            self.Height_nsprefix_ = child_.prefix
# end class HandlingUnitsDimensionsType


class ClientInformationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Property=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Property is None:
            self.Property = []
        else:
            self.Property = Property
        self.Property_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClientInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClientInformationType.subclass:
            return ClientInformationType.subclass(*args_, **kwargs_)
        else:
            return ClientInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Property(self):
        return self.Property
    def set_Property(self, Property):
        self.Property = Property
    def add_Property(self, value):
        self.Property.append(value)
    def insert_Property_at(self, index, value):
        self.Property.insert(index, value)
    def replace_Property_at(self, index, value):
        self.Property[index] = value
    def hasContent_(self):
        if (
            self.Property
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='ClientInformationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClientInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ClientInformationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ClientInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ClientInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='common:', name_='ClientInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='ClientInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Property_ in self.Property:
            namespaceprefix_ = self.Property_nsprefix_ + ':' if (UseCapturedNS_ and self.Property_nsprefix_) else ''
            Property_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Property', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Property':
            obj_ = PropertyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Property.append(obj_)
            obj_.original_tagname_ = 'Property'
# end class ClientInformationType


class RequestType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RequestOption=None, SubVersion=None, TransactionReference=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RequestOption is None:
            self.RequestOption = []
        else:
            self.RequestOption = RequestOption
        self.RequestOption_nsprefix_ = None
        self.SubVersion = SubVersion
        self.SubVersion_nsprefix_ = None
        self.TransactionReference = TransactionReference
        self.TransactionReference_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestType.subclass:
            return RequestType.subclass(*args_, **kwargs_)
        else:
            return RequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RequestOption(self):
        return self.RequestOption
    def set_RequestOption(self, RequestOption):
        self.RequestOption = RequestOption
    def add_RequestOption(self, value):
        self.RequestOption.append(value)
    def insert_RequestOption_at(self, index, value):
        self.RequestOption.insert(index, value)
    def replace_RequestOption_at(self, index, value):
        self.RequestOption[index] = value
    def get_SubVersion(self):
        return self.SubVersion
    def set_SubVersion(self, SubVersion):
        self.SubVersion = SubVersion
    def get_TransactionReference(self):
        return self.TransactionReference
    def set_TransactionReference(self, TransactionReference):
        self.TransactionReference = TransactionReference
    def hasContent_(self):
        if (
            self.RequestOption or
            self.SubVersion is not None or
            self.TransactionReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='RequestType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RequestType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RequestType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RequestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='common:', name_='RequestType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='RequestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RequestOption_ in self.RequestOption:
            namespaceprefix_ = self.RequestOption_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestOption_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestOption>%s</%sRequestOption>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(RequestOption_), input_name='RequestOption')), namespaceprefix_ , eol_))
        if self.SubVersion is not None:
            namespaceprefix_ = self.SubVersion_nsprefix_ + ':' if (UseCapturedNS_ and self.SubVersion_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSubVersion>%s</%sSubVersion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SubVersion), input_name='SubVersion')), namespaceprefix_ , eol_))
        if self.TransactionReference is not None:
            namespaceprefix_ = self.TransactionReference_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionReference_nsprefix_) else ''
            self.TransactionReference.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionReference', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RequestOption':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequestOption')
            value_ = self.gds_validate_string(value_, node, 'RequestOption')
            self.RequestOption.append(value_)
            self.RequestOption_nsprefix_ = child_.prefix
        elif nodeName_ == 'SubVersion':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SubVersion')
            value_ = self.gds_validate_string(value_, node, 'SubVersion')
            self.SubVersion = value_
            self.SubVersion_nsprefix_ = child_.prefix
        elif nodeName_ == 'TransactionReference':
            obj_ = TransactionReferenceType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionReference = obj_
            obj_.original_tagname_ = 'TransactionReference'
# end class RequestType


class TransactionReferenceType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CustomerContext=None, TransactionIdentifier=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CustomerContext = CustomerContext
        self.CustomerContext_nsprefix_ = None
        self.TransactionIdentifier = TransactionIdentifier
        self.TransactionIdentifier_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransactionReferenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransactionReferenceType.subclass:
            return TransactionReferenceType.subclass(*args_, **kwargs_)
        else:
            return TransactionReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CustomerContext(self):
        return self.CustomerContext
    def set_CustomerContext(self, CustomerContext):
        self.CustomerContext = CustomerContext
    def get_TransactionIdentifier(self):
        return self.TransactionIdentifier
    def set_TransactionIdentifier(self, TransactionIdentifier):
        self.TransactionIdentifier = TransactionIdentifier
    def hasContent_(self):
        if (
            self.CustomerContext is not None or
            self.TransactionIdentifier is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='TransactionReferenceType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransactionReferenceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransactionReferenceType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransactionReferenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransactionReferenceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='common:', name_='TransactionReferenceType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='TransactionReferenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomerContext is not None:
            namespaceprefix_ = self.CustomerContext_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerContext_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomerContext>%s</%sCustomerContext>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomerContext), input_name='CustomerContext')), namespaceprefix_ , eol_))
        if self.TransactionIdentifier is not None:
            namespaceprefix_ = self.TransactionIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransactionIdentifier>%s</%sTransactionIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransactionIdentifier), input_name='TransactionIdentifier')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CustomerContext':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomerContext')
            value_ = self.gds_validate_string(value_, node, 'CustomerContext')
            self.CustomerContext = value_
            self.CustomerContext_nsprefix_ = child_.prefix
        elif nodeName_ == 'TransactionIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TransactionIdentifier')
            value_ = self.gds_validate_string(value_, node, 'TransactionIdentifier')
            self.TransactionIdentifier = value_
            self.TransactionIdentifier_nsprefix_ = child_.prefix
# end class TransactionReferenceType


class ResponseType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ResponseStatus=None, Alert=None, AlertDetail=None, TransactionReference=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ResponseStatus = ResponseStatus
        self.ResponseStatus_nsprefix_ = None
        if Alert is None:
            self.Alert = []
        else:
            self.Alert = Alert
        self.Alert_nsprefix_ = None
        if AlertDetail is None:
            self.AlertDetail = []
        else:
            self.AlertDetail = AlertDetail
        self.AlertDetail_nsprefix_ = None
        self.TransactionReference = TransactionReference
        self.TransactionReference_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ResponseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ResponseType.subclass:
            return ResponseType.subclass(*args_, **kwargs_)
        else:
            return ResponseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ResponseStatus(self):
        return self.ResponseStatus
    def set_ResponseStatus(self, ResponseStatus):
        self.ResponseStatus = ResponseStatus
    def get_Alert(self):
        return self.Alert
    def set_Alert(self, Alert):
        self.Alert = Alert
    def add_Alert(self, value):
        self.Alert.append(value)
    def insert_Alert_at(self, index, value):
        self.Alert.insert(index, value)
    def replace_Alert_at(self, index, value):
        self.Alert[index] = value
    def get_AlertDetail(self):
        return self.AlertDetail
    def set_AlertDetail(self, AlertDetail):
        self.AlertDetail = AlertDetail
    def add_AlertDetail(self, value):
        self.AlertDetail.append(value)
    def insert_AlertDetail_at(self, index, value):
        self.AlertDetail.insert(index, value)
    def replace_AlertDetail_at(self, index, value):
        self.AlertDetail[index] = value
    def get_TransactionReference(self):
        return self.TransactionReference
    def set_TransactionReference(self, TransactionReference):
        self.TransactionReference = TransactionReference
    def hasContent_(self):
        if (
            self.ResponseStatus is not None or
            self.Alert or
            self.AlertDetail or
            self.TransactionReference is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='ResponseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ResponseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ResponseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ResponseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ResponseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='common:', name_='ResponseType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='ResponseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ResponseStatus is not None:
            namespaceprefix_ = self.ResponseStatus_nsprefix_ + ':' if (UseCapturedNS_ and self.ResponseStatus_nsprefix_) else ''
            self.ResponseStatus.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ResponseStatus', pretty_print=pretty_print)
        for Alert_ in self.Alert:
            namespaceprefix_ = self.Alert_nsprefix_ + ':' if (UseCapturedNS_ and self.Alert_nsprefix_) else ''
            Alert_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Alert', pretty_print=pretty_print)
        for AlertDetail_ in self.AlertDetail:
            namespaceprefix_ = self.AlertDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.AlertDetail_nsprefix_) else ''
            AlertDetail_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AlertDetail', pretty_print=pretty_print)
        if self.TransactionReference is not None:
            namespaceprefix_ = self.TransactionReference_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionReference_nsprefix_) else ''
            self.TransactionReference.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionReference', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ResponseStatus':
            obj_ = CodeDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ResponseStatus = obj_
            obj_.original_tagname_ = 'ResponseStatus'
        elif nodeName_ == 'Alert':
            obj_ = CodeDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Alert.append(obj_)
            obj_.original_tagname_ = 'Alert'
        elif nodeName_ == 'AlertDetail':
            obj_ = DetailType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AlertDetail.append(obj_)
            obj_.original_tagname_ = 'AlertDetail'
        elif nodeName_ == 'TransactionReference':
            obj_ = TransactionReferenceType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionReference = obj_
            obj_.original_tagname_ = 'TransactionReference'
# end class ResponseType


class CodeDescriptionType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CodeDescriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CodeDescriptionType.subclass:
            return CodeDescriptionType.subclass(*args_, **kwargs_)
        else:
            return CodeDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='CodeDescriptionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CodeDescriptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CodeDescriptionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CodeDescriptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CodeDescriptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='common:', name_='CodeDescriptionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='CodeDescriptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class CodeDescriptionType


class DetailType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, ElementLevelInformation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.ElementLevelInformation = ElementLevelInformation
        self.ElementLevelInformation_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DetailType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DetailType.subclass:
            return DetailType.subclass(*args_, **kwargs_)
        else:
            return DetailType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_ElementLevelInformation(self):
        return self.ElementLevelInformation
    def set_ElementLevelInformation(self, ElementLevelInformation):
        self.ElementLevelInformation = ElementLevelInformation
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None or
            self.ElementLevelInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='DetailType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DetailType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DetailType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DetailType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DetailType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='common:', name_='DetailType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='DetailType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.ElementLevelInformation is not None:
            namespaceprefix_ = self.ElementLevelInformation_nsprefix_ + ':' if (UseCapturedNS_ and self.ElementLevelInformation_nsprefix_) else ''
            self.ElementLevelInformation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ElementLevelInformation', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'ElementLevelInformation':
            obj_ = ElementLevelInformationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ElementLevelInformation = obj_
            obj_.original_tagname_ = 'ElementLevelInformation'
# end class DetailType


class ElementLevelInformationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Level=None, ElementIdentifier=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Level = Level
        self.Level_nsprefix_ = None
        if ElementIdentifier is None:
            self.ElementIdentifier = []
        else:
            self.ElementIdentifier = ElementIdentifier
        self.ElementIdentifier_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ElementLevelInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ElementLevelInformationType.subclass:
            return ElementLevelInformationType.subclass(*args_, **kwargs_)
        else:
            return ElementLevelInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Level(self):
        return self.Level
    def set_Level(self, Level):
        self.Level = Level
    def get_ElementIdentifier(self):
        return self.ElementIdentifier
    def set_ElementIdentifier(self, ElementIdentifier):
        self.ElementIdentifier = ElementIdentifier
    def add_ElementIdentifier(self, value):
        self.ElementIdentifier.append(value)
    def insert_ElementIdentifier_at(self, index, value):
        self.ElementIdentifier.insert(index, value)
    def replace_ElementIdentifier_at(self, index, value):
        self.ElementIdentifier[index] = value
    def hasContent_(self):
        if (
            self.Level is not None or
            self.ElementIdentifier
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='ElementLevelInformationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ElementLevelInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ElementLevelInformationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ElementLevelInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ElementLevelInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='common:', name_='ElementLevelInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='ElementLevelInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Level is not None:
            namespaceprefix_ = self.Level_nsprefix_ + ':' if (UseCapturedNS_ and self.Level_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLevel>%s</%sLevel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Level), input_name='Level')), namespaceprefix_ , eol_))
        for ElementIdentifier_ in self.ElementIdentifier:
            namespaceprefix_ = self.ElementIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.ElementIdentifier_nsprefix_) else ''
            ElementIdentifier_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ElementIdentifier', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Level':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Level')
            value_ = self.gds_validate_string(value_, node, 'Level')
            self.Level = value_
            self.Level_nsprefix_ = child_.prefix
        elif nodeName_ == 'ElementIdentifier':
            obj_ = ElementIdentifierType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ElementIdentifier.append(obj_)
            obj_.original_tagname_ = 'ElementIdentifier'
# end class ElementLevelInformationType


class ElementIdentifierType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ElementIdentifierType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ElementIdentifierType.subclass:
            return ElementIdentifierType.subclass(*args_, **kwargs_)
        else:
            return ElementIdentifierType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='ElementIdentifierType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ElementIdentifierType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ElementIdentifierType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ElementIdentifierType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ElementIdentifierType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='common:', name_='ElementIdentifierType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='common:', namespacedef_='', name_='ElementIdentifierType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
# end class ElementIdentifierType


class InternationalFormType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FormType=None, UserCreatedForm=None, CN22Form=None, UPSPremiumCareForm=None, AdditionalDocumentIndicator=None, FormGroupIdName=None, SEDFilingOption=None, EEIFilingOption=None, Contacts=None, Product=None, InvoiceNumber=None, InvoiceDate=None, PurchaseOrderNumber=None, TermsOfShipment=None, ReasonForExport=None, Comments=None, DeclarationStatement=None, Discount=None, FreightCharges=None, InsuranceCharges=None, OtherCharges=None, CurrencyCode=None, BlanketPeriod=None, ExportDate=None, ExportingCarrier=None, CarrierID=None, InBondCode=None, EntryNumber=None, PointOfOrigin=None, PointOfOriginType=None, ModeOfTransport=None, PortOfExport=None, PortOfUnloading=None, LoadingPier=None, PartiesToTransaction=None, RoutedExportTransactionIndicator=None, ContainerizedIndicator=None, License=None, ECCNNumber=None, OverridePaperlessIndicator=None, ShipperMemo=None, MultiCurrencyInvoiceLineTotal=None, HazardousMaterialsIndicator=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if FormType is None:
            self.FormType = []
        else:
            self.FormType = FormType
        self.FormType_nsprefix_ = None
        self.UserCreatedForm = UserCreatedForm
        self.UserCreatedForm_nsprefix_ = None
        self.CN22Form = CN22Form
        self.CN22Form_nsprefix_ = None
        self.UPSPremiumCareForm = UPSPremiumCareForm
        self.UPSPremiumCareForm_nsprefix_ = None
        self.AdditionalDocumentIndicator = AdditionalDocumentIndicator
        self.AdditionalDocumentIndicator_nsprefix_ = None
        self.FormGroupIdName = FormGroupIdName
        self.FormGroupIdName_nsprefix_ = None
        self.SEDFilingOption = SEDFilingOption
        self.SEDFilingOption_nsprefix_ = None
        self.EEIFilingOption = EEIFilingOption
        self.EEIFilingOption_nsprefix_ = None
        self.Contacts = Contacts
        self.Contacts_nsprefix_ = None
        if Product is None:
            self.Product = []
        else:
            self.Product = Product
        self.Product_nsprefix_ = None
        self.InvoiceNumber = InvoiceNumber
        self.InvoiceNumber_nsprefix_ = None
        self.InvoiceDate = InvoiceDate
        self.InvoiceDate_nsprefix_ = None
        self.PurchaseOrderNumber = PurchaseOrderNumber
        self.PurchaseOrderNumber_nsprefix_ = None
        self.TermsOfShipment = TermsOfShipment
        self.TermsOfShipment_nsprefix_ = None
        self.ReasonForExport = ReasonForExport
        self.ReasonForExport_nsprefix_ = None
        self.Comments = Comments
        self.Comments_nsprefix_ = None
        self.DeclarationStatement = DeclarationStatement
        self.DeclarationStatement_nsprefix_ = None
        self.Discount = Discount
        self.Discount_nsprefix_ = None
        self.FreightCharges = FreightCharges
        self.FreightCharges_nsprefix_ = None
        self.InsuranceCharges = InsuranceCharges
        self.InsuranceCharges_nsprefix_ = None
        self.OtherCharges = OtherCharges
        self.OtherCharges_nsprefix_ = None
        self.CurrencyCode = CurrencyCode
        self.CurrencyCode_nsprefix_ = None
        self.BlanketPeriod = BlanketPeriod
        self.BlanketPeriod_nsprefix_ = None
        self.ExportDate = ExportDate
        self.ExportDate_nsprefix_ = None
        self.ExportingCarrier = ExportingCarrier
        self.ExportingCarrier_nsprefix_ = None
        self.CarrierID = CarrierID
        self.CarrierID_nsprefix_ = None
        self.InBondCode = InBondCode
        self.InBondCode_nsprefix_ = None
        self.EntryNumber = EntryNumber
        self.EntryNumber_nsprefix_ = None
        self.PointOfOrigin = PointOfOrigin
        self.PointOfOrigin_nsprefix_ = None
        self.PointOfOriginType = PointOfOriginType
        self.PointOfOriginType_nsprefix_ = None
        self.ModeOfTransport = ModeOfTransport
        self.ModeOfTransport_nsprefix_ = None
        self.PortOfExport = PortOfExport
        self.PortOfExport_nsprefix_ = None
        self.PortOfUnloading = PortOfUnloading
        self.PortOfUnloading_nsprefix_ = None
        self.LoadingPier = LoadingPier
        self.LoadingPier_nsprefix_ = None
        self.PartiesToTransaction = PartiesToTransaction
        self.PartiesToTransaction_nsprefix_ = None
        self.RoutedExportTransactionIndicator = RoutedExportTransactionIndicator
        self.RoutedExportTransactionIndicator_nsprefix_ = None
        self.ContainerizedIndicator = ContainerizedIndicator
        self.ContainerizedIndicator_nsprefix_ = None
        self.License = License
        self.License_nsprefix_ = None
        self.ECCNNumber = ECCNNumber
        self.ECCNNumber_nsprefix_ = None
        self.OverridePaperlessIndicator = OverridePaperlessIndicator
        self.OverridePaperlessIndicator_nsprefix_ = None
        self.ShipperMemo = ShipperMemo
        self.ShipperMemo_nsprefix_ = None
        self.MultiCurrencyInvoiceLineTotal = MultiCurrencyInvoiceLineTotal
        self.MultiCurrencyInvoiceLineTotal_nsprefix_ = None
        self.HazardousMaterialsIndicator = HazardousMaterialsIndicator
        self.HazardousMaterialsIndicator_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InternationalFormType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InternationalFormType.subclass:
            return InternationalFormType.subclass(*args_, **kwargs_)
        else:
            return InternationalFormType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FormType(self):
        return self.FormType
    def set_FormType(self, FormType):
        self.FormType = FormType
    def add_FormType(self, value):
        self.FormType.append(value)
    def insert_FormType_at(self, index, value):
        self.FormType.insert(index, value)
    def replace_FormType_at(self, index, value):
        self.FormType[index] = value
    def get_UserCreatedForm(self):
        return self.UserCreatedForm
    def set_UserCreatedForm(self, UserCreatedForm):
        self.UserCreatedForm = UserCreatedForm
    def get_CN22Form(self):
        return self.CN22Form
    def set_CN22Form(self, CN22Form):
        self.CN22Form = CN22Form
    def get_UPSPremiumCareForm(self):
        return self.UPSPremiumCareForm
    def set_UPSPremiumCareForm(self, UPSPremiumCareForm):
        self.UPSPremiumCareForm = UPSPremiumCareForm
    def get_AdditionalDocumentIndicator(self):
        return self.AdditionalDocumentIndicator
    def set_AdditionalDocumentIndicator(self, AdditionalDocumentIndicator):
        self.AdditionalDocumentIndicator = AdditionalDocumentIndicator
    def get_FormGroupIdName(self):
        return self.FormGroupIdName
    def set_FormGroupIdName(self, FormGroupIdName):
        self.FormGroupIdName = FormGroupIdName
    def get_SEDFilingOption(self):
        return self.SEDFilingOption
    def set_SEDFilingOption(self, SEDFilingOption):
        self.SEDFilingOption = SEDFilingOption
    def get_EEIFilingOption(self):
        return self.EEIFilingOption
    def set_EEIFilingOption(self, EEIFilingOption):
        self.EEIFilingOption = EEIFilingOption
    def get_Contacts(self):
        return self.Contacts
    def set_Contacts(self, Contacts):
        self.Contacts = Contacts
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def add_Product(self, value):
        self.Product.append(value)
    def insert_Product_at(self, index, value):
        self.Product.insert(index, value)
    def replace_Product_at(self, index, value):
        self.Product[index] = value
    def get_InvoiceNumber(self):
        return self.InvoiceNumber
    def set_InvoiceNumber(self, InvoiceNumber):
        self.InvoiceNumber = InvoiceNumber
    def get_InvoiceDate(self):
        return self.InvoiceDate
    def set_InvoiceDate(self, InvoiceDate):
        self.InvoiceDate = InvoiceDate
    def get_PurchaseOrderNumber(self):
        return self.PurchaseOrderNumber
    def set_PurchaseOrderNumber(self, PurchaseOrderNumber):
        self.PurchaseOrderNumber = PurchaseOrderNumber
    def get_TermsOfShipment(self):
        return self.TermsOfShipment
    def set_TermsOfShipment(self, TermsOfShipment):
        self.TermsOfShipment = TermsOfShipment
    def get_ReasonForExport(self):
        return self.ReasonForExport
    def set_ReasonForExport(self, ReasonForExport):
        self.ReasonForExport = ReasonForExport
    def get_Comments(self):
        return self.Comments
    def set_Comments(self, Comments):
        self.Comments = Comments
    def get_DeclarationStatement(self):
        return self.DeclarationStatement
    def set_DeclarationStatement(self, DeclarationStatement):
        self.DeclarationStatement = DeclarationStatement
    def get_Discount(self):
        return self.Discount
    def set_Discount(self, Discount):
        self.Discount = Discount
    def get_FreightCharges(self):
        return self.FreightCharges
    def set_FreightCharges(self, FreightCharges):
        self.FreightCharges = FreightCharges
    def get_InsuranceCharges(self):
        return self.InsuranceCharges
    def set_InsuranceCharges(self, InsuranceCharges):
        self.InsuranceCharges = InsuranceCharges
    def get_OtherCharges(self):
        return self.OtherCharges
    def set_OtherCharges(self, OtherCharges):
        self.OtherCharges = OtherCharges
    def get_CurrencyCode(self):
        return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode):
        self.CurrencyCode = CurrencyCode
    def get_BlanketPeriod(self):
        return self.BlanketPeriod
    def set_BlanketPeriod(self, BlanketPeriod):
        self.BlanketPeriod = BlanketPeriod
    def get_ExportDate(self):
        return self.ExportDate
    def set_ExportDate(self, ExportDate):
        self.ExportDate = ExportDate
    def get_ExportingCarrier(self):
        return self.ExportingCarrier
    def set_ExportingCarrier(self, ExportingCarrier):
        self.ExportingCarrier = ExportingCarrier
    def get_CarrierID(self):
        return self.CarrierID
    def set_CarrierID(self, CarrierID):
        self.CarrierID = CarrierID
    def get_InBondCode(self):
        return self.InBondCode
    def set_InBondCode(self, InBondCode):
        self.InBondCode = InBondCode
    def get_EntryNumber(self):
        return self.EntryNumber
    def set_EntryNumber(self, EntryNumber):
        self.EntryNumber = EntryNumber
    def get_PointOfOrigin(self):
        return self.PointOfOrigin
    def set_PointOfOrigin(self, PointOfOrigin):
        self.PointOfOrigin = PointOfOrigin
    def get_PointOfOriginType(self):
        return self.PointOfOriginType
    def set_PointOfOriginType(self, PointOfOriginType):
        self.PointOfOriginType = PointOfOriginType
    def get_ModeOfTransport(self):
        return self.ModeOfTransport
    def set_ModeOfTransport(self, ModeOfTransport):
        self.ModeOfTransport = ModeOfTransport
    def get_PortOfExport(self):
        return self.PortOfExport
    def set_PortOfExport(self, PortOfExport):
        self.PortOfExport = PortOfExport
    def get_PortOfUnloading(self):
        return self.PortOfUnloading
    def set_PortOfUnloading(self, PortOfUnloading):
        self.PortOfUnloading = PortOfUnloading
    def get_LoadingPier(self):
        return self.LoadingPier
    def set_LoadingPier(self, LoadingPier):
        self.LoadingPier = LoadingPier
    def get_PartiesToTransaction(self):
        return self.PartiesToTransaction
    def set_PartiesToTransaction(self, PartiesToTransaction):
        self.PartiesToTransaction = PartiesToTransaction
    def get_RoutedExportTransactionIndicator(self):
        return self.RoutedExportTransactionIndicator
    def set_RoutedExportTransactionIndicator(self, RoutedExportTransactionIndicator):
        self.RoutedExportTransactionIndicator = RoutedExportTransactionIndicator
    def get_ContainerizedIndicator(self):
        return self.ContainerizedIndicator
    def set_ContainerizedIndicator(self, ContainerizedIndicator):
        self.ContainerizedIndicator = ContainerizedIndicator
    def get_License(self):
        return self.License
    def set_License(self, License):
        self.License = License
    def get_ECCNNumber(self):
        return self.ECCNNumber
    def set_ECCNNumber(self, ECCNNumber):
        self.ECCNNumber = ECCNNumber
    def get_OverridePaperlessIndicator(self):
        return self.OverridePaperlessIndicator
    def set_OverridePaperlessIndicator(self, OverridePaperlessIndicator):
        self.OverridePaperlessIndicator = OverridePaperlessIndicator
    def get_ShipperMemo(self):
        return self.ShipperMemo
    def set_ShipperMemo(self, ShipperMemo):
        self.ShipperMemo = ShipperMemo
    def get_MultiCurrencyInvoiceLineTotal(self):
        return self.MultiCurrencyInvoiceLineTotal
    def set_MultiCurrencyInvoiceLineTotal(self, MultiCurrencyInvoiceLineTotal):
        self.MultiCurrencyInvoiceLineTotal = MultiCurrencyInvoiceLineTotal
    def get_HazardousMaterialsIndicator(self):
        return self.HazardousMaterialsIndicator
    def set_HazardousMaterialsIndicator(self, HazardousMaterialsIndicator):
        self.HazardousMaterialsIndicator = HazardousMaterialsIndicator
    def hasContent_(self):
        if (
            self.FormType or
            self.UserCreatedForm is not None or
            self.CN22Form is not None or
            self.UPSPremiumCareForm is not None or
            self.AdditionalDocumentIndicator is not None or
            self.FormGroupIdName is not None or
            self.SEDFilingOption is not None or
            self.EEIFilingOption is not None or
            self.Contacts is not None or
            self.Product or
            self.InvoiceNumber is not None or
            self.InvoiceDate is not None or
            self.PurchaseOrderNumber is not None or
            self.TermsOfShipment is not None or
            self.ReasonForExport is not None or
            self.Comments is not None or
            self.DeclarationStatement is not None or
            self.Discount is not None or
            self.FreightCharges is not None or
            self.InsuranceCharges is not None or
            self.OtherCharges is not None or
            self.CurrencyCode is not None or
            self.BlanketPeriod is not None or
            self.ExportDate is not None or
            self.ExportingCarrier is not None or
            self.CarrierID is not None or
            self.InBondCode is not None or
            self.EntryNumber is not None or
            self.PointOfOrigin is not None or
            self.PointOfOriginType is not None or
            self.ModeOfTransport is not None or
            self.PortOfExport is not None or
            self.PortOfUnloading is not None or
            self.LoadingPier is not None or
            self.PartiesToTransaction is not None or
            self.RoutedExportTransactionIndicator is not None or
            self.ContainerizedIndicator is not None or
            self.License is not None or
            self.ECCNNumber is not None or
            self.OverridePaperlessIndicator is not None or
            self.ShipperMemo is not None or
            self.MultiCurrencyInvoiceLineTotal is not None or
            self.HazardousMaterialsIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='InternationalFormType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InternationalFormType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InternationalFormType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InternationalFormType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InternationalFormType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='InternationalFormType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='InternationalFormType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for FormType_ in self.FormType:
            namespaceprefix_ = self.FormType_nsprefix_ + ':' if (UseCapturedNS_ and self.FormType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormType>%s</%sFormType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(FormType_), input_name='FormType')), namespaceprefix_ , eol_))
        if self.UserCreatedForm is not None:
            namespaceprefix_ = self.UserCreatedForm_nsprefix_ + ':' if (UseCapturedNS_ and self.UserCreatedForm_nsprefix_) else ''
            self.UserCreatedForm.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UserCreatedForm', pretty_print=pretty_print)
        if self.CN22Form is not None:
            namespaceprefix_ = self.CN22Form_nsprefix_ + ':' if (UseCapturedNS_ and self.CN22Form_nsprefix_) else ''
            self.CN22Form.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CN22Form', pretty_print=pretty_print)
        if self.UPSPremiumCareForm is not None:
            namespaceprefix_ = self.UPSPremiumCareForm_nsprefix_ + ':' if (UseCapturedNS_ and self.UPSPremiumCareForm_nsprefix_) else ''
            self.UPSPremiumCareForm.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UPSPremiumCareForm', pretty_print=pretty_print)
        if self.AdditionalDocumentIndicator is not None:
            namespaceprefix_ = self.AdditionalDocumentIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.AdditionalDocumentIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAdditionalDocumentIndicator>%s</%sAdditionalDocumentIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AdditionalDocumentIndicator), input_name='AdditionalDocumentIndicator')), namespaceprefix_ , eol_))
        if self.FormGroupIdName is not None:
            namespaceprefix_ = self.FormGroupIdName_nsprefix_ + ':' if (UseCapturedNS_ and self.FormGroupIdName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormGroupIdName>%s</%sFormGroupIdName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FormGroupIdName), input_name='FormGroupIdName')), namespaceprefix_ , eol_))
        if self.SEDFilingOption is not None:
            namespaceprefix_ = self.SEDFilingOption_nsprefix_ + ':' if (UseCapturedNS_ and self.SEDFilingOption_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSEDFilingOption>%s</%sSEDFilingOption>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SEDFilingOption), input_name='SEDFilingOption')), namespaceprefix_ , eol_))
        if self.EEIFilingOption is not None:
            namespaceprefix_ = self.EEIFilingOption_nsprefix_ + ':' if (UseCapturedNS_ and self.EEIFilingOption_nsprefix_) else ''
            self.EEIFilingOption.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EEIFilingOption', pretty_print=pretty_print)
        if self.Contacts is not None:
            namespaceprefix_ = self.Contacts_nsprefix_ + ':' if (UseCapturedNS_ and self.Contacts_nsprefix_) else ''
            self.Contacts.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Contacts', pretty_print=pretty_print)
        for Product_ in self.Product:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            Product_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
        if self.InvoiceNumber is not None:
            namespaceprefix_ = self.InvoiceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.InvoiceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInvoiceNumber>%s</%sInvoiceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InvoiceNumber), input_name='InvoiceNumber')), namespaceprefix_ , eol_))
        if self.InvoiceDate is not None:
            namespaceprefix_ = self.InvoiceDate_nsprefix_ + ':' if (UseCapturedNS_ and self.InvoiceDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInvoiceDate>%s</%sInvoiceDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InvoiceDate), input_name='InvoiceDate')), namespaceprefix_ , eol_))
        if self.PurchaseOrderNumber is not None:
            namespaceprefix_ = self.PurchaseOrderNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PurchaseOrderNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchaseOrderNumber>%s</%sPurchaseOrderNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PurchaseOrderNumber), input_name='PurchaseOrderNumber')), namespaceprefix_ , eol_))
        if self.TermsOfShipment is not None:
            namespaceprefix_ = self.TermsOfShipment_nsprefix_ + ':' if (UseCapturedNS_ and self.TermsOfShipment_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTermsOfShipment>%s</%sTermsOfShipment>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TermsOfShipment), input_name='TermsOfShipment')), namespaceprefix_ , eol_))
        if self.ReasonForExport is not None:
            namespaceprefix_ = self.ReasonForExport_nsprefix_ + ':' if (UseCapturedNS_ and self.ReasonForExport_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReasonForExport>%s</%sReasonForExport>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReasonForExport), input_name='ReasonForExport')), namespaceprefix_ , eol_))
        if self.Comments is not None:
            namespaceprefix_ = self.Comments_nsprefix_ + ':' if (UseCapturedNS_ and self.Comments_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComments>%s</%sComments>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Comments), input_name='Comments')), namespaceprefix_ , eol_))
        if self.DeclarationStatement is not None:
            namespaceprefix_ = self.DeclarationStatement_nsprefix_ + ':' if (UseCapturedNS_ and self.DeclarationStatement_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeclarationStatement>%s</%sDeclarationStatement>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeclarationStatement), input_name='DeclarationStatement')), namespaceprefix_ , eol_))
        if self.Discount is not None:
            namespaceprefix_ = self.Discount_nsprefix_ + ':' if (UseCapturedNS_ and self.Discount_nsprefix_) else ''
            self.Discount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Discount', pretty_print=pretty_print)
        if self.FreightCharges is not None:
            namespaceprefix_ = self.FreightCharges_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightCharges_nsprefix_) else ''
            self.FreightCharges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreightCharges', pretty_print=pretty_print)
        if self.InsuranceCharges is not None:
            namespaceprefix_ = self.InsuranceCharges_nsprefix_ + ':' if (UseCapturedNS_ and self.InsuranceCharges_nsprefix_) else ''
            self.InsuranceCharges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InsuranceCharges', pretty_print=pretty_print)
        if self.OtherCharges is not None:
            namespaceprefix_ = self.OtherCharges_nsprefix_ + ':' if (UseCapturedNS_ and self.OtherCharges_nsprefix_) else ''
            self.OtherCharges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OtherCharges', pretty_print=pretty_print)
        if self.CurrencyCode is not None:
            namespaceprefix_ = self.CurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyCode>%s</%sCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), namespaceprefix_ , eol_))
        if self.BlanketPeriod is not None:
            namespaceprefix_ = self.BlanketPeriod_nsprefix_ + ':' if (UseCapturedNS_ and self.BlanketPeriod_nsprefix_) else ''
            self.BlanketPeriod.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BlanketPeriod', pretty_print=pretty_print)
        if self.ExportDate is not None:
            namespaceprefix_ = self.ExportDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ExportDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExportDate>%s</%sExportDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExportDate), input_name='ExportDate')), namespaceprefix_ , eol_))
        if self.ExportingCarrier is not None:
            namespaceprefix_ = self.ExportingCarrier_nsprefix_ + ':' if (UseCapturedNS_ and self.ExportingCarrier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExportingCarrier>%s</%sExportingCarrier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExportingCarrier), input_name='ExportingCarrier')), namespaceprefix_ , eol_))
        if self.CarrierID is not None:
            namespaceprefix_ = self.CarrierID_nsprefix_ + ':' if (UseCapturedNS_ and self.CarrierID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierID>%s</%sCarrierID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CarrierID), input_name='CarrierID')), namespaceprefix_ , eol_))
        if self.InBondCode is not None:
            namespaceprefix_ = self.InBondCode_nsprefix_ + ':' if (UseCapturedNS_ and self.InBondCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInBondCode>%s</%sInBondCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InBondCode), input_name='InBondCode')), namespaceprefix_ , eol_))
        if self.EntryNumber is not None:
            namespaceprefix_ = self.EntryNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.EntryNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEntryNumber>%s</%sEntryNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EntryNumber), input_name='EntryNumber')), namespaceprefix_ , eol_))
        if self.PointOfOrigin is not None:
            namespaceprefix_ = self.PointOfOrigin_nsprefix_ + ':' if (UseCapturedNS_ and self.PointOfOrigin_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPointOfOrigin>%s</%sPointOfOrigin>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PointOfOrigin), input_name='PointOfOrigin')), namespaceprefix_ , eol_))
        if self.PointOfOriginType is not None:
            namespaceprefix_ = self.PointOfOriginType_nsprefix_ + ':' if (UseCapturedNS_ and self.PointOfOriginType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPointOfOriginType>%s</%sPointOfOriginType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PointOfOriginType), input_name='PointOfOriginType')), namespaceprefix_ , eol_))
        if self.ModeOfTransport is not None:
            namespaceprefix_ = self.ModeOfTransport_nsprefix_ + ':' if (UseCapturedNS_ and self.ModeOfTransport_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sModeOfTransport>%s</%sModeOfTransport>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ModeOfTransport), input_name='ModeOfTransport')), namespaceprefix_ , eol_))
        if self.PortOfExport is not None:
            namespaceprefix_ = self.PortOfExport_nsprefix_ + ':' if (UseCapturedNS_ and self.PortOfExport_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPortOfExport>%s</%sPortOfExport>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PortOfExport), input_name='PortOfExport')), namespaceprefix_ , eol_))
        if self.PortOfUnloading is not None:
            namespaceprefix_ = self.PortOfUnloading_nsprefix_ + ':' if (UseCapturedNS_ and self.PortOfUnloading_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPortOfUnloading>%s</%sPortOfUnloading>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PortOfUnloading), input_name='PortOfUnloading')), namespaceprefix_ , eol_))
        if self.LoadingPier is not None:
            namespaceprefix_ = self.LoadingPier_nsprefix_ + ':' if (UseCapturedNS_ and self.LoadingPier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLoadingPier>%s</%sLoadingPier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LoadingPier), input_name='LoadingPier')), namespaceprefix_ , eol_))
        if self.PartiesToTransaction is not None:
            namespaceprefix_ = self.PartiesToTransaction_nsprefix_ + ':' if (UseCapturedNS_ and self.PartiesToTransaction_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPartiesToTransaction>%s</%sPartiesToTransaction>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PartiesToTransaction), input_name='PartiesToTransaction')), namespaceprefix_ , eol_))
        if self.RoutedExportTransactionIndicator is not None:
            namespaceprefix_ = self.RoutedExportTransactionIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.RoutedExportTransactionIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRoutedExportTransactionIndicator>%s</%sRoutedExportTransactionIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RoutedExportTransactionIndicator), input_name='RoutedExportTransactionIndicator')), namespaceprefix_ , eol_))
        if self.ContainerizedIndicator is not None:
            namespaceprefix_ = self.ContainerizedIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.ContainerizedIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContainerizedIndicator>%s</%sContainerizedIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ContainerizedIndicator), input_name='ContainerizedIndicator')), namespaceprefix_ , eol_))
        if self.License is not None:
            namespaceprefix_ = self.License_nsprefix_ + ':' if (UseCapturedNS_ and self.License_nsprefix_) else ''
            self.License.export(outfile, level, namespaceprefix_, namespacedef_='', name_='License', pretty_print=pretty_print)
        if self.ECCNNumber is not None:
            namespaceprefix_ = self.ECCNNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ECCNNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sECCNNumber>%s</%sECCNNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ECCNNumber), input_name='ECCNNumber')), namespaceprefix_ , eol_))
        if self.OverridePaperlessIndicator is not None:
            namespaceprefix_ = self.OverridePaperlessIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.OverridePaperlessIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOverridePaperlessIndicator>%s</%sOverridePaperlessIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OverridePaperlessIndicator), input_name='OverridePaperlessIndicator')), namespaceprefix_ , eol_))
        if self.ShipperMemo is not None:
            namespaceprefix_ = self.ShipperMemo_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipperMemo_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipperMemo>%s</%sShipperMemo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShipperMemo), input_name='ShipperMemo')), namespaceprefix_ , eol_))
        if self.MultiCurrencyInvoiceLineTotal is not None:
            namespaceprefix_ = self.MultiCurrencyInvoiceLineTotal_nsprefix_ + ':' if (UseCapturedNS_ and self.MultiCurrencyInvoiceLineTotal_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMultiCurrencyInvoiceLineTotal>%s</%sMultiCurrencyInvoiceLineTotal>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MultiCurrencyInvoiceLineTotal), input_name='MultiCurrencyInvoiceLineTotal')), namespaceprefix_ , eol_))
        if self.HazardousMaterialsIndicator is not None:
            namespaceprefix_ = self.HazardousMaterialsIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.HazardousMaterialsIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHazardousMaterialsIndicator>%s</%sHazardousMaterialsIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HazardousMaterialsIndicator), input_name='HazardousMaterialsIndicator')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FormType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FormType')
            value_ = self.gds_validate_string(value_, node, 'FormType')
            self.FormType.append(value_)
            self.FormType_nsprefix_ = child_.prefix
        elif nodeName_ == 'UserCreatedForm':
            obj_ = UserCreatedFormType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UserCreatedForm = obj_
            obj_.original_tagname_ = 'UserCreatedForm'
        elif nodeName_ == 'CN22Form':
            obj_ = CN22FormType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CN22Form = obj_
            obj_.original_tagname_ = 'CN22Form'
        elif nodeName_ == 'UPSPremiumCareForm':
            obj_ = UPSPremiumCareFormType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UPSPremiumCareForm = obj_
            obj_.original_tagname_ = 'UPSPremiumCareForm'
        elif nodeName_ == 'AdditionalDocumentIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AdditionalDocumentIndicator')
            value_ = self.gds_validate_string(value_, node, 'AdditionalDocumentIndicator')
            self.AdditionalDocumentIndicator = value_
            self.AdditionalDocumentIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'FormGroupIdName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FormGroupIdName')
            value_ = self.gds_validate_string(value_, node, 'FormGroupIdName')
            self.FormGroupIdName = value_
            self.FormGroupIdName_nsprefix_ = child_.prefix
        elif nodeName_ == 'SEDFilingOption':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SEDFilingOption')
            value_ = self.gds_validate_string(value_, node, 'SEDFilingOption')
            self.SEDFilingOption = value_
            self.SEDFilingOption_nsprefix_ = child_.prefix
        elif nodeName_ == 'EEIFilingOption':
            obj_ = EEIFilingOptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EEIFilingOption = obj_
            obj_.original_tagname_ = 'EEIFilingOption'
        elif nodeName_ == 'Contacts':
            obj_ = ContactType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Contacts = obj_
            obj_.original_tagname_ = 'Contacts'
        elif nodeName_ == 'Product':
            obj_ = ProductType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product.append(obj_)
            obj_.original_tagname_ = 'Product'
        elif nodeName_ == 'InvoiceNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InvoiceNumber')
            value_ = self.gds_validate_string(value_, node, 'InvoiceNumber')
            self.InvoiceNumber = value_
            self.InvoiceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'InvoiceDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InvoiceDate')
            value_ = self.gds_validate_string(value_, node, 'InvoiceDate')
            self.InvoiceDate = value_
            self.InvoiceDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'PurchaseOrderNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PurchaseOrderNumber')
            value_ = self.gds_validate_string(value_, node, 'PurchaseOrderNumber')
            self.PurchaseOrderNumber = value_
            self.PurchaseOrderNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'TermsOfShipment':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TermsOfShipment')
            value_ = self.gds_validate_string(value_, node, 'TermsOfShipment')
            self.TermsOfShipment = value_
            self.TermsOfShipment_nsprefix_ = child_.prefix
        elif nodeName_ == 'ReasonForExport':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ReasonForExport')
            value_ = self.gds_validate_string(value_, node, 'ReasonForExport')
            self.ReasonForExport = value_
            self.ReasonForExport_nsprefix_ = child_.prefix
        elif nodeName_ == 'Comments':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Comments')
            value_ = self.gds_validate_string(value_, node, 'Comments')
            self.Comments = value_
            self.Comments_nsprefix_ = child_.prefix
        elif nodeName_ == 'DeclarationStatement':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DeclarationStatement')
            value_ = self.gds_validate_string(value_, node, 'DeclarationStatement')
            self.DeclarationStatement = value_
            self.DeclarationStatement_nsprefix_ = child_.prefix
        elif nodeName_ == 'Discount':
            obj_ = IFChargesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Discount = obj_
            obj_.original_tagname_ = 'Discount'
        elif nodeName_ == 'FreightCharges':
            obj_ = IFChargesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreightCharges = obj_
            obj_.original_tagname_ = 'FreightCharges'
        elif nodeName_ == 'InsuranceCharges':
            obj_ = IFChargesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InsuranceCharges = obj_
            obj_.original_tagname_ = 'InsuranceCharges'
        elif nodeName_ == 'OtherCharges':
            obj_ = OtherChargesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OtherCharges = obj_
            obj_.original_tagname_ = 'OtherCharges'
        elif nodeName_ == 'CurrencyCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'CurrencyCode')
            self.CurrencyCode = value_
            self.CurrencyCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'BlanketPeriod':
            obj_ = BlanketPeriodType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BlanketPeriod = obj_
            obj_.original_tagname_ = 'BlanketPeriod'
        elif nodeName_ == 'ExportDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExportDate')
            value_ = self.gds_validate_string(value_, node, 'ExportDate')
            self.ExportDate = value_
            self.ExportDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'ExportingCarrier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExportingCarrier')
            value_ = self.gds_validate_string(value_, node, 'ExportingCarrier')
            self.ExportingCarrier = value_
            self.ExportingCarrier_nsprefix_ = child_.prefix
        elif nodeName_ == 'CarrierID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CarrierID')
            value_ = self.gds_validate_string(value_, node, 'CarrierID')
            self.CarrierID = value_
            self.CarrierID_nsprefix_ = child_.prefix
        elif nodeName_ == 'InBondCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InBondCode')
            value_ = self.gds_validate_string(value_, node, 'InBondCode')
            self.InBondCode = value_
            self.InBondCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'EntryNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EntryNumber')
            value_ = self.gds_validate_string(value_, node, 'EntryNumber')
            self.EntryNumber = value_
            self.EntryNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'PointOfOrigin':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PointOfOrigin')
            value_ = self.gds_validate_string(value_, node, 'PointOfOrigin')
            self.PointOfOrigin = value_
            self.PointOfOrigin_nsprefix_ = child_.prefix
        elif nodeName_ == 'PointOfOriginType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PointOfOriginType')
            value_ = self.gds_validate_string(value_, node, 'PointOfOriginType')
            self.PointOfOriginType = value_
            self.PointOfOriginType_nsprefix_ = child_.prefix
        elif nodeName_ == 'ModeOfTransport':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ModeOfTransport')
            value_ = self.gds_validate_string(value_, node, 'ModeOfTransport')
            self.ModeOfTransport = value_
            self.ModeOfTransport_nsprefix_ = child_.prefix
        elif nodeName_ == 'PortOfExport':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PortOfExport')
            value_ = self.gds_validate_string(value_, node, 'PortOfExport')
            self.PortOfExport = value_
            self.PortOfExport_nsprefix_ = child_.prefix
        elif nodeName_ == 'PortOfUnloading':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PortOfUnloading')
            value_ = self.gds_validate_string(value_, node, 'PortOfUnloading')
            self.PortOfUnloading = value_
            self.PortOfUnloading_nsprefix_ = child_.prefix
        elif nodeName_ == 'LoadingPier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LoadingPier')
            value_ = self.gds_validate_string(value_, node, 'LoadingPier')
            self.LoadingPier = value_
            self.LoadingPier_nsprefix_ = child_.prefix
        elif nodeName_ == 'PartiesToTransaction':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PartiesToTransaction')
            value_ = self.gds_validate_string(value_, node, 'PartiesToTransaction')
            self.PartiesToTransaction = value_
            self.PartiesToTransaction_nsprefix_ = child_.prefix
        elif nodeName_ == 'RoutedExportTransactionIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RoutedExportTransactionIndicator')
            value_ = self.gds_validate_string(value_, node, 'RoutedExportTransactionIndicator')
            self.RoutedExportTransactionIndicator = value_
            self.RoutedExportTransactionIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'ContainerizedIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ContainerizedIndicator')
            value_ = self.gds_validate_string(value_, node, 'ContainerizedIndicator')
            self.ContainerizedIndicator = value_
            self.ContainerizedIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'License':
            obj_ = LicenseType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.License = obj_
            obj_.original_tagname_ = 'License'
        elif nodeName_ == 'ECCNNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ECCNNumber')
            value_ = self.gds_validate_string(value_, node, 'ECCNNumber')
            self.ECCNNumber = value_
            self.ECCNNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'OverridePaperlessIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OverridePaperlessIndicator')
            value_ = self.gds_validate_string(value_, node, 'OverridePaperlessIndicator')
            self.OverridePaperlessIndicator = value_
            self.OverridePaperlessIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShipperMemo':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShipperMemo')
            value_ = self.gds_validate_string(value_, node, 'ShipperMemo')
            self.ShipperMemo = value_
            self.ShipperMemo_nsprefix_ = child_.prefix
        elif nodeName_ == 'MultiCurrencyInvoiceLineTotal':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MultiCurrencyInvoiceLineTotal')
            value_ = self.gds_validate_string(value_, node, 'MultiCurrencyInvoiceLineTotal')
            self.MultiCurrencyInvoiceLineTotal = value_
            self.MultiCurrencyInvoiceLineTotal_nsprefix_ = child_.prefix
        elif nodeName_ == 'HazardousMaterialsIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HazardousMaterialsIndicator')
            value_ = self.gds_validate_string(value_, node, 'HazardousMaterialsIndicator')
            self.HazardousMaterialsIndicator = value_
            self.HazardousMaterialsIndicator_nsprefix_ = child_.prefix
# end class InternationalFormType


class UPSPremiumCareFormType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ShipmentDate=None, PageSize=None, PrintType=None, NumOfCopies=None, LanguageForUPSPremiumCare=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ShipmentDate = ShipmentDate
        self.ShipmentDate_nsprefix_ = None
        self.PageSize = PageSize
        self.PageSize_nsprefix_ = None
        self.PrintType = PrintType
        self.PrintType_nsprefix_ = None
        self.NumOfCopies = NumOfCopies
        self.NumOfCopies_nsprefix_ = None
        self.LanguageForUPSPremiumCare = LanguageForUPSPremiumCare
        self.LanguageForUPSPremiumCare_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UPSPremiumCareFormType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UPSPremiumCareFormType.subclass:
            return UPSPremiumCareFormType.subclass(*args_, **kwargs_)
        else:
            return UPSPremiumCareFormType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ShipmentDate(self):
        return self.ShipmentDate
    def set_ShipmentDate(self, ShipmentDate):
        self.ShipmentDate = ShipmentDate
    def get_PageSize(self):
        return self.PageSize
    def set_PageSize(self, PageSize):
        self.PageSize = PageSize
    def get_PrintType(self):
        return self.PrintType
    def set_PrintType(self, PrintType):
        self.PrintType = PrintType
    def get_NumOfCopies(self):
        return self.NumOfCopies
    def set_NumOfCopies(self, NumOfCopies):
        self.NumOfCopies = NumOfCopies
    def get_LanguageForUPSPremiumCare(self):
        return self.LanguageForUPSPremiumCare
    def set_LanguageForUPSPremiumCare(self, LanguageForUPSPremiumCare):
        self.LanguageForUPSPremiumCare = LanguageForUPSPremiumCare
    def hasContent_(self):
        if (
            self.ShipmentDate is not None or
            self.PageSize is not None or
            self.PrintType is not None or
            self.NumOfCopies is not None or
            self.LanguageForUPSPremiumCare is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='UPSPremiumCareFormType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UPSPremiumCareFormType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UPSPremiumCareFormType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UPSPremiumCareFormType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UPSPremiumCareFormType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='UPSPremiumCareFormType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='UPSPremiumCareFormType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShipmentDate is not None:
            namespaceprefix_ = self.ShipmentDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipmentDate>%s</%sShipmentDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShipmentDate), input_name='ShipmentDate')), namespaceprefix_ , eol_))
        if self.PageSize is not None:
            namespaceprefix_ = self.PageSize_nsprefix_ + ':' if (UseCapturedNS_ and self.PageSize_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPageSize>%s</%sPageSize>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PageSize), input_name='PageSize')), namespaceprefix_ , eol_))
        if self.PrintType is not None:
            namespaceprefix_ = self.PrintType_nsprefix_ + ':' if (UseCapturedNS_ and self.PrintType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrintType>%s</%sPrintType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrintType), input_name='PrintType')), namespaceprefix_ , eol_))
        if self.NumOfCopies is not None:
            namespaceprefix_ = self.NumOfCopies_nsprefix_ + ':' if (UseCapturedNS_ and self.NumOfCopies_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumOfCopies>%s</%sNumOfCopies>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NumOfCopies), input_name='NumOfCopies')), namespaceprefix_ , eol_))
        if self.LanguageForUPSPremiumCare is not None:
            namespaceprefix_ = self.LanguageForUPSPremiumCare_nsprefix_ + ':' if (UseCapturedNS_ and self.LanguageForUPSPremiumCare_nsprefix_) else ''
            self.LanguageForUPSPremiumCare.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LanguageForUPSPremiumCare', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ShipmentDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShipmentDate')
            value_ = self.gds_validate_string(value_, node, 'ShipmentDate')
            self.ShipmentDate = value_
            self.ShipmentDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'PageSize':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PageSize')
            value_ = self.gds_validate_string(value_, node, 'PageSize')
            self.PageSize = value_
            self.PageSize_nsprefix_ = child_.prefix
        elif nodeName_ == 'PrintType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PrintType')
            value_ = self.gds_validate_string(value_, node, 'PrintType')
            self.PrintType = value_
            self.PrintType_nsprefix_ = child_.prefix
        elif nodeName_ == 'NumOfCopies':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NumOfCopies')
            value_ = self.gds_validate_string(value_, node, 'NumOfCopies')
            self.NumOfCopies = value_
            self.NumOfCopies_nsprefix_ = child_.prefix
        elif nodeName_ == 'LanguageForUPSPremiumCare':
            obj_ = LanguageForUPSPremiumCareType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LanguageForUPSPremiumCare = obj_
            obj_.original_tagname_ = 'LanguageForUPSPremiumCare'
# end class UPSPremiumCareFormType


class LanguageForUPSPremiumCareType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Language=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Language is None:
            self.Language = []
        else:
            self.Language = Language
        self.Language_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LanguageForUPSPremiumCareType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LanguageForUPSPremiumCareType.subclass:
            return LanguageForUPSPremiumCareType.subclass(*args_, **kwargs_)
        else:
            return LanguageForUPSPremiumCareType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Language(self):
        return self.Language
    def set_Language(self, Language):
        self.Language = Language
    def add_Language(self, value):
        self.Language.append(value)
    def insert_Language_at(self, index, value):
        self.Language.insert(index, value)
    def replace_Language_at(self, index, value):
        self.Language[index] = value
    def hasContent_(self):
        if (
            self.Language
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='LanguageForUPSPremiumCareType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LanguageForUPSPremiumCareType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LanguageForUPSPremiumCareType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LanguageForUPSPremiumCareType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LanguageForUPSPremiumCareType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='LanguageForUPSPremiumCareType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='LanguageForUPSPremiumCareType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Language_ in self.Language:
            namespaceprefix_ = self.Language_nsprefix_ + ':' if (UseCapturedNS_ and self.Language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLanguage>%s</%sLanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Language_), input_name='Language')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Language')
            value_ = self.gds_validate_string(value_, node, 'Language')
            self.Language.append(value_)
            self.Language_nsprefix_ = child_.prefix
# end class LanguageForUPSPremiumCareType


class UserCreatedFormType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DocumentID=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if DocumentID is None:
            self.DocumentID = []
        else:
            self.DocumentID = DocumentID
        self.DocumentID_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UserCreatedFormType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UserCreatedFormType.subclass:
            return UserCreatedFormType.subclass(*args_, **kwargs_)
        else:
            return UserCreatedFormType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocumentID(self):
        return self.DocumentID
    def set_DocumentID(self, DocumentID):
        self.DocumentID = DocumentID
    def add_DocumentID(self, value):
        self.DocumentID.append(value)
    def insert_DocumentID_at(self, index, value):
        self.DocumentID.insert(index, value)
    def replace_DocumentID_at(self, index, value):
        self.DocumentID[index] = value
    def hasContent_(self):
        if (
            self.DocumentID
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='UserCreatedFormType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UserCreatedFormType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UserCreatedFormType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UserCreatedFormType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UserCreatedFormType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='UserCreatedFormType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='UserCreatedFormType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DocumentID_ in self.DocumentID:
            namespaceprefix_ = self.DocumentID_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentID>%s</%sDocumentID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(DocumentID_), input_name='DocumentID')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocumentID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocumentID')
            value_ = self.gds_validate_string(value_, node, 'DocumentID')
            self.DocumentID.append(value_)
            self.DocumentID_nsprefix_ = child_.prefix
# end class UserCreatedFormType


class CN22FormType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LabelSize=None, PrintsPerPage=None, LabelPrintType=None, CN22Type=None, CN22OtherDescription=None, FoldHereText=None, CN22Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.LabelSize = LabelSize
        self.LabelSize_nsprefix_ = None
        self.PrintsPerPage = PrintsPerPage
        self.PrintsPerPage_nsprefix_ = None
        self.LabelPrintType = LabelPrintType
        self.LabelPrintType_nsprefix_ = None
        self.CN22Type = CN22Type
        self.CN22Type_nsprefix_ = None
        self.CN22OtherDescription = CN22OtherDescription
        self.CN22OtherDescription_nsprefix_ = None
        self.FoldHereText = FoldHereText
        self.FoldHereText_nsprefix_ = None
        if CN22Content is None:
            self.CN22Content = []
        else:
            self.CN22Content = CN22Content
        self.CN22Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CN22FormType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CN22FormType.subclass:
            return CN22FormType.subclass(*args_, **kwargs_)
        else:
            return CN22FormType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LabelSize(self):
        return self.LabelSize
    def set_LabelSize(self, LabelSize):
        self.LabelSize = LabelSize
    def get_PrintsPerPage(self):
        return self.PrintsPerPage
    def set_PrintsPerPage(self, PrintsPerPage):
        self.PrintsPerPage = PrintsPerPage
    def get_LabelPrintType(self):
        return self.LabelPrintType
    def set_LabelPrintType(self, LabelPrintType):
        self.LabelPrintType = LabelPrintType
    def get_CN22Type(self):
        return self.CN22Type
    def set_CN22Type(self, CN22Type):
        self.CN22Type = CN22Type
    def get_CN22OtherDescription(self):
        return self.CN22OtherDescription
    def set_CN22OtherDescription(self, CN22OtherDescription):
        self.CN22OtherDescription = CN22OtherDescription
    def get_FoldHereText(self):
        return self.FoldHereText
    def set_FoldHereText(self, FoldHereText):
        self.FoldHereText = FoldHereText
    def get_CN22Content(self):
        return self.CN22Content
    def set_CN22Content(self, CN22Content):
        self.CN22Content = CN22Content
    def add_CN22Content(self, value):
        self.CN22Content.append(value)
    def insert_CN22Content_at(self, index, value):
        self.CN22Content.insert(index, value)
    def replace_CN22Content_at(self, index, value):
        self.CN22Content[index] = value
    def hasContent_(self):
        if (
            self.LabelSize is not None or
            self.PrintsPerPage is not None or
            self.LabelPrintType is not None or
            self.CN22Type is not None or
            self.CN22OtherDescription is not None or
            self.FoldHereText is not None or
            self.CN22Content
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='CN22FormType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CN22FormType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CN22FormType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CN22FormType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CN22FormType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='CN22FormType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='CN22FormType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LabelSize is not None:
            namespaceprefix_ = self.LabelSize_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelSize_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelSize>%s</%sLabelSize>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LabelSize), input_name='LabelSize')), namespaceprefix_ , eol_))
        if self.PrintsPerPage is not None:
            namespaceprefix_ = self.PrintsPerPage_nsprefix_ + ':' if (UseCapturedNS_ and self.PrintsPerPage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrintsPerPage>%s</%sPrintsPerPage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrintsPerPage), input_name='PrintsPerPage')), namespaceprefix_ , eol_))
        if self.LabelPrintType is not None:
            namespaceprefix_ = self.LabelPrintType_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelPrintType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelPrintType>%s</%sLabelPrintType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LabelPrintType), input_name='LabelPrintType')), namespaceprefix_ , eol_))
        if self.CN22Type is not None:
            namespaceprefix_ = self.CN22Type_nsprefix_ + ':' if (UseCapturedNS_ and self.CN22Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCN22Type>%s</%sCN22Type>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CN22Type), input_name='CN22Type')), namespaceprefix_ , eol_))
        if self.CN22OtherDescription is not None:
            namespaceprefix_ = self.CN22OtherDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.CN22OtherDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCN22OtherDescription>%s</%sCN22OtherDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CN22OtherDescription), input_name='CN22OtherDescription')), namespaceprefix_ , eol_))
        if self.FoldHereText is not None:
            namespaceprefix_ = self.FoldHereText_nsprefix_ + ':' if (UseCapturedNS_ and self.FoldHereText_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFoldHereText>%s</%sFoldHereText>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FoldHereText), input_name='FoldHereText')), namespaceprefix_ , eol_))
        for CN22Content_ in self.CN22Content:
            namespaceprefix_ = self.CN22Content_nsprefix_ + ':' if (UseCapturedNS_ and self.CN22Content_nsprefix_) else ''
            CN22Content_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CN22Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LabelSize':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelSize')
            value_ = self.gds_validate_string(value_, node, 'LabelSize')
            self.LabelSize = value_
            self.LabelSize_nsprefix_ = child_.prefix
        elif nodeName_ == 'PrintsPerPage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PrintsPerPage')
            value_ = self.gds_validate_string(value_, node, 'PrintsPerPage')
            self.PrintsPerPage = value_
            self.PrintsPerPage_nsprefix_ = child_.prefix
        elif nodeName_ == 'LabelPrintType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelPrintType')
            value_ = self.gds_validate_string(value_, node, 'LabelPrintType')
            self.LabelPrintType = value_
            self.LabelPrintType_nsprefix_ = child_.prefix
        elif nodeName_ == 'CN22Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CN22Type')
            value_ = self.gds_validate_string(value_, node, 'CN22Type')
            self.CN22Type = value_
            self.CN22Type_nsprefix_ = child_.prefix
        elif nodeName_ == 'CN22OtherDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CN22OtherDescription')
            value_ = self.gds_validate_string(value_, node, 'CN22OtherDescription')
            self.CN22OtherDescription = value_
            self.CN22OtherDescription_nsprefix_ = child_.prefix
        elif nodeName_ == 'FoldHereText':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FoldHereText')
            value_ = self.gds_validate_string(value_, node, 'FoldHereText')
            self.FoldHereText = value_
            self.FoldHereText_nsprefix_ = child_.prefix
        elif nodeName_ == 'CN22Content':
            obj_ = CN22ContentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CN22Content.append(obj_)
            obj_.original_tagname_ = 'CN22Content'
# end class CN22FormType


class CN22ContentType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CN22ContentQuantity=None, CN22ContentDescription=None, CN22ContentWeight=None, CN22ContentTotalValue=None, CN22ContentCurrencyCode=None, CN22ContentCountryOfOrigin=None, CN22ContentTariffNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CN22ContentQuantity = CN22ContentQuantity
        self.CN22ContentQuantity_nsprefix_ = None
        self.CN22ContentDescription = CN22ContentDescription
        self.CN22ContentDescription_nsprefix_ = None
        self.CN22ContentWeight = CN22ContentWeight
        self.CN22ContentWeight_nsprefix_ = None
        self.CN22ContentTotalValue = CN22ContentTotalValue
        self.CN22ContentTotalValue_nsprefix_ = None
        self.CN22ContentCurrencyCode = CN22ContentCurrencyCode
        self.CN22ContentCurrencyCode_nsprefix_ = None
        self.CN22ContentCountryOfOrigin = CN22ContentCountryOfOrigin
        self.CN22ContentCountryOfOrigin_nsprefix_ = None
        self.CN22ContentTariffNumber = CN22ContentTariffNumber
        self.CN22ContentTariffNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CN22ContentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CN22ContentType.subclass:
            return CN22ContentType.subclass(*args_, **kwargs_)
        else:
            return CN22ContentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CN22ContentQuantity(self):
        return self.CN22ContentQuantity
    def set_CN22ContentQuantity(self, CN22ContentQuantity):
        self.CN22ContentQuantity = CN22ContentQuantity
    def get_CN22ContentDescription(self):
        return self.CN22ContentDescription
    def set_CN22ContentDescription(self, CN22ContentDescription):
        self.CN22ContentDescription = CN22ContentDescription
    def get_CN22ContentWeight(self):
        return self.CN22ContentWeight
    def set_CN22ContentWeight(self, CN22ContentWeight):
        self.CN22ContentWeight = CN22ContentWeight
    def get_CN22ContentTotalValue(self):
        return self.CN22ContentTotalValue
    def set_CN22ContentTotalValue(self, CN22ContentTotalValue):
        self.CN22ContentTotalValue = CN22ContentTotalValue
    def get_CN22ContentCurrencyCode(self):
        return self.CN22ContentCurrencyCode
    def set_CN22ContentCurrencyCode(self, CN22ContentCurrencyCode):
        self.CN22ContentCurrencyCode = CN22ContentCurrencyCode
    def get_CN22ContentCountryOfOrigin(self):
        return self.CN22ContentCountryOfOrigin
    def set_CN22ContentCountryOfOrigin(self, CN22ContentCountryOfOrigin):
        self.CN22ContentCountryOfOrigin = CN22ContentCountryOfOrigin
    def get_CN22ContentTariffNumber(self):
        return self.CN22ContentTariffNumber
    def set_CN22ContentTariffNumber(self, CN22ContentTariffNumber):
        self.CN22ContentTariffNumber = CN22ContentTariffNumber
    def hasContent_(self):
        if (
            self.CN22ContentQuantity is not None or
            self.CN22ContentDescription is not None or
            self.CN22ContentWeight is not None or
            self.CN22ContentTotalValue is not None or
            self.CN22ContentCurrencyCode is not None or
            self.CN22ContentCountryOfOrigin is not None or
            self.CN22ContentTariffNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='CN22ContentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CN22ContentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CN22ContentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CN22ContentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CN22ContentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='CN22ContentType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='CN22ContentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CN22ContentQuantity is not None:
            namespaceprefix_ = self.CN22ContentQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.CN22ContentQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCN22ContentQuantity>%s</%sCN22ContentQuantity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CN22ContentQuantity), input_name='CN22ContentQuantity')), namespaceprefix_ , eol_))
        if self.CN22ContentDescription is not None:
            namespaceprefix_ = self.CN22ContentDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.CN22ContentDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCN22ContentDescription>%s</%sCN22ContentDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CN22ContentDescription), input_name='CN22ContentDescription')), namespaceprefix_ , eol_))
        if self.CN22ContentWeight is not None:
            namespaceprefix_ = self.CN22ContentWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.CN22ContentWeight_nsprefix_) else ''
            self.CN22ContentWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CN22ContentWeight', pretty_print=pretty_print)
        if self.CN22ContentTotalValue is not None:
            namespaceprefix_ = self.CN22ContentTotalValue_nsprefix_ + ':' if (UseCapturedNS_ and self.CN22ContentTotalValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCN22ContentTotalValue>%s</%sCN22ContentTotalValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CN22ContentTotalValue), input_name='CN22ContentTotalValue')), namespaceprefix_ , eol_))
        if self.CN22ContentCurrencyCode is not None:
            namespaceprefix_ = self.CN22ContentCurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CN22ContentCurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCN22ContentCurrencyCode>%s</%sCN22ContentCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CN22ContentCurrencyCode), input_name='CN22ContentCurrencyCode')), namespaceprefix_ , eol_))
        if self.CN22ContentCountryOfOrigin is not None:
            namespaceprefix_ = self.CN22ContentCountryOfOrigin_nsprefix_ + ':' if (UseCapturedNS_ and self.CN22ContentCountryOfOrigin_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCN22ContentCountryOfOrigin>%s</%sCN22ContentCountryOfOrigin>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CN22ContentCountryOfOrigin), input_name='CN22ContentCountryOfOrigin')), namespaceprefix_ , eol_))
        if self.CN22ContentTariffNumber is not None:
            namespaceprefix_ = self.CN22ContentTariffNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.CN22ContentTariffNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCN22ContentTariffNumber>%s</%sCN22ContentTariffNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CN22ContentTariffNumber), input_name='CN22ContentTariffNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CN22ContentQuantity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CN22ContentQuantity')
            value_ = self.gds_validate_string(value_, node, 'CN22ContentQuantity')
            self.CN22ContentQuantity = value_
            self.CN22ContentQuantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'CN22ContentDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CN22ContentDescription')
            value_ = self.gds_validate_string(value_, node, 'CN22ContentDescription')
            self.CN22ContentDescription = value_
            self.CN22ContentDescription_nsprefix_ = child_.prefix
        elif nodeName_ == 'CN22ContentWeight':
            obj_ = ProductWeightType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CN22ContentWeight = obj_
            obj_.original_tagname_ = 'CN22ContentWeight'
        elif nodeName_ == 'CN22ContentTotalValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CN22ContentTotalValue')
            value_ = self.gds_validate_string(value_, node, 'CN22ContentTotalValue')
            self.CN22ContentTotalValue = value_
            self.CN22ContentTotalValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'CN22ContentCurrencyCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CN22ContentCurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'CN22ContentCurrencyCode')
            self.CN22ContentCurrencyCode = value_
            self.CN22ContentCurrencyCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'CN22ContentCountryOfOrigin':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CN22ContentCountryOfOrigin')
            value_ = self.gds_validate_string(value_, node, 'CN22ContentCountryOfOrigin')
            self.CN22ContentCountryOfOrigin = value_
            self.CN22ContentCountryOfOrigin_nsprefix_ = child_.prefix
        elif nodeName_ == 'CN22ContentTariffNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CN22ContentTariffNumber')
            value_ = self.gds_validate_string(value_, node, 'CN22ContentTariffNumber')
            self.CN22ContentTariffNumber = value_
            self.CN22ContentTariffNumber_nsprefix_ = child_.prefix
# end class CN22ContentType


class ContactType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ForwardAgent=None, UltimateConsignee=None, IntermediateConsignee=None, Producer=None, SoldTo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ForwardAgent = ForwardAgent
        self.ForwardAgent_nsprefix_ = None
        self.UltimateConsignee = UltimateConsignee
        self.UltimateConsignee_nsprefix_ = None
        self.IntermediateConsignee = IntermediateConsignee
        self.IntermediateConsignee_nsprefix_ = None
        self.Producer = Producer
        self.Producer_nsprefix_ = None
        self.SoldTo = SoldTo
        self.SoldTo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType.subclass:
            return ContactType.subclass(*args_, **kwargs_)
        else:
            return ContactType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ForwardAgent(self):
        return self.ForwardAgent
    def set_ForwardAgent(self, ForwardAgent):
        self.ForwardAgent = ForwardAgent
    def get_UltimateConsignee(self):
        return self.UltimateConsignee
    def set_UltimateConsignee(self, UltimateConsignee):
        self.UltimateConsignee = UltimateConsignee
    def get_IntermediateConsignee(self):
        return self.IntermediateConsignee
    def set_IntermediateConsignee(self, IntermediateConsignee):
        self.IntermediateConsignee = IntermediateConsignee
    def get_Producer(self):
        return self.Producer
    def set_Producer(self, Producer):
        self.Producer = Producer
    def get_SoldTo(self):
        return self.SoldTo
    def set_SoldTo(self, SoldTo):
        self.SoldTo = SoldTo
    def hasContent_(self):
        if (
            self.ForwardAgent is not None or
            self.UltimateConsignee is not None or
            self.IntermediateConsignee is not None or
            self.Producer is not None or
            self.SoldTo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ContactType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContactType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContactType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContactType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContactType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='ContactType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ContactType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ForwardAgent is not None:
            namespaceprefix_ = self.ForwardAgent_nsprefix_ + ':' if (UseCapturedNS_ and self.ForwardAgent_nsprefix_) else ''
            self.ForwardAgent.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ForwardAgent', pretty_print=pretty_print)
        if self.UltimateConsignee is not None:
            namespaceprefix_ = self.UltimateConsignee_nsprefix_ + ':' if (UseCapturedNS_ and self.UltimateConsignee_nsprefix_) else ''
            self.UltimateConsignee.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UltimateConsignee', pretty_print=pretty_print)
        if self.IntermediateConsignee is not None:
            namespaceprefix_ = self.IntermediateConsignee_nsprefix_ + ':' if (UseCapturedNS_ and self.IntermediateConsignee_nsprefix_) else ''
            self.IntermediateConsignee.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IntermediateConsignee', pretty_print=pretty_print)
        if self.Producer is not None:
            namespaceprefix_ = self.Producer_nsprefix_ + ':' if (UseCapturedNS_ and self.Producer_nsprefix_) else ''
            self.Producer.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Producer', pretty_print=pretty_print)
        if self.SoldTo is not None:
            namespaceprefix_ = self.SoldTo_nsprefix_ + ':' if (UseCapturedNS_ and self.SoldTo_nsprefix_) else ''
            self.SoldTo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SoldTo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ForwardAgent':
            obj_ = ForwardAgentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ForwardAgent = obj_
            obj_.original_tagname_ = 'ForwardAgent'
        elif nodeName_ == 'UltimateConsignee':
            obj_ = UltimateConsigneeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UltimateConsignee = obj_
            obj_.original_tagname_ = 'UltimateConsignee'
        elif nodeName_ == 'IntermediateConsignee':
            obj_ = IntermediateConsigneeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.IntermediateConsignee = obj_
            obj_.original_tagname_ = 'IntermediateConsignee'
        elif nodeName_ == 'Producer':
            obj_ = ProducerType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Producer = obj_
            obj_.original_tagname_ = 'Producer'
        elif nodeName_ == 'SoldTo':
            obj_ = SoldToType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SoldTo = obj_
            obj_.original_tagname_ = 'SoldTo'
# end class ContactType


class ForwardAgentType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CompanyName=None, TaxIdentificationNumber=None, Address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CompanyName = CompanyName
        self.CompanyName_nsprefix_ = None
        self.TaxIdentificationNumber = TaxIdentificationNumber
        self.TaxIdentificationNumber_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ForwardAgentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ForwardAgentType.subclass:
            return ForwardAgentType.subclass(*args_, **kwargs_)
        else:
            return ForwardAgentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CompanyName(self):
        return self.CompanyName
    def set_CompanyName(self, CompanyName):
        self.CompanyName = CompanyName
    def get_TaxIdentificationNumber(self):
        return self.TaxIdentificationNumber
    def set_TaxIdentificationNumber(self, TaxIdentificationNumber):
        self.TaxIdentificationNumber = TaxIdentificationNumber
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def hasContent_(self):
        if (
            self.CompanyName is not None or
            self.TaxIdentificationNumber is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ForwardAgentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ForwardAgentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ForwardAgentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ForwardAgentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ForwardAgentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='ForwardAgentType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ForwardAgentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CompanyName is not None:
            namespaceprefix_ = self.CompanyName_nsprefix_ + ':' if (UseCapturedNS_ and self.CompanyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompanyName>%s</%sCompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CompanyName), input_name='CompanyName')), namespaceprefix_ , eol_))
        if self.TaxIdentificationNumber is not None:
            namespaceprefix_ = self.TaxIdentificationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TaxIdentificationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxIdentificationNumber>%s</%sTaxIdentificationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TaxIdentificationNumber), input_name='TaxIdentificationNumber')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CompanyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CompanyName')
            value_ = self.gds_validate_string(value_, node, 'CompanyName')
            self.CompanyName = value_
            self.CompanyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'TaxIdentificationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TaxIdentificationNumber')
            value_ = self.gds_validate_string(value_, node, 'TaxIdentificationNumber')
            self.TaxIdentificationNumber = value_
            self.TaxIdentificationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class ForwardAgentType


class AddressType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AddressLine=None, City=None, StateProvinceCode=None, Town=None, PostalCode=None, CountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if AddressLine is None:
            self.AddressLine = []
        else:
            self.AddressLine = AddressLine
        self.AddressLine_nsprefix_ = None
        self.City = City
        self.City_nsprefix_ = None
        self.StateProvinceCode = StateProvinceCode
        self.StateProvinceCode_nsprefix_ = None
        self.Town = Town
        self.Town_nsprefix_ = None
        self.PostalCode = PostalCode
        self.PostalCode_nsprefix_ = None
        self.CountryCode = CountryCode
        self.CountryCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType.subclass:
            return AddressType.subclass(*args_, **kwargs_)
        else:
            return AddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AddressLine(self):
        return self.AddressLine
    def set_AddressLine(self, AddressLine):
        self.AddressLine = AddressLine
    def add_AddressLine(self, value):
        self.AddressLine.append(value)
    def insert_AddressLine_at(self, index, value):
        self.AddressLine.insert(index, value)
    def replace_AddressLine_at(self, index, value):
        self.AddressLine[index] = value
    def get_City(self):
        return self.City
    def set_City(self, City):
        self.City = City
    def get_StateProvinceCode(self):
        return self.StateProvinceCode
    def set_StateProvinceCode(self, StateProvinceCode):
        self.StateProvinceCode = StateProvinceCode
    def get_Town(self):
        return self.Town
    def set_Town(self, Town):
        self.Town = Town
    def get_PostalCode(self):
        return self.PostalCode
    def set_PostalCode(self, PostalCode):
        self.PostalCode = PostalCode
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def hasContent_(self):
        if (
            self.AddressLine or
            self.City is not None or
            self.StateProvinceCode is not None or
            self.Town is not None or
            self.PostalCode is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='AddressType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AddressType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='AddressType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='AddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AddressLine_ in self.AddressLine:
            namespaceprefix_ = self.AddressLine_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressLine_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressLine>%s</%sAddressLine>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(AddressLine_), input_name='AddressLine')), namespaceprefix_ , eol_))
        if self.City is not None:
            namespaceprefix_ = self.City_nsprefix_ + ':' if (UseCapturedNS_ and self.City_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCity>%s</%sCity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), namespaceprefix_ , eol_))
        if self.StateProvinceCode is not None:
            namespaceprefix_ = self.StateProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.StateProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStateProvinceCode>%s</%sStateProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StateProvinceCode), input_name='StateProvinceCode')), namespaceprefix_ , eol_))
        if self.Town is not None:
            namespaceprefix_ = self.Town_nsprefix_ + ':' if (UseCapturedNS_ and self.Town_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTown>%s</%sTown>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Town), input_name='Town')), namespaceprefix_ , eol_))
        if self.PostalCode is not None:
            namespaceprefix_ = self.PostalCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PostalCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AddressLine':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AddressLine')
            value_ = self.gds_validate_string(value_, node, 'AddressLine')
            self.AddressLine.append(value_)
            self.AddressLine_nsprefix_ = child_.prefix
        elif nodeName_ == 'City':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'City')
            value_ = self.gds_validate_string(value_, node, 'City')
            self.City = value_
            self.City_nsprefix_ = child_.prefix
        elif nodeName_ == 'StateProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StateProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'StateProvinceCode')
            self.StateProvinceCode = value_
            self.StateProvinceCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'Town':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Town')
            value_ = self.gds_validate_string(value_, node, 'Town')
            self.Town = value_
            self.Town_nsprefix_ = child_.prefix
        elif nodeName_ == 'PostalCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PostalCode')
            value_ = self.gds_validate_string(value_, node, 'PostalCode')
            self.PostalCode = value_
            self.PostalCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
# end class AddressType


class UltimateConsigneeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CompanyName=None, Address=None, UltimateConsigneeType_member=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CompanyName = CompanyName
        self.CompanyName_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
        self.UltimateConsigneeType = UltimateConsigneeType_member
        self.UltimateConsigneeType_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UltimateConsigneeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UltimateConsigneeType.subclass:
            return UltimateConsigneeType.subclass(*args_, **kwargs_)
        else:
            return UltimateConsigneeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CompanyName(self):
        return self.CompanyName
    def set_CompanyName(self, CompanyName):
        self.CompanyName = CompanyName
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def get_UltimateConsigneeType(self):
        return self.UltimateConsigneeType
    def set_UltimateConsigneeType(self, UltimateConsigneeType):
        self.UltimateConsigneeType = UltimateConsigneeType
    def hasContent_(self):
        if (
            self.CompanyName is not None or
            self.Address is not None or
            self.UltimateConsigneeType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='UltimateConsigneeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UltimateConsigneeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UltimateConsigneeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UltimateConsigneeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UltimateConsigneeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='UltimateConsigneeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='UltimateConsigneeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CompanyName is not None:
            namespaceprefix_ = self.CompanyName_nsprefix_ + ':' if (UseCapturedNS_ and self.CompanyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompanyName>%s</%sCompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CompanyName), input_name='CompanyName')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
        if self.UltimateConsigneeType is not None:
            namespaceprefix_ = self.UltimateConsigneeType_nsprefix_ + ':' if (UseCapturedNS_ and self.UltimateConsigneeType_nsprefix_) else ''
            self.UltimateConsigneeType.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UltimateConsigneeType', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CompanyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CompanyName')
            value_ = self.gds_validate_string(value_, node, 'CompanyName')
            self.CompanyName = value_
            self.CompanyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'UltimateConsigneeType':
            obj_ = UltimateConsigneeTypeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UltimateConsigneeType = obj_
            obj_.original_tagname_ = 'UltimateConsigneeType'
# end class UltimateConsigneeType


class IntermediateConsigneeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CompanyName=None, Address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CompanyName = CompanyName
        self.CompanyName_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IntermediateConsigneeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IntermediateConsigneeType.subclass:
            return IntermediateConsigneeType.subclass(*args_, **kwargs_)
        else:
            return IntermediateConsigneeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CompanyName(self):
        return self.CompanyName
    def set_CompanyName(self, CompanyName):
        self.CompanyName = CompanyName
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def hasContent_(self):
        if (
            self.CompanyName is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='IntermediateConsigneeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IntermediateConsigneeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'IntermediateConsigneeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IntermediateConsigneeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IntermediateConsigneeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='IntermediateConsigneeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='IntermediateConsigneeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CompanyName is not None:
            namespaceprefix_ = self.CompanyName_nsprefix_ + ':' if (UseCapturedNS_ and self.CompanyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompanyName>%s</%sCompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CompanyName), input_name='CompanyName')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CompanyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CompanyName')
            value_ = self.gds_validate_string(value_, node, 'CompanyName')
            self.CompanyName = value_
            self.CompanyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class IntermediateConsigneeType


class ProducerType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Option=None, CompanyName=None, TaxIdentificationNumber=None, Address=None, AttentionName=None, Phone=None, EMailAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Option = Option
        self.Option_nsprefix_ = None
        self.CompanyName = CompanyName
        self.CompanyName_nsprefix_ = None
        self.TaxIdentificationNumber = TaxIdentificationNumber
        self.TaxIdentificationNumber_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
        self.AttentionName = AttentionName
        self.AttentionName_nsprefix_ = None
        self.Phone = Phone
        self.Phone_nsprefix_ = None
        self.EMailAddress = EMailAddress
        self.EMailAddress_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProducerType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProducerType.subclass:
            return ProducerType.subclass(*args_, **kwargs_)
        else:
            return ProducerType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Option(self):
        return self.Option
    def set_Option(self, Option):
        self.Option = Option
    def get_CompanyName(self):
        return self.CompanyName
    def set_CompanyName(self, CompanyName):
        self.CompanyName = CompanyName
    def get_TaxIdentificationNumber(self):
        return self.TaxIdentificationNumber
    def set_TaxIdentificationNumber(self, TaxIdentificationNumber):
        self.TaxIdentificationNumber = TaxIdentificationNumber
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def get_AttentionName(self):
        return self.AttentionName
    def set_AttentionName(self, AttentionName):
        self.AttentionName = AttentionName
    def get_Phone(self):
        return self.Phone
    def set_Phone(self, Phone):
        self.Phone = Phone
    def get_EMailAddress(self):
        return self.EMailAddress
    def set_EMailAddress(self, EMailAddress):
        self.EMailAddress = EMailAddress
    def hasContent_(self):
        if (
            self.Option is not None or
            self.CompanyName is not None or
            self.TaxIdentificationNumber is not None or
            self.Address is not None or
            self.AttentionName is not None or
            self.Phone is not None or
            self.EMailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ProducerType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProducerType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProducerType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProducerType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProducerType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='ProducerType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ProducerType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Option is not None:
            namespaceprefix_ = self.Option_nsprefix_ + ':' if (UseCapturedNS_ and self.Option_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOption>%s</%sOption>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Option), input_name='Option')), namespaceprefix_ , eol_))
        if self.CompanyName is not None:
            namespaceprefix_ = self.CompanyName_nsprefix_ + ':' if (UseCapturedNS_ and self.CompanyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompanyName>%s</%sCompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CompanyName), input_name='CompanyName')), namespaceprefix_ , eol_))
        if self.TaxIdentificationNumber is not None:
            namespaceprefix_ = self.TaxIdentificationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TaxIdentificationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxIdentificationNumber>%s</%sTaxIdentificationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TaxIdentificationNumber), input_name='TaxIdentificationNumber')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
        if self.AttentionName is not None:
            namespaceprefix_ = self.AttentionName_nsprefix_ + ':' if (UseCapturedNS_ and self.AttentionName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttentionName>%s</%sAttentionName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), namespaceprefix_ , eol_))
        if self.Phone is not None:
            namespaceprefix_ = self.Phone_nsprefix_ + ':' if (UseCapturedNS_ and self.Phone_nsprefix_) else ''
            self.Phone.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Phone', pretty_print=pretty_print)
        if self.EMailAddress is not None:
            namespaceprefix_ = self.EMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Option':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Option')
            value_ = self.gds_validate_string(value_, node, 'Option')
            self.Option = value_
            self.Option_nsprefix_ = child_.prefix
        elif nodeName_ == 'CompanyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CompanyName')
            value_ = self.gds_validate_string(value_, node, 'CompanyName')
            self.CompanyName = value_
            self.CompanyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'TaxIdentificationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TaxIdentificationNumber')
            value_ = self.gds_validate_string(value_, node, 'TaxIdentificationNumber')
            self.TaxIdentificationNumber = value_
            self.TaxIdentificationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'AttentionName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AttentionName')
            value_ = self.gds_validate_string(value_, node, 'AttentionName')
            self.AttentionName = value_
            self.AttentionName_nsprefix_ = child_.prefix
        elif nodeName_ == 'Phone':
            obj_ = PhoneType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Phone = obj_
            obj_.original_tagname_ = 'Phone'
        elif nodeName_ == 'EMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EMailAddress')
            value_ = self.gds_validate_string(value_, node, 'EMailAddress')
            self.EMailAddress = value_
            self.EMailAddress_nsprefix_ = child_.prefix
# end class ProducerType


class ProductType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Description=None, Unit=None, CommodityCode=None, PartNumber=None, OriginCountryCode=None, JointProductionIndicator=None, NetCostCode=None, NetCostDateRange=None, PreferenceCriteria=None, ProducerInfo=None, MarksAndNumbers=None, NumberOfPackagesPerCommodity=None, ProductWeight=None, VehicleID=None, ScheduleB=None, ExportType=None, SEDTotalValue=None, ExcludeFromForm=None, ProductCurrencyCode=None, PackingListInfo=None, EEIInformation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Description is None:
            self.Description = []
        else:
            self.Description = Description
        self.Description_nsprefix_ = None
        self.Unit = Unit
        self.Unit_nsprefix_ = None
        self.CommodityCode = CommodityCode
        self.CommodityCode_nsprefix_ = None
        self.PartNumber = PartNumber
        self.PartNumber_nsprefix_ = None
        self.OriginCountryCode = OriginCountryCode
        self.OriginCountryCode_nsprefix_ = None
        self.JointProductionIndicator = JointProductionIndicator
        self.JointProductionIndicator_nsprefix_ = None
        self.NetCostCode = NetCostCode
        self.NetCostCode_nsprefix_ = None
        self.NetCostDateRange = NetCostDateRange
        self.NetCostDateRange_nsprefix_ = None
        self.PreferenceCriteria = PreferenceCriteria
        self.PreferenceCriteria_nsprefix_ = None
        self.ProducerInfo = ProducerInfo
        self.ProducerInfo_nsprefix_ = None
        self.MarksAndNumbers = MarksAndNumbers
        self.MarksAndNumbers_nsprefix_ = None
        self.NumberOfPackagesPerCommodity = NumberOfPackagesPerCommodity
        self.NumberOfPackagesPerCommodity_nsprefix_ = None
        self.ProductWeight = ProductWeight
        self.ProductWeight_nsprefix_ = None
        self.VehicleID = VehicleID
        self.VehicleID_nsprefix_ = None
        self.ScheduleB = ScheduleB
        self.ScheduleB_nsprefix_ = None
        self.ExportType = ExportType
        self.ExportType_nsprefix_ = None
        self.SEDTotalValue = SEDTotalValue
        self.SEDTotalValue_nsprefix_ = None
        self.ExcludeFromForm = ExcludeFromForm
        self.ExcludeFromForm_nsprefix_ = None
        self.ProductCurrencyCode = ProductCurrencyCode
        self.ProductCurrencyCode_nsprefix_ = None
        self.PackingListInfo = PackingListInfo
        self.PackingListInfo_nsprefix_ = None
        self.EEIInformation = EEIInformation
        self.EEIInformation_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductType.subclass:
            return ProductType.subclass(*args_, **kwargs_)
        else:
            return ProductType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def add_Description(self, value):
        self.Description.append(value)
    def insert_Description_at(self, index, value):
        self.Description.insert(index, value)
    def replace_Description_at(self, index, value):
        self.Description[index] = value
    def get_Unit(self):
        return self.Unit
    def set_Unit(self, Unit):
        self.Unit = Unit
    def get_CommodityCode(self):
        return self.CommodityCode
    def set_CommodityCode(self, CommodityCode):
        self.CommodityCode = CommodityCode
    def get_PartNumber(self):
        return self.PartNumber
    def set_PartNumber(self, PartNumber):
        self.PartNumber = PartNumber
    def get_OriginCountryCode(self):
        return self.OriginCountryCode
    def set_OriginCountryCode(self, OriginCountryCode):
        self.OriginCountryCode = OriginCountryCode
    def get_JointProductionIndicator(self):
        return self.JointProductionIndicator
    def set_JointProductionIndicator(self, JointProductionIndicator):
        self.JointProductionIndicator = JointProductionIndicator
    def get_NetCostCode(self):
        return self.NetCostCode
    def set_NetCostCode(self, NetCostCode):
        self.NetCostCode = NetCostCode
    def get_NetCostDateRange(self):
        return self.NetCostDateRange
    def set_NetCostDateRange(self, NetCostDateRange):
        self.NetCostDateRange = NetCostDateRange
    def get_PreferenceCriteria(self):
        return self.PreferenceCriteria
    def set_PreferenceCriteria(self, PreferenceCriteria):
        self.PreferenceCriteria = PreferenceCriteria
    def get_ProducerInfo(self):
        return self.ProducerInfo
    def set_ProducerInfo(self, ProducerInfo):
        self.ProducerInfo = ProducerInfo
    def get_MarksAndNumbers(self):
        return self.MarksAndNumbers
    def set_MarksAndNumbers(self, MarksAndNumbers):
        self.MarksAndNumbers = MarksAndNumbers
    def get_NumberOfPackagesPerCommodity(self):
        return self.NumberOfPackagesPerCommodity
    def set_NumberOfPackagesPerCommodity(self, NumberOfPackagesPerCommodity):
        self.NumberOfPackagesPerCommodity = NumberOfPackagesPerCommodity
    def get_ProductWeight(self):
        return self.ProductWeight
    def set_ProductWeight(self, ProductWeight):
        self.ProductWeight = ProductWeight
    def get_VehicleID(self):
        return self.VehicleID
    def set_VehicleID(self, VehicleID):
        self.VehicleID = VehicleID
    def get_ScheduleB(self):
        return self.ScheduleB
    def set_ScheduleB(self, ScheduleB):
        self.ScheduleB = ScheduleB
    def get_ExportType(self):
        return self.ExportType
    def set_ExportType(self, ExportType):
        self.ExportType = ExportType
    def get_SEDTotalValue(self):
        return self.SEDTotalValue
    def set_SEDTotalValue(self, SEDTotalValue):
        self.SEDTotalValue = SEDTotalValue
    def get_ExcludeFromForm(self):
        return self.ExcludeFromForm
    def set_ExcludeFromForm(self, ExcludeFromForm):
        self.ExcludeFromForm = ExcludeFromForm
    def get_ProductCurrencyCode(self):
        return self.ProductCurrencyCode
    def set_ProductCurrencyCode(self, ProductCurrencyCode):
        self.ProductCurrencyCode = ProductCurrencyCode
    def get_PackingListInfo(self):
        return self.PackingListInfo
    def set_PackingListInfo(self, PackingListInfo):
        self.PackingListInfo = PackingListInfo
    def get_EEIInformation(self):
        return self.EEIInformation
    def set_EEIInformation(self, EEIInformation):
        self.EEIInformation = EEIInformation
    def hasContent_(self):
        if (
            self.Description or
            self.Unit is not None or
            self.CommodityCode is not None or
            self.PartNumber is not None or
            self.OriginCountryCode is not None or
            self.JointProductionIndicator is not None or
            self.NetCostCode is not None or
            self.NetCostDateRange is not None or
            self.PreferenceCriteria is not None or
            self.ProducerInfo is not None or
            self.MarksAndNumbers is not None or
            self.NumberOfPackagesPerCommodity is not None or
            self.ProductWeight is not None or
            self.VehicleID is not None or
            self.ScheduleB is not None or
            self.ExportType is not None or
            self.SEDTotalValue is not None or
            self.ExcludeFromForm is not None or
            self.ProductCurrencyCode is not None or
            self.PackingListInfo is not None or
            self.EEIInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ProductType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='ProductType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ProductType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Description_ in self.Description:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Description_), input_name='Description')), namespaceprefix_ , eol_))
        if self.Unit is not None:
            namespaceprefix_ = self.Unit_nsprefix_ + ':' if (UseCapturedNS_ and self.Unit_nsprefix_) else ''
            self.Unit.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Unit', pretty_print=pretty_print)
        if self.CommodityCode is not None:
            namespaceprefix_ = self.CommodityCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CommodityCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommodityCode>%s</%sCommodityCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CommodityCode), input_name='CommodityCode')), namespaceprefix_ , eol_))
        if self.PartNumber is not None:
            namespaceprefix_ = self.PartNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PartNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPartNumber>%s</%sPartNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PartNumber), input_name='PartNumber')), namespaceprefix_ , eol_))
        if self.OriginCountryCode is not None:
            namespaceprefix_ = self.OriginCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginCountryCode>%s</%sOriginCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OriginCountryCode), input_name='OriginCountryCode')), namespaceprefix_ , eol_))
        if self.JointProductionIndicator is not None:
            namespaceprefix_ = self.JointProductionIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.JointProductionIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJointProductionIndicator>%s</%sJointProductionIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.JointProductionIndicator), input_name='JointProductionIndicator')), namespaceprefix_ , eol_))
        if self.NetCostCode is not None:
            namespaceprefix_ = self.NetCostCode_nsprefix_ + ':' if (UseCapturedNS_ and self.NetCostCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNetCostCode>%s</%sNetCostCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NetCostCode), input_name='NetCostCode')), namespaceprefix_ , eol_))
        if self.NetCostDateRange is not None:
            namespaceprefix_ = self.NetCostDateRange_nsprefix_ + ':' if (UseCapturedNS_ and self.NetCostDateRange_nsprefix_) else ''
            self.NetCostDateRange.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NetCostDateRange', pretty_print=pretty_print)
        if self.PreferenceCriteria is not None:
            namespaceprefix_ = self.PreferenceCriteria_nsprefix_ + ':' if (UseCapturedNS_ and self.PreferenceCriteria_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPreferenceCriteria>%s</%sPreferenceCriteria>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PreferenceCriteria), input_name='PreferenceCriteria')), namespaceprefix_ , eol_))
        if self.ProducerInfo is not None:
            namespaceprefix_ = self.ProducerInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.ProducerInfo_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProducerInfo>%s</%sProducerInfo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProducerInfo), input_name='ProducerInfo')), namespaceprefix_ , eol_))
        if self.MarksAndNumbers is not None:
            namespaceprefix_ = self.MarksAndNumbers_nsprefix_ + ':' if (UseCapturedNS_ and self.MarksAndNumbers_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarksAndNumbers>%s</%sMarksAndNumbers>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarksAndNumbers), input_name='MarksAndNumbers')), namespaceprefix_ , eol_))
        if self.NumberOfPackagesPerCommodity is not None:
            namespaceprefix_ = self.NumberOfPackagesPerCommodity_nsprefix_ + ':' if (UseCapturedNS_ and self.NumberOfPackagesPerCommodity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfPackagesPerCommodity>%s</%sNumberOfPackagesPerCommodity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NumberOfPackagesPerCommodity), input_name='NumberOfPackagesPerCommodity')), namespaceprefix_ , eol_))
        if self.ProductWeight is not None:
            namespaceprefix_ = self.ProductWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductWeight_nsprefix_) else ''
            self.ProductWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ProductWeight', pretty_print=pretty_print)
        if self.VehicleID is not None:
            namespaceprefix_ = self.VehicleID_nsprefix_ + ':' if (UseCapturedNS_ and self.VehicleID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVehicleID>%s</%sVehicleID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.VehicleID), input_name='VehicleID')), namespaceprefix_ , eol_))
        if self.ScheduleB is not None:
            namespaceprefix_ = self.ScheduleB_nsprefix_ + ':' if (UseCapturedNS_ and self.ScheduleB_nsprefix_) else ''
            self.ScheduleB.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ScheduleB', pretty_print=pretty_print)
        if self.ExportType is not None:
            namespaceprefix_ = self.ExportType_nsprefix_ + ':' if (UseCapturedNS_ and self.ExportType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExportType>%s</%sExportType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExportType), input_name='ExportType')), namespaceprefix_ , eol_))
        if self.SEDTotalValue is not None:
            namespaceprefix_ = self.SEDTotalValue_nsprefix_ + ':' if (UseCapturedNS_ and self.SEDTotalValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSEDTotalValue>%s</%sSEDTotalValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SEDTotalValue), input_name='SEDTotalValue')), namespaceprefix_ , eol_))
        if self.ExcludeFromForm is not None:
            namespaceprefix_ = self.ExcludeFromForm_nsprefix_ + ':' if (UseCapturedNS_ and self.ExcludeFromForm_nsprefix_) else ''
            self.ExcludeFromForm.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExcludeFromForm', pretty_print=pretty_print)
        if self.ProductCurrencyCode is not None:
            namespaceprefix_ = self.ProductCurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductCurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductCurrencyCode>%s</%sProductCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProductCurrencyCode), input_name='ProductCurrencyCode')), namespaceprefix_ , eol_))
        if self.PackingListInfo is not None:
            namespaceprefix_ = self.PackingListInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.PackingListInfo_nsprefix_) else ''
            self.PackingListInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackingListInfo', pretty_print=pretty_print)
        if self.EEIInformation is not None:
            namespaceprefix_ = self.EEIInformation_nsprefix_ + ':' if (UseCapturedNS_ and self.EEIInformation_nsprefix_) else ''
            self.EEIInformation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EEIInformation', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description.append(value_)
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'Unit':
            obj_ = UnitType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Unit = obj_
            obj_.original_tagname_ = 'Unit'
        elif nodeName_ == 'CommodityCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CommodityCode')
            value_ = self.gds_validate_string(value_, node, 'CommodityCode')
            self.CommodityCode = value_
            self.CommodityCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'PartNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PartNumber')
            value_ = self.gds_validate_string(value_, node, 'PartNumber')
            self.PartNumber = value_
            self.PartNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'OriginCountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OriginCountryCode')
            value_ = self.gds_validate_string(value_, node, 'OriginCountryCode')
            self.OriginCountryCode = value_
            self.OriginCountryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'JointProductionIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'JointProductionIndicator')
            value_ = self.gds_validate_string(value_, node, 'JointProductionIndicator')
            self.JointProductionIndicator = value_
            self.JointProductionIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'NetCostCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NetCostCode')
            value_ = self.gds_validate_string(value_, node, 'NetCostCode')
            self.NetCostCode = value_
            self.NetCostCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'NetCostDateRange':
            obj_ = NetCostDateType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NetCostDateRange = obj_
            obj_.original_tagname_ = 'NetCostDateRange'
        elif nodeName_ == 'PreferenceCriteria':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PreferenceCriteria')
            value_ = self.gds_validate_string(value_, node, 'PreferenceCriteria')
            self.PreferenceCriteria = value_
            self.PreferenceCriteria_nsprefix_ = child_.prefix
        elif nodeName_ == 'ProducerInfo':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProducerInfo')
            value_ = self.gds_validate_string(value_, node, 'ProducerInfo')
            self.ProducerInfo = value_
            self.ProducerInfo_nsprefix_ = child_.prefix
        elif nodeName_ == 'MarksAndNumbers':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MarksAndNumbers')
            value_ = self.gds_validate_string(value_, node, 'MarksAndNumbers')
            self.MarksAndNumbers = value_
            self.MarksAndNumbers_nsprefix_ = child_.prefix
        elif nodeName_ == 'NumberOfPackagesPerCommodity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NumberOfPackagesPerCommodity')
            value_ = self.gds_validate_string(value_, node, 'NumberOfPackagesPerCommodity')
            self.NumberOfPackagesPerCommodity = value_
            self.NumberOfPackagesPerCommodity_nsprefix_ = child_.prefix
        elif nodeName_ == 'ProductWeight':
            obj_ = ProductWeightType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ProductWeight = obj_
            obj_.original_tagname_ = 'ProductWeight'
        elif nodeName_ == 'VehicleID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'VehicleID')
            value_ = self.gds_validate_string(value_, node, 'VehicleID')
            self.VehicleID = value_
            self.VehicleID_nsprefix_ = child_.prefix
        elif nodeName_ == 'ScheduleB':
            obj_ = ScheduleBType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ScheduleB = obj_
            obj_.original_tagname_ = 'ScheduleB'
        elif nodeName_ == 'ExportType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExportType')
            value_ = self.gds_validate_string(value_, node, 'ExportType')
            self.ExportType = value_
            self.ExportType_nsprefix_ = child_.prefix
        elif nodeName_ == 'SEDTotalValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SEDTotalValue')
            value_ = self.gds_validate_string(value_, node, 'SEDTotalValue')
            self.SEDTotalValue = value_
            self.SEDTotalValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'ExcludeFromForm':
            obj_ = ExcludeFromFormType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExcludeFromForm = obj_
            obj_.original_tagname_ = 'ExcludeFromForm'
        elif nodeName_ == 'ProductCurrencyCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProductCurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'ProductCurrencyCode')
            self.ProductCurrencyCode = value_
            self.ProductCurrencyCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'PackingListInfo':
            obj_ = PackingListInfoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackingListInfo = obj_
            obj_.original_tagname_ = 'PackingListInfo'
        elif nodeName_ == 'EEIInformation':
            obj_ = EEIInformationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EEIInformation = obj_
            obj_.original_tagname_ = 'EEIInformation'
# end class ProductType


class ExcludeFromFormType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FormType=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if FormType is None:
            self.FormType = []
        else:
            self.FormType = FormType
        self.FormType_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExcludeFromFormType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExcludeFromFormType.subclass:
            return ExcludeFromFormType.subclass(*args_, **kwargs_)
        else:
            return ExcludeFromFormType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FormType(self):
        return self.FormType
    def set_FormType(self, FormType):
        self.FormType = FormType
    def add_FormType(self, value):
        self.FormType.append(value)
    def insert_FormType_at(self, index, value):
        self.FormType.insert(index, value)
    def replace_FormType_at(self, index, value):
        self.FormType[index] = value
    def hasContent_(self):
        if (
            self.FormType
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ExcludeFromFormType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExcludeFromFormType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ExcludeFromFormType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ExcludeFromFormType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ExcludeFromFormType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='ExcludeFromFormType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ExcludeFromFormType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for FormType_ in self.FormType:
            namespaceprefix_ = self.FormType_nsprefix_ + ':' if (UseCapturedNS_ and self.FormType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormType>%s</%sFormType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(FormType_), input_name='FormType')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FormType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FormType')
            value_ = self.gds_validate_string(value_, node, 'FormType')
            self.FormType.append(value_)
            self.FormType_nsprefix_ = child_.prefix
# end class ExcludeFromFormType


class UnitType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Number=None, UnitOfMeasurement=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Number = Number
        self.Number_nsprefix_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.UnitOfMeasurement_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UnitType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UnitType.subclass:
            return UnitType.subclass(*args_, **kwargs_)
        else:
            return UnitType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_UnitOfMeasurement(self):
        return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement):
        self.UnitOfMeasurement = UnitOfMeasurement
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def hasContent_(self):
        if (
            self.Number is not None or
            self.UnitOfMeasurement is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='UnitType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UnitType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UnitType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UnitType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UnitType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='UnitType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='UnitType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
        if self.UnitOfMeasurement is not None:
            namespaceprefix_ = self.UnitOfMeasurement_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitOfMeasurement_nsprefix_) else ''
            self.UnitOfMeasurement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = UnitOfMeasurementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
# end class UnitType


class PackingListInfoType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PackageAssociated=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if PackageAssociated is None:
            self.PackageAssociated = []
        else:
            self.PackageAssociated = PackageAssociated
        self.PackageAssociated_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackingListInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackingListInfoType.subclass:
            return PackingListInfoType.subclass(*args_, **kwargs_)
        else:
            return PackingListInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PackageAssociated(self):
        return self.PackageAssociated
    def set_PackageAssociated(self, PackageAssociated):
        self.PackageAssociated = PackageAssociated
    def add_PackageAssociated(self, value):
        self.PackageAssociated.append(value)
    def insert_PackageAssociated_at(self, index, value):
        self.PackageAssociated.insert(index, value)
    def replace_PackageAssociated_at(self, index, value):
        self.PackageAssociated[index] = value
    def hasContent_(self):
        if (
            self.PackageAssociated
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='PackingListInfoType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackingListInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackingListInfoType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackingListInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackingListInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='PackingListInfoType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='PackingListInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for PackageAssociated_ in self.PackageAssociated:
            namespaceprefix_ = self.PackageAssociated_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageAssociated_nsprefix_) else ''
            PackageAssociated_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackageAssociated', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PackageAssociated':
            obj_ = PackageAssociatedType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackageAssociated.append(obj_)
            obj_.original_tagname_ = 'PackageAssociated'
# end class PackingListInfoType


class PackageAssociatedType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PackageNumber=None, ProductAmount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PackageNumber = PackageNumber
        self.PackageNumber_nsprefix_ = None
        self.ProductAmount = ProductAmount
        self.ProductAmount_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageAssociatedType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageAssociatedType.subclass:
            return PackageAssociatedType.subclass(*args_, **kwargs_)
        else:
            return PackageAssociatedType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PackageNumber(self):
        return self.PackageNumber
    def set_PackageNumber(self, PackageNumber):
        self.PackageNumber = PackageNumber
    def get_ProductAmount(self):
        return self.ProductAmount
    def set_ProductAmount(self, ProductAmount):
        self.ProductAmount = ProductAmount
    def hasContent_(self):
        if (
            self.PackageNumber is not None or
            self.ProductAmount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='PackageAssociatedType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageAssociatedType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackageAssociatedType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackageAssociatedType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackageAssociatedType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='PackageAssociatedType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='PackageAssociatedType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackageNumber is not None:
            namespaceprefix_ = self.PackageNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackageNumber>%s</%sPackageNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PackageNumber), input_name='PackageNumber')), namespaceprefix_ , eol_))
        if self.ProductAmount is not None:
            namespaceprefix_ = self.ProductAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductAmount>%s</%sProductAmount>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProductAmount), input_name='ProductAmount')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PackageNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackageNumber')
            value_ = self.gds_validate_string(value_, node, 'PackageNumber')
            self.PackageNumber = value_
            self.PackageNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ProductAmount':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProductAmount')
            value_ = self.gds_validate_string(value_, node, 'ProductAmount')
            self.ProductAmount = value_
            self.ProductAmount_nsprefix_ = child_.prefix
# end class PackageAssociatedType


class UnitOfMeasurementType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UnitOfMeasurementType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UnitOfMeasurementType.subclass:
            return UnitOfMeasurementType.subclass(*args_, **kwargs_)
        else:
            return UnitOfMeasurementType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='UnitOfMeasurementType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UnitOfMeasurementType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UnitOfMeasurementType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UnitOfMeasurementType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UnitOfMeasurementType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='UnitOfMeasurementType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='UnitOfMeasurementType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class UnitOfMeasurementType


class NetCostDateType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, BeginDate=None, EndDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.BeginDate = BeginDate
        self.BeginDate_nsprefix_ = None
        self.EndDate = EndDate
        self.EndDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NetCostDateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NetCostDateType.subclass:
            return NetCostDateType.subclass(*args_, **kwargs_)
        else:
            return NetCostDateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_BeginDate(self):
        return self.BeginDate
    def set_BeginDate(self, BeginDate):
        self.BeginDate = BeginDate
    def get_EndDate(self):
        return self.EndDate
    def set_EndDate(self, EndDate):
        self.EndDate = EndDate
    def hasContent_(self):
        if (
            self.BeginDate is not None or
            self.EndDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='NetCostDateType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NetCostDateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NetCostDateType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NetCostDateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NetCostDateType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='NetCostDateType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='NetCostDateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BeginDate is not None:
            namespaceprefix_ = self.BeginDate_nsprefix_ + ':' if (UseCapturedNS_ and self.BeginDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBeginDate>%s</%sBeginDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BeginDate), input_name='BeginDate')), namespaceprefix_ , eol_))
        if self.EndDate is not None:
            namespaceprefix_ = self.EndDate_nsprefix_ + ':' if (UseCapturedNS_ and self.EndDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEndDate>%s</%sEndDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EndDate), input_name='EndDate')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'BeginDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BeginDate')
            value_ = self.gds_validate_string(value_, node, 'BeginDate')
            self.BeginDate = value_
            self.BeginDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'EndDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EndDate')
            value_ = self.gds_validate_string(value_, node, 'EndDate')
            self.EndDate = value_
            self.EndDate_nsprefix_ = child_.prefix
# end class NetCostDateType


class ProductWeightType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Weight=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.UnitOfMeasurement_nsprefix_ = None
        self.Weight = Weight
        self.Weight_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductWeightType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductWeightType.subclass:
            return ProductWeightType.subclass(*args_, **kwargs_)
        else:
            return ProductWeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UnitOfMeasurement(self):
        return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement):
        self.UnitOfMeasurement = UnitOfMeasurement
    def get_Weight(self):
        return self.Weight
    def set_Weight(self, Weight):
        self.Weight = Weight
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ProductWeightType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductWeightType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductWeightType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductWeightType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductWeightType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='ProductWeightType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ProductWeightType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitOfMeasurement is not None:
            namespaceprefix_ = self.UnitOfMeasurement_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitOfMeasurement_nsprefix_) else ''
            self.UnitOfMeasurement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.Weight is not None:
            namespaceprefix_ = self.Weight_nsprefix_ + ':' if (UseCapturedNS_ and self.Weight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeight>%s</%sWeight>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Weight), input_name='Weight')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = UnitOfMeasurementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'Weight':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Weight')
            value_ = self.gds_validate_string(value_, node, 'Weight')
            self.Weight = value_
            self.Weight_nsprefix_ = child_.prefix
# end class ProductWeightType


class ScheduleBType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Number=None, Quantity=None, UnitOfMeasurement=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Number = Number
        self.Number_nsprefix_ = None
        if Quantity is None:
            self.Quantity = []
        else:
            self.Quantity = Quantity
        self.Quantity_nsprefix_ = None
        if UnitOfMeasurement is None:
            self.UnitOfMeasurement = []
        else:
            self.UnitOfMeasurement = UnitOfMeasurement
        self.UnitOfMeasurement_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ScheduleBType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ScheduleBType.subclass:
            return ScheduleBType.subclass(*args_, **kwargs_)
        else:
            return ScheduleBType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def add_Quantity(self, value):
        self.Quantity.append(value)
    def insert_Quantity_at(self, index, value):
        self.Quantity.insert(index, value)
    def replace_Quantity_at(self, index, value):
        self.Quantity[index] = value
    def get_UnitOfMeasurement(self):
        return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement):
        self.UnitOfMeasurement = UnitOfMeasurement
    def add_UnitOfMeasurement(self, value):
        self.UnitOfMeasurement.append(value)
    def insert_UnitOfMeasurement_at(self, index, value):
        self.UnitOfMeasurement.insert(index, value)
    def replace_UnitOfMeasurement_at(self, index, value):
        self.UnitOfMeasurement[index] = value
    def hasContent_(self):
        if (
            self.Number is not None or
            self.Quantity or
            self.UnitOfMeasurement
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ScheduleBType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ScheduleBType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ScheduleBType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ScheduleBType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ScheduleBType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='ScheduleBType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ScheduleBType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
        for Quantity_ in self.Quantity:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Quantity_), input_name='Quantity')), namespaceprefix_ , eol_))
        for UnitOfMeasurement_ in self.UnitOfMeasurement:
            namespaceprefix_ = self.UnitOfMeasurement_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitOfMeasurement_nsprefix_) else ''
            UnitOfMeasurement_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UnitOfMeasurement', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
        elif nodeName_ == 'Quantity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Quantity')
            value_ = self.gds_validate_string(value_, node, 'Quantity')
            self.Quantity.append(value_)
            self.Quantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = UnitOfMeasurementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UnitOfMeasurement.append(obj_)
            obj_.original_tagname_ = 'UnitOfMeasurement'
# end class ScheduleBType


class IFChargesType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MonetaryValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.MonetaryValue = MonetaryValue
        self.MonetaryValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IFChargesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IFChargesType.subclass:
            return IFChargesType.subclass(*args_, **kwargs_)
        else:
            return IFChargesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MonetaryValue(self):
        return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue):
        self.MonetaryValue = MonetaryValue
    def hasContent_(self):
        if (
            self.MonetaryValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='IFChargesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IFChargesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'IFChargesType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IFChargesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IFChargesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='IFChargesType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='IFChargesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MonetaryValue is not None:
            namespaceprefix_ = self.MonetaryValue_nsprefix_ + ':' if (UseCapturedNS_ and self.MonetaryValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMonetaryValue>%s</%sMonetaryValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MonetaryValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MonetaryValue')
            value_ = self.gds_validate_string(value_, node, 'MonetaryValue')
            self.MonetaryValue = value_
            self.MonetaryValue_nsprefix_ = child_.prefix
# end class IFChargesType


class OtherChargesType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MonetaryValue=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.MonetaryValue = MonetaryValue
        self.MonetaryValue_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OtherChargesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OtherChargesType.subclass:
            return OtherChargesType.subclass(*args_, **kwargs_)
        else:
            return OtherChargesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MonetaryValue(self):
        return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue):
        self.MonetaryValue = MonetaryValue
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.MonetaryValue is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='OtherChargesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OtherChargesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OtherChargesType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OtherChargesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OtherChargesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='OtherChargesType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='OtherChargesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MonetaryValue is not None:
            namespaceprefix_ = self.MonetaryValue_nsprefix_ + ':' if (UseCapturedNS_ and self.MonetaryValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMonetaryValue>%s</%sMonetaryValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MonetaryValue), input_name='MonetaryValue')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MonetaryValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MonetaryValue')
            value_ = self.gds_validate_string(value_, node, 'MonetaryValue')
            self.MonetaryValue = value_
            self.MonetaryValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class OtherChargesType


class BlanketPeriodType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, BeginDate=None, EndDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.BeginDate = BeginDate
        self.BeginDate_nsprefix_ = None
        self.EndDate = EndDate
        self.EndDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BlanketPeriodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BlanketPeriodType.subclass:
            return BlanketPeriodType.subclass(*args_, **kwargs_)
        else:
            return BlanketPeriodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_BeginDate(self):
        return self.BeginDate
    def set_BeginDate(self, BeginDate):
        self.BeginDate = BeginDate
    def get_EndDate(self):
        return self.EndDate
    def set_EndDate(self, EndDate):
        self.EndDate = EndDate
    def hasContent_(self):
        if (
            self.BeginDate is not None or
            self.EndDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='BlanketPeriodType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BlanketPeriodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BlanketPeriodType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BlanketPeriodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BlanketPeriodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='BlanketPeriodType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='BlanketPeriodType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BeginDate is not None:
            namespaceprefix_ = self.BeginDate_nsprefix_ + ':' if (UseCapturedNS_ and self.BeginDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBeginDate>%s</%sBeginDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BeginDate), input_name='BeginDate')), namespaceprefix_ , eol_))
        if self.EndDate is not None:
            namespaceprefix_ = self.EndDate_nsprefix_ + ':' if (UseCapturedNS_ and self.EndDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEndDate>%s</%sEndDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EndDate), input_name='EndDate')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'BeginDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BeginDate')
            value_ = self.gds_validate_string(value_, node, 'BeginDate')
            self.BeginDate = value_
            self.BeginDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'EndDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EndDate')
            value_ = self.gds_validate_string(value_, node, 'EndDate')
            self.EndDate = value_
            self.EndDate_nsprefix_ = child_.prefix
# end class BlanketPeriodType


class LicenseType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Number=None, Date=None, ExceptionCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Number = Number
        self.Number_nsprefix_ = None
        self.Date = Date
        self.Date_nsprefix_ = None
        self.ExceptionCode = ExceptionCode
        self.ExceptionCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LicenseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LicenseType.subclass:
            return LicenseType.subclass(*args_, **kwargs_)
        else:
            return LicenseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_ExceptionCode(self):
        return self.ExceptionCode
    def set_ExceptionCode(self, ExceptionCode):
        self.ExceptionCode = ExceptionCode
    def hasContent_(self):
        if (
            self.Number is not None or
            self.Date is not None or
            self.ExceptionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='LicenseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LicenseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LicenseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LicenseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LicenseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='LicenseType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='LicenseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
        if self.Date is not None:
            namespaceprefix_ = self.Date_nsprefix_ + ':' if (UseCapturedNS_ and self.Date_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Date), input_name='Date')), namespaceprefix_ , eol_))
        if self.ExceptionCode is not None:
            namespaceprefix_ = self.ExceptionCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ExceptionCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExceptionCode>%s</%sExceptionCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExceptionCode), input_name='ExceptionCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
        elif nodeName_ == 'Date':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Date')
            value_ = self.gds_validate_string(value_, node, 'Date')
            self.Date = value_
            self.Date_nsprefix_ = child_.prefix
        elif nodeName_ == 'ExceptionCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExceptionCode')
            value_ = self.gds_validate_string(value_, node, 'ExceptionCode')
            self.ExceptionCode = value_
            self.ExceptionCode_nsprefix_ = child_.prefix
# end class LicenseType


class SoldToType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Name=None, AttentionName=None, TaxIdentificationNumber=None, Phone=None, Option=None, Address=None, EMailAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Name = Name
        self.Name_nsprefix_ = None
        self.AttentionName = AttentionName
        self.AttentionName_nsprefix_ = None
        self.TaxIdentificationNumber = TaxIdentificationNumber
        self.TaxIdentificationNumber_nsprefix_ = None
        self.Phone = Phone
        self.Phone_nsprefix_ = None
        self.Option = Option
        self.Option_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
        self.EMailAddress = EMailAddress
        self.EMailAddress_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SoldToType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SoldToType.subclass:
            return SoldToType.subclass(*args_, **kwargs_)
        else:
            return SoldToType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_AttentionName(self):
        return self.AttentionName
    def set_AttentionName(self, AttentionName):
        self.AttentionName = AttentionName
    def get_TaxIdentificationNumber(self):
        return self.TaxIdentificationNumber
    def set_TaxIdentificationNumber(self, TaxIdentificationNumber):
        self.TaxIdentificationNumber = TaxIdentificationNumber
    def get_Phone(self):
        return self.Phone
    def set_Phone(self, Phone):
        self.Phone = Phone
    def get_Option(self):
        return self.Option
    def set_Option(self, Option):
        self.Option = Option
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def get_EMailAddress(self):
        return self.EMailAddress
    def set_EMailAddress(self, EMailAddress):
        self.EMailAddress = EMailAddress
    def hasContent_(self):
        if (
            self.Name is not None or
            self.AttentionName is not None or
            self.TaxIdentificationNumber is not None or
            self.Phone is not None or
            self.Option is not None or
            self.Address is not None or
            self.EMailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='SoldToType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SoldToType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SoldToType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SoldToType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SoldToType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='SoldToType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='SoldToType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.AttentionName is not None:
            namespaceprefix_ = self.AttentionName_nsprefix_ + ':' if (UseCapturedNS_ and self.AttentionName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttentionName>%s</%sAttentionName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AttentionName), input_name='AttentionName')), namespaceprefix_ , eol_))
        if self.TaxIdentificationNumber is not None:
            namespaceprefix_ = self.TaxIdentificationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TaxIdentificationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxIdentificationNumber>%s</%sTaxIdentificationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TaxIdentificationNumber), input_name='TaxIdentificationNumber')), namespaceprefix_ , eol_))
        if self.Phone is not None:
            namespaceprefix_ = self.Phone_nsprefix_ + ':' if (UseCapturedNS_ and self.Phone_nsprefix_) else ''
            self.Phone.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Phone', pretty_print=pretty_print)
        if self.Option is not None:
            namespaceprefix_ = self.Option_nsprefix_ + ':' if (UseCapturedNS_ and self.Option_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOption>%s</%sOption>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Option), input_name='Option')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
        if self.EMailAddress is not None:
            namespaceprefix_ = self.EMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Name')
            value_ = self.gds_validate_string(value_, node, 'Name')
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
        elif nodeName_ == 'AttentionName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AttentionName')
            value_ = self.gds_validate_string(value_, node, 'AttentionName')
            self.AttentionName = value_
            self.AttentionName_nsprefix_ = child_.prefix
        elif nodeName_ == 'TaxIdentificationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TaxIdentificationNumber')
            value_ = self.gds_validate_string(value_, node, 'TaxIdentificationNumber')
            self.TaxIdentificationNumber = value_
            self.TaxIdentificationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Phone':
            obj_ = PhoneType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Phone = obj_
            obj_.original_tagname_ = 'Phone'
        elif nodeName_ == 'Option':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Option')
            value_ = self.gds_validate_string(value_, node, 'Option')
            self.Option = value_
            self.Option_nsprefix_ = child_.prefix
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'EMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EMailAddress')
            value_ = self.gds_validate_string(value_, node, 'EMailAddress')
            self.EMailAddress = value_
            self.EMailAddress_nsprefix_ = child_.prefix
# end class SoldToType


class PhoneType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Number=None, Extension=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Number = Number
        self.Number_nsprefix_ = None
        self.Extension = Extension
        self.Extension_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PhoneType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PhoneType.subclass:
            return PhoneType.subclass(*args_, **kwargs_)
        else:
            return PhoneType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_Extension(self):
        return self.Extension
    def set_Extension(self, Extension):
        self.Extension = Extension
    def hasContent_(self):
        if (
            self.Number is not None or
            self.Extension is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='PhoneType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PhoneType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PhoneType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PhoneType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PhoneType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='PhoneType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='PhoneType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
        if self.Extension is not None:
            namespaceprefix_ = self.Extension_nsprefix_ + ':' if (UseCapturedNS_ and self.Extension_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExtension>%s</%sExtension>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Extension), input_name='Extension')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
        elif nodeName_ == 'Extension':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Extension')
            value_ = self.gds_validate_string(value_, node, 'Extension')
            self.Extension = value_
            self.Extension_nsprefix_ = child_.prefix
# end class PhoneType


class DDTCInformationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ITARExemptionNumber=None, USMLCategoryCode=None, EligiblePartyIndicator=None, RegistrationNumber=None, Quantity=None, UnitOfMeasurement=None, SignificantMilitaryEquipmentIndicator=None, ACMNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ITARExemptionNumber = ITARExemptionNumber
        self.ITARExemptionNumber_nsprefix_ = None
        self.USMLCategoryCode = USMLCategoryCode
        self.USMLCategoryCode_nsprefix_ = None
        self.EligiblePartyIndicator = EligiblePartyIndicator
        self.EligiblePartyIndicator_nsprefix_ = None
        self.RegistrationNumber = RegistrationNumber
        self.RegistrationNumber_nsprefix_ = None
        self.Quantity = Quantity
        self.Quantity_nsprefix_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.UnitOfMeasurement_nsprefix_ = None
        self.SignificantMilitaryEquipmentIndicator = SignificantMilitaryEquipmentIndicator
        self.SignificantMilitaryEquipmentIndicator_nsprefix_ = None
        self.ACMNumber = ACMNumber
        self.ACMNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DDTCInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DDTCInformationType.subclass:
            return DDTCInformationType.subclass(*args_, **kwargs_)
        else:
            return DDTCInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ITARExemptionNumber(self):
        return self.ITARExemptionNumber
    def set_ITARExemptionNumber(self, ITARExemptionNumber):
        self.ITARExemptionNumber = ITARExemptionNumber
    def get_USMLCategoryCode(self):
        return self.USMLCategoryCode
    def set_USMLCategoryCode(self, USMLCategoryCode):
        self.USMLCategoryCode = USMLCategoryCode
    def get_EligiblePartyIndicator(self):
        return self.EligiblePartyIndicator
    def set_EligiblePartyIndicator(self, EligiblePartyIndicator):
        self.EligiblePartyIndicator = EligiblePartyIndicator
    def get_RegistrationNumber(self):
        return self.RegistrationNumber
    def set_RegistrationNumber(self, RegistrationNumber):
        self.RegistrationNumber = RegistrationNumber
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_UnitOfMeasurement(self):
        return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement):
        self.UnitOfMeasurement = UnitOfMeasurement
    def get_SignificantMilitaryEquipmentIndicator(self):
        return self.SignificantMilitaryEquipmentIndicator
    def set_SignificantMilitaryEquipmentIndicator(self, SignificantMilitaryEquipmentIndicator):
        self.SignificantMilitaryEquipmentIndicator = SignificantMilitaryEquipmentIndicator
    def get_ACMNumber(self):
        return self.ACMNumber
    def set_ACMNumber(self, ACMNumber):
        self.ACMNumber = ACMNumber
    def hasContent_(self):
        if (
            self.ITARExemptionNumber is not None or
            self.USMLCategoryCode is not None or
            self.EligiblePartyIndicator is not None or
            self.RegistrationNumber is not None or
            self.Quantity is not None or
            self.UnitOfMeasurement is not None or
            self.SignificantMilitaryEquipmentIndicator is not None or
            self.ACMNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='DDTCInformationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DDTCInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DDTCInformationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DDTCInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DDTCInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='DDTCInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='DDTCInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ITARExemptionNumber is not None:
            namespaceprefix_ = self.ITARExemptionNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ITARExemptionNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sITARExemptionNumber>%s</%sITARExemptionNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ITARExemptionNumber), input_name='ITARExemptionNumber')), namespaceprefix_ , eol_))
        if self.USMLCategoryCode is not None:
            namespaceprefix_ = self.USMLCategoryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.USMLCategoryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUSMLCategoryCode>%s</%sUSMLCategoryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.USMLCategoryCode), input_name='USMLCategoryCode')), namespaceprefix_ , eol_))
        if self.EligiblePartyIndicator is not None:
            namespaceprefix_ = self.EligiblePartyIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.EligiblePartyIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEligiblePartyIndicator>%s</%sEligiblePartyIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EligiblePartyIndicator), input_name='EligiblePartyIndicator')), namespaceprefix_ , eol_))
        if self.RegistrationNumber is not None:
            namespaceprefix_ = self.RegistrationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.RegistrationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegistrationNumber>%s</%sRegistrationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegistrationNumber), input_name='RegistrationNumber')), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Quantity), input_name='Quantity')), namespaceprefix_ , eol_))
        if self.UnitOfMeasurement is not None:
            namespaceprefix_ = self.UnitOfMeasurement_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitOfMeasurement_nsprefix_) else ''
            self.UnitOfMeasurement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UnitOfMeasurement', pretty_print=pretty_print)
        if self.SignificantMilitaryEquipmentIndicator is not None:
            namespaceprefix_ = self.SignificantMilitaryEquipmentIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.SignificantMilitaryEquipmentIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSignificantMilitaryEquipmentIndicator>%s</%sSignificantMilitaryEquipmentIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SignificantMilitaryEquipmentIndicator), input_name='SignificantMilitaryEquipmentIndicator')), namespaceprefix_ , eol_))
        if self.ACMNumber is not None:
            namespaceprefix_ = self.ACMNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ACMNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sACMNumber>%s</%sACMNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ACMNumber), input_name='ACMNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ITARExemptionNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ITARExemptionNumber')
            value_ = self.gds_validate_string(value_, node, 'ITARExemptionNumber')
            self.ITARExemptionNumber = value_
            self.ITARExemptionNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'USMLCategoryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'USMLCategoryCode')
            value_ = self.gds_validate_string(value_, node, 'USMLCategoryCode')
            self.USMLCategoryCode = value_
            self.USMLCategoryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'EligiblePartyIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EligiblePartyIndicator')
            value_ = self.gds_validate_string(value_, node, 'EligiblePartyIndicator')
            self.EligiblePartyIndicator = value_
            self.EligiblePartyIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'RegistrationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegistrationNumber')
            value_ = self.gds_validate_string(value_, node, 'RegistrationNumber')
            self.RegistrationNumber = value_
            self.RegistrationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Quantity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Quantity')
            value_ = self.gds_validate_string(value_, node, 'Quantity')
            self.Quantity = value_
            self.Quantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = UnitOfMeasurementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'SignificantMilitaryEquipmentIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SignificantMilitaryEquipmentIndicator')
            value_ = self.gds_validate_string(value_, node, 'SignificantMilitaryEquipmentIndicator')
            self.SignificantMilitaryEquipmentIndicator = value_
            self.SignificantMilitaryEquipmentIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'ACMNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ACMNumber')
            value_ = self.gds_validate_string(value_, node, 'ACMNumber')
            self.ACMNumber = value_
            self.ACMNumber_nsprefix_ = child_.prefix
# end class DDTCInformationType


class EEILicenseType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Number=None, Code=None, LicenseLineValue=None, ECCNNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Number = Number
        self.Number_nsprefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.LicenseLineValue = LicenseLineValue
        self.LicenseLineValue_nsprefix_ = None
        self.ECCNNumber = ECCNNumber
        self.ECCNNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EEILicenseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EEILicenseType.subclass:
            return EEILicenseType.subclass(*args_, **kwargs_)
        else:
            return EEILicenseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_LicenseLineValue(self):
        return self.LicenseLineValue
    def set_LicenseLineValue(self, LicenseLineValue):
        self.LicenseLineValue = LicenseLineValue
    def get_ECCNNumber(self):
        return self.ECCNNumber
    def set_ECCNNumber(self, ECCNNumber):
        self.ECCNNumber = ECCNNumber
    def hasContent_(self):
        if (
            self.Number is not None or
            self.Code is not None or
            self.LicenseLineValue is not None or
            self.ECCNNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='EEILicenseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EEILicenseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EEILicenseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EEILicenseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EEILicenseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='EEILicenseType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='EEILicenseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.LicenseLineValue is not None:
            namespaceprefix_ = self.LicenseLineValue_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenseLineValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicenseLineValue>%s</%sLicenseLineValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LicenseLineValue), input_name='LicenseLineValue')), namespaceprefix_ , eol_))
        if self.ECCNNumber is not None:
            namespaceprefix_ = self.ECCNNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ECCNNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sECCNNumber>%s</%sECCNNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ECCNNumber), input_name='ECCNNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
        elif nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'LicenseLineValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LicenseLineValue')
            value_ = self.gds_validate_string(value_, node, 'LicenseLineValue')
            self.LicenseLineValue = value_
            self.LicenseLineValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'ECCNNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ECCNNumber')
            value_ = self.gds_validate_string(value_, node, 'ECCNNumber')
            self.ECCNNumber = value_
            self.ECCNNumber_nsprefix_ = child_.prefix
# end class EEILicenseType


class EEIFilingOptionType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, EMailAddress=None, Description=None, UPSFiled=None, ShipperFiled=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.EMailAddress = EMailAddress
        self.EMailAddress_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.UPSFiled = UPSFiled
        self.UPSFiled_nsprefix_ = None
        self.ShipperFiled = ShipperFiled
        self.ShipperFiled_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EEIFilingOptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EEIFilingOptionType.subclass:
            return EEIFilingOptionType.subclass(*args_, **kwargs_)
        else:
            return EEIFilingOptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_EMailAddress(self):
        return self.EMailAddress
    def set_EMailAddress(self, EMailAddress):
        self.EMailAddress = EMailAddress
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_UPSFiled(self):
        return self.UPSFiled
    def set_UPSFiled(self, UPSFiled):
        self.UPSFiled = UPSFiled
    def get_ShipperFiled(self):
        return self.ShipperFiled
    def set_ShipperFiled(self, ShipperFiled):
        self.ShipperFiled = ShipperFiled
    def hasContent_(self):
        if (
            self.Code is not None or
            self.EMailAddress is not None or
            self.Description is not None or
            self.UPSFiled is not None or
            self.ShipperFiled is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='EEIFilingOptionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EEIFilingOptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EEIFilingOptionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EEIFilingOptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EEIFilingOptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='EEIFilingOptionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='EEIFilingOptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.EMailAddress is not None:
            namespaceprefix_ = self.EMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.UPSFiled is not None:
            namespaceprefix_ = self.UPSFiled_nsprefix_ + ':' if (UseCapturedNS_ and self.UPSFiled_nsprefix_) else ''
            self.UPSFiled.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UPSFiled', pretty_print=pretty_print)
        if self.ShipperFiled is not None:
            namespaceprefix_ = self.ShipperFiled_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipperFiled_nsprefix_) else ''
            self.ShipperFiled.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipperFiled', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'EMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EMailAddress')
            value_ = self.gds_validate_string(value_, node, 'EMailAddress')
            self.EMailAddress = value_
            self.EMailAddress_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'UPSFiled':
            obj_ = UPSFiledType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UPSFiled = obj_
            obj_.original_tagname_ = 'UPSFiled'
        elif nodeName_ == 'ShipperFiled':
            obj_ = ShipperFiledType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipperFiled = obj_
            obj_.original_tagname_ = 'ShipperFiled'
# end class EEIFilingOptionType


class UPSFiledType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, POA=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.POA = POA
        self.POA_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UPSFiledType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UPSFiledType.subclass:
            return UPSFiledType.subclass(*args_, **kwargs_)
        else:
            return UPSFiledType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_POA(self):
        return self.POA
    def set_POA(self, POA):
        self.POA = POA
    def hasContent_(self):
        if (
            self.POA is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='UPSFiledType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UPSFiledType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UPSFiledType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UPSFiledType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UPSFiledType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='UPSFiledType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='UPSFiledType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.POA is not None:
            namespaceprefix_ = self.POA_nsprefix_ + ':' if (UseCapturedNS_ and self.POA_nsprefix_) else ''
            self.POA.export(outfile, level, namespaceprefix_, namespacedef_='', name_='POA', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'POA':
            obj_ = POAType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.POA = obj_
            obj_.original_tagname_ = 'POA'
# end class UPSFiledType


class ShipperFiledType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, PreDepartureITNNumber=None, ExemptionLegend=None, EEIShipmentReferenceNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.PreDepartureITNNumber = PreDepartureITNNumber
        self.PreDepartureITNNumber_nsprefix_ = None
        self.ExemptionLegend = ExemptionLegend
        self.ExemptionLegend_nsprefix_ = None
        self.EEIShipmentReferenceNumber = EEIShipmentReferenceNumber
        self.EEIShipmentReferenceNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipperFiledType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipperFiledType.subclass:
            return ShipperFiledType.subclass(*args_, **kwargs_)
        else:
            return ShipperFiledType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_PreDepartureITNNumber(self):
        return self.PreDepartureITNNumber
    def set_PreDepartureITNNumber(self, PreDepartureITNNumber):
        self.PreDepartureITNNumber = PreDepartureITNNumber
    def get_ExemptionLegend(self):
        return self.ExemptionLegend
    def set_ExemptionLegend(self, ExemptionLegend):
        self.ExemptionLegend = ExemptionLegend
    def get_EEIShipmentReferenceNumber(self):
        return self.EEIShipmentReferenceNumber
    def set_EEIShipmentReferenceNumber(self, EEIShipmentReferenceNumber):
        self.EEIShipmentReferenceNumber = EEIShipmentReferenceNumber
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None or
            self.PreDepartureITNNumber is not None or
            self.ExemptionLegend is not None or
            self.EEIShipmentReferenceNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ShipperFiledType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipperFiledType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipperFiledType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipperFiledType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipperFiledType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='ShipperFiledType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='ShipperFiledType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.PreDepartureITNNumber is not None:
            namespaceprefix_ = self.PreDepartureITNNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PreDepartureITNNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPreDepartureITNNumber>%s</%sPreDepartureITNNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PreDepartureITNNumber), input_name='PreDepartureITNNumber')), namespaceprefix_ , eol_))
        if self.ExemptionLegend is not None:
            namespaceprefix_ = self.ExemptionLegend_nsprefix_ + ':' if (UseCapturedNS_ and self.ExemptionLegend_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExemptionLegend>%s</%sExemptionLegend>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExemptionLegend), input_name='ExemptionLegend')), namespaceprefix_ , eol_))
        if self.EEIShipmentReferenceNumber is not None:
            namespaceprefix_ = self.EEIShipmentReferenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.EEIShipmentReferenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEEIShipmentReferenceNumber>%s</%sEEIShipmentReferenceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EEIShipmentReferenceNumber), input_name='EEIShipmentReferenceNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'PreDepartureITNNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PreDepartureITNNumber')
            value_ = self.gds_validate_string(value_, node, 'PreDepartureITNNumber')
            self.PreDepartureITNNumber = value_
            self.PreDepartureITNNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ExemptionLegend':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExemptionLegend')
            value_ = self.gds_validate_string(value_, node, 'ExemptionLegend')
            self.ExemptionLegend = value_
            self.ExemptionLegend_nsprefix_ = child_.prefix
        elif nodeName_ == 'EEIShipmentReferenceNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EEIShipmentReferenceNumber')
            value_ = self.gds_validate_string(value_, node, 'EEIShipmentReferenceNumber')
            self.EEIShipmentReferenceNumber = value_
            self.EEIShipmentReferenceNumber_nsprefix_ = child_.prefix
# end class ShipperFiledType


class EEIInformationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ExportInformation=None, License=None, DDTCInformation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ExportInformation = ExportInformation
        self.ExportInformation_nsprefix_ = None
        self.License = License
        self.License_nsprefix_ = None
        self.DDTCInformation = DDTCInformation
        self.DDTCInformation_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EEIInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EEIInformationType.subclass:
            return EEIInformationType.subclass(*args_, **kwargs_)
        else:
            return EEIInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ExportInformation(self):
        return self.ExportInformation
    def set_ExportInformation(self, ExportInformation):
        self.ExportInformation = ExportInformation
    def get_License(self):
        return self.License
    def set_License(self, License):
        self.License = License
    def get_DDTCInformation(self):
        return self.DDTCInformation
    def set_DDTCInformation(self, DDTCInformation):
        self.DDTCInformation = DDTCInformation
    def hasContent_(self):
        if (
            self.ExportInformation is not None or
            self.License is not None or
            self.DDTCInformation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='EEIInformationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EEIInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EEIInformationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EEIInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EEIInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='EEIInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='EEIInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ExportInformation is not None:
            namespaceprefix_ = self.ExportInformation_nsprefix_ + ':' if (UseCapturedNS_ and self.ExportInformation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExportInformation>%s</%sExportInformation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExportInformation), input_name='ExportInformation')), namespaceprefix_ , eol_))
        if self.License is not None:
            namespaceprefix_ = self.License_nsprefix_ + ':' if (UseCapturedNS_ and self.License_nsprefix_) else ''
            self.License.export(outfile, level, namespaceprefix_, namespacedef_='', name_='License', pretty_print=pretty_print)
        if self.DDTCInformation is not None:
            namespaceprefix_ = self.DDTCInformation_nsprefix_ + ':' if (UseCapturedNS_ and self.DDTCInformation_nsprefix_) else ''
            self.DDTCInformation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DDTCInformation', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ExportInformation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExportInformation')
            value_ = self.gds_validate_string(value_, node, 'ExportInformation')
            self.ExportInformation = value_
            self.ExportInformation_nsprefix_ = child_.prefix
        elif nodeName_ == 'License':
            obj_ = EEILicenseType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.License = obj_
            obj_.original_tagname_ = 'License'
        elif nodeName_ == 'DDTCInformation':
            obj_ = DDTCInformationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DDTCInformation = obj_
            obj_.original_tagname_ = 'DDTCInformation'
# end class EEIInformationType


class POAType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, POAType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if POAType.subclass:
            return POAType.subclass(*args_, **kwargs_)
        else:
            return POAType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='POAType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('POAType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'POAType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='POAType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='POAType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='POAType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='POAType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class POAType


class UltimateConsigneeTypeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UltimateConsigneeTypeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UltimateConsigneeTypeType.subclass:
            return UltimateConsigneeTypeType.subclass(*args_, **kwargs_)
        else:
            return UltimateConsigneeTypeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='UltimateConsigneeTypeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UltimateConsigneeTypeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UltimateConsigneeTypeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UltimateConsigneeTypeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UltimateConsigneeTypeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='IF:', name_='UltimateConsigneeTypeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='IF:', namespacedef_='', name_='UltimateConsigneeTypeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class UltimateConsigneeTypeType


class PropertyType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Key=None, valueOf_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Key = _cast(None, Key)
        self.Key_nsprefix_ = None
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PropertyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PropertyType.subclass:
            return PropertyType.subclass(*args_, **kwargs_)
        else:
            return PropertyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Key(self):
        return self.Key
    def set_Key(self, Key):
        self.Key = Key
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PropertyType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PropertyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PropertyType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PropertyType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PropertyType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PropertyType'):
        if self.Key is not None and 'Key' not in already_processed:
            already_processed.add('Key')
            outfile.write(' Key=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Key), input_name='Key')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PropertyType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Key', node)
        if value is not None and 'Key' not in already_processed:
            already_processed.add('Key')
            self.Key = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class PropertyType


GDSClassesMapping = {
    'ClientInformation': ClientInformationType,
    'Request': RequestType,
    'Response': ResponseType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def get_required_ns_prefix_defs(rootNode):
    '''Get all name space prefix definitions required in this XML doc.
    Return a dictionary of definitions and a char string of definitions.
    '''
    nsmap = {
        prefix: uri
        for node in rootNode.iter()
        for (prefix, uri) in node.nsmap.items()
        if prefix is not None
    }
    namespacedefs = ' '.join([
        'xmlns:{}="{}"'.format(prefix, uri)
        for prefix, uri in nsmap.items()
    ])
    return nsmap, namespacedefs


def parse(inFileName, silence=False, print_warnings=True):
    global CapturedNsmap_
    gds_collector = GdsCollector_()
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'FreightShipRequest'
        rootClass = FreightShipRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    CapturedNsmap_, namespacedefs = get_required_ns_prefix_defs(rootNode)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_=namespacedefs,
            pretty_print=True)
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseEtree(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'FreightShipRequest'
        rootClass = FreightShipRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(str(content))
        sys.stdout.write('\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False, print_warnings=True):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    gds_collector = GdsCollector_()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'FreightShipRequest'
        rootClass = FreightShipRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if not SaveElementTreeNode:
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:fsp="http://www.ups.com/XMLSchema/XOLTWS/FreightShip/v1.0"')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseLiteral(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'FreightShipRequest'
        rootClass = FreightShipRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('#from freight_ship_web_service_schema import *\n\n')
        sys.stdout.write('import freight_ship_web_service_schema as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

RenameMappings_ = {
}

__all__ = [
    "AddressType",
    "AirFreightStatusType",
    "AmountType",
    "BlanketPeriodType",
    "CN22ContentType",
    "CN22FormType",
    "CODType",
    "CODValueType",
    "CWTType",
    "ClientInformationType",
    "CodeDescriptionType",
    "CommodityType",
    "CommodityValueType",
    "ConfirmationNumberType",
    "ContactType",
    "CountryOfManufactureType",
    "CubeType",
    "CustomsValueType",
    "DDTCInformationType",
    "DangerousGoodsType",
    "DeclaredValueType",
    "DeliveryOptionsType",
    "DetailType",
    "DimensionType",
    "DimensionValueType",
    "DimensionsType",
    "DocumentType",
    "DocumentsType",
    "EEIFilingOptionType",
    "EEIInformationType",
    "EEILicenseType",
    "EMailInformationType",
    "EMailNotificationType",
    "EMailType",
    "ElementIdentifierType",
    "ElementLevelInformationType",
    "ExcludeFromFormType",
    "ExistingShipmentIDType",
    "FactorType",
    "ForwardAgentType",
    "FreightDensityRateType",
    "FreightShipAddressType",
    "FreightShipPhoneType",
    "FreightShipRequest",
    "FreightShipResponse",
    "FreightShipUnitOfMeasurementType",
    "HandlingChargeAmountType",
    "HandlingChargeType",
    "HandlingUnitType",
    "HandlingUnitsDimensionsType",
    "HandlingUnitsType",
    "IFChargesType",
    "ImageCodeDescriptionType",
    "ImageFormsType",
    "ImageType",
    "IntermediateConsigneeType",
    "InternationalFormType",
    "LanguageForUPSPremiumCareType",
    "LicenseType",
    "NMFCCommodityType",
    "NetCostDateType",
    "OtherChargesType",
    "OverSeasLegType",
    "POAType",
    "POMType",
    "PackageAssociatedType",
    "PackingListCommodityType",
    "PackingListContactType",
    "PackingListDimensionsType",
    "PackingListHandlingUnitType",
    "PackingListInfoType",
    "PackingListReferenceType",
    "PackingListType",
    "PayerType",
    "PaymentInformationType",
    "PhoneType",
    "PickupNotificationsType",
    "PickupOptionsType",
    "PickupRequestType",
    "PreAuthReasonType",
    "PrintSizeType",
    "ProducerType",
    "ProductType",
    "ProductWeightType",
    "PropertyType",
    "RateType",
    "ReferenceNumberType",
    "ReferenceType",
    "RemitToType",
    "RequestType",
    "RequesterType",
    "ResponseType",
    "SMSType",
    "ScheduleBType",
    "ShipCodeDescriptionType",
    "ShipFromType",
    "ShipToType",
    "ShipmentResultsType",
    "ShipmentServiceOptionsType",
    "ShipmentTotalWeightType",
    "ShipmentType",
    "ShipperFiledType",
    "SoldToType",
    "SortingAndSegregatingType",
    "StatusType",
    "TaxIDCodeDescType",
    "TaxIDType",
    "TimeInTransitResponseType",
    "TotalShipmentChargeType",
    "TransactionReferenceType",
    "UPSFiledType",
    "UPSPremiumCareFormType",
    "UltimateConsigneeType",
    "UltimateConsigneeTypeType",
    "UnitOfMeasurementType",
    "UnitType",
    "UserCreatedFormType",
    "ValidAccessorialType",
    "ValidServiceType",
    "WeightType"
]
