#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Sat Mar  7 09:04:17 2020 by generateDS.py version 2.35.15.
# Python 3.8.1 (v3.8.1:1b293b6006, Dec 18 2019, 14:08:53)  [Clang 6.0 (clang-600.0.57)]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('-o', './python/locator_response.py')
#
# Command line arguments:
#   ./schemas/LocatorResponse.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/.env/bin/generateDS --no-namespace-defs -o "./python/locator_response.py" ./schemas/LocatorResponse.xsd
#
# Current working directory (os.getcwd()):
#   2020-03
#

from six.moves import zip_longest
import os
import sys
import re as re_
import base64
import datetime as datetime_
import decimal as decimal_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
SaveElementTreeNode = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ImportError:
    GenerateDSNamespaceTypePrefixes_ = {}

#
# You can replace the following class definition by defining an
# importable module named "generatedscollector" containing a class
# named "GdsCollector".  See the default class definition below for
# clues about the possible content of that class.
#
try:
    from generatedscollector import GdsCollector as GdsCollector_
except ImportError:

    class GdsCollector_(object):

        def __init__(self, messages=None):
            if messages is None:
                self.messages = []
            else:
                self.messages = messages

        def add_message(self, msg):
            self.messages.append(msg)

        def get_messages(self):
            return self.messages

        def clear_messages(self):
            self.messages = []

        def print_messages(self):
            for msg in self.messages:
                print("Warning: {}".format(msg))

        def write_messages(self, outstream):
            for msg in self.messages:
                outstream.write("Warning: {}\n".format(msg))


#
# The super-class for enum types
#

try:
    from enum import Enum
except ImportError:
    Enum = object

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        __hash__ = object.__hash__
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_parse_string(self, input_data, node=None, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_parse_integer(self, input_data, node=None, input_name=''):
            try:
                ival = int(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires integer value: %s' % exp)
            return ival
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            try:
                value = int(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires integer value')
            return value
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integer valuess')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_parse_float(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires float or double value: %s' % exp)
            return fval_
        def gds_validate_float(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires float value')
            return value
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of float values')
            return values
        def gds_format_decimal(self, input_data, input_name=''):
            return ('%s' % input_data).rstrip('0')
        def gds_parse_decimal(self, input_data, node=None, input_name=''):
            try:
                decimal_value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return decimal_value
        def gds_validate_decimal(self, input_data, node=None, input_name=''):
            try:
                value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return value
        def gds_format_decimal_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_decimal_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    decimal_.Decimal(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of decimal values')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_parse_double(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires double or float value: %s' % exp)
            return fval_
        def gds_validate_double(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires double or float value')
            return value
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(
                        node, 'Requires sequence of double or float values')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_parse_boolean(self, input_data, node=None, input_name=''):
            if input_data in ('true', '1'):
                bval = True
            elif input_data in ('false', '0'):
                bval = False
            else:
                raise_parse_error(node, 'Requires boolean value')
            return bval
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            if input_data not in (True, 1, False, 0, ):
                raise_parse_error(
                    node,
                    'Requires boolean value '
                    '(one of True, 1, False, 0)')
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in (True, 1, False, 0, ):
                    raise_parse_error(
                        node,
                        'Requires sequence of boolean values '
                        '(one of True, 1, False, 0)')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_check_cardinality_(
                self, value, input_name,
                min_occurs=0, max_occurs=1, required=None):
            if value is None:
                length = 0
            elif isinstance(value, list):
                length = len(value)
            else:
                length = 1
            if required is not None :
                if required and length < 1:
                    self.gds_collector_.add_message(
                        "Required value {}{} is missing".format(
                            input_name, self.gds_get_node_lineno_()))
            if length < min_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is below "
                    "the minimum allowed, "
                    "expected at least {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        min_occurs, length))
            elif length > max_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is above "
                    "the maximum allowed, "
                    "expected at most {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        max_occurs, length))
        def gds_validate_builtin_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value, input_name=input_name)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_validate_defined_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            # provide default value in case option --disable-xml is used.
            content = ""
            content = etree_.tostring(node, encoding="unicode")
            return content
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            def excl_select_objs_(obj):
                return (obj[0] != 'parent_object_' and
                        obj[0] != 'gds_collector_')
            if type(self) != type(other):
                return False
            return all(x == y for x, y in zip_longest(
                filter(excl_select_objs_, self.__dict__.items()),
                filter(excl_select_objs_, other.__dict__.items())))
        def __ne__(self, other):
            return not self.__eq__(other)
        # Django ETL transform hooks.
        def gds_djo_etl_transform(self):
            pass
        def gds_djo_etl_transform_db_obj(self, dbobj):
            pass
        # SQLAlchemy ETL transform hooks.
        def gds_sqa_etl_transform(self):
            return 0, None
        def gds_sqa_etl_transform_db_obj(self, dbobj):
            pass
        def gds_get_node_lineno_(self):
            if (hasattr(self, "gds_elementtree_node_") and
                    self.gds_elementtree_node_ is not None):
                return ' near line {}'.format(
                    self.gds_elementtree_node_.sourceline)
            else:
                return ""
    
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
# Set this to false in order to deactivate during export, the use of
# name space prefixes captured from the input document.
UseCapturedNS_ = True
CapturedNsmap_ = {}
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


def encode_str_2_3(instr):
    return instr


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if node is not None:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class LocatorResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Response=None, Geocode=None, SearchResults=None, AllowAllConfidenceLevels='false', gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Response = Response
        self.Response_nsprefix_ = None
        self.Geocode = Geocode
        self.Geocode_nsprefix_ = None
        self.SearchResults = SearchResults
        self.SearchResults_nsprefix_ = None
        self.AllowAllConfidenceLevels = AllowAllConfidenceLevels
        self.AllowAllConfidenceLevels_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LocatorResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LocatorResponse.subclass:
            return LocatorResponse.subclass(*args_, **kwargs_)
        else:
            return LocatorResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Response(self):
        return self.Response
    def set_Response(self, Response):
        self.Response = Response
    def get_Geocode(self):
        return self.Geocode
    def set_Geocode(self, Geocode):
        self.Geocode = Geocode
    def get_SearchResults(self):
        return self.SearchResults
    def set_SearchResults(self, SearchResults):
        self.SearchResults = SearchResults
    def get_AllowAllConfidenceLevels(self):
        return self.AllowAllConfidenceLevels
    def set_AllowAllConfidenceLevels(self, AllowAllConfidenceLevels):
        self.AllowAllConfidenceLevels = AllowAllConfidenceLevels
    def hasContent_(self):
        if (
            self.Response is not None or
            self.Geocode is not None or
            self.SearchResults is not None or
            self.AllowAllConfidenceLevels != "false"
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LocatorResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LocatorResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LocatorResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LocatorResponse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LocatorResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LocatorResponse'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LocatorResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Response is not None:
            namespaceprefix_ = self.Response_nsprefix_ + ':' if (UseCapturedNS_ and self.Response_nsprefix_) else ''
            self.Response.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Response', pretty_print=pretty_print)
        if self.Geocode is not None:
            namespaceprefix_ = self.Geocode_nsprefix_ + ':' if (UseCapturedNS_ and self.Geocode_nsprefix_) else ''
            self.Geocode.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Geocode', pretty_print=pretty_print)
        if self.SearchResults is not None:
            namespaceprefix_ = self.SearchResults_nsprefix_ + ':' if (UseCapturedNS_ and self.SearchResults_nsprefix_) else ''
            self.SearchResults.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SearchResults', pretty_print=pretty_print)
        if self.AllowAllConfidenceLevels != "false":
            namespaceprefix_ = self.AllowAllConfidenceLevels_nsprefix_ + ':' if (UseCapturedNS_ and self.AllowAllConfidenceLevels_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowAllConfidenceLevels>%s</%sAllowAllConfidenceLevels>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AllowAllConfidenceLevels), input_name='AllowAllConfidenceLevels')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Response':
            obj_ = Response.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Response = obj_
            obj_.original_tagname_ = 'Response'
        elif nodeName_ == 'Geocode':
            obj_ = GeocodeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Geocode = obj_
            obj_.original_tagname_ = 'Geocode'
        elif nodeName_ == 'SearchResults':
            obj_ = SearchResultsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SearchResults = obj_
            obj_.original_tagname_ = 'SearchResults'
        elif nodeName_ == 'AllowAllConfidenceLevels':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AllowAllConfidenceLevels')
            value_ = self.gds_validate_string(value_, node, 'AllowAllConfidenceLevels')
            self.AllowAllConfidenceLevels = value_
            self.AllowAllConfidenceLevels_nsprefix_ = child_.prefix
# end class LocatorResponse


class GeocodeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Latitude=None, Longitude=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Latitude = Latitude
        self.Latitude_nsprefix_ = None
        self.Longitude = Longitude
        self.Longitude_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeocodeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeocodeType.subclass:
            return GeocodeType.subclass(*args_, **kwargs_)
        else:
            return GeocodeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Latitude(self):
        return self.Latitude
    def set_Latitude(self, Latitude):
        self.Latitude = Latitude
    def get_Longitude(self):
        return self.Longitude
    def set_Longitude(self, Longitude):
        self.Longitude = Longitude
    def hasContent_(self):
        if (
            self.Latitude is not None or
            self.Longitude is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeocodeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeocodeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GeocodeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeocodeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeocodeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeocodeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeocodeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Latitude is not None:
            namespaceprefix_ = self.Latitude_nsprefix_ + ':' if (UseCapturedNS_ and self.Latitude_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLatitude>%s</%sLatitude>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Latitude), input_name='Latitude')), namespaceprefix_ , eol_))
        if self.Longitude is not None:
            namespaceprefix_ = self.Longitude_nsprefix_ + ':' if (UseCapturedNS_ and self.Longitude_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLongitude>%s</%sLongitude>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Longitude), input_name='Longitude')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Latitude':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Latitude')
            value_ = self.gds_validate_string(value_, node, 'Latitude')
            self.Latitude = value_
            self.Latitude_nsprefix_ = child_.prefix
        elif nodeName_ == 'Longitude':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Longitude')
            value_ = self.gds_validate_string(value_, node, 'Longitude')
            self.Longitude = value_
            self.Longitude_nsprefix_ = child_.prefix
# end class GeocodeType


class SearchResultsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, GeocodeCandidate=None, Disclaimer=None, DropLocation=None, AvailableLocationAttributes=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if GeocodeCandidate is None:
            self.GeocodeCandidate = []
        else:
            self.GeocodeCandidate = GeocodeCandidate
        self.GeocodeCandidate_nsprefix_ = None
        if Disclaimer is None:
            self.Disclaimer = []
        else:
            self.Disclaimer = Disclaimer
        self.Disclaimer_nsprefix_ = None
        if DropLocation is None:
            self.DropLocation = []
        else:
            self.DropLocation = DropLocation
        self.DropLocation_nsprefix_ = None
        if AvailableLocationAttributes is None:
            self.AvailableLocationAttributes = []
        else:
            self.AvailableLocationAttributes = AvailableLocationAttributes
        self.AvailableLocationAttributes_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SearchResultsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SearchResultsType.subclass:
            return SearchResultsType.subclass(*args_, **kwargs_)
        else:
            return SearchResultsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_GeocodeCandidate(self):
        return self.GeocodeCandidate
    def set_GeocodeCandidate(self, GeocodeCandidate):
        self.GeocodeCandidate = GeocodeCandidate
    def add_GeocodeCandidate(self, value):
        self.GeocodeCandidate.append(value)
    def insert_GeocodeCandidate_at(self, index, value):
        self.GeocodeCandidate.insert(index, value)
    def replace_GeocodeCandidate_at(self, index, value):
        self.GeocodeCandidate[index] = value
    def get_Disclaimer(self):
        return self.Disclaimer
    def set_Disclaimer(self, Disclaimer):
        self.Disclaimer = Disclaimer
    def add_Disclaimer(self, value):
        self.Disclaimer.append(value)
    def insert_Disclaimer_at(self, index, value):
        self.Disclaimer.insert(index, value)
    def replace_Disclaimer_at(self, index, value):
        self.Disclaimer[index] = value
    def get_DropLocation(self):
        return self.DropLocation
    def set_DropLocation(self, DropLocation):
        self.DropLocation = DropLocation
    def add_DropLocation(self, value):
        self.DropLocation.append(value)
    def insert_DropLocation_at(self, index, value):
        self.DropLocation.insert(index, value)
    def replace_DropLocation_at(self, index, value):
        self.DropLocation[index] = value
    def get_AvailableLocationAttributes(self):
        return self.AvailableLocationAttributes
    def set_AvailableLocationAttributes(self, AvailableLocationAttributes):
        self.AvailableLocationAttributes = AvailableLocationAttributes
    def add_AvailableLocationAttributes(self, value):
        self.AvailableLocationAttributes.append(value)
    def insert_AvailableLocationAttributes_at(self, index, value):
        self.AvailableLocationAttributes.insert(index, value)
    def replace_AvailableLocationAttributes_at(self, index, value):
        self.AvailableLocationAttributes[index] = value
    def hasContent_(self):
        if (
            self.GeocodeCandidate or
            self.Disclaimer or
            self.DropLocation or
            self.AvailableLocationAttributes
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SearchResultsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SearchResultsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SearchResultsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SearchResultsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SearchResultsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SearchResultsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SearchResultsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for GeocodeCandidate_ in self.GeocodeCandidate:
            namespaceprefix_ = self.GeocodeCandidate_nsprefix_ + ':' if (UseCapturedNS_ and self.GeocodeCandidate_nsprefix_) else ''
            GeocodeCandidate_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GeocodeCandidate', pretty_print=pretty_print)
        for Disclaimer_ in self.Disclaimer:
            namespaceprefix_ = self.Disclaimer_nsprefix_ + ':' if (UseCapturedNS_ and self.Disclaimer_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDisclaimer>%s</%sDisclaimer>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Disclaimer_), input_name='Disclaimer')), namespaceprefix_ , eol_))
        for DropLocation_ in self.DropLocation:
            namespaceprefix_ = self.DropLocation_nsprefix_ + ':' if (UseCapturedNS_ and self.DropLocation_nsprefix_) else ''
            DropLocation_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DropLocation', pretty_print=pretty_print)
        for AvailableLocationAttributes_ in self.AvailableLocationAttributes:
            namespaceprefix_ = self.AvailableLocationAttributes_nsprefix_ + ':' if (UseCapturedNS_ and self.AvailableLocationAttributes_nsprefix_) else ''
            AvailableLocationAttributes_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AvailableLocationAttributes', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'GeocodeCandidate':
            obj_ = GeocodeCandidateType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GeocodeCandidate.append(obj_)
            obj_.original_tagname_ = 'GeocodeCandidate'
        elif nodeName_ == 'Disclaimer':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Disclaimer')
            value_ = self.gds_validate_string(value_, node, 'Disclaimer')
            self.Disclaimer.append(value_)
            self.Disclaimer_nsprefix_ = child_.prefix
        elif nodeName_ == 'DropLocation':
            obj_ = DropLocationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DropLocation.append(obj_)
            obj_.original_tagname_ = 'DropLocation'
        elif nodeName_ == 'AvailableLocationAttributes':
            obj_ = LocationAttributesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AvailableLocationAttributes.append(obj_)
            obj_.original_tagname_ = 'AvailableLocationAttributes'
# end class SearchResultsType


class GeocodeCandidateType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AddressKeyFormat=None, Geocode=None, LandmarkName=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AddressKeyFormat = AddressKeyFormat
        self.AddressKeyFormat_nsprefix_ = None
        self.Geocode = Geocode
        self.Geocode_nsprefix_ = None
        self.LandmarkName = LandmarkName
        self.LandmarkName_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeocodeCandidateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeocodeCandidateType.subclass:
            return GeocodeCandidateType.subclass(*args_, **kwargs_)
        else:
            return GeocodeCandidateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AddressKeyFormat(self):
        return self.AddressKeyFormat
    def set_AddressKeyFormat(self, AddressKeyFormat):
        self.AddressKeyFormat = AddressKeyFormat
    def get_Geocode(self):
        return self.Geocode
    def set_Geocode(self, Geocode):
        self.Geocode = Geocode
    def get_LandmarkName(self):
        return self.LandmarkName
    def set_LandmarkName(self, LandmarkName):
        self.LandmarkName = LandmarkName
    def hasContent_(self):
        if (
            self.AddressKeyFormat is not None or
            self.Geocode is not None or
            self.LandmarkName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeocodeCandidateType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeocodeCandidateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GeocodeCandidateType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeocodeCandidateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeocodeCandidateType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeocodeCandidateType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeocodeCandidateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressKeyFormat is not None:
            namespaceprefix_ = self.AddressKeyFormat_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressKeyFormat_nsprefix_) else ''
            self.AddressKeyFormat.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AddressKeyFormat', pretty_print=pretty_print)
        if self.Geocode is not None:
            namespaceprefix_ = self.Geocode_nsprefix_ + ':' if (UseCapturedNS_ and self.Geocode_nsprefix_) else ''
            self.Geocode.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Geocode', pretty_print=pretty_print)
        if self.LandmarkName is not None:
            namespaceprefix_ = self.LandmarkName_nsprefix_ + ':' if (UseCapturedNS_ and self.LandmarkName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLandmarkName>%s</%sLandmarkName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LandmarkName), input_name='LandmarkName')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AddressKeyFormat':
            obj_ = AddressKeyFormatType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AddressKeyFormat = obj_
            obj_.original_tagname_ = 'AddressKeyFormat'
        elif nodeName_ == 'Geocode':
            obj_ = GeocodeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Geocode = obj_
            obj_.original_tagname_ = 'Geocode'
        elif nodeName_ == 'LandmarkName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LandmarkName')
            value_ = self.gds_validate_string(value_, node, 'LandmarkName')
            self.LandmarkName = value_
            self.LandmarkName_nsprefix_ = child_.prefix
# end class GeocodeCandidateType


class AddressKeyFormatType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ConsigneeName=None, AddressLine=None, PoliticalDivision3=None, PoliticalDivision2=None, PoliticalDivision1=None, PostcodePrimaryLow=None, PostcodeExtendedLow=None, CountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ConsigneeName = ConsigneeName
        self.ConsigneeName_nsprefix_ = None
        self.AddressLine = AddressLine
        self.AddressLine_nsprefix_ = None
        self.PoliticalDivision3 = PoliticalDivision3
        self.PoliticalDivision3_nsprefix_ = None
        self.PoliticalDivision2 = PoliticalDivision2
        self.PoliticalDivision2_nsprefix_ = None
        self.PoliticalDivision1 = PoliticalDivision1
        self.PoliticalDivision1_nsprefix_ = None
        self.PostcodePrimaryLow = PostcodePrimaryLow
        self.PostcodePrimaryLow_nsprefix_ = None
        self.PostcodeExtendedLow = PostcodeExtendedLow
        self.PostcodeExtendedLow_nsprefix_ = None
        self.CountryCode = CountryCode
        self.CountryCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressKeyFormatType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressKeyFormatType.subclass:
            return AddressKeyFormatType.subclass(*args_, **kwargs_)
        else:
            return AddressKeyFormatType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ConsigneeName(self):
        return self.ConsigneeName
    def set_ConsigneeName(self, ConsigneeName):
        self.ConsigneeName = ConsigneeName
    def get_AddressLine(self):
        return self.AddressLine
    def set_AddressLine(self, AddressLine):
        self.AddressLine = AddressLine
    def get_PoliticalDivision3(self):
        return self.PoliticalDivision3
    def set_PoliticalDivision3(self, PoliticalDivision3):
        self.PoliticalDivision3 = PoliticalDivision3
    def get_PoliticalDivision2(self):
        return self.PoliticalDivision2
    def set_PoliticalDivision2(self, PoliticalDivision2):
        self.PoliticalDivision2 = PoliticalDivision2
    def get_PoliticalDivision1(self):
        return self.PoliticalDivision1
    def set_PoliticalDivision1(self, PoliticalDivision1):
        self.PoliticalDivision1 = PoliticalDivision1
    def get_PostcodePrimaryLow(self):
        return self.PostcodePrimaryLow
    def set_PostcodePrimaryLow(self, PostcodePrimaryLow):
        self.PostcodePrimaryLow = PostcodePrimaryLow
    def get_PostcodeExtendedLow(self):
        return self.PostcodeExtendedLow
    def set_PostcodeExtendedLow(self, PostcodeExtendedLow):
        self.PostcodeExtendedLow = PostcodeExtendedLow
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def hasContent_(self):
        if (
            self.ConsigneeName is not None or
            self.AddressLine is not None or
            self.PoliticalDivision3 is not None or
            self.PoliticalDivision2 is not None or
            self.PoliticalDivision1 is not None or
            self.PostcodePrimaryLow is not None or
            self.PostcodeExtendedLow is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AddressKeyFormatType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AddressKeyFormatType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AddressKeyFormatType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AddressKeyFormatType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AddressKeyFormatType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AddressKeyFormatType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AddressKeyFormatType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ConsigneeName is not None:
            namespaceprefix_ = self.ConsigneeName_nsprefix_ + ':' if (UseCapturedNS_ and self.ConsigneeName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConsigneeName>%s</%sConsigneeName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ConsigneeName), input_name='ConsigneeName')), namespaceprefix_ , eol_))
        if self.AddressLine is not None:
            namespaceprefix_ = self.AddressLine_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressLine_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressLine>%s</%sAddressLine>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine), input_name='AddressLine')), namespaceprefix_ , eol_))
        if self.PoliticalDivision3 is not None:
            namespaceprefix_ = self.PoliticalDivision3_nsprefix_ + ':' if (UseCapturedNS_ and self.PoliticalDivision3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPoliticalDivision3>%s</%sPoliticalDivision3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PoliticalDivision3), input_name='PoliticalDivision3')), namespaceprefix_ , eol_))
        if self.PoliticalDivision2 is not None:
            namespaceprefix_ = self.PoliticalDivision2_nsprefix_ + ':' if (UseCapturedNS_ and self.PoliticalDivision2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPoliticalDivision2>%s</%sPoliticalDivision2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PoliticalDivision2), input_name='PoliticalDivision2')), namespaceprefix_ , eol_))
        if self.PoliticalDivision1 is not None:
            namespaceprefix_ = self.PoliticalDivision1_nsprefix_ + ':' if (UseCapturedNS_ and self.PoliticalDivision1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPoliticalDivision1>%s</%sPoliticalDivision1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PoliticalDivision1), input_name='PoliticalDivision1')), namespaceprefix_ , eol_))
        if self.PostcodePrimaryLow is not None:
            namespaceprefix_ = self.PostcodePrimaryLow_nsprefix_ + ':' if (UseCapturedNS_ and self.PostcodePrimaryLow_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostcodePrimaryLow>%s</%sPostcodePrimaryLow>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostcodePrimaryLow), input_name='PostcodePrimaryLow')), namespaceprefix_ , eol_))
        if self.PostcodeExtendedLow is not None:
            namespaceprefix_ = self.PostcodeExtendedLow_nsprefix_ + ':' if (UseCapturedNS_ and self.PostcodeExtendedLow_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostcodeExtendedLow>%s</%sPostcodeExtendedLow>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostcodeExtendedLow), input_name='PostcodeExtendedLow')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ConsigneeName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ConsigneeName')
            value_ = self.gds_validate_string(value_, node, 'ConsigneeName')
            self.ConsigneeName = value_
            self.ConsigneeName_nsprefix_ = child_.prefix
        elif nodeName_ == 'AddressLine':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AddressLine')
            value_ = self.gds_validate_string(value_, node, 'AddressLine')
            self.AddressLine = value_
            self.AddressLine_nsprefix_ = child_.prefix
        elif nodeName_ == 'PoliticalDivision3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PoliticalDivision3')
            value_ = self.gds_validate_string(value_, node, 'PoliticalDivision3')
            self.PoliticalDivision3 = value_
            self.PoliticalDivision3_nsprefix_ = child_.prefix
        elif nodeName_ == 'PoliticalDivision2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PoliticalDivision2')
            value_ = self.gds_validate_string(value_, node, 'PoliticalDivision2')
            self.PoliticalDivision2 = value_
            self.PoliticalDivision2_nsprefix_ = child_.prefix
        elif nodeName_ == 'PoliticalDivision1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PoliticalDivision1')
            value_ = self.gds_validate_string(value_, node, 'PoliticalDivision1')
            self.PoliticalDivision1 = value_
            self.PoliticalDivision1_nsprefix_ = child_.prefix
        elif nodeName_ == 'PostcodePrimaryLow':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PostcodePrimaryLow')
            value_ = self.gds_validate_string(value_, node, 'PostcodePrimaryLow')
            self.PostcodePrimaryLow = value_
            self.PostcodePrimaryLow_nsprefix_ = child_.prefix
        elif nodeName_ == 'PostcodeExtendedLow':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PostcodeExtendedLow')
            value_ = self.gds_validate_string(value_, node, 'PostcodeExtendedLow')
            self.PostcodeExtendedLow = value_
            self.PostcodeExtendedLow_nsprefix_ = child_.prefix
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
# end class AddressKeyFormatType


class AdditionalChargeIndicator(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalChargeIndicator)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalChargeIndicator.subclass:
            return AdditionalChargeIndicator.subclass(*args_, **kwargs_)
        else:
            return AdditionalChargeIndicator(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AdditionalChargeIndicator', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AdditionalChargeIndicator')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AdditionalChargeIndicator':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AdditionalChargeIndicator')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AdditionalChargeIndicator', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AdditionalChargeIndicator'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AdditionalChargeIndicator', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class AdditionalChargeIndicator


class LocationAttributesType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, OptionType=None, OptionCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.OptionType = OptionType
        self.OptionType_nsprefix_ = None
        if OptionCode is None:
            self.OptionCode = []
        else:
            self.OptionCode = OptionCode
        self.OptionCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LocationAttributesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LocationAttributesType.subclass:
            return LocationAttributesType.subclass(*args_, **kwargs_)
        else:
            return LocationAttributesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_OptionType(self):
        return self.OptionType
    def set_OptionType(self, OptionType):
        self.OptionType = OptionType
    def get_OptionCode(self):
        return self.OptionCode
    def set_OptionCode(self, OptionCode):
        self.OptionCode = OptionCode
    def add_OptionCode(self, value):
        self.OptionCode.append(value)
    def insert_OptionCode_at(self, index, value):
        self.OptionCode.insert(index, value)
    def replace_OptionCode_at(self, index, value):
        self.OptionCode[index] = value
    def hasContent_(self):
        if (
            self.OptionType is not None or
            self.OptionCode
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LocationAttributesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LocationAttributesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LocationAttributesType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LocationAttributesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LocationAttributesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LocationAttributesType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LocationAttributesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OptionType is not None:
            namespaceprefix_ = self.OptionType_nsprefix_ + ':' if (UseCapturedNS_ and self.OptionType_nsprefix_) else ''
            self.OptionType.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OptionType', pretty_print=pretty_print)
        for OptionCode_ in self.OptionCode:
            namespaceprefix_ = self.OptionCode_nsprefix_ + ':' if (UseCapturedNS_ and self.OptionCode_nsprefix_) else ''
            OptionCode_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OptionCode', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'OptionType':
            obj_ = CodeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OptionType = obj_
            obj_.original_tagname_ = 'OptionType'
        elif nodeName_ == 'OptionCode':
            obj_ = OptionCodeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OptionCode.append(obj_)
            obj_.original_tagname_ = 'OptionCode'
# end class LocationAttributesType


class OptionCodeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Category=None, Code=None, Description=None, Name=None, TransportationPickUpSchedule=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Category = Category
        self.Category_nsprefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.Name = Name
        self.Name_nsprefix_ = None
        self.TransportationPickUpSchedule = TransportationPickUpSchedule
        self.TransportationPickUpSchedule_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OptionCodeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OptionCodeType.subclass:
            return OptionCodeType.subclass(*args_, **kwargs_)
        else:
            return OptionCodeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Category(self):
        return self.Category
    def set_Category(self, Category):
        self.Category = Category
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_TransportationPickUpSchedule(self):
        return self.TransportationPickUpSchedule
    def set_TransportationPickUpSchedule(self, TransportationPickUpSchedule):
        self.TransportationPickUpSchedule = TransportationPickUpSchedule
    def hasContent_(self):
        if (
            self.Category is not None or
            self.Code is not None or
            self.Description is not None or
            self.Name is not None or
            self.TransportationPickUpSchedule is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='OptionCodeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OptionCodeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OptionCodeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OptionCodeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OptionCodeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='OptionCodeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='OptionCodeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Category is not None:
            namespaceprefix_ = self.Category_nsprefix_ + ':' if (UseCapturedNS_ and self.Category_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCategory>%s</%sCategory>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Category), input_name='Category')), namespaceprefix_ , eol_))
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.TransportationPickUpSchedule is not None:
            namespaceprefix_ = self.TransportationPickUpSchedule_nsprefix_ + ':' if (UseCapturedNS_ and self.TransportationPickUpSchedule_nsprefix_) else ''
            self.TransportationPickUpSchedule.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransportationPickUpSchedule', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Category':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Category')
            value_ = self.gds_validate_string(value_, node, 'Category')
            self.Category = value_
            self.Category_nsprefix_ = child_.prefix
        elif nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'Name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Name')
            value_ = self.gds_validate_string(value_, node, 'Name')
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
        elif nodeName_ == 'TransportationPickUpSchedule':
            obj_ = TransportationPickUpScheduleType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransportationPickUpSchedule = obj_
            obj_.original_tagname_ = 'TransportationPickUpSchedule'
# end class OptionCodeType


class TransportationPickUpScheduleType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PickUp=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if PickUp is None:
            self.PickUp = []
        else:
            self.PickUp = PickUp
        self.PickUp_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransportationPickUpScheduleType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransportationPickUpScheduleType.subclass:
            return TransportationPickUpScheduleType.subclass(*args_, **kwargs_)
        else:
            return TransportationPickUpScheduleType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PickUp(self):
        return self.PickUp
    def set_PickUp(self, PickUp):
        self.PickUp = PickUp
    def add_PickUp(self, value):
        self.PickUp.append(value)
    def insert_PickUp_at(self, index, value):
        self.PickUp.insert(index, value)
    def replace_PickUp_at(self, index, value):
        self.PickUp[index] = value
    def hasContent_(self):
        if (
            self.PickUp
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TransportationPickUpScheduleType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransportationPickUpScheduleType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransportationPickUpScheduleType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransportationPickUpScheduleType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransportationPickUpScheduleType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TransportationPickUpScheduleType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TransportationPickUpScheduleType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for PickUp_ in self.PickUp:
            namespaceprefix_ = self.PickUp_nsprefix_ + ':' if (UseCapturedNS_ and self.PickUp_nsprefix_) else ''
            PickUp_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PickUp', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PickUp':
            obj_ = PickUpType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PickUp.append(obj_)
            obj_.original_tagname_ = 'PickUp'
# end class TransportationPickUpScheduleType


class PickUpType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DayOfWeek=None, PickUpDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DayOfWeek = DayOfWeek
        self.DayOfWeek_nsprefix_ = None
        self.PickUpDetails = PickUpDetails
        self.PickUpDetails_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickUpType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickUpType.subclass:
            return PickUpType.subclass(*args_, **kwargs_)
        else:
            return PickUpType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DayOfWeek(self):
        return self.DayOfWeek
    def set_DayOfWeek(self, DayOfWeek):
        self.DayOfWeek = DayOfWeek
    def get_PickUpDetails(self):
        return self.PickUpDetails
    def set_PickUpDetails(self, PickUpDetails):
        self.PickUpDetails = PickUpDetails
    def hasContent_(self):
        if (
            self.DayOfWeek is not None or
            self.PickUpDetails is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PickUpType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickUpType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PickUpType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PickUpType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PickUpType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PickUpType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PickUpType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DayOfWeek is not None:
            namespaceprefix_ = self.DayOfWeek_nsprefix_ + ':' if (UseCapturedNS_ and self.DayOfWeek_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDayOfWeek>%s</%sDayOfWeek>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DayOfWeek), input_name='DayOfWeek')), namespaceprefix_ , eol_))
        if self.PickUpDetails is not None:
            namespaceprefix_ = self.PickUpDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.PickUpDetails_nsprefix_) else ''
            self.PickUpDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PickUpDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DayOfWeek':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DayOfWeek')
            value_ = self.gds_validate_string(value_, node, 'DayOfWeek')
            self.DayOfWeek = value_
            self.DayOfWeek_nsprefix_ = child_.prefix
        elif nodeName_ == 'PickUpDetails':
            obj_ = PickUpDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PickUpDetails = obj_
            obj_.original_tagname_ = 'PickUpDetails'
# end class PickUpType


class PickUpDetailsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PickUpTime=None, NoPickUpIndicator=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PickUpTime = PickUpTime
        self.PickUpTime_nsprefix_ = None
        self.NoPickUpIndicator = NoPickUpIndicator
        self.NoPickUpIndicator_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickUpDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickUpDetailsType.subclass:
            return PickUpDetailsType.subclass(*args_, **kwargs_)
        else:
            return PickUpDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PickUpTime(self):
        return self.PickUpTime
    def set_PickUpTime(self, PickUpTime):
        self.PickUpTime = PickUpTime
    def get_NoPickUpIndicator(self):
        return self.NoPickUpIndicator
    def set_NoPickUpIndicator(self, NoPickUpIndicator):
        self.NoPickUpIndicator = NoPickUpIndicator
    def hasContent_(self):
        if (
            self.PickUpTime is not None or
            self.NoPickUpIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PickUpDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickUpDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PickUpDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PickUpDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PickUpDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PickUpDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PickUpDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PickUpTime is not None:
            namespaceprefix_ = self.PickUpTime_nsprefix_ + ':' if (UseCapturedNS_ and self.PickUpTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPickUpTime>%s</%sPickUpTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PickUpTime), input_name='PickUpTime')), namespaceprefix_ , eol_))
        if self.NoPickUpIndicator is not None:
            namespaceprefix_ = self.NoPickUpIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.NoPickUpIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoPickUpIndicator>%s</%sNoPickUpIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NoPickUpIndicator), input_name='NoPickUpIndicator')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PickUpTime':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PickUpTime')
            value_ = self.gds_validate_string(value_, node, 'PickUpTime')
            self.PickUpTime = value_
            self.PickUpTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'NoPickUpIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NoPickUpIndicator')
            value_ = self.gds_validate_string(value_, node, 'NoPickUpIndicator')
            self.NoPickUpIndicator = value_
            self.NoPickUpIndicator_nsprefix_ = child_.prefix
# end class PickUpDetailsType


class CodeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CodeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CodeType.subclass:
            return CodeType.subclass(*args_, **kwargs_)
        else:
            return CodeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CodeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CodeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CodeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CodeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CodeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CodeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CodeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class CodeType


class DropLocationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LocationID=None, IVR=None, OriginOrDestination=None, Geocode=None, AddressKeyFormat=None, PhoneNumber=None, FaxNumber=None, EMailAddress=None, LocationAttribute=None, Distance=None, SpecialInstructions=None, LatestGroundDropOffTime=None, LatestAirDropOffTime=None, AdditionalChargeIndicator=None, StandardHoursOfOperation=None, NonStandardHoursOfOperation=None, WillCallHoursOfOperation=None, Number=None, HomePageURL=None, Comments=None, AdditionalComments=None, Disclaimer=None, SLIC=None, Timezone=None, FacilityType=None, OperatingHours=None, LocalizedInstruction=None, PromotionInformation=None, SortCode=None, ServiceOfferingList=None, DisplayPhoneNumberIndicator=None, AccessPointInformation=None, LocationImage=None, LocationNewIndicator=None, PromotionalLinkURL=None, FeaturedRank=None, WillCallLocationIndicator=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.LocationID = LocationID
        self.LocationID_nsprefix_ = None
        self.IVR = IVR
        self.IVR_nsprefix_ = None
        self.OriginOrDestination = OriginOrDestination
        self.OriginOrDestination_nsprefix_ = None
        self.Geocode = Geocode
        self.Geocode_nsprefix_ = None
        self.AddressKeyFormat = AddressKeyFormat
        self.AddressKeyFormat_nsprefix_ = None
        if PhoneNumber is None:
            self.PhoneNumber = []
        else:
            self.PhoneNumber = PhoneNumber
        self.PhoneNumber_nsprefix_ = None
        self.FaxNumber = FaxNumber
        self.FaxNumber_nsprefix_ = None
        self.EMailAddress = EMailAddress
        self.EMailAddress_nsprefix_ = None
        if LocationAttribute is None:
            self.LocationAttribute = []
        else:
            self.LocationAttribute = LocationAttribute
        self.LocationAttribute_nsprefix_ = None
        self.Distance = Distance
        self.Distance_nsprefix_ = None
        if SpecialInstructions is None:
            self.SpecialInstructions = []
        else:
            self.SpecialInstructions = SpecialInstructions
        self.SpecialInstructions_nsprefix_ = None
        if LatestGroundDropOffTime is None:
            self.LatestGroundDropOffTime = []
        else:
            self.LatestGroundDropOffTime = LatestGroundDropOffTime
        self.LatestGroundDropOffTime_nsprefix_ = None
        if LatestAirDropOffTime is None:
            self.LatestAirDropOffTime = []
        else:
            self.LatestAirDropOffTime = LatestAirDropOffTime
        self.LatestAirDropOffTime_nsprefix_ = None
        self.AdditionalChargeIndicator = AdditionalChargeIndicator
        self.AdditionalChargeIndicator_nsprefix_ = None
        self.StandardHoursOfOperation = StandardHoursOfOperation
        self.StandardHoursOfOperation_nsprefix_ = None
        self.NonStandardHoursOfOperation = NonStandardHoursOfOperation
        self.NonStandardHoursOfOperation_nsprefix_ = None
        self.WillCallHoursOfOperation = WillCallHoursOfOperation
        self.WillCallHoursOfOperation_nsprefix_ = None
        self.Number = Number
        self.Number_nsprefix_ = None
        self.HomePageURL = HomePageURL
        self.HomePageURL_nsprefix_ = None
        self.Comments = Comments
        self.Comments_nsprefix_ = None
        self.AdditionalComments = AdditionalComments
        self.AdditionalComments_nsprefix_ = None
        if Disclaimer is None:
            self.Disclaimer = []
        else:
            self.Disclaimer = Disclaimer
        self.Disclaimer_nsprefix_ = None
        self.SLIC = SLIC
        self.SLIC_nsprefix_ = None
        self.Timezone = Timezone
        self.Timezone_nsprefix_ = None
        self.FacilityType = FacilityType
        self.FacilityType_nsprefix_ = None
        self.OperatingHours = OperatingHours
        self.OperatingHours_nsprefix_ = None
        if LocalizedInstruction is None:
            self.LocalizedInstruction = []
        else:
            self.LocalizedInstruction = LocalizedInstruction
        self.LocalizedInstruction_nsprefix_ = None
        if PromotionInformation is None:
            self.PromotionInformation = []
        else:
            self.PromotionInformation = PromotionInformation
        self.PromotionInformation_nsprefix_ = None
        self.SortCode = SortCode
        self.SortCode_nsprefix_ = None
        self.ServiceOfferingList = ServiceOfferingList
        self.ServiceOfferingList_nsprefix_ = None
        self.DisplayPhoneNumberIndicator = DisplayPhoneNumberIndicator
        self.DisplayPhoneNumberIndicator_nsprefix_ = None
        self.AccessPointInformation = AccessPointInformation
        self.AccessPointInformation_nsprefix_ = None
        self.LocationImage = LocationImage
        self.LocationImage_nsprefix_ = None
        self.LocationNewIndicator = LocationNewIndicator
        self.LocationNewIndicator_nsprefix_ = None
        self.PromotionalLinkURL = PromotionalLinkURL
        self.PromotionalLinkURL_nsprefix_ = None
        self.FeaturedRank = FeaturedRank
        self.FeaturedRank_nsprefix_ = None
        self.WillCallLocationIndicator = WillCallLocationIndicator
        self.WillCallLocationIndicator_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DropLocationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DropLocationType.subclass:
            return DropLocationType.subclass(*args_, **kwargs_)
        else:
            return DropLocationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LocationID(self):
        return self.LocationID
    def set_LocationID(self, LocationID):
        self.LocationID = LocationID
    def get_IVR(self):
        return self.IVR
    def set_IVR(self, IVR):
        self.IVR = IVR
    def get_OriginOrDestination(self):
        return self.OriginOrDestination
    def set_OriginOrDestination(self, OriginOrDestination):
        self.OriginOrDestination = OriginOrDestination
    def get_Geocode(self):
        return self.Geocode
    def set_Geocode(self, Geocode):
        self.Geocode = Geocode
    def get_AddressKeyFormat(self):
        return self.AddressKeyFormat
    def set_AddressKeyFormat(self, AddressKeyFormat):
        self.AddressKeyFormat = AddressKeyFormat
    def get_PhoneNumber(self):
        return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber):
        self.PhoneNumber = PhoneNumber
    def add_PhoneNumber(self, value):
        self.PhoneNumber.append(value)
    def insert_PhoneNumber_at(self, index, value):
        self.PhoneNumber.insert(index, value)
    def replace_PhoneNumber_at(self, index, value):
        self.PhoneNumber[index] = value
    def get_FaxNumber(self):
        return self.FaxNumber
    def set_FaxNumber(self, FaxNumber):
        self.FaxNumber = FaxNumber
    def get_EMailAddress(self):
        return self.EMailAddress
    def set_EMailAddress(self, EMailAddress):
        self.EMailAddress = EMailAddress
    def get_LocationAttribute(self):
        return self.LocationAttribute
    def set_LocationAttribute(self, LocationAttribute):
        self.LocationAttribute = LocationAttribute
    def add_LocationAttribute(self, value):
        self.LocationAttribute.append(value)
    def insert_LocationAttribute_at(self, index, value):
        self.LocationAttribute.insert(index, value)
    def replace_LocationAttribute_at(self, index, value):
        self.LocationAttribute[index] = value
    def get_Distance(self):
        return self.Distance
    def set_Distance(self, Distance):
        self.Distance = Distance
    def get_SpecialInstructions(self):
        return self.SpecialInstructions
    def set_SpecialInstructions(self, SpecialInstructions):
        self.SpecialInstructions = SpecialInstructions
    def add_SpecialInstructions(self, value):
        self.SpecialInstructions.append(value)
    def insert_SpecialInstructions_at(self, index, value):
        self.SpecialInstructions.insert(index, value)
    def replace_SpecialInstructions_at(self, index, value):
        self.SpecialInstructions[index] = value
    def get_LatestGroundDropOffTime(self):
        return self.LatestGroundDropOffTime
    def set_LatestGroundDropOffTime(self, LatestGroundDropOffTime):
        self.LatestGroundDropOffTime = LatestGroundDropOffTime
    def add_LatestGroundDropOffTime(self, value):
        self.LatestGroundDropOffTime.append(value)
    def insert_LatestGroundDropOffTime_at(self, index, value):
        self.LatestGroundDropOffTime.insert(index, value)
    def replace_LatestGroundDropOffTime_at(self, index, value):
        self.LatestGroundDropOffTime[index] = value
    def get_LatestAirDropOffTime(self):
        return self.LatestAirDropOffTime
    def set_LatestAirDropOffTime(self, LatestAirDropOffTime):
        self.LatestAirDropOffTime = LatestAirDropOffTime
    def add_LatestAirDropOffTime(self, value):
        self.LatestAirDropOffTime.append(value)
    def insert_LatestAirDropOffTime_at(self, index, value):
        self.LatestAirDropOffTime.insert(index, value)
    def replace_LatestAirDropOffTime_at(self, index, value):
        self.LatestAirDropOffTime[index] = value
    def get_AdditionalChargeIndicator(self):
        return self.AdditionalChargeIndicator
    def set_AdditionalChargeIndicator(self, AdditionalChargeIndicator):
        self.AdditionalChargeIndicator = AdditionalChargeIndicator
    def get_StandardHoursOfOperation(self):
        return self.StandardHoursOfOperation
    def set_StandardHoursOfOperation(self, StandardHoursOfOperation):
        self.StandardHoursOfOperation = StandardHoursOfOperation
    def get_NonStandardHoursOfOperation(self):
        return self.NonStandardHoursOfOperation
    def set_NonStandardHoursOfOperation(self, NonStandardHoursOfOperation):
        self.NonStandardHoursOfOperation = NonStandardHoursOfOperation
    def get_WillCallHoursOfOperation(self):
        return self.WillCallHoursOfOperation
    def set_WillCallHoursOfOperation(self, WillCallHoursOfOperation):
        self.WillCallHoursOfOperation = WillCallHoursOfOperation
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_HomePageURL(self):
        return self.HomePageURL
    def set_HomePageURL(self, HomePageURL):
        self.HomePageURL = HomePageURL
    def get_Comments(self):
        return self.Comments
    def set_Comments(self, Comments):
        self.Comments = Comments
    def get_AdditionalComments(self):
        return self.AdditionalComments
    def set_AdditionalComments(self, AdditionalComments):
        self.AdditionalComments = AdditionalComments
    def get_Disclaimer(self):
        return self.Disclaimer
    def set_Disclaimer(self, Disclaimer):
        self.Disclaimer = Disclaimer
    def add_Disclaimer(self, value):
        self.Disclaimer.append(value)
    def insert_Disclaimer_at(self, index, value):
        self.Disclaimer.insert(index, value)
    def replace_Disclaimer_at(self, index, value):
        self.Disclaimer[index] = value
    def get_SLIC(self):
        return self.SLIC
    def set_SLIC(self, SLIC):
        self.SLIC = SLIC
    def get_Timezone(self):
        return self.Timezone
    def set_Timezone(self, Timezone):
        self.Timezone = Timezone
    def get_FacilityType(self):
        return self.FacilityType
    def set_FacilityType(self, FacilityType):
        self.FacilityType = FacilityType
    def get_OperatingHours(self):
        return self.OperatingHours
    def set_OperatingHours(self, OperatingHours):
        self.OperatingHours = OperatingHours
    def get_LocalizedInstruction(self):
        return self.LocalizedInstruction
    def set_LocalizedInstruction(self, LocalizedInstruction):
        self.LocalizedInstruction = LocalizedInstruction
    def add_LocalizedInstruction(self, value):
        self.LocalizedInstruction.append(value)
    def insert_LocalizedInstruction_at(self, index, value):
        self.LocalizedInstruction.insert(index, value)
    def replace_LocalizedInstruction_at(self, index, value):
        self.LocalizedInstruction[index] = value
    def get_PromotionInformation(self):
        return self.PromotionInformation
    def set_PromotionInformation(self, PromotionInformation):
        self.PromotionInformation = PromotionInformation
    def add_PromotionInformation(self, value):
        self.PromotionInformation.append(value)
    def insert_PromotionInformation_at(self, index, value):
        self.PromotionInformation.insert(index, value)
    def replace_PromotionInformation_at(self, index, value):
        self.PromotionInformation[index] = value
    def get_SortCode(self):
        return self.SortCode
    def set_SortCode(self, SortCode):
        self.SortCode = SortCode
    def get_ServiceOfferingList(self):
        return self.ServiceOfferingList
    def set_ServiceOfferingList(self, ServiceOfferingList):
        self.ServiceOfferingList = ServiceOfferingList
    def get_DisplayPhoneNumberIndicator(self):
        return self.DisplayPhoneNumberIndicator
    def set_DisplayPhoneNumberIndicator(self, DisplayPhoneNumberIndicator):
        self.DisplayPhoneNumberIndicator = DisplayPhoneNumberIndicator
    def get_AccessPointInformation(self):
        return self.AccessPointInformation
    def set_AccessPointInformation(self, AccessPointInformation):
        self.AccessPointInformation = AccessPointInformation
    def get_LocationImage(self):
        return self.LocationImage
    def set_LocationImage(self, LocationImage):
        self.LocationImage = LocationImage
    def get_LocationNewIndicator(self):
        return self.LocationNewIndicator
    def set_LocationNewIndicator(self, LocationNewIndicator):
        self.LocationNewIndicator = LocationNewIndicator
    def get_PromotionalLinkURL(self):
        return self.PromotionalLinkURL
    def set_PromotionalLinkURL(self, PromotionalLinkURL):
        self.PromotionalLinkURL = PromotionalLinkURL
    def get_FeaturedRank(self):
        return self.FeaturedRank
    def set_FeaturedRank(self, FeaturedRank):
        self.FeaturedRank = FeaturedRank
    def get_WillCallLocationIndicator(self):
        return self.WillCallLocationIndicator
    def set_WillCallLocationIndicator(self, WillCallLocationIndicator):
        self.WillCallLocationIndicator = WillCallLocationIndicator
    def hasContent_(self):
        if (
            self.LocationID is not None or
            self.IVR is not None or
            self.OriginOrDestination is not None or
            self.Geocode is not None or
            self.AddressKeyFormat is not None or
            self.PhoneNumber or
            self.FaxNumber is not None or
            self.EMailAddress is not None or
            self.LocationAttribute or
            self.Distance is not None or
            self.SpecialInstructions or
            self.LatestGroundDropOffTime or
            self.LatestAirDropOffTime or
            self.AdditionalChargeIndicator is not None or
            self.StandardHoursOfOperation is not None or
            self.NonStandardHoursOfOperation is not None or
            self.WillCallHoursOfOperation is not None or
            self.Number is not None or
            self.HomePageURL is not None or
            self.Comments is not None or
            self.AdditionalComments is not None or
            self.Disclaimer or
            self.SLIC is not None or
            self.Timezone is not None or
            self.FacilityType is not None or
            self.OperatingHours is not None or
            self.LocalizedInstruction or
            self.PromotionInformation or
            self.SortCode is not None or
            self.ServiceOfferingList is not None or
            self.DisplayPhoneNumberIndicator is not None or
            self.AccessPointInformation is not None or
            self.LocationImage is not None or
            self.LocationNewIndicator is not None or
            self.PromotionalLinkURL is not None or
            self.FeaturedRank is not None or
            self.WillCallLocationIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DropLocationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DropLocationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DropLocationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DropLocationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DropLocationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DropLocationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DropLocationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LocationID is not None:
            namespaceprefix_ = self.LocationID_nsprefix_ + ':' if (UseCapturedNS_ and self.LocationID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationID>%s</%sLocationID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocationID), input_name='LocationID')), namespaceprefix_ , eol_))
        if self.IVR is not None:
            namespaceprefix_ = self.IVR_nsprefix_ + ':' if (UseCapturedNS_ and self.IVR_nsprefix_) else ''
            self.IVR.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IVR', pretty_print=pretty_print)
        if self.OriginOrDestination is not None:
            namespaceprefix_ = self.OriginOrDestination_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginOrDestination_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginOrDestination>%s</%sOriginOrDestination>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OriginOrDestination), input_name='OriginOrDestination')), namespaceprefix_ , eol_))
        if self.Geocode is not None:
            namespaceprefix_ = self.Geocode_nsprefix_ + ':' if (UseCapturedNS_ and self.Geocode_nsprefix_) else ''
            self.Geocode.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Geocode', pretty_print=pretty_print)
        if self.AddressKeyFormat is not None:
            namespaceprefix_ = self.AddressKeyFormat_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressKeyFormat_nsprefix_) else ''
            self.AddressKeyFormat.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AddressKeyFormat', pretty_print=pretty_print)
        for PhoneNumber_ in self.PhoneNumber:
            namespaceprefix_ = self.PhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhoneNumber>%s</%sPhoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(PhoneNumber_), input_name='PhoneNumber')), namespaceprefix_ , eol_))
        if self.FaxNumber is not None:
            namespaceprefix_ = self.FaxNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.FaxNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFaxNumber>%s</%sFaxNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FaxNumber), input_name='FaxNumber')), namespaceprefix_ , eol_))
        if self.EMailAddress is not None:
            namespaceprefix_ = self.EMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), namespaceprefix_ , eol_))
        for LocationAttribute_ in self.LocationAttribute:
            namespaceprefix_ = self.LocationAttribute_nsprefix_ + ':' if (UseCapturedNS_ and self.LocationAttribute_nsprefix_) else ''
            LocationAttribute_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LocationAttribute', pretty_print=pretty_print)
        if self.Distance is not None:
            namespaceprefix_ = self.Distance_nsprefix_ + ':' if (UseCapturedNS_ and self.Distance_nsprefix_) else ''
            self.Distance.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Distance', pretty_print=pretty_print)
        for SpecialInstructions_ in self.SpecialInstructions:
            namespaceprefix_ = self.SpecialInstructions_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialInstructions_nsprefix_) else ''
            SpecialInstructions_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SpecialInstructions', pretty_print=pretty_print)
        for LatestGroundDropOffTime_ in self.LatestGroundDropOffTime:
            namespaceprefix_ = self.LatestGroundDropOffTime_nsprefix_ + ':' if (UseCapturedNS_ and self.LatestGroundDropOffTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLatestGroundDropOffTime>%s</%sLatestGroundDropOffTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(LatestGroundDropOffTime_), input_name='LatestGroundDropOffTime')), namespaceprefix_ , eol_))
        for LatestAirDropOffTime_ in self.LatestAirDropOffTime:
            namespaceprefix_ = self.LatestAirDropOffTime_nsprefix_ + ':' if (UseCapturedNS_ and self.LatestAirDropOffTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLatestAirDropOffTime>%s</%sLatestAirDropOffTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(LatestAirDropOffTime_), input_name='LatestAirDropOffTime')), namespaceprefix_ , eol_))
        if self.AdditionalChargeIndicator is not None:
            namespaceprefix_ = self.AdditionalChargeIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.AdditionalChargeIndicator_nsprefix_) else ''
            self.AdditionalChargeIndicator.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AdditionalChargeIndicator', pretty_print=pretty_print)
        if self.StandardHoursOfOperation is not None:
            namespaceprefix_ = self.StandardHoursOfOperation_nsprefix_ + ':' if (UseCapturedNS_ and self.StandardHoursOfOperation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStandardHoursOfOperation>%s</%sStandardHoursOfOperation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StandardHoursOfOperation), input_name='StandardHoursOfOperation')), namespaceprefix_ , eol_))
        if self.NonStandardHoursOfOperation is not None:
            namespaceprefix_ = self.NonStandardHoursOfOperation_nsprefix_ + ':' if (UseCapturedNS_ and self.NonStandardHoursOfOperation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNonStandardHoursOfOperation>%s</%sNonStandardHoursOfOperation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NonStandardHoursOfOperation), input_name='NonStandardHoursOfOperation')), namespaceprefix_ , eol_))
        if self.WillCallHoursOfOperation is not None:
            namespaceprefix_ = self.WillCallHoursOfOperation_nsprefix_ + ':' if (UseCapturedNS_ and self.WillCallHoursOfOperation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWillCallHoursOfOperation>%s</%sWillCallHoursOfOperation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.WillCallHoursOfOperation), input_name='WillCallHoursOfOperation')), namespaceprefix_ , eol_))
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
        if self.HomePageURL is not None:
            namespaceprefix_ = self.HomePageURL_nsprefix_ + ':' if (UseCapturedNS_ and self.HomePageURL_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHomePageURL>%s</%sHomePageURL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HomePageURL), input_name='HomePageURL')), namespaceprefix_ , eol_))
        if self.Comments is not None:
            namespaceprefix_ = self.Comments_nsprefix_ + ':' if (UseCapturedNS_ and self.Comments_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComments>%s</%sComments>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Comments), input_name='Comments')), namespaceprefix_ , eol_))
        if self.AdditionalComments is not None:
            namespaceprefix_ = self.AdditionalComments_nsprefix_ + ':' if (UseCapturedNS_ and self.AdditionalComments_nsprefix_) else ''
            self.AdditionalComments.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AdditionalComments', pretty_print=pretty_print)
        for Disclaimer_ in self.Disclaimer:
            namespaceprefix_ = self.Disclaimer_nsprefix_ + ':' if (UseCapturedNS_ and self.Disclaimer_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDisclaimer>%s</%sDisclaimer>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Disclaimer_), input_name='Disclaimer')), namespaceprefix_ , eol_))
        if self.SLIC is not None:
            namespaceprefix_ = self.SLIC_nsprefix_ + ':' if (UseCapturedNS_ and self.SLIC_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSLIC>%s</%sSLIC>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SLIC), input_name='SLIC')), namespaceprefix_ , eol_))
        if self.Timezone is not None:
            namespaceprefix_ = self.Timezone_nsprefix_ + ':' if (UseCapturedNS_ and self.Timezone_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimezone>%s</%sTimezone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Timezone), input_name='Timezone')), namespaceprefix_ , eol_))
        if self.FacilityType is not None:
            namespaceprefix_ = self.FacilityType_nsprefix_ + ':' if (UseCapturedNS_ and self.FacilityType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFacilityType>%s</%sFacilityType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FacilityType), input_name='FacilityType')), namespaceprefix_ , eol_))
        if self.OperatingHours is not None:
            namespaceprefix_ = self.OperatingHours_nsprefix_ + ':' if (UseCapturedNS_ and self.OperatingHours_nsprefix_) else ''
            self.OperatingHours.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OperatingHours', pretty_print=pretty_print)
        for LocalizedInstruction_ in self.LocalizedInstruction:
            namespaceprefix_ = self.LocalizedInstruction_nsprefix_ + ':' if (UseCapturedNS_ and self.LocalizedInstruction_nsprefix_) else ''
            LocalizedInstruction_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LocalizedInstruction', pretty_print=pretty_print)
        for PromotionInformation_ in self.PromotionInformation:
            namespaceprefix_ = self.PromotionInformation_nsprefix_ + ':' if (UseCapturedNS_ and self.PromotionInformation_nsprefix_) else ''
            PromotionInformation_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PromotionInformation', pretty_print=pretty_print)
        if self.SortCode is not None:
            namespaceprefix_ = self.SortCode_nsprefix_ + ':' if (UseCapturedNS_ and self.SortCode_nsprefix_) else ''
            self.SortCode.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SortCode', pretty_print=pretty_print)
        if self.ServiceOfferingList is not None:
            namespaceprefix_ = self.ServiceOfferingList_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceOfferingList_nsprefix_) else ''
            self.ServiceOfferingList.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ServiceOfferingList', pretty_print=pretty_print)
        if self.DisplayPhoneNumberIndicator is not None:
            namespaceprefix_ = self.DisplayPhoneNumberIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.DisplayPhoneNumberIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDisplayPhoneNumberIndicator>%s</%sDisplayPhoneNumberIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DisplayPhoneNumberIndicator), input_name='DisplayPhoneNumberIndicator')), namespaceprefix_ , eol_))
        if self.AccessPointInformation is not None:
            namespaceprefix_ = self.AccessPointInformation_nsprefix_ + ':' if (UseCapturedNS_ and self.AccessPointInformation_nsprefix_) else ''
            self.AccessPointInformation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AccessPointInformation', pretty_print=pretty_print)
        if self.LocationImage is not None:
            namespaceprefix_ = self.LocationImage_nsprefix_ + ':' if (UseCapturedNS_ and self.LocationImage_nsprefix_) else ''
            self.LocationImage.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LocationImage', pretty_print=pretty_print)
        if self.LocationNewIndicator is not None:
            namespaceprefix_ = self.LocationNewIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.LocationNewIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationNewIndicator>%s</%sLocationNewIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocationNewIndicator), input_name='LocationNewIndicator')), namespaceprefix_ , eol_))
        if self.PromotionalLinkURL is not None:
            namespaceprefix_ = self.PromotionalLinkURL_nsprefix_ + ':' if (UseCapturedNS_ and self.PromotionalLinkURL_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPromotionalLinkURL>%s</%sPromotionalLinkURL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PromotionalLinkURL), input_name='PromotionalLinkURL')), namespaceprefix_ , eol_))
        if self.FeaturedRank is not None:
            namespaceprefix_ = self.FeaturedRank_nsprefix_ + ':' if (UseCapturedNS_ and self.FeaturedRank_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFeaturedRank>%s</%sFeaturedRank>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FeaturedRank), input_name='FeaturedRank')), namespaceprefix_ , eol_))
        if self.WillCallLocationIndicator is not None:
            namespaceprefix_ = self.WillCallLocationIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.WillCallLocationIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWillCallLocationIndicator>%s</%sWillCallLocationIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.WillCallLocationIndicator), input_name='WillCallLocationIndicator')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LocationID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocationID')
            value_ = self.gds_validate_string(value_, node, 'LocationID')
            self.LocationID = value_
            self.LocationID_nsprefix_ = child_.prefix
        elif nodeName_ == 'IVR':
            obj_ = IVRType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.IVR = obj_
            obj_.original_tagname_ = 'IVR'
        elif nodeName_ == 'OriginOrDestination':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OriginOrDestination')
            value_ = self.gds_validate_string(value_, node, 'OriginOrDestination')
            self.OriginOrDestination = value_
            self.OriginOrDestination_nsprefix_ = child_.prefix
        elif nodeName_ == 'Geocode':
            obj_ = GeocodeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Geocode = obj_
            obj_.original_tagname_ = 'Geocode'
        elif nodeName_ == 'AddressKeyFormat':
            obj_ = AddressKeyFormatType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AddressKeyFormat = obj_
            obj_.original_tagname_ = 'AddressKeyFormat'
        elif nodeName_ == 'PhoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhoneNumber')
            value_ = self.gds_validate_string(value_, node, 'PhoneNumber')
            self.PhoneNumber.append(value_)
            self.PhoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'FaxNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FaxNumber')
            value_ = self.gds_validate_string(value_, node, 'FaxNumber')
            self.FaxNumber = value_
            self.FaxNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'EMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EMailAddress')
            value_ = self.gds_validate_string(value_, node, 'EMailAddress')
            self.EMailAddress = value_
            self.EMailAddress_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocationAttribute':
            obj_ = LocationAttributesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LocationAttribute.append(obj_)
            obj_.original_tagname_ = 'LocationAttribute'
        elif nodeName_ == 'Distance':
            obj_ = DistanceType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Distance = obj_
            obj_.original_tagname_ = 'Distance'
        elif nodeName_ == 'SpecialInstructions':
            obj_ = SpecialInstructionsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SpecialInstructions.append(obj_)
            obj_.original_tagname_ = 'SpecialInstructions'
        elif nodeName_ == 'LatestGroundDropOffTime':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LatestGroundDropOffTime')
            value_ = self.gds_validate_string(value_, node, 'LatestGroundDropOffTime')
            self.LatestGroundDropOffTime.append(value_)
            self.LatestGroundDropOffTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'LatestAirDropOffTime':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LatestAirDropOffTime')
            value_ = self.gds_validate_string(value_, node, 'LatestAirDropOffTime')
            self.LatestAirDropOffTime.append(value_)
            self.LatestAirDropOffTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'AdditionalChargeIndicator':
            obj_ = AdditionalChargeIndicator.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AdditionalChargeIndicator = obj_
            obj_.original_tagname_ = 'AdditionalChargeIndicator'
        elif nodeName_ == 'StandardHoursOfOperation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StandardHoursOfOperation')
            value_ = self.gds_validate_string(value_, node, 'StandardHoursOfOperation')
            self.StandardHoursOfOperation = value_
            self.StandardHoursOfOperation_nsprefix_ = child_.prefix
        elif nodeName_ == 'NonStandardHoursOfOperation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NonStandardHoursOfOperation')
            value_ = self.gds_validate_string(value_, node, 'NonStandardHoursOfOperation')
            self.NonStandardHoursOfOperation = value_
            self.NonStandardHoursOfOperation_nsprefix_ = child_.prefix
        elif nodeName_ == 'WillCallHoursOfOperation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'WillCallHoursOfOperation')
            value_ = self.gds_validate_string(value_, node, 'WillCallHoursOfOperation')
            self.WillCallHoursOfOperation = value_
            self.WillCallHoursOfOperation_nsprefix_ = child_.prefix
        elif nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
        elif nodeName_ == 'HomePageURL':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HomePageURL')
            value_ = self.gds_validate_string(value_, node, 'HomePageURL')
            self.HomePageURL = value_
            self.HomePageURL_nsprefix_ = child_.prefix
        elif nodeName_ == 'Comments':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Comments')
            value_ = self.gds_validate_string(value_, node, 'Comments')
            self.Comments = value_
            self.Comments_nsprefix_ = child_.prefix
        elif nodeName_ == 'AdditionalComments':
            obj_ = AdditionalCommentsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AdditionalComments = obj_
            obj_.original_tagname_ = 'AdditionalComments'
        elif nodeName_ == 'Disclaimer':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Disclaimer')
            value_ = self.gds_validate_string(value_, node, 'Disclaimer')
            self.Disclaimer.append(value_)
            self.Disclaimer_nsprefix_ = child_.prefix
        elif nodeName_ == 'SLIC':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SLIC')
            value_ = self.gds_validate_string(value_, node, 'SLIC')
            self.SLIC = value_
            self.SLIC_nsprefix_ = child_.prefix
        elif nodeName_ == 'Timezone':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Timezone')
            value_ = self.gds_validate_string(value_, node, 'Timezone')
            self.Timezone = value_
            self.Timezone_nsprefix_ = child_.prefix
        elif nodeName_ == 'FacilityType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FacilityType')
            value_ = self.gds_validate_string(value_, node, 'FacilityType')
            self.FacilityType = value_
            self.FacilityType_nsprefix_ = child_.prefix
        elif nodeName_ == 'OperatingHours':
            obj_ = OperatingHoursType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OperatingHours = obj_
            obj_.original_tagname_ = 'OperatingHours'
        elif nodeName_ == 'LocalizedInstruction':
            obj_ = LocalizedInstructionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LocalizedInstruction.append(obj_)
            obj_.original_tagname_ = 'LocalizedInstruction'
        elif nodeName_ == 'PromotionInformation':
            obj_ = PromotionInformationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PromotionInformation.append(obj_)
            obj_.original_tagname_ = 'PromotionInformation'
        elif nodeName_ == 'SortCode':
            obj_ = SortCodeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SortCode = obj_
            obj_.original_tagname_ = 'SortCode'
        elif nodeName_ == 'ServiceOfferingList':
            obj_ = ServiceOfferingListType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ServiceOfferingList = obj_
            obj_.original_tagname_ = 'ServiceOfferingList'
        elif nodeName_ == 'DisplayPhoneNumberIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DisplayPhoneNumberIndicator')
            value_ = self.gds_validate_string(value_, node, 'DisplayPhoneNumberIndicator')
            self.DisplayPhoneNumberIndicator = value_
            self.DisplayPhoneNumberIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'AccessPointInformation':
            obj_ = AccessPointInformationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AccessPointInformation = obj_
            obj_.original_tagname_ = 'AccessPointInformation'
        elif nodeName_ == 'LocationImage':
            obj_ = LocationImageType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LocationImage = obj_
            obj_.original_tagname_ = 'LocationImage'
        elif nodeName_ == 'LocationNewIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocationNewIndicator')
            value_ = self.gds_validate_string(value_, node, 'LocationNewIndicator')
            self.LocationNewIndicator = value_
            self.LocationNewIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'PromotionalLinkURL':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PromotionalLinkURL')
            value_ = self.gds_validate_string(value_, node, 'PromotionalLinkURL')
            self.PromotionalLinkURL = value_
            self.PromotionalLinkURL_nsprefix_ = child_.prefix
        elif nodeName_ == 'FeaturedRank':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FeaturedRank')
            value_ = self.gds_validate_string(value_, node, 'FeaturedRank')
            self.FeaturedRank = value_
            self.FeaturedRank_nsprefix_ = child_.prefix
        elif nodeName_ == 'WillCallLocationIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'WillCallLocationIndicator')
            value_ = self.gds_validate_string(value_, node, 'WillCallLocationIndicator')
            self.WillCallLocationIndicator = value_
            self.WillCallLocationIndicator_nsprefix_ = child_.prefix
# end class DropLocationType


class IVRType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PhraseID=None, TextToSpeechIndicator=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PhraseID = PhraseID
        self.PhraseID_nsprefix_ = None
        self.TextToSpeechIndicator = TextToSpeechIndicator
        self.TextToSpeechIndicator_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IVRType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IVRType.subclass:
            return IVRType.subclass(*args_, **kwargs_)
        else:
            return IVRType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PhraseID(self):
        return self.PhraseID
    def set_PhraseID(self, PhraseID):
        self.PhraseID = PhraseID
    def get_TextToSpeechIndicator(self):
        return self.TextToSpeechIndicator
    def set_TextToSpeechIndicator(self, TextToSpeechIndicator):
        self.TextToSpeechIndicator = TextToSpeechIndicator
    def hasContent_(self):
        if (
            self.PhraseID is not None or
            self.TextToSpeechIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='IVRType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IVRType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'IVRType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IVRType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IVRType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='IVRType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='IVRType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PhraseID is not None:
            namespaceprefix_ = self.PhraseID_nsprefix_ + ':' if (UseCapturedNS_ and self.PhraseID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhraseID>%s</%sPhraseID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhraseID), input_name='PhraseID')), namespaceprefix_ , eol_))
        if self.TextToSpeechIndicator is not None:
            namespaceprefix_ = self.TextToSpeechIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.TextToSpeechIndicator_nsprefix_) else ''
            self.TextToSpeechIndicator.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TextToSpeechIndicator', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PhraseID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhraseID')
            value_ = self.gds_validate_string(value_, node, 'PhraseID')
            self.PhraseID = value_
            self.PhraseID_nsprefix_ = child_.prefix
        elif nodeName_ == 'TextToSpeechIndicator':
            obj_ = TextToSpeechIndicator.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TextToSpeechIndicator = obj_
            obj_.original_tagname_ = 'TextToSpeechIndicator'
# end class IVRType


class TextToSpeechIndicator(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TextToSpeechIndicator)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TextToSpeechIndicator.subclass:
            return TextToSpeechIndicator.subclass(*args_, **kwargs_)
        else:
            return TextToSpeechIndicator(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TextToSpeechIndicator', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TextToSpeechIndicator')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TextToSpeechIndicator':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TextToSpeechIndicator')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TextToSpeechIndicator', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TextToSpeechIndicator'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TextToSpeechIndicator', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class TextToSpeechIndicator


class UnitOfMeasurementType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UnitOfMeasurementType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UnitOfMeasurementType.subclass:
            return UnitOfMeasurementType.subclass(*args_, **kwargs_)
        else:
            return UnitOfMeasurementType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='UnitOfMeasurementType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UnitOfMeasurementType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UnitOfMeasurementType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UnitOfMeasurementType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UnitOfMeasurementType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='UnitOfMeasurementType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='UnitOfMeasurementType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class UnitOfMeasurementType


class DistanceType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Value=None, UnitOfMeasurement=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.UnitOfMeasurement_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DistanceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DistanceType.subclass:
            return DistanceType.subclass(*args_, **kwargs_)
        else:
            return DistanceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def get_UnitOfMeasurement(self):
        return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement):
        self.UnitOfMeasurement = UnitOfMeasurement
    def hasContent_(self):
        if (
            self.Value is not None or
            self.UnitOfMeasurement is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DistanceType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DistanceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DistanceType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DistanceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DistanceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DistanceType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DistanceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
        if self.UnitOfMeasurement is not None:
            namespaceprefix_ = self.UnitOfMeasurement_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitOfMeasurement_nsprefix_) else ''
            self.UnitOfMeasurement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UnitOfMeasurement', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = UnitOfMeasurementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
# end class DistanceType


class ImageType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Image=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.Type_nsprefix_ = None
        self.Image = Image
        self.Image_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ImageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ImageType.subclass:
            return ImageType.subclass(*args_, **kwargs_)
        else:
            return ImageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Image(self):
        return self.Image
    def set_Image(self, Image):
        self.Image = Image
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Image is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ImageType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ImageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ImageType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ImageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ImageType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ImageType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ImageType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Image is not None:
            namespaceprefix_ = self.Image_nsprefix_ + ':' if (UseCapturedNS_ and self.Image_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sImage>%s</%sImage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Image), input_name='Image')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
        elif nodeName_ == 'Image':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Image')
            value_ = self.gds_validate_string(value_, node, 'Image')
            self.Image = value_
            self.Image_nsprefix_ = child_.prefix
# end class ImageType


class SpecialInstructionsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Segment=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Segment is None:
            self.Segment = []
        else:
            self.Segment = Segment
        self.Segment_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SpecialInstructionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SpecialInstructionsType.subclass:
            return SpecialInstructionsType.subclass(*args_, **kwargs_)
        else:
            return SpecialInstructionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Segment(self):
        return self.Segment
    def set_Segment(self, Segment):
        self.Segment = Segment
    def add_Segment(self, value):
        self.Segment.append(value)
    def insert_Segment_at(self, index, value):
        self.Segment.insert(index, value)
    def replace_Segment_at(self, index, value):
        self.Segment[index] = value
    def hasContent_(self):
        if (
            self.Segment
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SpecialInstructionsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SpecialInstructionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SpecialInstructionsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SpecialInstructionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SpecialInstructionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SpecialInstructionsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SpecialInstructionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Segment_ in self.Segment:
            namespaceprefix_ = self.Segment_nsprefix_ + ':' if (UseCapturedNS_ and self.Segment_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSegment>%s</%sSegment>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Segment_), input_name='Segment')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Segment':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Segment')
            value_ = self.gds_validate_string(value_, node, 'Segment')
            self.Segment.append(value_)
            self.Segment_nsprefix_ = child_.prefix
# end class SpecialInstructionsType


class MapDimensionsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Height=None, Width=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Height = Height
        self.Height_nsprefix_ = None
        self.Width = Width
        self.Width_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MapDimensionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MapDimensionsType.subclass:
            return MapDimensionsType.subclass(*args_, **kwargs_)
        else:
            return MapDimensionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Height(self):
        return self.Height
    def set_Height(self, Height):
        self.Height = Height
    def get_Width(self):
        return self.Width
    def set_Width(self, Width):
        self.Width = Width
    def hasContent_(self):
        if (
            self.Height is not None or
            self.Width is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MapDimensionsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MapDimensionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MapDimensionsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MapDimensionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MapDimensionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MapDimensionsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MapDimensionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Height is not None:
            namespaceprefix_ = self.Height_nsprefix_ + ':' if (UseCapturedNS_ and self.Height_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHeight>%s</%sHeight>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Height), input_name='Height')), namespaceprefix_ , eol_))
        if self.Width is not None:
            namespaceprefix_ = self.Width_nsprefix_ + ':' if (UseCapturedNS_ and self.Width_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWidth>%s</%sWidth>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Width), input_name='Width')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Height':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Height')
            value_ = self.gds_validate_string(value_, node, 'Height')
            self.Height = value_
            self.Height_nsprefix_ = child_.prefix
        elif nodeName_ == 'Width':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Width')
            value_ = self.gds_validate_string(value_, node, 'Width')
            self.Width = value_
            self.Width_nsprefix_ = child_.prefix
# end class MapDimensionsType


class ImageMapType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LocationID=None, XCoordinate=None, YCoordinate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.LocationID = LocationID
        self.LocationID_nsprefix_ = None
        self.XCoordinate = XCoordinate
        self.XCoordinate_nsprefix_ = None
        self.YCoordinate = YCoordinate
        self.YCoordinate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ImageMapType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ImageMapType.subclass:
            return ImageMapType.subclass(*args_, **kwargs_)
        else:
            return ImageMapType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LocationID(self):
        return self.LocationID
    def set_LocationID(self, LocationID):
        self.LocationID = LocationID
    def get_XCoordinate(self):
        return self.XCoordinate
    def set_XCoordinate(self, XCoordinate):
        self.XCoordinate = XCoordinate
    def get_YCoordinate(self):
        return self.YCoordinate
    def set_YCoordinate(self, YCoordinate):
        self.YCoordinate = YCoordinate
    def hasContent_(self):
        if (
            self.LocationID is not None or
            self.XCoordinate is not None or
            self.YCoordinate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ImageMapType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ImageMapType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ImageMapType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ImageMapType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ImageMapType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ImageMapType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ImageMapType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LocationID is not None:
            namespaceprefix_ = self.LocationID_nsprefix_ + ':' if (UseCapturedNS_ and self.LocationID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationID>%s</%sLocationID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocationID), input_name='LocationID')), namespaceprefix_ , eol_))
        if self.XCoordinate is not None:
            namespaceprefix_ = self.XCoordinate_nsprefix_ + ':' if (UseCapturedNS_ and self.XCoordinate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sXCoordinate>%s</%sXCoordinate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.XCoordinate), input_name='XCoordinate')), namespaceprefix_ , eol_))
        if self.YCoordinate is not None:
            namespaceprefix_ = self.YCoordinate_nsprefix_ + ':' if (UseCapturedNS_ and self.YCoordinate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sYCoordinate>%s</%sYCoordinate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.YCoordinate), input_name='YCoordinate')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LocationID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocationID')
            value_ = self.gds_validate_string(value_, node, 'LocationID')
            self.LocationID = value_
            self.LocationID_nsprefix_ = child_.prefix
        elif nodeName_ == 'XCoordinate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'XCoordinate')
            value_ = self.gds_validate_string(value_, node, 'XCoordinate')
            self.XCoordinate = value_
            self.XCoordinate_nsprefix_ = child_.prefix
        elif nodeName_ == 'YCoordinate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'YCoordinate')
            value_ = self.gds_validate_string(value_, node, 'YCoordinate')
            self.YCoordinate = value_
            self.YCoordinate_nsprefix_ = child_.prefix
# end class ImageMapType


class DirectionsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Segment=None, Distance=None, Time=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Segment = Segment
        self.Segment_nsprefix_ = None
        self.Distance = Distance
        self.Distance_nsprefix_ = None
        self.Time = Time
        self.Time_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DirectionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DirectionsType.subclass:
            return DirectionsType.subclass(*args_, **kwargs_)
        else:
            return DirectionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Segment(self):
        return self.Segment
    def set_Segment(self, Segment):
        self.Segment = Segment
    def get_Distance(self):
        return self.Distance
    def set_Distance(self, Distance):
        self.Distance = Distance
    def get_Time(self):
        return self.Time
    def set_Time(self, Time):
        self.Time = Time
    def hasContent_(self):
        if (
            self.Segment is not None or
            self.Distance is not None or
            self.Time is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DirectionsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DirectionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DirectionsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DirectionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DirectionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DirectionsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DirectionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Segment is not None:
            namespaceprefix_ = self.Segment_nsprefix_ + ':' if (UseCapturedNS_ and self.Segment_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSegment>%s</%sSegment>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Segment), input_name='Segment')), namespaceprefix_ , eol_))
        if self.Distance is not None:
            namespaceprefix_ = self.Distance_nsprefix_ + ':' if (UseCapturedNS_ and self.Distance_nsprefix_) else ''
            self.Distance.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Distance', pretty_print=pretty_print)
        if self.Time is not None:
            namespaceprefix_ = self.Time_nsprefix_ + ':' if (UseCapturedNS_ and self.Time_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTime>%s</%sTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Time), input_name='Time')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Segment':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Segment')
            value_ = self.gds_validate_string(value_, node, 'Segment')
            self.Segment = value_
            self.Segment_nsprefix_ = child_.prefix
        elif nodeName_ == 'Distance':
            obj_ = DistanceType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Distance = obj_
            obj_.original_tagname_ = 'Distance'
        elif nodeName_ == 'Time':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Time')
            value_ = self.gds_validate_string(value_, node, 'Time')
            self.Time = value_
            self.Time_nsprefix_ = child_.prefix
# end class DirectionsType


class TotalDistanceType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Distance=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Distance = Distance
        self.Distance_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TotalDistanceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TotalDistanceType.subclass:
            return TotalDistanceType.subclass(*args_, **kwargs_)
        else:
            return TotalDistanceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Distance(self):
        return self.Distance
    def set_Distance(self, Distance):
        self.Distance = Distance
    def hasContent_(self):
        if (
            self.Distance is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TotalDistanceType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TotalDistanceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TotalDistanceType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TotalDistanceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TotalDistanceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TotalDistanceType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TotalDistanceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Distance is not None:
            namespaceprefix_ = self.Distance_nsprefix_ + ':' if (UseCapturedNS_ and self.Distance_nsprefix_) else ''
            self.Distance.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Distance', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Distance':
            obj_ = DistanceType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Distance = obj_
            obj_.original_tagname_ = 'Distance'
# end class TotalDistanceType


class LocalizedInstructionType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Locale=None, Last50ftInstruction=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Locale = Locale
        self.Locale_nsprefix_ = None
        self.Last50ftInstruction = Last50ftInstruction
        self.Last50ftInstruction_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LocalizedInstructionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LocalizedInstructionType.subclass:
            return LocalizedInstructionType.subclass(*args_, **kwargs_)
        else:
            return LocalizedInstructionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Locale(self):
        return self.Locale
    def set_Locale(self, Locale):
        self.Locale = Locale
    def get_Last50ftInstruction(self):
        return self.Last50ftInstruction
    def set_Last50ftInstruction(self, Last50ftInstruction):
        self.Last50ftInstruction = Last50ftInstruction
    def hasContent_(self):
        if (
            self.Locale is not None or
            self.Last50ftInstruction is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LocalizedInstructionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LocalizedInstructionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LocalizedInstructionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LocalizedInstructionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LocalizedInstructionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LocalizedInstructionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LocalizedInstructionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Locale is not None:
            namespaceprefix_ = self.Locale_nsprefix_ + ':' if (UseCapturedNS_ and self.Locale_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocale>%s</%sLocale>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Locale), input_name='Locale')), namespaceprefix_ , eol_))
        if self.Last50ftInstruction is not None:
            namespaceprefix_ = self.Last50ftInstruction_nsprefix_ + ':' if (UseCapturedNS_ and self.Last50ftInstruction_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLast50ftInstruction>%s</%sLast50ftInstruction>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Last50ftInstruction), input_name='Last50ftInstruction')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Locale':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Locale')
            value_ = self.gds_validate_string(value_, node, 'Locale')
            self.Locale = value_
            self.Locale_nsprefix_ = child_.prefix
        elif nodeName_ == 'Last50ftInstruction':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Last50ftInstruction')
            value_ = self.gds_validate_string(value_, node, 'Last50ftInstruction')
            self.Last50ftInstruction = value_
            self.Last50ftInstruction_nsprefix_ = child_.prefix
# end class LocalizedInstructionType


class OperatingHoursType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, StandardHours=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if StandardHours is None:
            self.StandardHours = []
        else:
            self.StandardHours = StandardHours
        self.StandardHours_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OperatingHoursType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OperatingHoursType.subclass:
            return OperatingHoursType.subclass(*args_, **kwargs_)
        else:
            return OperatingHoursType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_StandardHours(self):
        return self.StandardHours
    def set_StandardHours(self, StandardHours):
        self.StandardHours = StandardHours
    def add_StandardHours(self, value):
        self.StandardHours.append(value)
    def insert_StandardHours_at(self, index, value):
        self.StandardHours.insert(index, value)
    def replace_StandardHours_at(self, index, value):
        self.StandardHours[index] = value
    def hasContent_(self):
        if (
            self.StandardHours
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='OperatingHoursType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OperatingHoursType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OperatingHoursType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OperatingHoursType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OperatingHoursType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='OperatingHoursType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='OperatingHoursType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for StandardHours_ in self.StandardHours:
            namespaceprefix_ = self.StandardHours_nsprefix_ + ':' if (UseCapturedNS_ and self.StandardHours_nsprefix_) else ''
            StandardHours_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='StandardHours', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'StandardHours':
            obj_ = StandardHoursType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.StandardHours.append(obj_)
            obj_.original_tagname_ = 'StandardHours'
# end class OperatingHoursType


class StandardHoursType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HoursType=None, DayOfWeek=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HoursType = HoursType
        self.HoursType_nsprefix_ = None
        if DayOfWeek is None:
            self.DayOfWeek = []
        else:
            self.DayOfWeek = DayOfWeek
        self.DayOfWeek_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StandardHoursType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StandardHoursType.subclass:
            return StandardHoursType.subclass(*args_, **kwargs_)
        else:
            return StandardHoursType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HoursType(self):
        return self.HoursType
    def set_HoursType(self, HoursType):
        self.HoursType = HoursType
    def get_DayOfWeek(self):
        return self.DayOfWeek
    def set_DayOfWeek(self, DayOfWeek):
        self.DayOfWeek = DayOfWeek
    def add_DayOfWeek(self, value):
        self.DayOfWeek.append(value)
    def insert_DayOfWeek_at(self, index, value):
        self.DayOfWeek.insert(index, value)
    def replace_DayOfWeek_at(self, index, value):
        self.DayOfWeek[index] = value
    def hasContent_(self):
        if (
            self.HoursType is not None or
            self.DayOfWeek
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='StandardHoursType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StandardHoursType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'StandardHoursType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='StandardHoursType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='StandardHoursType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='StandardHoursType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='StandardHoursType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HoursType is not None:
            namespaceprefix_ = self.HoursType_nsprefix_ + ':' if (UseCapturedNS_ and self.HoursType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHoursType>%s</%sHoursType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HoursType), input_name='HoursType')), namespaceprefix_ , eol_))
        for DayOfWeek_ in self.DayOfWeek:
            namespaceprefix_ = self.DayOfWeek_nsprefix_ + ':' if (UseCapturedNS_ and self.DayOfWeek_nsprefix_) else ''
            DayOfWeek_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DayOfWeek', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HoursType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HoursType')
            value_ = self.gds_validate_string(value_, node, 'HoursType')
            self.HoursType = value_
            self.HoursType_nsprefix_ = child_.prefix
        elif nodeName_ == 'DayOfWeek':
            obj_ = DayOfWeekType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DayOfWeek.append(obj_)
            obj_.original_tagname_ = 'DayOfWeek'
# end class StandardHoursType


class DayOfWeekType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Day=None, OpenHours=None, CloseHours=None, LatestDropOffHours=None, PrepHours=None, ClosedIndicator=None, Open24HoursIndicator=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Day = Day
        self.Day_nsprefix_ = None
        self.OpenHours = OpenHours
        self.OpenHours_nsprefix_ = None
        self.CloseHours = CloseHours
        self.CloseHours_nsprefix_ = None
        self.LatestDropOffHours = LatestDropOffHours
        self.LatestDropOffHours_nsprefix_ = None
        self.PrepHours = PrepHours
        self.PrepHours_nsprefix_ = None
        self.ClosedIndicator = ClosedIndicator
        self.ClosedIndicator_nsprefix_ = None
        self.Open24HoursIndicator = Open24HoursIndicator
        self.Open24HoursIndicator_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DayOfWeekType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DayOfWeekType.subclass:
            return DayOfWeekType.subclass(*args_, **kwargs_)
        else:
            return DayOfWeekType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Day(self):
        return self.Day
    def set_Day(self, Day):
        self.Day = Day
    def get_OpenHours(self):
        return self.OpenHours
    def set_OpenHours(self, OpenHours):
        self.OpenHours = OpenHours
    def get_CloseHours(self):
        return self.CloseHours
    def set_CloseHours(self, CloseHours):
        self.CloseHours = CloseHours
    def get_LatestDropOffHours(self):
        return self.LatestDropOffHours
    def set_LatestDropOffHours(self, LatestDropOffHours):
        self.LatestDropOffHours = LatestDropOffHours
    def get_PrepHours(self):
        return self.PrepHours
    def set_PrepHours(self, PrepHours):
        self.PrepHours = PrepHours
    def get_ClosedIndicator(self):
        return self.ClosedIndicator
    def set_ClosedIndicator(self, ClosedIndicator):
        self.ClosedIndicator = ClosedIndicator
    def get_Open24HoursIndicator(self):
        return self.Open24HoursIndicator
    def set_Open24HoursIndicator(self, Open24HoursIndicator):
        self.Open24HoursIndicator = Open24HoursIndicator
    def hasContent_(self):
        if (
            self.Day is not None or
            self.OpenHours is not None or
            self.CloseHours is not None or
            self.LatestDropOffHours is not None or
            self.PrepHours is not None or
            self.ClosedIndicator is not None or
            self.Open24HoursIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DayOfWeekType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DayOfWeekType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DayOfWeekType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DayOfWeekType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DayOfWeekType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DayOfWeekType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DayOfWeekType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Day is not None:
            namespaceprefix_ = self.Day_nsprefix_ + ':' if (UseCapturedNS_ and self.Day_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDay>%s</%sDay>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Day), input_name='Day')), namespaceprefix_ , eol_))
        if self.OpenHours is not None:
            namespaceprefix_ = self.OpenHours_nsprefix_ + ':' if (UseCapturedNS_ and self.OpenHours_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOpenHours>%s</%sOpenHours>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OpenHours), input_name='OpenHours')), namespaceprefix_ , eol_))
        if self.CloseHours is not None:
            namespaceprefix_ = self.CloseHours_nsprefix_ + ':' if (UseCapturedNS_ and self.CloseHours_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCloseHours>%s</%sCloseHours>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CloseHours), input_name='CloseHours')), namespaceprefix_ , eol_))
        if self.LatestDropOffHours is not None:
            namespaceprefix_ = self.LatestDropOffHours_nsprefix_ + ':' if (UseCapturedNS_ and self.LatestDropOffHours_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLatestDropOffHours>%s</%sLatestDropOffHours>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LatestDropOffHours), input_name='LatestDropOffHours')), namespaceprefix_ , eol_))
        if self.PrepHours is not None:
            namespaceprefix_ = self.PrepHours_nsprefix_ + ':' if (UseCapturedNS_ and self.PrepHours_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrepHours>%s</%sPrepHours>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrepHours), input_name='PrepHours')), namespaceprefix_ , eol_))
        if self.ClosedIndicator is not None:
            namespaceprefix_ = self.ClosedIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.ClosedIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClosedIndicator>%s</%sClosedIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClosedIndicator), input_name='ClosedIndicator')), namespaceprefix_ , eol_))
        if self.Open24HoursIndicator is not None:
            namespaceprefix_ = self.Open24HoursIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.Open24HoursIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOpen24HoursIndicator>%s</%sOpen24HoursIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Open24HoursIndicator), input_name='Open24HoursIndicator')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Day':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Day')
            value_ = self.gds_validate_string(value_, node, 'Day')
            self.Day = value_
            self.Day_nsprefix_ = child_.prefix
        elif nodeName_ == 'OpenHours':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OpenHours')
            value_ = self.gds_validate_string(value_, node, 'OpenHours')
            self.OpenHours = value_
            self.OpenHours_nsprefix_ = child_.prefix
        elif nodeName_ == 'CloseHours':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CloseHours')
            value_ = self.gds_validate_string(value_, node, 'CloseHours')
            self.CloseHours = value_
            self.CloseHours_nsprefix_ = child_.prefix
        elif nodeName_ == 'LatestDropOffHours':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LatestDropOffHours')
            value_ = self.gds_validate_string(value_, node, 'LatestDropOffHours')
            self.LatestDropOffHours = value_
            self.LatestDropOffHours_nsprefix_ = child_.prefix
        elif nodeName_ == 'PrepHours':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PrepHours')
            value_ = self.gds_validate_string(value_, node, 'PrepHours')
            self.PrepHours = value_
            self.PrepHours_nsprefix_ = child_.prefix
        elif nodeName_ == 'ClosedIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClosedIndicator')
            value_ = self.gds_validate_string(value_, node, 'ClosedIndicator')
            self.ClosedIndicator = value_
            self.ClosedIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'Open24HoursIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Open24HoursIndicator')
            value_ = self.gds_validate_string(value_, node, 'Open24HoursIndicator')
            self.Open24HoursIndicator = value_
            self.Open24HoursIndicator_nsprefix_ = child_.prefix
# end class DayOfWeekType


class SortCodeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HubSortCode=None, FreightSortFacilityCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HubSortCode = HubSortCode
        self.HubSortCode_nsprefix_ = None
        self.FreightSortFacilityCode = FreightSortFacilityCode
        self.FreightSortFacilityCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SortCodeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SortCodeType.subclass:
            return SortCodeType.subclass(*args_, **kwargs_)
        else:
            return SortCodeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HubSortCode(self):
        return self.HubSortCode
    def set_HubSortCode(self, HubSortCode):
        self.HubSortCode = HubSortCode
    def get_FreightSortFacilityCode(self):
        return self.FreightSortFacilityCode
    def set_FreightSortFacilityCode(self, FreightSortFacilityCode):
        self.FreightSortFacilityCode = FreightSortFacilityCode
    def hasContent_(self):
        if (
            self.HubSortCode is not None or
            self.FreightSortFacilityCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SortCodeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SortCodeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SortCodeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SortCodeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SortCodeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SortCodeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SortCodeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HubSortCode is not None:
            namespaceprefix_ = self.HubSortCode_nsprefix_ + ':' if (UseCapturedNS_ and self.HubSortCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHubSortCode>%s</%sHubSortCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HubSortCode), input_name='HubSortCode')), namespaceprefix_ , eol_))
        if self.FreightSortFacilityCode is not None:
            namespaceprefix_ = self.FreightSortFacilityCode_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightSortFacilityCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFreightSortFacilityCode>%s</%sFreightSortFacilityCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FreightSortFacilityCode), input_name='FreightSortFacilityCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HubSortCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HubSortCode')
            value_ = self.gds_validate_string(value_, node, 'HubSortCode')
            self.HubSortCode = value_
            self.HubSortCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'FreightSortFacilityCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FreightSortFacilityCode')
            value_ = self.gds_validate_string(value_, node, 'FreightSortFacilityCode')
            self.FreightSortFacilityCode = value_
            self.FreightSortFacilityCode_nsprefix_ = child_.prefix
# end class SortCodeType


class AdditionalCommentsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CommentType=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if CommentType is None:
            self.CommentType = []
        else:
            self.CommentType = CommentType
        self.CommentType_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalCommentsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalCommentsType.subclass:
            return AdditionalCommentsType.subclass(*args_, **kwargs_)
        else:
            return AdditionalCommentsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CommentType(self):
        return self.CommentType
    def set_CommentType(self, CommentType):
        self.CommentType = CommentType
    def add_CommentType(self, value):
        self.CommentType.append(value)
    def insert_CommentType_at(self, index, value):
        self.CommentType.insert(index, value)
    def replace_CommentType_at(self, index, value):
        self.CommentType[index] = value
    def hasContent_(self):
        if (
            self.CommentType
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AdditionalCommentsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AdditionalCommentsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AdditionalCommentsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AdditionalCommentsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AdditionalCommentsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AdditionalCommentsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AdditionalCommentsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for CommentType_ in self.CommentType:
            namespaceprefix_ = self.CommentType_nsprefix_ + ':' if (UseCapturedNS_ and self.CommentType_nsprefix_) else ''
            CommentType_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CommentType', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CommentType':
            obj_ = CommentTypeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CommentType.append(obj_)
            obj_.original_tagname_ = 'CommentType'
# end class AdditionalCommentsType


class CommentTypeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Text=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Text = Text
        self.Text_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommentTypeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommentTypeType.subclass:
            return CommentTypeType.subclass(*args_, **kwargs_)
        else:
            return CommentTypeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Text(self):
        return self.Text
    def set_Text(self, Text):
        self.Text = Text
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Text is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CommentTypeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CommentTypeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CommentTypeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CommentTypeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CommentTypeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CommentTypeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CommentTypeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Text is not None:
            namespaceprefix_ = self.Text_nsprefix_ + ':' if (UseCapturedNS_ and self.Text_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sText>%s</%sText>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Text), input_name='Text')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Text':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Text')
            value_ = self.gds_validate_string(value_, node, 'Text')
            self.Text = value_
            self.Text_nsprefix_ = child_.prefix
# end class CommentTypeType


class Response(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TransactionReference=None, ResponseStatusCode=None, ResponseStatusDescription=None, Error=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TransactionReference = TransactionReference
        self.TransactionReference_nsprefix_ = None
        self.ResponseStatusCode = ResponseStatusCode
        self.ResponseStatusCode_nsprefix_ = None
        self.ResponseStatusDescription = ResponseStatusDescription
        self.ResponseStatusDescription_nsprefix_ = None
        if Error is None:
            self.Error = []
        else:
            self.Error = Error
        self.Error_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Response)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Response.subclass:
            return Response.subclass(*args_, **kwargs_)
        else:
            return Response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TransactionReference(self):
        return self.TransactionReference
    def set_TransactionReference(self, TransactionReference):
        self.TransactionReference = TransactionReference
    def get_ResponseStatusCode(self):
        return self.ResponseStatusCode
    def set_ResponseStatusCode(self, ResponseStatusCode):
        self.ResponseStatusCode = ResponseStatusCode
    def get_ResponseStatusDescription(self):
        return self.ResponseStatusDescription
    def set_ResponseStatusDescription(self, ResponseStatusDescription):
        self.ResponseStatusDescription = ResponseStatusDescription
    def get_Error(self):
        return self.Error
    def set_Error(self, Error):
        self.Error = Error
    def add_Error(self, value):
        self.Error.append(value)
    def insert_Error_at(self, index, value):
        self.Error.insert(index, value)
    def replace_Error_at(self, index, value):
        self.Error[index] = value
    def hasContent_(self):
        if (
            self.TransactionReference is not None or
            self.ResponseStatusCode is not None or
            self.ResponseStatusDescription is not None or
            self.Error
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Response', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Response')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Response':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Response')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Response', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Response'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Response', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TransactionReference is not None:
            namespaceprefix_ = self.TransactionReference_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionReference_nsprefix_) else ''
            self.TransactionReference.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionReference', pretty_print=pretty_print)
        if self.ResponseStatusCode is not None:
            namespaceprefix_ = self.ResponseStatusCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ResponseStatusCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sResponseStatusCode>%s</%sResponseStatusCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ResponseStatusCode), input_name='ResponseStatusCode')), namespaceprefix_ , eol_))
        if self.ResponseStatusDescription is not None:
            namespaceprefix_ = self.ResponseStatusDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.ResponseStatusDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sResponseStatusDescription>%s</%sResponseStatusDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ResponseStatusDescription), input_name='ResponseStatusDescription')), namespaceprefix_ , eol_))
        for Error_ in self.Error:
            namespaceprefix_ = self.Error_nsprefix_ + ':' if (UseCapturedNS_ and self.Error_nsprefix_) else ''
            Error_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Error', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TransactionReference':
            obj_ = TransactionReference.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionReference = obj_
            obj_.original_tagname_ = 'TransactionReference'
        elif nodeName_ == 'ResponseStatusCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ResponseStatusCode')
            value_ = self.gds_validate_string(value_, node, 'ResponseStatusCode')
            self.ResponseStatusCode = value_
            self.ResponseStatusCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'ResponseStatusDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ResponseStatusDescription')
            value_ = self.gds_validate_string(value_, node, 'ResponseStatusDescription')
            self.ResponseStatusDescription = value_
            self.ResponseStatusDescription_nsprefix_ = child_.prefix
        elif nodeName_ == 'Error':
            obj_ = Error.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Error.append(obj_)
            obj_.original_tagname_ = 'Error'
# end class Response


class TransactionReference(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CustomerContext=None, XpciVersion=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CustomerContext = CustomerContext
        self.CustomerContext_nsprefix_ = None
        self.XpciVersion = XpciVersion
        self.XpciVersion_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransactionReference)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransactionReference.subclass:
            return TransactionReference.subclass(*args_, **kwargs_)
        else:
            return TransactionReference(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CustomerContext(self):
        return self.CustomerContext
    def set_CustomerContext(self, CustomerContext):
        self.CustomerContext = CustomerContext
    def get_XpciVersion(self):
        return self.XpciVersion
    def set_XpciVersion(self, XpciVersion):
        self.XpciVersion = XpciVersion
    def hasContent_(self):
        if (
            self.CustomerContext is not None or
            self.XpciVersion is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TransactionReference', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransactionReference')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransactionReference':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransactionReference')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransactionReference', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TransactionReference'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TransactionReference', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomerContext is not None:
            namespaceprefix_ = self.CustomerContext_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerContext_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomerContext>%s</%sCustomerContext>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomerContext), input_name='CustomerContext')), namespaceprefix_ , eol_))
        if self.XpciVersion is not None:
            namespaceprefix_ = self.XpciVersion_nsprefix_ + ':' if (UseCapturedNS_ and self.XpciVersion_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sXpciVersion>%s</%sXpciVersion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.XpciVersion), input_name='XpciVersion')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CustomerContext':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomerContext')
            value_ = self.gds_validate_string(value_, node, 'CustomerContext')
            self.CustomerContext = value_
            self.CustomerContext_nsprefix_ = child_.prefix
        elif nodeName_ == 'XpciVersion':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'XpciVersion')
            value_ = self.gds_validate_string(value_, node, 'XpciVersion')
            self.XpciVersion = value_
            self.XpciVersion_nsprefix_ = child_.prefix
# end class TransactionReference


class Error(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ErrorSeverity=None, ErrorCode=None, ErrorDescription=None, MinimumRetrySeconds=None, ErrorLocation=None, ErrorDigest=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ErrorSeverity = ErrorSeverity
        self.ErrorSeverity_nsprefix_ = None
        self.ErrorCode = ErrorCode
        self.ErrorCode_nsprefix_ = None
        self.ErrorDescription = ErrorDescription
        self.ErrorDescription_nsprefix_ = None
        self.MinimumRetrySeconds = MinimumRetrySeconds
        self.MinimumRetrySeconds_nsprefix_ = None
        if ErrorLocation is None:
            self.ErrorLocation = []
        else:
            self.ErrorLocation = ErrorLocation
        self.ErrorLocation_nsprefix_ = None
        if ErrorDigest is None:
            self.ErrorDigest = []
        else:
            self.ErrorDigest = ErrorDigest
        self.ErrorDigest_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Error)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Error.subclass:
            return Error.subclass(*args_, **kwargs_)
        else:
            return Error(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ErrorSeverity(self):
        return self.ErrorSeverity
    def set_ErrorSeverity(self, ErrorSeverity):
        self.ErrorSeverity = ErrorSeverity
    def get_ErrorCode(self):
        return self.ErrorCode
    def set_ErrorCode(self, ErrorCode):
        self.ErrorCode = ErrorCode
    def get_ErrorDescription(self):
        return self.ErrorDescription
    def set_ErrorDescription(self, ErrorDescription):
        self.ErrorDescription = ErrorDescription
    def get_MinimumRetrySeconds(self):
        return self.MinimumRetrySeconds
    def set_MinimumRetrySeconds(self, MinimumRetrySeconds):
        self.MinimumRetrySeconds = MinimumRetrySeconds
    def get_ErrorLocation(self):
        return self.ErrorLocation
    def set_ErrorLocation(self, ErrorLocation):
        self.ErrorLocation = ErrorLocation
    def add_ErrorLocation(self, value):
        self.ErrorLocation.append(value)
    def insert_ErrorLocation_at(self, index, value):
        self.ErrorLocation.insert(index, value)
    def replace_ErrorLocation_at(self, index, value):
        self.ErrorLocation[index] = value
    def get_ErrorDigest(self):
        return self.ErrorDigest
    def set_ErrorDigest(self, ErrorDigest):
        self.ErrorDigest = ErrorDigest
    def add_ErrorDigest(self, value):
        self.ErrorDigest.append(value)
    def insert_ErrorDigest_at(self, index, value):
        self.ErrorDigest.insert(index, value)
    def replace_ErrorDigest_at(self, index, value):
        self.ErrorDigest[index] = value
    def hasContent_(self):
        if (
            self.ErrorSeverity is not None or
            self.ErrorCode is not None or
            self.ErrorDescription is not None or
            self.MinimumRetrySeconds is not None or
            self.ErrorLocation or
            self.ErrorDigest
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Error', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Error')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Error':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Error')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Error', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Error'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Error', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ErrorSeverity is not None:
            namespaceprefix_ = self.ErrorSeverity_nsprefix_ + ':' if (UseCapturedNS_ and self.ErrorSeverity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sErrorSeverity>%s</%sErrorSeverity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ErrorSeverity), input_name='ErrorSeverity')), namespaceprefix_ , eol_))
        if self.ErrorCode is not None:
            namespaceprefix_ = self.ErrorCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ErrorCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sErrorCode>%s</%sErrorCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ErrorCode), input_name='ErrorCode')), namespaceprefix_ , eol_))
        if self.ErrorDescription is not None:
            namespaceprefix_ = self.ErrorDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.ErrorDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sErrorDescription>%s</%sErrorDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ErrorDescription), input_name='ErrorDescription')), namespaceprefix_ , eol_))
        if self.MinimumRetrySeconds is not None:
            namespaceprefix_ = self.MinimumRetrySeconds_nsprefix_ + ':' if (UseCapturedNS_ and self.MinimumRetrySeconds_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMinimumRetrySeconds>%s</%sMinimumRetrySeconds>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MinimumRetrySeconds), input_name='MinimumRetrySeconds')), namespaceprefix_ , eol_))
        for ErrorLocation_ in self.ErrorLocation:
            namespaceprefix_ = self.ErrorLocation_nsprefix_ + ':' if (UseCapturedNS_ and self.ErrorLocation_nsprefix_) else ''
            ErrorLocation_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ErrorLocation', pretty_print=pretty_print)
        for ErrorDigest_ in self.ErrorDigest:
            namespaceprefix_ = self.ErrorDigest_nsprefix_ + ':' if (UseCapturedNS_ and self.ErrorDigest_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sErrorDigest>%s</%sErrorDigest>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(ErrorDigest_), input_name='ErrorDigest')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ErrorSeverity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ErrorSeverity')
            value_ = self.gds_validate_string(value_, node, 'ErrorSeverity')
            self.ErrorSeverity = value_
            self.ErrorSeverity_nsprefix_ = child_.prefix
        elif nodeName_ == 'ErrorCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ErrorCode')
            value_ = self.gds_validate_string(value_, node, 'ErrorCode')
            self.ErrorCode = value_
            self.ErrorCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'ErrorDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ErrorDescription')
            value_ = self.gds_validate_string(value_, node, 'ErrorDescription')
            self.ErrorDescription = value_
            self.ErrorDescription_nsprefix_ = child_.prefix
        elif nodeName_ == 'MinimumRetrySeconds':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MinimumRetrySeconds')
            value_ = self.gds_validate_string(value_, node, 'MinimumRetrySeconds')
            self.MinimumRetrySeconds = value_
            self.MinimumRetrySeconds_nsprefix_ = child_.prefix
        elif nodeName_ == 'ErrorLocation':
            obj_ = ErrorLocation.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ErrorLocation.append(obj_)
            obj_.original_tagname_ = 'ErrorLocation'
        elif nodeName_ == 'ErrorDigest':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ErrorDigest')
            value_ = self.gds_validate_string(value_, node, 'ErrorDigest')
            self.ErrorDigest.append(value_)
            self.ErrorDigest_nsprefix_ = child_.prefix
# end class Error


class ErrorLocation(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ErrorLocationElementName=None, ErrorLocationAttributeName=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ErrorLocationElementName = ErrorLocationElementName
        self.ErrorLocationElementName_nsprefix_ = None
        self.ErrorLocationAttributeName = ErrorLocationAttributeName
        self.ErrorLocationAttributeName_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ErrorLocation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ErrorLocation.subclass:
            return ErrorLocation.subclass(*args_, **kwargs_)
        else:
            return ErrorLocation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ErrorLocationElementName(self):
        return self.ErrorLocationElementName
    def set_ErrorLocationElementName(self, ErrorLocationElementName):
        self.ErrorLocationElementName = ErrorLocationElementName
    def get_ErrorLocationAttributeName(self):
        return self.ErrorLocationAttributeName
    def set_ErrorLocationAttributeName(self, ErrorLocationAttributeName):
        self.ErrorLocationAttributeName = ErrorLocationAttributeName
    def hasContent_(self):
        if (
            self.ErrorLocationElementName is not None or
            self.ErrorLocationAttributeName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ErrorLocation', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ErrorLocation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ErrorLocation':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ErrorLocation')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ErrorLocation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ErrorLocation'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ErrorLocation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ErrorLocationElementName is not None:
            namespaceprefix_ = self.ErrorLocationElementName_nsprefix_ + ':' if (UseCapturedNS_ and self.ErrorLocationElementName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sErrorLocationElementName>%s</%sErrorLocationElementName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ErrorLocationElementName), input_name='ErrorLocationElementName')), namespaceprefix_ , eol_))
        if self.ErrorLocationAttributeName is not None:
            namespaceprefix_ = self.ErrorLocationAttributeName_nsprefix_ + ':' if (UseCapturedNS_ and self.ErrorLocationAttributeName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sErrorLocationAttributeName>%s</%sErrorLocationAttributeName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ErrorLocationAttributeName), input_name='ErrorLocationAttributeName')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ErrorLocationElementName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ErrorLocationElementName')
            value_ = self.gds_validate_string(value_, node, 'ErrorLocationElementName')
            self.ErrorLocationElementName = value_
            self.ErrorLocationElementName_nsprefix_ = child_.prefix
        elif nodeName_ == 'ErrorLocationAttributeName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ErrorLocationAttributeName')
            value_ = self.gds_validate_string(value_, node, 'ErrorLocationAttributeName')
            self.ErrorLocationAttributeName = value_
            self.ErrorLocationAttributeName_nsprefix_ = child_.prefix
# end class ErrorLocation


class AccessPointInformationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PublicAccessPointID=None, ImageURL=None, LoadCapacityRatio=None, BusinessClassificationList=None, AccessPointStatus=None, FacilitySLIC=None, PrivateNetworkList=None, Availability=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PublicAccessPointID = PublicAccessPointID
        self.PublicAccessPointID_nsprefix_ = None
        self.ImageURL = ImageURL
        self.ImageURL_nsprefix_ = None
        self.LoadCapacityRatio = LoadCapacityRatio
        self.LoadCapacityRatio_nsprefix_ = None
        self.BusinessClassificationList = BusinessClassificationList
        self.BusinessClassificationList_nsprefix_ = None
        self.AccessPointStatus = AccessPointStatus
        self.AccessPointStatus_nsprefix_ = None
        self.FacilitySLIC = FacilitySLIC
        self.FacilitySLIC_nsprefix_ = None
        self.PrivateNetworkList = PrivateNetworkList
        self.PrivateNetworkList_nsprefix_ = None
        self.Availability = Availability
        self.Availability_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AccessPointInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AccessPointInformationType.subclass:
            return AccessPointInformationType.subclass(*args_, **kwargs_)
        else:
            return AccessPointInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PublicAccessPointID(self):
        return self.PublicAccessPointID
    def set_PublicAccessPointID(self, PublicAccessPointID):
        self.PublicAccessPointID = PublicAccessPointID
    def get_ImageURL(self):
        return self.ImageURL
    def set_ImageURL(self, ImageURL):
        self.ImageURL = ImageURL
    def get_LoadCapacityRatio(self):
        return self.LoadCapacityRatio
    def set_LoadCapacityRatio(self, LoadCapacityRatio):
        self.LoadCapacityRatio = LoadCapacityRatio
    def get_BusinessClassificationList(self):
        return self.BusinessClassificationList
    def set_BusinessClassificationList(self, BusinessClassificationList):
        self.BusinessClassificationList = BusinessClassificationList
    def get_AccessPointStatus(self):
        return self.AccessPointStatus
    def set_AccessPointStatus(self, AccessPointStatus):
        self.AccessPointStatus = AccessPointStatus
    def get_FacilitySLIC(self):
        return self.FacilitySLIC
    def set_FacilitySLIC(self, FacilitySLIC):
        self.FacilitySLIC = FacilitySLIC
    def get_PrivateNetworkList(self):
        return self.PrivateNetworkList
    def set_PrivateNetworkList(self, PrivateNetworkList):
        self.PrivateNetworkList = PrivateNetworkList
    def get_Availability(self):
        return self.Availability
    def set_Availability(self, Availability):
        self.Availability = Availability
    def hasContent_(self):
        if (
            self.PublicAccessPointID is not None or
            self.ImageURL is not None or
            self.LoadCapacityRatio is not None or
            self.BusinessClassificationList is not None or
            self.AccessPointStatus is not None or
            self.FacilitySLIC is not None or
            self.PrivateNetworkList is not None or
            self.Availability is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AccessPointInformationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AccessPointInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AccessPointInformationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AccessPointInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AccessPointInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AccessPointInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AccessPointInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PublicAccessPointID is not None:
            namespaceprefix_ = self.PublicAccessPointID_nsprefix_ + ':' if (UseCapturedNS_ and self.PublicAccessPointID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPublicAccessPointID>%s</%sPublicAccessPointID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PublicAccessPointID), input_name='PublicAccessPointID')), namespaceprefix_ , eol_))
        if self.ImageURL is not None:
            namespaceprefix_ = self.ImageURL_nsprefix_ + ':' if (UseCapturedNS_ and self.ImageURL_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sImageURL>%s</%sImageURL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ImageURL), input_name='ImageURL')), namespaceprefix_ , eol_))
        if self.LoadCapacityRatio is not None:
            namespaceprefix_ = self.LoadCapacityRatio_nsprefix_ + ':' if (UseCapturedNS_ and self.LoadCapacityRatio_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLoadCapacityRatio>%s</%sLoadCapacityRatio>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LoadCapacityRatio), input_name='LoadCapacityRatio')), namespaceprefix_ , eol_))
        if self.BusinessClassificationList is not None:
            namespaceprefix_ = self.BusinessClassificationList_nsprefix_ + ':' if (UseCapturedNS_ and self.BusinessClassificationList_nsprefix_) else ''
            self.BusinessClassificationList.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BusinessClassificationList', pretty_print=pretty_print)
        if self.AccessPointStatus is not None:
            namespaceprefix_ = self.AccessPointStatus_nsprefix_ + ':' if (UseCapturedNS_ and self.AccessPointStatus_nsprefix_) else ''
            self.AccessPointStatus.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AccessPointStatus', pretty_print=pretty_print)
        if self.FacilitySLIC is not None:
            namespaceprefix_ = self.FacilitySLIC_nsprefix_ + ':' if (UseCapturedNS_ and self.FacilitySLIC_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFacilitySLIC>%s</%sFacilitySLIC>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FacilitySLIC), input_name='FacilitySLIC')), namespaceprefix_ , eol_))
        if self.PrivateNetworkList is not None:
            namespaceprefix_ = self.PrivateNetworkList_nsprefix_ + ':' if (UseCapturedNS_ and self.PrivateNetworkList_nsprefix_) else ''
            self.PrivateNetworkList.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PrivateNetworkList', pretty_print=pretty_print)
        if self.Availability is not None:
            namespaceprefix_ = self.Availability_nsprefix_ + ':' if (UseCapturedNS_ and self.Availability_nsprefix_) else ''
            self.Availability.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Availability', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PublicAccessPointID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PublicAccessPointID')
            value_ = self.gds_validate_string(value_, node, 'PublicAccessPointID')
            self.PublicAccessPointID = value_
            self.PublicAccessPointID_nsprefix_ = child_.prefix
        elif nodeName_ == 'ImageURL':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ImageURL')
            value_ = self.gds_validate_string(value_, node, 'ImageURL')
            self.ImageURL = value_
            self.ImageURL_nsprefix_ = child_.prefix
        elif nodeName_ == 'LoadCapacityRatio':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LoadCapacityRatio')
            value_ = self.gds_validate_string(value_, node, 'LoadCapacityRatio')
            self.LoadCapacityRatio = value_
            self.LoadCapacityRatio_nsprefix_ = child_.prefix
        elif nodeName_ == 'BusinessClassificationList':
            obj_ = BusinessClassificationListType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BusinessClassificationList = obj_
            obj_.original_tagname_ = 'BusinessClassificationList'
        elif nodeName_ == 'AccessPointStatus':
            obj_ = CodeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AccessPointStatus = obj_
            obj_.original_tagname_ = 'AccessPointStatus'
        elif nodeName_ == 'FacilitySLIC':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FacilitySLIC')
            value_ = self.gds_validate_string(value_, node, 'FacilitySLIC')
            self.FacilitySLIC = value_
            self.FacilitySLIC_nsprefix_ = child_.prefix
        elif nodeName_ == 'PrivateNetworkList':
            obj_ = PrivateNetworkListType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PrivateNetworkList = obj_
            obj_.original_tagname_ = 'PrivateNetworkList'
        elif nodeName_ == 'Availability':
            obj_ = AvailabilityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Availability = obj_
            obj_.original_tagname_ = 'Availability'
# end class AccessPointInformationType


class BusinessClassificationListType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, BusinessClassification=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if BusinessClassification is None:
            self.BusinessClassification = []
        else:
            self.BusinessClassification = BusinessClassification
        self.BusinessClassification_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BusinessClassificationListType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BusinessClassificationListType.subclass:
            return BusinessClassificationListType.subclass(*args_, **kwargs_)
        else:
            return BusinessClassificationListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_BusinessClassification(self):
        return self.BusinessClassification
    def set_BusinessClassification(self, BusinessClassification):
        self.BusinessClassification = BusinessClassification
    def add_BusinessClassification(self, value):
        self.BusinessClassification.append(value)
    def insert_BusinessClassification_at(self, index, value):
        self.BusinessClassification.insert(index, value)
    def replace_BusinessClassification_at(self, index, value):
        self.BusinessClassification[index] = value
    def hasContent_(self):
        if (
            self.BusinessClassification
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BusinessClassificationListType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BusinessClassificationListType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BusinessClassificationListType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BusinessClassificationListType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BusinessClassificationListType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BusinessClassificationListType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BusinessClassificationListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for BusinessClassification_ in self.BusinessClassification:
            namespaceprefix_ = self.BusinessClassification_nsprefix_ + ':' if (UseCapturedNS_ and self.BusinessClassification_nsprefix_) else ''
            BusinessClassification_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BusinessClassification', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'BusinessClassification':
            obj_ = CodeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BusinessClassification.append(obj_)
            obj_.original_tagname_ = 'BusinessClassification'
# end class BusinessClassificationListType


class PrivateNetworkListType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PrivateNetwork=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if PrivateNetwork is None:
            self.PrivateNetwork = []
        else:
            self.PrivateNetwork = PrivateNetwork
        self.PrivateNetwork_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PrivateNetworkListType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PrivateNetworkListType.subclass:
            return PrivateNetworkListType.subclass(*args_, **kwargs_)
        else:
            return PrivateNetworkListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PrivateNetwork(self):
        return self.PrivateNetwork
    def set_PrivateNetwork(self, PrivateNetwork):
        self.PrivateNetwork = PrivateNetwork
    def add_PrivateNetwork(self, value):
        self.PrivateNetwork.append(value)
    def insert_PrivateNetwork_at(self, index, value):
        self.PrivateNetwork.insert(index, value)
    def replace_PrivateNetwork_at(self, index, value):
        self.PrivateNetwork[index] = value
    def hasContent_(self):
        if (
            self.PrivateNetwork
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PrivateNetworkListType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PrivateNetworkListType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PrivateNetworkListType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PrivateNetworkListType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PrivateNetworkListType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PrivateNetworkListType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PrivateNetworkListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for PrivateNetwork_ in self.PrivateNetwork:
            namespaceprefix_ = self.PrivateNetwork_nsprefix_ + ':' if (UseCapturedNS_ and self.PrivateNetwork_nsprefix_) else ''
            PrivateNetwork_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PrivateNetwork', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PrivateNetwork':
            obj_ = PrivateNetworkType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PrivateNetwork.append(obj_)
            obj_.original_tagname_ = 'PrivateNetwork'
# end class PrivateNetworkListType


class PrivateNetworkType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, NetworkID=None, NetworkDescription=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.NetworkID = NetworkID
        self.NetworkID_nsprefix_ = None
        self.NetworkDescription = NetworkDescription
        self.NetworkDescription_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PrivateNetworkType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PrivateNetworkType.subclass:
            return PrivateNetworkType.subclass(*args_, **kwargs_)
        else:
            return PrivateNetworkType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_NetworkID(self):
        return self.NetworkID
    def set_NetworkID(self, NetworkID):
        self.NetworkID = NetworkID
    def get_NetworkDescription(self):
        return self.NetworkDescription
    def set_NetworkDescription(self, NetworkDescription):
        self.NetworkDescription = NetworkDescription
    def hasContent_(self):
        if (
            self.NetworkID is not None or
            self.NetworkDescription is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PrivateNetworkType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PrivateNetworkType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PrivateNetworkType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PrivateNetworkType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PrivateNetworkType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PrivateNetworkType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PrivateNetworkType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NetworkID is not None:
            namespaceprefix_ = self.NetworkID_nsprefix_ + ':' if (UseCapturedNS_ and self.NetworkID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNetworkID>%s</%sNetworkID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NetworkID), input_name='NetworkID')), namespaceprefix_ , eol_))
        if self.NetworkDescription is not None:
            namespaceprefix_ = self.NetworkDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.NetworkDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNetworkDescription>%s</%sNetworkDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NetworkDescription), input_name='NetworkDescription')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'NetworkID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NetworkID')
            value_ = self.gds_validate_string(value_, node, 'NetworkID')
            self.NetworkID = value_
            self.NetworkID_nsprefix_ = child_.prefix
        elif nodeName_ == 'NetworkDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NetworkDescription')
            value_ = self.gds_validate_string(value_, node, 'NetworkDescription')
            self.NetworkDescription = value_
            self.NetworkDescription_nsprefix_ = child_.prefix
# end class PrivateNetworkType


class ServiceOfferingListType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ServiceOffering=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if ServiceOffering is None:
            self.ServiceOffering = []
        else:
            self.ServiceOffering = ServiceOffering
        self.ServiceOffering_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceOfferingListType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceOfferingListType.subclass:
            return ServiceOfferingListType.subclass(*args_, **kwargs_)
        else:
            return ServiceOfferingListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ServiceOffering(self):
        return self.ServiceOffering
    def set_ServiceOffering(self, ServiceOffering):
        self.ServiceOffering = ServiceOffering
    def add_ServiceOffering(self, value):
        self.ServiceOffering.append(value)
    def insert_ServiceOffering_at(self, index, value):
        self.ServiceOffering.insert(index, value)
    def replace_ServiceOffering_at(self, index, value):
        self.ServiceOffering[index] = value
    def hasContent_(self):
        if (
            self.ServiceOffering
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ServiceOfferingListType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ServiceOfferingListType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ServiceOfferingListType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ServiceOfferingListType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ServiceOfferingListType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ServiceOfferingListType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ServiceOfferingListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ServiceOffering_ in self.ServiceOffering:
            namespaceprefix_ = self.ServiceOffering_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceOffering_nsprefix_) else ''
            ServiceOffering_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ServiceOffering', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ServiceOffering':
            obj_ = CodeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ServiceOffering.append(obj_)
            obj_.original_tagname_ = 'ServiceOffering'
# end class ServiceOfferingListType


class AvailabilityType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ShippingAvailability=None, DCRAvailability=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ShippingAvailability = ShippingAvailability
        self.ShippingAvailability_nsprefix_ = None
        self.DCRAvailability = DCRAvailability
        self.DCRAvailability_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AvailabilityType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AvailabilityType.subclass:
            return AvailabilityType.subclass(*args_, **kwargs_)
        else:
            return AvailabilityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ShippingAvailability(self):
        return self.ShippingAvailability
    def set_ShippingAvailability(self, ShippingAvailability):
        self.ShippingAvailability = ShippingAvailability
    def get_DCRAvailability(self):
        return self.DCRAvailability
    def set_DCRAvailability(self, DCRAvailability):
        self.DCRAvailability = DCRAvailability
    def hasContent_(self):
        if (
            self.ShippingAvailability is not None or
            self.DCRAvailability is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AvailabilityType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AvailabilityType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AvailabilityType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AvailabilityType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AvailabilityType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AvailabilityType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AvailabilityType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShippingAvailability is not None:
            namespaceprefix_ = self.ShippingAvailability_nsprefix_ + ':' if (UseCapturedNS_ and self.ShippingAvailability_nsprefix_) else ''
            self.ShippingAvailability.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShippingAvailability', pretty_print=pretty_print)
        if self.DCRAvailability is not None:
            namespaceprefix_ = self.DCRAvailability_nsprefix_ + ':' if (UseCapturedNS_ and self.DCRAvailability_nsprefix_) else ''
            self.DCRAvailability.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DCRAvailability', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ShippingAvailability':
            obj_ = AvailableReasonType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShippingAvailability = obj_
            obj_.original_tagname_ = 'ShippingAvailability'
        elif nodeName_ == 'DCRAvailability':
            obj_ = AvailableReasonType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DCRAvailability = obj_
            obj_.original_tagname_ = 'DCRAvailability'
# end class AvailabilityType


class PromotionInformationType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Locale=None, Promotion=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Locale = Locale
        self.Locale_nsprefix_ = None
        self.Promotion = Promotion
        self.Promotion_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PromotionInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PromotionInformationType.subclass:
            return PromotionInformationType.subclass(*args_, **kwargs_)
        else:
            return PromotionInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Locale(self):
        return self.Locale
    def set_Locale(self, Locale):
        self.Locale = Locale
    def get_Promotion(self):
        return self.Promotion
    def set_Promotion(self, Promotion):
        self.Promotion = Promotion
    def hasContent_(self):
        if (
            self.Locale is not None or
            self.Promotion is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PromotionInformationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PromotionInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PromotionInformationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PromotionInformationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PromotionInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PromotionInformationType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PromotionInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Locale is not None:
            namespaceprefix_ = self.Locale_nsprefix_ + ':' if (UseCapturedNS_ and self.Locale_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocale>%s</%sLocale>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Locale), input_name='Locale')), namespaceprefix_ , eol_))
        if self.Promotion is not None:
            namespaceprefix_ = self.Promotion_nsprefix_ + ':' if (UseCapturedNS_ and self.Promotion_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPromotion>%s</%sPromotion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Promotion), input_name='Promotion')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Locale':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Locale')
            value_ = self.gds_validate_string(value_, node, 'Locale')
            self.Locale = value_
            self.Locale_nsprefix_ = child_.prefix
        elif nodeName_ == 'Promotion':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Promotion')
            value_ = self.gds_validate_string(value_, node, 'Promotion')
            self.Promotion = value_
            self.Promotion_nsprefix_ = child_.prefix
# end class PromotionInformationType


class AvailableReasonType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AvailableIndicator=None, UnavailableReason=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AvailableIndicator = AvailableIndicator
        self.AvailableIndicator_nsprefix_ = None
        self.UnavailableReason = UnavailableReason
        self.UnavailableReason_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AvailableReasonType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AvailableReasonType.subclass:
            return AvailableReasonType.subclass(*args_, **kwargs_)
        else:
            return AvailableReasonType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AvailableIndicator(self):
        return self.AvailableIndicator
    def set_AvailableIndicator(self, AvailableIndicator):
        self.AvailableIndicator = AvailableIndicator
    def get_UnavailableReason(self):
        return self.UnavailableReason
    def set_UnavailableReason(self, UnavailableReason):
        self.UnavailableReason = UnavailableReason
    def hasContent_(self):
        if (
            self.AvailableIndicator is not None or
            self.UnavailableReason is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AvailableReasonType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AvailableReasonType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AvailableReasonType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AvailableReasonType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AvailableReasonType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AvailableReasonType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AvailableReasonType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AvailableIndicator is not None:
            namespaceprefix_ = self.AvailableIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.AvailableIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAvailableIndicator>%s</%sAvailableIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AvailableIndicator), input_name='AvailableIndicator')), namespaceprefix_ , eol_))
        if self.UnavailableReason is not None:
            namespaceprefix_ = self.UnavailableReason_nsprefix_ + ':' if (UseCapturedNS_ and self.UnavailableReason_nsprefix_) else ''
            self.UnavailableReason.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UnavailableReason', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AvailableIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AvailableIndicator')
            value_ = self.gds_validate_string(value_, node, 'AvailableIndicator')
            self.AvailableIndicator = value_
            self.AvailableIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'UnavailableReason':
            obj_ = CodeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UnavailableReason = obj_
            obj_.original_tagname_ = 'UnavailableReason'
# end class AvailableReasonType


class LocationImageType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SecureURL=None, NonSecureURL=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.SecureURL = SecureURL
        self.SecureURL_nsprefix_ = None
        self.NonSecureURL = NonSecureURL
        self.NonSecureURL_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LocationImageType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LocationImageType.subclass:
            return LocationImageType.subclass(*args_, **kwargs_)
        else:
            return LocationImageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SecureURL(self):
        return self.SecureURL
    def set_SecureURL(self, SecureURL):
        self.SecureURL = SecureURL
    def get_NonSecureURL(self):
        return self.NonSecureURL
    def set_NonSecureURL(self, NonSecureURL):
        self.NonSecureURL = NonSecureURL
    def hasContent_(self):
        if (
            self.SecureURL is not None or
            self.NonSecureURL is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LocationImageType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LocationImageType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LocationImageType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LocationImageType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LocationImageType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LocationImageType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LocationImageType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SecureURL is not None:
            namespaceprefix_ = self.SecureURL_nsprefix_ + ':' if (UseCapturedNS_ and self.SecureURL_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSecureURL>%s</%sSecureURL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SecureURL), input_name='SecureURL')), namespaceprefix_ , eol_))
        if self.NonSecureURL is not None:
            namespaceprefix_ = self.NonSecureURL_nsprefix_ + ':' if (UseCapturedNS_ and self.NonSecureURL_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNonSecureURL>%s</%sNonSecureURL>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NonSecureURL), input_name='NonSecureURL')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SecureURL':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SecureURL')
            value_ = self.gds_validate_string(value_, node, 'SecureURL')
            self.SecureURL = value_
            self.SecureURL_nsprefix_ = child_.prefix
        elif nodeName_ == 'NonSecureURL':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NonSecureURL')
            value_ = self.gds_validate_string(value_, node, 'NonSecureURL')
            self.NonSecureURL = value_
            self.NonSecureURL_nsprefix_ = child_.prefix
# end class LocationImageType


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def get_required_ns_prefix_defs(rootNode):
    '''Get all name space prefix definitions required in this XML doc.
    Return a dictionary of definitions and a char string of definitions.
    '''
    nsmap = {
        prefix: uri
        for node in rootNode.iter()
        for (prefix, uri) in node.nsmap.items()
        if prefix is not None
    }
    namespacedefs = ' '.join([
        'xmlns:{}="{}"'.format(prefix, uri)
        for prefix, uri in nsmap.items()
    ])
    return nsmap, namespacedefs


def parse(inFileName, silence=False, print_warnings=True):
    global CapturedNsmap_
    gds_collector = GdsCollector_()
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'LocatorResponse'
        rootClass = LocatorResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    CapturedNsmap_, namespacedefs = get_required_ns_prefix_defs(rootNode)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_=namespacedefs,
            pretty_print=True)
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseEtree(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'LocatorResponse'
        rootClass = LocatorResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(str(content))
        sys.stdout.write('\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False, print_warnings=True):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    gds_collector = GdsCollector_()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'LocatorResponse'
        rootClass = LocatorResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if not SaveElementTreeNode:
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseLiteral(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'LocatorResponse'
        rootClass = LocatorResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('#from locator_response import *\n\n')
        sys.stdout.write('import locator_response as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

RenameMappings_ = {
}

__all__ = [
    "AccessPointInformationType",
    "AdditionalChargeIndicator",
    "AdditionalCommentsType",
    "AddressKeyFormatType",
    "AvailabilityType",
    "AvailableReasonType",
    "BusinessClassificationListType",
    "CodeType",
    "CommentTypeType",
    "DayOfWeekType",
    "DirectionsType",
    "DistanceType",
    "DropLocationType",
    "Error",
    "ErrorLocation",
    "GeocodeCandidateType",
    "GeocodeType",
    "IVRType",
    "ImageMapType",
    "ImageType",
    "LocalizedInstructionType",
    "LocationAttributesType",
    "LocationImageType",
    "LocatorResponse",
    "MapDimensionsType",
    "OperatingHoursType",
    "OptionCodeType",
    "PickUpDetailsType",
    "PickUpType",
    "PrivateNetworkListType",
    "PrivateNetworkType",
    "PromotionInformationType",
    "Response",
    "SearchResultsType",
    "ServiceOfferingListType",
    "SortCodeType",
    "SpecialInstructionsType",
    "StandardHoursType",
    "TextToSpeechIndicator",
    "TotalDistanceType",
    "TransactionReference",
    "TransportationPickUpScheduleType",
    "UnitOfMeasurementType"
]
