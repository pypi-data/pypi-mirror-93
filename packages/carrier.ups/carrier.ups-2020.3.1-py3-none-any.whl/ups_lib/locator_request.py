#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Sat Mar  7 09:04:16 2020 by generateDS.py version 2.35.15.
# Python 3.8.1 (v3.8.1:1b293b6006, Dec 18 2019, 14:08:53)  [Clang 6.0 (clang-600.0.57)]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('-o', './python/locator_request.py')
#
# Command line arguments:
#   ./schemas/LocatorRequest.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/.env/bin/generateDS --no-namespace-defs -o "./python/locator_request.py" ./schemas/LocatorRequest.xsd
#
# Current working directory (os.getcwd()):
#   2020-03
#

from six.moves import zip_longest
import os
import sys
import re as re_
import base64
import datetime as datetime_
import decimal as decimal_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
SaveElementTreeNode = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ImportError:
    GenerateDSNamespaceTypePrefixes_ = {}

#
# You can replace the following class definition by defining an
# importable module named "generatedscollector" containing a class
# named "GdsCollector".  See the default class definition below for
# clues about the possible content of that class.
#
try:
    from generatedscollector import GdsCollector as GdsCollector_
except ImportError:

    class GdsCollector_(object):

        def __init__(self, messages=None):
            if messages is None:
                self.messages = []
            else:
                self.messages = messages

        def add_message(self, msg):
            self.messages.append(msg)

        def get_messages(self):
            return self.messages

        def clear_messages(self):
            self.messages = []

        def print_messages(self):
            for msg in self.messages:
                print("Warning: {}".format(msg))

        def write_messages(self, outstream):
            for msg in self.messages:
                outstream.write("Warning: {}\n".format(msg))


#
# The super-class for enum types
#

try:
    from enum import Enum
except ImportError:
    Enum = object

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        __hash__ = object.__hash__
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_parse_string(self, input_data, node=None, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_parse_integer(self, input_data, node=None, input_name=''):
            try:
                ival = int(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires integer value: %s' % exp)
            return ival
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            try:
                value = int(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires integer value')
            return value
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integer valuess')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_parse_float(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires float or double value: %s' % exp)
            return fval_
        def gds_validate_float(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires float value')
            return value
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of float values')
            return values
        def gds_format_decimal(self, input_data, input_name=''):
            return ('%s' % input_data).rstrip('0')
        def gds_parse_decimal(self, input_data, node=None, input_name=''):
            try:
                decimal_value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return decimal_value
        def gds_validate_decimal(self, input_data, node=None, input_name=''):
            try:
                value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return value
        def gds_format_decimal_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_decimal_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    decimal_.Decimal(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of decimal values')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_parse_double(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires double or float value: %s' % exp)
            return fval_
        def gds_validate_double(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires double or float value')
            return value
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(
                        node, 'Requires sequence of double or float values')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_parse_boolean(self, input_data, node=None, input_name=''):
            if input_data in ('true', '1'):
                bval = True
            elif input_data in ('false', '0'):
                bval = False
            else:
                raise_parse_error(node, 'Requires boolean value')
            return bval
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            if input_data not in (True, 1, False, 0, ):
                raise_parse_error(
                    node,
                    'Requires boolean value '
                    '(one of True, 1, False, 0)')
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in (True, 1, False, 0, ):
                    raise_parse_error(
                        node,
                        'Requires sequence of boolean values '
                        '(one of True, 1, False, 0)')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_check_cardinality_(
                self, value, input_name,
                min_occurs=0, max_occurs=1, required=None):
            if value is None:
                length = 0
            elif isinstance(value, list):
                length = len(value)
            else:
                length = 1
            if required is not None :
                if required and length < 1:
                    self.gds_collector_.add_message(
                        "Required value {}{} is missing".format(
                            input_name, self.gds_get_node_lineno_()))
            if length < min_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is below "
                    "the minimum allowed, "
                    "expected at least {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        min_occurs, length))
            elif length > max_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is above "
                    "the maximum allowed, "
                    "expected at most {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        max_occurs, length))
        def gds_validate_builtin_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value, input_name=input_name)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_validate_defined_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            # provide default value in case option --disable-xml is used.
            content = ""
            content = etree_.tostring(node, encoding="unicode")
            return content
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            def excl_select_objs_(obj):
                return (obj[0] != 'parent_object_' and
                        obj[0] != 'gds_collector_')
            if type(self) != type(other):
                return False
            return all(x == y for x, y in zip_longest(
                filter(excl_select_objs_, self.__dict__.items()),
                filter(excl_select_objs_, other.__dict__.items())))
        def __ne__(self, other):
            return not self.__eq__(other)
        # Django ETL transform hooks.
        def gds_djo_etl_transform(self):
            pass
        def gds_djo_etl_transform_db_obj(self, dbobj):
            pass
        # SQLAlchemy ETL transform hooks.
        def gds_sqa_etl_transform(self):
            return 0, None
        def gds_sqa_etl_transform_db_obj(self, dbobj):
            pass
        def gds_get_node_lineno_(self):
            if (hasattr(self, "gds_elementtree_node_") and
                    self.gds_elementtree_node_ is not None):
                return ' near line {}'.format(
                    self.gds_elementtree_node_.sourceline)
            else:
                return ""
    
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
# Set this to false in order to deactivate during export, the use of
# name space prefixes captured from the input document.
UseCapturedNS_ = True
CapturedNsmap_ = {}
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


def encode_str_2_3(instr):
    return instr


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if node is not None:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class LocatorRequest(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Request=None, OriginAddress=None, Translate=None, UnitOfMeasurement=None, LocationID=None, LocationSearchCriteria=None, SortCriteria=None, AllowAllConfidenceLevels='false', SearchOptionCode=None, ServiceGeoUnit=None, FreightIndicator=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Request = Request
        self.Request_nsprefix_ = None
        self.OriginAddress = OriginAddress
        self.OriginAddress_nsprefix_ = None
        self.Translate = Translate
        self.Translate_nsprefix_ = None
        self.UnitOfMeasurement = UnitOfMeasurement
        self.UnitOfMeasurement_nsprefix_ = None
        if LocationID is None:
            self.LocationID = []
        else:
            self.LocationID = LocationID
        self.LocationID_nsprefix_ = None
        self.LocationSearchCriteria = LocationSearchCriteria
        self.LocationSearchCriteria_nsprefix_ = None
        self.SortCriteria = SortCriteria
        self.SortCriteria_nsprefix_ = None
        self.AllowAllConfidenceLevels = AllowAllConfidenceLevels
        self.AllowAllConfidenceLevels_nsprefix_ = None
        self.SearchOptionCode = SearchOptionCode
        self.SearchOptionCode_nsprefix_ = None
        self.ServiceGeoUnit = ServiceGeoUnit
        self.ServiceGeoUnit_nsprefix_ = None
        self.FreightIndicator = FreightIndicator
        self.FreightIndicator_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LocatorRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LocatorRequest.subclass:
            return LocatorRequest.subclass(*args_, **kwargs_)
        else:
            return LocatorRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Request(self):
        return self.Request
    def set_Request(self, Request):
        self.Request = Request
    def get_OriginAddress(self):
        return self.OriginAddress
    def set_OriginAddress(self, OriginAddress):
        self.OriginAddress = OriginAddress
    def get_Translate(self):
        return self.Translate
    def set_Translate(self, Translate):
        self.Translate = Translate
    def get_UnitOfMeasurement(self):
        return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement):
        self.UnitOfMeasurement = UnitOfMeasurement
    def get_LocationID(self):
        return self.LocationID
    def set_LocationID(self, LocationID):
        self.LocationID = LocationID
    def add_LocationID(self, value):
        self.LocationID.append(value)
    def insert_LocationID_at(self, index, value):
        self.LocationID.insert(index, value)
    def replace_LocationID_at(self, index, value):
        self.LocationID[index] = value
    def get_LocationSearchCriteria(self):
        return self.LocationSearchCriteria
    def set_LocationSearchCriteria(self, LocationSearchCriteria):
        self.LocationSearchCriteria = LocationSearchCriteria
    def get_SortCriteria(self):
        return self.SortCriteria
    def set_SortCriteria(self, SortCriteria):
        self.SortCriteria = SortCriteria
    def get_AllowAllConfidenceLevels(self):
        return self.AllowAllConfidenceLevels
    def set_AllowAllConfidenceLevels(self, AllowAllConfidenceLevels):
        self.AllowAllConfidenceLevels = AllowAllConfidenceLevels
    def get_SearchOptionCode(self):
        return self.SearchOptionCode
    def set_SearchOptionCode(self, SearchOptionCode):
        self.SearchOptionCode = SearchOptionCode
    def get_ServiceGeoUnit(self):
        return self.ServiceGeoUnit
    def set_ServiceGeoUnit(self, ServiceGeoUnit):
        self.ServiceGeoUnit = ServiceGeoUnit
    def get_FreightIndicator(self):
        return self.FreightIndicator
    def set_FreightIndicator(self, FreightIndicator):
        self.FreightIndicator = FreightIndicator
    def hasContent_(self):
        if (
            self.Request is not None or
            self.OriginAddress is not None or
            self.Translate is not None or
            self.UnitOfMeasurement is not None or
            self.LocationID or
            self.LocationSearchCriteria is not None or
            self.SortCriteria is not None or
            self.AllowAllConfidenceLevels != "false" or
            self.SearchOptionCode is not None or
            self.ServiceGeoUnit is not None or
            self.FreightIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LocatorRequest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LocatorRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LocatorRequest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LocatorRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LocatorRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LocatorRequest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LocatorRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Request is not None:
            namespaceprefix_ = self.Request_nsprefix_ + ':' if (UseCapturedNS_ and self.Request_nsprefix_) else ''
            self.Request.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Request', pretty_print=pretty_print)
        if self.OriginAddress is not None:
            namespaceprefix_ = self.OriginAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginAddress_nsprefix_) else ''
            self.OriginAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OriginAddress', pretty_print=pretty_print)
        if self.Translate is not None:
            namespaceprefix_ = self.Translate_nsprefix_ + ':' if (UseCapturedNS_ and self.Translate_nsprefix_) else ''
            self.Translate.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Translate', pretty_print=pretty_print)
        if self.UnitOfMeasurement is not None:
            namespaceprefix_ = self.UnitOfMeasurement_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitOfMeasurement_nsprefix_) else ''
            self.UnitOfMeasurement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UnitOfMeasurement', pretty_print=pretty_print)
        for LocationID_ in self.LocationID:
            namespaceprefix_ = self.LocationID_nsprefix_ + ':' if (UseCapturedNS_ and self.LocationID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationID>%s</%sLocationID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(LocationID_), input_name='LocationID')), namespaceprefix_ , eol_))
        if self.LocationSearchCriteria is not None:
            namespaceprefix_ = self.LocationSearchCriteria_nsprefix_ + ':' if (UseCapturedNS_ and self.LocationSearchCriteria_nsprefix_) else ''
            self.LocationSearchCriteria.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LocationSearchCriteria', pretty_print=pretty_print)
        if self.SortCriteria is not None:
            namespaceprefix_ = self.SortCriteria_nsprefix_ + ':' if (UseCapturedNS_ and self.SortCriteria_nsprefix_) else ''
            self.SortCriteria.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SortCriteria', pretty_print=pretty_print)
        if self.AllowAllConfidenceLevels != "false":
            namespaceprefix_ = self.AllowAllConfidenceLevels_nsprefix_ + ':' if (UseCapturedNS_ and self.AllowAllConfidenceLevels_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowAllConfidenceLevels>%s</%sAllowAllConfidenceLevels>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AllowAllConfidenceLevels), input_name='AllowAllConfidenceLevels')), namespaceprefix_ , eol_))
        if self.SearchOptionCode is not None:
            namespaceprefix_ = self.SearchOptionCode_nsprefix_ + ':' if (UseCapturedNS_ and self.SearchOptionCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSearchOptionCode>%s</%sSearchOptionCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SearchOptionCode), input_name='SearchOptionCode')), namespaceprefix_ , eol_))
        if self.ServiceGeoUnit is not None:
            namespaceprefix_ = self.ServiceGeoUnit_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceGeoUnit_nsprefix_) else ''
            self.ServiceGeoUnit.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ServiceGeoUnit', pretty_print=pretty_print)
        if self.FreightIndicator is not None:
            namespaceprefix_ = self.FreightIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFreightIndicator>%s</%sFreightIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FreightIndicator), input_name='FreightIndicator')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Request':
            obj_ = Request.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Request = obj_
            obj_.original_tagname_ = 'Request'
        elif nodeName_ == 'OriginAddress':
            obj_ = OriginAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OriginAddress = obj_
            obj_.original_tagname_ = 'OriginAddress'
        elif nodeName_ == 'Translate':
            obj_ = TranslateType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Translate = obj_
            obj_.original_tagname_ = 'Translate'
        elif nodeName_ == 'UnitOfMeasurement':
            obj_ = UnitOfMeasurementType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UnitOfMeasurement = obj_
            obj_.original_tagname_ = 'UnitOfMeasurement'
        elif nodeName_ == 'LocationID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocationID')
            value_ = self.gds_validate_string(value_, node, 'LocationID')
            self.LocationID.append(value_)
            self.LocationID_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocationSearchCriteria':
            obj_ = LocationSearchCriteriaType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LocationSearchCriteria = obj_
            obj_.original_tagname_ = 'LocationSearchCriteria'
        elif nodeName_ == 'SortCriteria':
            obj_ = SortCriteriaType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SortCriteria = obj_
            obj_.original_tagname_ = 'SortCriteria'
        elif nodeName_ == 'AllowAllConfidenceLevels':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AllowAllConfidenceLevels')
            value_ = self.gds_validate_string(value_, node, 'AllowAllConfidenceLevels')
            self.AllowAllConfidenceLevels = value_
            self.AllowAllConfidenceLevels_nsprefix_ = child_.prefix
        elif nodeName_ == 'SearchOptionCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SearchOptionCode')
            value_ = self.gds_validate_string(value_, node, 'SearchOptionCode')
            self.SearchOptionCode = value_
            self.SearchOptionCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'ServiceGeoUnit':
            obj_ = ServiceGeoUnitType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ServiceGeoUnit = obj_
            obj_.original_tagname_ = 'ServiceGeoUnit'
        elif nodeName_ == 'FreightIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FreightIndicator')
            value_ = self.gds_validate_string(value_, node, 'FreightIndicator')
            self.FreightIndicator = value_
            self.FreightIndicator_nsprefix_ = child_.prefix
# end class LocatorRequest


class GeocodeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Latitude=None, Longitude=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Latitude = Latitude
        self.Latitude_nsprefix_ = None
        self.Longitude = Longitude
        self.Longitude_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeocodeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeocodeType.subclass:
            return GeocodeType.subclass(*args_, **kwargs_)
        else:
            return GeocodeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Latitude(self):
        return self.Latitude
    def set_Latitude(self, Latitude):
        self.Latitude = Latitude
    def get_Longitude(self):
        return self.Longitude
    def set_Longitude(self, Longitude):
        self.Longitude = Longitude
    def hasContent_(self):
        if (
            self.Latitude is not None or
            self.Longitude is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeocodeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeocodeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GeocodeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeocodeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeocodeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeocodeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeocodeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Latitude is not None:
            namespaceprefix_ = self.Latitude_nsprefix_ + ':' if (UseCapturedNS_ and self.Latitude_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLatitude>%s</%sLatitude>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Latitude), input_name='Latitude')), namespaceprefix_ , eol_))
        if self.Longitude is not None:
            namespaceprefix_ = self.Longitude_nsprefix_ + ':' if (UseCapturedNS_ and self.Longitude_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLongitude>%s</%sLongitude>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Longitude), input_name='Longitude')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Latitude':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Latitude')
            value_ = self.gds_validate_string(value_, node, 'Latitude')
            self.Latitude = value_
            self.Latitude_nsprefix_ = child_.prefix
        elif nodeName_ == 'Longitude':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Longitude')
            value_ = self.gds_validate_string(value_, node, 'Longitude')
            self.Longitude = value_
            self.Longitude_nsprefix_ = child_.prefix
# end class GeocodeType


class OriginAddressType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Geocode=None, AddressKeyFormat=None, MaximumListSize=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Geocode = Geocode
        self.Geocode_nsprefix_ = None
        self.AddressKeyFormat = AddressKeyFormat
        self.AddressKeyFormat_nsprefix_ = None
        self.MaximumListSize = MaximumListSize
        self.MaximumListSize_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OriginAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OriginAddressType.subclass:
            return OriginAddressType.subclass(*args_, **kwargs_)
        else:
            return OriginAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Geocode(self):
        return self.Geocode
    def set_Geocode(self, Geocode):
        self.Geocode = Geocode
    def get_AddressKeyFormat(self):
        return self.AddressKeyFormat
    def set_AddressKeyFormat(self, AddressKeyFormat):
        self.AddressKeyFormat = AddressKeyFormat
    def get_MaximumListSize(self):
        return self.MaximumListSize
    def set_MaximumListSize(self, MaximumListSize):
        self.MaximumListSize = MaximumListSize
    def hasContent_(self):
        if (
            self.Geocode is not None or
            self.AddressKeyFormat is not None or
            self.MaximumListSize is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='OriginAddressType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OriginAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OriginAddressType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OriginAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OriginAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='OriginAddressType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='OriginAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Geocode is not None:
            namespaceprefix_ = self.Geocode_nsprefix_ + ':' if (UseCapturedNS_ and self.Geocode_nsprefix_) else ''
            self.Geocode.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Geocode', pretty_print=pretty_print)
        if self.AddressKeyFormat is not None:
            namespaceprefix_ = self.AddressKeyFormat_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressKeyFormat_nsprefix_) else ''
            self.AddressKeyFormat.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AddressKeyFormat', pretty_print=pretty_print)
        if self.MaximumListSize is not None:
            namespaceprefix_ = self.MaximumListSize_nsprefix_ + ':' if (UseCapturedNS_ and self.MaximumListSize_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaximumListSize>%s</%sMaximumListSize>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MaximumListSize), input_name='MaximumListSize')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Geocode':
            obj_ = GeocodeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Geocode = obj_
            obj_.original_tagname_ = 'Geocode'
        elif nodeName_ == 'AddressKeyFormat':
            obj_ = AddressKeyFormatType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AddressKeyFormat = obj_
            obj_.original_tagname_ = 'AddressKeyFormat'
        elif nodeName_ == 'MaximumListSize':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MaximumListSize')
            value_ = self.gds_validate_string(value_, node, 'MaximumListSize')
            self.MaximumListSize = value_
            self.MaximumListSize_nsprefix_ = child_.prefix
# end class OriginAddressType


class AddressKeyFormatType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AddressLine=None, AddressLine3=None, AddressLine2=None, PoliticalDivision3=None, PoliticalDivision2=None, PoliticalDivision1=None, PostcodePrimaryLow=None, PostcodeExtendedLow=None, CountryCode=None, SingleLineAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AddressLine = AddressLine
        self.AddressLine_nsprefix_ = None
        self.AddressLine3 = AddressLine3
        self.AddressLine3_nsprefix_ = None
        self.AddressLine2 = AddressLine2
        self.AddressLine2_nsprefix_ = None
        self.PoliticalDivision3 = PoliticalDivision3
        self.PoliticalDivision3_nsprefix_ = None
        self.PoliticalDivision2 = PoliticalDivision2
        self.PoliticalDivision2_nsprefix_ = None
        self.PoliticalDivision1 = PoliticalDivision1
        self.PoliticalDivision1_nsprefix_ = None
        self.PostcodePrimaryLow = PostcodePrimaryLow
        self.PostcodePrimaryLow_nsprefix_ = None
        self.PostcodeExtendedLow = PostcodeExtendedLow
        self.PostcodeExtendedLow_nsprefix_ = None
        self.CountryCode = CountryCode
        self.CountryCode_nsprefix_ = None
        self.SingleLineAddress = SingleLineAddress
        self.SingleLineAddress_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressKeyFormatType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressKeyFormatType.subclass:
            return AddressKeyFormatType.subclass(*args_, **kwargs_)
        else:
            return AddressKeyFormatType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AddressLine(self):
        return self.AddressLine
    def set_AddressLine(self, AddressLine):
        self.AddressLine = AddressLine
    def get_AddressLine3(self):
        return self.AddressLine3
    def set_AddressLine3(self, AddressLine3):
        self.AddressLine3 = AddressLine3
    def get_AddressLine2(self):
        return self.AddressLine2
    def set_AddressLine2(self, AddressLine2):
        self.AddressLine2 = AddressLine2
    def get_PoliticalDivision3(self):
        return self.PoliticalDivision3
    def set_PoliticalDivision3(self, PoliticalDivision3):
        self.PoliticalDivision3 = PoliticalDivision3
    def get_PoliticalDivision2(self):
        return self.PoliticalDivision2
    def set_PoliticalDivision2(self, PoliticalDivision2):
        self.PoliticalDivision2 = PoliticalDivision2
    def get_PoliticalDivision1(self):
        return self.PoliticalDivision1
    def set_PoliticalDivision1(self, PoliticalDivision1):
        self.PoliticalDivision1 = PoliticalDivision1
    def get_PostcodePrimaryLow(self):
        return self.PostcodePrimaryLow
    def set_PostcodePrimaryLow(self, PostcodePrimaryLow):
        self.PostcodePrimaryLow = PostcodePrimaryLow
    def get_PostcodeExtendedLow(self):
        return self.PostcodeExtendedLow
    def set_PostcodeExtendedLow(self, PostcodeExtendedLow):
        self.PostcodeExtendedLow = PostcodeExtendedLow
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def get_SingleLineAddress(self):
        return self.SingleLineAddress
    def set_SingleLineAddress(self, SingleLineAddress):
        self.SingleLineAddress = SingleLineAddress
    def hasContent_(self):
        if (
            self.AddressLine is not None or
            self.AddressLine3 is not None or
            self.AddressLine2 is not None or
            self.PoliticalDivision3 is not None or
            self.PoliticalDivision2 is not None or
            self.PoliticalDivision1 is not None or
            self.PostcodePrimaryLow is not None or
            self.PostcodeExtendedLow is not None or
            self.CountryCode is not None or
            self.SingleLineAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AddressKeyFormatType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AddressKeyFormatType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AddressKeyFormatType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AddressKeyFormatType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AddressKeyFormatType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AddressKeyFormatType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AddressKeyFormatType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressLine is not None:
            namespaceprefix_ = self.AddressLine_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressLine_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressLine>%s</%sAddressLine>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine), input_name='AddressLine')), namespaceprefix_ , eol_))
        if self.AddressLine3 is not None:
            namespaceprefix_ = self.AddressLine3_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressLine3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressLine3>%s</%sAddressLine3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine3), input_name='AddressLine3')), namespaceprefix_ , eol_))
        if self.AddressLine2 is not None:
            namespaceprefix_ = self.AddressLine2_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressLine2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressLine2>%s</%sAddressLine2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AddressLine2), input_name='AddressLine2')), namespaceprefix_ , eol_))
        if self.PoliticalDivision3 is not None:
            namespaceprefix_ = self.PoliticalDivision3_nsprefix_ + ':' if (UseCapturedNS_ and self.PoliticalDivision3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPoliticalDivision3>%s</%sPoliticalDivision3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PoliticalDivision3), input_name='PoliticalDivision3')), namespaceprefix_ , eol_))
        if self.PoliticalDivision2 is not None:
            namespaceprefix_ = self.PoliticalDivision2_nsprefix_ + ':' if (UseCapturedNS_ and self.PoliticalDivision2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPoliticalDivision2>%s</%sPoliticalDivision2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PoliticalDivision2), input_name='PoliticalDivision2')), namespaceprefix_ , eol_))
        if self.PoliticalDivision1 is not None:
            namespaceprefix_ = self.PoliticalDivision1_nsprefix_ + ':' if (UseCapturedNS_ and self.PoliticalDivision1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPoliticalDivision1>%s</%sPoliticalDivision1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PoliticalDivision1), input_name='PoliticalDivision1')), namespaceprefix_ , eol_))
        if self.PostcodePrimaryLow is not None:
            namespaceprefix_ = self.PostcodePrimaryLow_nsprefix_ + ':' if (UseCapturedNS_ and self.PostcodePrimaryLow_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostcodePrimaryLow>%s</%sPostcodePrimaryLow>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostcodePrimaryLow), input_name='PostcodePrimaryLow')), namespaceprefix_ , eol_))
        if self.PostcodeExtendedLow is not None:
            namespaceprefix_ = self.PostcodeExtendedLow_nsprefix_ + ':' if (UseCapturedNS_ and self.PostcodeExtendedLow_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostcodeExtendedLow>%s</%sPostcodeExtendedLow>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostcodeExtendedLow), input_name='PostcodeExtendedLow')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
        if self.SingleLineAddress is not None:
            namespaceprefix_ = self.SingleLineAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.SingleLineAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSingleLineAddress>%s</%sSingleLineAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SingleLineAddress), input_name='SingleLineAddress')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AddressLine':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AddressLine')
            value_ = self.gds_validate_string(value_, node, 'AddressLine')
            self.AddressLine = value_
            self.AddressLine_nsprefix_ = child_.prefix
        elif nodeName_ == 'AddressLine3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AddressLine3')
            value_ = self.gds_validate_string(value_, node, 'AddressLine3')
            self.AddressLine3 = value_
            self.AddressLine3_nsprefix_ = child_.prefix
        elif nodeName_ == 'AddressLine2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AddressLine2')
            value_ = self.gds_validate_string(value_, node, 'AddressLine2')
            self.AddressLine2 = value_
            self.AddressLine2_nsprefix_ = child_.prefix
        elif nodeName_ == 'PoliticalDivision3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PoliticalDivision3')
            value_ = self.gds_validate_string(value_, node, 'PoliticalDivision3')
            self.PoliticalDivision3 = value_
            self.PoliticalDivision3_nsprefix_ = child_.prefix
        elif nodeName_ == 'PoliticalDivision2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PoliticalDivision2')
            value_ = self.gds_validate_string(value_, node, 'PoliticalDivision2')
            self.PoliticalDivision2 = value_
            self.PoliticalDivision2_nsprefix_ = child_.prefix
        elif nodeName_ == 'PoliticalDivision1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PoliticalDivision1')
            value_ = self.gds_validate_string(value_, node, 'PoliticalDivision1')
            self.PoliticalDivision1 = value_
            self.PoliticalDivision1_nsprefix_ = child_.prefix
        elif nodeName_ == 'PostcodePrimaryLow':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PostcodePrimaryLow')
            value_ = self.gds_validate_string(value_, node, 'PostcodePrimaryLow')
            self.PostcodePrimaryLow = value_
            self.PostcodePrimaryLow_nsprefix_ = child_.prefix
        elif nodeName_ == 'PostcodeExtendedLow':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PostcodeExtendedLow')
            value_ = self.gds_validate_string(value_, node, 'PostcodeExtendedLow')
            self.PostcodeExtendedLow = value_
            self.PostcodeExtendedLow_nsprefix_ = child_.prefix
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'SingleLineAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SingleLineAddress')
            value_ = self.gds_validate_string(value_, node, 'SingleLineAddress')
            self.SingleLineAddress = value_
            self.SingleLineAddress_nsprefix_ = child_.prefix
# end class AddressKeyFormatType


class TranslateType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LanguageCode=None, Locale=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.LanguageCode = LanguageCode
        self.LanguageCode_nsprefix_ = None
        self.Locale = Locale
        self.Locale_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TranslateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TranslateType.subclass:
            return TranslateType.subclass(*args_, **kwargs_)
        else:
            return TranslateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LanguageCode(self):
        return self.LanguageCode
    def set_LanguageCode(self, LanguageCode):
        self.LanguageCode = LanguageCode
    def get_Locale(self):
        return self.Locale
    def set_Locale(self, Locale):
        self.Locale = Locale
    def hasContent_(self):
        if (
            self.LanguageCode is not None or
            self.Locale is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TranslateType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TranslateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TranslateType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TranslateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TranslateType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TranslateType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TranslateType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LanguageCode is not None:
            namespaceprefix_ = self.LanguageCode_nsprefix_ + ':' if (UseCapturedNS_ and self.LanguageCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLanguageCode>%s</%sLanguageCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LanguageCode), input_name='LanguageCode')), namespaceprefix_ , eol_))
        if self.Locale is not None:
            namespaceprefix_ = self.Locale_nsprefix_ + ':' if (UseCapturedNS_ and self.Locale_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocale>%s</%sLocale>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Locale), input_name='Locale')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LanguageCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LanguageCode')
            value_ = self.gds_validate_string(value_, node, 'LanguageCode')
            self.LanguageCode = value_
            self.LanguageCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'Locale':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Locale')
            value_ = self.gds_validate_string(value_, node, 'Locale')
            self.Locale = value_
            self.Locale_nsprefix_ = child_.prefix
# end class TranslateType


class UnitOfMeasurementType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UnitOfMeasurementType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UnitOfMeasurementType.subclass:
            return UnitOfMeasurementType.subclass(*args_, **kwargs_)
        else:
            return UnitOfMeasurementType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def hasContent_(self):
        if (
            self.Code is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='UnitOfMeasurementType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UnitOfMeasurementType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UnitOfMeasurementType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UnitOfMeasurementType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UnitOfMeasurementType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='UnitOfMeasurementType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='UnitOfMeasurementType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
# end class UnitOfMeasurementType


class LocationSearchCriteriaType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SearchOption=None, MaximumListSize=None, SearchRadius=None, ServiceSearch=None, FreightWillCallSearch=None, AccessPointSearch=None, OpenTimeCriteria=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if SearchOption is None:
            self.SearchOption = []
        else:
            self.SearchOption = SearchOption
        self.SearchOption_nsprefix_ = None
        self.MaximumListSize = MaximumListSize
        self.MaximumListSize_nsprefix_ = None
        self.SearchRadius = SearchRadius
        self.SearchRadius_nsprefix_ = None
        self.ServiceSearch = ServiceSearch
        self.ServiceSearch_nsprefix_ = None
        self.FreightWillCallSearch = FreightWillCallSearch
        self.FreightWillCallSearch_nsprefix_ = None
        self.AccessPointSearch = AccessPointSearch
        self.AccessPointSearch_nsprefix_ = None
        self.OpenTimeCriteria = OpenTimeCriteria
        self.OpenTimeCriteria_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LocationSearchCriteriaType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LocationSearchCriteriaType.subclass:
            return LocationSearchCriteriaType.subclass(*args_, **kwargs_)
        else:
            return LocationSearchCriteriaType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SearchOption(self):
        return self.SearchOption
    def set_SearchOption(self, SearchOption):
        self.SearchOption = SearchOption
    def add_SearchOption(self, value):
        self.SearchOption.append(value)
    def insert_SearchOption_at(self, index, value):
        self.SearchOption.insert(index, value)
    def replace_SearchOption_at(self, index, value):
        self.SearchOption[index] = value
    def get_MaximumListSize(self):
        return self.MaximumListSize
    def set_MaximumListSize(self, MaximumListSize):
        self.MaximumListSize = MaximumListSize
    def get_SearchRadius(self):
        return self.SearchRadius
    def set_SearchRadius(self, SearchRadius):
        self.SearchRadius = SearchRadius
    def get_ServiceSearch(self):
        return self.ServiceSearch
    def set_ServiceSearch(self, ServiceSearch):
        self.ServiceSearch = ServiceSearch
    def get_FreightWillCallSearch(self):
        return self.FreightWillCallSearch
    def set_FreightWillCallSearch(self, FreightWillCallSearch):
        self.FreightWillCallSearch = FreightWillCallSearch
    def get_AccessPointSearch(self):
        return self.AccessPointSearch
    def set_AccessPointSearch(self, AccessPointSearch):
        self.AccessPointSearch = AccessPointSearch
    def get_OpenTimeCriteria(self):
        return self.OpenTimeCriteria
    def set_OpenTimeCriteria(self, OpenTimeCriteria):
        self.OpenTimeCriteria = OpenTimeCriteria
    def hasContent_(self):
        if (
            self.SearchOption or
            self.MaximumListSize is not None or
            self.SearchRadius is not None or
            self.ServiceSearch is not None or
            self.FreightWillCallSearch is not None or
            self.AccessPointSearch is not None or
            self.OpenTimeCriteria is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LocationSearchCriteriaType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LocationSearchCriteriaType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LocationSearchCriteriaType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LocationSearchCriteriaType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LocationSearchCriteriaType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LocationSearchCriteriaType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LocationSearchCriteriaType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SearchOption_ in self.SearchOption:
            namespaceprefix_ = self.SearchOption_nsprefix_ + ':' if (UseCapturedNS_ and self.SearchOption_nsprefix_) else ''
            SearchOption_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SearchOption', pretty_print=pretty_print)
        if self.MaximumListSize is not None:
            namespaceprefix_ = self.MaximumListSize_nsprefix_ + ':' if (UseCapturedNS_ and self.MaximumListSize_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaximumListSize>%s</%sMaximumListSize>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MaximumListSize), input_name='MaximumListSize')), namespaceprefix_ , eol_))
        if self.SearchRadius is not None:
            namespaceprefix_ = self.SearchRadius_nsprefix_ + ':' if (UseCapturedNS_ and self.SearchRadius_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSearchRadius>%s</%sSearchRadius>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SearchRadius), input_name='SearchRadius')), namespaceprefix_ , eol_))
        if self.ServiceSearch is not None:
            namespaceprefix_ = self.ServiceSearch_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceSearch_nsprefix_) else ''
            self.ServiceSearch.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ServiceSearch', pretty_print=pretty_print)
        if self.FreightWillCallSearch is not None:
            namespaceprefix_ = self.FreightWillCallSearch_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightWillCallSearch_nsprefix_) else ''
            self.FreightWillCallSearch.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreightWillCallSearch', pretty_print=pretty_print)
        if self.AccessPointSearch is not None:
            namespaceprefix_ = self.AccessPointSearch_nsprefix_ + ':' if (UseCapturedNS_ and self.AccessPointSearch_nsprefix_) else ''
            self.AccessPointSearch.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AccessPointSearch', pretty_print=pretty_print)
        if self.OpenTimeCriteria is not None:
            namespaceprefix_ = self.OpenTimeCriteria_nsprefix_ + ':' if (UseCapturedNS_ and self.OpenTimeCriteria_nsprefix_) else ''
            self.OpenTimeCriteria.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OpenTimeCriteria', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SearchOption':
            obj_ = SearchOptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SearchOption.append(obj_)
            obj_.original_tagname_ = 'SearchOption'
        elif nodeName_ == 'MaximumListSize':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MaximumListSize')
            value_ = self.gds_validate_string(value_, node, 'MaximumListSize')
            self.MaximumListSize = value_
            self.MaximumListSize_nsprefix_ = child_.prefix
        elif nodeName_ == 'SearchRadius':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SearchRadius')
            value_ = self.gds_validate_string(value_, node, 'SearchRadius')
            self.SearchRadius = value_
            self.SearchRadius_nsprefix_ = child_.prefix
        elif nodeName_ == 'ServiceSearch':
            obj_ = ServiceSearchType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ServiceSearch = obj_
            obj_.original_tagname_ = 'ServiceSearch'
        elif nodeName_ == 'FreightWillCallSearch':
            obj_ = FreightWillCallSearchType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreightWillCallSearch = obj_
            obj_.original_tagname_ = 'FreightWillCallSearch'
        elif nodeName_ == 'AccessPointSearch':
            obj_ = AccessPointSearchType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AccessPointSearch = obj_
            obj_.original_tagname_ = 'AccessPointSearch'
        elif nodeName_ == 'OpenTimeCriteria':
            obj_ = OpenTimeCriteriaType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OpenTimeCriteria = obj_
            obj_.original_tagname_ = 'OpenTimeCriteria'
# end class LocationSearchCriteriaType


class SearchOptionType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, OptionType=None, OptionCode=None, Relation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.OptionType = OptionType
        self.OptionType_nsprefix_ = None
        if OptionCode is None:
            self.OptionCode = []
        else:
            self.OptionCode = OptionCode
        self.OptionCode_nsprefix_ = None
        self.Relation = Relation
        self.Relation_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SearchOptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SearchOptionType.subclass:
            return SearchOptionType.subclass(*args_, **kwargs_)
        else:
            return SearchOptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_OptionType(self):
        return self.OptionType
    def set_OptionType(self, OptionType):
        self.OptionType = OptionType
    def get_OptionCode(self):
        return self.OptionCode
    def set_OptionCode(self, OptionCode):
        self.OptionCode = OptionCode
    def add_OptionCode(self, value):
        self.OptionCode.append(value)
    def insert_OptionCode_at(self, index, value):
        self.OptionCode.insert(index, value)
    def replace_OptionCode_at(self, index, value):
        self.OptionCode[index] = value
    def get_Relation(self):
        return self.Relation
    def set_Relation(self, Relation):
        self.Relation = Relation
    def hasContent_(self):
        if (
            self.OptionType is not None or
            self.OptionCode or
            self.Relation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SearchOptionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SearchOptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SearchOptionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SearchOptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SearchOptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SearchOptionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SearchOptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OptionType is not None:
            namespaceprefix_ = self.OptionType_nsprefix_ + ':' if (UseCapturedNS_ and self.OptionType_nsprefix_) else ''
            self.OptionType.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OptionType', pretty_print=pretty_print)
        for OptionCode_ in self.OptionCode:
            namespaceprefix_ = self.OptionCode_nsprefix_ + ':' if (UseCapturedNS_ and self.OptionCode_nsprefix_) else ''
            OptionCode_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OptionCode', pretty_print=pretty_print)
        if self.Relation is not None:
            namespaceprefix_ = self.Relation_nsprefix_ + ':' if (UseCapturedNS_ and self.Relation_nsprefix_) else ''
            self.Relation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Relation', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'OptionType':
            obj_ = CodeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OptionType = obj_
            obj_.original_tagname_ = 'OptionType'
        elif nodeName_ == 'OptionCode':
            obj_ = OptionCodeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OptionCode.append(obj_)
            obj_.original_tagname_ = 'OptionCode'
        elif nodeName_ == 'Relation':
            obj_ = CodeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Relation = obj_
            obj_.original_tagname_ = 'Relation'
# end class SearchOptionType


class OptionCodeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OptionCodeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OptionCodeType.subclass:
            return OptionCodeType.subclass(*args_, **kwargs_)
        else:
            return OptionCodeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def hasContent_(self):
        if (
            self.Code is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='OptionCodeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OptionCodeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OptionCodeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OptionCodeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OptionCodeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='OptionCodeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='OptionCodeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
# end class OptionCodeType


class CodeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CodeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CodeType.subclass:
            return CodeType.subclass(*args_, **kwargs_)
        else:
            return CodeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def hasContent_(self):
        if (
            self.Code is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CodeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CodeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CodeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CodeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CodeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CodeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CodeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
# end class CodeType


class ServiceSearchType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Time=None, ServiceCode=None, ServiceOptionCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Time = Time
        self.Time_nsprefix_ = None
        if ServiceCode is None:
            self.ServiceCode = []
        else:
            self.ServiceCode = ServiceCode
        self.ServiceCode_nsprefix_ = None
        if ServiceOptionCode is None:
            self.ServiceOptionCode = []
        else:
            self.ServiceOptionCode = ServiceOptionCode
        self.ServiceOptionCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceSearchType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceSearchType.subclass:
            return ServiceSearchType.subclass(*args_, **kwargs_)
        else:
            return ServiceSearchType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Time(self):
        return self.Time
    def set_Time(self, Time):
        self.Time = Time
    def get_ServiceCode(self):
        return self.ServiceCode
    def set_ServiceCode(self, ServiceCode):
        self.ServiceCode = ServiceCode
    def add_ServiceCode(self, value):
        self.ServiceCode.append(value)
    def insert_ServiceCode_at(self, index, value):
        self.ServiceCode.insert(index, value)
    def replace_ServiceCode_at(self, index, value):
        self.ServiceCode[index] = value
    def get_ServiceOptionCode(self):
        return self.ServiceOptionCode
    def set_ServiceOptionCode(self, ServiceOptionCode):
        self.ServiceOptionCode = ServiceOptionCode
    def add_ServiceOptionCode(self, value):
        self.ServiceOptionCode.append(value)
    def insert_ServiceOptionCode_at(self, index, value):
        self.ServiceOptionCode.insert(index, value)
    def replace_ServiceOptionCode_at(self, index, value):
        self.ServiceOptionCode[index] = value
    def hasContent_(self):
        if (
            self.Time is not None or
            self.ServiceCode or
            self.ServiceOptionCode
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ServiceSearchType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ServiceSearchType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ServiceSearchType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ServiceSearchType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ServiceSearchType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ServiceSearchType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ServiceSearchType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Time is not None:
            namespaceprefix_ = self.Time_nsprefix_ + ':' if (UseCapturedNS_ and self.Time_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTime>%s</%sTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Time), input_name='Time')), namespaceprefix_ , eol_))
        for ServiceCode_ in self.ServiceCode:
            namespaceprefix_ = self.ServiceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceCode_nsprefix_) else ''
            ServiceCode_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ServiceCode', pretty_print=pretty_print)
        for ServiceOptionCode_ in self.ServiceOptionCode:
            namespaceprefix_ = self.ServiceOptionCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceOptionCode_nsprefix_) else ''
            ServiceOptionCode_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ServiceOptionCode', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Time':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Time')
            value_ = self.gds_validate_string(value_, node, 'Time')
            self.Time = value_
            self.Time_nsprefix_ = child_.prefix
        elif nodeName_ == 'ServiceCode':
            obj_ = CodeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ServiceCode.append(obj_)
            obj_.original_tagname_ = 'ServiceCode'
        elif nodeName_ == 'ServiceOptionCode':
            obj_ = CodeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ServiceOptionCode.append(obj_)
            obj_.original_tagname_ = 'ServiceOptionCode'
# end class ServiceSearchType


class FreightWillCallSearchType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FreightWillCallRequestType=None, FacilityAddress=None, OriginOrDestination=None, FormatPostalCode=None, DayOfWeekCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.FreightWillCallRequestType = FreightWillCallRequestType
        self.FreightWillCallRequestType_nsprefix_ = None
        if FacilityAddress is None:
            self.FacilityAddress = []
        else:
            self.FacilityAddress = FacilityAddress
        self.FacilityAddress_nsprefix_ = None
        self.OriginOrDestination = OriginOrDestination
        self.OriginOrDestination_nsprefix_ = None
        self.FormatPostalCode = FormatPostalCode
        self.FormatPostalCode_nsprefix_ = None
        self.DayOfWeekCode = DayOfWeekCode
        self.DayOfWeekCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightWillCallSearchType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightWillCallSearchType.subclass:
            return FreightWillCallSearchType.subclass(*args_, **kwargs_)
        else:
            return FreightWillCallSearchType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FreightWillCallRequestType(self):
        return self.FreightWillCallRequestType
    def set_FreightWillCallRequestType(self, FreightWillCallRequestType):
        self.FreightWillCallRequestType = FreightWillCallRequestType
    def get_FacilityAddress(self):
        return self.FacilityAddress
    def set_FacilityAddress(self, FacilityAddress):
        self.FacilityAddress = FacilityAddress
    def add_FacilityAddress(self, value):
        self.FacilityAddress.append(value)
    def insert_FacilityAddress_at(self, index, value):
        self.FacilityAddress.insert(index, value)
    def replace_FacilityAddress_at(self, index, value):
        self.FacilityAddress[index] = value
    def get_OriginOrDestination(self):
        return self.OriginOrDestination
    def set_OriginOrDestination(self, OriginOrDestination):
        self.OriginOrDestination = OriginOrDestination
    def get_FormatPostalCode(self):
        return self.FormatPostalCode
    def set_FormatPostalCode(self, FormatPostalCode):
        self.FormatPostalCode = FormatPostalCode
    def get_DayOfWeekCode(self):
        return self.DayOfWeekCode
    def set_DayOfWeekCode(self, DayOfWeekCode):
        self.DayOfWeekCode = DayOfWeekCode
    def hasContent_(self):
        if (
            self.FreightWillCallRequestType is not None or
            self.FacilityAddress or
            self.OriginOrDestination is not None or
            self.FormatPostalCode is not None or
            self.DayOfWeekCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightWillCallSearchType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightWillCallSearchType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightWillCallSearchType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightWillCallSearchType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightWillCallSearchType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightWillCallSearchType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightWillCallSearchType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FreightWillCallRequestType is not None:
            namespaceprefix_ = self.FreightWillCallRequestType_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightWillCallRequestType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFreightWillCallRequestType>%s</%sFreightWillCallRequestType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FreightWillCallRequestType), input_name='FreightWillCallRequestType')), namespaceprefix_ , eol_))
        for FacilityAddress_ in self.FacilityAddress:
            namespaceprefix_ = self.FacilityAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.FacilityAddress_nsprefix_) else ''
            FacilityAddress_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FacilityAddress', pretty_print=pretty_print)
        if self.OriginOrDestination is not None:
            namespaceprefix_ = self.OriginOrDestination_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginOrDestination_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginOrDestination>%s</%sOriginOrDestination>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OriginOrDestination), input_name='OriginOrDestination')), namespaceprefix_ , eol_))
        if self.FormatPostalCode is not None:
            namespaceprefix_ = self.FormatPostalCode_nsprefix_ + ':' if (UseCapturedNS_ and self.FormatPostalCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormatPostalCode>%s</%sFormatPostalCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FormatPostalCode), input_name='FormatPostalCode')), namespaceprefix_ , eol_))
        if self.DayOfWeekCode is not None:
            namespaceprefix_ = self.DayOfWeekCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DayOfWeekCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDayOfWeekCode>%s</%sDayOfWeekCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DayOfWeekCode), input_name='DayOfWeekCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FreightWillCallRequestType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FreightWillCallRequestType')
            value_ = self.gds_validate_string(value_, node, 'FreightWillCallRequestType')
            self.FreightWillCallRequestType = value_
            self.FreightWillCallRequestType_nsprefix_ = child_.prefix
        elif nodeName_ == 'FacilityAddress':
            obj_ = FacilityAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FacilityAddress.append(obj_)
            obj_.original_tagname_ = 'FacilityAddress'
        elif nodeName_ == 'OriginOrDestination':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OriginOrDestination')
            value_ = self.gds_validate_string(value_, node, 'OriginOrDestination')
            self.OriginOrDestination = value_
            self.OriginOrDestination_nsprefix_ = child_.prefix
        elif nodeName_ == 'FormatPostalCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FormatPostalCode')
            value_ = self.gds_validate_string(value_, node, 'FormatPostalCode')
            self.FormatPostalCode = value_
            self.FormatPostalCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'DayOfWeekCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DayOfWeekCode')
            value_ = self.gds_validate_string(value_, node, 'DayOfWeekCode')
            self.DayOfWeekCode = value_
            self.DayOfWeekCode_nsprefix_ = child_.prefix
# end class FreightWillCallSearchType


class FacilityAddressType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SLIC=None, AddressLine=None, City=None, PostalCodePrimaryLow=None, PostalCodeExtendedLow=None, State=None, CountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.SLIC = SLIC
        self.SLIC_nsprefix_ = None
        if AddressLine is None:
            self.AddressLine = []
        else:
            self.AddressLine = AddressLine
        self.AddressLine_nsprefix_ = None
        self.City = City
        self.City_nsprefix_ = None
        self.PostalCodePrimaryLow = PostalCodePrimaryLow
        self.PostalCodePrimaryLow_nsprefix_ = None
        self.PostalCodeExtendedLow = PostalCodeExtendedLow
        self.PostalCodeExtendedLow_nsprefix_ = None
        self.State = State
        self.State_nsprefix_ = None
        self.CountryCode = CountryCode
        self.CountryCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FacilityAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FacilityAddressType.subclass:
            return FacilityAddressType.subclass(*args_, **kwargs_)
        else:
            return FacilityAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SLIC(self):
        return self.SLIC
    def set_SLIC(self, SLIC):
        self.SLIC = SLIC
    def get_AddressLine(self):
        return self.AddressLine
    def set_AddressLine(self, AddressLine):
        self.AddressLine = AddressLine
    def add_AddressLine(self, value):
        self.AddressLine.append(value)
    def insert_AddressLine_at(self, index, value):
        self.AddressLine.insert(index, value)
    def replace_AddressLine_at(self, index, value):
        self.AddressLine[index] = value
    def get_City(self):
        return self.City
    def set_City(self, City):
        self.City = City
    def get_PostalCodePrimaryLow(self):
        return self.PostalCodePrimaryLow
    def set_PostalCodePrimaryLow(self, PostalCodePrimaryLow):
        self.PostalCodePrimaryLow = PostalCodePrimaryLow
    def get_PostalCodeExtendedLow(self):
        return self.PostalCodeExtendedLow
    def set_PostalCodeExtendedLow(self, PostalCodeExtendedLow):
        self.PostalCodeExtendedLow = PostalCodeExtendedLow
    def get_State(self):
        return self.State
    def set_State(self, State):
        self.State = State
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def hasContent_(self):
        if (
            self.SLIC is not None or
            self.AddressLine or
            self.City is not None or
            self.PostalCodePrimaryLow is not None or
            self.PostalCodeExtendedLow is not None or
            self.State is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FacilityAddressType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FacilityAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FacilityAddressType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FacilityAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FacilityAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FacilityAddressType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FacilityAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SLIC is not None:
            namespaceprefix_ = self.SLIC_nsprefix_ + ':' if (UseCapturedNS_ and self.SLIC_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSLIC>%s</%sSLIC>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SLIC), input_name='SLIC')), namespaceprefix_ , eol_))
        for AddressLine_ in self.AddressLine:
            namespaceprefix_ = self.AddressLine_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressLine_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressLine>%s</%sAddressLine>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(AddressLine_), input_name='AddressLine')), namespaceprefix_ , eol_))
        if self.City is not None:
            namespaceprefix_ = self.City_nsprefix_ + ':' if (UseCapturedNS_ and self.City_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCity>%s</%sCity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), namespaceprefix_ , eol_))
        if self.PostalCodePrimaryLow is not None:
            namespaceprefix_ = self.PostalCodePrimaryLow_nsprefix_ + ':' if (UseCapturedNS_ and self.PostalCodePrimaryLow_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCodePrimaryLow>%s</%sPostalCodePrimaryLow>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostalCodePrimaryLow), input_name='PostalCodePrimaryLow')), namespaceprefix_ , eol_))
        if self.PostalCodeExtendedLow is not None:
            namespaceprefix_ = self.PostalCodeExtendedLow_nsprefix_ + ':' if (UseCapturedNS_ and self.PostalCodeExtendedLow_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCodeExtendedLow>%s</%sPostalCodeExtendedLow>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostalCodeExtendedLow), input_name='PostalCodeExtendedLow')), namespaceprefix_ , eol_))
        if self.State is not None:
            namespaceprefix_ = self.State_nsprefix_ + ':' if (UseCapturedNS_ and self.State_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sState>%s</%sState>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.State), input_name='State')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SLIC':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SLIC')
            value_ = self.gds_validate_string(value_, node, 'SLIC')
            self.SLIC = value_
            self.SLIC_nsprefix_ = child_.prefix
        elif nodeName_ == 'AddressLine':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AddressLine')
            value_ = self.gds_validate_string(value_, node, 'AddressLine')
            self.AddressLine.append(value_)
            self.AddressLine_nsprefix_ = child_.prefix
        elif nodeName_ == 'City':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'City')
            value_ = self.gds_validate_string(value_, node, 'City')
            self.City = value_
            self.City_nsprefix_ = child_.prefix
        elif nodeName_ == 'PostalCodePrimaryLow':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PostalCodePrimaryLow')
            value_ = self.gds_validate_string(value_, node, 'PostalCodePrimaryLow')
            self.PostalCodePrimaryLow = value_
            self.PostalCodePrimaryLow_nsprefix_ = child_.prefix
        elif nodeName_ == 'PostalCodeExtendedLow':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PostalCodeExtendedLow')
            value_ = self.gds_validate_string(value_, node, 'PostalCodeExtendedLow')
            self.PostalCodeExtendedLow = value_
            self.PostalCodeExtendedLow_nsprefix_ = child_.prefix
        elif nodeName_ == 'State':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'State')
            value_ = self.gds_validate_string(value_, node, 'State')
            self.State = value_
            self.State_nsprefix_ = child_.prefix
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
# end class FacilityAddressType


class ServiceGeoUnitType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ServiceCode=None, GeoPoliticalUnit=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ServiceCode = ServiceCode
        self.ServiceCode_nsprefix_ = None
        self.GeoPoliticalUnit = GeoPoliticalUnit
        self.GeoPoliticalUnit_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceGeoUnitType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceGeoUnitType.subclass:
            return ServiceGeoUnitType.subclass(*args_, **kwargs_)
        else:
            return ServiceGeoUnitType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ServiceCode(self):
        return self.ServiceCode
    def set_ServiceCode(self, ServiceCode):
        self.ServiceCode = ServiceCode
    def get_GeoPoliticalUnit(self):
        return self.GeoPoliticalUnit
    def set_GeoPoliticalUnit(self, GeoPoliticalUnit):
        self.GeoPoliticalUnit = GeoPoliticalUnit
    def hasContent_(self):
        if (
            self.ServiceCode is not None or
            self.GeoPoliticalUnit is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ServiceGeoUnitType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ServiceGeoUnitType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ServiceGeoUnitType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ServiceGeoUnitType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ServiceGeoUnitType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ServiceGeoUnitType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ServiceGeoUnitType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceCode is not None:
            namespaceprefix_ = self.ServiceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceCode>%s</%sServiceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ServiceCode), input_name='ServiceCode')), namespaceprefix_ , eol_))
        if self.GeoPoliticalUnit is not None:
            namespaceprefix_ = self.GeoPoliticalUnit_nsprefix_ + ':' if (UseCapturedNS_ and self.GeoPoliticalUnit_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGeoPoliticalUnit>%s</%sGeoPoliticalUnit>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GeoPoliticalUnit), input_name='GeoPoliticalUnit')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ServiceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ServiceCode')
            value_ = self.gds_validate_string(value_, node, 'ServiceCode')
            self.ServiceCode = value_
            self.ServiceCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'GeoPoliticalUnit':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GeoPoliticalUnit')
            value_ = self.gds_validate_string(value_, node, 'GeoPoliticalUnit')
            self.GeoPoliticalUnit = value_
            self.GeoPoliticalUnit_nsprefix_ = child_.prefix
# end class ServiceGeoUnitType


class Request(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TransactionReference=None, RequestAction=None, RequestOption=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TransactionReference = TransactionReference
        self.TransactionReference_nsprefix_ = None
        self.RequestAction = RequestAction
        self.RequestAction_nsprefix_ = None
        self.RequestOption = RequestOption
        self.RequestOption_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Request)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Request.subclass:
            return Request.subclass(*args_, **kwargs_)
        else:
            return Request(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TransactionReference(self):
        return self.TransactionReference
    def set_TransactionReference(self, TransactionReference):
        self.TransactionReference = TransactionReference
    def get_RequestAction(self):
        return self.RequestAction
    def set_RequestAction(self, RequestAction):
        self.RequestAction = RequestAction
    def get_RequestOption(self):
        return self.RequestOption
    def set_RequestOption(self, RequestOption):
        self.RequestOption = RequestOption
    def hasContent_(self):
        if (
            self.TransactionReference is not None or
            self.RequestAction is not None or
            self.RequestOption is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Request', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Request')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Request':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Request')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Request', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Request'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Request', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TransactionReference is not None:
            namespaceprefix_ = self.TransactionReference_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionReference_nsprefix_) else ''
            self.TransactionReference.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionReference', pretty_print=pretty_print)
        if self.RequestAction is not None:
            namespaceprefix_ = self.RequestAction_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestAction_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestAction>%s</%sRequestAction>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RequestAction), input_name='RequestAction')), namespaceprefix_ , eol_))
        if self.RequestOption is not None:
            namespaceprefix_ = self.RequestOption_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestOption_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestOption>%s</%sRequestOption>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RequestOption), input_name='RequestOption')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TransactionReference':
            obj_ = TransactionReference.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionReference = obj_
            obj_.original_tagname_ = 'TransactionReference'
        elif nodeName_ == 'RequestAction':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequestAction')
            value_ = self.gds_validate_string(value_, node, 'RequestAction')
            self.RequestAction = value_
            self.RequestAction_nsprefix_ = child_.prefix
        elif nodeName_ == 'RequestOption':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequestOption')
            value_ = self.gds_validate_string(value_, node, 'RequestOption')
            self.RequestOption = value_
            self.RequestOption_nsprefix_ = child_.prefix
# end class Request


class TransactionReference(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CustomerContext=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CustomerContext = CustomerContext
        self.CustomerContext_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransactionReference)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransactionReference.subclass:
            return TransactionReference.subclass(*args_, **kwargs_)
        else:
            return TransactionReference(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CustomerContext(self):
        return self.CustomerContext
    def set_CustomerContext(self, CustomerContext):
        self.CustomerContext = CustomerContext
    def hasContent_(self):
        if (
            self.CustomerContext is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TransactionReference', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransactionReference')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransactionReference':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransactionReference')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransactionReference', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TransactionReference'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TransactionReference', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomerContext is not None:
            namespaceprefix_ = self.CustomerContext_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerContext_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomerContext>%s</%sCustomerContext>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomerContext), input_name='CustomerContext')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CustomerContext':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomerContext')
            value_ = self.gds_validate_string(value_, node, 'CustomerContext')
            self.CustomerContext = value_
            self.CustomerContext_nsprefix_ = child_.prefix
# end class TransactionReference


class AccessPointSearchType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PublicAccessPointID=None, AccessPointStatus=None, AccountNumber=None, IncludeCriteria=None, ExcludeFromResult=None, SearchIdCriteria=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PublicAccessPointID = PublicAccessPointID
        self.PublicAccessPointID_nsprefix_ = None
        self.AccessPointStatus = AccessPointStatus
        self.AccessPointStatus_nsprefix_ = None
        self.AccountNumber = AccountNumber
        self.AccountNumber_nsprefix_ = None
        self.IncludeCriteria = IncludeCriteria
        self.IncludeCriteria_nsprefix_ = None
        self.ExcludeFromResult = ExcludeFromResult
        self.ExcludeFromResult_nsprefix_ = None
        self.SearchIdCriteria = SearchIdCriteria
        self.SearchIdCriteria_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AccessPointSearchType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AccessPointSearchType.subclass:
            return AccessPointSearchType.subclass(*args_, **kwargs_)
        else:
            return AccessPointSearchType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PublicAccessPointID(self):
        return self.PublicAccessPointID
    def set_PublicAccessPointID(self, PublicAccessPointID):
        self.PublicAccessPointID = PublicAccessPointID
    def get_AccessPointStatus(self):
        return self.AccessPointStatus
    def set_AccessPointStatus(self, AccessPointStatus):
        self.AccessPointStatus = AccessPointStatus
    def get_AccountNumber(self):
        return self.AccountNumber
    def set_AccountNumber(self, AccountNumber):
        self.AccountNumber = AccountNumber
    def get_IncludeCriteria(self):
        return self.IncludeCriteria
    def set_IncludeCriteria(self, IncludeCriteria):
        self.IncludeCriteria = IncludeCriteria
    def get_ExcludeFromResult(self):
        return self.ExcludeFromResult
    def set_ExcludeFromResult(self, ExcludeFromResult):
        self.ExcludeFromResult = ExcludeFromResult
    def get_SearchIdCriteria(self):
        return self.SearchIdCriteria
    def set_SearchIdCriteria(self, SearchIdCriteria):
        self.SearchIdCriteria = SearchIdCriteria
    def hasContent_(self):
        if (
            self.PublicAccessPointID is not None or
            self.AccessPointStatus is not None or
            self.AccountNumber is not None or
            self.IncludeCriteria is not None or
            self.ExcludeFromResult is not None or
            self.SearchIdCriteria is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AccessPointSearchType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AccessPointSearchType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AccessPointSearchType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AccessPointSearchType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AccessPointSearchType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AccessPointSearchType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AccessPointSearchType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PublicAccessPointID is not None:
            namespaceprefix_ = self.PublicAccessPointID_nsprefix_ + ':' if (UseCapturedNS_ and self.PublicAccessPointID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPublicAccessPointID>%s</%sPublicAccessPointID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PublicAccessPointID), input_name='PublicAccessPointID')), namespaceprefix_ , eol_))
        if self.AccessPointStatus is not None:
            namespaceprefix_ = self.AccessPointStatus_nsprefix_ + ':' if (UseCapturedNS_ and self.AccessPointStatus_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccessPointStatus>%s</%sAccessPointStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccessPointStatus), input_name='AccessPointStatus')), namespaceprefix_ , eol_))
        if self.AccountNumber is not None:
            namespaceprefix_ = self.AccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), namespaceprefix_ , eol_))
        if self.IncludeCriteria is not None:
            namespaceprefix_ = self.IncludeCriteria_nsprefix_ + ':' if (UseCapturedNS_ and self.IncludeCriteria_nsprefix_) else ''
            self.IncludeCriteria.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IncludeCriteria', pretty_print=pretty_print)
        if self.ExcludeFromResult is not None:
            namespaceprefix_ = self.ExcludeFromResult_nsprefix_ + ':' if (UseCapturedNS_ and self.ExcludeFromResult_nsprefix_) else ''
            self.ExcludeFromResult.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExcludeFromResult', pretty_print=pretty_print)
        if self.SearchIdCriteria is not None:
            namespaceprefix_ = self.SearchIdCriteria_nsprefix_ + ':' if (UseCapturedNS_ and self.SearchIdCriteria_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSearchIdCriteria>%s</%sSearchIdCriteria>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SearchIdCriteria), input_name='SearchIdCriteria')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PublicAccessPointID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PublicAccessPointID')
            value_ = self.gds_validate_string(value_, node, 'PublicAccessPointID')
            self.PublicAccessPointID = value_
            self.PublicAccessPointID_nsprefix_ = child_.prefix
        elif nodeName_ == 'AccessPointStatus':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccessPointStatus')
            value_ = self.gds_validate_string(value_, node, 'AccessPointStatus')
            self.AccessPointStatus = value_
            self.AccessPointStatus_nsprefix_ = child_.prefix
        elif nodeName_ == 'AccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountNumber')
            value_ = self.gds_validate_string(value_, node, 'AccountNumber')
            self.AccountNumber = value_
            self.AccountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'IncludeCriteria':
            obj_ = IncludeCriteriaType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.IncludeCriteria = obj_
            obj_.original_tagname_ = 'IncludeCriteria'
        elif nodeName_ == 'ExcludeFromResult':
            obj_ = ExcludeFromResultType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExcludeFromResult = obj_
            obj_.original_tagname_ = 'ExcludeFromResult'
        elif nodeName_ == 'SearchIdCriteria':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SearchIdCriteria')
            value_ = self.gds_validate_string(value_, node, 'SearchIdCriteria')
            self.SearchIdCriteria = value_
            self.SearchIdCriteria_nsprefix_ = child_.prefix
# end class AccessPointSearchType


class ExcludeFromResultType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, BusinessClassificationCode=None, BusinessName=None, Radius=None, PostalCodeList=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if BusinessClassificationCode is None:
            self.BusinessClassificationCode = []
        else:
            self.BusinessClassificationCode = BusinessClassificationCode
        self.BusinessClassificationCode_nsprefix_ = None
        self.BusinessName = BusinessName
        self.BusinessName_nsprefix_ = None
        self.Radius = Radius
        self.Radius_nsprefix_ = None
        self.PostalCodeList = PostalCodeList
        self.PostalCodeList_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExcludeFromResultType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExcludeFromResultType.subclass:
            return ExcludeFromResultType.subclass(*args_, **kwargs_)
        else:
            return ExcludeFromResultType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_BusinessClassificationCode(self):
        return self.BusinessClassificationCode
    def set_BusinessClassificationCode(self, BusinessClassificationCode):
        self.BusinessClassificationCode = BusinessClassificationCode
    def add_BusinessClassificationCode(self, value):
        self.BusinessClassificationCode.append(value)
    def insert_BusinessClassificationCode_at(self, index, value):
        self.BusinessClassificationCode.insert(index, value)
    def replace_BusinessClassificationCode_at(self, index, value):
        self.BusinessClassificationCode[index] = value
    def get_BusinessName(self):
        return self.BusinessName
    def set_BusinessName(self, BusinessName):
        self.BusinessName = BusinessName
    def get_Radius(self):
        return self.Radius
    def set_Radius(self, Radius):
        self.Radius = Radius
    def get_PostalCodeList(self):
        return self.PostalCodeList
    def set_PostalCodeList(self, PostalCodeList):
        self.PostalCodeList = PostalCodeList
    def hasContent_(self):
        if (
            self.BusinessClassificationCode or
            self.BusinessName is not None or
            self.Radius is not None or
            self.PostalCodeList is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExcludeFromResultType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExcludeFromResultType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ExcludeFromResultType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ExcludeFromResultType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ExcludeFromResultType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ExcludeFromResultType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExcludeFromResultType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for BusinessClassificationCode_ in self.BusinessClassificationCode:
            namespaceprefix_ = self.BusinessClassificationCode_nsprefix_ + ':' if (UseCapturedNS_ and self.BusinessClassificationCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBusinessClassificationCode>%s</%sBusinessClassificationCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(BusinessClassificationCode_), input_name='BusinessClassificationCode')), namespaceprefix_ , eol_))
        if self.BusinessName is not None:
            namespaceprefix_ = self.BusinessName_nsprefix_ + ':' if (UseCapturedNS_ and self.BusinessName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBusinessName>%s</%sBusinessName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BusinessName), input_name='BusinessName')), namespaceprefix_ , eol_))
        if self.Radius is not None:
            namespaceprefix_ = self.Radius_nsprefix_ + ':' if (UseCapturedNS_ and self.Radius_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRadius>%s</%sRadius>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Radius), input_name='Radius')), namespaceprefix_ , eol_))
        if self.PostalCodeList is not None:
            namespaceprefix_ = self.PostalCodeList_nsprefix_ + ':' if (UseCapturedNS_ and self.PostalCodeList_nsprefix_) else ''
            self.PostalCodeList.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PostalCodeList', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'BusinessClassificationCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BusinessClassificationCode')
            value_ = self.gds_validate_string(value_, node, 'BusinessClassificationCode')
            self.BusinessClassificationCode.append(value_)
            self.BusinessClassificationCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'BusinessName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BusinessName')
            value_ = self.gds_validate_string(value_, node, 'BusinessName')
            self.BusinessName = value_
            self.BusinessName_nsprefix_ = child_.prefix
        elif nodeName_ == 'Radius':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Radius')
            value_ = self.gds_validate_string(value_, node, 'Radius')
            self.Radius = value_
            self.Radius_nsprefix_ = child_.prefix
        elif nodeName_ == 'PostalCodeList':
            obj_ = PostalCodeListType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PostalCodeList = obj_
            obj_.original_tagname_ = 'PostalCodeList'
# end class ExcludeFromResultType


class PostalCodeListType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PostalCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if PostalCode is None:
            self.PostalCode = []
        else:
            self.PostalCode = PostalCode
        self.PostalCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PostalCodeListType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PostalCodeListType.subclass:
            return PostalCodeListType.subclass(*args_, **kwargs_)
        else:
            return PostalCodeListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PostalCode(self):
        return self.PostalCode
    def set_PostalCode(self, PostalCode):
        self.PostalCode = PostalCode
    def add_PostalCode(self, value):
        self.PostalCode.append(value)
    def insert_PostalCode_at(self, index, value):
        self.PostalCode.insert(index, value)
    def replace_PostalCode_at(self, index, value):
        self.PostalCode[index] = value
    def hasContent_(self):
        if (
            self.PostalCode
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PostalCodeListType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PostalCodeListType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PostalCodeListType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PostalCodeListType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PostalCodeListType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PostalCodeListType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PostalCodeListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for PostalCode_ in self.PostalCode:
            namespaceprefix_ = self.PostalCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PostalCode_nsprefix_) else ''
            PostalCode_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PostalCode', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PostalCode':
            obj_ = PostalCodeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PostalCode.append(obj_)
            obj_.original_tagname_ = 'PostalCode'
# end class PostalCodeListType


class PostalCodeType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PrimaryPostalCode=None, SecondaryPostalCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PrimaryPostalCode = PrimaryPostalCode
        self.PrimaryPostalCode_nsprefix_ = None
        self.SecondaryPostalCode = SecondaryPostalCode
        self.SecondaryPostalCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PostalCodeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PostalCodeType.subclass:
            return PostalCodeType.subclass(*args_, **kwargs_)
        else:
            return PostalCodeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PrimaryPostalCode(self):
        return self.PrimaryPostalCode
    def set_PrimaryPostalCode(self, PrimaryPostalCode):
        self.PrimaryPostalCode = PrimaryPostalCode
    def get_SecondaryPostalCode(self):
        return self.SecondaryPostalCode
    def set_SecondaryPostalCode(self, SecondaryPostalCode):
        self.SecondaryPostalCode = SecondaryPostalCode
    def hasContent_(self):
        if (
            self.PrimaryPostalCode is not None or
            self.SecondaryPostalCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PostalCodeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PostalCodeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PostalCodeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PostalCodeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PostalCodeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PostalCodeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PostalCodeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PrimaryPostalCode is not None:
            namespaceprefix_ = self.PrimaryPostalCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PrimaryPostalCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrimaryPostalCode>%s</%sPrimaryPostalCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrimaryPostalCode), input_name='PrimaryPostalCode')), namespaceprefix_ , eol_))
        if self.SecondaryPostalCode is not None:
            namespaceprefix_ = self.SecondaryPostalCode_nsprefix_ + ':' if (UseCapturedNS_ and self.SecondaryPostalCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSecondaryPostalCode>%s</%sSecondaryPostalCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SecondaryPostalCode), input_name='SecondaryPostalCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PrimaryPostalCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PrimaryPostalCode')
            value_ = self.gds_validate_string(value_, node, 'PrimaryPostalCode')
            self.PrimaryPostalCode = value_
            self.PrimaryPostalCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'SecondaryPostalCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SecondaryPostalCode')
            value_ = self.gds_validate_string(value_, node, 'SecondaryPostalCode')
            self.SecondaryPostalCode = value_
            self.SecondaryPostalCode_nsprefix_ = child_.prefix
# end class PostalCodeType


class IncludeCriteriaType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MerchantAccountNumberList=None, SearchFilter=None, ServiceOfferingList=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.MerchantAccountNumberList = MerchantAccountNumberList
        self.MerchantAccountNumberList_nsprefix_ = None
        self.SearchFilter = SearchFilter
        self.SearchFilter_nsprefix_ = None
        self.ServiceOfferingList = ServiceOfferingList
        self.ServiceOfferingList_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IncludeCriteriaType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IncludeCriteriaType.subclass:
            return IncludeCriteriaType.subclass(*args_, **kwargs_)
        else:
            return IncludeCriteriaType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MerchantAccountNumberList(self):
        return self.MerchantAccountNumberList
    def set_MerchantAccountNumberList(self, MerchantAccountNumberList):
        self.MerchantAccountNumberList = MerchantAccountNumberList
    def get_SearchFilter(self):
        return self.SearchFilter
    def set_SearchFilter(self, SearchFilter):
        self.SearchFilter = SearchFilter
    def get_ServiceOfferingList(self):
        return self.ServiceOfferingList
    def set_ServiceOfferingList(self, ServiceOfferingList):
        self.ServiceOfferingList = ServiceOfferingList
    def hasContent_(self):
        if (
            self.MerchantAccountNumberList is not None or
            self.SearchFilter is not None or
            self.ServiceOfferingList is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='IncludeCriteriaType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IncludeCriteriaType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'IncludeCriteriaType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IncludeCriteriaType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IncludeCriteriaType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='IncludeCriteriaType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='IncludeCriteriaType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MerchantAccountNumberList is not None:
            namespaceprefix_ = self.MerchantAccountNumberList_nsprefix_ + ':' if (UseCapturedNS_ and self.MerchantAccountNumberList_nsprefix_) else ''
            self.MerchantAccountNumberList.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MerchantAccountNumberList', pretty_print=pretty_print)
        if self.SearchFilter is not None:
            namespaceprefix_ = self.SearchFilter_nsprefix_ + ':' if (UseCapturedNS_ and self.SearchFilter_nsprefix_) else ''
            self.SearchFilter.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SearchFilter', pretty_print=pretty_print)
        if self.ServiceOfferingList is not None:
            namespaceprefix_ = self.ServiceOfferingList_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceOfferingList_nsprefix_) else ''
            self.ServiceOfferingList.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ServiceOfferingList', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MerchantAccountNumberList':
            obj_ = MerchantAccountNumberListType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MerchantAccountNumberList = obj_
            obj_.original_tagname_ = 'MerchantAccountNumberList'
        elif nodeName_ == 'SearchFilter':
            obj_ = SearchFilterType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SearchFilter = obj_
            obj_.original_tagname_ = 'SearchFilter'
        elif nodeName_ == 'ServiceOfferingList':
            obj_ = ServiceOfferingListType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ServiceOfferingList = obj_
            obj_.original_tagname_ = 'ServiceOfferingList'
# end class IncludeCriteriaType


class SearchFilterType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DCRIndicator=None, ShippingAvailabilityIndicator=None, ShipperPreparationDelay=None, ClickAndCollectSortWithDistance=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DCRIndicator = DCRIndicator
        self.DCRIndicator_nsprefix_ = None
        self.ShippingAvailabilityIndicator = ShippingAvailabilityIndicator
        self.ShippingAvailabilityIndicator_nsprefix_ = None
        self.ShipperPreparationDelay = ShipperPreparationDelay
        self.ShipperPreparationDelay_nsprefix_ = None
        self.ClickAndCollectSortWithDistance = ClickAndCollectSortWithDistance
        self.ClickAndCollectSortWithDistance_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SearchFilterType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SearchFilterType.subclass:
            return SearchFilterType.subclass(*args_, **kwargs_)
        else:
            return SearchFilterType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DCRIndicator(self):
        return self.DCRIndicator
    def set_DCRIndicator(self, DCRIndicator):
        self.DCRIndicator = DCRIndicator
    def get_ShippingAvailabilityIndicator(self):
        return self.ShippingAvailabilityIndicator
    def set_ShippingAvailabilityIndicator(self, ShippingAvailabilityIndicator):
        self.ShippingAvailabilityIndicator = ShippingAvailabilityIndicator
    def get_ShipperPreparationDelay(self):
        return self.ShipperPreparationDelay
    def set_ShipperPreparationDelay(self, ShipperPreparationDelay):
        self.ShipperPreparationDelay = ShipperPreparationDelay
    def get_ClickAndCollectSortWithDistance(self):
        return self.ClickAndCollectSortWithDistance
    def set_ClickAndCollectSortWithDistance(self, ClickAndCollectSortWithDistance):
        self.ClickAndCollectSortWithDistance = ClickAndCollectSortWithDistance
    def hasContent_(self):
        if (
            self.DCRIndicator is not None or
            self.ShippingAvailabilityIndicator is not None or
            self.ShipperPreparationDelay is not None or
            self.ClickAndCollectSortWithDistance is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SearchFilterType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SearchFilterType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SearchFilterType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SearchFilterType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SearchFilterType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SearchFilterType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SearchFilterType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DCRIndicator is not None:
            namespaceprefix_ = self.DCRIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.DCRIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDCRIndicator>%s</%sDCRIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DCRIndicator), input_name='DCRIndicator')), namespaceprefix_ , eol_))
        if self.ShippingAvailabilityIndicator is not None:
            namespaceprefix_ = self.ShippingAvailabilityIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.ShippingAvailabilityIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShippingAvailabilityIndicator>%s</%sShippingAvailabilityIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShippingAvailabilityIndicator), input_name='ShippingAvailabilityIndicator')), namespaceprefix_ , eol_))
        if self.ShipperPreparationDelay is not None:
            namespaceprefix_ = self.ShipperPreparationDelay_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipperPreparationDelay_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipperPreparationDelay>%s</%sShipperPreparationDelay>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShipperPreparationDelay), input_name='ShipperPreparationDelay')), namespaceprefix_ , eol_))
        if self.ClickAndCollectSortWithDistance is not None:
            namespaceprefix_ = self.ClickAndCollectSortWithDistance_nsprefix_ + ':' if (UseCapturedNS_ and self.ClickAndCollectSortWithDistance_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClickAndCollectSortWithDistance>%s</%sClickAndCollectSortWithDistance>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClickAndCollectSortWithDistance), input_name='ClickAndCollectSortWithDistance')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DCRIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DCRIndicator')
            value_ = self.gds_validate_string(value_, node, 'DCRIndicator')
            self.DCRIndicator = value_
            self.DCRIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShippingAvailabilityIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShippingAvailabilityIndicator')
            value_ = self.gds_validate_string(value_, node, 'ShippingAvailabilityIndicator')
            self.ShippingAvailabilityIndicator = value_
            self.ShippingAvailabilityIndicator_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShipperPreparationDelay':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShipperPreparationDelay')
            value_ = self.gds_validate_string(value_, node, 'ShipperPreparationDelay')
            self.ShipperPreparationDelay = value_
            self.ShipperPreparationDelay_nsprefix_ = child_.prefix
        elif nodeName_ == 'ClickAndCollectSortWithDistance':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClickAndCollectSortWithDistance')
            value_ = self.gds_validate_string(value_, node, 'ClickAndCollectSortWithDistance')
            self.ClickAndCollectSortWithDistance = value_
            self.ClickAndCollectSortWithDistance_nsprefix_ = child_.prefix
# end class SearchFilterType


class ServiceOfferingListType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ServiceOffering=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if ServiceOffering is None:
            self.ServiceOffering = []
        else:
            self.ServiceOffering = ServiceOffering
        self.ServiceOffering_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceOfferingListType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceOfferingListType.subclass:
            return ServiceOfferingListType.subclass(*args_, **kwargs_)
        else:
            return ServiceOfferingListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ServiceOffering(self):
        return self.ServiceOffering
    def set_ServiceOffering(self, ServiceOffering):
        self.ServiceOffering = ServiceOffering
    def add_ServiceOffering(self, value):
        self.ServiceOffering.append(value)
    def insert_ServiceOffering_at(self, index, value):
        self.ServiceOffering.insert(index, value)
    def replace_ServiceOffering_at(self, index, value):
        self.ServiceOffering[index] = value
    def hasContent_(self):
        if (
            self.ServiceOffering
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ServiceOfferingListType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ServiceOfferingListType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ServiceOfferingListType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ServiceOfferingListType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ServiceOfferingListType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ServiceOfferingListType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ServiceOfferingListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ServiceOffering_ in self.ServiceOffering:
            namespaceprefix_ = self.ServiceOffering_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceOffering_nsprefix_) else ''
            ServiceOffering_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ServiceOffering', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ServiceOffering':
            obj_ = CodeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ServiceOffering.append(obj_)
            obj_.original_tagname_ = 'ServiceOffering'
# end class ServiceOfferingListType


class MerchantAccountNumberListType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MerchantAccountNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if MerchantAccountNumber is None:
            self.MerchantAccountNumber = []
        else:
            self.MerchantAccountNumber = MerchantAccountNumber
        self.MerchantAccountNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MerchantAccountNumberListType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MerchantAccountNumberListType.subclass:
            return MerchantAccountNumberListType.subclass(*args_, **kwargs_)
        else:
            return MerchantAccountNumberListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MerchantAccountNumber(self):
        return self.MerchantAccountNumber
    def set_MerchantAccountNumber(self, MerchantAccountNumber):
        self.MerchantAccountNumber = MerchantAccountNumber
    def add_MerchantAccountNumber(self, value):
        self.MerchantAccountNumber.append(value)
    def insert_MerchantAccountNumber_at(self, index, value):
        self.MerchantAccountNumber.insert(index, value)
    def replace_MerchantAccountNumber_at(self, index, value):
        self.MerchantAccountNumber[index] = value
    def hasContent_(self):
        if (
            self.MerchantAccountNumber
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MerchantAccountNumberListType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MerchantAccountNumberListType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MerchantAccountNumberListType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MerchantAccountNumberListType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MerchantAccountNumberListType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MerchantAccountNumberListType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MerchantAccountNumberListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for MerchantAccountNumber_ in self.MerchantAccountNumber:
            namespaceprefix_ = self.MerchantAccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.MerchantAccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMerchantAccountNumber>%s</%sMerchantAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(MerchantAccountNumber_), input_name='MerchantAccountNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MerchantAccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MerchantAccountNumber')
            value_ = self.gds_validate_string(value_, node, 'MerchantAccountNumber')
            self.MerchantAccountNumber.append(value_)
            self.MerchantAccountNumber_nsprefix_ = child_.prefix
# end class MerchantAccountNumberListType


class SortCriteriaType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SortType=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.SortType = SortType
        self.SortType_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SortCriteriaType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SortCriteriaType.subclass:
            return SortCriteriaType.subclass(*args_, **kwargs_)
        else:
            return SortCriteriaType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SortType(self):
        return self.SortType
    def set_SortType(self, SortType):
        self.SortType = SortType
    def hasContent_(self):
        if (
            self.SortType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SortCriteriaType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SortCriteriaType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SortCriteriaType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SortCriteriaType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SortCriteriaType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SortCriteriaType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SortCriteriaType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SortType is not None:
            namespaceprefix_ = self.SortType_nsprefix_ + ':' if (UseCapturedNS_ and self.SortType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSortType>%s</%sSortType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SortType), input_name='SortType')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SortType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SortType')
            value_ = self.gds_validate_string(value_, node, 'SortType')
            self.SortType = value_
            self.SortType_nsprefix_ = child_.prefix
# end class SortCriteriaType


class EnhancedSearchOptionType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EnhancedSearchOptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EnhancedSearchOptionType.subclass:
            return EnhancedSearchOptionType.subclass(*args_, **kwargs_)
        else:
            return EnhancedSearchOptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EnhancedSearchOptionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EnhancedSearchOptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EnhancedSearchOptionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EnhancedSearchOptionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EnhancedSearchOptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EnhancedSearchOptionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EnhancedSearchOptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class EnhancedSearchOptionType


class OpenTimeCriteriaType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DayOfWeekCode=None, FromTime=None, ToTime=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DayOfWeekCode = DayOfWeekCode
        self.DayOfWeekCode_nsprefix_ = None
        self.FromTime = FromTime
        self.FromTime_nsprefix_ = None
        self.ToTime = ToTime
        self.ToTime_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OpenTimeCriteriaType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OpenTimeCriteriaType.subclass:
            return OpenTimeCriteriaType.subclass(*args_, **kwargs_)
        else:
            return OpenTimeCriteriaType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DayOfWeekCode(self):
        return self.DayOfWeekCode
    def set_DayOfWeekCode(self, DayOfWeekCode):
        self.DayOfWeekCode = DayOfWeekCode
    def get_FromTime(self):
        return self.FromTime
    def set_FromTime(self, FromTime):
        self.FromTime = FromTime
    def get_ToTime(self):
        return self.ToTime
    def set_ToTime(self, ToTime):
        self.ToTime = ToTime
    def hasContent_(self):
        if (
            self.DayOfWeekCode is not None or
            self.FromTime is not None or
            self.ToTime is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='OpenTimeCriteriaType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OpenTimeCriteriaType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OpenTimeCriteriaType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OpenTimeCriteriaType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OpenTimeCriteriaType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='OpenTimeCriteriaType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='OpenTimeCriteriaType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DayOfWeekCode is not None:
            namespaceprefix_ = self.DayOfWeekCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DayOfWeekCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDayOfWeekCode>%s</%sDayOfWeekCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DayOfWeekCode), input_name='DayOfWeekCode')), namespaceprefix_ , eol_))
        if self.FromTime is not None:
            namespaceprefix_ = self.FromTime_nsprefix_ + ':' if (UseCapturedNS_ and self.FromTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFromTime>%s</%sFromTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FromTime), input_name='FromTime')), namespaceprefix_ , eol_))
        if self.ToTime is not None:
            namespaceprefix_ = self.ToTime_nsprefix_ + ':' if (UseCapturedNS_ and self.ToTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sToTime>%s</%sToTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ToTime), input_name='ToTime')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DayOfWeekCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DayOfWeekCode')
            value_ = self.gds_validate_string(value_, node, 'DayOfWeekCode')
            self.DayOfWeekCode = value_
            self.DayOfWeekCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'FromTime':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FromTime')
            value_ = self.gds_validate_string(value_, node, 'FromTime')
            self.FromTime = value_
            self.FromTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'ToTime':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ToTime')
            value_ = self.gds_validate_string(value_, node, 'ToTime')
            self.ToTime = value_
            self.ToTime_nsprefix_ = child_.prefix
# end class OpenTimeCriteriaType


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def get_required_ns_prefix_defs(rootNode):
    '''Get all name space prefix definitions required in this XML doc.
    Return a dictionary of definitions and a char string of definitions.
    '''
    nsmap = {
        prefix: uri
        for node in rootNode.iter()
        for (prefix, uri) in node.nsmap.items()
        if prefix is not None
    }
    namespacedefs = ' '.join([
        'xmlns:{}="{}"'.format(prefix, uri)
        for prefix, uri in nsmap.items()
    ])
    return nsmap, namespacedefs


def parse(inFileName, silence=False, print_warnings=True):
    global CapturedNsmap_
    gds_collector = GdsCollector_()
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'LocatorRequest'
        rootClass = LocatorRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    CapturedNsmap_, namespacedefs = get_required_ns_prefix_defs(rootNode)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_=namespacedefs,
            pretty_print=True)
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseEtree(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'LocatorRequest'
        rootClass = LocatorRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(str(content))
        sys.stdout.write('\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False, print_warnings=True):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    gds_collector = GdsCollector_()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'LocatorRequest'
        rootClass = LocatorRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if not SaveElementTreeNode:
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseLiteral(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'LocatorRequest'
        rootClass = LocatorRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('#from locator_request import *\n\n')
        sys.stdout.write('import locator_request as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

RenameMappings_ = {
}

__all__ = [
    "AccessPointSearchType",
    "AddressKeyFormatType",
    "CodeType",
    "EnhancedSearchOptionType",
    "ExcludeFromResultType",
    "FacilityAddressType",
    "FreightWillCallSearchType",
    "GeocodeType",
    "IncludeCriteriaType",
    "LocationSearchCriteriaType",
    "LocatorRequest",
    "MerchantAccountNumberListType",
    "OpenTimeCriteriaType",
    "OptionCodeType",
    "OriginAddressType",
    "PostalCodeListType",
    "PostalCodeType",
    "Request",
    "SearchFilterType",
    "SearchOptionType",
    "ServiceGeoUnitType",
    "ServiceOfferingListType",
    "ServiceSearchType",
    "SortCriteriaType",
    "TransactionReference",
    "TranslateType",
    "UnitOfMeasurementType"
]
