
 

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>


#include <../../build/temp.linux-x86_64-3.7/dlstatic/rev_spark/include/rev/CANSparkMax.h>





#include <rpygen/rev__CANSparkMaxLowLevel.hpp>

namespace rpygen {

using namespace rev;


template <typename CxxBase>
using PyBaserev__CANSparkMax = 
    Pyrev__CANSparkMaxLowLevel<
        CxxBase
    
    >
;

template <typename CxxBase>
struct Pyrev__CANSparkMax : PyBaserev__CANSparkMax<CxxBase> {
    using PyBaserev__CANSparkMax<CxxBase>::PyBaserev__CANSparkMax;



#ifndef RPYGEN_DISABLE_Set_d
    void Set(double speed) override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "set", Set,speed);    }
#endif

#ifndef RPYGEN_DISABLE_SetVoltage_Tvolt_t
    void SetVoltage(units::volt_t output) override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "setVoltage", SetVoltage,output);    }
#endif

#ifndef RPYGEN_DISABLE_KGet_v
    double Get() const override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(double), CxxBase, "get", Get,);    }
#endif

#ifndef RPYGEN_DISABLE_SetInverted_b
    void SetInverted(bool isInverted) override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "setInverted", SetInverted,isInverted);    }
#endif

#ifndef RPYGEN_DISABLE_KGetInverted_v
    bool GetInverted() const override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(bool), CxxBase, "getInverted", GetInverted,);    }
#endif

#ifndef RPYGEN_DISABLE_Disable_v
    void Disable() override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "disable", Disable,);    }
#endif

#ifndef RPYGEN_DISABLE_StopMotor_v
    void StopMotor() override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "stopMotor", StopMotor,);    }
#endif

#ifndef RPYGEN_DISABLE_PIDWrite_d
    void PIDWrite(double output) override {
PYBIND11_OVERRIDE_NAME(PYBIND11_TYPE(void), CxxBase, "PIDWrite", PIDWrite,output);    }
#endif



};

}; // namespace rpygen
