Standard dependencies:
======================

  This is a list of dependencies which are assumed to be already installed on the machine.
  
  This list is not exhaustive, but with these ProSHADE did install and run on clean system
  installations.

======================
MacOS Yosemite (10.10) 
======================

* Install Command Line Tools
	* xcode-select --install
* Install CMake
	* Download from https://github.com/Kitware/CMake/releases/download/v3.19.2/cmake-3.19.2.tar.gz
	* tar -zxvf ./cmake-3.19.2.tar.gz
	* cd ./cmake-3.19.2
	* ./bootstrap 
	* make
	* sudo make install
* Install FFTW
	* Download from http://www.fftw.org/fftw-3.3.9.tar.gz
	* tar -zxvf ./fftw-3.3.9.tar 
	* cd ./fftw-3.3.9
	* ./configure --enable-shared
	* make
	* sudo make install
* Install proshade
	* git clone https://github.com/michaltykac/proshade
	* mkdir build
	* cd ./build
	* cmake ../proshade/proshade
	* make 
	* make install

===========
Ubuntu 20.4
===========

* APT INSTALL:
	* gcc
	* g++
	* make
	* cmake
	* git
	* fftw3-dev
	* liblapack-dev
	* zlib1g-dev

* Install proshade
	* git clone https://github.com/michaltykac/proshade
	* mkdir build
	* cd ./build
	* cmake ../proshade/proshade
	* make 
	* make install

===============
Centos 8.1.1911 
===============

* YUM SETUP:
	* sudo yum install dnf-plugins-core
	* sudo yum config-manager --set-enabled powertools

* YUM INSTALL:
	* gcc
	* gcc-c++
	* make
	* cmake
	* fftw3-devel
	* lapack-devel
	* zlib-devel
* Install proshade
	* git clone https://github.com/michaltykac/proshade
	* mkdir build
	* cd ./build
	* cmake ../proshade/proshade
	* make 
	* make install
	
=============
Debian 10.3.0 
=============

* APT INSTALL:
	* gcc
	* g++
	* make
	* cmake
	* git
	* fftw3-dev
	* liblapack-dev
	* zlib1g-dev
* Install proshade
	* git clone https://github.com/michaltykac/proshade
	* mkdir build
	* cd ./build
	* cmake ../proshade/proshade
	* make 
	* make install	

==================
openSUSE-Leap 15.2 
==================

* ZYPPER (sudo zypper install):
	* gcc
	* gcc-c++
	* git
	* cmake
	* fftw3-devel
	* lapack-devel
	* zlib-devel
* Install proshade
	* git clone https://github.com/michaltykac/proshade
	* mkdir build
	* cd ./build
	* cmake ../proshade/proshade
	* make 
	* make install
	
=================
Windows 10 64-bit
=================

* Install CMake
	* Download 64-bit MSI installer from https://cmake.org/download
	* Check either of the "Add to PATH" options.
* Install git
	* Download 64-bit installer from https://git-scm.com/download/win
* Download the Build Tools for Visual Studio from https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2019	
	* From the selection screen select the "C++ Build Tools"	
* Open Developer Command Prompt for VS 2019 (or whichever version you have)
	* Navigate to where you want the code to live (maybe C:\Program Files\proshade, if you have rights to write there?)
	* git clone https://github.com/michaltykac/proshade
	* mkdir build
	* cd .\build
	* cmake ..\proshade\proshade
	* cmake --build . --config Release
	* cmake --install .
* Edit system paths
	* Control Panel -> System and Security -> System -> View Advanced System Settings -> Advanced -> Environment Variables
	* Under System Variables (as opposed by User variables) find variable "Path" and click Edit...
	* Click New and then Browse... and navigate to where proshade was cloned into, then to proshade/winLib/x64/DLLs and click OK to all the opened windows.
	* Close and re-open all Command Prompt windows where you want ProSHADE to be available, so that the changes take effect.
* ProSHADE is now available from Command Prompt at the location where it was cloned to and then .\proshade\proshade\install, where
	* The executable is at .\bin\proshade.exe
	* The library is at .\lib\proshade.dll and its header at .\include\ProSHADE.hpp
	* The python module is at .\pythonModule\proshade...pyd if you have requested its compilation by -DBUiLD_PYTHON=TRUE

=================
Build PyPi Module
=================

* build tar module 
	* python setup.py sdist
* upload to the module to PyPiTest
	* twine upload --repository-url https://test.pypi.org/legacy/ ./dist/*
* upload to the module to PyPi
	* twine upload ./dist/*

	