name: CI

on: [push, pull_request]

jobs:
  standard:
    strategy:
      matrix:
        include:
          - os: macos-10.15
            build: Release
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
    - uses: actions/checkout@v2

    - name: mkdir build
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.build }}

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config ${{ matrix.build }}

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config ${{ matrix.build }} --target check

    - name: Python Setup
      run: python3 setup.py install --user --prefix=

    - name: Python Tests
      run: python3 -m unittest discover -v -s tests/


  ubuntu2004:
    name: "Ubuntu 20.04"
    runs-on: ubuntu-20.04
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
    - uses: actions/checkout@v2
    - name: apt-get
      run: |
        sudo apt-get update
        sudo apt-get install libz-dev python3-pip g++ gfortran python3-setuptools python3-numpy valgrind
    - name: build and test
      run: |
        g++ --version
        cmake --version
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Debug
        cmake --build . --config Debug
        cmake --build . --config Debug --target check
        cd ..
        python3 setup.py install --user --prefix=
        python3 -m unittest discover -v -s tests/
    - name: run doctest
      run: |
        sudo pip3 install -U sphinx
        cd docs
        sphinx-build -M doctest . _build -n -E
    - name: run tests under valgrind
      run: PYTHONMALLOC=malloc valgrind python3 -m unittest discover -v -s tests/

  ubuntu1804:
    name: "Ubuntu 18.04 with sdist"
    runs-on: ubuntu-18.04
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
    - uses: actions/checkout@v2
    - run: sudo apt-get install libz-dev python3-pip g++ gfortran python3-setuptools python3-numpy
    - name: build and test
      run: |
        g++ --version
        python3 setup.py sdist
        python3 -m pip install dist/gemmi-*.tar.gz
        python3 -m unittest discover -v -s tests/
        cmake -DCMAKE_CXX_STANDARD=14 -DUSE_FORTRAN=1 -DEXTRA_WARNINGS=1 .
        make
        make check


  clang35:
    name: "Ubuntu 16.04, Clang 3.5"
    runs-on: ubuntu-16.04
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    env:
      CC: clang-3.5
      CXX: clang++-3.5
    steps:
    - uses: actions/checkout@v2
    - run: sudo apt-get install libz-dev python3-pip clang-3.5 python3-setuptools python3-numpy
    - name: install pybind11
      run: |
        cmake --version
        git clone --depth=1 https://github.com/pybind/pybind11.git
        cd pybind11
        cmake -Wno-dev -DPYTHON_EXECUTABLE=/usr/bin/python -DPYBIND11_TEST=OFF .
        make
        sudo make install
    - name: build and test
      run: |
        $CXX --version
        mkdir build
        cd build
        cmake -DCMAKE_CXX_STANDARD=11 -DUSE_PYTHON=1 -DPYTHON_EXECUTABLE=/usr/bin/python ..
        make -j2 all
        make -j2 check
        python -m unittest discover -v -s ../tests/


  centos:
    runs-on: ubuntu-latest
    name: "CentOS 7"
    container: centos:7
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
    - uses: actions/checkout@v2
    - name: yum
      run: |
        yum update -y && yum install -y epel-release
        yum install -y gcc-c++ cmake3 make git python3-devel python3-numpy
        g++ --version
        python3 --version
        cmake3 --version
        type python3
    - name: install pybind11
      run: |
        git clone --depth=1 https://github.com/pybind/pybind11.git
        cd pybind11
        cmake3 . -Wno-dev -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYBIND11_TEST=OFF
        make
        make install
    - name: build and test
      run: |
        pwd
        cmake3 . -DUSE_PYTHON=1 -DPYTHON_EXECUTABLE=/usr/bin/python3
        make -j2
        make -j2 check
        python3 -m unittest discover -v -s ./tests/
    - name: run doctest
      run: |
        pip3 install -U sphinx
        cd docs
        PYTHONPATH=.. sphinx-build -M doctest . _build -n -E
