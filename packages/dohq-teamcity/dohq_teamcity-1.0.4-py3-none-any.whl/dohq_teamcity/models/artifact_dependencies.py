# coding: utf-8

from dohq_teamcity.custom.base_model import TeamCityObject


# from dohq_teamcity.models.artifact_dependency import ArtifactDependency  # noqa: F401,E501


class ArtifactDependencies(TeamCityObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'artifact_dependency': 'list[ArtifactDependency]',
        'replace': 'str'
    }

    attribute_map = {
        'count': 'count',
        'artifact_dependency': 'artifact-dependency',
        'replace': 'replace'
    }

    def __init__(self, count=None, artifact_dependency=None, replace=None, teamcity=None):  # noqa: E501
        """ArtifactDependencies - a model defined in Swagger"""  # noqa: E501

        self._count = None
        self._artifact_dependency = None
        self._replace = None
        self.discriminator = None

        if count is not None:
            self.count = count
        if artifact_dependency is not None:
            self.artifact_dependency = artifact_dependency
        if replace is not None:
            self.replace = replace
        super(ArtifactDependencies, self).__init__(teamcity=teamcity)

    @property
    def count(self):
        """Gets the count of this ArtifactDependencies.  # noqa: E501


        :return: The count of this ArtifactDependencies.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ArtifactDependencies.


        :param count: The count of this ArtifactDependencies.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def artifact_dependency(self):
        """Gets the artifact_dependency of this ArtifactDependencies.  # noqa: E501


        :return: The artifact_dependency of this ArtifactDependencies.  # noqa: E501
        :rtype: list[ArtifactDependency]
        """
        return self._artifact_dependency

    @artifact_dependency.setter
    def artifact_dependency(self, artifact_dependency):
        """Sets the artifact_dependency of this ArtifactDependencies.


        :param artifact_dependency: The artifact_dependency of this ArtifactDependencies.  # noqa: E501
        :type: list[ArtifactDependency]
        """

        self._artifact_dependency = artifact_dependency

    @property
    def replace(self):
        """Gets the replace of this ArtifactDependencies.  # noqa: E501


        :return: The replace of this ArtifactDependencies.  # noqa: E501
        :rtype: str
        """
        return self._replace

    @replace.setter
    def replace(self, replace):
        """Sets the replace of this ArtifactDependencies.


        :param replace: The replace of this ArtifactDependencies.  # noqa: E501
        :type: str
        """

        self._replace = replace
