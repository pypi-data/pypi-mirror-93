# coding: utf-8

from dohq_teamcity.custom.base_model import TeamCityObject


# from dohq_teamcity.models.build_type import BuildType  # noqa: F401,E501
# from dohq_teamcity.models.build_types import BuildTypes  # noqa: F401,E501
# from dohq_teamcity.models.project import Project  # noqa: F401,E501


class ProblemScope(TeamCityObject):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project': 'Project',
        'build_types': 'BuildTypes',
        'build_type': 'BuildType'
    }

    attribute_map = {
        'project': 'project',
        'build_types': 'buildTypes',
        'build_type': 'buildType'
    }

    def __init__(self, project=None, build_types=None, build_type=None, teamcity=None):  # noqa: E501
        """ProblemScope - a model defined in Swagger"""  # noqa: E501

        self._project = None
        self._build_types = None
        self._build_type = None
        self.discriminator = None

        if project is not None:
            self.project = project
        if build_types is not None:
            self.build_types = build_types
        if build_type is not None:
            self.build_type = build_type
        super(ProblemScope, self).__init__(teamcity=teamcity)

    @property
    def project(self):
        """Gets the project of this ProblemScope.  # noqa: E501


        :return: The project of this ProblemScope.  # noqa: E501
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ProblemScope.


        :param project: The project of this ProblemScope.  # noqa: E501
        :type: Project
        """

        self._project = project

    @property
    def build_types(self):
        """Gets the build_types of this ProblemScope.  # noqa: E501


        :return: The build_types of this ProblemScope.  # noqa: E501
        :rtype: BuildTypes
        """
        return self._build_types

    @build_types.setter
    def build_types(self, build_types):
        """Sets the build_types of this ProblemScope.


        :param build_types: The build_types of this ProblemScope.  # noqa: E501
        :type: BuildTypes
        """

        self._build_types = build_types

    @property
    def build_type(self):
        """Gets the build_type of this ProblemScope.  # noqa: E501


        :return: The build_type of this ProblemScope.  # noqa: E501
        :rtype: BuildType
        """
        return self._build_type

    @build_type.setter
    def build_type(self, build_type):
        """Sets the build_type of this ProblemScope.


        :param build_type: The build_type of this ProblemScope.  # noqa: E501
        :type: BuildType
        """

        self._build_type = build_type
