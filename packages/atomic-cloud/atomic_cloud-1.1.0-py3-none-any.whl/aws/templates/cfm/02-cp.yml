AWSTemplateFormatVersion: 2010-09-09
Description: EKS cluster for managed nodegroup
Resources:
  ClusterSharedNodeSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: {{VpcName}}-nodes-sg
      GroupDescription: Communication between all nodes in the cluster
      Tags:
        - Key: Name
          Value: '{{VpcName}}-nodes-sg'
      VpcId: !ImportValue {{VpcName}}-vpc
  ControlPlane:
    Type: 'AWS::EKS::Cluster'
    Properties:
      Name: {{VpcName}}-cluster
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds: !Split
          - ','
          - !Join
            - ','
            - - !ImportValue {{VpcName}}-private-subnets
              - !ImportValue {{VpcName}}-public-subnets
      RoleArn: !GetAtt ServiceRole.Arn
      Version: '1.16'
  ControlPlaneSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: {{VpcName}}-cp-sg
      GroupDescription: Communication between the control plane and worker nodegroups
      Tags:
        - Key: Name
          Value: '{{VpcName}}-cp-sg'
      VpcId: !ImportValue {{VpcName}}-vpc
  IngressDefaultClusterToNodeSG:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: >-
        Allow managed and unmanaged nodes to communicate with each other (all
        ports)
      FromPort: 0
      GroupId: !Ref ClusterSharedNodeSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !GetAtt ControlPlane.ClusterSecurityGroupId
      ToPort: 65535
  IngressInterNodeGroupSG:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Allow nodes to communicate with each other (all ports)
      FromPort: 0
      GroupId: !Ref ClusterSharedNodeSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref ClusterSharedNodeSecurityGroup
      ToPort: 65535
  IngressNodeToDefaultClusterSG:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Allow unmanaged nodes to communicate with control plane (all ports)
      FromPort: 0
      GroupId: !GetAtt ControlPlane.ClusterSecurityGroupId
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref ClusterSharedNodeSecurityGroup
      ToPort: 65535
  CloudWatchMetricsPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'cloudwatch:PutMetricData'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: '{{VpcName}}-cw-metrics-policy'
      Roles:
        - !Ref ServiceRole
  NLBPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'elasticloadbalancing:*'
              - 'ec2:CreateSecurityGroup'
              - 'ec2:Describe*'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: '{{VpcName}}-nlb-policy'
      Roles:
        - !Ref ServiceRole
  ServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: {{VpcName}}-cp-role
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - eks.amazonaws.com
                - eks-fargate-pods.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSClusterPolicy'

Outputs:
  ARN:
    Export:
      Name: '{{VpcName}}-cp-arn'
    Value: !GetAtt ControlPlane.Arn
  CertificateAuthorityData:
    Value: !GetAtt ControlPlane.CertificateAuthorityData
  Cluster:
    Value: !Ref 'ControlPlane'
  ClusterSecurityGroupId:
    Export:
      Name:  '{{VpcName}}-cp-cluster-sg-id'
    Value: !GetAtt ControlPlane.ClusterSecurityGroupId
  ClusterStackName:
    Value: !Ref 'AWS::StackName'
  Endpoint:
    Export:
      Name: '{{VpcName}}-endpoint'
    Value: !GetAtt ControlPlane.Endpoint
  SecurityGroup:
    Export:
      Name: '{{VpcName}}-cp-sg'
    Value: !Ref ControlPlaneSecurityGroup
  ServiceRoleARN:
    Export:
      Name: '{{VpcName}}-svc-role-arn'
    Value: !GetAtt ServiceRole.Arn
  SharedNodeSecurityGroup:
    Export:
      Name: '{{VpcName}}-nodes-sg'
    Value: !Ref ClusterSharedNodeSecurityGroup