# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/04_bbox_annotator.ipynb (unless otherwise specified).

__all__ = ['BBoxAnnotator']

# Internal Cell

import os
import json

from ipyevents import Event
from ipywidgets import (AppLayout, Button, IntSlider, IntProgress,
                        HBox, VBox, Output,
                        Layout, Label)
from pathlib import Path
from traitlets import Int, observe, link, dlink, HasTraits, Bytes, Unicode, Dict

from .bbox_canvas import BBoxCanvas
from .navi_widget import Navi
from .storage import setup_project_paths, get_image_list_from_folder, AnnotationStorage

# Internal Cell

class BBoxAnnotatorGUI(AppLayout):

    def __init__(self, canvas_size=(505, 50)):
        self._navi = Navi()

        self._save_btn = Button(description="Save",
                                layout=Layout(width='auto'))

        self._controls_box = HBox([self._navi, self._save_btn],
                                 layout=Layout(display='flex', flex_flow='row wrap', align_items='center'))

        self._image_box = BBoxCanvas(*canvas_size)

        super().__init__(header=None,
                 left_sidebar=None,
                 center=self._image_box,
                 right_sidebar=None,
                 footer=self._controls_box,
                 pane_widths=(2, 8, 0),
                 pane_heights=(1, 4, 1))


    def on_client_ready(self, callback):
        self._image_box.observe_client_ready(callback)

# Internal Cell

class BBoxAnnotatorLogic(HasTraits):
    index = Int(0)
    image_path = Unicode()
    bbox_coords = Dict()
    current_im_num = Int()

    def __init__(self, project_path, image_dir='pics'):
        self.project_path = Path(project_path)
        self.image_dir, self.annotation_file_path = setup_project_paths(self.project_path, image_dir=image_dir)
        self.image_paths = get_image_list_from_folder(self.image_dir)
        self.current_im_num = len(self.image_paths)
        self.annotations = AnnotationStorage(self.image_paths)

    def _update_im(self):
        self.image_path = str(self.image_paths[self.index])

    def _update_coords(self): # from annotations
        im_name = self.__get_name_by_index(self.index)
        self.bbox_coords = self.annotations.get(im_name) or {}

    def _update_annotations(self, index): # from coordinates
        im_name = self.__get_name_by_index(index)
        self.annotations[im_name] = self.bbox_coords

    def _save_annotations(self, *args, **kwargs): # to disk
        index = kwargs.pop('old_index', self.index)
        self._update_annotations(index)
        self.annotations.save(self.annotation_file_path)

    def _handle_client_ready(self):
        self._update_im()
        self._update_coords()

    @observe('index')
    def _idx_changed(self, change):
        ''' On index change save an old state
            and update current image path and bbox coordinates for visualisation
        '''
        self._save_annotations(old_index = change['old'])

        self._update_im()
        self._update_coords()

    def __get_name_by_index(self, idx):
        return self.image_paths[idx].name

# Cell

class BBoxAnnotator(BBoxAnnotatorGUI):
    """
    Represents bounding box annotator.

    Gives an ability to itarate through image dataset,
    draw 2D bounding box annotations for object detection and localization,
    export final annotations in json format

    """
    debug_output = Output()

    def __init__(self, project_path, canvas_size=(200, 400), image_dir='pics'):
        self._model = BBoxAnnotatorLogic(project_path, image_dir=image_dir)

        super().__init__(canvas_size=canvas_size)

        self._save_btn.on_click(self._model._save_annotations)

        # set correct slider max value based on image number
        dlink((self._model, 'current_im_num'), (self._navi.model, 'max_im_number'))

        # draw current image and bbox only when client is ready
        self.on_client_ready(self._model._handle_client_ready)

        # Link image path and bbox coordinates between model and the ImageWithBox widget
        link((self._model, 'image_path'), (self._image_box, 'image_path'))
        link((self._model, 'bbox_coords'), (self._image_box, 'bbox_coords'))

        # Link current image index from controls to annotator model
        link((self._navi.model, 'index'), (self._model, 'index'))

    def to_dict(self, only_annotated=True):
        return self._model.annotations.to_dict(only_annotated)
