# coding: utf-8

"""
    COIN CRDB Rest API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    Contact: servicedesk@coin.nl
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EnumProfileDeactivation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dossierid': 'str',
        'currentnetworkoperator': 'str',
        'typeofnumber': 'str',
        'profileid': 'str'
    }

    attribute_map = {
        'dossierid': 'dossierid',
        'currentnetworkoperator': 'currentnetworkoperator',
        'typeofnumber': 'typeofnumber',
        'profileid': 'profileid'
    }

    def __init__(self, dossierid=None, currentnetworkoperator=None, typeofnumber=None, profileid=None):
        """
        EnumProfileDeactivation - a model defined in Swagger
        """

        self._dossierid = None
        self._currentnetworkoperator = None
        self._typeofnumber = None
        self._profileid = None

        self.dossierid = dossierid
        self.currentnetworkoperator = currentnetworkoperator
        self.typeofnumber = typeofnumber
        self.profileid = profileid

    @property
    def dossierid(self):
        """
        Gets the dossierid of this EnumProfileDeactivation.

        :return: The dossierid of this EnumProfileDeactivation.
        :rtype: str
        """
        return self._dossierid

    @dossierid.setter
    def dossierid(self, dossierid):
        """
        Sets the dossierid of this EnumProfileDeactivation.

        :param dossierid: The dossierid of this EnumProfileDeactivation.
        :type: str
        """
        if dossierid is None:
            raise ValueError("Invalid value for `dossierid`, must not be `None`")
        if dossierid is not None and not re.search('^[-0-9A-Z]{5,26}$', dossierid):
            raise ValueError("Invalid value for `dossierid`, must be a follow pattern or equal to `/^[-0-9A-Z]{5,26}$/`")

        self._dossierid = dossierid

    @property
    def currentnetworkoperator(self):
        """
        Gets the currentnetworkoperator of this EnumProfileDeactivation.

        :return: The currentnetworkoperator of this EnumProfileDeactivation.
        :rtype: str
        """
        return self._currentnetworkoperator

    @currentnetworkoperator.setter
    def currentnetworkoperator(self, currentnetworkoperator):
        """
        Sets the currentnetworkoperator of this EnumProfileDeactivation.

        :param currentnetworkoperator: The currentnetworkoperator of this EnumProfileDeactivation.
        :type: str
        """
        if currentnetworkoperator is None:
            raise ValueError("Invalid value for `currentnetworkoperator`, must not be `None`")
        if currentnetworkoperator is not None and not re.search('^[0-9A-Z]{3,6}$', currentnetworkoperator):
            raise ValueError("Invalid value for `currentnetworkoperator`, must be a follow pattern or equal to `/^[0-9A-Z]{3,6}$/`")

        self._currentnetworkoperator = currentnetworkoperator

    @property
    def typeofnumber(self):
        """
        Gets the typeofnumber of this EnumProfileDeactivation.

        :return: The typeofnumber of this EnumProfileDeactivation.
        :rtype: str
        """
        return self._typeofnumber

    @typeofnumber.setter
    def typeofnumber(self, typeofnumber):
        """
        Sets the typeofnumber of this EnumProfileDeactivation.

        :param typeofnumber: The typeofnumber of this EnumProfileDeactivation.
        :type: str
        """
        if typeofnumber is None:
            raise ValueError("Invalid value for `typeofnumber`, must not be `None`")

        self._typeofnumber = typeofnumber

    @property
    def profileid(self):
        """
        Gets the profileid of this EnumProfileDeactivation.

        :return: The profileid of this EnumProfileDeactivation.
        :rtype: str
        """
        return self._profileid

    @profileid.setter
    def profileid(self, profileid):
        """
        Sets the profileid of this EnumProfileDeactivation.

        :param profileid: The profileid of this EnumProfileDeactivation.
        :type: str
        """
        if profileid is None:
            raise ValueError("Invalid value for `profileid`, must not be `None`")
        if profileid is not None and not re.search('^[-0-9A-Z]{5,26}$', profileid):
            raise ValueError("Invalid value for `profileid`, must be a follow pattern or equal to `/^[-0-9A-Z]{5,26}$/`")

        self._profileid = profileid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EnumProfileDeactivation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
