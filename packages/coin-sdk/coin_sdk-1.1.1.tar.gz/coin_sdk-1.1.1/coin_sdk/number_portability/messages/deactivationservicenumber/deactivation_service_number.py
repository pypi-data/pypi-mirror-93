# coding: utf-8

"""
    COIN CRDB Rest API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    Contact: servicedesk@coin.nl
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DeactivationServiceNumber(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dossierid': 'str',
        'platformprovider': 'str',
        'planneddatetime': 'str',
        'repeats': 'list[DeactivationServiceNumberRepeats]'
    }

    attribute_map = {
        'dossierid': 'dossierid',
        'platformprovider': 'platformprovider',
        'planneddatetime': 'planneddatetime',
        'repeats': 'repeats'
    }

    def __init__(self, dossierid=None, platformprovider=None, planneddatetime=None, repeats=None):
        """
        DeactivationServiceNumber - a model defined in Swagger
        """

        self._dossierid = None
        self._platformprovider = None
        self._planneddatetime = None
        self._repeats = None

        self.dossierid = dossierid
        self.platformprovider = platformprovider
        self.planneddatetime = planneddatetime
        self.repeats = repeats

    @property
    def dossierid(self):
        """
        Gets the dossierid of this DeactivationServiceNumber.

        :return: The dossierid of this DeactivationServiceNumber.
        :rtype: str
        """
        return self._dossierid

    @dossierid.setter
    def dossierid(self, dossierid):
        """
        Sets the dossierid of this DeactivationServiceNumber.

        :param dossierid: The dossierid of this DeactivationServiceNumber.
        :type: str
        """
        if dossierid is None:
            raise ValueError("Invalid value for `dossierid`, must not be `None`")
        if dossierid is not None and not re.search('^[-0-9A-Z]{5,26}$', dossierid):
            raise ValueError("Invalid value for `dossierid`, must be a follow pattern or equal to `/^[-0-9A-Z]{5,26}$/`")

        self._dossierid = dossierid

    @property
    def platformprovider(self):
        """
        Gets the platformprovider of this DeactivationServiceNumber.

        :return: The platformprovider of this DeactivationServiceNumber.
        :rtype: str
        """
        return self._platformprovider

    @platformprovider.setter
    def platformprovider(self, platformprovider):
        """
        Sets the platformprovider of this DeactivationServiceNumber.

        :param platformprovider: The platformprovider of this DeactivationServiceNumber.
        :type: str
        """
        if platformprovider is None:
            raise ValueError("Invalid value for `platformprovider`, must not be `None`")
        if platformprovider is not None and not re.search('^[0-9A-Z]{3,6}$', platformprovider):
            raise ValueError("Invalid value for `platformprovider`, must be a follow pattern or equal to `/^[0-9A-Z]{3,6}$/`")

        self._platformprovider = platformprovider

    @property
    def planneddatetime(self):
        """
        Gets the planneddatetime of this DeactivationServiceNumber.

        :return: The planneddatetime of this DeactivationServiceNumber.
        :rtype: str
        """
        return self._planneddatetime

    @planneddatetime.setter
    def planneddatetime(self, planneddatetime):
        """
        Sets the planneddatetime of this DeactivationServiceNumber.

        :param planneddatetime: The planneddatetime of this DeactivationServiceNumber.
        :type: str
        """
        if planneddatetime is None:
            raise ValueError("Invalid value for `planneddatetime`, must not be `None`")
        if planneddatetime is not None and not re.search('^[0-9]{14}$', planneddatetime):
            raise ValueError("Invalid value for `planneddatetime`, must be a follow pattern or equal to `/^[0-9]{14}$/`")

        self._planneddatetime = planneddatetime

    @property
    def repeats(self):
        """
        Gets the repeats of this DeactivationServiceNumber.

        :return: The repeats of this DeactivationServiceNumber.
        :rtype: list[DeactivationServiceNumberRepeats]
        """
        return self._repeats

    @repeats.setter
    def repeats(self, repeats):
        """
        Sets the repeats of this DeactivationServiceNumber.

        :param repeats: The repeats of this DeactivationServiceNumber.
        :type: list[DeactivationServiceNumberRepeats]
        """
        if repeats is None:
            raise ValueError("Invalid value for `repeats`, must not be `None`")

        self._repeats = repeats

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeactivationServiceNumber):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
