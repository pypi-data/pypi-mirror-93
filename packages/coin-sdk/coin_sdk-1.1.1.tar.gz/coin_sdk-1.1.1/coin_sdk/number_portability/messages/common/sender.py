# coding: utf-8

"""
    Coin CRDB Rest API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: devops@coin.nl
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Sender(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'networkoperator': 'str',
        'serviceprovider': 'str'
    }

    attribute_map = {
        'networkoperator': 'networkoperator',
        'serviceprovider': 'serviceprovider'
    }

    def __init__(self, networkoperator=None, serviceprovider=None):  # noqa: E501
        """Sender - a model defined in Swagger"""  # noqa: E501

        self._networkoperator = None
        self._serviceprovider = None
        self.discriminator = None

        self.networkoperator = networkoperator
        if serviceprovider is not None:
            self.serviceprovider = serviceprovider

    @property
    def networkoperator(self):
        """Gets the networkoperator of this Sender.  # noqa: E501


        :return: The networkoperator of this Sender.  # noqa: E501
        :rtype: str
        """
        return self._networkoperator

    @networkoperator.setter
    def networkoperator(self, networkoperator):
        """Sets the networkoperator of this Sender.


        :param networkoperator: The networkoperator of this Sender.  # noqa: E501
        :type: str
        """
        if networkoperator is None:
            raise ValueError("Invalid value for `networkoperator`, must not be `None`")  # noqa: E501
        if networkoperator is not None and not re.search(r'[0-9A-Z]{3,6}', networkoperator):  # noqa: E501
            raise ValueError(r"Invalid value for `networkoperator`, must be a follow pattern or equal to `/[0-9A-Z]{3,6}/`")  # noqa: E501

        self._networkoperator = networkoperator

    @property
    def serviceprovider(self):
        """Gets the serviceprovider of this Sender.  # noqa: E501


        :return: The serviceprovider of this Sender.  # noqa: E501
        :rtype: str
        """
        return self._serviceprovider

    @serviceprovider.setter
    def serviceprovider(self, serviceprovider):
        """Sets the serviceprovider of this Sender.


        :param serviceprovider: The serviceprovider of this Sender.  # noqa: E501
        :type: str
        """
        if serviceprovider is not None and not re.search(r'[0-9A-Z]{3,6}', serviceprovider):  # noqa: E501
            raise ValueError(r"Invalid value for `serviceprovider`, must be a follow pattern or equal to `/[0-9A-Z]{3,6}/`")  # noqa: E501

        self._serviceprovider = serviceprovider

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Sender, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Sender):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
