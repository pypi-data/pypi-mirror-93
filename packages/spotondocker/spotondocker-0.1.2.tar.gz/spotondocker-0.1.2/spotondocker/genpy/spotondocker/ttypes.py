#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class TNode(object):
    """
    Attributes:
     - id
     - isAcc

    """


    def __init__(self, id=None, isAcc=None,):
        self.id = id
        self.isAcc = isAcc

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.isAcc = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TNode')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.isAcc is not None:
            oprot.writeFieldBegin('isAcc', TType.BOOL, 2)
            oprot.writeBool(self.isAcc)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TEdge(object):
    """
    Attributes:
     - srcId
     - dstId
     - label

    """


    def __init__(self, srcId=None, dstId=None, label=None,):
        self.srcId = srcId
        self.dstId = dstId
        self.label = label

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.srcId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dstId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.label = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TEdge')
        if self.srcId is not None:
            oprot.writeFieldBegin('srcId', TType.I32, 1)
            oprot.writeI32(self.srcId)
            oprot.writeFieldEnd()
        if self.dstId is not None:
            oprot.writeFieldBegin('dstId', TType.I32, 2)
            oprot.writeI32(self.dstId)
            oprot.writeFieldEnd()
        if self.label is not None:
            oprot.writeFieldBegin('label', TType.STRING, 3)
            oprot.writeString(self.label.encode('utf-8') if sys.version_info[0] == 2 else self.label)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TGraph(object):
    """
    Attributes:
     - acceptance
     - numAccSets
     - numStates
     - initStates
     - apNames
     - formula
     - isDeterministic
     - hasStateBasedAcc
     - isTerminal
     - nodes
     - edges

    """


    def __init__(self, acceptance=None, numAccSets=None, numStates=None, initStates=None, apNames=None, formula=None, isDeterministic=None, hasStateBasedAcc=None, isTerminal=None, nodes=None, edges=None,):
        self.acceptance = acceptance
        self.numAccSets = numAccSets
        self.numStates = numStates
        self.initStates = initStates
        self.apNames = apNames
        self.formula = formula
        self.isDeterministic = isDeterministic
        self.hasStateBasedAcc = hasStateBasedAcc
        self.isTerminal = isTerminal
        self.nodes = nodes
        self.edges = edges

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.acceptance = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.numAccSets = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.numStates = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.initStates = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI32()
                        self.initStates.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.apNames = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.apNames.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.formula = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.isDeterministic = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.hasStateBasedAcc = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.isTerminal = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.nodes = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = TNode()
                        _elem17.read(iprot)
                        self.nodes.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.edges = []
                    (_etype21, _size18) = iprot.readListBegin()
                    for _i22 in range(_size18):
                        _elem23 = TEdge()
                        _elem23.read(iprot)
                        self.edges.append(_elem23)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TGraph')
        if self.acceptance is not None:
            oprot.writeFieldBegin('acceptance', TType.STRING, 1)
            oprot.writeString(self.acceptance.encode('utf-8') if sys.version_info[0] == 2 else self.acceptance)
            oprot.writeFieldEnd()
        if self.numAccSets is not None:
            oprot.writeFieldBegin('numAccSets', TType.I32, 2)
            oprot.writeI32(self.numAccSets)
            oprot.writeFieldEnd()
        if self.numStates is not None:
            oprot.writeFieldBegin('numStates', TType.I32, 3)
            oprot.writeI32(self.numStates)
            oprot.writeFieldEnd()
        if self.initStates is not None:
            oprot.writeFieldBegin('initStates', TType.LIST, 4)
            oprot.writeListBegin(TType.I32, len(self.initStates))
            for iter24 in self.initStates:
                oprot.writeI32(iter24)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.apNames is not None:
            oprot.writeFieldBegin('apNames', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.apNames))
            for iter25 in self.apNames:
                oprot.writeString(iter25.encode('utf-8') if sys.version_info[0] == 2 else iter25)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.formula is not None:
            oprot.writeFieldBegin('formula', TType.STRING, 6)
            oprot.writeString(self.formula.encode('utf-8') if sys.version_info[0] == 2 else self.formula)
            oprot.writeFieldEnd()
        if self.isDeterministic is not None:
            oprot.writeFieldBegin('isDeterministic', TType.BOOL, 7)
            oprot.writeBool(self.isDeterministic)
            oprot.writeFieldEnd()
        if self.hasStateBasedAcc is not None:
            oprot.writeFieldBegin('hasStateBasedAcc', TType.BOOL, 8)
            oprot.writeBool(self.hasStateBasedAcc)
            oprot.writeFieldEnd()
        if self.isTerminal is not None:
            oprot.writeFieldBegin('isTerminal', TType.BOOL, 9)
            oprot.writeBool(self.isTerminal)
            oprot.writeFieldEnd()
        if self.nodes is not None:
            oprot.writeFieldBegin('nodes', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.nodes))
            for iter26 in self.nodes:
                iter26.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.edges is not None:
            oprot.writeFieldBegin('edges', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.edges))
            for iter27 in self.edges:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(TNode)
TNode.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'id', None, None, ),  # 1
    (2, TType.BOOL, 'isAcc', None, None, ),  # 2
)
all_structs.append(TEdge)
TEdge.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'srcId', None, None, ),  # 1
    (2, TType.I32, 'dstId', None, None, ),  # 2
    (3, TType.STRING, 'label', 'UTF8', None, ),  # 3
)
all_structs.append(TGraph)
TGraph.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'acceptance', 'UTF8', None, ),  # 1
    (2, TType.I32, 'numAccSets', None, None, ),  # 2
    (3, TType.I32, 'numStates', None, None, ),  # 3
    (4, TType.LIST, 'initStates', (TType.I32, None, False), None, ),  # 4
    (5, TType.LIST, 'apNames', (TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.STRING, 'formula', 'UTF8', None, ),  # 6
    (7, TType.BOOL, 'isDeterministic', None, None, ),  # 7
    (8, TType.BOOL, 'hasStateBasedAcc', None, None, ),  # 8
    (9, TType.BOOL, 'isTerminal', None, None, ),  # 9
    (10, TType.LIST, 'nodes', (TType.STRUCT, [TNode, None], False), None, ),  # 10
    (11, TType.LIST, 'edges', (TType.STRUCT, [TEdge, None], False), None, ),  # 11
)
fix_spec(all_structs)
del all_structs
