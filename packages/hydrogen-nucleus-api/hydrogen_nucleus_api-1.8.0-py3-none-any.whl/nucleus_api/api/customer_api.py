# coding: utf-8

"""
    Hydrogen Nucleus API

    The Hydrogen Nucleus API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from nucleus_api.api_client import ApiClient


class CustomerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_customer_revenue_using_post(self, customer_revenue, **kwargs):  # noqa: E501
        """Create a customer revenue  # noqa: E501

        Create a new customer revenue, with your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_customer_revenue_using_post(customer_revenue, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomerRevenue customer_revenue: customerRevenue (required)
        :return: CustomerRevenue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_customer_revenue_using_post_with_http_info(customer_revenue, **kwargs)  # noqa: E501
        else:
            (data) = self.create_customer_revenue_using_post_with_http_info(customer_revenue, **kwargs)  # noqa: E501
            return data

    def create_customer_revenue_using_post_with_http_info(self, customer_revenue, **kwargs):  # noqa: E501
        """Create a customer revenue  # noqa: E501

        Create a new customer revenue, with your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_customer_revenue_using_post_with_http_info(customer_revenue, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomerRevenue customer_revenue: customerRevenue (required)
        :return: CustomerRevenue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_revenue']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_customer_revenue_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_revenue' is set
        if ('customer_revenue' not in params or
                params['customer_revenue'] is None):
            raise ValueError("Missing the required parameter `customer_revenue` when calling `create_customer_revenue_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'customer_revenue' in params:
            body_params = params['customer_revenue']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/customer_revenue', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomerRevenue',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_customer_using_post(self, customer, **kwargs):  # noqa: E501
        """Create a customer  # noqa: E501

        Create a new customer, with your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_customer_using_post(customer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Customer customer: customer (required)
        :return: Customer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_customer_using_post_with_http_info(customer, **kwargs)  # noqa: E501
        else:
            (data) = self.create_customer_using_post_with_http_info(customer, **kwargs)  # noqa: E501
            return data

    def create_customer_using_post_with_http_info(self, customer, **kwargs):  # noqa: E501
        """Create a customer  # noqa: E501

        Create a new customer, with your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_customer_using_post_with_http_info(customer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Customer customer: customer (required)
        :return: Customer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_customer_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer' is set
        if ('customer' not in params or
                params['customer'] is None):
            raise ValueError("Missing the required parameter `customer` when calling `create_customer_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'customer' in params:
            body_params = params['customer']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/customer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Customer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_customer_revenue_using_delete(self, customer_revenue_id, **kwargs):  # noqa: E501
        """Delete a customer revenue  # noqa: E501

        Delete a customer revenue.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_customer_revenue_using_delete(customer_revenue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_revenue_id: UUID customer_revenue_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_customer_revenue_using_delete_with_http_info(customer_revenue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_customer_revenue_using_delete_with_http_info(customer_revenue_id, **kwargs)  # noqa: E501
            return data

    def delete_customer_revenue_using_delete_with_http_info(self, customer_revenue_id, **kwargs):  # noqa: E501
        """Delete a customer revenue  # noqa: E501

        Delete a customer revenue.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_customer_revenue_using_delete_with_http_info(customer_revenue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_revenue_id: UUID customer_revenue_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_revenue_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_customer_revenue_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_revenue_id' is set
        if ('customer_revenue_id' not in params or
                params['customer_revenue_id'] is None):
            raise ValueError("Missing the required parameter `customer_revenue_id` when calling `delete_customer_revenue_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_revenue_id' in params:
            path_params['customer_revenue_id'] = params['customer_revenue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/customer_revenue/{customer_revenue_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_customer_using_delete(self, customer_id, **kwargs):  # noqa: E501
        """Delete a customer  # noqa: E501

        Delete a customer.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_customer_using_delete(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: UUID customer_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_customer_using_delete_with_http_info(customer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_customer_using_delete_with_http_info(customer_id, **kwargs)  # noqa: E501
            return data

    def delete_customer_using_delete_with_http_info(self, customer_id, **kwargs):  # noqa: E501
        """Delete a customer  # noqa: E501

        Delete a customer.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_customer_using_delete_with_http_info(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: UUID customer_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_customer_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `delete_customer_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/customer/{customer_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_customer_all_using_get(self, **kwargs):  # noqa: E501
        """List all customer  # noqa: E501

        List all customer.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_customer_all_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageCustomer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_customer_all_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_customer_all_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_customer_all_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all customer  # noqa: E501

        List all customer.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_customer_all_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageCustomer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ascending', 'filter', 'order_by', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_customer_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/customer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageCustomer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_customer_revenue_all_using_get(self, **kwargs):  # noqa: E501
        """List all customer revenue  # noqa: E501

        List all customer revenue.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_customer_revenue_all_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str currency_conversion: currency_conversion
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageCustomerRevenue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_customer_revenue_all_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_customer_revenue_all_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_customer_revenue_all_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all customer revenue  # noqa: E501

        List all customer revenue.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_customer_revenue_all_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str currency_conversion: currency_conversion
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageCustomerRevenue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ascending', 'currency_conversion', 'filter', 'order_by', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_customer_revenue_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501
        if 'currency_conversion' in params:
            query_params.append(('currency_conversion', params['currency_conversion']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/customer_revenue', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageCustomerRevenue',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_customer_revenue_using_get(self, customer_revenue_id, **kwargs):  # noqa: E501
        """Retrieve a customer revenue  # noqa: E501

        Retrieve a customer revenue.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_customer_revenue_using_get(customer_revenue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_revenue_id: UUID customer_revenue_id (required)
        :param str currency_conversion: USD
        :return: CustomerRevenue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_customer_revenue_using_get_with_http_info(customer_revenue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_customer_revenue_using_get_with_http_info(customer_revenue_id, **kwargs)  # noqa: E501
            return data

    def get_customer_revenue_using_get_with_http_info(self, customer_revenue_id, **kwargs):  # noqa: E501
        """Retrieve a customer revenue  # noqa: E501

        Retrieve a customer revenue.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_customer_revenue_using_get_with_http_info(customer_revenue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_revenue_id: UUID customer_revenue_id (required)
        :param str currency_conversion: USD
        :return: CustomerRevenue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_revenue_id', 'currency_conversion']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_customer_revenue_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_revenue_id' is set
        if ('customer_revenue_id' not in params or
                params['customer_revenue_id'] is None):
            raise ValueError("Missing the required parameter `customer_revenue_id` when calling `get_customer_revenue_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_revenue_id' in params:
            path_params['customer_revenue_id'] = params['customer_revenue_id']  # noqa: E501

        query_params = []
        if 'currency_conversion' in params:
            query_params.append(('currency_conversion', params['currency_conversion']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/customer_revenue/{customer_revenue_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomerRevenue',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_customer_using_get(self, customer_id, **kwargs):  # noqa: E501
        """Retrieve a customer  # noqa: E501

        Retrieve a customer.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_customer_using_get(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: UUID customer_id (required)
        :return: Customer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_customer_using_get_with_http_info(customer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_customer_using_get_with_http_info(customer_id, **kwargs)  # noqa: E501
            return data

    def get_customer_using_get_with_http_info(self, customer_id, **kwargs):  # noqa: E501
        """Retrieve a customer  # noqa: E501

        Retrieve a customer.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_customer_using_get_with_http_info(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: UUID customer_id (required)
        :return: Customer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_customer_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `get_customer_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/customer/{customer_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Customer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_customer_revenue_using_put(self, customer_revenue, customer_revenue_id, **kwargs):  # noqa: E501
        """Update a customer revenue  # noqa: E501

        Update a customer revenue.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_customer_revenue_using_put(customer_revenue, customer_revenue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object customer_revenue: customer_revenue (required)
        :param str customer_revenue_id: UUID customer_revenue_id (required)
        :return: CustomerRevenue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_customer_revenue_using_put_with_http_info(customer_revenue, customer_revenue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_customer_revenue_using_put_with_http_info(customer_revenue, customer_revenue_id, **kwargs)  # noqa: E501
            return data

    def update_customer_revenue_using_put_with_http_info(self, customer_revenue, customer_revenue_id, **kwargs):  # noqa: E501
        """Update a customer revenue  # noqa: E501

        Update a customer revenue.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_customer_revenue_using_put_with_http_info(customer_revenue, customer_revenue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object customer_revenue: customer_revenue (required)
        :param str customer_revenue_id: UUID customer_revenue_id (required)
        :return: CustomerRevenue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_revenue', 'customer_revenue_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_customer_revenue_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_revenue' is set
        if ('customer_revenue' not in params or
                params['customer_revenue'] is None):
            raise ValueError("Missing the required parameter `customer_revenue` when calling `update_customer_revenue_using_put`")  # noqa: E501
        # verify the required parameter 'customer_revenue_id' is set
        if ('customer_revenue_id' not in params or
                params['customer_revenue_id'] is None):
            raise ValueError("Missing the required parameter `customer_revenue_id` when calling `update_customer_revenue_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_revenue_id' in params:
            path_params['customer_revenue_id'] = params['customer_revenue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'customer_revenue' in params:
            body_params = params['customer_revenue']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/customer_revenue/{customer_revenue_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomerRevenue',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_customer_using_put(self, customer, customer_id, **kwargs):  # noqa: E501
        """Update a customer  # noqa: E501

        Update a customer.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_customer_using_put(customer, customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object customer: customer (required)
        :param str customer_id: UUID customer_id (required)
        :return: Customer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_customer_using_put_with_http_info(customer, customer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_customer_using_put_with_http_info(customer, customer_id, **kwargs)  # noqa: E501
            return data

    def update_customer_using_put_with_http_info(self, customer, customer_id, **kwargs):  # noqa: E501
        """Update a customer  # noqa: E501

        Update a customer.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_customer_using_put_with_http_info(customer, customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object customer: customer (required)
        :param str customer_id: UUID customer_id (required)
        :return: Customer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer', 'customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_customer_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer' is set
        if ('customer' not in params or
                params['customer'] is None):
            raise ValueError("Missing the required parameter `customer` when calling `update_customer_using_put`")  # noqa: E501
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `update_customer_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'customer' in params:
            body_params = params['customer']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/customer/{customer_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Customer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
