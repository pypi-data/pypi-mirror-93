# coding: utf-8

"""
    Hydrogen Nucleus API

    The Hydrogen Nucleus API  # noqa: E501

    OpenAPI spec version: 1.8.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomerRevenue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accounting_method': 'str',
        'create_date': 'datetime',
        'currency_code': 'str',
        'customer_id': 'str',
        '_date': 'date',
        'id': 'str',
        'revenue': 'float',
        'secondary_id': 'str',
        'update_date': 'datetime'
    }

    attribute_map = {
        'accounting_method': 'accounting_method',
        'create_date': 'create_date',
        'currency_code': 'currency_code',
        'customer_id': 'customer_id',
        '_date': 'date',
        'id': 'id',
        'revenue': 'revenue',
        'secondary_id': 'secondary_id',
        'update_date': 'update_date'
    }

    def __init__(self, accounting_method=None, create_date=None, currency_code=None, customer_id=None, _date=None, id=None, revenue=None, secondary_id=None, update_date=None):  # noqa: E501
        """CustomerRevenue - a model defined in Swagger"""  # noqa: E501

        self._accounting_method = None
        self._create_date = None
        self._currency_code = None
        self._customer_id = None
        self.__date = None
        self._id = None
        self._revenue = None
        self._secondary_id = None
        self._update_date = None
        self.discriminator = None

        self.accounting_method = accounting_method
        if create_date is not None:
            self.create_date = create_date
        self.currency_code = currency_code
        self.customer_id = customer_id
        self._date = _date
        if id is not None:
            self.id = id
        self.revenue = revenue
        if secondary_id is not None:
            self.secondary_id = secondary_id
        if update_date is not None:
            self.update_date = update_date

    @property
    def accounting_method(self):
        """Gets the accounting_method of this CustomerRevenue.  # noqa: E501

        accounting_method  # noqa: E501

        :return: The accounting_method of this CustomerRevenue.  # noqa: E501
        :rtype: str
        """
        return self._accounting_method

    @accounting_method.setter
    def accounting_method(self, accounting_method):
        """Sets the accounting_method of this CustomerRevenue.

        accounting_method  # noqa: E501

        :param accounting_method: The accounting_method of this CustomerRevenue.  # noqa: E501
        :type: str
        """
        if accounting_method is None:
            raise ValueError("Invalid value for `accounting_method`, must not be `None`")  # noqa: E501

        self._accounting_method = accounting_method

    @property
    def create_date(self):
        """Gets the create_date of this CustomerRevenue.  # noqa: E501


        :return: The create_date of this CustomerRevenue.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this CustomerRevenue.


        :param create_date: The create_date of this CustomerRevenue.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def currency_code(self):
        """Gets the currency_code of this CustomerRevenue.  # noqa: E501

        currency_code  # noqa: E501

        :return: The currency_code of this CustomerRevenue.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this CustomerRevenue.

        currency_code  # noqa: E501

        :param currency_code: The currency_code of this CustomerRevenue.  # noqa: E501
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def customer_id(self):
        """Gets the customer_id of this CustomerRevenue.  # noqa: E501

        customerId  # noqa: E501

        :return: The customer_id of this CustomerRevenue.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this CustomerRevenue.

        customerId  # noqa: E501

        :param customer_id: The customer_id of this CustomerRevenue.  # noqa: E501
        :type: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def _date(self):
        """Gets the _date of this CustomerRevenue.  # noqa: E501

        date  # noqa: E501

        :return: The _date of this CustomerRevenue.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this CustomerRevenue.

        date  # noqa: E501

        :param _date: The _date of this CustomerRevenue.  # noqa: E501
        :type: date
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def id(self):
        """Gets the id of this CustomerRevenue.  # noqa: E501


        :return: The id of this CustomerRevenue.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomerRevenue.


        :param id: The id of this CustomerRevenue.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def revenue(self):
        """Gets the revenue of this CustomerRevenue.  # noqa: E501

        revenue  # noqa: E501

        :return: The revenue of this CustomerRevenue.  # noqa: E501
        :rtype: float
        """
        return self._revenue

    @revenue.setter
    def revenue(self, revenue):
        """Sets the revenue of this CustomerRevenue.

        revenue  # noqa: E501

        :param revenue: The revenue of this CustomerRevenue.  # noqa: E501
        :type: float
        """
        if revenue is None:
            raise ValueError("Invalid value for `revenue`, must not be `None`")  # noqa: E501

        self._revenue = revenue

    @property
    def secondary_id(self):
        """Gets the secondary_id of this CustomerRevenue.  # noqa: E501


        :return: The secondary_id of this CustomerRevenue.  # noqa: E501
        :rtype: str
        """
        return self._secondary_id

    @secondary_id.setter
    def secondary_id(self, secondary_id):
        """Sets the secondary_id of this CustomerRevenue.


        :param secondary_id: The secondary_id of this CustomerRevenue.  # noqa: E501
        :type: str
        """

        self._secondary_id = secondary_id

    @property
    def update_date(self):
        """Gets the update_date of this CustomerRevenue.  # noqa: E501


        :return: The update_date of this CustomerRevenue.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this CustomerRevenue.


        :param update_date: The update_date of this CustomerRevenue.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerRevenue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerRevenue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
