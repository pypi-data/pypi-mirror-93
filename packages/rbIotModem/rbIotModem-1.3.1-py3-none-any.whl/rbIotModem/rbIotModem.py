# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_rbIotModem')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_rbIotModem')
    _rbIotModem = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rbIotModem', [dirname(__file__)])
        except ImportError:
            import _rbIotModem
            return _rbIotModem
        try:
            _mod = imp.load_module('_rbIotModem', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _rbIotModem = swig_import_helper()
    del swig_import_helper
else:
    import _rbIotModem
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

BAUD_RATE = _rbIotModem.BAUD_RATE
COMMS_SIMULATION = _rbIotModem.COMMS_SIMULATION
SIMULATION_DELAY = _rbIotModem.SIMULATION_DELAY
AT_RESPONSE_LEN = _rbIotModem.AT_RESPONSE_LEN
AT_MAX_TRIES = _rbIotModem.AT_MAX_TRIES
AT_POLL_RESPONSE_DELAY = _rbIotModem.AT_POLL_RESPONSE_DELAY
AT_FILE_UPLOAD = _rbIotModem.AT_FILE_UPLOAD
AT_FILE_CONNECT = _rbIotModem.AT_FILE_CONNECT
AT_FILE_UPLOAD_RESPONSE = _rbIotModem.AT_FILE_UPLOAD_RESPONSE
IVR_RESPONSE_LEN = _rbIotModem.IVR_RESPONSE_LEN
AT_IVR_KEYPAD_RESPONSE = _rbIotModem.AT_IVR_KEYPAD_RESPONSE
class MmsConfiguration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MmsConfiguration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MmsConfiguration, name)
    __repr__ = _swig_repr
    __swig_setmethods__["protocol"] = _rbIotModem.MmsConfiguration_protocol_set
    __swig_getmethods__["protocol"] = _rbIotModem.MmsConfiguration_protocol_get
    if _newclass:
        protocol = _swig_property(_rbIotModem.MmsConfiguration_protocol_get, _rbIotModem.MmsConfiguration_protocol_set)
    __swig_setmethods__["apn"] = _rbIotModem.MmsConfiguration_apn_set
    __swig_getmethods__["apn"] = _rbIotModem.MmsConfiguration_apn_get
    if _newclass:
        apn = _swig_property(_rbIotModem.MmsConfiguration_apn_get, _rbIotModem.MmsConfiguration_apn_set)
    __swig_setmethods__["username"] = _rbIotModem.MmsConfiguration_username_set
    __swig_getmethods__["username"] = _rbIotModem.MmsConfiguration_username_get
    if _newclass:
        username = _swig_property(_rbIotModem.MmsConfiguration_username_get, _rbIotModem.MmsConfiguration_username_set)
    __swig_setmethods__["password"] = _rbIotModem.MmsConfiguration_password_set
    __swig_getmethods__["password"] = _rbIotModem.MmsConfiguration_password_get
    if _newclass:
        password = _swig_property(_rbIotModem.MmsConfiguration_password_get, _rbIotModem.MmsConfiguration_password_set)
    __swig_setmethods__["authentication"] = _rbIotModem.MmsConfiguration_authentication_set
    __swig_getmethods__["authentication"] = _rbIotModem.MmsConfiguration_authentication_get
    if _newclass:
        authentication = _swig_property(_rbIotModem.MmsConfiguration_authentication_get, _rbIotModem.MmsConfiguration_authentication_set)
    __swig_setmethods__["mmsc"] = _rbIotModem.MmsConfiguration_mmsc_set
    __swig_getmethods__["mmsc"] = _rbIotModem.MmsConfiguration_mmsc_get
    if _newclass:
        mmsc = _swig_property(_rbIotModem.MmsConfiguration_mmsc_get, _rbIotModem.MmsConfiguration_mmsc_set)
    __swig_setmethods__["proxy"] = _rbIotModem.MmsConfiguration_proxy_set
    __swig_getmethods__["proxy"] = _rbIotModem.MmsConfiguration_proxy_get
    if _newclass:
        proxy = _swig_property(_rbIotModem.MmsConfiguration_proxy_get, _rbIotModem.MmsConfiguration_proxy_set)
    __swig_setmethods__["port"] = _rbIotModem.MmsConfiguration_port_set
    __swig_getmethods__["port"] = _rbIotModem.MmsConfiguration_port_get
    if _newclass:
        port = _swig_property(_rbIotModem.MmsConfiguration_port_get, _rbIotModem.MmsConfiguration_port_set)

    def __init__(self):
        this = _rbIotModem.new_MmsConfiguration()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rbIotModem.delete_MmsConfiguration
    __del__ = lambda self: None
MmsConfiguration_swigregister = _rbIotModem.MmsConfiguration_swigregister
MmsConfiguration_swigregister(MmsConfiguration)

class Comms(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Comms, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Comms, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mmsConfig"] = _rbIotModem.Comms_mmsConfig_set
    __swig_getmethods__["mmsConfig"] = _rbIotModem.Comms_mmsConfig_get
    if _newclass:
        mmsConfig = _swig_property(_rbIotModem.Comms_mmsConfig_get, _rbIotModem.Comms_mmsConfig_set)

    def configure(self, simulation: 'bool', serialPort: 'std::string') -> "void":
        return _rbIotModem.Comms_configure(self, simulation, serialPort)

    def getConnectionStatus(self) -> "bool":
        return _rbIotModem.Comms_getConnectionStatus(self)

    def init(self) -> "bool":
        return _rbIotModem.Comms_init(self)

    def close(self) -> "void":
        return _rbIotModem.Comms_close(self)

    def sendATCommand(self, *args) -> "bool":
        return _rbIotModem.Comms_sendATCommand(self, *args)

    def readATResponse(self, *args) -> "std::string":
        return _rbIotModem.Comms_readATResponse(self, *args)

    def uploadFile(self, filePath: 'std::string', fileName: 'std::string &') -> "bool":
        return _rbIotModem.Comms_uploadFile(self, filePath, fileName)

    def readKeypadInput(self, *args) -> "bool":
        return _rbIotModem.Comms_readKeypadInput(self, *args)

    def __init__(self):
        this = _rbIotModem.new_Comms()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rbIotModem.delete_Comms
    __del__ = lambda self: None
Comms_swigregister = _rbIotModem.Comms_swigregister
Comms_swigregister(Comms)

MODEM_CONFIGURE_MAX_ATTEMPTS = _rbIotModem.MODEM_CONFIGURE_MAX_ATTEMPTS
AT_RESPONSE_OK = _rbIotModem.AT_RESPONSE_OK
AT_FACTORY_SETTINGS = _rbIotModem.AT_FACTORY_SETTINGS
AT_ECHO_MODE = _rbIotModem.AT_ECHO_MODE
AT_ECHO_RESPONSE_OK = _rbIotModem.AT_ECHO_RESPONSE_OK
AT_UAC_ENABLE_DEVICE = _rbIotModem.AT_UAC_ENABLE_DEVICE
AT_UAC_ENABLE_FUNCTION = _rbIotModem.AT_UAC_ENABLE_FUNCTION
AT_DTMF_ENABLE = _rbIotModem.AT_DTMF_ENABLE
AT_PING = _rbIotModem.AT_PING
AT_SHUT_DOWN = _rbIotModem.AT_SHUT_DOWN
AT_SMS_FORMAT = _rbIotModem.AT_SMS_FORMAT
AT_SMS_CHARACTER_SET = _rbIotModem.AT_SMS_CHARACTER_SET
AT_SMS_SEND = _rbIotModem.AT_SMS_SEND
AT_SMS_DELIMITER = _rbIotModem.AT_SMS_DELIMITER
AT_SMS_RESPONSE_OK = _rbIotModem.AT_SMS_RESPONSE_OK
AT_SMS_PARAMETERS = _rbIotModem.AT_SMS_PARAMETERS
AT_SMS_READ = _rbIotModem.AT_SMS_READ
AT_SMS_DELETE = _rbIotModem.AT_SMS_DELETE
AT_CALL_PLACE = _rbIotModem.AT_CALL_PLACE
AT_CALL_ANSWER = _rbIotModem.AT_CALL_ANSWER
AT_CALL_HANGUP = _rbIotModem.AT_CALL_HANGUP
AT_CALL_STATUS = _rbIotModem.AT_CALL_STATUS
AT_CALL_IN_PROGRESS_RESPONSE = _rbIotModem.AT_CALL_IN_PROGRESS_RESPONSE
AT_MMS_CONFIGURE_CONTEXT = _rbIotModem.AT_MMS_CONFIGURE_CONTEXT
AT_MMS_ACTIVATE_CONTEXT = _rbIotModem.AT_MMS_ACTIVATE_CONTEXT
AT_MMS_DEACTIVATE_CONTEXT = _rbIotModem.AT_MMS_DEACTIVATE_CONTEXT
AT_MMS_CONFIGURE_CONTEXT_ID = _rbIotModem.AT_MMS_CONFIGURE_CONTEXT_ID
AT_MMS_CONFIGURE_MMSC = _rbIotModem.AT_MMS_CONFIGURE_MMSC
AT_MMS_CONFIGURE_PROXY = _rbIotModem.AT_MMS_CONFIGURE_PROXY
AT_MMS_CONFIGURE_SENDPARAM = _rbIotModem.AT_MMS_CONFIGURE_SENDPARAM
AT_MMS_CONFIGURE_CHARSET = _rbIotModem.AT_MMS_CONFIGURE_CHARSET
AT_MMS_ADD_RECIPIENT = _rbIotModem.AT_MMS_ADD_RECIPIENT
AT_MMS_ADD_CC = _rbIotModem.AT_MMS_ADD_CC
AT_MMS_ADD_BCC = _rbIotModem.AT_MMS_ADD_BCC
AT_MMS_EDIT_TITLE = _rbIotModem.AT_MMS_EDIT_TITLE
AT_MMS_ADD_ATTACHMENT = _rbIotModem.AT_MMS_ADD_ATTACHMENT
AT_MMS_CLEAR = _rbIotModem.AT_MMS_CLEAR
AT_MMS_SEND = _rbIotModem.AT_MMS_SEND
AT_MMS_RESPONSE_OK = _rbIotModem.AT_MMS_RESPONSE_OK
AT_FILE_DELETE = _rbIotModem.AT_FILE_DELETE
class Modem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Modem, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rbIotModem.new_Modem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rbIotModem.delete_Modem
    __del__ = lambda self: None

    def initialize(self, *args) -> "bool":
        return _rbIotModem.Modem_initialize(self, *args)

    def on(self) -> "bool":
        return _rbIotModem.Modem_on(self)

    def off(self) -> "void":
        return _rbIotModem.Modem_off(self)

    def restart(self) -> "bool":
        return _rbIotModem.Modem_restart(self)

    def connect(self) -> "bool":
        return _rbIotModem.Modem_connect(self)

    def disconnect(self) -> "void":
        return _rbIotModem.Modem_disconnect(self)

    def configure(self) -> "bool":
        return _rbIotModem.Modem_configure(self)

    def sendSMS(self, number: 'std::string', message: 'std::string') -> "bool":
        return _rbIotModem.Modem_sendSMS(self, number, message)

    def receiveSMS(self) -> "bool":
        return _rbIotModem.Modem_receiveSMS(self)

    def placeVoiceCall(self, number: 'std::string') -> "bool":
        return _rbIotModem.Modem_placeVoiceCall(self, number)

    def receiveVoiceCall(self) -> "bool":
        return _rbIotModem.Modem_receiveVoiceCall(self)

    def getCallStatus(self, isCallEnded: 'bool &') -> "void":
        return _rbIotModem.Modem_getCallStatus(self, isCallEnded)

    def endCall(self) -> "void":
        return _rbIotModem.Modem_endCall(self)

    def beginAudioPlayback(self, playbackFile: 'std::string') -> "void":
        return _rbIotModem.Modem_beginAudioPlayback(self, playbackFile)

    def waitForAudioPlayback(self) -> "void":
        return _rbIotModem.Modem_waitForAudioPlayback(self)

    def endAudioPlayback(self) -> "void":
        return _rbIotModem.Modem_endAudioPlayback(self)

    def beginAudioRecording(self, recordFile: 'std::string') -> "void":
        return _rbIotModem.Modem_beginAudioRecording(self, recordFile)

    def endAudioRecording(self) -> "void":
        return _rbIotModem.Modem_endAudioRecording(self)

    def sendMMS(self, mmsConfig: 'MmsConfiguration', recipient: 'std::string', cc: 'std::string', bcc: 'std::string', title: 'std::string', attachment: 'std::string') -> "bool":
        return _rbIotModem.Modem_sendMMS(self, mmsConfig, recipient, cc, bcc, title, attachment)

    def getKeypadInput(self, *args) -> "bool":
        return _rbIotModem.Modem_getKeypadInput(self, *args)
Modem_swigregister = _rbIotModem.Modem_swigregister
Modem_swigregister(Modem)

MODEM_NAME = _rbIotModem.MODEM_NAME
class EC25(Modem):
    __swig_setmethods__ = {}
    for _s in [Modem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EC25, name, value)
    __swig_getmethods__ = {}
    for _s in [Modem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EC25, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rbIotModem.new_EC25()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rbIotModem.delete_EC25
    __del__ = lambda self: None
EC25_swigregister = _rbIotModem.EC25_swigregister
EC25_swigregister(EC25)

# This file is compatible with both classic and new-style classes.


