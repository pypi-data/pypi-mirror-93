# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rbIotModem
else:
    import _rbIotModem

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


BAUD_RATE = _rbIotModem.BAUD_RATE
COMMS_SIMULATION = _rbIotModem.COMMS_SIMULATION
SIMULATION_DELAY = _rbIotModem.SIMULATION_DELAY
AT_RESPONSE_LEN = _rbIotModem.AT_RESPONSE_LEN
AT_MAX_TRIES = _rbIotModem.AT_MAX_TRIES
AT_POLL_RESPONSE_DELAY = _rbIotModem.AT_POLL_RESPONSE_DELAY
AT_FILE_UPLOAD = _rbIotModem.AT_FILE_UPLOAD
AT_FILE_CONNECT = _rbIotModem.AT_FILE_CONNECT
AT_FILE_UPLOAD_RESPONSE = _rbIotModem.AT_FILE_UPLOAD_RESPONSE
IVR_RESPONSE_LEN = _rbIotModem.IVR_RESPONSE_LEN
AT_IVR_KEYPAD_RESPONSE = _rbIotModem.AT_IVR_KEYPAD_RESPONSE
class MmsConfiguration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    protocol = property(_rbIotModem.MmsConfiguration_protocol_get, _rbIotModem.MmsConfiguration_protocol_set)
    apn = property(_rbIotModem.MmsConfiguration_apn_get, _rbIotModem.MmsConfiguration_apn_set)
    username = property(_rbIotModem.MmsConfiguration_username_get, _rbIotModem.MmsConfiguration_username_set)
    password = property(_rbIotModem.MmsConfiguration_password_get, _rbIotModem.MmsConfiguration_password_set)
    authentication = property(_rbIotModem.MmsConfiguration_authentication_get, _rbIotModem.MmsConfiguration_authentication_set)
    mmsc = property(_rbIotModem.MmsConfiguration_mmsc_get, _rbIotModem.MmsConfiguration_mmsc_set)
    proxy = property(_rbIotModem.MmsConfiguration_proxy_get, _rbIotModem.MmsConfiguration_proxy_set)
    port = property(_rbIotModem.MmsConfiguration_port_get, _rbIotModem.MmsConfiguration_port_set)

    def __init__(self):
        _rbIotModem.MmsConfiguration_swiginit(self, _rbIotModem.new_MmsConfiguration())
    __swig_destroy__ = _rbIotModem.delete_MmsConfiguration

# Register MmsConfiguration in _rbIotModem:
_rbIotModem.MmsConfiguration_swigregister(MmsConfiguration)

class Comms(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mmsConfig = property(_rbIotModem.Comms_mmsConfig_get, _rbIotModem.Comms_mmsConfig_set)

    def configure(self, simulation: "bool", serialPort: "std::string") -> "void":
        return _rbIotModem.Comms_configure(self, simulation, serialPort)

    def getConnectionStatus(self) -> "bool":
        return _rbIotModem.Comms_getConnectionStatus(self)

    def init(self) -> "bool":
        return _rbIotModem.Comms_init(self)

    def close(self) -> "void":
        return _rbIotModem.Comms_close(self)

    def sendATCommand(self, *args) -> "bool":
        return _rbIotModem.Comms_sendATCommand(self, *args)

    def readATResponse(self, *args) -> "std::string":
        return _rbIotModem.Comms_readATResponse(self, *args)

    def uploadFile(self, filePath: "std::string", fileName: "std::string &") -> "bool":
        return _rbIotModem.Comms_uploadFile(self, filePath, fileName)

    def readKeypadInput(self, *args) -> "bool":
        return _rbIotModem.Comms_readKeypadInput(self, *args)

    def __init__(self):
        _rbIotModem.Comms_swiginit(self, _rbIotModem.new_Comms())
    __swig_destroy__ = _rbIotModem.delete_Comms

# Register Comms in _rbIotModem:
_rbIotModem.Comms_swigregister(Comms)

MODEM_CONFIGURE_MAX_ATTEMPTS = _rbIotModem.MODEM_CONFIGURE_MAX_ATTEMPTS
AT_RESPONSE_OK = _rbIotModem.AT_RESPONSE_OK
AT_FACTORY_SETTINGS = _rbIotModem.AT_FACTORY_SETTINGS
AT_ECHO_MODE = _rbIotModem.AT_ECHO_MODE
AT_ECHO_RESPONSE_OK = _rbIotModem.AT_ECHO_RESPONSE_OK
AT_UAC_ENABLE_DEVICE = _rbIotModem.AT_UAC_ENABLE_DEVICE
AT_UAC_ENABLE_FUNCTION = _rbIotModem.AT_UAC_ENABLE_FUNCTION
AT_DTMF_ENABLE = _rbIotModem.AT_DTMF_ENABLE
AT_PING = _rbIotModem.AT_PING
AT_SHUT_DOWN = _rbIotModem.AT_SHUT_DOWN
AT_SMS_FORMAT = _rbIotModem.AT_SMS_FORMAT
AT_SMS_CHARACTER_SET = _rbIotModem.AT_SMS_CHARACTER_SET
AT_SMS_SEND = _rbIotModem.AT_SMS_SEND
AT_SMS_DELIMITER = _rbIotModem.AT_SMS_DELIMITER
AT_SMS_RESPONSE_OK = _rbIotModem.AT_SMS_RESPONSE_OK
AT_SMS_PARAMETERS = _rbIotModem.AT_SMS_PARAMETERS
AT_SMS_READ = _rbIotModem.AT_SMS_READ
AT_SMS_DELETE = _rbIotModem.AT_SMS_DELETE
AT_CALL_PLACE = _rbIotModem.AT_CALL_PLACE
AT_CALL_ANSWER = _rbIotModem.AT_CALL_ANSWER
AT_CALL_HANGUP = _rbIotModem.AT_CALL_HANGUP
AT_CALL_STATUS = _rbIotModem.AT_CALL_STATUS
AT_CALL_IN_PROGRESS_RESPONSE = _rbIotModem.AT_CALL_IN_PROGRESS_RESPONSE
AT_MMS_CONFIGURE_CONTEXT = _rbIotModem.AT_MMS_CONFIGURE_CONTEXT
AT_MMS_ACTIVATE_CONTEXT = _rbIotModem.AT_MMS_ACTIVATE_CONTEXT
AT_MMS_DEACTIVATE_CONTEXT = _rbIotModem.AT_MMS_DEACTIVATE_CONTEXT
AT_MMS_CONFIGURE_CONTEXT_ID = _rbIotModem.AT_MMS_CONFIGURE_CONTEXT_ID
AT_MMS_CONFIGURE_MMSC = _rbIotModem.AT_MMS_CONFIGURE_MMSC
AT_MMS_CONFIGURE_PROXY = _rbIotModem.AT_MMS_CONFIGURE_PROXY
AT_MMS_CONFIGURE_SENDPARAM = _rbIotModem.AT_MMS_CONFIGURE_SENDPARAM
AT_MMS_CONFIGURE_CHARSET = _rbIotModem.AT_MMS_CONFIGURE_CHARSET
AT_MMS_ADD_RECIPIENT = _rbIotModem.AT_MMS_ADD_RECIPIENT
AT_MMS_ADD_CC = _rbIotModem.AT_MMS_ADD_CC
AT_MMS_ADD_BCC = _rbIotModem.AT_MMS_ADD_BCC
AT_MMS_EDIT_TITLE = _rbIotModem.AT_MMS_EDIT_TITLE
AT_MMS_ADD_ATTACHMENT = _rbIotModem.AT_MMS_ADD_ATTACHMENT
AT_MMS_CLEAR = _rbIotModem.AT_MMS_CLEAR
AT_MMS_SEND = _rbIotModem.AT_MMS_SEND
AT_MMS_RESPONSE_OK = _rbIotModem.AT_MMS_RESPONSE_OK
AT_FILE_DELETE = _rbIotModem.AT_FILE_DELETE
class Modem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _rbIotModem.Modem_swiginit(self, _rbIotModem.new_Modem())
    __swig_destroy__ = _rbIotModem.delete_Modem

    def initialize(self, *args) -> "bool":
        return _rbIotModem.Modem_initialize(self, *args)

    def on(self) -> "bool":
        return _rbIotModem.Modem_on(self)

    def off(self) -> "void":
        return _rbIotModem.Modem_off(self)

    def restart(self) -> "bool":
        return _rbIotModem.Modem_restart(self)

    def connect(self) -> "bool":
        return _rbIotModem.Modem_connect(self)

    def disconnect(self) -> "void":
        return _rbIotModem.Modem_disconnect(self)

    def configure(self) -> "bool":
        return _rbIotModem.Modem_configure(self)

    def sendSMS(self, number: "std::string", message: "std::string") -> "bool":
        return _rbIotModem.Modem_sendSMS(self, number, message)

    def receiveSMS(self) -> "bool":
        return _rbIotModem.Modem_receiveSMS(self)

    def placeVoiceCall(self, number: "std::string") -> "bool":
        return _rbIotModem.Modem_placeVoiceCall(self, number)

    def receiveVoiceCall(self) -> "bool":
        return _rbIotModem.Modem_receiveVoiceCall(self)

    def getCallStatus(self) -> "bool":
        return _rbIotModem.Modem_getCallStatus(self)

    def endCall(self) -> "void":
        return _rbIotModem.Modem_endCall(self)

    def beginAudioPlayback(self, playbackFile: "std::string") -> "void":
        return _rbIotModem.Modem_beginAudioPlayback(self, playbackFile)

    def waitForAudioPlayback(self) -> "void":
        return _rbIotModem.Modem_waitForAudioPlayback(self)

    def endAudioPlayback(self) -> "void":
        return _rbIotModem.Modem_endAudioPlayback(self)

    def beginAudioRecording(self, recordFile: "std::string") -> "void":
        return _rbIotModem.Modem_beginAudioRecording(self, recordFile)

    def endAudioRecording(self) -> "void":
        return _rbIotModem.Modem_endAudioRecording(self)

    def sendMMS(self, mmsConfig: "MmsConfiguration", recipient: "std::string", cc: "std::string", bcc: "std::string", title: "std::string", attachment: "std::string") -> "bool":
        return _rbIotModem.Modem_sendMMS(self, mmsConfig, recipient, cc, bcc, title, attachment)

    def getKeypadInput(self, *args) -> "bool":
        return _rbIotModem.Modem_getKeypadInput(self, *args)

# Register Modem in _rbIotModem:
_rbIotModem.Modem_swigregister(Modem)

MODEM_NAME = _rbIotModem.MODEM_NAME
class EC25(Modem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _rbIotModem.EC25_swiginit(self, _rbIotModem.new_EC25())
    __swig_destroy__ = _rbIotModem.delete_EC25

# Register EC25 in _rbIotModem:
_rbIotModem.EC25_swigregister(EC25)



