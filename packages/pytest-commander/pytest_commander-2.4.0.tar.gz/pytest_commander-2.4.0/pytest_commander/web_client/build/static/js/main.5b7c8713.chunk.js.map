{"version":3,"sources":["Common.ts","NavColumn.tsx","CentrePane.tsx","App.tsx","index.tsx"],"names":["LIGHT_GREY","MEDIUM_GREY","COLWIDTH","NavColumn","props","_","isEmpty","childBranches","childLeaves","className","css","styles","navColumn","ListGroup","selection","selectedLeafID","handleTestRun","handleEnvToggle","NavEntries","childIDs","Object","keys","map","shortID","branch","concat","sort","a","b","localeCompare","nodeInfo","childNode","node","BranchEntry","linkAddr","short_id","encodeURIComponent","join","ListGroupItem","key","getNavEntryStyle","status","navEntryCommon","navLabel","to","BranchEntryButtons","environment_state","nodeid","buttonsContainer","envStatus","LeafEntry","label","NavEntryIcon","icon","faRedo","inactiveButton","size","spin","faPlay","onClick","e","stopPropagation","runButton","EnvironmentIcon","faToggleOff","faToggleOn","Error","navEntryPassed","navEntryFailed","navEntryDefault","StyleSheet","create","width","height","position","padding","background","fontSize","cursor","color","transition","display","InfoPane","selectedLeaf","title","statusIcon","getStatusIcon","longrepr","message","Message","faCheckCircle","faTimesCircle","NavBreadcrumbs","numSelected","length","Breadcrumb","BreadcrumbItem","faHome","currSelected","restSelected","slice","index","flexDirection","justifyContent","alignItems","textAlign","minHeight","TestRunner","state","resultTree","loading","socket","errorMessage","handleUpdate","bind","io","this","setState","on","getResultTree","axios","get","then","response","data","catch","reason","console","log","setTimeout","tree","emit","start","parseSelection","url","getCurrSelection","error","SelectionNotFound","React","Component","trimmedPath","replace","split","decodeURIComponent","TestRunnerDisplay","useQuery","centrePane","MessageDisplay","URLSearchParams","useLocation","search","selectedBranch","reduce","child_branches","child_leaves","App","path","render","location","pathname","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.5b7c8713.chunk.js","sourcesContent":["/**\n * Global constants and type declarations.\n *\n * Commented out until used.\n */\n\n//const GREEN = '#228F1D';\n//const RED = '#A2000C';\n//const ORANGE = '#FFA500';\nexport const LIGHT_GREY = '#F3F3F3';\nexport const MEDIUM_GREY = '#D0D0D0';\n//const DARK_GREY = '#ADADAD';\n//const BLACK = '#404040';\n\nexport const COLWIDTH = \"25em\";\n\nexport interface BranchNode {\n  short_id: string,\n  nodeid: string,\n  status: string,\n  parent_ids: Array<string>,\n  child_branches: { [key: string]: BranchNode },\n  child_leaves: { [key: string]: LeafNode },\n  environment_state: string,\n}\n\nexport interface LeafNode {\n  short_id: string,\n  nodeid: string,\n  status: string,\n  parent_ids: Array<string>,\n  longrepr: string,\n}\n","/**\n * Navigation column component and its subcomponents. Used to control navigation\n * from a current selected branch node down to its child nodes.\n */\nimport React from 'react';\nimport _ from 'lodash';\nimport { ListGroup, ListGroupItem } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay, faRedo, faToggleOn, faToggleOff } from '@fortawesome/free-solid-svg-icons';\nimport { Link } from \"react-router-dom\";\nimport { StyleSheet, css } from \"aphrodite\";\n\nimport { LIGHT_GREY, MEDIUM_GREY, COLWIDTH, BranchNode, LeafNode } from \"./Common\";\n\ninterface NavColumnProps {\n  childBranches: { [key: string]: BranchNode },\n  childLeaves: { [key: string]: LeafNode },\n  selectedLeafID: string | null,\n  selection: Array<string>,\n  handleTestRun: (nodeid: string) => void,\n  handleEnvToggle: (nodeid: string, start: boolean) => void,\n}\n\n/**\n * NavColumn component: renders the current navigation selection.\n * @param props Component props\n */\nexport const NavColumn = (props: NavColumnProps) => {\n  if (_.isEmpty(props.childBranches) && _.isEmpty(props.childLeaves)) {\n    return <div className={css(styles.navColumn)} />;\n  }\n\n  return (\n    <div className={css(styles.navColumn)}>\n      <ListGroup>\n        <NavEntries\n          childBranches={props.childBranches}\n          childLeaves={props.childLeaves}\n          selection={props.selection}\n          selectedLeafID={props.selectedLeafID}\n          handleTestRun={props.handleTestRun}\n          handleEnvToggle={props.handleEnvToggle}\n        />\n      </ListGroup>\n    </div>\n  );\n};\n\ninterface NavEntriesProps {\n  childBranches: { [key: string]: BranchNode },\n  childLeaves: { [key: string]: LeafNode },\n  selection: Array<string>,\n  selectedLeafID: string | null,\n  handleTestRun: (nodeid: string) => void,\n  handleEnvToggle: (nodeid: string, start: boolean) => void,\n}\n\ninterface NodeIDInfo {\n  shortID: string,\n  branch: boolean,\n}\n\n/**\n * Render entries in the nav column for branch nodes that are children of the\n * currently selected node.\n * @param props Render props\n */\nconst NavEntries = (props: NavEntriesProps) => {\n  const childIDs = Object.keys(props.childBranches).map(\n    shortID => ({shortID: shortID, branch: true})\n  ).concat(\n    Object.keys(props.childLeaves).map(\n      shortID => ({shortID: shortID, branch: false})\n    )\n  ).sort((a: NodeIDInfo, b: NodeIDInfo) => (a.shortID.localeCompare(b.shortID)))\n\n  return (\n    <>\n      {\n        childIDs.map(\n          (nodeInfo: NodeIDInfo) => {\n            if (nodeInfo.branch) {\n              const childNode = props.childBranches[nodeInfo.shortID]\n              return <BranchEntry\n                node={childNode}\n                selection={props.selection}\n                handleTestRun={props.handleTestRun}\n                handleEnvToggle={props.handleEnvToggle}\n              />\n            } else {\n              const childNode = props.childLeaves[nodeInfo.shortID]\n              return <LeafEntry\n                node={childNode}\n                selectedLeafID={props.selectedLeafID}\n                handleTestRun={props.handleTestRun}\n              />\n            }\n          }\n        )\n      }\n    </>\n  );\n};\n\ninterface BranchEntryProps {\n  node: BranchNode,\n  selection: Array<string>,\n  handleTestRun: (nodeid: string) => void,\n  handleEnvToggle: (nodeid: string, start: boolean) => void,\n}\n\nconst BranchEntry = (props: BranchEntryProps) => {\n  const linkAddr = \"/\" + props.selection\n    .concat([props.node.short_id])\n    .map(encodeURIComponent)\n    .join(\"/\");\n\n  return (\n    <ListGroupItem\n      key={props.node.short_id}\n      className={\n        css(\n          getNavEntryStyle(props.node.status),\n          styles.navEntryCommon,\n        )\n      }\n    >\n      <span className={css(styles.navLabel)}>\n        <Link\n          to={linkAddr}\n        >\n          {props.node.short_id}\n        </Link>\n      </span>\n      <BranchEntryButtons\n        node={props.node}\n        handleTestRun={props.handleTestRun}\n        handleEnvToggle={props.handleEnvToggle}\n      />\n    </ListGroupItem>\n  );\n};\n\ninterface BranchEntryButtonsProps {\n  node: BranchNode,\n  handleTestRun: (nodeid: string) => void,\n  handleEnvToggle: (nodeid: string, start: boolean) => void,\n}\n\nconst BranchEntryButtons: React.FunctionComponent<BranchEntryButtonsProps> = props => {\n  if (props.node.environment_state === \"inactive\") {\n    return (\n      <NavEntryIcon\n        nodeid={props.node.nodeid}\n        status={props.node.status}\n        handleTestRun={props.handleTestRun}\n      />\n    );\n  }\n\n  return (\n    <span className={css(styles.buttonsContainer, styles.navEntryCommon)}>\n      <EnvironmentIcon\n        envStatus={props.node.environment_state}\n        handleEnvToggle={props.handleEnvToggle}\n        nodeid={props.node.nodeid}\n      />\n      <NavEntryIcon\n        nodeid={props.node.nodeid}\n        status={props.node.status}\n        handleTestRun={props.handleTestRun}\n      />\n    </span>\n  );\n};\n\ninterface LeafEntryProps {\n  node: LeafNode\n  selectedLeafID: string | null,\n  handleTestRun: (nodeid: string) => void,\n}\n\n/**\n * Render entries in the navigation column for child leaves of the currently\n * selected node.\n * @param props Render props\n */\nconst LeafEntry = (props: LeafEntryProps) => {\n  const shortID = props.node.short_id\n  const label = (shortID === props.selectedLeafID) ?\n    shortID :\n    (\n      <Link\n        to={`?selectedLeaf=${encodeURIComponent(shortID)}`}\n      >\n        {shortID}\n      </Link>\n    );\n\n  return (\n    <ListGroupItem\n      key={shortID}\n      className={\n        css(\n          getNavEntryStyle(\n            props.node.status\n          ),\n          styles.navEntryCommon,\n        )\n      }\n    >\n      <span className={css(styles.navLabel)}>{label}</span>\n      <NavEntryIcon\n        nodeid={props.node.nodeid}\n        status={props.node.status}\n        handleTestRun={props.handleTestRun}\n      />\n    </ListGroupItem>\n  );\n};\n\ninterface NavEntryIconProps {\n  nodeid: string,\n  status: string,\n  handleTestRun: (nodeid: string) => void,\n}\n\nconst NavEntryIcon = (props: NavEntryIconProps) => {\n  switch (props.status) {\n    case \"running\":\n      return (\n        <FontAwesomeIcon\n          icon={faRedo}\n          className={css(styles.inactiveButton)}\n          size=\"lg\"\n          spin\n        />\n      );\n\n    default:\n      return (\n        <FontAwesomeIcon\n          icon={faPlay}\n          onClick={(e: React.MouseEvent) => {\n            e.stopPropagation();\n            props.handleTestRun(props.nodeid);\n          }}\n          className={css(styles.runButton)}\n          size=\"lg\"\n        />\n      );\n  }\n};\n\ninterface EnvironmentIconProps {\n  envStatus: string,\n  nodeid: string,\n  handleEnvToggle: (nodeid: string, start: boolean) => void,\n}\n\nconst EnvironmentIcon: React.FunctionComponent<EnvironmentIconProps> = (props)=> {\n  switch (props.envStatus) {\n    case \"stopped\":\n      return (\n        <FontAwesomeIcon\n          icon={faToggleOff}\n          className={css(styles.runButton)}\n          onClick={(e: React.MouseEvent) => {\n            e.stopPropagation();\n            props.handleEnvToggle(props.nodeid, true);\n          }}\n          size=\"lg\"\n        />\n      );\n\n    case \"started\":\n      return (\n        <FontAwesomeIcon\n          icon={faToggleOn}\n          className={css(styles.runButton)}\n          onClick={(e: React.MouseEvent) => {\n            e.stopPropagation();\n            props.handleEnvToggle(props.nodeid, false);\n          }}\n          size=\"lg\"\n        />\n      );\n\n    case \"stopping\":\n      return (\n        <FontAwesomeIcon\n          icon={faToggleOn}\n          className={css(styles.inactiveButton)}\n          size=\"lg\"\n        />\n      );\n\n    default:\n      throw new Error(\"unexpected environment status \" + props.envStatus);\n  }\n};\n\n/**\n *\n * @param status\n */\nconst getNavEntryStyle = (status: string) => {\n  switch (status) {\n    case \"passed\":\n      return styles.navEntryPassed;\n\n    case \"failed\":\n      return styles.navEntryFailed;\n\n    default:\n      return styles.navEntryDefault;\n  }\n}\n\nconst styles = StyleSheet.create({\n  buttonsContainer: {\n    width: \"3em\"\n  },\n  navColumn: {\n    height: \"100%\",\n    width: COLWIDTH,\n    position: \"fixed\",\n    \"z-index\": 1,\n    \"top\": 0,\n    \"left\": 0,\n    \"overflow-x\": \"hidden\",\n    padding: \"1px\",\n    background: LIGHT_GREY,\n  },\n  navLabel: {\n    \"text-overflow\": \"ellipsis\",\n    \"white-space\": \"nowrap\",\n    fontSize: \"small\",\n    \"max-width\": \"80%\",\n  },\n  runButton: {\n    cursor: 'pointer',\n    color: 'black',\n    'padding-left': '3px',\n    'padding-right': '3px',\n    transition: 'color 0.3s ease-out 0s',\n    ':hover': {\n      color: LIGHT_GREY,\n    }\n  },\n  inactiveButton: {\n    color: LIGHT_GREY,\n    'padding-left': '3px',\n    'padding-right': '3px',\n  },\n  navEntryPassed: { background: \"#c0ffbf\" },\n  navEntryFailed: { background: \"#ff7a7a\" },\n  navEntryDefault: { background: MEDIUM_GREY },\n  navEntryCommon: {\n    display: \"flex\",\n    \"justify-content\": \"space-between\",\n    \"align-items\": \"center\",\n  }\n});\n","/**\n * Contains InfoPane and NavBreadcrumbs components which make up the main\n * centre display pane.\n */\n\nimport React from 'react';\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faHome,\n  faCheckCircle,\n  faTimesCircle,\n} from '@fortawesome/free-solid-svg-icons';\nimport { Link } from \"react-router-dom\";\n\nimport { LeafNode, MEDIUM_GREY } from \"./Common\";\nimport { css, StyleSheet } from 'aphrodite';\n\ninterface InfoPaneProps {\n  selectedLeaf: LeafNode | null,\n}\n\n/**\n * InfoPane component: renders information on the currently selected testcase\n * (if any)\n * @param props Component props\n */\nexport const InfoPane = (props: InfoPaneProps) => {\n  if (!props.selectedLeaf) {\n    return <Message message=\"Please select a test.\" />;\n  }\n\n  return (\n    <>\n      <div>\n        <span className={css(styles.title)}>{props.selectedLeaf.nodeid}</span>\n        <span className={css(styles.statusIcon)}>\n          {getStatusIcon(props.selectedLeaf.status)}\n        </span>\n      </div>\n      <pre className={css(styles.longrepr)}>{props.selectedLeaf.longrepr}</pre>\n    </>\n  )\n}\n\ninterface MessageProps { message: string }\n\nexport const Message = (props: MessageProps) => (\n  <h1 className={css(styles.message)}>{props.message}</h1>\n);\n\n/**\n * Return an icon for the given test node status.\n * @param status Node status\n */\nconst getStatusIcon = (status: string) => {\n  switch (status) {\n    case \"passed\":\n      return (\n        <FontAwesomeIcon icon={faCheckCircle} color=\"green\" size=\"4x\" />\n      );\n\n    case \"failed\":\n      return (\n        <FontAwesomeIcon icon={faTimesCircle} color=\"red\" size=\"4x\" />\n      );\n\n    default:\n      return null;\n  }\n};\n\ninterface NavBreadcrumbsProps {\n  selection: Array<string>\n}\n\n/**\n* Navigation breadcrumb menu, used to show the current position in the test\n* tree and to navigate back up to any parent branch node.\n* @param props Render props\n*/\nexport const NavBreadcrumbs = (props: NavBreadcrumbsProps) => {\n  const numSelected = props.selection.length;\n\n  if (!numSelected) {\n    return (\n      <Breadcrumb>\n        <BreadcrumbItem key=\"home\">\n          <FontAwesomeIcon icon={faHome} />\n        </BreadcrumbItem>\n      </Breadcrumb>\n    );\n  }\n\n  const currSelected = props.selection[numSelected - 1];\n  const restSelected = props.selection.slice(0, numSelected - 1);\n\n  return (\n    <Breadcrumb>\n      <BreadcrumbItem key=\"home\">\n        <Link to=\"/\">\n          <FontAwesomeIcon icon={faHome} />\n        </Link>\n      </BreadcrumbItem>\n      {\n        restSelected.map(\n          (short_id: string, index: number) => (\n            <BreadcrumbItem key={short_id}>\n              <Link\n                to={\n                  \"/\" +\n                  props.selection\n                    .slice(0, index + 1)\n                    .map(encodeURIComponent)\n                    .join(\"/\")\n                }\n              >\n                {short_id}\n              </Link>\n            </BreadcrumbItem>\n          )\n        )\n      }\n      <BreadcrumbItem>{currSelected}</BreadcrumbItem>\n    </Breadcrumb>\n  );\n};\n\nconst styles = StyleSheet.create({\n  title: {\n    fontSize: \"large\",\n    \"font-weight\": \"bold\",\n    //\"width\": \"80%\",\n    //display: \"inline-block\",\n    \"text-overflow\": \"ellipsis\",\n    \"white-space\": \"nowrap\",\n    \"padding\": \"10px\",\n  },\n  statusIcon: {\n    \"float\": \"right\"\n  },\n  longrepr: {\n    \"padding\": \"10px\",\n  },\n  message: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    textAlign: 'center',\n    minHeight: '80vh',\n    color: MEDIUM_GREY,\n  }\n});","import React from 'react';\nimport axios from 'axios';\nimport io from 'socket.io-client';\nimport {\n  HashRouter as Router,\n  Route,\n  useLocation,\n} from \"react-router-dom\";\nimport { StyleSheet, css } from \"aphrodite\";\n\nimport { COLWIDTH, BranchNode, LeafNode } from \"./Common\";\nimport { NavColumn } from \"./NavColumn\";\nimport { NavBreadcrumbs, InfoPane, Message } from \"./CentrePane\";\n\n/**\n * Top level App component.\n */\nconst App = () => {\n  return (\n    <Router>\n      <Route path=\"/\"\n        render={\n          ({ location }) => {\n            return <TestRunner url={location.pathname} />;\n          }\n        }\n      />\n    </Router>\n  );\n};\n\ninterface TestRunnerProps {\n  url: string | null,\n}\n\ninterface TestRunnerState {\n  resultTree: BranchNode | null,\n  loading: boolean,\n  socket: SocketIOClient.Socket | null,\n  errorMessage: string | null,\n}\n\nclass TestRunner extends React.Component<TestRunnerProps, TestRunnerState> {\n  constructor(props: TestRunnerProps) {\n    super(props);\n    this.state = {\n      resultTree: null,\n      loading: false,\n      socket: null,\n      errorMessage: null,\n    }\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleTestRun = this.handleTestRun.bind(this);\n    this.handleEnvToggle = this.handleEnvToggle.bind(this);\n  }\n\n  /**\n   * When the component mounts, we initiate the websocket connection and\n   * make an API call to get the result tree.\n   */\n  componentDidMount() {\n    const socket = io();\n    this.setState({ loading: true, socket: socket }, () => {\n      socket.on('update', this.handleUpdate);\n      this.getResultTree();\n    });\n  }\n\n  /**\n   * Make an API call to get the result tree data. Called at start of day when\n   * this component mounts, then further updates are handled by the websocket\n   * connection.\n   */\n  getResultTree() {\n    axios.get(\"/api/v1/result-tree\").then(response => {\n      this.setState({ resultTree: response.data, loading: false });\n    }).catch((reason: any) => {\n      console.log(\"API error: \" + reason);\n      setTimeout(() => this.getResultTree(), 100);\n    });\n  }\n\n  /**\n   * Handle an update event received over a websocket.\n   * @param data Update data received over socket\n   */\n  handleUpdate(tree: BranchNode) {\n    console.log(\"Handling websocket update\");\n    this.setState({ resultTree: tree });\n  }\n\n  /**\n   * Run a test after its run button has been clicked.\n   * @param short_id ID of node to run\n   */\n  handleTestRun(nodeid: string) {\n    if (!this.state.socket) {\n      console.log(\"Socket connection not yet established\");\n      return;\n    }\n    this.state.socket.emit(\"run test\", nodeid);\n  }\n\n  /**\n   * Run a test after its run button has been clicked.\n   * @param short_id ID of node to run\n   */\n  handleEnvToggle(nodeid: string, start: boolean) {\n    if (!this.state.socket) {\n      console.log(\"Socket connection not yet established\");\n      return;\n    }\n    if (start) {\n      this.state.socket.emit(\"start env\", nodeid);\n    } else {\n      this.state.socket.emit(\"stop env\", nodeid);\n    }\n  }\n\n  /**\n   * Render the test runner UI. Currently this component acts as the stateful\n   * store and hands off rendering logic to a separate stateless component.\n   */\n  render() {\n    const selection = parseSelection(this.props.url);\n\n    if (this.state.loading) {\n      return <MessageDisplay message=\"Loading...\" selection={selection} />;\n    }\n\n    if (this.state.errorMessage) {\n      return (\n        <MessageDisplay\n          message={this.state.errorMessage}\n          selection={selection}\n        />\n      );\n    }\n\n    try {\n      const { childBranches, childLeaves } = getCurrSelection(\n        selection,\n        this.state.resultTree,\n      );\n\n      return (\n        <TestRunnerDisplay\n          childBranches={childBranches}\n          childLeaves={childLeaves}\n          selection={selection}\n          handleTestRun={this.handleTestRun}\n          handleEnvToggle={this.handleEnvToggle}\n        />\n      );\n    } catch (error) {\n      if (error instanceof SelectionNotFound) {\n        return <MessageDisplay message=\"404 Page Not Found\" selection={selection} />;\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * Parse the current URL path (excluding query parameters) and return the\n * short_ids of the currently selected branches.\n * @param url URL path string\n */\nconst parseSelection = (url: string | null): Array<string> => {\n  if (!url) {\n    return [];\n  }\n\n  const trimmedPath = url.replace(/^\\/+|\\/+$/g, '');\n  if (trimmedPath.length === 0) {\n    return [];\n  }\n  const pathElements = trimmedPath.split(\"/\");\n  return pathElements.map(decodeURIComponent);\n};\n\ninterface TestRunnerDisplayProps {\n  childBranches: { [key: string]: BranchNode },\n  childLeaves: { [key: string]: LeafNode },\n  selection: Array<string>,\n  handleTestRun: (short_id: string) => void,\n  handleEnvToggle: (nodeid: string, start: boolean) => void,\n}\n\n/**\n * Render the navigation column, top breadcrumb menu and the central information\n * pane together.\n * @param props render properties\n */\nconst TestRunnerDisplay = (props: TestRunnerDisplayProps) => {\n  const query = useQuery();\n  const selectedLeafID = query.get(\"selectedLeaf\");\n  const selectedLeaf = selectedLeafID ? props.childLeaves[selectedLeafID] : null;\n\n  return (\n    <div>\n      <NavColumn\n        childBranches={props.childBranches}\n        childLeaves={props.childLeaves}\n        selectedLeafID={selectedLeafID}\n        selection={props.selection}\n        handleTestRun={props.handleTestRun}\n        handleEnvToggle={props.handleEnvToggle}\n      />\n      <div className={css(styles.centrePane)}>\n        <NavBreadcrumbs selection={props.selection} />\n        <InfoPane selectedLeaf={selectedLeaf} />\n      </div>\n    </div>\n  );\n};\n\ninterface MessageDisplayProps {\n  message: string,\n  selection: Array<string>,\n}\n\n/**\n * Display a message.\n */\nconst MessageDisplay = (props: MessageDisplayProps) => (\n  <div>\n    <NavColumn\n      childBranches={{}}\n      childLeaves={{}}\n      selectedLeafID={null}\n      selection={[]}\n      handleTestRun={(nodeid: string) => undefined}\n      handleEnvToggle={(nodeid: string, start: boolean) => undefined}\n    />\n    <div className={css(styles.centrePane)}>\n      <NavBreadcrumbs selection={props.selection} />\n      <Message message={props.message} />\n    </div>\n  </div>\n);\n\n/**\n * Modified react hook to parse the current query parameters in the URL. These\n * are expected in the form \"?x=y\".\n */\nconst useQuery = () => new URLSearchParams(useLocation().search);\n\n/**\n * Get the currently selected branch node, or null if the result tree is not yet\n * loaded.\n * @param state App state\n */\nconst getCurrSelection = (\n  selection: Array<string>, resultTree: BranchNode | null\n): {\n  childBranches: { [key: string]: BranchNode },\n  childLeaves: { [key: string]: LeafNode },\n} => {\n  if (!resultTree) {\n    return { childBranches: {}, childLeaves: {} };\n  }\n  if (selection.length === 0) {\n    return {\n      childBranches: { [resultTree.short_id]: resultTree },\n      childLeaves: {},\n    };\n  }\n\n  const selectedBranch = selection.slice(1).reduce(\n    (node: BranchNode | undefined, selection: string) => (\n      node?.child_branches[selection]\n    ),\n    resultTree,\n  );\n  if (selectedBranch) {\n    return {\n      childBranches: selectedBranch.child_branches,\n      childLeaves: selectedBranch.child_leaves\n    };\n  } else {\n    throw new SelectionNotFound(\"Not found\", selection);\n  }\n};\n\nconst styles = StyleSheet.create({\n  centrePane: {\n    \"margin-left\": COLWIDTH,\n    padding: \"10px 10px\",\n  },\n});\n\nclass SelectionNotFound extends Error {\n  public selection: Array<string>\n\n  constructor(message: string, selection: Array<string>) {\n    super(message);\n    this.selection = selection;\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}