import logging
from datetime import datetime
from typing import Optional, List, Dict, Any

import pytz
from vortex.rpc.RPC import vortexRPC

from peek_plugin_base.PeekVortexUtil import peekServerName, peekAgentName
from peek_abstract_chunked_data_loader._private.PluginNames import abstracDataLoaderFilt
from peek_abstract_chunked_data_loader._private.server.controller.MainController import \
    MainController
from peek_abstract_chunked_data_loader._private.storage.AppServerSettingsTuple import \
    AppServerSettingsTuple
from peek_abstract_chunked_data_loader._private.storage.CustomAttrTuple import \
    CustomAttrTuple
from peek_abstract_chunked_data_loader._private.storage.CustomHeaderTuple import \
    CustomHeaderTuple
from peek_abstract_chunked_data_loader._private.storage.Setting import globalSetting, \
    globalProperties

logger = logging.getLogger(__name__)


class RpcForAgent:
    def __init__(self, mainController: MainController, dbSessionCreator):
        self._mainController = mainController
        self._dbSessionCreator = dbSessionCreator

    def makeHandlers(self):
        """ Make Handlers

        In this method we start all the RPC handlers
        start() returns an instance of it's self so we can simply yield the result
        of the start method.

        """

        yield self.updateLoaderStatus.start(funcSelf=self)
        yield self.getAppServerSettings.start(funcSelf=self)
        yield self.getLoaderSettings.start(funcSelf=self)
        yield self.getCustomAttributes.start(funcSelf=self)
        yield self.getCustomHeaders.start(funcSelf=self)
        logger.debug("RPCs started")

    # -------------
    @vortexRPC(peekServerName, acceptOnlyFromVortex=peekAgentName,
               timeoutSeconds=30,
               additionalFilt=abstracDataLoaderFilt, deferToThread=True)
    def updateLoaderStatus(self, total: int,
                           queued: int, processing: int):
        """ Update Page Loader Status

        Tell the server of the latest status of the loader

        """
        self._mainController.loaderStatus.total = total
        self._mainController.loaderStatus.queued = queued
        self._mainController.loaderStatus.processing = processing
        self._mainController.loaderStatus.update = datetime.now(pytz.utc)

        self._mainController.notifyOfLoaderStatusUpdate()

    # -------------
    @vortexRPC(peekServerName, acceptOnlyFromVortex=peekAgentName, timeoutSeconds=120,
               additionalFilt=abstracDataLoaderFilt, deferToThread=True)
    def getAppServerSettings(self) -> Optional[AppServerSettingsTuple]:
        """ Get Source Server Setting

        This method is used to load the settings that the agent will connect to the
        server with.

        """
        session = self._dbSessionCreator()
        try:
            all = session.query(AppServerSettingsTuple).all()
            if not all:
                return None

            if len(all) != 1:
                raise Exception("There are more than one AppServerSetting entries")

            session.expunge_all()
            return all[0]

        finally:
            session.close()

    # -------------
    @vortexRPC(peekServerName, acceptOnlyFromVortex=peekAgentName, timeoutSeconds=120,
               additionalFilt=abstracDataLoaderFilt, deferToThread=True)
    def getLoaderSettings(self) -> Dict[str, Any]:
        session = self._dbSessionCreator()
        try:
            setting = globalSetting(session)
            props = {}

            for key in globalProperties:
                props[key] = setting[key]

            return props

        finally:
            session.close()
