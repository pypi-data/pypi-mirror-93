import logging

from peek_plugin_base.server.PluginServerEntryHookABC import PluginServerEntryHookABC
from peek_plugin_base.server.PluginServerStorageEntryHookABC import \
    PluginServerStorageEntryHookABC
from peek_plugin_docdb.server.DocDbApiABC import DocDbApiABC
from peek_abstract_chunked_data_loader._private.storage import DeclarativeBase
from peek_abstract_chunked_data_loader._private.storage.DeclarativeBase import \
    loadStorageTuples
from peek_abstract_chunked_data_loader._private.tuples import loadPrivateTuples
from peek_core_search.server.SearchApiABC import SearchApiABC
from .TupleActionProcessor import makeTupleActionProcessorHandler
from .TupleDataObservable import makeTupleDataObservableHandler
from .admin_backend import makeAdminBackendHandlers
from .agent_handlers.RpcForAgent import RpcForAgent
from .agent_handlers.RpcForAgentImport import RpcForAgentImport
from .controller.MainController import MainController

logger = logging.getLogger(__name__)


class ServerEntryHook(PluginServerEntryHookABC, PluginServerStorageEntryHookABC):
    def __init__(self, *args, **kwargs):
        """" Constructor """
        # Call the base classes constructor
        PluginServerEntryHookABC.__init__(self, *args, **kwargs)

        #: Loaded Objects, This is a list of all objects created when we start
        self._loadedObjects = []

        self._api = None

    def load(self) -> None:
        """ Load

        This will be called when the plugin is loaded, just after the db is migrated.
        Place any custom initialiastion steps here.

        """
        loadStorageTuples()
        loadPrivateTuples()
        logger.debug("Loaded")

    @property
    def dbMetadata(self):
        return DeclarativeBase.metadata

    def start(self):
        """ Start

        This will be called when the plugin is loaded, just after the db is migrated.
        Place any custom initialisation steps here.

        """



        # ----------------
        # Get the other plugin APIs

        searchPluginApi_: SearchApiABC = self.platform.getOtherPluginApi(
            "peek_core_search"
        )

        docDbPluginApi_: DocDbApiABC = self.platform.getOtherPluginApi(
            "peek_plugin_docdb"
        )

        # ----------------
        # Main Controller
        mainController = MainController(dbSessionCreator=self.dbSessionCreator)
        self._loadedObjects.append(mainController)

        # ----------------
        # Tuple Observable
        tupleObserver = makeTupleDataObservableHandler(
            self.dbSessionCreator, mainController
        )
        self._loadedObjects.append(tupleObserver)

        mainController.setTupleObservable(tupleObserver)

        # ----------------
        # Admin Handler
        self._loadedObjects.extend(makeAdminBackendHandlers(
            self.dbSessionCreator, tupleObserver)
        )

        # ----------------
        # Setup the Action Processor
        self._loadedObjects.append(makeTupleActionProcessorHandler(mainController))

        # ----------------
        # Initialise the RpcForAgent
        self._loadedObjects.extend(RpcForAgent(mainController, self.dbSessionCreator)
                                   .makeHandlers())

        # ----------------
        # Initialise the RpcForAgentImport
        self._loadedObjects.extend(
            RpcForAgentImport(searchPluginApi_, docDbPluginApi_, self.dbSessionCreator)
                .makeHandlers()
        )

        logger.debug("Started")

    def stop(self):
        """ Stop

        This method is called by the platform to tell the peek app to shutdown and stop
        everything it's doing
        """
        # Shutdown and dereference all objects we constructed when we started
        while self._loadedObjects:
            self._loadedObjects.pop().shutdown()

        self._api = None

        logger.debug("Stopped")

    def unload(self):
        """Unload

        This method is called after stop is called, to unload any last resources
        before the PLUGIN is unlinked from the platform

        """
        logger.debug("Unloaded")

    @property
    def publishedServerApi(self) -> object:
        """ Published Server API
    
        :return  class that implements the API that can be used by other Plugins on this
        platform service.
        """
        return self._api
