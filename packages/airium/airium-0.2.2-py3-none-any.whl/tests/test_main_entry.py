import pytest

from airium.__main__ import entry_main, make_airium_code

version = '0.2.2'


@pytest.mark.parametrize('arg', ['-v', '--version'])
def test_version_check(capsys, arg):
    with pytest.raises(SystemExit) as e:
        entry_main(arg)
    assert e.value.code == 0

    captured = capsys.readouterr()
    assert f"airium {version}\n" in captured.out
    assert not captured.err


@pytest.mark.parametrize('arg', [object(), 3.14159, '', None, 'bad string'])
def test_bad_arg_type(capsys, arg):
    with pytest.raises(SystemExit) as e:
        make_airium_code(arg)
    captured = capsys.readouterr()
    assert captured.out == ''
    assert 'Unable to get HTML from' in captured.err
    assert e.value.code == 31


def test_get_bad_content_type(capsys):
    with pytest.raises(SystemExit) as e:
        make_airium_code("http://ip.jsontest.com/")

    captured = capsys.readouterr()
    assert captured.out == ''
    assert 'Bad content type returned from http://ip.jsontest.com/: application/json.' in captured.err
    assert e.value.code == 31


def test_translate_local_file(capsys, local_file):
    file_ = local_file('documents', 'hello_world.html')

    entry_main(file_.path)
    captured = capsys.readouterr()
    assert captured.err == ''
    assert captured.out == '''\
#!/usr/bin/env python
# File generated by reverse AIRIUM translator (version 0.2.2).
# Any change will be overridden on next run.
# flake8: noqa E501 (line too long)

from airium import Airium

a = Airium()

a('<!DOCTYPE html>')
with a.html(lang='pl'):
    with a.head():
        a.meta(charset='utf-8')
        a.title(_t='Airium example')
    with a.body():
        a.h3(klass='main_header', id='id23409231', _t='Hello World.')

'''


def test_translate_remote_file(capsys):
    assert entry_main("http://www.example.com/") is None

    captured = capsys.readouterr()
    assert captured.err == ''
    assert "#!/usr/bin/env python\n# File generated by reverse AIRIUM translator" in captured.out
