import pytest

from airium import Airium, from_html_to_airium


def test_table_translation():
    table_str = '''\
    <table id="table_372">
      <tr class="header_row">
        <th>no.</th>
        <th>Firstname</th>
        <th>Lastname</th>
      </tr>
      <tr>
        <td>1.</td>
        <td id="jbl">Jill</td>
        <td>Smith</td>
      </tr>
      <tr>
        <td>2.</td>
        <td id="rmd">Roland</td>
        <td>Mendel</td>
      </tr>
    </table>'''

    code = from_html_to_airium(table_str)

    assert code == '''\
#!/usr/bin/env python
# File generated by reverse AIRIUM translator (version 0.2.2).
# Any change will be overridden on next run.
# flake8: noqa E501 (line too long)

from airium import Airium

a = Airium()

with a.table(id='table_372'):
    with a.tr(klass='header_row'):
        a.th(_t='no.')
        a.th(_t='Firstname')
        a.th(_t='Lastname')
    with a.tr():
        a.td(_t='1.')
        a.td(id='jbl', _t='Jill')
        a.td(_t='Smith')
    with a.tr():
        a.td(_t='2.')
        a.td(id='rmd', _t='Roland')
        a.td(_t='Mendel')
'''


def test_plan_pre_translation():
    table_str = '''\
    <pre>
    Please keep the newlines
         and whitespaces
      
    </pre>


'''
    code = from_html_to_airium(table_str)

    assert code == '''\
#!/usr/bin/env python
# File generated by reverse AIRIUM translator (version 0.2.2).
# Any change will be overridden on next run.
# flake8: noqa E501 (line too long)

from airium import Airium

a = Airium()

a.pre(_t='\\n    Please keep the newlines\\n         and whitespaces\\n      \\n    ')
'''


def test_pre_translation_with_nested_html():
    table_str = '''\
    <div id="table_372">
      <pre>
        <div>
        
    Please <span>keep</span> the newlines
         and whitespaces
      
        </div>
      </pre>
      </div>'''

    code = from_html_to_airium(table_str)

    assert code == r'''#!/usr/bin/env python
# File generated by reverse AIRIUM translator (version 0.2.2).
# Any change will be overridden on next run.
# flake8: noqa E501 (line too long)

from airium import Airium

a = Airium()

with a.div(id='table_372'):
    a.pre(_t=
        '\n        '
        '<div>\n        \n    Please <span>keep</span> the newlines\n         and whitespaces\n      \n        </div>'
        '\n      ')
'''


@pytest.mark.parametrize('tested_file_name', [
    'hello_world.html',
    'w3_architects_example_synth.html',
    'w3_architects_example_original.html',
    'google.com.html',
    'duckduckgo.com.html',
    'otomoto.pl.html',
])
def test_tr(local_file, tested_file_name):
    html_file = local_file('documents', tested_file_name)
    airium_notation = from_html_to_airium(html_file.contents())
    py_ref = html_file.add_suffix('.py')
    if not 'store':
        py_ref.store(airium_notation)
    assert airium_notation == py_ref.contents()


def test_translate_arguments():
    html = """\
<!DOCTYPE html>
<html>
    <!-- that-comment -->
    <body class="don't class the body">
        The text
        <b>is
        mixed</b>
        with <span><span>new</span> comments</span>
        and some
        <!-- [intext comment] -->
        
        whitespaces.
        
        <table id='#that' aria-expanded="false">
            <tr has="">
                <td>One</td>
                <td>Two</td>
            </tr>
        </table>
        <!-- after table comment -->
    </body>
</html>
"""

    airium_notation = from_html_to_airium(html)
    assert airium_notation == """\
#!/usr/bin/env python
# File generated by reverse AIRIUM translator (version 0.2.2).
# Any change will be overridden on next run.
# flake8: noqa E501 (line too long)

from airium import Airium

a = Airium()

a('<!DOCTYPE html>')
with a.html():
    a('<!-- that-comment -->')
    with a.body(klass="don't class the body"):
        a('The text')
        a.b(_t='is mixed')
        a('with')
        with a.span():
            a.span(_t='new')
            a('comments')
        a('and some')
        a('<!-- [intext comment] -->')
        a('whitespaces.')
        with a.table(id='#that', **{'aria-expanded': 'false'}):
            with a.tr(has=''):
                a.td(_t='One')
                a.td(_t='Two')
        a('<!-- after table comment -->')
"""

    assert back_html(html) == """\
<!DOCTYPE html>
<html>
  <!-- that-comment -->
  <body class="don't class the body">
    The text
    <b>is mixed</b>
    with
    <span>
      <span>new</span>
      comments
    </span>
    and some
    <!-- [intext comment] -->
    whitespaces.
    <table id="#that" aria-expanded="false">
      <tr has="">
        <td>One</td>
        <td>Two</td>
      </tr>
    </table>
    <!-- after table comment -->
  </body>
</html>"""

    # double-check:
    assert from_html_to_airium(back_html(html)) == airium_notation


def back_html(html: str) -> str:
    airium_str = from_html_to_airium(html, include_module_head=False)
    a = Airium()
    exec(airium_str, locals())
    return str(a)
