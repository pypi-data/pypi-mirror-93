#
# Copyright (C) 2014-2020 S[&]T, The Netherlands.
#

import datetime
import os
import re
import tarfile

from muninn.struct import Struct
from muninn.util import TemporaryDirectory

ARCHIVE_PATH='{archive_path}'

def compress(source_filepath, target_filepath):
    # While using Python 2.6 we need to explicitly use the basename when creating the tgz
    # Otherwise the full path gets added in the gzip file (which gives problems on Windows)
    tgzfile = open(target_filepath, 'wb')
    tar = tarfile.open(os.path.basename(target_filepath), 'w:gz', tgzfile)
    rootlen = len(os.path.dirname(source_filepath)) + 1
    for base, dirs, files in os.walk(source_filepath):
        tar.add(base, base[rootlen:], recursive=False)
        for _file in files:
            fn = os.path.join(base, _file)
            tar.add(fn, fn[rootlen:], recursive=False)
    tar.close()


class MyTypePlugin(object):
    def __init__(self):
        self.product_type = 'MY_TYPE'
        self.description = ''

        self.is_multi_part_product = False
        self.is_auxiliary_product = False

        self.use_hash = True
        self.use_enclosing_directory = {use_enclosing_directory}

    def enclosing_directory(self, properties):
        assert isinstance(properties, Struct)

        return properties.core.product_name

    def archive_path(self, properties):
        assert isinstance(properties, Struct)

        return ARCHIVE_PATH

    def identify(self, paths):
        assert isinstance(paths, list)

        return True

    def analyze(self, paths):
        assert isinstance(paths, list)

        path = paths[0]

        result = Struct()
        core_properties = result.core = Struct()

        core_properties.product_type = self.product_type

        if self.use_enclosing_directory and len(paths) > 1:
            core_properties.product_name = os.path.basename(os.path.dirname(path))
        else:
            core_properties.product_name = os.path.basename(path)

        return result

    def export_tgz(self, archive, product, target_path):
        product_filepath = archive.product_path(product)

        target_filepath = os.path.join(os.path.abspath(target_path), product.core.archive_path, product.core.physical_name + ".tgz")
        if not os.path.exists(os.path.dirname(target_filepath)):
            os.makedirs(os.path.dirname(target_filepath))

        with TemporaryDirectory(prefix=".calc_hash-", suffix="-%s" % product.core.uuid.hex) as tmp_path:
            tmp_path = os.path.join(tmp_path, os.path.basename(product_filepath))
            os.makedirs(tmp_path)

            archive.retrieve_by_uuid(product.core.uuid, tmp_path) # TODO symlinks currently don't work with compress?

            compress(tmp_path, target_filepath)

        return target_filepath

_plugin = MyTypePlugin()

_product_type_plugins = \
{
    _plugin.product_type: _plugin,
}


def product_types():
    return _product_type_plugins.keys()


def product_type_plugin(product_type):
    return _product_type_plugins[product_type]
