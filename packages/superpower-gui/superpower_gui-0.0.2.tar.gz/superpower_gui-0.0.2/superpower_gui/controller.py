# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/controller.ipynb (unless otherwise specified).

__all__ = ['Selection', 'Controller']

# Cell
from IPython.display import display, Javascript
import json
import traitlets
from traitlets import HasTraits, Int, Unicode, observe
import ipywidgets as ipyw
import copy

# Cell
from .widgets import IntSlider, Button, Dropdown, FloatText
from .widget_containers import Tab, SelectionVBox, VBox, Box, Accordion
from .views.tabs import LandingTab, EstimatesTab, ResultsTab, SettingsTab
from .log import HANDLERS
from .models.chisq import ChiSqModel
from .views.chisq import ChiSqLanding, ChiSq
from .models.corr import *
from .views.corr import *
from .results import ResultsModel, Results
from .settings import SettingsModel, Settings
from .rpy import R_CONSOLE

# Cell
from collections import namedtuple
Selection = namedtuple('Selection', ['label', 'Model', 'Landing', 'Estimates'])

# Cell
class Controller(traitlets.HasTraits):

    modelName = Unicode()
    corrModelName = Unicode()

    def __init__(self):

        ''' log handlers'''
        self.logger = HANDLERS.getLogger(__name__)
        self.logger.info('Autosave off.')
        display(Javascript('Jupyter.notebook.set_autosave_interval(0);'))
        self.handlerWidget = HANDLERS.handlers['widget']
        HANDLERS.loadAssets()

        ''' initialize '''
        self.modelName = 'chisq'
        self.corrModelName = 'cramerv'

        ''' create views and models '''
        self.create_global_widgets()
        self.define_box_selections()
        self.initialize_mvcs()
        self.view = self.tab_based_view()
        self.add_observations()


    def _ipython_display_(self):
        display(self.view)

    def create_global_widgets(self):

        ''' landing '''
        self.corrDropdown = Dropdown(description='Coefficient: ',
            layout=ipyw.Layout(max_width='350px',description_width='100px'))
        self.corrSelection = SelectionVBox()
        self.corrBox = VBox(children=(self.corrDropdown, self.corrSelection))

        self.landingSelection = SelectionVBox()
        self.dropdownOptions = [('Correlation', 'corr')] # populated in self.initialize_view_and_models
        self.dropdown = Dropdown( options=self.dropdownOptions, description='Model Class: ',
                layout=ipyw.Layout(max_width='300px', description_width='80px'))

        self.okayButton = Button(description='Okay', button_style='success')

        ''' estimates '''
        self.estimatesBox = Box()
        self.runButton = Button(description='Run', button_style='success')
        self.restartButton = Button(description='Restart')

        ''' results '''
        self.repopulateLanding = Button(description='Repopulate Model Tab')
        self.repopulateEstimates = Button(description='Repopulate Estimates Tab')

        ''' settings '''
        self.logAccordion = Accordion(children=(self.handlerWidget, ))

    def define_box_selections(self):

        self.selections = {}
        self.selections['chisq'] = Selection('Chi Squared', ChiSqModel, ChiSqLanding, ChiSq)

        self.corrSelections = {}
        self.corrSelections['tetra'] = Selection('Tetrachoric', CorrTetraModel, CorrTetraLanding, CorrTetra)
        self.corrSelections['cramerv'] = Selection("Cramer's V", CorrCramerVModel, CorrCramerVLanding, CorrCramerV)
        self.corrSelections['pears'] = Selection("Pearson's Correlation Coefficient", CorrPearsonModel, CorrPearsonLanding, CorrPearson)
        self.corrSelections['spear'] = Selection("Spearman's Rho", CorrSpearmansRhoModel, CorrSpearmansRhoLanding, CorrSpearmansRho)
        self.corrSelections['point'] = Selection("Point Biserial", CorrPBiModel, CorrPBiLanding, CorrPBi)

    def initialize_mvcs(self):

        ''' selectable boxes in landing '''
        self.corrModels = {}
        self.CorrEstimates = {}
        for name, selection in self.corrSelections.items():
            label, Model, Landing, Estimates = selection
            model = Model()
            self.corrModels[name] = model
            self.corrDropdown.options += ((label, name), )
            self.corrSelection.add_child(Landing(model), name)
            self.CorrEstimates[name] = Estimates

        self.models = {}
        self.Estimates = {}
        for name, selection in self.selections.items():
            label, Model, Landing, Estimates = selection
            model = Model()
            self.models[name] = model
            self.dropdown.options += ((label, name), )
            self.landingSelection.add_child(Landing(model), name)
            self.Estimates[name] = Estimates
        self.landingSelection.add_child(self.corrBox, 'corr')
        self.on_corrModelName_change({'new': 'cramerv'})

        '''other mvcs'''
        self.resultsModel = ResultsModel()
        self.settingsModel = SettingsModel()

        self.resultsView = Results(self.resultsModel)
        self.settingsView = Settings(self.settingsModel)

    def tab_based_view(self):
        landingTab = LandingTab(self.dropdown, self.landingSelection, self.okayButton, name='Model')
        estimatesTab = EstimatesTab(self.estimatesBox, self.runButton, name='Estimates')
        resultsTab = ResultsTab(self.restartButton, self.repopulateLanding, self.repopulateEstimates, self.resultsView, name='Results')
        settingsTab = SettingsTab(self.settingsView, self.logAccordion, name='Settings')
        return Tab(children=(landingTab, estimatesTab, resultsTab, settingsTab))

    def add_observations(self):
        self.okayButton.on_click(self.on_okayButton_click)
        self.runButton.on_click(self.on_runButton_click)
        self.restartButton.on_click(self.on_restartButton_click)
        self.repopulateLanding.on_click(self.on_repopulateLanding_click)
        self.repopulateEstimates.on_click(self.on_repopulateEstimates_click)

        traitlets.link((self, 'modelName'), (self.dropdown, 'value'))
        traitlets.link((self.landingSelection, 'selected_name'), (self, 'modelName'))
        traitlets.link((self, 'corrModelName'), (self.corrDropdown, 'value'))
        traitlets.link((self, 'corrModelName'), (self.corrSelection, 'selected_name'))
        self.observe(self.on_corrModelName_change, names='corrModelName')

    def on_corrModelName_change(self, change):
        self.models['corr'] = self.corrModels[change['new']]
        self.Estimates['corr'] = self.CorrEstimates[change['new']]

    ''' on button click'''
    def on_okayButton_click(self, button):
        model = copy.deepcopy(self.models[self.modelName]) # so the landing view doesn't update the old estimates view
        model.setEstimates()
        self.estimates = self.Estimates[self.modelName](model, name=self.modelName)
        self.estimatesBox.children = (self.estimates, )
        self.view.selected_name = 'Estimates'

    def on_runButton_click(self, button):
        self.update_model_with_settings()
        result = self.estimates.run()
        if result:
            self.resultsView.addResult(result)
            self.view.selected_name='Results'

    def on_restartButton_click(self, button):
        if self.modelName == 'corr':
            self.corrSelection[self.corrModelName].setLanding()
        else:
            self.landingSelection[self.modelName].setLanding()
        self.view.selected_name= 'Model'

    def on_repopulateLanding_click(self, button):
        self.view.selected_name = 'Model'

    def on_repopulateEstimates_click(self, button):
        self.view.selected_name = 'Estimates'

    def update_model_with_settings(self):
        if self.modelName in ('chisq','tetra', 'cramerv'):
            self.estimates.model.pVal = self.settingsModel.alpha
            self.estimates.model.tail = self.settingsModel.tail
        else:
            self.estimates.model.setTraits(**self.settingsModel.getTraits())