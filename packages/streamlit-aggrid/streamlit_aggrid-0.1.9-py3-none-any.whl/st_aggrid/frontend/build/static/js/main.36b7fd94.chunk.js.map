{"version":3,"sources":["AgGrid.tsx","index.tsx"],"names":["AgGrid","props","agRef","dtypes","columnTypes","editable","valueFormatter","params","value","toFixed","filter","moment","utc","format","render","gridOptions","Object","assign","parseGridOptions","rowData","parseGridData","className","style","height","args","width","onGridReady","onCellValueChanged","returnGridValue","onSelectionChanged","ref","React","createRef","JSON","parse","this","event","gridApi","api","sizeColumnsToFit","rowModel","_originalGetType","getType","_fakeGetType","Constants","ROW_MODEL_TYPE_SERVER_SIDE","current","return_value","csvData","getDataAsCsv","allColumns","selectedRows","getSelectedRows","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"2RAkBMA,E,kDAKJ,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IAJAC,WAGgB,IAFhBC,YAEgB,IAwBhBC,YAAmB,CACzBA,YAAa,CACX,kBAAqB,CAAEC,UAAU,GACjC,eAAkB,CAAEA,UAAU,GAC9B,8BAAiC,CAC/BC,eAAgB,SAACC,GAAD,OAAiBA,EAAOC,MAAMC,QAAQ,KAExD,wBAA2B,CACzBH,eAAgB,SAACC,GAAD,OAAiC,IAAfA,EAAOC,OAAaC,QAAQ,GAAK,MAErE,qBAAwB,CACtBH,eAAgB,SAACC,GAAD,OAAiBA,EAAOC,MAAMC,QAAQ,KAExD,gBAAmB,CACjBC,OAAQ,qBACRJ,eAAgB,SAACC,GAAD,OAAiBI,IAAOC,IAAIL,EAAOC,OAAOK,OAAO,gBAEnE,oBAAuB,CACrBP,eAAgB,SAACC,GAAD,OAAiBI,IAAOC,IAAIL,EAAOC,OAAOK,OAAO,gBA1C/C,EAgEjBC,OAAS,WAEd,IAAMC,EAAcC,OAAOC,OAAO,GAAI,EAAKb,YAAa,EAAKc,mBAAoB,CAAEC,QAAS,EAAKC,kBAEjG,OACE,qBAAKC,UAAU,kBAAkBC,MAAO,CAAEC,OAAQ,EAAKtB,MAAMuB,KAAX,OAA2BC,MAAO,QAApF,SACE,cAAC,cAAD,CACEC,YAAa,EAAKA,YAClBC,mBAAoB,kBAAM,EAAKC,mBAC/BC,mBAAoB,kBAAM,EAAKD,mBAC/Bb,YAAaA,EACbe,IAAK,EAAK5B,WAzEhB,EAAKA,MAAQ6B,IAAMC,YACnB,EAAK7B,OAAS,EAAKF,MAAMuB,KAAX,OAHQ,E,4DAOtB,OAAOS,KAAKC,MAAMC,KAAKlC,MAAMuB,KAAX,Y,yCAIlB,OAAOW,KAAKlC,MAAMuB,KAAX,c,kCAGWY,GAClB,IAAIC,EAAUD,EAAME,IACpBD,EAAQE,mBAGR,IAAMC,EAAWH,EAAQG,SACzBA,EAASC,iBAAmBD,EAASE,QACrCF,EAASG,aAAe,kBAAMC,YAAUC,8B,wCA4BxC,IAAIP,EAAMH,KAAKjC,MAAM4C,QAAQR,IAGvBE,EAAWF,EAAIE,SACrBA,EAASE,QAAUF,EAASG,aAC5B,IAAII,EAAe,CACjB5C,OAAQgC,KAAKhC,OACb6C,QAASV,EAAIW,aAAa,CAAEC,YAAY,IACxCC,aAAcb,EAAIc,mBAGpBC,IAAUC,kBAAkBP,GAC5BP,EAASE,QAAUF,EAASC,qB,GAlEXc,KAoGNC,cAAwBxD,GClHvCyD,IAAS3C,OACP,cAAC,IAAM4C,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.36b7fd94.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection\n} from \"streamlit-component-lib\";\nimport React, { ReactNode } from \"react\"\n\nimport 'ag-grid-enterprise';\nimport { AgGridReact } from 'ag-grid-react';\nimport { Constants } from 'ag-grid-community'\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\n\nimport moment from 'moment'\nimport { throws } from \"assert\";\n\n\nclass AgGrid extends StreamlitComponentBase {\n\n  private agRef: any\n  private dtypes: any\n\n  constructor(props: any) {\n    super(props)\n    this.agRef = React.createRef()\n    this.dtypes = this.props.args['dtypes']\n  }\n\n  private parseGridData() {\n    return JSON.parse(this.props.args['gridData'])\n  }\n\n  private parseGridOptions() {\n    return this.props.args['gridOptions']\n  }\n\n  private onGridReady(event: any) {\n    let gridApi = event.api\n    gridApi.sizeColumnsToFit()\n\n    // Hack to export filtered rows: https://github.com/ag-grid/ag-grid/issues/1499\n    const rowModel = gridApi.rowModel;\n    rowModel._originalGetType = rowModel.getType;\n    rowModel._fakeGetType = () => Constants.ROW_MODEL_TYPE_SERVER_SIDE;\n  }\n\n  private columnTypes: any = {\n    columnTypes: {\n      'nonEditableColumn': { editable: false },\n      'editableColumn': { editable: true },\n      'numericRoundedTwoDigitsColumn': {\n        valueFormatter: (params: any) => params.value.toFixed(2)\n      },\n      'numericPercentageColumn': {\n        valueFormatter: (params: any) => (params.value * 100).toFixed(2) + \"%\"\n      },\n      'numericIntegerColumn': {\n        valueFormatter: (params: any) => params.value.toFixed(0)\n      },\n      'shortDateColumn': {\n        filter: 'agDateColumnFilter',\n        valueFormatter: (params: any) => moment.utc(params.value).format('DD/MM/YYYY'),\n      },\n      'yearMonthDateColumn': {\n        valueFormatter: (params: any) => moment.utc(params.value).format('MMM/YYYY')\n      },\n    }\n\n  }\n\n  private returnGridValue() {\n    var api = this.agRef.current.api\n\n    // Hack to export filtered rows: https://github.com/ag-grid/ag-grid/issues/1499\n    const rowModel = api.rowModel;\n    rowModel.getType = rowModel._fakeGetType;\n    var return_value = {\n      dtypes: this.dtypes,\n      csvData: api.getDataAsCsv({ allColumns: true }),\n      selectedRows: api.getSelectedRows()\n    }\n\n    Streamlit.setComponentValue(return_value)\n    rowModel.getType = rowModel._originalGetType;\n  }\n\n  public render = (): ReactNode => {\n\n    const gridOptions = Object.assign({}, this.columnTypes, this.parseGridOptions(), { rowData: this.parseGridData() })\n\n    return (\n      <div className=\"ag-theme-balham\" style={{ height: this.props.args['height'], width: '100%' }}>\n        <AgGridReact\n          onGridReady={this.onGridReady}\n          onCellValueChanged={() => this.returnGridValue()}\n          onSelectionChanged={() => this.returnGridValue()}\n          gridOptions={gridOptions}\n          ref={this.agRef}\n        >\n        </AgGridReact>\n\n      </div>\n    )\n  }\n\n}\n\n\n\n//import './styles.scss';\n\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(AgGrid)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport AgGrid from \"./AgGrid\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <AgGrid />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}