{"version":3,"sources":["AgGrid.tsx","index.tsx"],"names":["AgGrid","props","frame_dtypes","gridOptions","gridData","api","columnApi","columnFormaters","manual_update_requested","render","Object","assign","rowData","className","style","height","args","width","ManualUpdateButton","manual_update","onClick","e","returnGridValue","onGridReady","onFirstDataRendered","firstDataRendered","JSON","parse","columnTypes","filter","filterParams","comparator","filterValue","cellValue","compareAsc","parseISO","valueFormatter","params","date_formater","value","column","colDef","custom_format_string","number_formater","precision","currency_formater","custom_currency_symbol","this","update_mode","addEventListener","event","set_update_mode","sizeColumnsToFit","autoSizeAllColumns","isoString","formaterString","r","isDate","format","number","currency_symbol","toFixed","toString","return_data","forEachLeafNode","row","push","data","forEachNodeAfterFilter","group","forEachNodeAfterFilterAndSort","return_value","original_dtypes","selectedRows","getSelectedRows","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.525105c0.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection\n} from \"streamlit-component-lib\";\n\nimport React, { ReactNode } from \"react\"\nimport { AgGridReact } from 'ag-grid-react';\nimport { ColumnApi, GridApi } from 'ag-grid-community'\n\nimport 'ag-grid-enterprise'\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\n\nimport { parseISO, compareAsc, isDate } from 'date-fns'\nimport { format } from 'date-fns-tz'\n\n\nclass AgGrid extends StreamlitComponentBase {\n  private frame_dtypes: any\n  private gridOptions: any\n  private gridData: any\n  private api!: GridApi;\n  private columnApi!: ColumnApi\n  private columnFormaters: any\n  private manual_update_requested: boolean\n\n  constructor(props: any) {\n    super(props)\n\n    this.frame_dtypes = props.args['frame_dtypes']\n    this.gridData = JSON.parse(props.args['gridData'])\n    this.gridOptions = props.args['gridOptions']\n\n    this.manual_update_requested = (props.args['update_mode'] === 1)\n\n    this.columnFormaters = {\n      columnTypes: {\n        'dateColumnFilter': {\n          filter: 'agDateColumnFilter',\n          filterParams: {\n            comparator: (filterValue: any, cellValue: string) => compareAsc(parseISO(cellValue), filterValue)\n          }\n        },\n        'numberColumnFilter': {\n          filter: 'agNumberColumnFilter'\n        },\n        'shortDateTimeFormat': {\n          valueFormatter: (params: any) => this.date_formater(params.value, \"dd/MM/yyyy HH:mm\"),\n        },\n        'customDateTimeFormat': {\n          valueFormatter: (params: any) => this.date_formater(params.value, params.column.colDef.custom_format_string),\n        },\n        'customNumericFormat': {\n          valueFormatter: (params: any) => this.number_formater(params.value, params.column.colDef.precision),\n        },\n        'customCurrencyFormat': {\n          valueFormatter: (params: any) => this.currency_formater(params.value, params.column.colDef.custom_currency_symbol),\n        },\n\n\n      }\n    }\n  }\n\n  private set_update_mode() {\n    if (this.manual_update_requested) {\n      return //If manual update is set, no listeners will be added\n    }\n\n    let update_mode = this.props.args['update_mode']\n\n    if ((update_mode & 2) === 2) {\n      this.api.addEventListener('cellValueChanged', (e: any) => this.returnGridValue(e))\n    }\n\n    if ((update_mode & 4) === 4) {\n      this.api.addEventListener('selectionChanged', (e: any) => this.returnGridValue(e))\n    }\n\n    if ((update_mode & 8) === 8) {\n      this.api.addEventListener('filterChanged', (e: any) => this.returnGridValue(e))\n    }\n\n    if ((update_mode & 16) === 16) {\n      this.api.addEventListener('sortChanged', (e: any) => this.returnGridValue(e))\n    }\n  }\n\n  private onGridReady(event: any) {\n    this.api = event.api\n    this.columnApi = event.columnApi\n\n    this.set_update_mode()\n\n  }\n\n  private firstDataRendered(event: any) {\n    if (this.props.args['fit_columns_on_grid_load']) {\n      this.api.sizeColumnsToFit()\n    }\n    else {\n      this.columnApi.autoSizeAllColumns()\n    }\n  }\n\n  private date_formater(isoString: string, formaterString: string): String {\n    let r = isoString\n    if (isDate(isoString)) {\n      r = format(parseISO(isoString), formaterString)\n    }\n    return r\n  }\n\n  private currency_formater(number: number, currency_symbol: string): String {\n    let r = ''\n    if (number) {\n      r = currency_symbol + number.toFixed(2)\n    } else {\n      r = number.toString()\n    }\n    return r\n  }\n\n  private number_formater(number: number, precision: number): String {\n    let r = ''\n    if (number) {\n      r = number.toFixed(precision)\n    } else {\n      r = number.toString()\n    }\n    return r\n  }\n\n  private returnGridValue(e: any) {\n    var return_data: any[] = []\n    let return_mode = this.props.args['data_return_mode']\n\n    switch (return_mode) {\n      case 0: //ALL_DATA\n        this.api.forEachLeafNode((row) => return_data.push(row.data))\n        break;\n\n      case 1: //FILTERED_DATA\n        this.api.forEachNodeAfterFilter((row) => { if (!row.group) { return_data.push(row.data) } })\n        break;\n\n      case 2: //FILTERED_SORTED_DATA\n        this.api.forEachNodeAfterFilterAndSort((row) => { if (!row.group) { return_data.push(row.data) } })\n        break;\n    }\n\n    var return_value = {\n      original_dtypes: this.frame_dtypes,\n      gridData: return_data,\n      selectedRows: this.api.getSelectedRows()\n    }\n\n    Streamlit.setComponentValue(return_value)\n  }\n\n  private ManualUpdateButton(props: any) {\n\n    if (props.manual_update) {\n      return (<button onClick={props.onClick}>Save</button>)\n    }\n    else {\n      return (<span></span>)\n    }\n  }\n\n  public render = (): ReactNode => {\n\n    const gridOptions = Object.assign({}, this.columnFormaters, this.gridOptions, { rowData: this.gridData })\n    return (\n      <div className=\"ag-theme-balham\" style={{ height: this.props.args['height'], width: '100%' }}>\n        <this.ManualUpdateButton manual_update={this.manual_update_requested} onClick={(e: any) => this.returnGridValue(e)} />\n        <AgGridReact\n          onGridReady={(e) => this.onGridReady(e)}\n          onFirstDataRendered={(e) => this.firstDataRendered(e)}\n          gridOptions={gridOptions}\n        >\n        </AgGridReact>\n      </div >\n    )\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(AgGrid)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport AgGrid from \"./AgGrid\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <AgGrid />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}