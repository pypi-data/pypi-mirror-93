{"version":3,"sources":["utils.js","AgGrid.tsx","index.tsx"],"names":["deepMap","obj","fn","deepMapper","val","Array","isArray","map","Object","keys","reduce","res","key","mapObject","AgGrid","props","frame_dtypes","gridOptions","gridData","api","columnApi","columnFormaters","manual_update_requested","allow_unsafe_jscode","convertJavascriptCode","JS_PLACEHOLDER","funcReg","RegExp","v","match","exec","funcStr","Function","render","console","warn","assign","rowData","className","style","height","args","width","ManualUpdateButton","manual_update","onClick","e","returnGridValue","onGridReady","onFirstDataRendered","firstDataRendered","ModuleRegistry","registerModules","AllModules","AllCommunityModules","JSON","parse","columnTypes","filter","filterParams","comparator","filterValue","cellValue","compareAsc","parseISO","valueFormatter","params","date_formater","value","column","colDef","custom_format_string","number_formater","precision","currency_formater","custom_currency_symbol","this","update_mode","addEventListener","event","set_update_mode","sizeColumnsToFit","autoSizeAllColumns","isoString","formaterString","date","format","number","currency_symbol","n","Number","parseFloat","isNaN","toFixed","return_data","forEachLeafNode","row","push","data","forEachNodeAfterFilter","group","forEachNodeAfterFilterAndSort","return_value","original_dtypes","selectedRows","getSelectedRows","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f00d337.chunk.js","sourcesContent":["// stole from https://github.com/andfanilo/streamlit-echarts/blob/master/streamlit_echarts/frontend/src/utils.js Thanks andfanilo\r\n\r\nfunction mapObject(obj, fn) {\r\n    return Object.keys(obj).reduce((res, key) => {\r\n        res[key] = fn(obj[key])\r\n        return res\r\n    }, {})\r\n}\r\n\r\nfunction deepMap(obj, fn) {\r\n    const deepMapper = (val) =>\r\n        val !== null && typeof val === \"object\" ? deepMap(val, fn) : fn(val)\r\n    if (Array.isArray(obj)) {\r\n        return obj.map(deepMapper)\r\n    }\r\n    if (typeof obj === \"object\") {\r\n        return mapObject(obj, deepMapper)\r\n    }\r\n    return obj\r\n}\r\n\r\nexport default deepMap\r\n","import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection\n} from \"streamlit-component-lib\";\n\nimport React, { ReactNode } from \"react\"\n\nimport { AgGridReact } from '@ag-grid-community/react';\nimport { ColumnApi, GridApi } from '@ag-grid-community/core'\n\nimport { ModuleRegistry } from '@ag-grid-community/core';\n\nimport { AllCommunityModules } from '@ag-grid-community/all-modules'\nimport { AllModules } from '@ag-grid-enterprise/all-modules'\n\n\n\nimport '@ag-grid-community/core/dist/styles/ag-grid.css';\nimport '@ag-grid-community/core/dist/styles/ag-theme-balham.css';\n\nimport { parseISO, compareAsc } from 'date-fns'\nimport { format } from 'date-fns-tz'\n\nimport deepMap from \"./utils\"\n\nclass AgGrid extends StreamlitComponentBase {\n  private frame_dtypes: any\n  private gridOptions: any\n  private gridData: any\n  private api!: GridApi;\n  private columnApi!: ColumnApi\n  private columnFormaters: any\n  private manual_update_requested: boolean\n  private allow_unsafe_jscode: boolean = false\n\n  constructor(props: any) {\n    super(props)\n\n    if (props.args['enable_enterprise_modules']) {\n      ModuleRegistry.registerModules(AllModules);\n    } else {\n      ModuleRegistry.registerModules(AllCommunityModules);\n    }\n\n    this.frame_dtypes = props.args['frame_dtypes']\n    this.gridData = JSON.parse(props.args['gridData'])\n    this.gridOptions = props.args['gridOptions']\n    this.manual_update_requested = (props.args['update_mode'] === 1)\n    this.allow_unsafe_jscode = props.args['allow_unsafe_jscode']\n\n    this.columnFormaters = {\n      columnTypes: {\n        'dateColumnFilter': {\n          filter: 'agDateColumnFilter',\n          filterParams: {\n            comparator: (filterValue: any, cellValue: string) => compareAsc(parseISO(cellValue), filterValue)\n          }\n        },\n        'numberColumnFilter': {\n          filter: 'agNumberColumnFilter'\n        },\n        'shortDateTimeFormat': {\n          valueFormatter: (params: any) => this.date_formater(params.value, \"dd/MM/yyyy HH:mm\"),\n        },\n        'customDateTimeFormat': {\n          valueFormatter: (params: any) => this.date_formater(params.value, params.column.colDef.custom_format_string),\n        },\n        'customNumericFormat': {\n          valueFormatter: (params: any) => this.number_formater(params.value, params.column.colDef.precision),\n        },\n        'customCurrencyFormat': {\n          valueFormatter: (params: any) => this.currency_formater(params.value, params.column.colDef.custom_currency_symbol),\n        },\n      }\n    }\n  }\n\n  private convertJavascriptCode = (obj: object) => {\n    const JS_PLACEHOLDER = \"--x_x--0_0--\"\n\n    let funcReg = new RegExp(\n      `${JS_PLACEHOLDER}\\\\s*(function\\\\s*.*)\\\\s*${JS_PLACEHOLDER}`\n    )\n\n    return deepMap(obj, function (v: string) {\n      let match = funcReg.exec(v)\n\n      if (match) {\n        const funcStr = match[1]\n        return new Function(\"return \" + funcStr)()\n\n      } else {\n        return v\n      }\n    })\n  }\n\n  private set_update_mode() {\n    if (this.manual_update_requested) {\n      return //If manual update is set, no listeners will be added\n    }\n\n    let update_mode = this.props.args['update_mode']\n\n    if ((update_mode & 2) === 2) {\n      this.api.addEventListener('cellValueChanged', (e: any) => this.returnGridValue(e))\n    }\n\n    if ((update_mode & 4) === 4) {\n      this.api.addEventListener('selectionChanged', (e: any) => this.returnGridValue(e))\n    }\n\n    if ((update_mode & 8) === 8) {\n      this.api.addEventListener('filterChanged', (e: any) => this.returnGridValue(e))\n    }\n\n    if ((update_mode & 16) === 16) {\n      this.api.addEventListener('sortChanged', (e: any) => this.returnGridValue(e))\n    }\n  }\n\n  private onGridReady(event: any) {\n    this.api = event.api\n    this.columnApi = event.columnApi\n\n    this.set_update_mode()\n\n  }\n\n  private firstDataRendered(event: any) {\n    if (this.props.args['fit_columns_on_grid_load']) {\n      this.api.sizeColumnsToFit()\n    }\n    else {\n      this.columnApi.autoSizeAllColumns()\n    }\n  }\n\n  private date_formater(isoString: string, formaterString: string): String {\n    try {\n      let date = parseISO(isoString)\n      return format(date, formaterString)\n    } catch {\n      return isoString\n    }\n    finally { }\n  }\n\n  private currency_formater(number: any, currency_symbol: string): String {\n    let n = Number.parseFloat(number)\n    if (!Number.isNaN(n)) {\n      return currency_symbol + n.toFixed(2)\n    } else {\n      return number\n    }\n  }\n\n  private number_formater(number: any, precision: number): String {\n    let n = Number.parseFloat(number)\n    if (!Number.isNaN(n)) {\n      return n.toFixed(precision)\n    } else {\n      return number\n    }\n  }\n\n  private returnGridValue(e: any) {\n    var return_data: any[] = []\n    let return_mode = this.props.args['data_return_mode']\n\n    switch (return_mode) {\n      case 0: //ALL_DATA\n        this.api.forEachLeafNode((row) => return_data.push(row.data))\n        break;\n\n      case 1: //FILTERED_DATA\n        this.api.forEachNodeAfterFilter((row) => { if (!row.group) { return_data.push(row.data) } })\n        break;\n\n      case 2: //FILTERED_SORTED_DATA\n        this.api.forEachNodeAfterFilterAndSort((row) => { if (!row.group) { return_data.push(row.data) } })\n        break;\n    }\n\n    var return_value = {\n      original_dtypes: this.frame_dtypes,\n      gridData: return_data,\n      selectedRows: this.api.getSelectedRows()\n    }\n\n    Streamlit.setComponentValue(return_value)\n  }\n\n  private ManualUpdateButton(props: any) {\n\n    if (props.manual_update) {\n      return (<button onClick={props.onClick}>Save</button>)\n    }\n    else {\n      return (<span></span>)\n    }\n  }\n\n  public render = (): ReactNode => {\n    if (this.allow_unsafe_jscode) {\n      console.warn(\"flag allow_unsafe_jscode is on.\")\n      this.gridOptions = this.convertJavascriptCode(this.gridOptions)\n    }\n\n    const gridOptions = Object.assign({}, this.columnFormaters, this.gridOptions, { rowData: this.gridData })\n    return (\n      <div className=\"ag-theme-balham\" style={{ height: this.props.args['height'], width: this.props.args['width'] }}>\n        <this.ManualUpdateButton manual_update={this.manual_update_requested} onClick={(e: any) => this.returnGridValue(e)} />\n        <AgGridReact\n          onGridReady={(e) => this.onGridReady(e)}\n          onFirstDataRendered={(e) => this.firstDataRendered(e)}\n          gridOptions={gridOptions}\n        >\n        </AgGridReact>\n      </div >\n    )\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(AgGrid)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport AgGrid from \"./AgGrid\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <AgGrid />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}