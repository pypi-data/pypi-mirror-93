{"version":3,"sources":["AgGrid.tsx","index.tsx"],"names":["AgGrid","props","agRef","dtypes","columnTypes","editable","valueFormatter","params","value","toFixed","filter","moment","utc","format","render","gridOptions","Object","assign","parseGridOptions","rowData","parseGridData","className","style","height","width","onGridReady","onCellValueChanged","onCellChanged","ref","React","createRef","args","JSON","parse","this","event","api","sizeColumnsToFit","current","return_value","csvData","getDataAsCsv","allColumns","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"mRAiBMA,E,kDAKJ,WAAYC,GAAY,IAAD,8BACrB,cAAMA,IAJAC,WAGe,IAFfC,YAEe,IAmBfC,YAAmB,CACzBA,YAAY,CACV,kBAAqB,CAAEC,UAAU,GACjC,eAAkB,CAAEA,UAAU,GAC9B,8BAAiC,CAC/BC,eAAgB,SAACC,GAAD,OAAiBA,EAAOC,MAAMC,QAAQ,KAExD,wBAA2B,CACzBH,eAAgB,SAACC,GAAD,OAAiC,IAAfA,EAAOC,OAAaC,QAAQ,GAAK,MAErE,qBAAwB,CACtBH,eAAgB,SAACC,GAAD,OAAiBA,EAAOC,MAAMC,QAAQ,KAExD,gBAAmB,CACjBC,OAAO,qBACPJ,eAAgB,SAACC,GAAD,OAAiBI,IAAOC,IAAIL,EAAOC,OAAOK,OAAO,gBAEnE,oBAAuB,CACrBP,eAAgB,SAACC,GAAD,OAAiBI,IAAOC,IAAIL,EAAOC,OAAOK,OAAO,gBArChD,EAoDhBC,OAAS,WAEd,IAAMC,EAAcC,OAAOC,OAAO,GAAI,EAAKb,YAAa,EAAKc,mBAAoB,CAACC,QAAQ,EAAKC,kBAE/F,OACE,qBAAKC,UAAU,kBAAkBC,MAAO,CAAEC,OAAQ,IAAKC,MAAO,QAA9D,SACE,cAAC,cAAD,CACEC,YAAa,EAAKA,YAClBC,mBAAoB,kBAAM,EAAKC,iBAC/BZ,YAAaA,EACba,IAAK,EAAK1B,WA5DhB,EAAKA,MAAQ2B,IAAMC,YACnB,EAAK3B,OAAS,EAAKF,MAAM8B,KAAX,OAHO,E,4DAOrB,OAAOC,KAAKC,MAAMC,KAAKjC,MAAM8B,KAAX,Y,yCAIlB,OAAOG,KAAKjC,MAAM8B,KAAX,c,kCAGWI,GACJA,EAAMC,IACZC,qB,sCA4BR,IAAID,EAAMF,KAAKhC,MAAMoC,QAAQF,IACzBG,EAAe,CACjBpC,OAAO+B,KAAK/B,OACZqC,QAASJ,EAAIK,aAAa,CAACC,YAAW,KAExCC,IAAUC,kBAAkBL,O,GAtDXM,KAuFNC,cAAwB9C,GCpGvC+C,IAASjC,OACP,cAAC,IAAMkC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9ef7d638.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection\n} from \"streamlit-component-lib\";\nimport React, { ReactNode } from \"react\"\n\nimport 'ag-grid-enterprise';\nimport { AgGridReact } from 'ag-grid-react';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\n\nimport moment from  'moment'\nimport { throws } from \"assert\";\n\n\nclass AgGrid extends StreamlitComponentBase{\n\n  private agRef: any\n  private dtypes: any\n\n  constructor(props: any){\n    super(props)\n    this.agRef = React.createRef()\n    this.dtypes = this.props.args['dtypes']\n  }\n\n  private parseGridData() {\n    return JSON.parse(this.props.args['gridData'])\n  }\n\n  private parseGridOptions() {\n    return this.props.args['gridOptions']\n  }\n\n  private onGridReady(event: any) {\n    let gridApi = event.api\n    gridApi.sizeColumnsToFit()\n  }\n\n  private columnTypes: any = {\n    columnTypes:{\n      'nonEditableColumn': { editable: false },\n      'editableColumn': { editable: true },\n      'numericRoundedTwoDigitsColumn': {\n        valueFormatter: (params: any) => params.value.toFixed(2)\n      },\n      'numericPercentageColumn': {\n        valueFormatter: (params: any) => (params.value * 100).toFixed(2) + \"%\"\n      },\n      'numericIntegerColumn': {\n        valueFormatter: (params: any) => params.value.toFixed(0)\n      },\n      'shortDateColumn': {\n        filter:'agDateColumnFilter',\n        valueFormatter: (params: any) => moment.utc(params.value).format('DD/MM/YYYY'),\n      },\n      'yearMonthDateColumn': {\n        valueFormatter: (params: any) => moment.utc(params.value).format('MMM/YYYY')\n      },\n    }\n\n}\n\n  private onCellChanged(){\n    var api = this.agRef.current.api\n    var return_value = {\n      dtypes:this.dtypes, \n      csvData: api.getDataAsCsv({allColumns:true})\n    }\n    Streamlit.setComponentValue(return_value)\n  }\n\n  public render = (): ReactNode => {\n\n    const gridOptions = Object.assign({}, this.columnTypes, this.parseGridOptions(), {rowData:this.parseGridData()} )\n    \n    return (\n      <div className=\"ag-theme-balham\" style={{ height: 400, width: '100%' }}>\n        <AgGridReact\n          onGridReady={this.onGridReady}\n          onCellValueChanged={() => this.onCellChanged()}\n          gridOptions={gridOptions}\n          ref={this.agRef}\n        >\n        </AgGridReact>\n\n      </div>\n    )\n  }\n\n}\n\n\n\n//import './styles.scss';\n\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(AgGrid)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport AgGrid from \"./AgGrid\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <AgGrid />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}