#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Fri Mar  6 15:54:40 2020 by generateDS.py version 2.35.15.
# Python 3.8.1 (v3.8.1:1b293b6006, Dec 18 2019, 14:08:53)  [Clang 6.0 (clang-600.0.57)]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('-o', './python/track_service_v18.py')
#
# Command line arguments:
#   ./schemas/TrackService_v18.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/.sandbox/bin/generateDS --no-namespace-defs -o "./python/track_service_v18.py" ./schemas/TrackService_v18.xsd
#
# Current working directory (os.getcwd()):
#   2020-02
#

from six.moves import zip_longest
import os
import sys
import re as re_
import base64
import datetime as datetime_
import decimal as decimal_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
SaveElementTreeNode = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ImportError:
    GenerateDSNamespaceTypePrefixes_ = {}

#
# You can replace the following class definition by defining an
# importable module named "generatedscollector" containing a class
# named "GdsCollector".  See the default class definition below for
# clues about the possible content of that class.
#
try:
    from generatedscollector import GdsCollector as GdsCollector_
except ImportError:

    class GdsCollector_(object):

        def __init__(self, messages=None):
            if messages is None:
                self.messages = []
            else:
                self.messages = messages

        def add_message(self, msg):
            self.messages.append(msg)

        def get_messages(self):
            return self.messages

        def clear_messages(self):
            self.messages = []

        def print_messages(self):
            for msg in self.messages:
                print("Warning: {}".format(msg))

        def write_messages(self, outstream):
            for msg in self.messages:
                outstream.write("Warning: {}\n".format(msg))


#
# The super-class for enum types
#

try:
    from enum import Enum
except ImportError:
    Enum = object

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        __hash__ = object.__hash__
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_parse_string(self, input_data, node=None, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_parse_integer(self, input_data, node=None, input_name=''):
            try:
                ival = int(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires integer value: %s' % exp)
            return ival
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            try:
                value = int(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires integer value')
            return value
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integer valuess')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_parse_float(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires float or double value: %s' % exp)
            return fval_
        def gds_validate_float(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires float value')
            return value
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of float values')
            return values
        def gds_format_decimal(self, input_data, input_name=''):
            return ('%s' % input_data).rstrip('0')
        def gds_parse_decimal(self, input_data, node=None, input_name=''):
            try:
                decimal_value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return decimal_value
        def gds_validate_decimal(self, input_data, node=None, input_name=''):
            try:
                value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return value
        def gds_format_decimal_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_decimal_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    decimal_.Decimal(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of decimal values')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_parse_double(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires double or float value: %s' % exp)
            return fval_
        def gds_validate_double(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires double or float value')
            return value
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(
                        node, 'Requires sequence of double or float values')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_parse_boolean(self, input_data, node=None, input_name=''):
            if input_data in ('true', '1'):
                bval = True
            elif input_data in ('false', '0'):
                bval = False
            else:
                raise_parse_error(node, 'Requires boolean value')
            return bval
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            if input_data not in (True, 1, False, 0, ):
                raise_parse_error(
                    node,
                    'Requires boolean value '
                    '(one of True, 1, False, 0)')
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in (True, 1, False, 0, ):
                    raise_parse_error(
                        node,
                        'Requires sequence of boolean values '
                        '(one of True, 1, False, 0)')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_check_cardinality_(
                self, value, input_name,
                min_occurs=0, max_occurs=1, required=None):
            if value is None:
                length = 0
            elif isinstance(value, list):
                length = len(value)
            else:
                length = 1
            if required is not None :
                if required and length < 1:
                    self.gds_collector_.add_message(
                        "Required value {}{} is missing".format(
                            input_name, self.gds_get_node_lineno_()))
            if length < min_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is below "
                    "the minimum allowed, "
                    "expected at least {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        min_occurs, length))
            elif length > max_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is above "
                    "the maximum allowed, "
                    "expected at most {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        max_occurs, length))
        def gds_validate_builtin_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value, input_name=input_name)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_validate_defined_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            # provide default value in case option --disable-xml is used.
            content = ""
            content = etree_.tostring(node, encoding="unicode")
            return content
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            def excl_select_objs_(obj):
                return (obj[0] != 'parent_object_' and
                        obj[0] != 'gds_collector_')
            if type(self) != type(other):
                return False
            return all(x == y for x, y in zip_longest(
                filter(excl_select_objs_, self.__dict__.items()),
                filter(excl_select_objs_, other.__dict__.items())))
        def __ne__(self, other):
            return not self.__eq__(other)
        # Django ETL transform hooks.
        def gds_djo_etl_transform(self):
            pass
        def gds_djo_etl_transform_db_obj(self, dbobj):
            pass
        # SQLAlchemy ETL transform hooks.
        def gds_sqa_etl_transform(self):
            return 0, None
        def gds_sqa_etl_transform_db_obj(self, dbobj):
            pass
        def gds_get_node_lineno_(self):
            if (hasattr(self, "gds_elementtree_node_") and
                    self.gds_elementtree_node_ is not None):
                return ' near line {}'.format(
                    self.gds_elementtree_node_.sourceline)
            else:
                return ""
    
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
# Set this to false in order to deactivate during export, the use of
# name space prefixes captured from the input document.
UseCapturedNS_ = True
CapturedNsmap_ = {}
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


def encode_str_2_3(instr):
    return instr


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if node is not None:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class AppointmentWindowType(Enum):
    """The description that FedEx uses for a given appointment window."""
    AFTERNOON='AFTERNOON'
    LATE_AFTERNOON='LATE_AFTERNOON'
    MID_DAY='MID_DAY'
    MORNING='MORNING'


class ArrivalLocationType(Enum):
    """Identifies where a tracking event occurs."""
    AIRPORT='AIRPORT'
    CUSTOMER='CUSTOMER'
    CUSTOMS_BROKER='CUSTOMS_BROKER'
    DELIVERY_LOCATION='DELIVERY_LOCATION'
    DESTINATION_AIRPORT='DESTINATION_AIRPORT'
    DESTINATION_FEDEX_FACILITY='DESTINATION_FEDEX_FACILITY'
    DROP_BOX='DROP_BOX'
    ENROUTE='ENROUTE'
    FEDEX_FACILITY='FEDEX_FACILITY'
    FEDEX_OFFICE_LOCATION='FEDEX_OFFICE_LOCATION'
    INTERLINE_CARRIER='INTERLINE_CARRIER'
    NON_FEDEX_FACILITY='NON_FEDEX_FACILITY'
    ORIGIN_AIRPORT='ORIGIN_AIRPORT'
    ORIGIN_FEDEX_FACILITY='ORIGIN_FEDEX_FACILITY'
    PICKUP_LOCATION='PICKUP_LOCATION'
    PLANE='PLANE'
    PORT_OF_ENTRY='PORT_OF_ENTRY'
    SHIP_AND_GET_LOCATION='SHIP_AND_GET_LOCATION'
    SORT_FACILITY='SORT_FACILITY'
    TURNPOINT='TURNPOINT'
    VEHICLE='VEHICLE'


class AvailableImageType(Enum):
    BILL_OF_LADING='BILL_OF_LADING'
    SIGNATURE_PROOF_OF_DELIVERY='SIGNATURE_PROOF_OF_DELIVERY'


class BarcodeEntryType(Enum):
    MANUAL_ENTRY='MANUAL_ENTRY'
    SCAN='SCAN'


class CarrierCodeType(Enum):
    """Identification of a FedEx operating company (transportation)."""
    FDXC='FDXC'
    FDXE='FDXE'
    FDXG='FDXG'
    FXCC='FXCC'
    FXFR='FXFR'
    FXSP='FXSP'


class ClearanceBrokerageType(Enum):
    """Specifies the type of brokerage to be applied to a shipment."""
    BROKER_INCLUSIVE='BROKER_INCLUSIVE'
    BROKER_INCLUSIVE_NON_RESIDENT_IMPORTER='BROKER_INCLUSIVE_NON_RESIDENT_IMPORTER'
    BROKER_SELECT='BROKER_SELECT'
    BROKER_SELECT_NON_RESIDENT_IMPORTER='BROKER_SELECT_NON_RESIDENT_IMPORTER'
    BROKER_UNASSIGNED='BROKER_UNASSIGNED'


class CommodityPurposeType(Enum):
    BUSINESS='BUSINESS'
    CONSUMER='CONSUMER'


class CustomsOptionType(Enum):
    COURTESY_RETURN_LABEL='COURTESY_RETURN_LABEL'
    EXHIBITION_TRADE_SHOW='EXHIBITION_TRADE_SHOW'
    FAULTY_ITEM='FAULTY_ITEM'
    FOLLOWING_REPAIR='FOLLOWING_REPAIR'
    FOR_REPAIR='FOR_REPAIR'
    ITEM_FOR_LOAN='ITEM_FOR_LOAN'
    OTHER='OTHER'
    REJECTED='REJECTED'
    REPLACEMENT='REPLACEMENT'
    TRIAL='TRIAL'


class DeliveryOptionType(Enum):
    """Specifies the different option types for delivery."""
    INDIRECT_SIGNATURE_RELEASE='INDIRECT_SIGNATURE_RELEASE'
    REDIRECT_TO_HOLD_AT_LOCATION='REDIRECT_TO_HOLD_AT_LOCATION'
    REROUTE='REROUTE'
    RESCHEDULE='RESCHEDULE'


class DistanceUnits(Enum):
    KM='KM'
    MI='MI'


class EligibilityType(Enum):
    """Specifies different values of eligibility status"""
    ELIGIBLE='ELIGIBLE'
    INELIGIBLE='INELIGIBLE'
    POSSIBLY_ELIGIBLE='POSSIBLY_ELIGIBLE'


class FedExLocationType(Enum):
    """Identifies a kind of FedEx facility."""
    FEDEX_AUTHORIZED_SHIP_CENTER='FEDEX_AUTHORIZED_SHIP_CENTER'
    FEDEX_EXPRESS_STATION='FEDEX_EXPRESS_STATION'
    FEDEX_FACILITY='FEDEX_FACILITY'
    FEDEX_FREIGHT_SERVICE_CENTER='FEDEX_FREIGHT_SERVICE_CENTER'
    FEDEX_GROUND_TERMINAL='FEDEX_GROUND_TERMINAL'
    FEDEX_HOME_DELIVERY_STATION='FEDEX_HOME_DELIVERY_STATION'
    FEDEX_OFFICE='FEDEX_OFFICE'
    FEDEX_ONSITE='FEDEX_ONSITE'
    FEDEX_SELF_SERVICE_LOCATION='FEDEX_SELF_SERVICE_LOCATION'
    FEDEX_SHIPSITE='FEDEX_SHIPSITE'
    FEDEX_SHIP_AND_GET='FEDEX_SHIP_AND_GET'
    FEDEX_SMART_POST_HUB='FEDEX_SMART_POST_HUB'


class ImageSizeType(Enum):
    LARGE='LARGE'
    SMALL='SMALL'


class LinearUnits(Enum):
    CM='CM'
    IN='IN'


class NaftaNetCostMethodCode(Enum):
    NC='NC'
    NO='NO'


class NaftaPreferenceCriterionCode(Enum):
    """See instructions for NAFTA Certificate of Origin for code
    definitions."""
    A='A'
    B='B'
    C='C'
    D='D'
    E='E'
    F='F'


class NaftaProducerDeterminationCode(Enum):
    """See instructions for NAFTA Certificate of Origin for code
    definitions."""
    NO__1='NO_1'
    NO__2='NO_2'
    NO__3='NO_3'
    YES='YES'


class NotificationEventType(Enum):
    ON_DELIVERY='ON_DELIVERY'
    ON_ESTIMATED_DELIVERY='ON_ESTIMATED_DELIVERY'
    ON_EXCEPTION='ON_EXCEPTION'
    ON_PICKUP_DRIVER_ARRIVED='ON_PICKUP_DRIVER_ARRIVED'
    ON_PICKUP_DRIVER_ASSIGNED='ON_PICKUP_DRIVER_ASSIGNED'
    ON_PICKUP_DRIVER_DEPARTED='ON_PICKUP_DRIVER_DEPARTED'
    ON_PICKUP_DRIVER_EN_ROUTE='ON_PICKUP_DRIVER_EN_ROUTE'
    ON_SHIPMENT='ON_SHIPMENT'
    ON_TENDER='ON_TENDER'


class NotificationFormatType(Enum):
    HTML='HTML'
    TEXT='TEXT'


class NotificationSeverityType(Enum):
    ERROR='ERROR'
    FAILURE='FAILURE'
    NOTE='NOTE'
    SUCCESS='SUCCESS'
    WARNING='WARNING'


class NotificationType(Enum):
    EMAIL='EMAIL'


class OfficeOrderDeliveryMethodType(Enum):
    COURIER='COURIER'
    OTHER='OTHER'
    PICKUP='PICKUP'
    SHIPMENT='SHIPMENT'


class OperatingCompanyType(Enum):
    """Identification for a FedEx operating company (transportation and non-
    transportation)."""
    FEDEX_CARGO='FEDEX_CARGO'
    FEDEX_CORPORATE_SERVICES='FEDEX_CORPORATE_SERVICES'
    FEDEX_CORPORATION='FEDEX_CORPORATION'
    FEDEX_CUSTOMER_INFORMATION_SYSTEMS='FEDEX_CUSTOMER_INFORMATION_SYSTEMS'
    FEDEX_CUSTOM_CRITICAL='FEDEX_CUSTOM_CRITICAL'
    FEDEX_EXPRESS='FEDEX_EXPRESS'
    FEDEX_FREIGHT='FEDEX_FREIGHT'
    FEDEX_GROUND='FEDEX_GROUND'
    FEDEX_KINKOS='FEDEX_KINKOS'
    FEDEX_OFFICE='FEDEX_OFFICE'
    FEDEX_SERVICES='FEDEX_SERVICES'
    FEDEX_TRADE_NETWORKS='FEDEX_TRADE_NETWORKS'


class PhysicalPackagingType(Enum):
    """This enumeration rationalizes the former FedEx Express international
    "admissibility package" types (based on ANSI X.12) and the FedEx
    Freight packaging types. The values represented are those common to
    both carriers."""
    BAG='BAG'
    BARREL='BARREL'
    BASKET='BASKET'
    BOX='BOX'
    BUCKET='BUCKET'
    BUNDLE='BUNDLE'
    CAGE='CAGE'
    CARTON='CARTON'
    CASE='CASE'
    CHEST='CHEST'
    CONTAINER='CONTAINER'
    CRATE='CRATE'
    CYLINDER='CYLINDER'
    DRUM='DRUM'
    ENVELOPE='ENVELOPE'
    HAMPER='HAMPER'
    OTHER='OTHER'
    PACKAGE='PACKAGE'
    PAIL='PAIL'
    PALLET='PALLET'
    PARCEL='PARCEL'
    PIECE='PIECE'
    REEL='REEL'
    ROLL='ROLL'
    SACK='SACK'
    SHRINK_WRAPPED='SHRINK_WRAPPED'
    SKID='SKID'
    TANK='TANK'
    TOTE_BIN='TOTE_BIN'
    TUBE='TUBE'
    UNIT='UNIT'


class PieceCountLocationType(Enum):
    DESTINATION='DESTINATION'
    ORIGIN='ORIGIN'


class ShipmentNotificationAggregationType(Enum):
    PER_PACKAGE='PER_PACKAGE'
    PER_SHIPMENT='PER_SHIPMENT'


class ShipmentNotificationRoleType(Enum):
    BROKER='BROKER'
    OTHER='OTHER'
    RECIPIENT='RECIPIENT'
    SHIPPER='SHIPPER'
    THIRD_PARTY='THIRD_PARTY'


class SpecialInstructionsStatusCode(Enum):
    ACCEPTED='ACCEPTED'
    CANCELLED='CANCELLED'
    DENIED='DENIED'
    HELD='HELD'
    MODIFIED='MODIFIED'
    RELINQUISHED='RELINQUISHED'
    REQUESTED='REQUESTED'
    SET='SET'


class StringBarcodeType(Enum):
    ADDRESS='ADDRESS'
    ASTRA='ASTRA'
    FEDEX__1_D='FEDEX_1D'
    GROUND='GROUND'
    POSTAL='POSTAL'
    USPS='USPS'


class TrackAdvanceNotificationStatusType(Enum):
    BACK_ON_TRACK='BACK_ON_TRACK'
    FAIL='FAIL'


class TrackChargeDetailType(Enum):
    ORIGINAL_CHARGES='ORIGINAL_CHARGES'


class TrackChargesPaymentClassificationType(Enum):
    DUTIES_AND_TAXES='DUTIES_AND_TAXES'
    TRANSPORTATION='TRANSPORTATION'


class TrackDeliveryLocationType(Enum):
    APARTMENT_OFFICE='APARTMENT_OFFICE'
    FEDEX_LOCATION='FEDEX_LOCATION'
    GATE_HOUSE='GATE_HOUSE'
    GUARD_OR_SECURITY_STATION='GUARD_OR_SECURITY_STATION'
    IN_BOND_OR_CAGE='IN_BOND_OR_CAGE'
    LEASING_OFFICE='LEASING_OFFICE'
    MAILROOM='MAILROOM'
    MAIN_OFFICE='MAIN_OFFICE'
    MANAGER_OFFICE='MANAGER_OFFICE'
    OTHER='OTHER'
    PHARMACY='PHARMACY'
    RECEPTIONIST_OR_FRONT_DESK='RECEPTIONIST_OR_FRONT_DESK'
    RENTAL_OFFICE='RENTAL_OFFICE'
    RESIDENCE='RESIDENCE'
    SHIPPING_RECEIVING='SHIPPING_RECEIVING'


class TrackDeliveryOptionType(Enum):
    APPOINTMENT='APPOINTMENT'
    DATE_CERTAIN='DATE_CERTAIN'
    ELECTRONIC_SIGNATURE_RELEASE='ELECTRONIC_SIGNATURE_RELEASE'
    EVENING='EVENING'
    REDIRECT_TO_HOLD_AT_LOCATION='REDIRECT_TO_HOLD_AT_LOCATION'
    REROUTE='REROUTE'


class TrackDetailAttributeType(Enum):
    INCLUDED_IN_WATCHLIST='INCLUDED_IN_WATCHLIST'


class TrackIdentifierType(Enum):
    BILL_OF_LADING='BILL_OF_LADING'
    COD_RETURN_TRACKING_NUMBER='COD_RETURN_TRACKING_NUMBER'
    CUSTOMER_AUTHORIZATION_NUMBER='CUSTOMER_AUTHORIZATION_NUMBER'
    CUSTOMER_REFERENCE='CUSTOMER_REFERENCE'
    DEPARTMENT='DEPARTMENT'
    DOCUMENT_AIRWAY_BILL='DOCUMENT_AIRWAY_BILL'
    FREE_FORM_REFERENCE='FREE_FORM_REFERENCE'
    GROUND_INTERNATIONAL='GROUND_INTERNATIONAL'
    GROUND_SHIPMENT_ID='GROUND_SHIPMENT_ID'
    GROUP_MPS='GROUP_MPS'
    INVOICE='INVOICE'
    JOB_GLOBAL_TRACKING_NUMBER='JOB_GLOBAL_TRACKING_NUMBER'
    ORDER_GLOBAL_TRACKING_NUMBER='ORDER_GLOBAL_TRACKING_NUMBER'
    ORDER_TO_PAY_NUMBER='ORDER_TO_PAY_NUMBER'
    OUTBOUND_LINK_TO_RETURN='OUTBOUND_LINK_TO_RETURN'
    PARTNER_CARRIER_NUMBER='PARTNER_CARRIER_NUMBER'
    PART_NUMBER='PART_NUMBER'
    PURCHASE_ORDER='PURCHASE_ORDER'
    REROUTE_TRACKING_NUMBER='REROUTE_TRACKING_NUMBER'
    RETURNED_TO_SHIPPER_TRACKING_NUMBER='RETURNED_TO_SHIPPER_TRACKING_NUMBER'
    RETURN_MATERIALS_AUTHORIZATION='RETURN_MATERIALS_AUTHORIZATION'
    SHIPPER_REFERENCE='SHIPPER_REFERENCE'
    STANDARD_MPS='STANDARD_MPS'
    TRACKING_NUMBER_OR_DOORTAG='TRACKING_NUMBER_OR_DOORTAG'
    TRANSPORTATION_CONTROL_NUMBER='TRANSPORTATION_CONTROL_NUMBER'


class TrackPaymentType(Enum):
    CASH_OR_CHECK_AT_DESTINATION='CASH_OR_CHECK_AT_DESTINATION'
    CASH_OR_CHECK_AT_ORIGIN='CASH_OR_CHECK_AT_ORIGIN'
    CREDIT_CARD_AT_DESTINATION='CREDIT_CARD_AT_DESTINATION'
    CREDIT_CARD_AT_ORIGIN='CREDIT_CARD_AT_ORIGIN'
    OTHER='OTHER'
    RECIPIENT_ACCOUNT='RECIPIENT_ACCOUNT'
    SHIPPER_ACCOUNT='SHIPPER_ACCOUNT'
    THIRD_PARTY_ACCOUNT='THIRD_PARTY_ACCOUNT'


class TrackPossessionStatusType(Enum):
    BROKER='BROKER'
    CARRIER='CARRIER'
    CUSTOMS='CUSTOMS'
    RECIPIENT='RECIPIENT'
    SHIPPER='SHIPPER'
    SPLIT_STATUS='SPLIT_STATUS'
    TRANSFER_PARTNER='TRANSFER_PARTNER'


class TrackRequestProcessingOptionType(Enum):
    INCLUDE_DETAILED_SCANS='INCLUDE_DETAILED_SCANS'


class TrackReturnLabelType(Enum):
    EMAIL='EMAIL'
    PRINT='PRINT'


class TrackReturnMovementStatusType(Enum):
    MOVEMENT_OCCURRED='MOVEMENT_OCCURRED'
    NO_MOVEMENT='NO_MOVEMENT'


class TrackingDateOrTimestampType(Enum):
    ACTUAL_DELIVERY='ACTUAL_DELIVERY'
    ACTUAL_PICKUP='ACTUAL_PICKUP'
    ACTUAL_TENDER='ACTUAL_TENDER'
    ANTICIPATED_TENDER='ANTICIPATED_TENDER'
    APPOINTMENT_DELIVERY='APPOINTMENT_DELIVERY'
    ESTIMATED_DELIVERY='ESTIMATED_DELIVERY'
    ESTIMATED_PICKUP='ESTIMATED_PICKUP'
    ESTIMATED_RETURN_TO_STATION='ESTIMATED_RETURN_TO_STATION'
    SHIP='SHIP'


class TrackingDocumentDispositionType(Enum):
    EMAIL='EMAIL'
    FAX='FAX'
    RETURN='RETURN'


class TrackingDocumentGroupingType(Enum):
    CONSOLIDATED_BY_DOCUMENT_TYPE='CONSOLIDATED_BY_DOCUMENT_TYPE'
    INDIVIDUAL='INDIVIDUAL'


class TrackingDocumentImageType(Enum):
    PDF='PDF'
    PNG='PNG'


class TrackingDocumentType(Enum):
    BILL_OF_LADING='BILL_OF_LADING'
    FREIGHT_BILLING_DOCUMENT='FREIGHT_BILLING_DOCUMENT'
    SIGNATURE_PROOF_OF_DELIVERY='SIGNATURE_PROOF_OF_DELIVERY'


class WeightUnits(Enum):
    KG='KG'
    LB='LB'


class Address(GeneratedsSuper):
    """Descriptive data for a physical location. May be used as an actual
    physical address (place to which one could go), or as a container of
    "address parts" which should be handled as a unit (such as a city-
    state-ZIP combination within the US)."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, StreetLines=None, City=None, StateOrProvinceCode=None, PostalCode=None, UrbanizationCode=None, CountryCode=None, CountryName=None, Residential=None, GeographicCoordinates=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if StreetLines is None:
            self.StreetLines = []
        else:
            self.StreetLines = StreetLines
        self.StreetLines_nsprefix_ = None
        self.City = City
        self.City_nsprefix_ = None
        self.StateOrProvinceCode = StateOrProvinceCode
        self.StateOrProvinceCode_nsprefix_ = None
        self.PostalCode = PostalCode
        self.PostalCode_nsprefix_ = None
        self.UrbanizationCode = UrbanizationCode
        self.UrbanizationCode_nsprefix_ = None
        self.CountryCode = CountryCode
        self.CountryCode_nsprefix_ = None
        self.CountryName = CountryName
        self.CountryName_nsprefix_ = None
        self.Residential = Residential
        self.Residential_nsprefix_ = None
        self.GeographicCoordinates = GeographicCoordinates
        self.GeographicCoordinates_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Address)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Address.subclass:
            return Address.subclass(*args_, **kwargs_)
        else:
            return Address(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_StreetLines(self):
        return self.StreetLines
    def set_StreetLines(self, StreetLines):
        self.StreetLines = StreetLines
    def add_StreetLines(self, value):
        self.StreetLines.append(value)
    def insert_StreetLines_at(self, index, value):
        self.StreetLines.insert(index, value)
    def replace_StreetLines_at(self, index, value):
        self.StreetLines[index] = value
    def get_City(self):
        return self.City
    def set_City(self, City):
        self.City = City
    def get_StateOrProvinceCode(self):
        return self.StateOrProvinceCode
    def set_StateOrProvinceCode(self, StateOrProvinceCode):
        self.StateOrProvinceCode = StateOrProvinceCode
    def get_PostalCode(self):
        return self.PostalCode
    def set_PostalCode(self, PostalCode):
        self.PostalCode = PostalCode
    def get_UrbanizationCode(self):
        return self.UrbanizationCode
    def set_UrbanizationCode(self, UrbanizationCode):
        self.UrbanizationCode = UrbanizationCode
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def get_CountryName(self):
        return self.CountryName
    def set_CountryName(self, CountryName):
        self.CountryName = CountryName
    def get_Residential(self):
        return self.Residential
    def set_Residential(self, Residential):
        self.Residential = Residential
    def get_GeographicCoordinates(self):
        return self.GeographicCoordinates
    def set_GeographicCoordinates(self, GeographicCoordinates):
        self.GeographicCoordinates = GeographicCoordinates
    def hasContent_(self):
        if (
            self.StreetLines or
            self.City is not None or
            self.StateOrProvinceCode is not None or
            self.PostalCode is not None or
            self.UrbanizationCode is not None or
            self.CountryCode is not None or
            self.CountryName is not None or
            self.Residential is not None or
            self.GeographicCoordinates is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Address', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Address')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Address':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Address')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Address', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Address'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Address', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for StreetLines_ in self.StreetLines:
            namespaceprefix_ = self.StreetLines_nsprefix_ + ':' if (UseCapturedNS_ and self.StreetLines_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStreetLines>%s</%sStreetLines>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(StreetLines_), input_name='StreetLines')), namespaceprefix_ , eol_))
        if self.City is not None:
            namespaceprefix_ = self.City_nsprefix_ + ':' if (UseCapturedNS_ and self.City_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCity>%s</%sCity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), namespaceprefix_ , eol_))
        if self.StateOrProvinceCode is not None:
            namespaceprefix_ = self.StateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.StateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStateOrProvinceCode>%s</%sStateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StateOrProvinceCode), input_name='StateOrProvinceCode')), namespaceprefix_ , eol_))
        if self.PostalCode is not None:
            namespaceprefix_ = self.PostalCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PostalCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), namespaceprefix_ , eol_))
        if self.UrbanizationCode is not None:
            namespaceprefix_ = self.UrbanizationCode_nsprefix_ + ':' if (UseCapturedNS_ and self.UrbanizationCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUrbanizationCode>%s</%sUrbanizationCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UrbanizationCode), input_name='UrbanizationCode')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
        if self.CountryName is not None:
            namespaceprefix_ = self.CountryName_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryName>%s</%sCountryName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryName), input_name='CountryName')), namespaceprefix_ , eol_))
        if self.Residential is not None:
            namespaceprefix_ = self.Residential_nsprefix_ + ':' if (UseCapturedNS_ and self.Residential_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sResidential>%s</%sResidential>%s' % (namespaceprefix_ , self.gds_format_boolean(self.Residential, input_name='Residential'), namespaceprefix_ , eol_))
        if self.GeographicCoordinates is not None:
            namespaceprefix_ = self.GeographicCoordinates_nsprefix_ + ':' if (UseCapturedNS_ and self.GeographicCoordinates_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGeographicCoordinates>%s</%sGeographicCoordinates>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GeographicCoordinates), input_name='GeographicCoordinates')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'StreetLines':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StreetLines')
            value_ = self.gds_validate_string(value_, node, 'StreetLines')
            self.StreetLines.append(value_)
            self.StreetLines_nsprefix_ = child_.prefix
        elif nodeName_ == 'City':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'City')
            value_ = self.gds_validate_string(value_, node, 'City')
            self.City = value_
            self.City_nsprefix_ = child_.prefix
        elif nodeName_ == 'StateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'StateOrProvinceCode')
            self.StateOrProvinceCode = value_
            self.StateOrProvinceCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'PostalCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PostalCode')
            value_ = self.gds_validate_string(value_, node, 'PostalCode')
            self.PostalCode = value_
            self.PostalCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'UrbanizationCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UrbanizationCode')
            value_ = self.gds_validate_string(value_, node, 'UrbanizationCode')
            self.UrbanizationCode = value_
            self.UrbanizationCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'CountryName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryName')
            value_ = self.gds_validate_string(value_, node, 'CountryName')
            self.CountryName = value_
            self.CountryName_nsprefix_ = child_.prefix
        elif nodeName_ == 'Residential':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'Residential')
            ival_ = self.gds_validate_boolean(ival_, node, 'Residential')
            self.Residential = ival_
            self.Residential_nsprefix_ = child_.prefix
        elif nodeName_ == 'GeographicCoordinates':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GeographicCoordinates')
            value_ = self.gds_validate_string(value_, node, 'GeographicCoordinates')
            self.GeographicCoordinates = value_
            self.GeographicCoordinates_nsprefix_ = child_.prefix
# end class Address


class AppointmentDetail(GeneratedsSuper):
    """Specifies the different appointment times on a specific date."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Date=None, WindowDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.Date_nsprefix_ = None
        if WindowDetails is None:
            self.WindowDetails = []
        else:
            self.WindowDetails = WindowDetails
        self.WindowDetails_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AppointmentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AppointmentDetail.subclass:
            return AppointmentDetail.subclass(*args_, **kwargs_)
        else:
            return AppointmentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_WindowDetails(self):
        return self.WindowDetails
    def set_WindowDetails(self, WindowDetails):
        self.WindowDetails = WindowDetails
    def add_WindowDetails(self, value):
        self.WindowDetails.append(value)
    def insert_WindowDetails_at(self, index, value):
        self.WindowDetails.insert(index, value)
    def replace_WindowDetails_at(self, index, value):
        self.WindowDetails[index] = value
    def hasContent_(self):
        if (
            self.Date is not None or
            self.WindowDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AppointmentDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AppointmentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AppointmentDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AppointmentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AppointmentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AppointmentDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AppointmentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Date is not None:
            namespaceprefix_ = self.Date_nsprefix_ + ':' if (UseCapturedNS_ and self.Date_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        for WindowDetails_ in self.WindowDetails:
            namespaceprefix_ = self.WindowDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.WindowDetails_nsprefix_) else ''
            WindowDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WindowDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
            self.Date_nsprefix_ = child_.prefix
        elif nodeName_ == 'WindowDetails':
            obj_ = AppointmentTimeDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WindowDetails.append(obj_)
            obj_.original_tagname_ = 'WindowDetails'
# end class AppointmentDetail


class AppointmentTimeDetail(GeneratedsSuper):
    """Specifies the details about the appointment time window."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Window=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_AppointmentWindowType(self.Type)
        self.Type_nsprefix_ = None
        self.Window = Window
        self.Window_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AppointmentTimeDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AppointmentTimeDetail.subclass:
            return AppointmentTimeDetail.subclass(*args_, **kwargs_)
        else:
            return AppointmentTimeDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Window(self):
        return self.Window
    def set_Window(self, Window):
        self.Window = Window
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def validate_AppointmentWindowType(self, value):
        result = True
        # Validate type AppointmentWindowType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AFTERNOON', 'LATE_AFTERNOON', 'MID_DAY', 'MORNING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on AppointmentWindowType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Window is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AppointmentTimeDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AppointmentTimeDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AppointmentTimeDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AppointmentTimeDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AppointmentTimeDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AppointmentTimeDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AppointmentTimeDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Window is not None:
            namespaceprefix_ = self.Window_nsprefix_ + ':' if (UseCapturedNS_ and self.Window_nsprefix_) else ''
            self.Window.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Window', pretty_print=pretty_print)
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type AppointmentWindowType
            self.validate_AppointmentWindowType(self.Type)
        elif nodeName_ == 'Window':
            obj_ = LocalTimeRange.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Window = obj_
            obj_.original_tagname_ = 'Window'
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class AppointmentTimeDetail


class AvailableImagesDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Size=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_AvailableImageType(self.Type)
        self.Type_nsprefix_ = None
        self.Size = Size
        self.validate_ImageSizeType(self.Size)
        self.Size_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AvailableImagesDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AvailableImagesDetail.subclass:
            return AvailableImagesDetail.subclass(*args_, **kwargs_)
        else:
            return AvailableImagesDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Size(self):
        return self.Size
    def set_Size(self, Size):
        self.Size = Size
    def validate_AvailableImageType(self, value):
        result = True
        # Validate type AvailableImageType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BILL_OF_LADING', 'SIGNATURE_PROOF_OF_DELIVERY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on AvailableImageType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ImageSizeType(self, value):
        result = True
        # Validate type ImageSizeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['LARGE', 'SMALL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ImageSizeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Size is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AvailableImagesDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AvailableImagesDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AvailableImagesDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AvailableImagesDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AvailableImagesDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AvailableImagesDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AvailableImagesDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Size is not None:
            namespaceprefix_ = self.Size_nsprefix_ + ':' if (UseCapturedNS_ and self.Size_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSize>%s</%sSize>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Size), input_name='Size')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type AvailableImageType
            self.validate_AvailableImageType(self.Type)
        elif nodeName_ == 'Size':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Size')
            value_ = self.gds_validate_string(value_, node, 'Size')
            self.Size = value_
            self.Size_nsprefix_ = child_.prefix
            # validate type ImageSizeType
            self.validate_ImageSizeType(self.Size)
# end class AvailableImagesDetail


class ClientDetail(GeneratedsSuper):
    """Descriptive data for the client submitting a transaction."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, MeterNumber=None, IntegratorId=None, Localization=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AccountNumber = AccountNumber
        self.AccountNumber_nsprefix_ = None
        self.MeterNumber = MeterNumber
        self.MeterNumber_nsprefix_ = None
        self.IntegratorId = IntegratorId
        self.IntegratorId_nsprefix_ = None
        self.Localization = Localization
        self.Localization_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClientDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClientDetail.subclass:
            return ClientDetail.subclass(*args_, **kwargs_)
        else:
            return ClientDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AccountNumber(self):
        return self.AccountNumber
    def set_AccountNumber(self, AccountNumber):
        self.AccountNumber = AccountNumber
    def get_MeterNumber(self):
        return self.MeterNumber
    def set_MeterNumber(self, MeterNumber):
        self.MeterNumber = MeterNumber
    def get_IntegratorId(self):
        return self.IntegratorId
    def set_IntegratorId(self, IntegratorId):
        self.IntegratorId = IntegratorId
    def get_Localization(self):
        return self.Localization
    def set_Localization(self, Localization):
        self.Localization = Localization
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.MeterNumber is not None or
            self.IntegratorId is not None or
            self.Localization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ClientDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClientDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ClientDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ClientDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ClientDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ClientDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ClientDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountNumber is not None:
            namespaceprefix_ = self.AccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), namespaceprefix_ , eol_))
        if self.MeterNumber is not None:
            namespaceprefix_ = self.MeterNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.MeterNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeterNumber>%s</%sMeterNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MeterNumber), input_name='MeterNumber')), namespaceprefix_ , eol_))
        if self.IntegratorId is not None:
            namespaceprefix_ = self.IntegratorId_nsprefix_ + ':' if (UseCapturedNS_ and self.IntegratorId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIntegratorId>%s</%sIntegratorId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IntegratorId), input_name='IntegratorId')), namespaceprefix_ , eol_))
        if self.Localization is not None:
            namespaceprefix_ = self.Localization_nsprefix_ + ':' if (UseCapturedNS_ and self.Localization_nsprefix_) else ''
            self.Localization.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Localization', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountNumber')
            value_ = self.gds_validate_string(value_, node, 'AccountNumber')
            self.AccountNumber = value_
            self.AccountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'MeterNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MeterNumber')
            value_ = self.gds_validate_string(value_, node, 'MeterNumber')
            self.MeterNumber = value_
            self.MeterNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'IntegratorId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'IntegratorId')
            value_ = self.gds_validate_string(value_, node, 'IntegratorId')
            self.IntegratorId = value_
            self.IntegratorId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
# end class ClientDetail


class Commodity(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CommodityId=None, Name=None, NumberOfPieces=None, Description=None, Purpose=None, CountryOfManufacture=None, HarmonizedCode=None, Weight=None, Quantity=None, QuantityUnits=None, AdditionalMeasures=None, UnitPrice=None, CustomsValue=None, ExciseConditions=None, ExportLicenseNumber=None, ExportLicenseExpirationDate=None, CIMarksAndNumbers=None, PartNumber=None, NaftaDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CommodityId = CommodityId
        self.CommodityId_nsprefix_ = None
        self.Name = Name
        self.Name_nsprefix_ = None
        self.NumberOfPieces = NumberOfPieces
        self.NumberOfPieces_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.Purpose = Purpose
        self.validate_CommodityPurposeType(self.Purpose)
        self.Purpose_nsprefix_ = None
        self.CountryOfManufacture = CountryOfManufacture
        self.CountryOfManufacture_nsprefix_ = None
        self.HarmonizedCode = HarmonizedCode
        self.HarmonizedCode_nsprefix_ = None
        self.Weight = Weight
        self.Weight_nsprefix_ = None
        self.Quantity = Quantity
        self.Quantity_nsprefix_ = None
        self.QuantityUnits = QuantityUnits
        self.QuantityUnits_nsprefix_ = None
        if AdditionalMeasures is None:
            self.AdditionalMeasures = []
        else:
            self.AdditionalMeasures = AdditionalMeasures
        self.AdditionalMeasures_nsprefix_ = None
        self.UnitPrice = UnitPrice
        self.UnitPrice_nsprefix_ = None
        self.CustomsValue = CustomsValue
        self.CustomsValue_nsprefix_ = None
        if ExciseConditions is None:
            self.ExciseConditions = []
        else:
            self.ExciseConditions = ExciseConditions
        self.ExciseConditions_nsprefix_ = None
        self.ExportLicenseNumber = ExportLicenseNumber
        self.ExportLicenseNumber_nsprefix_ = None
        if isinstance(ExportLicenseExpirationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ExportLicenseExpirationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ExportLicenseExpirationDate
        self.ExportLicenseExpirationDate = initvalue_
        self.ExportLicenseExpirationDate_nsprefix_ = None
        self.CIMarksAndNumbers = CIMarksAndNumbers
        self.CIMarksAndNumbers_nsprefix_ = None
        self.PartNumber = PartNumber
        self.PartNumber_nsprefix_ = None
        self.NaftaDetail = NaftaDetail
        self.NaftaDetail_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Commodity)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Commodity.subclass:
            return Commodity.subclass(*args_, **kwargs_)
        else:
            return Commodity(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CommodityId(self):
        return self.CommodityId
    def set_CommodityId(self, CommodityId):
        self.CommodityId = CommodityId
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_NumberOfPieces(self):
        return self.NumberOfPieces
    def set_NumberOfPieces(self, NumberOfPieces):
        self.NumberOfPieces = NumberOfPieces
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_Purpose(self):
        return self.Purpose
    def set_Purpose(self, Purpose):
        self.Purpose = Purpose
    def get_CountryOfManufacture(self):
        return self.CountryOfManufacture
    def set_CountryOfManufacture(self, CountryOfManufacture):
        self.CountryOfManufacture = CountryOfManufacture
    def get_HarmonizedCode(self):
        return self.HarmonizedCode
    def set_HarmonizedCode(self, HarmonizedCode):
        self.HarmonizedCode = HarmonizedCode
    def get_Weight(self):
        return self.Weight
    def set_Weight(self, Weight):
        self.Weight = Weight
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_QuantityUnits(self):
        return self.QuantityUnits
    def set_QuantityUnits(self, QuantityUnits):
        self.QuantityUnits = QuantityUnits
    def get_AdditionalMeasures(self):
        return self.AdditionalMeasures
    def set_AdditionalMeasures(self, AdditionalMeasures):
        self.AdditionalMeasures = AdditionalMeasures
    def add_AdditionalMeasures(self, value):
        self.AdditionalMeasures.append(value)
    def insert_AdditionalMeasures_at(self, index, value):
        self.AdditionalMeasures.insert(index, value)
    def replace_AdditionalMeasures_at(self, index, value):
        self.AdditionalMeasures[index] = value
    def get_UnitPrice(self):
        return self.UnitPrice
    def set_UnitPrice(self, UnitPrice):
        self.UnitPrice = UnitPrice
    def get_CustomsValue(self):
        return self.CustomsValue
    def set_CustomsValue(self, CustomsValue):
        self.CustomsValue = CustomsValue
    def get_ExciseConditions(self):
        return self.ExciseConditions
    def set_ExciseConditions(self, ExciseConditions):
        self.ExciseConditions = ExciseConditions
    def add_ExciseConditions(self, value):
        self.ExciseConditions.append(value)
    def insert_ExciseConditions_at(self, index, value):
        self.ExciseConditions.insert(index, value)
    def replace_ExciseConditions_at(self, index, value):
        self.ExciseConditions[index] = value
    def get_ExportLicenseNumber(self):
        return self.ExportLicenseNumber
    def set_ExportLicenseNumber(self, ExportLicenseNumber):
        self.ExportLicenseNumber = ExportLicenseNumber
    def get_ExportLicenseExpirationDate(self):
        return self.ExportLicenseExpirationDate
    def set_ExportLicenseExpirationDate(self, ExportLicenseExpirationDate):
        self.ExportLicenseExpirationDate = ExportLicenseExpirationDate
    def get_CIMarksAndNumbers(self):
        return self.CIMarksAndNumbers
    def set_CIMarksAndNumbers(self, CIMarksAndNumbers):
        self.CIMarksAndNumbers = CIMarksAndNumbers
    def get_PartNumber(self):
        return self.PartNumber
    def set_PartNumber(self, PartNumber):
        self.PartNumber = PartNumber
    def get_NaftaDetail(self):
        return self.NaftaDetail
    def set_NaftaDetail(self, NaftaDetail):
        self.NaftaDetail = NaftaDetail
    def validate_CommodityPurposeType(self, value):
        result = True
        # Validate type CommodityPurposeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BUSINESS', 'CONSUMER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CommodityPurposeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.CommodityId is not None or
            self.Name is not None or
            self.NumberOfPieces is not None or
            self.Description is not None or
            self.Purpose is not None or
            self.CountryOfManufacture is not None or
            self.HarmonizedCode is not None or
            self.Weight is not None or
            self.Quantity is not None or
            self.QuantityUnits is not None or
            self.AdditionalMeasures or
            self.UnitPrice is not None or
            self.CustomsValue is not None or
            self.ExciseConditions or
            self.ExportLicenseNumber is not None or
            self.ExportLicenseExpirationDate is not None or
            self.CIMarksAndNumbers is not None or
            self.PartNumber is not None or
            self.NaftaDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Commodity', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Commodity')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Commodity':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Commodity')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Commodity', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Commodity'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Commodity', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommodityId is not None:
            namespaceprefix_ = self.CommodityId_nsprefix_ + ':' if (UseCapturedNS_ and self.CommodityId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommodityId>%s</%sCommodityId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CommodityId), input_name='CommodityId')), namespaceprefix_ , eol_))
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.NumberOfPieces is not None:
            namespaceprefix_ = self.NumberOfPieces_nsprefix_ + ':' if (UseCapturedNS_ and self.NumberOfPieces_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfPieces>%s</%sNumberOfPieces>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumberOfPieces, input_name='NumberOfPieces'), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.Purpose is not None:
            namespaceprefix_ = self.Purpose_nsprefix_ + ':' if (UseCapturedNS_ and self.Purpose_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurpose>%s</%sPurpose>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Purpose), input_name='Purpose')), namespaceprefix_ , eol_))
        if self.CountryOfManufacture is not None:
            namespaceprefix_ = self.CountryOfManufacture_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryOfManufacture_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryOfManufacture>%s</%sCountryOfManufacture>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryOfManufacture), input_name='CountryOfManufacture')), namespaceprefix_ , eol_))
        if self.HarmonizedCode is not None:
            namespaceprefix_ = self.HarmonizedCode_nsprefix_ + ':' if (UseCapturedNS_ and self.HarmonizedCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHarmonizedCode>%s</%sHarmonizedCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HarmonizedCode), input_name='HarmonizedCode')), namespaceprefix_ , eol_))
        if self.Weight is not None:
            namespaceprefix_ = self.Weight_nsprefix_ + ':' if (UseCapturedNS_ and self.Weight_nsprefix_) else ''
            self.Weight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Weight', pretty_print=pretty_print)
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.QuantityUnits is not None:
            namespaceprefix_ = self.QuantityUnits_nsprefix_ + ':' if (UseCapturedNS_ and self.QuantityUnits_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityUnits>%s</%sQuantityUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QuantityUnits), input_name='QuantityUnits')), namespaceprefix_ , eol_))
        for AdditionalMeasures_ in self.AdditionalMeasures:
            namespaceprefix_ = self.AdditionalMeasures_nsprefix_ + ':' if (UseCapturedNS_ and self.AdditionalMeasures_nsprefix_) else ''
            AdditionalMeasures_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AdditionalMeasures', pretty_print=pretty_print)
        if self.UnitPrice is not None:
            namespaceprefix_ = self.UnitPrice_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitPrice_nsprefix_) else ''
            self.UnitPrice.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UnitPrice', pretty_print=pretty_print)
        if self.CustomsValue is not None:
            namespaceprefix_ = self.CustomsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsValue_nsprefix_) else ''
            self.CustomsValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomsValue', pretty_print=pretty_print)
        for ExciseConditions_ in self.ExciseConditions:
            namespaceprefix_ = self.ExciseConditions_nsprefix_ + ':' if (UseCapturedNS_ and self.ExciseConditions_nsprefix_) else ''
            ExciseConditions_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExciseConditions', pretty_print=pretty_print)
        if self.ExportLicenseNumber is not None:
            namespaceprefix_ = self.ExportLicenseNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ExportLicenseNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExportLicenseNumber>%s</%sExportLicenseNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExportLicenseNumber), input_name='ExportLicenseNumber')), namespaceprefix_ , eol_))
        if self.ExportLicenseExpirationDate is not None:
            namespaceprefix_ = self.ExportLicenseExpirationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ExportLicenseExpirationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExportLicenseExpirationDate>%s</%sExportLicenseExpirationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ExportLicenseExpirationDate, input_name='ExportLicenseExpirationDate'), namespaceprefix_ , eol_))
        if self.CIMarksAndNumbers is not None:
            namespaceprefix_ = self.CIMarksAndNumbers_nsprefix_ + ':' if (UseCapturedNS_ and self.CIMarksAndNumbers_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCIMarksAndNumbers>%s</%sCIMarksAndNumbers>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CIMarksAndNumbers), input_name='CIMarksAndNumbers')), namespaceprefix_ , eol_))
        if self.PartNumber is not None:
            namespaceprefix_ = self.PartNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PartNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPartNumber>%s</%sPartNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PartNumber), input_name='PartNumber')), namespaceprefix_ , eol_))
        if self.NaftaDetail is not None:
            namespaceprefix_ = self.NaftaDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.NaftaDetail_nsprefix_) else ''
            self.NaftaDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NaftaDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CommodityId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CommodityId')
            value_ = self.gds_validate_string(value_, node, 'CommodityId')
            self.CommodityId = value_
            self.CommodityId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Name')
            value_ = self.gds_validate_string(value_, node, 'Name')
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
        elif nodeName_ == 'NumberOfPieces' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'NumberOfPieces')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'NumberOfPieces')
            self.NumberOfPieces = ival_
            self.NumberOfPieces_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'Purpose':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Purpose')
            value_ = self.gds_validate_string(value_, node, 'Purpose')
            self.Purpose = value_
            self.Purpose_nsprefix_ = child_.prefix
            # validate type CommodityPurposeType
            self.validate_CommodityPurposeType(self.Purpose)
        elif nodeName_ == 'CountryOfManufacture':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryOfManufacture')
            value_ = self.gds_validate_string(value_, node, 'CountryOfManufacture')
            self.CountryOfManufacture = value_
            self.CountryOfManufacture_nsprefix_ = child_.prefix
        elif nodeName_ == 'HarmonizedCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HarmonizedCode')
            value_ = self.gds_validate_string(value_, node, 'HarmonizedCode')
            self.HarmonizedCode = value_
            self.HarmonizedCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'Weight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'QuantityUnits':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'QuantityUnits')
            value_ = self.gds_validate_string(value_, node, 'QuantityUnits')
            self.QuantityUnits = value_
            self.QuantityUnits_nsprefix_ = child_.prefix
        elif nodeName_ == 'AdditionalMeasures':
            obj_ = Measure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AdditionalMeasures.append(obj_)
            obj_.original_tagname_ = 'AdditionalMeasures'
        elif nodeName_ == 'UnitPrice':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UnitPrice = obj_
            obj_.original_tagname_ = 'UnitPrice'
        elif nodeName_ == 'CustomsValue':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomsValue = obj_
            obj_.original_tagname_ = 'CustomsValue'
        elif nodeName_ == 'ExciseConditions':
            obj_ = EdtExciseCondition.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExciseConditions.append(obj_)
            obj_.original_tagname_ = 'ExciseConditions'
        elif nodeName_ == 'ExportLicenseNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExportLicenseNumber')
            value_ = self.gds_validate_string(value_, node, 'ExportLicenseNumber')
            self.ExportLicenseNumber = value_
            self.ExportLicenseNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ExportLicenseExpirationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ExportLicenseExpirationDate = dval_
            self.ExportLicenseExpirationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'CIMarksAndNumbers':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CIMarksAndNumbers')
            value_ = self.gds_validate_string(value_, node, 'CIMarksAndNumbers')
            self.CIMarksAndNumbers = value_
            self.CIMarksAndNumbers_nsprefix_ = child_.prefix
        elif nodeName_ == 'PartNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PartNumber')
            value_ = self.gds_validate_string(value_, node, 'PartNumber')
            self.PartNumber = value_
            self.PartNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'NaftaDetail':
            obj_ = NaftaCommodityDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NaftaDetail = obj_
            obj_.original_tagname_ = 'NaftaDetail'
# end class Commodity


class CompletedTrackDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, DuplicateWaybill=None, MoreData=None, PagingToken=None, TrackDetailsCount=None, TrackDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HighestSeverity = HighestSeverity
        self.validate_NotificationSeverityType(self.HighestSeverity)
        self.HighestSeverity_nsprefix_ = None
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.Notifications_nsprefix_ = None
        self.DuplicateWaybill = DuplicateWaybill
        self.DuplicateWaybill_nsprefix_ = None
        self.MoreData = MoreData
        self.MoreData_nsprefix_ = None
        self.PagingToken = PagingToken
        self.PagingToken_nsprefix_ = None
        self.TrackDetailsCount = TrackDetailsCount
        self.TrackDetailsCount_nsprefix_ = None
        if TrackDetails is None:
            self.TrackDetails = []
        else:
            self.TrackDetails = TrackDetails
        self.TrackDetails_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CompletedTrackDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CompletedTrackDetail.subclass:
            return CompletedTrackDetail.subclass(*args_, **kwargs_)
        else:
            return CompletedTrackDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HighestSeverity(self):
        return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity):
        self.HighestSeverity = HighestSeverity
    def get_Notifications(self):
        return self.Notifications
    def set_Notifications(self, Notifications):
        self.Notifications = Notifications
    def add_Notifications(self, value):
        self.Notifications.append(value)
    def insert_Notifications_at(self, index, value):
        self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value):
        self.Notifications[index] = value
    def get_DuplicateWaybill(self):
        return self.DuplicateWaybill
    def set_DuplicateWaybill(self, DuplicateWaybill):
        self.DuplicateWaybill = DuplicateWaybill
    def get_MoreData(self):
        return self.MoreData
    def set_MoreData(self, MoreData):
        self.MoreData = MoreData
    def get_PagingToken(self):
        return self.PagingToken
    def set_PagingToken(self, PagingToken):
        self.PagingToken = PagingToken
    def get_TrackDetailsCount(self):
        return self.TrackDetailsCount
    def set_TrackDetailsCount(self, TrackDetailsCount):
        self.TrackDetailsCount = TrackDetailsCount
    def get_TrackDetails(self):
        return self.TrackDetails
    def set_TrackDetails(self, TrackDetails):
        self.TrackDetails = TrackDetails
    def add_TrackDetails(self, value):
        self.TrackDetails.append(value)
    def insert_TrackDetails_at(self, index, value):
        self.TrackDetails.insert(index, value)
    def replace_TrackDetails_at(self, index, value):
        self.TrackDetails[index] = value
    def validate_NotificationSeverityType(self, value):
        result = True
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.DuplicateWaybill is not None or
            self.MoreData is not None or
            self.PagingToken is not None or
            self.TrackDetailsCount is not None or
            self.TrackDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompletedTrackDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CompletedTrackDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CompletedTrackDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CompletedTrackDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CompletedTrackDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CompletedTrackDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompletedTrackDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HighestSeverity is not None:
            namespaceprefix_ = self.HighestSeverity_nsprefix_ + ':' if (UseCapturedNS_ and self.HighestSeverity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HighestSeverity), input_name='HighestSeverity')), namespaceprefix_ , eol_))
        for Notifications_ in self.Notifications:
            namespaceprefix_ = self.Notifications_nsprefix_ + ':' if (UseCapturedNS_ and self.Notifications_nsprefix_) else ''
            Notifications_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Notifications', pretty_print=pretty_print)
        if self.DuplicateWaybill is not None:
            namespaceprefix_ = self.DuplicateWaybill_nsprefix_ + ':' if (UseCapturedNS_ and self.DuplicateWaybill_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDuplicateWaybill>%s</%sDuplicateWaybill>%s' % (namespaceprefix_ , self.gds_format_boolean(self.DuplicateWaybill, input_name='DuplicateWaybill'), namespaceprefix_ , eol_))
        if self.MoreData is not None:
            namespaceprefix_ = self.MoreData_nsprefix_ + ':' if (UseCapturedNS_ and self.MoreData_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMoreData>%s</%sMoreData>%s' % (namespaceprefix_ , self.gds_format_boolean(self.MoreData, input_name='MoreData'), namespaceprefix_ , eol_))
        if self.PagingToken is not None:
            namespaceprefix_ = self.PagingToken_nsprefix_ + ':' if (UseCapturedNS_ and self.PagingToken_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPagingToken>%s</%sPagingToken>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PagingToken), input_name='PagingToken')), namespaceprefix_ , eol_))
        if self.TrackDetailsCount is not None:
            namespaceprefix_ = self.TrackDetailsCount_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackDetailsCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTrackDetailsCount>%s</%sTrackDetailsCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.TrackDetailsCount, input_name='TrackDetailsCount'), namespaceprefix_ , eol_))
        for TrackDetails_ in self.TrackDetails:
            namespaceprefix_ = self.TrackDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackDetails_nsprefix_) else ''
            TrackDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TrackDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HighestSeverity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HighestSeverity')
            value_ = self.gds_validate_string(value_, node, 'HighestSeverity')
            self.HighestSeverity = value_
            self.HighestSeverity_nsprefix_ = child_.prefix
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.HighestSeverity)
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'DuplicateWaybill':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'DuplicateWaybill')
            ival_ = self.gds_validate_boolean(ival_, node, 'DuplicateWaybill')
            self.DuplicateWaybill = ival_
            self.DuplicateWaybill_nsprefix_ = child_.prefix
        elif nodeName_ == 'MoreData':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'MoreData')
            ival_ = self.gds_validate_boolean(ival_, node, 'MoreData')
            self.MoreData = ival_
            self.MoreData_nsprefix_ = child_.prefix
        elif nodeName_ == 'PagingToken':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PagingToken')
            value_ = self.gds_validate_string(value_, node, 'PagingToken')
            self.PagingToken = value_
            self.PagingToken_nsprefix_ = child_.prefix
        elif nodeName_ == 'TrackDetailsCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'TrackDetailsCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'TrackDetailsCount')
            self.TrackDetailsCount = ival_
            self.TrackDetailsCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'TrackDetails':
            obj_ = TrackDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TrackDetails.append(obj_)
            obj_.original_tagname_ = 'TrackDetails'
# end class CompletedTrackDetail


class Contact(GeneratedsSuper):
    """The descriptive data for a point-of-contact person."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PersonName=None, Title=None, CompanyName=None, PhoneNumber=None, PhoneExtension=None, TollFreePhoneNumber=None, PagerNumber=None, FaxNumber=None, EMailAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PersonName = PersonName
        self.PersonName_nsprefix_ = None
        self.Title = Title
        self.Title_nsprefix_ = None
        self.CompanyName = CompanyName
        self.CompanyName_nsprefix_ = None
        self.PhoneNumber = PhoneNumber
        self.PhoneNumber_nsprefix_ = None
        self.PhoneExtension = PhoneExtension
        self.PhoneExtension_nsprefix_ = None
        self.TollFreePhoneNumber = TollFreePhoneNumber
        self.TollFreePhoneNumber_nsprefix_ = None
        self.PagerNumber = PagerNumber
        self.PagerNumber_nsprefix_ = None
        self.FaxNumber = FaxNumber
        self.FaxNumber_nsprefix_ = None
        self.EMailAddress = EMailAddress
        self.EMailAddress_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Contact)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Contact.subclass:
            return Contact.subclass(*args_, **kwargs_)
        else:
            return Contact(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PersonName(self):
        return self.PersonName
    def set_PersonName(self, PersonName):
        self.PersonName = PersonName
    def get_Title(self):
        return self.Title
    def set_Title(self, Title):
        self.Title = Title
    def get_CompanyName(self):
        return self.CompanyName
    def set_CompanyName(self, CompanyName):
        self.CompanyName = CompanyName
    def get_PhoneNumber(self):
        return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber):
        self.PhoneNumber = PhoneNumber
    def get_PhoneExtension(self):
        return self.PhoneExtension
    def set_PhoneExtension(self, PhoneExtension):
        self.PhoneExtension = PhoneExtension
    def get_TollFreePhoneNumber(self):
        return self.TollFreePhoneNumber
    def set_TollFreePhoneNumber(self, TollFreePhoneNumber):
        self.TollFreePhoneNumber = TollFreePhoneNumber
    def get_PagerNumber(self):
        return self.PagerNumber
    def set_PagerNumber(self, PagerNumber):
        self.PagerNumber = PagerNumber
    def get_FaxNumber(self):
        return self.FaxNumber
    def set_FaxNumber(self, FaxNumber):
        self.FaxNumber = FaxNumber
    def get_EMailAddress(self):
        return self.EMailAddress
    def set_EMailAddress(self, EMailAddress):
        self.EMailAddress = EMailAddress
    def hasContent_(self):
        if (
            self.PersonName is not None or
            self.Title is not None or
            self.CompanyName is not None or
            self.PhoneNumber is not None or
            self.PhoneExtension is not None or
            self.TollFreePhoneNumber is not None or
            self.PagerNumber is not None or
            self.FaxNumber is not None or
            self.EMailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Contact', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Contact')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Contact':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Contact')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Contact', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Contact'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Contact', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PersonName is not None:
            namespaceprefix_ = self.PersonName_nsprefix_ + ':' if (UseCapturedNS_ and self.PersonName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPersonName>%s</%sPersonName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PersonName), input_name='PersonName')), namespaceprefix_ , eol_))
        if self.Title is not None:
            namespaceprefix_ = self.Title_nsprefix_ + ':' if (UseCapturedNS_ and self.Title_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTitle>%s</%sTitle>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Title), input_name='Title')), namespaceprefix_ , eol_))
        if self.CompanyName is not None:
            namespaceprefix_ = self.CompanyName_nsprefix_ + ':' if (UseCapturedNS_ and self.CompanyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompanyName>%s</%sCompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CompanyName), input_name='CompanyName')), namespaceprefix_ , eol_))
        if self.PhoneNumber is not None:
            namespaceprefix_ = self.PhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhoneNumber>%s</%sPhoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), namespaceprefix_ , eol_))
        if self.PhoneExtension is not None:
            namespaceprefix_ = self.PhoneExtension_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneExtension_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhoneExtension>%s</%sPhoneExtension>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhoneExtension), input_name='PhoneExtension')), namespaceprefix_ , eol_))
        if self.TollFreePhoneNumber is not None:
            namespaceprefix_ = self.TollFreePhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TollFreePhoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTollFreePhoneNumber>%s</%sTollFreePhoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TollFreePhoneNumber), input_name='TollFreePhoneNumber')), namespaceprefix_ , eol_))
        if self.PagerNumber is not None:
            namespaceprefix_ = self.PagerNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PagerNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPagerNumber>%s</%sPagerNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PagerNumber), input_name='PagerNumber')), namespaceprefix_ , eol_))
        if self.FaxNumber is not None:
            namespaceprefix_ = self.FaxNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.FaxNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFaxNumber>%s</%sFaxNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FaxNumber), input_name='FaxNumber')), namespaceprefix_ , eol_))
        if self.EMailAddress is not None:
            namespaceprefix_ = self.EMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PersonName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PersonName')
            value_ = self.gds_validate_string(value_, node, 'PersonName')
            self.PersonName = value_
            self.PersonName_nsprefix_ = child_.prefix
        elif nodeName_ == 'Title':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Title')
            value_ = self.gds_validate_string(value_, node, 'Title')
            self.Title = value_
            self.Title_nsprefix_ = child_.prefix
        elif nodeName_ == 'CompanyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CompanyName')
            value_ = self.gds_validate_string(value_, node, 'CompanyName')
            self.CompanyName = value_
            self.CompanyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'PhoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhoneNumber')
            value_ = self.gds_validate_string(value_, node, 'PhoneNumber')
            self.PhoneNumber = value_
            self.PhoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'PhoneExtension':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhoneExtension')
            value_ = self.gds_validate_string(value_, node, 'PhoneExtension')
            self.PhoneExtension = value_
            self.PhoneExtension_nsprefix_ = child_.prefix
        elif nodeName_ == 'TollFreePhoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TollFreePhoneNumber')
            value_ = self.gds_validate_string(value_, node, 'TollFreePhoneNumber')
            self.TollFreePhoneNumber = value_
            self.TollFreePhoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'PagerNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PagerNumber')
            value_ = self.gds_validate_string(value_, node, 'PagerNumber')
            self.PagerNumber = value_
            self.PagerNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'FaxNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FaxNumber')
            value_ = self.gds_validate_string(value_, node, 'FaxNumber')
            self.FaxNumber = value_
            self.FaxNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'EMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EMailAddress')
            value_ = self.gds_validate_string(value_, node, 'EMailAddress')
            self.EMailAddress = value_
            self.EMailAddress_nsprefix_ = child_.prefix
# end class Contact


class ContactAndAddress(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Contact=None, Address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Contact = Contact
        self.Contact_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactAndAddress)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactAndAddress.subclass:
            return ContactAndAddress.subclass(*args_, **kwargs_)
        else:
            return ContactAndAddress(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Contact(self):
        return self.Contact
    def set_Contact(self, Contact):
        self.Contact = Contact
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def hasContent_(self):
        if (
            self.Contact is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ContactAndAddress', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContactAndAddress')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContactAndAddress':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContactAndAddress')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContactAndAddress', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContactAndAddress'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ContactAndAddress', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Contact is not None:
            namespaceprefix_ = self.Contact_nsprefix_ + ':' if (UseCapturedNS_ and self.Contact_nsprefix_) else ''
            self.Contact.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Contact', pretty_print=pretty_print)
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Contact':
            obj_ = Contact.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Address':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class ContactAndAddress


class ContentRecord(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PartNumber=None, ItemNumber=None, ReceivedQuantity=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PartNumber = PartNumber
        self.PartNumber_nsprefix_ = None
        self.ItemNumber = ItemNumber
        self.ItemNumber_nsprefix_ = None
        self.ReceivedQuantity = ReceivedQuantity
        self.ReceivedQuantity_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentRecord)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentRecord.subclass:
            return ContentRecord.subclass(*args_, **kwargs_)
        else:
            return ContentRecord(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PartNumber(self):
        return self.PartNumber
    def set_PartNumber(self, PartNumber):
        self.PartNumber = PartNumber
    def get_ItemNumber(self):
        return self.ItemNumber
    def set_ItemNumber(self, ItemNumber):
        self.ItemNumber = ItemNumber
    def get_ReceivedQuantity(self):
        return self.ReceivedQuantity
    def set_ReceivedQuantity(self, ReceivedQuantity):
        self.ReceivedQuantity = ReceivedQuantity
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.PartNumber is not None or
            self.ItemNumber is not None or
            self.ReceivedQuantity is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ContentRecord', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentRecord')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentRecord':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentRecord')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentRecord', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentRecord'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ContentRecord', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PartNumber is not None:
            namespaceprefix_ = self.PartNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PartNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPartNumber>%s</%sPartNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PartNumber), input_name='PartNumber')), namespaceprefix_ , eol_))
        if self.ItemNumber is not None:
            namespaceprefix_ = self.ItemNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ItemNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemNumber>%s</%sItemNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ItemNumber), input_name='ItemNumber')), namespaceprefix_ , eol_))
        if self.ReceivedQuantity is not None:
            namespaceprefix_ = self.ReceivedQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.ReceivedQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReceivedQuantity>%s</%sReceivedQuantity>%s' % (namespaceprefix_ , self.gds_format_integer(self.ReceivedQuantity, input_name='ReceivedQuantity'), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PartNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PartNumber')
            value_ = self.gds_validate_string(value_, node, 'PartNumber')
            self.PartNumber = value_
            self.PartNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ItemNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ItemNumber')
            value_ = self.gds_validate_string(value_, node, 'ItemNumber')
            self.ItemNumber = value_
            self.ItemNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ReceivedQuantity' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'ReceivedQuantity')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'ReceivedQuantity')
            self.ReceivedQuantity = ival_
            self.ReceivedQuantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class ContentRecord


class CustomerExceptionRequestDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, StatusCode=None, StatusDescription=None, CreateTime=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Id = Id
        self.Id_nsprefix_ = None
        self.StatusCode = StatusCode
        self.StatusCode_nsprefix_ = None
        self.StatusDescription = StatusDescription
        self.StatusDescription_nsprefix_ = None
        if isinstance(CreateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(CreateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = CreateTime
        self.CreateTime = initvalue_
        self.CreateTime_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomerExceptionRequestDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomerExceptionRequestDetail.subclass:
            return CustomerExceptionRequestDetail.subclass(*args_, **kwargs_)
        else:
            return CustomerExceptionRequestDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_StatusCode(self):
        return self.StatusCode
    def set_StatusCode(self, StatusCode):
        self.StatusCode = StatusCode
    def get_StatusDescription(self):
        return self.StatusDescription
    def set_StatusDescription(self, StatusDescription):
        self.StatusDescription = StatusDescription
    def get_CreateTime(self):
        return self.CreateTime
    def set_CreateTime(self, CreateTime):
        self.CreateTime = CreateTime
    def hasContent_(self):
        if (
            self.Id is not None or
            self.StatusCode is not None or
            self.StatusDescription is not None or
            self.CreateTime is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerExceptionRequestDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomerExceptionRequestDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomerExceptionRequestDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomerExceptionRequestDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomerExceptionRequestDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomerExceptionRequestDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerExceptionRequestDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Id is not None:
            namespaceprefix_ = self.Id_nsprefix_ + ':' if (UseCapturedNS_ and self.Id_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sId>%s</%sId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), namespaceprefix_ , eol_))
        if self.StatusCode is not None:
            namespaceprefix_ = self.StatusCode_nsprefix_ + ':' if (UseCapturedNS_ and self.StatusCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatusCode>%s</%sStatusCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StatusCode), input_name='StatusCode')), namespaceprefix_ , eol_))
        if self.StatusDescription is not None:
            namespaceprefix_ = self.StatusDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.StatusDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatusDescription>%s</%sStatusDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StatusDescription), input_name='StatusDescription')), namespaceprefix_ , eol_))
        if self.CreateTime is not None:
            namespaceprefix_ = self.CreateTime_nsprefix_ + ':' if (UseCapturedNS_ and self.CreateTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreateTime>%s</%sCreateTime>%s' % (namespaceprefix_ , self.gds_format_datetime(self.CreateTime, input_name='CreateTime'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Id':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Id')
            value_ = self.gds_validate_string(value_, node, 'Id')
            self.Id = value_
            self.Id_nsprefix_ = child_.prefix
        elif nodeName_ == 'StatusCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StatusCode')
            value_ = self.gds_validate_string(value_, node, 'StatusCode')
            self.StatusCode = value_
            self.StatusCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'StatusDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StatusDescription')
            value_ = self.gds_validate_string(value_, node, 'StatusDescription')
            self.StatusDescription = value_
            self.StatusDescription_nsprefix_ = child_.prefix
        elif nodeName_ == 'CreateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.CreateTime = dval_
            self.CreateTime_nsprefix_ = child_.prefix
# end class CustomerExceptionRequestDetail


class CustomsOptionDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_CustomsOptionType(self.Type)
        self.Type_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomsOptionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomsOptionDetail.subclass:
            return CustomsOptionDetail.subclass(*args_, **kwargs_)
        else:
            return CustomsOptionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def validate_CustomsOptionType(self, value):
        result = True
        # Validate type CustomsOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['COURTESY_RETURN_LABEL', 'EXHIBITION_TRADE_SHOW', 'FAULTY_ITEM', 'FOLLOWING_REPAIR', 'FOR_REPAIR', 'ITEM_FOR_LOAN', 'OTHER', 'REJECTED', 'REPLACEMENT', 'TRIAL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomsOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomsOptionDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomsOptionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomsOptionDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomsOptionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomsOptionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomsOptionDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomsOptionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type CustomsOptionType
            self.validate_CustomsOptionType(self.Type)
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class CustomsOptionDetail


class DateRange(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Begins=None, Ends=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(Begins, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Begins, '%Y-%m-%d').date()
        else:
            initvalue_ = Begins
        self.Begins = initvalue_
        self.Begins_nsprefix_ = None
        if isinstance(Ends, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Ends, '%Y-%m-%d').date()
        else:
            initvalue_ = Ends
        self.Ends = initvalue_
        self.Ends_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateRange)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateRange.subclass:
            return DateRange.subclass(*args_, **kwargs_)
        else:
            return DateRange(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Begins(self):
        return self.Begins
    def set_Begins(self, Begins):
        self.Begins = Begins
    def get_Ends(self):
        return self.Ends
    def set_Ends(self, Ends):
        self.Ends = Ends
    def hasContent_(self):
        if (
            self.Begins is not None or
            self.Ends is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DateRange', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DateRange')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DateRange':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DateRange')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DateRange', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DateRange'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DateRange', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Begins is not None:
            namespaceprefix_ = self.Begins_nsprefix_ + ':' if (UseCapturedNS_ and self.Begins_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBegins>%s</%sBegins>%s' % (namespaceprefix_ , self.gds_format_date(self.Begins, input_name='Begins'), namespaceprefix_ , eol_))
        if self.Ends is not None:
            namespaceprefix_ = self.Ends_nsprefix_ + ':' if (UseCapturedNS_ and self.Ends_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEnds>%s</%sEnds>%s' % (namespaceprefix_ , self.gds_format_date(self.Ends, input_name='Ends'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Begins':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Begins = dval_
            self.Begins_nsprefix_ = child_.prefix
        elif nodeName_ == 'Ends':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Ends = dval_
            self.Ends_nsprefix_ = child_.prefix
# end class DateRange


class DeliveryOptionEligibilityDetail(GeneratedsSuper):
    """Details about the eligibility for a delivery option."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Option=None, Eligibility=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Option = Option
        self.validate_DeliveryOptionType(self.Option)
        self.Option_nsprefix_ = None
        self.Eligibility = Eligibility
        self.validate_EligibilityType(self.Eligibility)
        self.Eligibility_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeliveryOptionEligibilityDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeliveryOptionEligibilityDetail.subclass:
            return DeliveryOptionEligibilityDetail.subclass(*args_, **kwargs_)
        else:
            return DeliveryOptionEligibilityDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Option(self):
        return self.Option
    def set_Option(self, Option):
        self.Option = Option
    def get_Eligibility(self):
        return self.Eligibility
    def set_Eligibility(self, Eligibility):
        self.Eligibility = Eligibility
    def validate_DeliveryOptionType(self, value):
        result = True
        # Validate type DeliveryOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['INDIRECT_SIGNATURE_RELEASE', 'REDIRECT_TO_HOLD_AT_LOCATION', 'REROUTE', 'RESCHEDULE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DeliveryOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_EligibilityType(self, value):
        result = True
        # Validate type EligibilityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ELIGIBLE', 'INELIGIBLE', 'POSSIBLY_ELIGIBLE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on EligibilityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Option is not None or
            self.Eligibility is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeliveryOptionEligibilityDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeliveryOptionEligibilityDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DeliveryOptionEligibilityDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DeliveryOptionEligibilityDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DeliveryOptionEligibilityDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DeliveryOptionEligibilityDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeliveryOptionEligibilityDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Option is not None:
            namespaceprefix_ = self.Option_nsprefix_ + ':' if (UseCapturedNS_ and self.Option_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOption>%s</%sOption>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Option), input_name='Option')), namespaceprefix_ , eol_))
        if self.Eligibility is not None:
            namespaceprefix_ = self.Eligibility_nsprefix_ + ':' if (UseCapturedNS_ and self.Eligibility_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEligibility>%s</%sEligibility>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Eligibility), input_name='Eligibility')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Option':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Option')
            value_ = self.gds_validate_string(value_, node, 'Option')
            self.Option = value_
            self.Option_nsprefix_ = child_.prefix
            # validate type DeliveryOptionType
            self.validate_DeliveryOptionType(self.Option)
        elif nodeName_ == 'Eligibility':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Eligibility')
            value_ = self.gds_validate_string(value_, node, 'Eligibility')
            self.Eligibility = value_
            self.Eligibility_nsprefix_ = child_.prefix
            # validate type EligibilityType
            self.validate_EligibilityType(self.Eligibility)
# end class DeliveryOptionEligibilityDetail


class Dimensions(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Length=None, Width=None, Height=None, Units=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Length = Length
        self.Length_nsprefix_ = None
        self.Width = Width
        self.Width_nsprefix_ = None
        self.Height = Height
        self.Height_nsprefix_ = None
        self.Units = Units
        self.validate_LinearUnits(self.Units)
        self.Units_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Dimensions)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Dimensions.subclass:
            return Dimensions.subclass(*args_, **kwargs_)
        else:
            return Dimensions(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Length(self):
        return self.Length
    def set_Length(self, Length):
        self.Length = Length
    def get_Width(self):
        return self.Width
    def set_Width(self, Width):
        self.Width = Width
    def get_Height(self):
        return self.Height
    def set_Height(self, Height):
        self.Height = Height
    def get_Units(self):
        return self.Units
    def set_Units(self, Units):
        self.Units = Units
    def validate_LinearUnits(self, value):
        result = True
        # Validate type LinearUnits, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CM', 'IN']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on LinearUnits' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Length is not None or
            self.Width is not None or
            self.Height is not None or
            self.Units is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Dimensions', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Dimensions')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Dimensions':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Dimensions')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Dimensions', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Dimensions'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Dimensions', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Length is not None:
            namespaceprefix_ = self.Length_nsprefix_ + ':' if (UseCapturedNS_ and self.Length_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLength>%s</%sLength>%s' % (namespaceprefix_ , self.gds_format_integer(self.Length, input_name='Length'), namespaceprefix_ , eol_))
        if self.Width is not None:
            namespaceprefix_ = self.Width_nsprefix_ + ':' if (UseCapturedNS_ and self.Width_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWidth>%s</%sWidth>%s' % (namespaceprefix_ , self.gds_format_integer(self.Width, input_name='Width'), namespaceprefix_ , eol_))
        if self.Height is not None:
            namespaceprefix_ = self.Height_nsprefix_ + ':' if (UseCapturedNS_ and self.Height_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHeight>%s</%sHeight>%s' % (namespaceprefix_ , self.gds_format_integer(self.Height, input_name='Height'), namespaceprefix_ , eol_))
        if self.Units is not None:
            namespaceprefix_ = self.Units_nsprefix_ + ':' if (UseCapturedNS_ and self.Units_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnits>%s</%sUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Length' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Length')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Length')
            self.Length = ival_
            self.Length_nsprefix_ = child_.prefix
        elif nodeName_ == 'Width' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Width')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Width')
            self.Width = ival_
            self.Width_nsprefix_ = child_.prefix
        elif nodeName_ == 'Height' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Height')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Height')
            self.Height = ival_
            self.Height_nsprefix_ = child_.prefix
        elif nodeName_ == 'Units':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Units')
            value_ = self.gds_validate_string(value_, node, 'Units')
            self.Units = value_
            self.Units_nsprefix_ = child_.prefix
            # validate type LinearUnits
            self.validate_LinearUnits(self.Units)
# end class Dimensions


class Distance(GeneratedsSuper):
    """Driving or other transportation distances, distinct from dimension
    measurements."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Value=None, Units=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
        self.Units = Units
        self.validate_DistanceUnits(self.Units)
        self.Units_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Distance)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Distance.subclass:
            return Distance.subclass(*args_, **kwargs_)
        else:
            return Distance(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def get_Units(self):
        return self.Units
    def set_Units(self, Units):
        self.Units = Units
    def validate_DistanceUnits(self, value):
        result = True
        # Validate type DistanceUnits, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['KM', 'MI']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DistanceUnits' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Value is not None or
            self.Units is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Distance', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Distance')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Distance':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Distance')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Distance', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Distance'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Distance', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Value, input_name='Value'), namespaceprefix_ , eol_))
        if self.Units is not None:
            namespaceprefix_ = self.Units_nsprefix_ + ':' if (UseCapturedNS_ and self.Units_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnits>%s</%sUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Value' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Value')
            fval_ = self.gds_validate_decimal(fval_, node, 'Value')
            self.Value = fval_
            self.Value_nsprefix_ = child_.prefix
        elif nodeName_ == 'Units':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Units')
            value_ = self.gds_validate_string(value_, node, 'Units')
            self.Units = value_
            self.Units_nsprefix_ = child_.prefix
            # validate type DistanceUnits
            self.validate_DistanceUnits(self.Units)
# end class Distance


class DocumentPart(GeneratedsSuper):
    """Successive parts of the document (only one, for PDF documents)."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SequenceNumber=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.SequenceNumber = SequenceNumber
        self.SequenceNumber_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocumentPart)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocumentPart.subclass:
            return DocumentPart.subclass(*args_, **kwargs_)
        else:
            return DocumentPart(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SequenceNumber(self):
        return self.SequenceNumber
    def set_SequenceNumber(self, SequenceNumber):
        self.SequenceNumber = SequenceNumber
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def hasContent_(self):
        if (
            self.SequenceNumber is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocumentPart', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocumentPart')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DocumentPart':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocumentPart')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DocumentPart', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DocumentPart'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocumentPart', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SequenceNumber is not None:
            namespaceprefix_ = self.SequenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.SequenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSequenceNumber>%s</%sSequenceNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.SequenceNumber, input_name='SequenceNumber'), namespaceprefix_ , eol_))
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContent>%s</%sContent>%s' % (namespaceprefix_ , self.gds_format_base64(self.Content, input_name='Content'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SequenceNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'SequenceNumber')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'SequenceNumber')
            self.SequenceNumber = ival_
            self.SequenceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Content':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Content')
            else:
                bval_ = None
            self.Content = bval_
            self.Content_nsprefix_ = child_.prefix
# end class DocumentPart


class EMailDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EmailAddress=None, Name=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.EmailAddress = EmailAddress
        self.EmailAddress_nsprefix_ = None
        self.Name = Name
        self.Name_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EMailDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EMailDetail.subclass:
            return EMailDetail.subclass(*args_, **kwargs_)
        else:
            return EMailDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EmailAddress(self):
        return self.EmailAddress
    def set_EmailAddress(self, EmailAddress):
        self.EmailAddress = EmailAddress
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def hasContent_(self):
        if (
            self.EmailAddress is not None or
            self.Name is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMailDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EMailDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EMailDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EMailDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EMailDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EMailDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMailDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EmailAddress is not None:
            namespaceprefix_ = self.EmailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EmailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmailAddress>%s</%sEmailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EmailAddress), input_name='EmailAddress')), namespaceprefix_ , eol_))
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EmailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EmailAddress')
            value_ = self.gds_validate_string(value_, node, 'EmailAddress')
            self.EmailAddress = value_
            self.EmailAddress_nsprefix_ = child_.prefix
        elif nodeName_ == 'Name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Name')
            value_ = self.gds_validate_string(value_, node, 'Name')
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
# end class EMailDetail


class EdtExciseCondition(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Category=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Category = Category
        self.Category_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EdtExciseCondition)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EdtExciseCondition.subclass:
            return EdtExciseCondition.subclass(*args_, **kwargs_)
        else:
            return EdtExciseCondition(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Category(self):
        return self.Category
    def set_Category(self, Category):
        self.Category = Category
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def hasContent_(self):
        if (
            self.Category is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EdtExciseCondition', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EdtExciseCondition')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EdtExciseCondition':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EdtExciseCondition')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EdtExciseCondition', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EdtExciseCondition'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EdtExciseCondition', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Category is not None:
            namespaceprefix_ = self.Category_nsprefix_ + ':' if (UseCapturedNS_ and self.Category_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCategory>%s</%sCategory>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Category), input_name='Category')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Category':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Category')
            value_ = self.gds_validate_string(value_, node, 'Category')
            self.Category = value_
            self.Category_nsprefix_ = child_.prefix
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
# end class EdtExciseCondition


class FaxDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PhoneNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PhoneNumber = PhoneNumber
        self.PhoneNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FaxDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FaxDetail.subclass:
            return FaxDetail.subclass(*args_, **kwargs_)
        else:
            return FaxDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PhoneNumber(self):
        return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber):
        self.PhoneNumber = PhoneNumber
    def hasContent_(self):
        if (
            self.PhoneNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FaxDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FaxDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FaxDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FaxDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FaxDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FaxDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FaxDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PhoneNumber is not None:
            namespaceprefix_ = self.PhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhoneNumber>%s</%sPhoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PhoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhoneNumber')
            value_ = self.gds_validate_string(value_, node, 'PhoneNumber')
            self.PhoneNumber = value_
            self.PhoneNumber_nsprefix_ = child_.prefix
# end class FaxDetail


class GetTrackingDocumentsReply(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, Documents=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HighestSeverity = HighestSeverity
        self.validate_NotificationSeverityType(self.HighestSeverity)
        self.HighestSeverity_nsprefix_ = None
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.Notifications_nsprefix_ = None
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = None
        self.Version = Version
        self.Version_nsprefix_ = None
        if Documents is None:
            self.Documents = []
        else:
            self.Documents = Documents
        self.Documents_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetTrackingDocumentsReply)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetTrackingDocumentsReply.subclass:
            return GetTrackingDocumentsReply.subclass(*args_, **kwargs_)
        else:
            return GetTrackingDocumentsReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HighestSeverity(self):
        return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity):
        self.HighestSeverity = HighestSeverity
    def get_Notifications(self):
        return self.Notifications
    def set_Notifications(self, Notifications):
        self.Notifications = Notifications
    def add_Notifications(self, value):
        self.Notifications.append(value)
    def insert_Notifications_at(self, index, value):
        self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value):
        self.Notifications[index] = value
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_Documents(self):
        return self.Documents
    def set_Documents(self, Documents):
        self.Documents = Documents
    def add_Documents(self, value):
        self.Documents.append(value)
    def insert_Documents_at(self, index, value):
        self.Documents.insert(index, value)
    def replace_Documents_at(self, index, value):
        self.Documents[index] = value
    def validate_NotificationSeverityType(self, value):
        result = True
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.Documents
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetTrackingDocumentsReply', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetTrackingDocumentsReply')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GetTrackingDocumentsReply':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetTrackingDocumentsReply')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GetTrackingDocumentsReply', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GetTrackingDocumentsReply'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetTrackingDocumentsReply', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HighestSeverity is not None:
            namespaceprefix_ = self.HighestSeverity_nsprefix_ + ':' if (UseCapturedNS_ and self.HighestSeverity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HighestSeverity), input_name='HighestSeverity')), namespaceprefix_ , eol_))
        for Notifications_ in self.Notifications:
            namespaceprefix_ = self.Notifications_nsprefix_ + ':' if (UseCapturedNS_ and self.Notifications_nsprefix_) else ''
            Notifications_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Notifications', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        for Documents_ in self.Documents:
            namespaceprefix_ = self.Documents_nsprefix_ + ':' if (UseCapturedNS_ and self.Documents_nsprefix_) else ''
            Documents_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Documents', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HighestSeverity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HighestSeverity')
            value_ = self.gds_validate_string(value_, node, 'HighestSeverity')
            self.HighestSeverity = value_
            self.HighestSeverity_nsprefix_ = child_.prefix
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.HighestSeverity)
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'Documents':
            obj_ = TrackingDocument.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Documents.append(obj_)
            obj_.original_tagname_ = 'Documents'
# end class GetTrackingDocumentsReply


class GetTrackingDocumentsRequest(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, SelectionDetails=None, TrackingDocumentSpecification=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.WebAuthenticationDetail_nsprefix_ = None
        self.ClientDetail = ClientDetail
        self.ClientDetail_nsprefix_ = None
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = None
        self.Version = Version
        self.Version_nsprefix_ = None
        if SelectionDetails is None:
            self.SelectionDetails = []
        else:
            self.SelectionDetails = SelectionDetails
        self.SelectionDetails_nsprefix_ = None
        self.TrackingDocumentSpecification = TrackingDocumentSpecification
        self.TrackingDocumentSpecification_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GetTrackingDocumentsRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GetTrackingDocumentsRequest.subclass:
            return GetTrackingDocumentsRequest.subclass(*args_, **kwargs_)
        else:
            return GetTrackingDocumentsRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_WebAuthenticationDetail(self):
        return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail):
        self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self):
        return self.ClientDetail
    def set_ClientDetail(self, ClientDetail):
        self.ClientDetail = ClientDetail
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_SelectionDetails(self):
        return self.SelectionDetails
    def set_SelectionDetails(self, SelectionDetails):
        self.SelectionDetails = SelectionDetails
    def add_SelectionDetails(self, value):
        self.SelectionDetails.append(value)
    def insert_SelectionDetails_at(self, index, value):
        self.SelectionDetails.insert(index, value)
    def replace_SelectionDetails_at(self, index, value):
        self.SelectionDetails[index] = value
    def get_TrackingDocumentSpecification(self):
        return self.TrackingDocumentSpecification
    def set_TrackingDocumentSpecification(self, TrackingDocumentSpecification):
        self.TrackingDocumentSpecification = TrackingDocumentSpecification
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.SelectionDetails or
            self.TrackingDocumentSpecification is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetTrackingDocumentsRequest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GetTrackingDocumentsRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GetTrackingDocumentsRequest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GetTrackingDocumentsRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GetTrackingDocumentsRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GetTrackingDocumentsRequest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GetTrackingDocumentsRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WebAuthenticationDetail is not None:
            namespaceprefix_ = self.WebAuthenticationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.WebAuthenticationDetail_nsprefix_) else ''
            self.WebAuthenticationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WebAuthenticationDetail', pretty_print=pretty_print)
        if self.ClientDetail is not None:
            namespaceprefix_ = self.ClientDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientDetail_nsprefix_) else ''
            self.ClientDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClientDetail', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        for SelectionDetails_ in self.SelectionDetails:
            namespaceprefix_ = self.SelectionDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.SelectionDetails_nsprefix_) else ''
            SelectionDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SelectionDetails', pretty_print=pretty_print)
        if self.TrackingDocumentSpecification is not None:
            namespaceprefix_ = self.TrackingDocumentSpecification_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingDocumentSpecification_nsprefix_) else ''
            self.TrackingDocumentSpecification.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TrackingDocumentSpecification', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WebAuthenticationDetail = obj_
            obj_.original_tagname_ = 'WebAuthenticationDetail'
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClientDetail = obj_
            obj_.original_tagname_ = 'ClientDetail'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'SelectionDetails':
            obj_ = TrackSelectionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SelectionDetails.append(obj_)
            obj_.original_tagname_ = 'SelectionDetails'
        elif nodeName_ == 'TrackingDocumentSpecification':
            obj_ = TrackingDocumentSpecification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TrackingDocumentSpecification = obj_
            obj_.original_tagname_ = 'TrackingDocumentSpecification'
# end class GetTrackingDocumentsRequest


class LocalTimeRange(GeneratedsSuper):
    """Time Range specified in local time."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Begins=None, Ends=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Begins = Begins
        self.Begins_nsprefix_ = None
        self.Ends = Ends
        self.Ends_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LocalTimeRange)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LocalTimeRange.subclass:
            return LocalTimeRange.subclass(*args_, **kwargs_)
        else:
            return LocalTimeRange(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Begins(self):
        return self.Begins
    def set_Begins(self, Begins):
        self.Begins = Begins
    def get_Ends(self):
        return self.Ends
    def set_Ends(self, Ends):
        self.Ends = Ends
    def hasContent_(self):
        if (
            self.Begins is not None or
            self.Ends is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LocalTimeRange', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LocalTimeRange')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LocalTimeRange':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LocalTimeRange')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LocalTimeRange', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LocalTimeRange'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LocalTimeRange', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Begins is not None:
            namespaceprefix_ = self.Begins_nsprefix_ + ':' if (UseCapturedNS_ and self.Begins_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBegins>%s</%sBegins>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Begins), input_name='Begins')), namespaceprefix_ , eol_))
        if self.Ends is not None:
            namespaceprefix_ = self.Ends_nsprefix_ + ':' if (UseCapturedNS_ and self.Ends_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEnds>%s</%sEnds>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Ends), input_name='Ends')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Begins':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Begins')
            value_ = self.gds_validate_string(value_, node, 'Begins')
            self.Begins = value_
            self.Begins_nsprefix_ = child_.prefix
        elif nodeName_ == 'Ends':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Ends')
            value_ = self.gds_validate_string(value_, node, 'Ends')
            self.Ends = value_
            self.Ends_nsprefix_ = child_.prefix
# end class LocalTimeRange


class Localization(GeneratedsSuper):
    """Identifies the representation of human-readable text."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LanguageCode=None, LocaleCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.LanguageCode = LanguageCode
        self.LanguageCode_nsprefix_ = None
        self.LocaleCode = LocaleCode
        self.LocaleCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Localization)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Localization.subclass:
            return Localization.subclass(*args_, **kwargs_)
        else:
            return Localization(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LanguageCode(self):
        return self.LanguageCode
    def set_LanguageCode(self, LanguageCode):
        self.LanguageCode = LanguageCode
    def get_LocaleCode(self):
        return self.LocaleCode
    def set_LocaleCode(self, LocaleCode):
        self.LocaleCode = LocaleCode
    def hasContent_(self):
        if (
            self.LanguageCode is not None or
            self.LocaleCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Localization', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Localization')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Localization':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Localization')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Localization', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Localization'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Localization', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LanguageCode is not None:
            namespaceprefix_ = self.LanguageCode_nsprefix_ + ':' if (UseCapturedNS_ and self.LanguageCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLanguageCode>%s</%sLanguageCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LanguageCode), input_name='LanguageCode')), namespaceprefix_ , eol_))
        if self.LocaleCode is not None:
            namespaceprefix_ = self.LocaleCode_nsprefix_ + ':' if (UseCapturedNS_ and self.LocaleCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocaleCode>%s</%sLocaleCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocaleCode), input_name='LocaleCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LanguageCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LanguageCode')
            value_ = self.gds_validate_string(value_, node, 'LanguageCode')
            self.LanguageCode = value_
            self.LanguageCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocaleCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocaleCode')
            value_ = self.gds_validate_string(value_, node, 'LocaleCode')
            self.LocaleCode = value_
            self.LocaleCode_nsprefix_ = child_.prefix
# end class Localization


class Measure(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Quantity=None, Units=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Quantity = Quantity
        self.Quantity_nsprefix_ = None
        self.Units = Units
        self.Units_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Measure)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Measure.subclass:
            return Measure.subclass(*args_, **kwargs_)
        else:
            return Measure(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_Units(self):
        return self.Units
    def set_Units(self, Units):
        self.Units = Units
    def hasContent_(self):
        if (
            self.Quantity is not None or
            self.Units is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Measure', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Measure')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Measure':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Measure')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Measure', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Measure'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Measure', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.Units is not None:
            namespaceprefix_ = self.Units_nsprefix_ + ':' if (UseCapturedNS_ and self.Units_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnits>%s</%sUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'Units':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Units')
            value_ = self.gds_validate_string(value_, node, 'Units')
            self.Units = value_
            self.Units_nsprefix_ = child_.prefix
# end class Measure


class Money(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Currency=None, Amount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Currency = Currency
        self.Currency_nsprefix_ = None
        self.Amount = Amount
        self.Amount_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Money)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Money.subclass:
            return Money.subclass(*args_, **kwargs_)
        else:
            return Money(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Currency(self):
        return self.Currency
    def set_Currency(self, Currency):
        self.Currency = Currency
    def get_Amount(self):
        return self.Amount
    def set_Amount(self, Amount):
        self.Amount = Amount
    def hasContent_(self):
        if (
            self.Currency is not None or
            self.Amount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Money', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Money')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Money':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Money')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Money', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Money'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Money', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Currency is not None:
            namespaceprefix_ = self.Currency_nsprefix_ + ':' if (UseCapturedNS_ and self.Currency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrency>%s</%sCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Currency), input_name='Currency')), namespaceprefix_ , eol_))
        if self.Amount is not None:
            namespaceprefix_ = self.Amount_nsprefix_ + ':' if (UseCapturedNS_ and self.Amount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAmount>%s</%sAmount>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Amount, input_name='Amount'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Currency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Currency')
            value_ = self.gds_validate_string(value_, node, 'Currency')
            self.Currency = value_
            self.Currency_nsprefix_ = child_.prefix
        elif nodeName_ == 'Amount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Amount')
            fval_ = self.gds_validate_decimal(fval_, node, 'Amount')
            self.Amount = fval_
            self.Amount_nsprefix_ = child_.prefix
# end class Money


class NaftaCommodityDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PreferenceCriterion=None, ProducerDetermination=None, ProducerId=None, NetCostMethod=None, NetCostDateRange=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PreferenceCriterion = PreferenceCriterion
        self.validate_NaftaPreferenceCriterionCode(self.PreferenceCriterion)
        self.PreferenceCriterion_nsprefix_ = None
        self.ProducerDetermination = ProducerDetermination
        self.validate_NaftaProducerDeterminationCode(self.ProducerDetermination)
        self.ProducerDetermination_nsprefix_ = None
        self.ProducerId = ProducerId
        self.ProducerId_nsprefix_ = None
        self.NetCostMethod = NetCostMethod
        self.validate_NaftaNetCostMethodCode(self.NetCostMethod)
        self.NetCostMethod_nsprefix_ = None
        self.NetCostDateRange = NetCostDateRange
        self.NetCostDateRange_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NaftaCommodityDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NaftaCommodityDetail.subclass:
            return NaftaCommodityDetail.subclass(*args_, **kwargs_)
        else:
            return NaftaCommodityDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PreferenceCriterion(self):
        return self.PreferenceCriterion
    def set_PreferenceCriterion(self, PreferenceCriterion):
        self.PreferenceCriterion = PreferenceCriterion
    def get_ProducerDetermination(self):
        return self.ProducerDetermination
    def set_ProducerDetermination(self, ProducerDetermination):
        self.ProducerDetermination = ProducerDetermination
    def get_ProducerId(self):
        return self.ProducerId
    def set_ProducerId(self, ProducerId):
        self.ProducerId = ProducerId
    def get_NetCostMethod(self):
        return self.NetCostMethod
    def set_NetCostMethod(self, NetCostMethod):
        self.NetCostMethod = NetCostMethod
    def get_NetCostDateRange(self):
        return self.NetCostDateRange
    def set_NetCostDateRange(self, NetCostDateRange):
        self.NetCostDateRange = NetCostDateRange
    def validate_NaftaPreferenceCriterionCode(self, value):
        result = True
        # Validate type NaftaPreferenceCriterionCode, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['A', 'B', 'C', 'D', 'E', 'F']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NaftaPreferenceCriterionCode' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_NaftaProducerDeterminationCode(self, value):
        result = True
        # Validate type NaftaProducerDeterminationCode, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['NO_1', 'NO_2', 'NO_3', 'YES']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NaftaProducerDeterminationCode' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_NaftaNetCostMethodCode(self, value):
        result = True
        # Validate type NaftaNetCostMethodCode, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['NC', 'NO']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NaftaNetCostMethodCode' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.PreferenceCriterion is not None or
            self.ProducerDetermination is not None or
            self.ProducerId is not None or
            self.NetCostMethod is not None or
            self.NetCostDateRange is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NaftaCommodityDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NaftaCommodityDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NaftaCommodityDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NaftaCommodityDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NaftaCommodityDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NaftaCommodityDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NaftaCommodityDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PreferenceCriterion is not None:
            namespaceprefix_ = self.PreferenceCriterion_nsprefix_ + ':' if (UseCapturedNS_ and self.PreferenceCriterion_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPreferenceCriterion>%s</%sPreferenceCriterion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PreferenceCriterion), input_name='PreferenceCriterion')), namespaceprefix_ , eol_))
        if self.ProducerDetermination is not None:
            namespaceprefix_ = self.ProducerDetermination_nsprefix_ + ':' if (UseCapturedNS_ and self.ProducerDetermination_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProducerDetermination>%s</%sProducerDetermination>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProducerDetermination), input_name='ProducerDetermination')), namespaceprefix_ , eol_))
        if self.ProducerId is not None:
            namespaceprefix_ = self.ProducerId_nsprefix_ + ':' if (UseCapturedNS_ and self.ProducerId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProducerId>%s</%sProducerId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProducerId), input_name='ProducerId')), namespaceprefix_ , eol_))
        if self.NetCostMethod is not None:
            namespaceprefix_ = self.NetCostMethod_nsprefix_ + ':' if (UseCapturedNS_ and self.NetCostMethod_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNetCostMethod>%s</%sNetCostMethod>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NetCostMethod), input_name='NetCostMethod')), namespaceprefix_ , eol_))
        if self.NetCostDateRange is not None:
            namespaceprefix_ = self.NetCostDateRange_nsprefix_ + ':' if (UseCapturedNS_ and self.NetCostDateRange_nsprefix_) else ''
            self.NetCostDateRange.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NetCostDateRange', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PreferenceCriterion':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PreferenceCriterion')
            value_ = self.gds_validate_string(value_, node, 'PreferenceCriterion')
            self.PreferenceCriterion = value_
            self.PreferenceCriterion_nsprefix_ = child_.prefix
            # validate type NaftaPreferenceCriterionCode
            self.validate_NaftaPreferenceCriterionCode(self.PreferenceCriterion)
        elif nodeName_ == 'ProducerDetermination':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProducerDetermination')
            value_ = self.gds_validate_string(value_, node, 'ProducerDetermination')
            self.ProducerDetermination = value_
            self.ProducerDetermination_nsprefix_ = child_.prefix
            # validate type NaftaProducerDeterminationCode
            self.validate_NaftaProducerDeterminationCode(self.ProducerDetermination)
        elif nodeName_ == 'ProducerId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProducerId')
            value_ = self.gds_validate_string(value_, node, 'ProducerId')
            self.ProducerId = value_
            self.ProducerId_nsprefix_ = child_.prefix
        elif nodeName_ == 'NetCostMethod':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NetCostMethod')
            value_ = self.gds_validate_string(value_, node, 'NetCostMethod')
            self.NetCostMethod = value_
            self.NetCostMethod_nsprefix_ = child_.prefix
            # validate type NaftaNetCostMethodCode
            self.validate_NaftaNetCostMethodCode(self.NetCostMethod)
        elif nodeName_ == 'NetCostDateRange':
            obj_ = DateRange.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NetCostDateRange = obj_
            obj_.original_tagname_ = 'NetCostDateRange'
# end class NaftaCommodityDetail


class Notification(GeneratedsSuper):
    """The descriptive data regarding the result of the submitted
    transaction."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Severity=None, Source=None, Code=None, Message=None, LocalizedMessage=None, MessageParameters=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Severity = Severity
        self.validate_NotificationSeverityType(self.Severity)
        self.Severity_nsprefix_ = None
        self.Source = Source
        self.Source_nsprefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Message = Message
        self.Message_nsprefix_ = None
        self.LocalizedMessage = LocalizedMessage
        self.LocalizedMessage_nsprefix_ = None
        if MessageParameters is None:
            self.MessageParameters = []
        else:
            self.MessageParameters = MessageParameters
        self.MessageParameters_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Notification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Notification.subclass:
            return Notification.subclass(*args_, **kwargs_)
        else:
            return Notification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Severity(self):
        return self.Severity
    def set_Severity(self, Severity):
        self.Severity = Severity
    def get_Source(self):
        return self.Source
    def set_Source(self, Source):
        self.Source = Source
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Message(self):
        return self.Message
    def set_Message(self, Message):
        self.Message = Message
    def get_LocalizedMessage(self):
        return self.LocalizedMessage
    def set_LocalizedMessage(self, LocalizedMessage):
        self.LocalizedMessage = LocalizedMessage
    def get_MessageParameters(self):
        return self.MessageParameters
    def set_MessageParameters(self, MessageParameters):
        self.MessageParameters = MessageParameters
    def add_MessageParameters(self, value):
        self.MessageParameters.append(value)
    def insert_MessageParameters_at(self, index, value):
        self.MessageParameters.insert(index, value)
    def replace_MessageParameters_at(self, index, value):
        self.MessageParameters[index] = value
    def validate_NotificationSeverityType(self, value):
        result = True
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Severity is not None or
            self.Source is not None or
            self.Code is not None or
            self.Message is not None or
            self.LocalizedMessage is not None or
            self.MessageParameters
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Notification', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Notification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Notification':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Notification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Notification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Notification'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Notification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Severity is not None:
            namespaceprefix_ = self.Severity_nsprefix_ + ':' if (UseCapturedNS_ and self.Severity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSeverity>%s</%sSeverity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Severity), input_name='Severity')), namespaceprefix_ , eol_))
        if self.Source is not None:
            namespaceprefix_ = self.Source_nsprefix_ + ':' if (UseCapturedNS_ and self.Source_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSource>%s</%sSource>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Source), input_name='Source')), namespaceprefix_ , eol_))
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Message is not None:
            namespaceprefix_ = self.Message_nsprefix_ + ':' if (UseCapturedNS_ and self.Message_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMessage>%s</%sMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Message), input_name='Message')), namespaceprefix_ , eol_))
        if self.LocalizedMessage is not None:
            namespaceprefix_ = self.LocalizedMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.LocalizedMessage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocalizedMessage>%s</%sLocalizedMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocalizedMessage), input_name='LocalizedMessage')), namespaceprefix_ , eol_))
        for MessageParameters_ in self.MessageParameters:
            namespaceprefix_ = self.MessageParameters_nsprefix_ + ':' if (UseCapturedNS_ and self.MessageParameters_nsprefix_) else ''
            MessageParameters_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MessageParameters', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Severity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Severity')
            value_ = self.gds_validate_string(value_, node, 'Severity')
            self.Severity = value_
            self.Severity_nsprefix_ = child_.prefix
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.Severity)
        elif nodeName_ == 'Source':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Source')
            value_ = self.gds_validate_string(value_, node, 'Source')
            self.Source = value_
            self.Source_nsprefix_ = child_.prefix
        elif nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Message':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Message')
            value_ = self.gds_validate_string(value_, node, 'Message')
            self.Message = value_
            self.Message_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocalizedMessage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocalizedMessage')
            value_ = self.gds_validate_string(value_, node, 'LocalizedMessage')
            self.LocalizedMessage = value_
            self.LocalizedMessage_nsprefix_ = child_.prefix
        elif nodeName_ == 'MessageParameters':
            obj_ = NotificationParameter.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MessageParameters.append(obj_)
            obj_.original_tagname_ = 'MessageParameters'
# end class Notification


class NotificationDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, NotificationType=None, EmailDetail=None, Localization=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.NotificationType = NotificationType
        self.validate_NotificationType(self.NotificationType)
        self.NotificationType_nsprefix_ = None
        self.EmailDetail = EmailDetail
        self.EmailDetail_nsprefix_ = None
        self.Localization = Localization
        self.Localization_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotificationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotificationDetail.subclass:
            return NotificationDetail.subclass(*args_, **kwargs_)
        else:
            return NotificationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_NotificationType(self):
        return self.NotificationType
    def set_NotificationType(self, NotificationType):
        self.NotificationType = NotificationType
    def get_EmailDetail(self):
        return self.EmailDetail
    def set_EmailDetail(self, EmailDetail):
        self.EmailDetail = EmailDetail
    def get_Localization(self):
        return self.Localization
    def set_Localization(self, Localization):
        self.Localization = Localization
    def validate_NotificationType(self, value):
        result = True
        # Validate type NotificationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['EMAIL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.NotificationType is not None or
            self.EmailDetail is not None or
            self.Localization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NotificationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NotificationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NotificationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NotificationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NotificationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NotificationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NotificationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NotificationType is not None:
            namespaceprefix_ = self.NotificationType_nsprefix_ + ':' if (UseCapturedNS_ and self.NotificationType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNotificationType>%s</%sNotificationType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NotificationType), input_name='NotificationType')), namespaceprefix_ , eol_))
        if self.EmailDetail is not None:
            namespaceprefix_ = self.EmailDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.EmailDetail_nsprefix_) else ''
            self.EmailDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EmailDetail', pretty_print=pretty_print)
        if self.Localization is not None:
            namespaceprefix_ = self.Localization_nsprefix_ + ':' if (UseCapturedNS_ and self.Localization_nsprefix_) else ''
            self.Localization.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Localization', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'NotificationType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NotificationType')
            value_ = self.gds_validate_string(value_, node, 'NotificationType')
            self.NotificationType = value_
            self.NotificationType_nsprefix_ = child_.prefix
            # validate type NotificationType
            self.validate_NotificationType(self.NotificationType)
        elif nodeName_ == 'EmailDetail':
            obj_ = EMailDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EmailDetail = obj_
            obj_.original_tagname_ = 'EmailDetail'
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
# end class NotificationDetail


class NotificationParameter(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Id = Id
        self.Id_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotificationParameter)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotificationParameter.subclass:
            return NotificationParameter.subclass(*args_, **kwargs_)
        else:
            return NotificationParameter(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def hasContent_(self):
        if (
            self.Id is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NotificationParameter', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NotificationParameter')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NotificationParameter':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NotificationParameter')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NotificationParameter', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NotificationParameter'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NotificationParameter', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Id is not None:
            namespaceprefix_ = self.Id_nsprefix_ + ':' if (UseCapturedNS_ and self.Id_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sId>%s</%sId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Id':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Id')
            value_ = self.gds_validate_string(value_, node, 'Id')
            self.Id = value_
            self.Id_nsprefix_ = child_.prefix
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
# end class NotificationParameter


class PagingDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PagingToken=None, NumberOfResultsPerPage=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PagingToken = PagingToken
        self.PagingToken_nsprefix_ = None
        self.NumberOfResultsPerPage = NumberOfResultsPerPage
        self.NumberOfResultsPerPage_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PagingDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PagingDetail.subclass:
            return PagingDetail.subclass(*args_, **kwargs_)
        else:
            return PagingDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PagingToken(self):
        return self.PagingToken
    def set_PagingToken(self, PagingToken):
        self.PagingToken = PagingToken
    def get_NumberOfResultsPerPage(self):
        return self.NumberOfResultsPerPage
    def set_NumberOfResultsPerPage(self, NumberOfResultsPerPage):
        self.NumberOfResultsPerPage = NumberOfResultsPerPage
    def hasContent_(self):
        if (
            self.PagingToken is not None or
            self.NumberOfResultsPerPage is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PagingDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PagingDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PagingDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PagingDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PagingDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PagingDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PagingDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PagingToken is not None:
            namespaceprefix_ = self.PagingToken_nsprefix_ + ':' if (UseCapturedNS_ and self.PagingToken_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPagingToken>%s</%sPagingToken>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PagingToken), input_name='PagingToken')), namespaceprefix_ , eol_))
        if self.NumberOfResultsPerPage is not None:
            namespaceprefix_ = self.NumberOfResultsPerPage_nsprefix_ + ':' if (UseCapturedNS_ and self.NumberOfResultsPerPage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfResultsPerPage>%s</%sNumberOfResultsPerPage>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumberOfResultsPerPage, input_name='NumberOfResultsPerPage'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PagingToken':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PagingToken')
            value_ = self.gds_validate_string(value_, node, 'PagingToken')
            self.PagingToken = value_
            self.PagingToken_nsprefix_ = child_.prefix
        elif nodeName_ == 'NumberOfResultsPerPage' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'NumberOfResultsPerPage')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'NumberOfResultsPerPage')
            self.NumberOfResultsPerPage = ival_
            self.NumberOfResultsPerPage_nsprefix_ = child_.prefix
# end class PagingDetail


class PieceCountVerificationDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CountLocationType=None, Count=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CountLocationType = CountLocationType
        self.validate_PieceCountLocationType(self.CountLocationType)
        self.CountLocationType_nsprefix_ = None
        self.Count = Count
        self.Count_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PieceCountVerificationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PieceCountVerificationDetail.subclass:
            return PieceCountVerificationDetail.subclass(*args_, **kwargs_)
        else:
            return PieceCountVerificationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CountLocationType(self):
        return self.CountLocationType
    def set_CountLocationType(self, CountLocationType):
        self.CountLocationType = CountLocationType
    def get_Count(self):
        return self.Count
    def set_Count(self, Count):
        self.Count = Count
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def validate_PieceCountLocationType(self, value):
        result = True
        # Validate type PieceCountLocationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DESTINATION', 'ORIGIN']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PieceCountLocationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.CountLocationType is not None or
            self.Count is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PieceCountVerificationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PieceCountVerificationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PieceCountVerificationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PieceCountVerificationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PieceCountVerificationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PieceCountVerificationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PieceCountVerificationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CountLocationType is not None:
            namespaceprefix_ = self.CountLocationType_nsprefix_ + ':' if (UseCapturedNS_ and self.CountLocationType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountLocationType>%s</%sCountLocationType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountLocationType), input_name='CountLocationType')), namespaceprefix_ , eol_))
        if self.Count is not None:
            namespaceprefix_ = self.Count_nsprefix_ + ':' if (UseCapturedNS_ and self.Count_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCount>%s</%sCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.Count, input_name='Count'), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CountLocationType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountLocationType')
            value_ = self.gds_validate_string(value_, node, 'CountLocationType')
            self.CountLocationType = value_
            self.CountLocationType_nsprefix_ = child_.prefix
            # validate type PieceCountLocationType
            self.validate_PieceCountLocationType(self.CountLocationType)
        elif nodeName_ == 'Count' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Count')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Count')
            self.Count = ival_
            self.Count_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class PieceCountVerificationDetail


class SendNotificationsReply(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, DuplicateWaybill=None, MoreDataAvailable=None, PagingToken=None, Packages=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HighestSeverity = HighestSeverity
        self.validate_NotificationSeverityType(self.HighestSeverity)
        self.HighestSeverity_nsprefix_ = None
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.Notifications_nsprefix_ = None
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = None
        self.Version = Version
        self.Version_nsprefix_ = None
        self.DuplicateWaybill = DuplicateWaybill
        self.DuplicateWaybill_nsprefix_ = None
        self.MoreDataAvailable = MoreDataAvailable
        self.MoreDataAvailable_nsprefix_ = None
        self.PagingToken = PagingToken
        self.PagingToken_nsprefix_ = None
        if Packages is None:
            self.Packages = []
        else:
            self.Packages = Packages
        self.Packages_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SendNotificationsReply)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SendNotificationsReply.subclass:
            return SendNotificationsReply.subclass(*args_, **kwargs_)
        else:
            return SendNotificationsReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HighestSeverity(self):
        return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity):
        self.HighestSeverity = HighestSeverity
    def get_Notifications(self):
        return self.Notifications
    def set_Notifications(self, Notifications):
        self.Notifications = Notifications
    def add_Notifications(self, value):
        self.Notifications.append(value)
    def insert_Notifications_at(self, index, value):
        self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value):
        self.Notifications[index] = value
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_DuplicateWaybill(self):
        return self.DuplicateWaybill
    def set_DuplicateWaybill(self, DuplicateWaybill):
        self.DuplicateWaybill = DuplicateWaybill
    def get_MoreDataAvailable(self):
        return self.MoreDataAvailable
    def set_MoreDataAvailable(self, MoreDataAvailable):
        self.MoreDataAvailable = MoreDataAvailable
    def get_PagingToken(self):
        return self.PagingToken
    def set_PagingToken(self, PagingToken):
        self.PagingToken = PagingToken
    def get_Packages(self):
        return self.Packages
    def set_Packages(self, Packages):
        self.Packages = Packages
    def add_Packages(self, value):
        self.Packages.append(value)
    def insert_Packages_at(self, index, value):
        self.Packages.insert(index, value)
    def replace_Packages_at(self, index, value):
        self.Packages[index] = value
    def validate_NotificationSeverityType(self, value):
        result = True
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.DuplicateWaybill is not None or
            self.MoreDataAvailable is not None or
            self.PagingToken is not None or
            self.Packages
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SendNotificationsReply', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SendNotificationsReply')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SendNotificationsReply':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SendNotificationsReply')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SendNotificationsReply', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SendNotificationsReply'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SendNotificationsReply', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HighestSeverity is not None:
            namespaceprefix_ = self.HighestSeverity_nsprefix_ + ':' if (UseCapturedNS_ and self.HighestSeverity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HighestSeverity), input_name='HighestSeverity')), namespaceprefix_ , eol_))
        for Notifications_ in self.Notifications:
            namespaceprefix_ = self.Notifications_nsprefix_ + ':' if (UseCapturedNS_ and self.Notifications_nsprefix_) else ''
            Notifications_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Notifications', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        if self.DuplicateWaybill is not None:
            namespaceprefix_ = self.DuplicateWaybill_nsprefix_ + ':' if (UseCapturedNS_ and self.DuplicateWaybill_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDuplicateWaybill>%s</%sDuplicateWaybill>%s' % (namespaceprefix_ , self.gds_format_boolean(self.DuplicateWaybill, input_name='DuplicateWaybill'), namespaceprefix_ , eol_))
        if self.MoreDataAvailable is not None:
            namespaceprefix_ = self.MoreDataAvailable_nsprefix_ + ':' if (UseCapturedNS_ and self.MoreDataAvailable_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMoreDataAvailable>%s</%sMoreDataAvailable>%s' % (namespaceprefix_ , self.gds_format_boolean(self.MoreDataAvailable, input_name='MoreDataAvailable'), namespaceprefix_ , eol_))
        if self.PagingToken is not None:
            namespaceprefix_ = self.PagingToken_nsprefix_ + ':' if (UseCapturedNS_ and self.PagingToken_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPagingToken>%s</%sPagingToken>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PagingToken), input_name='PagingToken')), namespaceprefix_ , eol_))
        for Packages_ in self.Packages:
            namespaceprefix_ = self.Packages_nsprefix_ + ':' if (UseCapturedNS_ and self.Packages_nsprefix_) else ''
            Packages_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Packages', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HighestSeverity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HighestSeverity')
            value_ = self.gds_validate_string(value_, node, 'HighestSeverity')
            self.HighestSeverity = value_
            self.HighestSeverity_nsprefix_ = child_.prefix
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.HighestSeverity)
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'DuplicateWaybill':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'DuplicateWaybill')
            ival_ = self.gds_validate_boolean(ival_, node, 'DuplicateWaybill')
            self.DuplicateWaybill = ival_
            self.DuplicateWaybill_nsprefix_ = child_.prefix
        elif nodeName_ == 'MoreDataAvailable':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'MoreDataAvailable')
            ival_ = self.gds_validate_boolean(ival_, node, 'MoreDataAvailable')
            self.MoreDataAvailable = ival_
            self.MoreDataAvailable_nsprefix_ = child_.prefix
        elif nodeName_ == 'PagingToken':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PagingToken')
            value_ = self.gds_validate_string(value_, node, 'PagingToken')
            self.PagingToken = value_
            self.PagingToken_nsprefix_ = child_.prefix
        elif nodeName_ == 'Packages':
            obj_ = TrackNotificationPackage.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Packages.append(obj_)
            obj_.original_tagname_ = 'Packages'
# end class SendNotificationsReply


class SendNotificationsRequest(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, TrackingNumber=None, MultiPiece=None, PagingToken=None, TrackingNumberUniqueId=None, ShipDateRangeBegin=None, ShipDateRangeEnd=None, SenderEMailAddress=None, SenderContactName=None, EventNotificationDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.WebAuthenticationDetail_nsprefix_ = None
        self.ClientDetail = ClientDetail
        self.ClientDetail_nsprefix_ = None
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = None
        self.Version = Version
        self.Version_nsprefix_ = None
        self.TrackingNumber = TrackingNumber
        self.TrackingNumber_nsprefix_ = None
        self.MultiPiece = MultiPiece
        self.MultiPiece_nsprefix_ = None
        self.PagingToken = PagingToken
        self.PagingToken_nsprefix_ = None
        self.TrackingNumberUniqueId = TrackingNumberUniqueId
        self.TrackingNumberUniqueId_nsprefix_ = None
        if isinstance(ShipDateRangeBegin, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShipDateRangeBegin, '%Y-%m-%d').date()
        else:
            initvalue_ = ShipDateRangeBegin
        self.ShipDateRangeBegin = initvalue_
        self.ShipDateRangeBegin_nsprefix_ = None
        if isinstance(ShipDateRangeEnd, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShipDateRangeEnd, '%Y-%m-%d').date()
        else:
            initvalue_ = ShipDateRangeEnd
        self.ShipDateRangeEnd = initvalue_
        self.ShipDateRangeEnd_nsprefix_ = None
        self.SenderEMailAddress = SenderEMailAddress
        self.SenderEMailAddress_nsprefix_ = None
        self.SenderContactName = SenderContactName
        self.SenderContactName_nsprefix_ = None
        self.EventNotificationDetail = EventNotificationDetail
        self.EventNotificationDetail_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SendNotificationsRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SendNotificationsRequest.subclass:
            return SendNotificationsRequest.subclass(*args_, **kwargs_)
        else:
            return SendNotificationsRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_WebAuthenticationDetail(self):
        return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail):
        self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self):
        return self.ClientDetail
    def set_ClientDetail(self, ClientDetail):
        self.ClientDetail = ClientDetail
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_TrackingNumber(self):
        return self.TrackingNumber
    def set_TrackingNumber(self, TrackingNumber):
        self.TrackingNumber = TrackingNumber
    def get_MultiPiece(self):
        return self.MultiPiece
    def set_MultiPiece(self, MultiPiece):
        self.MultiPiece = MultiPiece
    def get_PagingToken(self):
        return self.PagingToken
    def set_PagingToken(self, PagingToken):
        self.PagingToken = PagingToken
    def get_TrackingNumberUniqueId(self):
        return self.TrackingNumberUniqueId
    def set_TrackingNumberUniqueId(self, TrackingNumberUniqueId):
        self.TrackingNumberUniqueId = TrackingNumberUniqueId
    def get_ShipDateRangeBegin(self):
        return self.ShipDateRangeBegin
    def set_ShipDateRangeBegin(self, ShipDateRangeBegin):
        self.ShipDateRangeBegin = ShipDateRangeBegin
    def get_ShipDateRangeEnd(self):
        return self.ShipDateRangeEnd
    def set_ShipDateRangeEnd(self, ShipDateRangeEnd):
        self.ShipDateRangeEnd = ShipDateRangeEnd
    def get_SenderEMailAddress(self):
        return self.SenderEMailAddress
    def set_SenderEMailAddress(self, SenderEMailAddress):
        self.SenderEMailAddress = SenderEMailAddress
    def get_SenderContactName(self):
        return self.SenderContactName
    def set_SenderContactName(self, SenderContactName):
        self.SenderContactName = SenderContactName
    def get_EventNotificationDetail(self):
        return self.EventNotificationDetail
    def set_EventNotificationDetail(self, EventNotificationDetail):
        self.EventNotificationDetail = EventNotificationDetail
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.TrackingNumber is not None or
            self.MultiPiece is not None or
            self.PagingToken is not None or
            self.TrackingNumberUniqueId is not None or
            self.ShipDateRangeBegin is not None or
            self.ShipDateRangeEnd is not None or
            self.SenderEMailAddress is not None or
            self.SenderContactName is not None or
            self.EventNotificationDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SendNotificationsRequest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SendNotificationsRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SendNotificationsRequest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SendNotificationsRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SendNotificationsRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SendNotificationsRequest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SendNotificationsRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WebAuthenticationDetail is not None:
            namespaceprefix_ = self.WebAuthenticationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.WebAuthenticationDetail_nsprefix_) else ''
            self.WebAuthenticationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WebAuthenticationDetail', pretty_print=pretty_print)
        if self.ClientDetail is not None:
            namespaceprefix_ = self.ClientDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientDetail_nsprefix_) else ''
            self.ClientDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClientDetail', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        if self.TrackingNumber is not None:
            namespaceprefix_ = self.TrackingNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTrackingNumber>%s</%sTrackingNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumber), input_name='TrackingNumber')), namespaceprefix_ , eol_))
        if self.MultiPiece is not None:
            namespaceprefix_ = self.MultiPiece_nsprefix_ + ':' if (UseCapturedNS_ and self.MultiPiece_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMultiPiece>%s</%sMultiPiece>%s' % (namespaceprefix_ , self.gds_format_boolean(self.MultiPiece, input_name='MultiPiece'), namespaceprefix_ , eol_))
        if self.PagingToken is not None:
            namespaceprefix_ = self.PagingToken_nsprefix_ + ':' if (UseCapturedNS_ and self.PagingToken_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPagingToken>%s</%sPagingToken>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PagingToken), input_name='PagingToken')), namespaceprefix_ , eol_))
        if self.TrackingNumberUniqueId is not None:
            namespaceprefix_ = self.TrackingNumberUniqueId_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingNumberUniqueId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTrackingNumberUniqueId>%s</%sTrackingNumberUniqueId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumberUniqueId), input_name='TrackingNumberUniqueId')), namespaceprefix_ , eol_))
        if self.ShipDateRangeBegin is not None:
            namespaceprefix_ = self.ShipDateRangeBegin_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipDateRangeBegin_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipDateRangeBegin>%s</%sShipDateRangeBegin>%s' % (namespaceprefix_ , self.gds_format_date(self.ShipDateRangeBegin, input_name='ShipDateRangeBegin'), namespaceprefix_ , eol_))
        if self.ShipDateRangeEnd is not None:
            namespaceprefix_ = self.ShipDateRangeEnd_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipDateRangeEnd_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipDateRangeEnd>%s</%sShipDateRangeEnd>%s' % (namespaceprefix_ , self.gds_format_date(self.ShipDateRangeEnd, input_name='ShipDateRangeEnd'), namespaceprefix_ , eol_))
        if self.SenderEMailAddress is not None:
            namespaceprefix_ = self.SenderEMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.SenderEMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSenderEMailAddress>%s</%sSenderEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SenderEMailAddress), input_name='SenderEMailAddress')), namespaceprefix_ , eol_))
        if self.SenderContactName is not None:
            namespaceprefix_ = self.SenderContactName_nsprefix_ + ':' if (UseCapturedNS_ and self.SenderContactName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSenderContactName>%s</%sSenderContactName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SenderContactName), input_name='SenderContactName')), namespaceprefix_ , eol_))
        if self.EventNotificationDetail is not None:
            namespaceprefix_ = self.EventNotificationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.EventNotificationDetail_nsprefix_) else ''
            self.EventNotificationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EventNotificationDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WebAuthenticationDetail = obj_
            obj_.original_tagname_ = 'WebAuthenticationDetail'
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClientDetail = obj_
            obj_.original_tagname_ = 'ClientDetail'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'TrackingNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TrackingNumber')
            value_ = self.gds_validate_string(value_, node, 'TrackingNumber')
            self.TrackingNumber = value_
            self.TrackingNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'MultiPiece':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'MultiPiece')
            ival_ = self.gds_validate_boolean(ival_, node, 'MultiPiece')
            self.MultiPiece = ival_
            self.MultiPiece_nsprefix_ = child_.prefix
        elif nodeName_ == 'PagingToken':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PagingToken')
            value_ = self.gds_validate_string(value_, node, 'PagingToken')
            self.PagingToken = value_
            self.PagingToken_nsprefix_ = child_.prefix
        elif nodeName_ == 'TrackingNumberUniqueId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TrackingNumberUniqueId')
            value_ = self.gds_validate_string(value_, node, 'TrackingNumberUniqueId')
            self.TrackingNumberUniqueId = value_
            self.TrackingNumberUniqueId_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShipDateRangeBegin':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ShipDateRangeBegin = dval_
            self.ShipDateRangeBegin_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShipDateRangeEnd':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ShipDateRangeEnd = dval_
            self.ShipDateRangeEnd_nsprefix_ = child_.prefix
        elif nodeName_ == 'SenderEMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SenderEMailAddress')
            value_ = self.gds_validate_string(value_, node, 'SenderEMailAddress')
            self.SenderEMailAddress = value_
            self.SenderEMailAddress_nsprefix_ = child_.prefix
        elif nodeName_ == 'SenderContactName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SenderContactName')
            value_ = self.gds_validate_string(value_, node, 'SenderContactName')
            self.SenderContactName = value_
            self.SenderContactName_nsprefix_ = child_.prefix
        elif nodeName_ == 'EventNotificationDetail':
            obj_ = ShipmentEventNotificationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EventNotificationDetail = obj_
            obj_.original_tagname_ = 'EventNotificationDetail'
# end class SendNotificationsRequest


class ShipmentEventNotificationDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AggregationType=None, PersonalMessage=None, EventNotifications=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AggregationType = AggregationType
        self.validate_ShipmentNotificationAggregationType(self.AggregationType)
        self.AggregationType_nsprefix_ = None
        self.PersonalMessage = PersonalMessage
        self.PersonalMessage_nsprefix_ = None
        if EventNotifications is None:
            self.EventNotifications = []
        else:
            self.EventNotifications = EventNotifications
        self.EventNotifications_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentEventNotificationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentEventNotificationDetail.subclass:
            return ShipmentEventNotificationDetail.subclass(*args_, **kwargs_)
        else:
            return ShipmentEventNotificationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AggregationType(self):
        return self.AggregationType
    def set_AggregationType(self, AggregationType):
        self.AggregationType = AggregationType
    def get_PersonalMessage(self):
        return self.PersonalMessage
    def set_PersonalMessage(self, PersonalMessage):
        self.PersonalMessage = PersonalMessage
    def get_EventNotifications(self):
        return self.EventNotifications
    def set_EventNotifications(self, EventNotifications):
        self.EventNotifications = EventNotifications
    def add_EventNotifications(self, value):
        self.EventNotifications.append(value)
    def insert_EventNotifications_at(self, index, value):
        self.EventNotifications.insert(index, value)
    def replace_EventNotifications_at(self, index, value):
        self.EventNotifications[index] = value
    def validate_ShipmentNotificationAggregationType(self, value):
        result = True
        # Validate type ShipmentNotificationAggregationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['PER_PACKAGE', 'PER_SHIPMENT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShipmentNotificationAggregationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.AggregationType is not None or
            self.PersonalMessage is not None or
            self.EventNotifications
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentEventNotificationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentEventNotificationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentEventNotificationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentEventNotificationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentEventNotificationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentEventNotificationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentEventNotificationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AggregationType is not None:
            namespaceprefix_ = self.AggregationType_nsprefix_ + ':' if (UseCapturedNS_ and self.AggregationType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAggregationType>%s</%sAggregationType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AggregationType), input_name='AggregationType')), namespaceprefix_ , eol_))
        if self.PersonalMessage is not None:
            namespaceprefix_ = self.PersonalMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.PersonalMessage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPersonalMessage>%s</%sPersonalMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PersonalMessage), input_name='PersonalMessage')), namespaceprefix_ , eol_))
        for EventNotifications_ in self.EventNotifications:
            namespaceprefix_ = self.EventNotifications_nsprefix_ + ':' if (UseCapturedNS_ and self.EventNotifications_nsprefix_) else ''
            EventNotifications_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EventNotifications', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AggregationType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AggregationType')
            value_ = self.gds_validate_string(value_, node, 'AggregationType')
            self.AggregationType = value_
            self.AggregationType_nsprefix_ = child_.prefix
            # validate type ShipmentNotificationAggregationType
            self.validate_ShipmentNotificationAggregationType(self.AggregationType)
        elif nodeName_ == 'PersonalMessage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PersonalMessage')
            value_ = self.gds_validate_string(value_, node, 'PersonalMessage')
            self.PersonalMessage = value_
            self.PersonalMessage_nsprefix_ = child_.prefix
        elif nodeName_ == 'EventNotifications':
            obj_ = ShipmentEventNotificationSpecification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EventNotifications.append(obj_)
            obj_.original_tagname_ = 'EventNotifications'
# end class ShipmentEventNotificationDetail


class ShipmentEventNotificationSpecification(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Role=None, Events=None, NotificationDetail=None, FormatSpecification=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Role = Role
        self.validate_ShipmentNotificationRoleType(self.Role)
        self.Role_nsprefix_ = None
        if Events is None:
            self.Events = []
        else:
            self.Events = Events
        self.Events_nsprefix_ = None
        self.NotificationDetail = NotificationDetail
        self.NotificationDetail_nsprefix_ = None
        self.FormatSpecification = FormatSpecification
        self.FormatSpecification_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentEventNotificationSpecification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentEventNotificationSpecification.subclass:
            return ShipmentEventNotificationSpecification.subclass(*args_, **kwargs_)
        else:
            return ShipmentEventNotificationSpecification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Role(self):
        return self.Role
    def set_Role(self, Role):
        self.Role = Role
    def get_Events(self):
        return self.Events
    def set_Events(self, Events):
        self.Events = Events
    def add_Events(self, value):
        self.Events.append(value)
    def insert_Events_at(self, index, value):
        self.Events.insert(index, value)
    def replace_Events_at(self, index, value):
        self.Events[index] = value
    def get_NotificationDetail(self):
        return self.NotificationDetail
    def set_NotificationDetail(self, NotificationDetail):
        self.NotificationDetail = NotificationDetail
    def get_FormatSpecification(self):
        return self.FormatSpecification
    def set_FormatSpecification(self, FormatSpecification):
        self.FormatSpecification = FormatSpecification
    def validate_ShipmentNotificationRoleType(self, value):
        result = True
        # Validate type ShipmentNotificationRoleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BROKER', 'OTHER', 'RECIPIENT', 'SHIPPER', 'THIRD_PARTY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShipmentNotificationRoleType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_NotificationEventType(self, value):
        result = True
        # Validate type NotificationEventType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ON_DELIVERY', 'ON_ESTIMATED_DELIVERY', 'ON_EXCEPTION', 'ON_PICKUP_DRIVER_ARRIVED', 'ON_PICKUP_DRIVER_ASSIGNED', 'ON_PICKUP_DRIVER_DEPARTED', 'ON_PICKUP_DRIVER_EN_ROUTE', 'ON_SHIPMENT', 'ON_TENDER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationEventType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Role is not None or
            self.Events or
            self.NotificationDetail is not None or
            self.FormatSpecification is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentEventNotificationSpecification', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentEventNotificationSpecification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentEventNotificationSpecification':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentEventNotificationSpecification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentEventNotificationSpecification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentEventNotificationSpecification'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentEventNotificationSpecification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Role is not None:
            namespaceprefix_ = self.Role_nsprefix_ + ':' if (UseCapturedNS_ and self.Role_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRole>%s</%sRole>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Role), input_name='Role')), namespaceprefix_ , eol_))
        for Events_ in self.Events:
            namespaceprefix_ = self.Events_nsprefix_ + ':' if (UseCapturedNS_ and self.Events_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEvents>%s</%sEvents>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Events_), input_name='Events')), namespaceprefix_ , eol_))
        if self.NotificationDetail is not None:
            namespaceprefix_ = self.NotificationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.NotificationDetail_nsprefix_) else ''
            self.NotificationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NotificationDetail', pretty_print=pretty_print)
        if self.FormatSpecification is not None:
            namespaceprefix_ = self.FormatSpecification_nsprefix_ + ':' if (UseCapturedNS_ and self.FormatSpecification_nsprefix_) else ''
            self.FormatSpecification.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FormatSpecification', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Role':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Role')
            value_ = self.gds_validate_string(value_, node, 'Role')
            self.Role = value_
            self.Role_nsprefix_ = child_.prefix
            # validate type ShipmentNotificationRoleType
            self.validate_ShipmentNotificationRoleType(self.Role)
        elif nodeName_ == 'Events':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Events')
            value_ = self.gds_validate_string(value_, node, 'Events')
            self.Events.append(value_)
            self.Events_nsprefix_ = child_.prefix
            # validate type NotificationEventType
            self.validate_NotificationEventType(self.Events[-1])
        elif nodeName_ == 'NotificationDetail':
            obj_ = NotificationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NotificationDetail = obj_
            obj_.original_tagname_ = 'NotificationDetail'
        elif nodeName_ == 'FormatSpecification':
            obj_ = ShipmentNotificationFormatSpecification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FormatSpecification = obj_
            obj_.original_tagname_ = 'FormatSpecification'
# end class ShipmentEventNotificationSpecification


class ShipmentNotificationFormatSpecification(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_NotificationFormatType(self.Type)
        self.Type_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentNotificationFormatSpecification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentNotificationFormatSpecification.subclass:
            return ShipmentNotificationFormatSpecification.subclass(*args_, **kwargs_)
        else:
            return ShipmentNotificationFormatSpecification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def validate_NotificationFormatType(self, value):
        result = True
        # Validate type NotificationFormatType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['HTML', 'TEXT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationFormatType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentNotificationFormatSpecification', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentNotificationFormatSpecification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentNotificationFormatSpecification':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentNotificationFormatSpecification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentNotificationFormatSpecification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentNotificationFormatSpecification'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentNotificationFormatSpecification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type NotificationFormatType
            self.validate_NotificationFormatType(self.Type)
# end class ShipmentNotificationFormatSpecification


class SignatureImageDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Image=None, Notifications=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Image = Image
        self.Image_nsprefix_ = None
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.Notifications_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignatureImageDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignatureImageDetail.subclass:
            return SignatureImageDetail.subclass(*args_, **kwargs_)
        else:
            return SignatureImageDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Image(self):
        return self.Image
    def set_Image(self, Image):
        self.Image = Image
    def get_Notifications(self):
        return self.Notifications
    def set_Notifications(self, Notifications):
        self.Notifications = Notifications
    def add_Notifications(self, value):
        self.Notifications.append(value)
    def insert_Notifications_at(self, index, value):
        self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value):
        self.Notifications[index] = value
    def hasContent_(self):
        if (
            self.Image is not None or
            self.Notifications
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SignatureImageDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignatureImageDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SignatureImageDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignatureImageDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SignatureImageDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SignatureImageDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SignatureImageDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Image is not None:
            namespaceprefix_ = self.Image_nsprefix_ + ':' if (UseCapturedNS_ and self.Image_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sImage>%s</%sImage>%s' % (namespaceprefix_ , self.gds_format_base64(self.Image, input_name='Image'), namespaceprefix_ , eol_))
        for Notifications_ in self.Notifications:
            namespaceprefix_ = self.Notifications_nsprefix_ + ':' if (UseCapturedNS_ and self.Notifications_nsprefix_) else ''
            Notifications_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Notifications', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Image':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Image')
            else:
                bval_ = None
            self.Image = bval_
            self.Image_nsprefix_ = child_.prefix
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
# end class SignatureImageDetail


class SpecialInstructionStatusDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Status=None, StatusCreateTime=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Status = Status
        self.validate_SpecialInstructionsStatusCode(self.Status)
        self.Status_nsprefix_ = None
        if isinstance(StatusCreateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(StatusCreateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = StatusCreateTime
        self.StatusCreateTime = initvalue_
        self.StatusCreateTime_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SpecialInstructionStatusDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SpecialInstructionStatusDetail.subclass:
            return SpecialInstructionStatusDetail.subclass(*args_, **kwargs_)
        else:
            return SpecialInstructionStatusDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Status(self):
        return self.Status
    def set_Status(self, Status):
        self.Status = Status
    def get_StatusCreateTime(self):
        return self.StatusCreateTime
    def set_StatusCreateTime(self, StatusCreateTime):
        self.StatusCreateTime = StatusCreateTime
    def validate_SpecialInstructionsStatusCode(self, value):
        result = True
        # Validate type SpecialInstructionsStatusCode, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACCEPTED', 'CANCELLED', 'DENIED', 'HELD', 'MODIFIED', 'RELINQUISHED', 'REQUESTED', 'SET']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SpecialInstructionsStatusCode' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Status is not None or
            self.StatusCreateTime is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SpecialInstructionStatusDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SpecialInstructionStatusDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SpecialInstructionStatusDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SpecialInstructionStatusDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SpecialInstructionStatusDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SpecialInstructionStatusDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SpecialInstructionStatusDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Status is not None:
            namespaceprefix_ = self.Status_nsprefix_ + ':' if (UseCapturedNS_ and self.Status_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatus>%s</%sStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Status), input_name='Status')), namespaceprefix_ , eol_))
        if self.StatusCreateTime is not None:
            namespaceprefix_ = self.StatusCreateTime_nsprefix_ + ':' if (UseCapturedNS_ and self.StatusCreateTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatusCreateTime>%s</%sStatusCreateTime>%s' % (namespaceprefix_ , self.gds_format_datetime(self.StatusCreateTime, input_name='StatusCreateTime'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Status':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Status')
            value_ = self.gds_validate_string(value_, node, 'Status')
            self.Status = value_
            self.Status_nsprefix_ = child_.prefix
            # validate type SpecialInstructionsStatusCode
            self.validate_SpecialInstructionsStatusCode(self.Status)
        elif nodeName_ == 'StatusCreateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.StatusCreateTime = dval_
            self.StatusCreateTime_nsprefix_ = child_.prefix
# end class SpecialInstructionStatusDetail


class StringBarcode(GeneratedsSuper):
    """Each instance of this data type represents a barcode whose content must
    be represented as ASCII text (i.e. not binary data)."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_StringBarcodeType(self.Type)
        self.Type_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StringBarcode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StringBarcode.subclass:
            return StringBarcode.subclass(*args_, **kwargs_)
        else:
            return StringBarcode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def validate_StringBarcodeType(self, value):
        result = True
        # Validate type StringBarcodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ADDRESS', 'ASTRA', 'FEDEX_1D', 'GROUND', 'POSTAL', 'USPS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on StringBarcodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='StringBarcode', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StringBarcode')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'StringBarcode':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='StringBarcode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='StringBarcode', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='StringBarcode'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='StringBarcode', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type StringBarcodeType
            self.validate_StringBarcodeType(self.Type)
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
# end class StringBarcode


class TrackAdvanceNotificationDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EstimatedTimeOfArrival=None, Reason=None, Status=None, StatusDescription=None, StatusTime=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(EstimatedTimeOfArrival, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EstimatedTimeOfArrival, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = EstimatedTimeOfArrival
        self.EstimatedTimeOfArrival = initvalue_
        self.EstimatedTimeOfArrival_nsprefix_ = None
        self.Reason = Reason
        self.Reason_nsprefix_ = None
        self.Status = Status
        self.validate_TrackAdvanceNotificationStatusType(self.Status)
        self.Status_nsprefix_ = None
        self.StatusDescription = StatusDescription
        self.StatusDescription_nsprefix_ = None
        if isinstance(StatusTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(StatusTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = StatusTime
        self.StatusTime = initvalue_
        self.StatusTime_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackAdvanceNotificationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackAdvanceNotificationDetail.subclass:
            return TrackAdvanceNotificationDetail.subclass(*args_, **kwargs_)
        else:
            return TrackAdvanceNotificationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EstimatedTimeOfArrival(self):
        return self.EstimatedTimeOfArrival
    def set_EstimatedTimeOfArrival(self, EstimatedTimeOfArrival):
        self.EstimatedTimeOfArrival = EstimatedTimeOfArrival
    def get_Reason(self):
        return self.Reason
    def set_Reason(self, Reason):
        self.Reason = Reason
    def get_Status(self):
        return self.Status
    def set_Status(self, Status):
        self.Status = Status
    def get_StatusDescription(self):
        return self.StatusDescription
    def set_StatusDescription(self, StatusDescription):
        self.StatusDescription = StatusDescription
    def get_StatusTime(self):
        return self.StatusTime
    def set_StatusTime(self, StatusTime):
        self.StatusTime = StatusTime
    def validate_TrackAdvanceNotificationStatusType(self, value):
        result = True
        # Validate type TrackAdvanceNotificationStatusType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BACK_ON_TRACK', 'FAIL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TrackAdvanceNotificationStatusType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.EstimatedTimeOfArrival is not None or
            self.Reason is not None or
            self.Status is not None or
            self.StatusDescription is not None or
            self.StatusTime is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackAdvanceNotificationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackAdvanceNotificationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackAdvanceNotificationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackAdvanceNotificationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackAdvanceNotificationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackAdvanceNotificationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackAdvanceNotificationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EstimatedTimeOfArrival is not None:
            namespaceprefix_ = self.EstimatedTimeOfArrival_nsprefix_ + ':' if (UseCapturedNS_ and self.EstimatedTimeOfArrival_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEstimatedTimeOfArrival>%s</%sEstimatedTimeOfArrival>%s' % (namespaceprefix_ , self.gds_format_datetime(self.EstimatedTimeOfArrival, input_name='EstimatedTimeOfArrival'), namespaceprefix_ , eol_))
        if self.Reason is not None:
            namespaceprefix_ = self.Reason_nsprefix_ + ':' if (UseCapturedNS_ and self.Reason_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReason>%s</%sReason>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Reason), input_name='Reason')), namespaceprefix_ , eol_))
        if self.Status is not None:
            namespaceprefix_ = self.Status_nsprefix_ + ':' if (UseCapturedNS_ and self.Status_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatus>%s</%sStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Status), input_name='Status')), namespaceprefix_ , eol_))
        if self.StatusDescription is not None:
            namespaceprefix_ = self.StatusDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.StatusDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatusDescription>%s</%sStatusDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StatusDescription), input_name='StatusDescription')), namespaceprefix_ , eol_))
        if self.StatusTime is not None:
            namespaceprefix_ = self.StatusTime_nsprefix_ + ':' if (UseCapturedNS_ and self.StatusTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatusTime>%s</%sStatusTime>%s' % (namespaceprefix_ , self.gds_format_datetime(self.StatusTime, input_name='StatusTime'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EstimatedTimeOfArrival':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.EstimatedTimeOfArrival = dval_
            self.EstimatedTimeOfArrival_nsprefix_ = child_.prefix
        elif nodeName_ == 'Reason':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Reason')
            value_ = self.gds_validate_string(value_, node, 'Reason')
            self.Reason = value_
            self.Reason_nsprefix_ = child_.prefix
        elif nodeName_ == 'Status':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Status')
            value_ = self.gds_validate_string(value_, node, 'Status')
            self.Status = value_
            self.Status_nsprefix_ = child_.prefix
            # validate type TrackAdvanceNotificationStatusType
            self.validate_TrackAdvanceNotificationStatusType(self.Status)
        elif nodeName_ == 'StatusDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StatusDescription')
            value_ = self.gds_validate_string(value_, node, 'StatusDescription')
            self.StatusDescription = value_
            self.StatusDescription_nsprefix_ = child_.prefix
        elif nodeName_ == 'StatusTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.StatusTime = dval_
            self.StatusTime_nsprefix_ = child_.prefix
# end class TrackAdvanceNotificationDetail


class TrackChargeDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, ChargeAmount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_TrackChargeDetailType(self.Type)
        self.Type_nsprefix_ = None
        self.ChargeAmount = ChargeAmount
        self.ChargeAmount_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackChargeDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackChargeDetail.subclass:
            return TrackChargeDetail.subclass(*args_, **kwargs_)
        else:
            return TrackChargeDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_ChargeAmount(self):
        return self.ChargeAmount
    def set_ChargeAmount(self, ChargeAmount):
        self.ChargeAmount = ChargeAmount
    def validate_TrackChargeDetailType(self, value):
        result = True
        # Validate type TrackChargeDetailType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ORIGINAL_CHARGES']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TrackChargeDetailType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.ChargeAmount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackChargeDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackChargeDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackChargeDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackChargeDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackChargeDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackChargeDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackChargeDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.ChargeAmount is not None:
            namespaceprefix_ = self.ChargeAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.ChargeAmount_nsprefix_) else ''
            self.ChargeAmount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ChargeAmount', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type TrackChargeDetailType
            self.validate_TrackChargeDetailType(self.Type)
        elif nodeName_ == 'ChargeAmount':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ChargeAmount = obj_
            obj_.original_tagname_ = 'ChargeAmount'
# end class TrackChargeDetail


class TrackDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Notification=None, TrackingNumber=None, Barcode=None, TrackingNumberUniqueIdentifier=None, StatusDetail=None, InformationNotes=None, CustomerExceptionRequests=None, Reconciliation=None, ServiceCommitMessage=None, DestinationServiceArea=None, DestinationServiceAreaDescription=None, CarrierCode=None, OperatingCompany=None, OperatingCompanyOrCarrierDescription=None, CartageAgentCompanyName=None, ProductionLocationContactAndAddress=None, OtherIdentifiers=None, FormId=None, Service=None, PackageWeight=None, PackageDimensions=None, PackageDimensionalWeight=None, ShipmentWeight=None, Packaging=None, PhysicalPackagingType=None, PackageSequenceNumber=None, PackageCount=None, ShipmentContentPieceCount=None, PackageContentPieceCount=None, CreatorSoftwareId=None, Charges=None, NickName=None, Notes=None, Attributes=None, ShipmentContents=None, PackageContents=None, ClearanceLocationCode=None, ClearanceBrokerage=None, Commodities=None, ReturnDetail=None, CustomsOptionDetails=None, AdvanceNotificationDetail=None, SpecialHandlings=None, Payments=None, Shipper=None, PossessionStatus=None, ShipperAddress=None, OriginLocationAddress=None, OriginStationId=None, DatesOrTimes=None, TotalTransitDistance=None, DistanceToDestination=None, SpecialInstructions=None, Recipient=None, LastUpdatedDestinationAddress=None, DestinationAddress=None, HoldAtLocationContact=None, HoldAtLocationAddress=None, DestinationStationId=None, DestinationLocationAddress=None, DestinationLocationType=None, DestinationLocationTimeZoneOffset=None, ActualDeliveryAddress=None, OfficeOrderDeliveryMethod=None, DeliveryLocationType=None, DeliveryLocationDescription=None, DeliveryAttempts=None, DeliverySignatureName=None, PieceCountVerificationDetails=None, TotalUniqueAddressCountInConsolidation=None, AvailableImages=None, Signature=None, NotificationEventsAvailable=None, SplitShipmentParts=None, DeliveryOptionEligibilityDetails=None, Events=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Notification = Notification
        self.Notification_nsprefix_ = None
        self.TrackingNumber = TrackingNumber
        self.TrackingNumber_nsprefix_ = None
        self.Barcode = Barcode
        self.Barcode_nsprefix_ = None
        self.TrackingNumberUniqueIdentifier = TrackingNumberUniqueIdentifier
        self.TrackingNumberUniqueIdentifier_nsprefix_ = None
        self.StatusDetail = StatusDetail
        self.StatusDetail_nsprefix_ = None
        if InformationNotes is None:
            self.InformationNotes = []
        else:
            self.InformationNotes = InformationNotes
        self.InformationNotes_nsprefix_ = None
        if CustomerExceptionRequests is None:
            self.CustomerExceptionRequests = []
        else:
            self.CustomerExceptionRequests = CustomerExceptionRequests
        self.CustomerExceptionRequests_nsprefix_ = None
        self.Reconciliation = Reconciliation
        self.Reconciliation_nsprefix_ = None
        self.ServiceCommitMessage = ServiceCommitMessage
        self.ServiceCommitMessage_nsprefix_ = None
        self.DestinationServiceArea = DestinationServiceArea
        self.DestinationServiceArea_nsprefix_ = None
        self.DestinationServiceAreaDescription = DestinationServiceAreaDescription
        self.DestinationServiceAreaDescription_nsprefix_ = None
        self.CarrierCode = CarrierCode
        self.validate_CarrierCodeType(self.CarrierCode)
        self.CarrierCode_nsprefix_ = None
        self.OperatingCompany = OperatingCompany
        self.validate_OperatingCompanyType(self.OperatingCompany)
        self.OperatingCompany_nsprefix_ = None
        self.OperatingCompanyOrCarrierDescription = OperatingCompanyOrCarrierDescription
        self.OperatingCompanyOrCarrierDescription_nsprefix_ = None
        self.CartageAgentCompanyName = CartageAgentCompanyName
        self.CartageAgentCompanyName_nsprefix_ = None
        self.ProductionLocationContactAndAddress = ProductionLocationContactAndAddress
        self.ProductionLocationContactAndAddress_nsprefix_ = None
        if OtherIdentifiers is None:
            self.OtherIdentifiers = []
        else:
            self.OtherIdentifiers = OtherIdentifiers
        self.OtherIdentifiers_nsprefix_ = None
        self.FormId = FormId
        self.FormId_nsprefix_ = None
        self.Service = Service
        self.Service_nsprefix_ = None
        self.PackageWeight = PackageWeight
        self.PackageWeight_nsprefix_ = None
        self.PackageDimensions = PackageDimensions
        self.PackageDimensions_nsprefix_ = None
        self.PackageDimensionalWeight = PackageDimensionalWeight
        self.PackageDimensionalWeight_nsprefix_ = None
        self.ShipmentWeight = ShipmentWeight
        self.ShipmentWeight_nsprefix_ = None
        self.Packaging = Packaging
        self.Packaging_nsprefix_ = None
        self.PhysicalPackagingType = PhysicalPackagingType
        self.validate_PhysicalPackagingType(self.PhysicalPackagingType)
        self.PhysicalPackagingType_nsprefix_ = None
        self.PackageSequenceNumber = PackageSequenceNumber
        self.PackageSequenceNumber_nsprefix_ = None
        self.PackageCount = PackageCount
        self.PackageCount_nsprefix_ = None
        self.ShipmentContentPieceCount = ShipmentContentPieceCount
        self.ShipmentContentPieceCount_nsprefix_ = None
        self.PackageContentPieceCount = PackageContentPieceCount
        self.PackageContentPieceCount_nsprefix_ = None
        self.CreatorSoftwareId = CreatorSoftwareId
        self.CreatorSoftwareId_nsprefix_ = None
        if Charges is None:
            self.Charges = []
        else:
            self.Charges = Charges
        self.Charges_nsprefix_ = None
        self.NickName = NickName
        self.NickName_nsprefix_ = None
        self.Notes = Notes
        self.Notes_nsprefix_ = None
        if Attributes is None:
            self.Attributes = []
        else:
            self.Attributes = Attributes
        self.Attributes_nsprefix_ = None
        if ShipmentContents is None:
            self.ShipmentContents = []
        else:
            self.ShipmentContents = ShipmentContents
        self.ShipmentContents_nsprefix_ = None
        if PackageContents is None:
            self.PackageContents = []
        else:
            self.PackageContents = PackageContents
        self.PackageContents_nsprefix_ = None
        self.ClearanceLocationCode = ClearanceLocationCode
        self.ClearanceLocationCode_nsprefix_ = None
        self.ClearanceBrokerage = ClearanceBrokerage
        self.validate_ClearanceBrokerageType(self.ClearanceBrokerage)
        self.ClearanceBrokerage_nsprefix_ = None
        if Commodities is None:
            self.Commodities = []
        else:
            self.Commodities = Commodities
        self.Commodities_nsprefix_ = None
        self.ReturnDetail = ReturnDetail
        self.ReturnDetail_nsprefix_ = None
        if CustomsOptionDetails is None:
            self.CustomsOptionDetails = []
        else:
            self.CustomsOptionDetails = CustomsOptionDetails
        self.CustomsOptionDetails_nsprefix_ = None
        self.AdvanceNotificationDetail = AdvanceNotificationDetail
        self.AdvanceNotificationDetail_nsprefix_ = None
        if SpecialHandlings is None:
            self.SpecialHandlings = []
        else:
            self.SpecialHandlings = SpecialHandlings
        self.SpecialHandlings_nsprefix_ = None
        if Payments is None:
            self.Payments = []
        else:
            self.Payments = Payments
        self.Payments_nsprefix_ = None
        self.Shipper = Shipper
        self.Shipper_nsprefix_ = None
        self.PossessionStatus = PossessionStatus
        self.validate_TrackPossessionStatusType(self.PossessionStatus)
        self.PossessionStatus_nsprefix_ = None
        self.ShipperAddress = ShipperAddress
        self.ShipperAddress_nsprefix_ = None
        self.OriginLocationAddress = OriginLocationAddress
        self.OriginLocationAddress_nsprefix_ = None
        self.OriginStationId = OriginStationId
        self.OriginStationId_nsprefix_ = None
        if DatesOrTimes is None:
            self.DatesOrTimes = []
        else:
            self.DatesOrTimes = DatesOrTimes
        self.DatesOrTimes_nsprefix_ = None
        self.TotalTransitDistance = TotalTransitDistance
        self.TotalTransitDistance_nsprefix_ = None
        self.DistanceToDestination = DistanceToDestination
        self.DistanceToDestination_nsprefix_ = None
        if SpecialInstructions is None:
            self.SpecialInstructions = []
        else:
            self.SpecialInstructions = SpecialInstructions
        self.SpecialInstructions_nsprefix_ = None
        self.Recipient = Recipient
        self.Recipient_nsprefix_ = None
        self.LastUpdatedDestinationAddress = LastUpdatedDestinationAddress
        self.LastUpdatedDestinationAddress_nsprefix_ = None
        self.DestinationAddress = DestinationAddress
        self.DestinationAddress_nsprefix_ = None
        self.HoldAtLocationContact = HoldAtLocationContact
        self.HoldAtLocationContact_nsprefix_ = None
        self.HoldAtLocationAddress = HoldAtLocationAddress
        self.HoldAtLocationAddress_nsprefix_ = None
        self.DestinationStationId = DestinationStationId
        self.DestinationStationId_nsprefix_ = None
        self.DestinationLocationAddress = DestinationLocationAddress
        self.DestinationLocationAddress_nsprefix_ = None
        self.DestinationLocationType = DestinationLocationType
        self.validate_FedExLocationType(self.DestinationLocationType)
        self.DestinationLocationType_nsprefix_ = None
        self.DestinationLocationTimeZoneOffset = DestinationLocationTimeZoneOffset
        self.DestinationLocationTimeZoneOffset_nsprefix_ = None
        self.ActualDeliveryAddress = ActualDeliveryAddress
        self.ActualDeliveryAddress_nsprefix_ = None
        self.OfficeOrderDeliveryMethod = OfficeOrderDeliveryMethod
        self.validate_OfficeOrderDeliveryMethodType(self.OfficeOrderDeliveryMethod)
        self.OfficeOrderDeliveryMethod_nsprefix_ = None
        self.DeliveryLocationType = DeliveryLocationType
        self.validate_TrackDeliveryLocationType(self.DeliveryLocationType)
        self.DeliveryLocationType_nsprefix_ = None
        self.DeliveryLocationDescription = DeliveryLocationDescription
        self.DeliveryLocationDescription_nsprefix_ = None
        self.DeliveryAttempts = DeliveryAttempts
        self.DeliveryAttempts_nsprefix_ = None
        self.DeliverySignatureName = DeliverySignatureName
        self.DeliverySignatureName_nsprefix_ = None
        if PieceCountVerificationDetails is None:
            self.PieceCountVerificationDetails = []
        else:
            self.PieceCountVerificationDetails = PieceCountVerificationDetails
        self.PieceCountVerificationDetails_nsprefix_ = None
        self.TotalUniqueAddressCountInConsolidation = TotalUniqueAddressCountInConsolidation
        self.TotalUniqueAddressCountInConsolidation_nsprefix_ = None
        if AvailableImages is None:
            self.AvailableImages = []
        else:
            self.AvailableImages = AvailableImages
        self.AvailableImages_nsprefix_ = None
        self.Signature = Signature
        self.Signature_nsprefix_ = None
        if NotificationEventsAvailable is None:
            self.NotificationEventsAvailable = []
        else:
            self.NotificationEventsAvailable = NotificationEventsAvailable
        self.NotificationEventsAvailable_nsprefix_ = None
        if SplitShipmentParts is None:
            self.SplitShipmentParts = []
        else:
            self.SplitShipmentParts = SplitShipmentParts
        self.SplitShipmentParts_nsprefix_ = None
        if DeliveryOptionEligibilityDetails is None:
            self.DeliveryOptionEligibilityDetails = []
        else:
            self.DeliveryOptionEligibilityDetails = DeliveryOptionEligibilityDetails
        self.DeliveryOptionEligibilityDetails_nsprefix_ = None
        if Events is None:
            self.Events = []
        else:
            self.Events = Events
        self.Events_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackDetail.subclass:
            return TrackDetail.subclass(*args_, **kwargs_)
        else:
            return TrackDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Notification(self):
        return self.Notification
    def set_Notification(self, Notification):
        self.Notification = Notification
    def get_TrackingNumber(self):
        return self.TrackingNumber
    def set_TrackingNumber(self, TrackingNumber):
        self.TrackingNumber = TrackingNumber
    def get_Barcode(self):
        return self.Barcode
    def set_Barcode(self, Barcode):
        self.Barcode = Barcode
    def get_TrackingNumberUniqueIdentifier(self):
        return self.TrackingNumberUniqueIdentifier
    def set_TrackingNumberUniqueIdentifier(self, TrackingNumberUniqueIdentifier):
        self.TrackingNumberUniqueIdentifier = TrackingNumberUniqueIdentifier
    def get_StatusDetail(self):
        return self.StatusDetail
    def set_StatusDetail(self, StatusDetail):
        self.StatusDetail = StatusDetail
    def get_InformationNotes(self):
        return self.InformationNotes
    def set_InformationNotes(self, InformationNotes):
        self.InformationNotes = InformationNotes
    def add_InformationNotes(self, value):
        self.InformationNotes.append(value)
    def insert_InformationNotes_at(self, index, value):
        self.InformationNotes.insert(index, value)
    def replace_InformationNotes_at(self, index, value):
        self.InformationNotes[index] = value
    def get_CustomerExceptionRequests(self):
        return self.CustomerExceptionRequests
    def set_CustomerExceptionRequests(self, CustomerExceptionRequests):
        self.CustomerExceptionRequests = CustomerExceptionRequests
    def add_CustomerExceptionRequests(self, value):
        self.CustomerExceptionRequests.append(value)
    def insert_CustomerExceptionRequests_at(self, index, value):
        self.CustomerExceptionRequests.insert(index, value)
    def replace_CustomerExceptionRequests_at(self, index, value):
        self.CustomerExceptionRequests[index] = value
    def get_Reconciliation(self):
        return self.Reconciliation
    def set_Reconciliation(self, Reconciliation):
        self.Reconciliation = Reconciliation
    def get_ServiceCommitMessage(self):
        return self.ServiceCommitMessage
    def set_ServiceCommitMessage(self, ServiceCommitMessage):
        self.ServiceCommitMessage = ServiceCommitMessage
    def get_DestinationServiceArea(self):
        return self.DestinationServiceArea
    def set_DestinationServiceArea(self, DestinationServiceArea):
        self.DestinationServiceArea = DestinationServiceArea
    def get_DestinationServiceAreaDescription(self):
        return self.DestinationServiceAreaDescription
    def set_DestinationServiceAreaDescription(self, DestinationServiceAreaDescription):
        self.DestinationServiceAreaDescription = DestinationServiceAreaDescription
    def get_CarrierCode(self):
        return self.CarrierCode
    def set_CarrierCode(self, CarrierCode):
        self.CarrierCode = CarrierCode
    def get_OperatingCompany(self):
        return self.OperatingCompany
    def set_OperatingCompany(self, OperatingCompany):
        self.OperatingCompany = OperatingCompany
    def get_OperatingCompanyOrCarrierDescription(self):
        return self.OperatingCompanyOrCarrierDescription
    def set_OperatingCompanyOrCarrierDescription(self, OperatingCompanyOrCarrierDescription):
        self.OperatingCompanyOrCarrierDescription = OperatingCompanyOrCarrierDescription
    def get_CartageAgentCompanyName(self):
        return self.CartageAgentCompanyName
    def set_CartageAgentCompanyName(self, CartageAgentCompanyName):
        self.CartageAgentCompanyName = CartageAgentCompanyName
    def get_ProductionLocationContactAndAddress(self):
        return self.ProductionLocationContactAndAddress
    def set_ProductionLocationContactAndAddress(self, ProductionLocationContactAndAddress):
        self.ProductionLocationContactAndAddress = ProductionLocationContactAndAddress
    def get_OtherIdentifiers(self):
        return self.OtherIdentifiers
    def set_OtherIdentifiers(self, OtherIdentifiers):
        self.OtherIdentifiers = OtherIdentifiers
    def add_OtherIdentifiers(self, value):
        self.OtherIdentifiers.append(value)
    def insert_OtherIdentifiers_at(self, index, value):
        self.OtherIdentifiers.insert(index, value)
    def replace_OtherIdentifiers_at(self, index, value):
        self.OtherIdentifiers[index] = value
    def get_FormId(self):
        return self.FormId
    def set_FormId(self, FormId):
        self.FormId = FormId
    def get_Service(self):
        return self.Service
    def set_Service(self, Service):
        self.Service = Service
    def get_PackageWeight(self):
        return self.PackageWeight
    def set_PackageWeight(self, PackageWeight):
        self.PackageWeight = PackageWeight
    def get_PackageDimensions(self):
        return self.PackageDimensions
    def set_PackageDimensions(self, PackageDimensions):
        self.PackageDimensions = PackageDimensions
    def get_PackageDimensionalWeight(self):
        return self.PackageDimensionalWeight
    def set_PackageDimensionalWeight(self, PackageDimensionalWeight):
        self.PackageDimensionalWeight = PackageDimensionalWeight
    def get_ShipmentWeight(self):
        return self.ShipmentWeight
    def set_ShipmentWeight(self, ShipmentWeight):
        self.ShipmentWeight = ShipmentWeight
    def get_Packaging(self):
        return self.Packaging
    def set_Packaging(self, Packaging):
        self.Packaging = Packaging
    def get_PhysicalPackagingType(self):
        return self.PhysicalPackagingType
    def set_PhysicalPackagingType(self, PhysicalPackagingType):
        self.PhysicalPackagingType = PhysicalPackagingType
    def get_PackageSequenceNumber(self):
        return self.PackageSequenceNumber
    def set_PackageSequenceNumber(self, PackageSequenceNumber):
        self.PackageSequenceNumber = PackageSequenceNumber
    def get_PackageCount(self):
        return self.PackageCount
    def set_PackageCount(self, PackageCount):
        self.PackageCount = PackageCount
    def get_ShipmentContentPieceCount(self):
        return self.ShipmentContentPieceCount
    def set_ShipmentContentPieceCount(self, ShipmentContentPieceCount):
        self.ShipmentContentPieceCount = ShipmentContentPieceCount
    def get_PackageContentPieceCount(self):
        return self.PackageContentPieceCount
    def set_PackageContentPieceCount(self, PackageContentPieceCount):
        self.PackageContentPieceCount = PackageContentPieceCount
    def get_CreatorSoftwareId(self):
        return self.CreatorSoftwareId
    def set_CreatorSoftwareId(self, CreatorSoftwareId):
        self.CreatorSoftwareId = CreatorSoftwareId
    def get_Charges(self):
        return self.Charges
    def set_Charges(self, Charges):
        self.Charges = Charges
    def add_Charges(self, value):
        self.Charges.append(value)
    def insert_Charges_at(self, index, value):
        self.Charges.insert(index, value)
    def replace_Charges_at(self, index, value):
        self.Charges[index] = value
    def get_NickName(self):
        return self.NickName
    def set_NickName(self, NickName):
        self.NickName = NickName
    def get_Notes(self):
        return self.Notes
    def set_Notes(self, Notes):
        self.Notes = Notes
    def get_Attributes(self):
        return self.Attributes
    def set_Attributes(self, Attributes):
        self.Attributes = Attributes
    def add_Attributes(self, value):
        self.Attributes.append(value)
    def insert_Attributes_at(self, index, value):
        self.Attributes.insert(index, value)
    def replace_Attributes_at(self, index, value):
        self.Attributes[index] = value
    def get_ShipmentContents(self):
        return self.ShipmentContents
    def set_ShipmentContents(self, ShipmentContents):
        self.ShipmentContents = ShipmentContents
    def add_ShipmentContents(self, value):
        self.ShipmentContents.append(value)
    def insert_ShipmentContents_at(self, index, value):
        self.ShipmentContents.insert(index, value)
    def replace_ShipmentContents_at(self, index, value):
        self.ShipmentContents[index] = value
    def get_PackageContents(self):
        return self.PackageContents
    def set_PackageContents(self, PackageContents):
        self.PackageContents = PackageContents
    def add_PackageContents(self, value):
        self.PackageContents.append(value)
    def insert_PackageContents_at(self, index, value):
        self.PackageContents.insert(index, value)
    def replace_PackageContents_at(self, index, value):
        self.PackageContents[index] = value
    def get_ClearanceLocationCode(self):
        return self.ClearanceLocationCode
    def set_ClearanceLocationCode(self, ClearanceLocationCode):
        self.ClearanceLocationCode = ClearanceLocationCode
    def get_ClearanceBrokerage(self):
        return self.ClearanceBrokerage
    def set_ClearanceBrokerage(self, ClearanceBrokerage):
        self.ClearanceBrokerage = ClearanceBrokerage
    def get_Commodities(self):
        return self.Commodities
    def set_Commodities(self, Commodities):
        self.Commodities = Commodities
    def add_Commodities(self, value):
        self.Commodities.append(value)
    def insert_Commodities_at(self, index, value):
        self.Commodities.insert(index, value)
    def replace_Commodities_at(self, index, value):
        self.Commodities[index] = value
    def get_ReturnDetail(self):
        return self.ReturnDetail
    def set_ReturnDetail(self, ReturnDetail):
        self.ReturnDetail = ReturnDetail
    def get_CustomsOptionDetails(self):
        return self.CustomsOptionDetails
    def set_CustomsOptionDetails(self, CustomsOptionDetails):
        self.CustomsOptionDetails = CustomsOptionDetails
    def add_CustomsOptionDetails(self, value):
        self.CustomsOptionDetails.append(value)
    def insert_CustomsOptionDetails_at(self, index, value):
        self.CustomsOptionDetails.insert(index, value)
    def replace_CustomsOptionDetails_at(self, index, value):
        self.CustomsOptionDetails[index] = value
    def get_AdvanceNotificationDetail(self):
        return self.AdvanceNotificationDetail
    def set_AdvanceNotificationDetail(self, AdvanceNotificationDetail):
        self.AdvanceNotificationDetail = AdvanceNotificationDetail
    def get_SpecialHandlings(self):
        return self.SpecialHandlings
    def set_SpecialHandlings(self, SpecialHandlings):
        self.SpecialHandlings = SpecialHandlings
    def add_SpecialHandlings(self, value):
        self.SpecialHandlings.append(value)
    def insert_SpecialHandlings_at(self, index, value):
        self.SpecialHandlings.insert(index, value)
    def replace_SpecialHandlings_at(self, index, value):
        self.SpecialHandlings[index] = value
    def get_Payments(self):
        return self.Payments
    def set_Payments(self, Payments):
        self.Payments = Payments
    def add_Payments(self, value):
        self.Payments.append(value)
    def insert_Payments_at(self, index, value):
        self.Payments.insert(index, value)
    def replace_Payments_at(self, index, value):
        self.Payments[index] = value
    def get_Shipper(self):
        return self.Shipper
    def set_Shipper(self, Shipper):
        self.Shipper = Shipper
    def get_PossessionStatus(self):
        return self.PossessionStatus
    def set_PossessionStatus(self, PossessionStatus):
        self.PossessionStatus = PossessionStatus
    def get_ShipperAddress(self):
        return self.ShipperAddress
    def set_ShipperAddress(self, ShipperAddress):
        self.ShipperAddress = ShipperAddress
    def get_OriginLocationAddress(self):
        return self.OriginLocationAddress
    def set_OriginLocationAddress(self, OriginLocationAddress):
        self.OriginLocationAddress = OriginLocationAddress
    def get_OriginStationId(self):
        return self.OriginStationId
    def set_OriginStationId(self, OriginStationId):
        self.OriginStationId = OriginStationId
    def get_DatesOrTimes(self):
        return self.DatesOrTimes
    def set_DatesOrTimes(self, DatesOrTimes):
        self.DatesOrTimes = DatesOrTimes
    def add_DatesOrTimes(self, value):
        self.DatesOrTimes.append(value)
    def insert_DatesOrTimes_at(self, index, value):
        self.DatesOrTimes.insert(index, value)
    def replace_DatesOrTimes_at(self, index, value):
        self.DatesOrTimes[index] = value
    def get_TotalTransitDistance(self):
        return self.TotalTransitDistance
    def set_TotalTransitDistance(self, TotalTransitDistance):
        self.TotalTransitDistance = TotalTransitDistance
    def get_DistanceToDestination(self):
        return self.DistanceToDestination
    def set_DistanceToDestination(self, DistanceToDestination):
        self.DistanceToDestination = DistanceToDestination
    def get_SpecialInstructions(self):
        return self.SpecialInstructions
    def set_SpecialInstructions(self, SpecialInstructions):
        self.SpecialInstructions = SpecialInstructions
    def add_SpecialInstructions(self, value):
        self.SpecialInstructions.append(value)
    def insert_SpecialInstructions_at(self, index, value):
        self.SpecialInstructions.insert(index, value)
    def replace_SpecialInstructions_at(self, index, value):
        self.SpecialInstructions[index] = value
    def get_Recipient(self):
        return self.Recipient
    def set_Recipient(self, Recipient):
        self.Recipient = Recipient
    def get_LastUpdatedDestinationAddress(self):
        return self.LastUpdatedDestinationAddress
    def set_LastUpdatedDestinationAddress(self, LastUpdatedDestinationAddress):
        self.LastUpdatedDestinationAddress = LastUpdatedDestinationAddress
    def get_DestinationAddress(self):
        return self.DestinationAddress
    def set_DestinationAddress(self, DestinationAddress):
        self.DestinationAddress = DestinationAddress
    def get_HoldAtLocationContact(self):
        return self.HoldAtLocationContact
    def set_HoldAtLocationContact(self, HoldAtLocationContact):
        self.HoldAtLocationContact = HoldAtLocationContact
    def get_HoldAtLocationAddress(self):
        return self.HoldAtLocationAddress
    def set_HoldAtLocationAddress(self, HoldAtLocationAddress):
        self.HoldAtLocationAddress = HoldAtLocationAddress
    def get_DestinationStationId(self):
        return self.DestinationStationId
    def set_DestinationStationId(self, DestinationStationId):
        self.DestinationStationId = DestinationStationId
    def get_DestinationLocationAddress(self):
        return self.DestinationLocationAddress
    def set_DestinationLocationAddress(self, DestinationLocationAddress):
        self.DestinationLocationAddress = DestinationLocationAddress
    def get_DestinationLocationType(self):
        return self.DestinationLocationType
    def set_DestinationLocationType(self, DestinationLocationType):
        self.DestinationLocationType = DestinationLocationType
    def get_DestinationLocationTimeZoneOffset(self):
        return self.DestinationLocationTimeZoneOffset
    def set_DestinationLocationTimeZoneOffset(self, DestinationLocationTimeZoneOffset):
        self.DestinationLocationTimeZoneOffset = DestinationLocationTimeZoneOffset
    def get_ActualDeliveryAddress(self):
        return self.ActualDeliveryAddress
    def set_ActualDeliveryAddress(self, ActualDeliveryAddress):
        self.ActualDeliveryAddress = ActualDeliveryAddress
    def get_OfficeOrderDeliveryMethod(self):
        return self.OfficeOrderDeliveryMethod
    def set_OfficeOrderDeliveryMethod(self, OfficeOrderDeliveryMethod):
        self.OfficeOrderDeliveryMethod = OfficeOrderDeliveryMethod
    def get_DeliveryLocationType(self):
        return self.DeliveryLocationType
    def set_DeliveryLocationType(self, DeliveryLocationType):
        self.DeliveryLocationType = DeliveryLocationType
    def get_DeliveryLocationDescription(self):
        return self.DeliveryLocationDescription
    def set_DeliveryLocationDescription(self, DeliveryLocationDescription):
        self.DeliveryLocationDescription = DeliveryLocationDescription
    def get_DeliveryAttempts(self):
        return self.DeliveryAttempts
    def set_DeliveryAttempts(self, DeliveryAttempts):
        self.DeliveryAttempts = DeliveryAttempts
    def get_DeliverySignatureName(self):
        return self.DeliverySignatureName
    def set_DeliverySignatureName(self, DeliverySignatureName):
        self.DeliverySignatureName = DeliverySignatureName
    def get_PieceCountVerificationDetails(self):
        return self.PieceCountVerificationDetails
    def set_PieceCountVerificationDetails(self, PieceCountVerificationDetails):
        self.PieceCountVerificationDetails = PieceCountVerificationDetails
    def add_PieceCountVerificationDetails(self, value):
        self.PieceCountVerificationDetails.append(value)
    def insert_PieceCountVerificationDetails_at(self, index, value):
        self.PieceCountVerificationDetails.insert(index, value)
    def replace_PieceCountVerificationDetails_at(self, index, value):
        self.PieceCountVerificationDetails[index] = value
    def get_TotalUniqueAddressCountInConsolidation(self):
        return self.TotalUniqueAddressCountInConsolidation
    def set_TotalUniqueAddressCountInConsolidation(self, TotalUniqueAddressCountInConsolidation):
        self.TotalUniqueAddressCountInConsolidation = TotalUniqueAddressCountInConsolidation
    def get_AvailableImages(self):
        return self.AvailableImages
    def set_AvailableImages(self, AvailableImages):
        self.AvailableImages = AvailableImages
    def add_AvailableImages(self, value):
        self.AvailableImages.append(value)
    def insert_AvailableImages_at(self, index, value):
        self.AvailableImages.insert(index, value)
    def replace_AvailableImages_at(self, index, value):
        self.AvailableImages[index] = value
    def get_Signature(self):
        return self.Signature
    def set_Signature(self, Signature):
        self.Signature = Signature
    def get_NotificationEventsAvailable(self):
        return self.NotificationEventsAvailable
    def set_NotificationEventsAvailable(self, NotificationEventsAvailable):
        self.NotificationEventsAvailable = NotificationEventsAvailable
    def add_NotificationEventsAvailable(self, value):
        self.NotificationEventsAvailable.append(value)
    def insert_NotificationEventsAvailable_at(self, index, value):
        self.NotificationEventsAvailable.insert(index, value)
    def replace_NotificationEventsAvailable_at(self, index, value):
        self.NotificationEventsAvailable[index] = value
    def get_SplitShipmentParts(self):
        return self.SplitShipmentParts
    def set_SplitShipmentParts(self, SplitShipmentParts):
        self.SplitShipmentParts = SplitShipmentParts
    def add_SplitShipmentParts(self, value):
        self.SplitShipmentParts.append(value)
    def insert_SplitShipmentParts_at(self, index, value):
        self.SplitShipmentParts.insert(index, value)
    def replace_SplitShipmentParts_at(self, index, value):
        self.SplitShipmentParts[index] = value
    def get_DeliveryOptionEligibilityDetails(self):
        return self.DeliveryOptionEligibilityDetails
    def set_DeliveryOptionEligibilityDetails(self, DeliveryOptionEligibilityDetails):
        self.DeliveryOptionEligibilityDetails = DeliveryOptionEligibilityDetails
    def add_DeliveryOptionEligibilityDetails(self, value):
        self.DeliveryOptionEligibilityDetails.append(value)
    def insert_DeliveryOptionEligibilityDetails_at(self, index, value):
        self.DeliveryOptionEligibilityDetails.insert(index, value)
    def replace_DeliveryOptionEligibilityDetails_at(self, index, value):
        self.DeliveryOptionEligibilityDetails[index] = value
    def get_Events(self):
        return self.Events
    def set_Events(self, Events):
        self.Events = Events
    def add_Events(self, value):
        self.Events.append(value)
    def insert_Events_at(self, index, value):
        self.Events.insert(index, value)
    def replace_Events_at(self, index, value):
        self.Events[index] = value
    def validate_CarrierCodeType(self, value):
        result = True
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FXCC', 'FXFR', 'FXSP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CarrierCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_OperatingCompanyType(self, value):
        result = True
        # Validate type OperatingCompanyType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_CARGO', 'FEDEX_CORPORATE_SERVICES', 'FEDEX_CORPORATION', 'FEDEX_CUSTOMER_INFORMATION_SYSTEMS', 'FEDEX_CUSTOM_CRITICAL', 'FEDEX_EXPRESS', 'FEDEX_FREIGHT', 'FEDEX_GROUND', 'FEDEX_KINKOS', 'FEDEX_OFFICE', 'FEDEX_SERVICES', 'FEDEX_TRADE_NETWORKS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on OperatingCompanyType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_PhysicalPackagingType(self, value):
        result = True
        # Validate type PhysicalPackagingType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BAG', 'BARREL', 'BASKET', 'BOX', 'BUCKET', 'BUNDLE', 'CAGE', 'CARTON', 'CASE', 'CHEST', 'CONTAINER', 'CRATE', 'CYLINDER', 'DRUM', 'ENVELOPE', 'HAMPER', 'OTHER', 'PACKAGE', 'PAIL', 'PALLET', 'PARCEL', 'PIECE', 'REEL', 'ROLL', 'SACK', 'SHRINK_WRAPPED', 'SKID', 'TANK', 'TOTE_BIN', 'TUBE', 'UNIT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PhysicalPackagingType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_TrackDetailAttributeType(self, value):
        result = True
        # Validate type TrackDetailAttributeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['INCLUDED_IN_WATCHLIST']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TrackDetailAttributeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ClearanceBrokerageType(self, value):
        result = True
        # Validate type ClearanceBrokerageType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BROKER_INCLUSIVE', 'BROKER_INCLUSIVE_NON_RESIDENT_IMPORTER', 'BROKER_SELECT', 'BROKER_SELECT_NON_RESIDENT_IMPORTER', 'BROKER_UNASSIGNED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ClearanceBrokerageType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_TrackPossessionStatusType(self, value):
        result = True
        # Validate type TrackPossessionStatusType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BROKER', 'CARRIER', 'CUSTOMS', 'RECIPIENT', 'SHIPPER', 'SPLIT_STATUS', 'TRANSFER_PARTNER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TrackPossessionStatusType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_FedExLocationType(self, value):
        result = True
        # Validate type FedExLocationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_AUTHORIZED_SHIP_CENTER', 'FEDEX_EXPRESS_STATION', 'FEDEX_FACILITY', 'FEDEX_FREIGHT_SERVICE_CENTER', 'FEDEX_GROUND_TERMINAL', 'FEDEX_HOME_DELIVERY_STATION', 'FEDEX_OFFICE', 'FEDEX_ONSITE', 'FEDEX_SELF_SERVICE_LOCATION', 'FEDEX_SHIPSITE', 'FEDEX_SHIP_AND_GET', 'FEDEX_SMART_POST_HUB']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FedExLocationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_OfficeOrderDeliveryMethodType(self, value):
        result = True
        # Validate type OfficeOrderDeliveryMethodType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['COURIER', 'OTHER', 'PICKUP', 'SHIPMENT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on OfficeOrderDeliveryMethodType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_TrackDeliveryLocationType(self, value):
        result = True
        # Validate type TrackDeliveryLocationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['APARTMENT_OFFICE', 'FEDEX_LOCATION', 'GATE_HOUSE', 'GUARD_OR_SECURITY_STATION', 'IN_BOND_OR_CAGE', 'LEASING_OFFICE', 'MAILROOM', 'MAIN_OFFICE', 'MANAGER_OFFICE', 'OTHER', 'PHARMACY', 'RECEPTIONIST_OR_FRONT_DESK', 'RENTAL_OFFICE', 'RESIDENCE', 'SHIPPING_RECEIVING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TrackDeliveryLocationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_NotificationEventType(self, value):
        result = True
        # Validate type NotificationEventType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ON_DELIVERY', 'ON_ESTIMATED_DELIVERY', 'ON_EXCEPTION', 'ON_PICKUP_DRIVER_ARRIVED', 'ON_PICKUP_DRIVER_ASSIGNED', 'ON_PICKUP_DRIVER_DEPARTED', 'ON_PICKUP_DRIVER_EN_ROUTE', 'ON_SHIPMENT', 'ON_TENDER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationEventType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Notification is not None or
            self.TrackingNumber is not None or
            self.Barcode is not None or
            self.TrackingNumberUniqueIdentifier is not None or
            self.StatusDetail is not None or
            self.InformationNotes or
            self.CustomerExceptionRequests or
            self.Reconciliation is not None or
            self.ServiceCommitMessage is not None or
            self.DestinationServiceArea is not None or
            self.DestinationServiceAreaDescription is not None or
            self.CarrierCode is not None or
            self.OperatingCompany is not None or
            self.OperatingCompanyOrCarrierDescription is not None or
            self.CartageAgentCompanyName is not None or
            self.ProductionLocationContactAndAddress is not None or
            self.OtherIdentifiers or
            self.FormId is not None or
            self.Service is not None or
            self.PackageWeight is not None or
            self.PackageDimensions is not None or
            self.PackageDimensionalWeight is not None or
            self.ShipmentWeight is not None or
            self.Packaging is not None or
            self.PhysicalPackagingType is not None or
            self.PackageSequenceNumber is not None or
            self.PackageCount is not None or
            self.ShipmentContentPieceCount is not None or
            self.PackageContentPieceCount is not None or
            self.CreatorSoftwareId is not None or
            self.Charges or
            self.NickName is not None or
            self.Notes is not None or
            self.Attributes or
            self.ShipmentContents or
            self.PackageContents or
            self.ClearanceLocationCode is not None or
            self.ClearanceBrokerage is not None or
            self.Commodities or
            self.ReturnDetail is not None or
            self.CustomsOptionDetails or
            self.AdvanceNotificationDetail is not None or
            self.SpecialHandlings or
            self.Payments or
            self.Shipper is not None or
            self.PossessionStatus is not None or
            self.ShipperAddress is not None or
            self.OriginLocationAddress is not None or
            self.OriginStationId is not None or
            self.DatesOrTimes or
            self.TotalTransitDistance is not None or
            self.DistanceToDestination is not None or
            self.SpecialInstructions or
            self.Recipient is not None or
            self.LastUpdatedDestinationAddress is not None or
            self.DestinationAddress is not None or
            self.HoldAtLocationContact is not None or
            self.HoldAtLocationAddress is not None or
            self.DestinationStationId is not None or
            self.DestinationLocationAddress is not None or
            self.DestinationLocationType is not None or
            self.DestinationLocationTimeZoneOffset is not None or
            self.ActualDeliveryAddress is not None or
            self.OfficeOrderDeliveryMethod is not None or
            self.DeliveryLocationType is not None or
            self.DeliveryLocationDescription is not None or
            self.DeliveryAttempts is not None or
            self.DeliverySignatureName is not None or
            self.PieceCountVerificationDetails or
            self.TotalUniqueAddressCountInConsolidation is not None or
            self.AvailableImages or
            self.Signature is not None or
            self.NotificationEventsAvailable or
            self.SplitShipmentParts or
            self.DeliveryOptionEligibilityDetails or
            self.Events
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Notification is not None:
            namespaceprefix_ = self.Notification_nsprefix_ + ':' if (UseCapturedNS_ and self.Notification_nsprefix_) else ''
            self.Notification.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Notification', pretty_print=pretty_print)
        if self.TrackingNumber is not None:
            namespaceprefix_ = self.TrackingNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTrackingNumber>%s</%sTrackingNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumber), input_name='TrackingNumber')), namespaceprefix_ , eol_))
        if self.Barcode is not None:
            namespaceprefix_ = self.Barcode_nsprefix_ + ':' if (UseCapturedNS_ and self.Barcode_nsprefix_) else ''
            self.Barcode.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Barcode', pretty_print=pretty_print)
        if self.TrackingNumberUniqueIdentifier is not None:
            namespaceprefix_ = self.TrackingNumberUniqueIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingNumberUniqueIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTrackingNumberUniqueIdentifier>%s</%sTrackingNumberUniqueIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumberUniqueIdentifier), input_name='TrackingNumberUniqueIdentifier')), namespaceprefix_ , eol_))
        if self.StatusDetail is not None:
            namespaceprefix_ = self.StatusDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.StatusDetail_nsprefix_) else ''
            self.StatusDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='StatusDetail', pretty_print=pretty_print)
        for InformationNotes_ in self.InformationNotes:
            namespaceprefix_ = self.InformationNotes_nsprefix_ + ':' if (UseCapturedNS_ and self.InformationNotes_nsprefix_) else ''
            InformationNotes_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformationNotes', pretty_print=pretty_print)
        for CustomerExceptionRequests_ in self.CustomerExceptionRequests:
            namespaceprefix_ = self.CustomerExceptionRequests_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerExceptionRequests_nsprefix_) else ''
            CustomerExceptionRequests_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomerExceptionRequests', pretty_print=pretty_print)
        if self.Reconciliation is not None:
            namespaceprefix_ = self.Reconciliation_nsprefix_ + ':' if (UseCapturedNS_ and self.Reconciliation_nsprefix_) else ''
            self.Reconciliation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Reconciliation', pretty_print=pretty_print)
        if self.ServiceCommitMessage is not None:
            namespaceprefix_ = self.ServiceCommitMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceCommitMessage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceCommitMessage>%s</%sServiceCommitMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ServiceCommitMessage), input_name='ServiceCommitMessage')), namespaceprefix_ , eol_))
        if self.DestinationServiceArea is not None:
            namespaceprefix_ = self.DestinationServiceArea_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationServiceArea_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDestinationServiceArea>%s</%sDestinationServiceArea>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DestinationServiceArea), input_name='DestinationServiceArea')), namespaceprefix_ , eol_))
        if self.DestinationServiceAreaDescription is not None:
            namespaceprefix_ = self.DestinationServiceAreaDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationServiceAreaDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDestinationServiceAreaDescription>%s</%sDestinationServiceAreaDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DestinationServiceAreaDescription), input_name='DestinationServiceAreaDescription')), namespaceprefix_ , eol_))
        if self.CarrierCode is not None:
            namespaceprefix_ = self.CarrierCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CarrierCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierCode>%s</%sCarrierCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CarrierCode), input_name='CarrierCode')), namespaceprefix_ , eol_))
        if self.OperatingCompany is not None:
            namespaceprefix_ = self.OperatingCompany_nsprefix_ + ':' if (UseCapturedNS_ and self.OperatingCompany_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOperatingCompany>%s</%sOperatingCompany>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OperatingCompany), input_name='OperatingCompany')), namespaceprefix_ , eol_))
        if self.OperatingCompanyOrCarrierDescription is not None:
            namespaceprefix_ = self.OperatingCompanyOrCarrierDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.OperatingCompanyOrCarrierDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOperatingCompanyOrCarrierDescription>%s</%sOperatingCompanyOrCarrierDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OperatingCompanyOrCarrierDescription), input_name='OperatingCompanyOrCarrierDescription')), namespaceprefix_ , eol_))
        if self.CartageAgentCompanyName is not None:
            namespaceprefix_ = self.CartageAgentCompanyName_nsprefix_ + ':' if (UseCapturedNS_ and self.CartageAgentCompanyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCartageAgentCompanyName>%s</%sCartageAgentCompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CartageAgentCompanyName), input_name='CartageAgentCompanyName')), namespaceprefix_ , eol_))
        if self.ProductionLocationContactAndAddress is not None:
            namespaceprefix_ = self.ProductionLocationContactAndAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductionLocationContactAndAddress_nsprefix_) else ''
            self.ProductionLocationContactAndAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ProductionLocationContactAndAddress', pretty_print=pretty_print)
        for OtherIdentifiers_ in self.OtherIdentifiers:
            namespaceprefix_ = self.OtherIdentifiers_nsprefix_ + ':' if (UseCapturedNS_ and self.OtherIdentifiers_nsprefix_) else ''
            OtherIdentifiers_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OtherIdentifiers', pretty_print=pretty_print)
        if self.FormId is not None:
            namespaceprefix_ = self.FormId_nsprefix_ + ':' if (UseCapturedNS_ and self.FormId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormId>%s</%sFormId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FormId), input_name='FormId')), namespaceprefix_ , eol_))
        if self.Service is not None:
            namespaceprefix_ = self.Service_nsprefix_ + ':' if (UseCapturedNS_ and self.Service_nsprefix_) else ''
            self.Service.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Service', pretty_print=pretty_print)
        if self.PackageWeight is not None:
            namespaceprefix_ = self.PackageWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageWeight_nsprefix_) else ''
            self.PackageWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackageWeight', pretty_print=pretty_print)
        if self.PackageDimensions is not None:
            namespaceprefix_ = self.PackageDimensions_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageDimensions_nsprefix_) else ''
            self.PackageDimensions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackageDimensions', pretty_print=pretty_print)
        if self.PackageDimensionalWeight is not None:
            namespaceprefix_ = self.PackageDimensionalWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageDimensionalWeight_nsprefix_) else ''
            self.PackageDimensionalWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackageDimensionalWeight', pretty_print=pretty_print)
        if self.ShipmentWeight is not None:
            namespaceprefix_ = self.ShipmentWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentWeight_nsprefix_) else ''
            self.ShipmentWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentWeight', pretty_print=pretty_print)
        if self.Packaging is not None:
            namespaceprefix_ = self.Packaging_nsprefix_ + ':' if (UseCapturedNS_ and self.Packaging_nsprefix_) else ''
            self.Packaging.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Packaging', pretty_print=pretty_print)
        if self.PhysicalPackagingType is not None:
            namespaceprefix_ = self.PhysicalPackagingType_nsprefix_ + ':' if (UseCapturedNS_ and self.PhysicalPackagingType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhysicalPackagingType>%s</%sPhysicalPackagingType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhysicalPackagingType), input_name='PhysicalPackagingType')), namespaceprefix_ , eol_))
        if self.PackageSequenceNumber is not None:
            namespaceprefix_ = self.PackageSequenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageSequenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackageSequenceNumber>%s</%sPackageSequenceNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.PackageSequenceNumber, input_name='PackageSequenceNumber'), namespaceprefix_ , eol_))
        if self.PackageCount is not None:
            namespaceprefix_ = self.PackageCount_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackageCount>%s</%sPackageCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.PackageCount, input_name='PackageCount'), namespaceprefix_ , eol_))
        if self.ShipmentContentPieceCount is not None:
            namespaceprefix_ = self.ShipmentContentPieceCount_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentContentPieceCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipmentContentPieceCount>%s</%sShipmentContentPieceCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.ShipmentContentPieceCount, input_name='ShipmentContentPieceCount'), namespaceprefix_ , eol_))
        if self.PackageContentPieceCount is not None:
            namespaceprefix_ = self.PackageContentPieceCount_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageContentPieceCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackageContentPieceCount>%s</%sPackageContentPieceCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.PackageContentPieceCount, input_name='PackageContentPieceCount'), namespaceprefix_ , eol_))
        if self.CreatorSoftwareId is not None:
            namespaceprefix_ = self.CreatorSoftwareId_nsprefix_ + ':' if (UseCapturedNS_ and self.CreatorSoftwareId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreatorSoftwareId>%s</%sCreatorSoftwareId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CreatorSoftwareId), input_name='CreatorSoftwareId')), namespaceprefix_ , eol_))
        for Charges_ in self.Charges:
            namespaceprefix_ = self.Charges_nsprefix_ + ':' if (UseCapturedNS_ and self.Charges_nsprefix_) else ''
            Charges_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Charges', pretty_print=pretty_print)
        if self.NickName is not None:
            namespaceprefix_ = self.NickName_nsprefix_ + ':' if (UseCapturedNS_ and self.NickName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNickName>%s</%sNickName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NickName), input_name='NickName')), namespaceprefix_ , eol_))
        if self.Notes is not None:
            namespaceprefix_ = self.Notes_nsprefix_ + ':' if (UseCapturedNS_ and self.Notes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNotes>%s</%sNotes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Notes), input_name='Notes')), namespaceprefix_ , eol_))
        for Attributes_ in self.Attributes:
            namespaceprefix_ = self.Attributes_nsprefix_ + ':' if (UseCapturedNS_ and self.Attributes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttributes>%s</%sAttributes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Attributes_), input_name='Attributes')), namespaceprefix_ , eol_))
        for ShipmentContents_ in self.ShipmentContents:
            namespaceprefix_ = self.ShipmentContents_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentContents_nsprefix_) else ''
            ShipmentContents_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentContents', pretty_print=pretty_print)
        for PackageContents_ in self.PackageContents:
            namespaceprefix_ = self.PackageContents_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageContents_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackageContents>%s</%sPackageContents>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(PackageContents_), input_name='PackageContents')), namespaceprefix_ , eol_))
        if self.ClearanceLocationCode is not None:
            namespaceprefix_ = self.ClearanceLocationCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ClearanceLocationCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClearanceLocationCode>%s</%sClearanceLocationCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClearanceLocationCode), input_name='ClearanceLocationCode')), namespaceprefix_ , eol_))
        if self.ClearanceBrokerage is not None:
            namespaceprefix_ = self.ClearanceBrokerage_nsprefix_ + ':' if (UseCapturedNS_ and self.ClearanceBrokerage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClearanceBrokerage>%s</%sClearanceBrokerage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClearanceBrokerage), input_name='ClearanceBrokerage')), namespaceprefix_ , eol_))
        for Commodities_ in self.Commodities:
            namespaceprefix_ = self.Commodities_nsprefix_ + ':' if (UseCapturedNS_ and self.Commodities_nsprefix_) else ''
            Commodities_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Commodities', pretty_print=pretty_print)
        if self.ReturnDetail is not None:
            namespaceprefix_ = self.ReturnDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ReturnDetail_nsprefix_) else ''
            self.ReturnDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReturnDetail', pretty_print=pretty_print)
        for CustomsOptionDetails_ in self.CustomsOptionDetails:
            namespaceprefix_ = self.CustomsOptionDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsOptionDetails_nsprefix_) else ''
            CustomsOptionDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomsOptionDetails', pretty_print=pretty_print)
        if self.AdvanceNotificationDetail is not None:
            namespaceprefix_ = self.AdvanceNotificationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.AdvanceNotificationDetail_nsprefix_) else ''
            self.AdvanceNotificationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AdvanceNotificationDetail', pretty_print=pretty_print)
        for SpecialHandlings_ in self.SpecialHandlings:
            namespaceprefix_ = self.SpecialHandlings_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialHandlings_nsprefix_) else ''
            SpecialHandlings_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SpecialHandlings', pretty_print=pretty_print)
        for Payments_ in self.Payments:
            namespaceprefix_ = self.Payments_nsprefix_ + ':' if (UseCapturedNS_ and self.Payments_nsprefix_) else ''
            Payments_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Payments', pretty_print=pretty_print)
        if self.Shipper is not None:
            namespaceprefix_ = self.Shipper_nsprefix_ + ':' if (UseCapturedNS_ and self.Shipper_nsprefix_) else ''
            self.Shipper.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Shipper', pretty_print=pretty_print)
        if self.PossessionStatus is not None:
            namespaceprefix_ = self.PossessionStatus_nsprefix_ + ':' if (UseCapturedNS_ and self.PossessionStatus_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPossessionStatus>%s</%sPossessionStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PossessionStatus), input_name='PossessionStatus')), namespaceprefix_ , eol_))
        if self.ShipperAddress is not None:
            namespaceprefix_ = self.ShipperAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipperAddress_nsprefix_) else ''
            self.ShipperAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipperAddress', pretty_print=pretty_print)
        if self.OriginLocationAddress is not None:
            namespaceprefix_ = self.OriginLocationAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginLocationAddress_nsprefix_) else ''
            self.OriginLocationAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OriginLocationAddress', pretty_print=pretty_print)
        if self.OriginStationId is not None:
            namespaceprefix_ = self.OriginStationId_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginStationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginStationId>%s</%sOriginStationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OriginStationId), input_name='OriginStationId')), namespaceprefix_ , eol_))
        for DatesOrTimes_ in self.DatesOrTimes:
            namespaceprefix_ = self.DatesOrTimes_nsprefix_ + ':' if (UseCapturedNS_ and self.DatesOrTimes_nsprefix_) else ''
            DatesOrTimes_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DatesOrTimes', pretty_print=pretty_print)
        if self.TotalTransitDistance is not None:
            namespaceprefix_ = self.TotalTransitDistance_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalTransitDistance_nsprefix_) else ''
            self.TotalTransitDistance.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalTransitDistance', pretty_print=pretty_print)
        if self.DistanceToDestination is not None:
            namespaceprefix_ = self.DistanceToDestination_nsprefix_ + ':' if (UseCapturedNS_ and self.DistanceToDestination_nsprefix_) else ''
            self.DistanceToDestination.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DistanceToDestination', pretty_print=pretty_print)
        for SpecialInstructions_ in self.SpecialInstructions:
            namespaceprefix_ = self.SpecialInstructions_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialInstructions_nsprefix_) else ''
            SpecialInstructions_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SpecialInstructions', pretty_print=pretty_print)
        if self.Recipient is not None:
            namespaceprefix_ = self.Recipient_nsprefix_ + ':' if (UseCapturedNS_ and self.Recipient_nsprefix_) else ''
            self.Recipient.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Recipient', pretty_print=pretty_print)
        if self.LastUpdatedDestinationAddress is not None:
            namespaceprefix_ = self.LastUpdatedDestinationAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.LastUpdatedDestinationAddress_nsprefix_) else ''
            self.LastUpdatedDestinationAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LastUpdatedDestinationAddress', pretty_print=pretty_print)
        if self.DestinationAddress is not None:
            namespaceprefix_ = self.DestinationAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationAddress_nsprefix_) else ''
            self.DestinationAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DestinationAddress', pretty_print=pretty_print)
        if self.HoldAtLocationContact is not None:
            namespaceprefix_ = self.HoldAtLocationContact_nsprefix_ + ':' if (UseCapturedNS_ and self.HoldAtLocationContact_nsprefix_) else ''
            self.HoldAtLocationContact.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HoldAtLocationContact', pretty_print=pretty_print)
        if self.HoldAtLocationAddress is not None:
            namespaceprefix_ = self.HoldAtLocationAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.HoldAtLocationAddress_nsprefix_) else ''
            self.HoldAtLocationAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HoldAtLocationAddress', pretty_print=pretty_print)
        if self.DestinationStationId is not None:
            namespaceprefix_ = self.DestinationStationId_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationStationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDestinationStationId>%s</%sDestinationStationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DestinationStationId), input_name='DestinationStationId')), namespaceprefix_ , eol_))
        if self.DestinationLocationAddress is not None:
            namespaceprefix_ = self.DestinationLocationAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationLocationAddress_nsprefix_) else ''
            self.DestinationLocationAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DestinationLocationAddress', pretty_print=pretty_print)
        if self.DestinationLocationType is not None:
            namespaceprefix_ = self.DestinationLocationType_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationLocationType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDestinationLocationType>%s</%sDestinationLocationType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DestinationLocationType), input_name='DestinationLocationType')), namespaceprefix_ , eol_))
        if self.DestinationLocationTimeZoneOffset is not None:
            namespaceprefix_ = self.DestinationLocationTimeZoneOffset_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationLocationTimeZoneOffset_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDestinationLocationTimeZoneOffset>%s</%sDestinationLocationTimeZoneOffset>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DestinationLocationTimeZoneOffset), input_name='DestinationLocationTimeZoneOffset')), namespaceprefix_ , eol_))
        if self.ActualDeliveryAddress is not None:
            namespaceprefix_ = self.ActualDeliveryAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.ActualDeliveryAddress_nsprefix_) else ''
            self.ActualDeliveryAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ActualDeliveryAddress', pretty_print=pretty_print)
        if self.OfficeOrderDeliveryMethod is not None:
            namespaceprefix_ = self.OfficeOrderDeliveryMethod_nsprefix_ + ':' if (UseCapturedNS_ and self.OfficeOrderDeliveryMethod_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOfficeOrderDeliveryMethod>%s</%sOfficeOrderDeliveryMethod>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OfficeOrderDeliveryMethod), input_name='OfficeOrderDeliveryMethod')), namespaceprefix_ , eol_))
        if self.DeliveryLocationType is not None:
            namespaceprefix_ = self.DeliveryLocationType_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryLocationType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryLocationType>%s</%sDeliveryLocationType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryLocationType), input_name='DeliveryLocationType')), namespaceprefix_ , eol_))
        if self.DeliveryLocationDescription is not None:
            namespaceprefix_ = self.DeliveryLocationDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryLocationDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryLocationDescription>%s</%sDeliveryLocationDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryLocationDescription), input_name='DeliveryLocationDescription')), namespaceprefix_ , eol_))
        if self.DeliveryAttempts is not None:
            namespaceprefix_ = self.DeliveryAttempts_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryAttempts_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryAttempts>%s</%sDeliveryAttempts>%s' % (namespaceprefix_ , self.gds_format_integer(self.DeliveryAttempts, input_name='DeliveryAttempts'), namespaceprefix_ , eol_))
        if self.DeliverySignatureName is not None:
            namespaceprefix_ = self.DeliverySignatureName_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliverySignatureName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliverySignatureName>%s</%sDeliverySignatureName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeliverySignatureName), input_name='DeliverySignatureName')), namespaceprefix_ , eol_))
        for PieceCountVerificationDetails_ in self.PieceCountVerificationDetails:
            namespaceprefix_ = self.PieceCountVerificationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.PieceCountVerificationDetails_nsprefix_) else ''
            PieceCountVerificationDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PieceCountVerificationDetails', pretty_print=pretty_print)
        if self.TotalUniqueAddressCountInConsolidation is not None:
            namespaceprefix_ = self.TotalUniqueAddressCountInConsolidation_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalUniqueAddressCountInConsolidation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalUniqueAddressCountInConsolidation>%s</%sTotalUniqueAddressCountInConsolidation>%s' % (namespaceprefix_ , self.gds_format_integer(self.TotalUniqueAddressCountInConsolidation, input_name='TotalUniqueAddressCountInConsolidation'), namespaceprefix_ , eol_))
        for AvailableImages_ in self.AvailableImages:
            namespaceprefix_ = self.AvailableImages_nsprefix_ + ':' if (UseCapturedNS_ and self.AvailableImages_nsprefix_) else ''
            AvailableImages_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AvailableImages', pretty_print=pretty_print)
        if self.Signature is not None:
            namespaceprefix_ = self.Signature_nsprefix_ + ':' if (UseCapturedNS_ and self.Signature_nsprefix_) else ''
            self.Signature.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Signature', pretty_print=pretty_print)
        for NotificationEventsAvailable_ in self.NotificationEventsAvailable:
            namespaceprefix_ = self.NotificationEventsAvailable_nsprefix_ + ':' if (UseCapturedNS_ and self.NotificationEventsAvailable_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNotificationEventsAvailable>%s</%sNotificationEventsAvailable>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(NotificationEventsAvailable_), input_name='NotificationEventsAvailable')), namespaceprefix_ , eol_))
        for SplitShipmentParts_ in self.SplitShipmentParts:
            namespaceprefix_ = self.SplitShipmentParts_nsprefix_ + ':' if (UseCapturedNS_ and self.SplitShipmentParts_nsprefix_) else ''
            SplitShipmentParts_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SplitShipmentParts', pretty_print=pretty_print)
        for DeliveryOptionEligibilityDetails_ in self.DeliveryOptionEligibilityDetails:
            namespaceprefix_ = self.DeliveryOptionEligibilityDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryOptionEligibilityDetails_nsprefix_) else ''
            DeliveryOptionEligibilityDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DeliveryOptionEligibilityDetails', pretty_print=pretty_print)
        for Events_ in self.Events:
            namespaceprefix_ = self.Events_nsprefix_ + ':' if (UseCapturedNS_ and self.Events_nsprefix_) else ''
            Events_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Events', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Notification':
            obj_ = Notification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Notification = obj_
            obj_.original_tagname_ = 'Notification'
        elif nodeName_ == 'TrackingNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TrackingNumber')
            value_ = self.gds_validate_string(value_, node, 'TrackingNumber')
            self.TrackingNumber = value_
            self.TrackingNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Barcode':
            obj_ = StringBarcode.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Barcode = obj_
            obj_.original_tagname_ = 'Barcode'
        elif nodeName_ == 'TrackingNumberUniqueIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TrackingNumberUniqueIdentifier')
            value_ = self.gds_validate_string(value_, node, 'TrackingNumberUniqueIdentifier')
            self.TrackingNumberUniqueIdentifier = value_
            self.TrackingNumberUniqueIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'StatusDetail':
            obj_ = TrackStatusDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.StatusDetail = obj_
            obj_.original_tagname_ = 'StatusDetail'
        elif nodeName_ == 'InformationNotes':
            obj_ = TrackInformationNoteDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformationNotes.append(obj_)
            obj_.original_tagname_ = 'InformationNotes'
        elif nodeName_ == 'CustomerExceptionRequests':
            obj_ = CustomerExceptionRequestDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomerExceptionRequests.append(obj_)
            obj_.original_tagname_ = 'CustomerExceptionRequests'
        elif nodeName_ == 'Reconciliation':
            obj_ = TrackReconciliation.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Reconciliation = obj_
            obj_.original_tagname_ = 'Reconciliation'
        elif nodeName_ == 'ServiceCommitMessage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ServiceCommitMessage')
            value_ = self.gds_validate_string(value_, node, 'ServiceCommitMessage')
            self.ServiceCommitMessage = value_
            self.ServiceCommitMessage_nsprefix_ = child_.prefix
        elif nodeName_ == 'DestinationServiceArea':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DestinationServiceArea')
            value_ = self.gds_validate_string(value_, node, 'DestinationServiceArea')
            self.DestinationServiceArea = value_
            self.DestinationServiceArea_nsprefix_ = child_.prefix
        elif nodeName_ == 'DestinationServiceAreaDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DestinationServiceAreaDescription')
            value_ = self.gds_validate_string(value_, node, 'DestinationServiceAreaDescription')
            self.DestinationServiceAreaDescription = value_
            self.DestinationServiceAreaDescription_nsprefix_ = child_.prefix
        elif nodeName_ == 'CarrierCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CarrierCode')
            value_ = self.gds_validate_string(value_, node, 'CarrierCode')
            self.CarrierCode = value_
            self.CarrierCode_nsprefix_ = child_.prefix
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.CarrierCode)
        elif nodeName_ == 'OperatingCompany':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OperatingCompany')
            value_ = self.gds_validate_string(value_, node, 'OperatingCompany')
            self.OperatingCompany = value_
            self.OperatingCompany_nsprefix_ = child_.prefix
            # validate type OperatingCompanyType
            self.validate_OperatingCompanyType(self.OperatingCompany)
        elif nodeName_ == 'OperatingCompanyOrCarrierDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OperatingCompanyOrCarrierDescription')
            value_ = self.gds_validate_string(value_, node, 'OperatingCompanyOrCarrierDescription')
            self.OperatingCompanyOrCarrierDescription = value_
            self.OperatingCompanyOrCarrierDescription_nsprefix_ = child_.prefix
        elif nodeName_ == 'CartageAgentCompanyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CartageAgentCompanyName')
            value_ = self.gds_validate_string(value_, node, 'CartageAgentCompanyName')
            self.CartageAgentCompanyName = value_
            self.CartageAgentCompanyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'ProductionLocationContactAndAddress':
            obj_ = ContactAndAddress.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ProductionLocationContactAndAddress = obj_
            obj_.original_tagname_ = 'ProductionLocationContactAndAddress'
        elif nodeName_ == 'OtherIdentifiers':
            obj_ = TrackOtherIdentifierDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OtherIdentifiers.append(obj_)
            obj_.original_tagname_ = 'OtherIdentifiers'
        elif nodeName_ == 'FormId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FormId')
            value_ = self.gds_validate_string(value_, node, 'FormId')
            self.FormId = value_
            self.FormId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Service':
            obj_ = TrackServiceDescriptionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Service = obj_
            obj_.original_tagname_ = 'Service'
        elif nodeName_ == 'PackageWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackageWeight = obj_
            obj_.original_tagname_ = 'PackageWeight'
        elif nodeName_ == 'PackageDimensions':
            obj_ = Dimensions.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackageDimensions = obj_
            obj_.original_tagname_ = 'PackageDimensions'
        elif nodeName_ == 'PackageDimensionalWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackageDimensionalWeight = obj_
            obj_.original_tagname_ = 'PackageDimensionalWeight'
        elif nodeName_ == 'ShipmentWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentWeight = obj_
            obj_.original_tagname_ = 'ShipmentWeight'
        elif nodeName_ == 'Packaging':
            obj_ = TrackPackagingDescriptionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Packaging = obj_
            obj_.original_tagname_ = 'Packaging'
        elif nodeName_ == 'PhysicalPackagingType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhysicalPackagingType')
            value_ = self.gds_validate_string(value_, node, 'PhysicalPackagingType')
            self.PhysicalPackagingType = value_
            self.PhysicalPackagingType_nsprefix_ = child_.prefix
            # validate type PhysicalPackagingType
            self.validate_PhysicalPackagingType(self.PhysicalPackagingType)
        elif nodeName_ == 'PackageSequenceNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PackageSequenceNumber')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PackageSequenceNumber')
            self.PackageSequenceNumber = ival_
            self.PackageSequenceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'PackageCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PackageCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PackageCount')
            self.PackageCount = ival_
            self.PackageCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShipmentContentPieceCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'ShipmentContentPieceCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'ShipmentContentPieceCount')
            self.ShipmentContentPieceCount = ival_
            self.ShipmentContentPieceCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'PackageContentPieceCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PackageContentPieceCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PackageContentPieceCount')
            self.PackageContentPieceCount = ival_
            self.PackageContentPieceCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'CreatorSoftwareId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CreatorSoftwareId')
            value_ = self.gds_validate_string(value_, node, 'CreatorSoftwareId')
            self.CreatorSoftwareId = value_
            self.CreatorSoftwareId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Charges':
            obj_ = TrackChargeDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Charges.append(obj_)
            obj_.original_tagname_ = 'Charges'
        elif nodeName_ == 'NickName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NickName')
            value_ = self.gds_validate_string(value_, node, 'NickName')
            self.NickName = value_
            self.NickName_nsprefix_ = child_.prefix
        elif nodeName_ == 'Notes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Notes')
            value_ = self.gds_validate_string(value_, node, 'Notes')
            self.Notes = value_
            self.Notes_nsprefix_ = child_.prefix
        elif nodeName_ == 'Attributes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Attributes')
            value_ = self.gds_validate_string(value_, node, 'Attributes')
            self.Attributes.append(value_)
            self.Attributes_nsprefix_ = child_.prefix
            # validate type TrackDetailAttributeType
            self.validate_TrackDetailAttributeType(self.Attributes[-1])
        elif nodeName_ == 'ShipmentContents':
            obj_ = ContentRecord.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentContents.append(obj_)
            obj_.original_tagname_ = 'ShipmentContents'
        elif nodeName_ == 'PackageContents':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackageContents')
            value_ = self.gds_validate_string(value_, node, 'PackageContents')
            self.PackageContents.append(value_)
            self.PackageContents_nsprefix_ = child_.prefix
        elif nodeName_ == 'ClearanceLocationCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClearanceLocationCode')
            value_ = self.gds_validate_string(value_, node, 'ClearanceLocationCode')
            self.ClearanceLocationCode = value_
            self.ClearanceLocationCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'ClearanceBrokerage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClearanceBrokerage')
            value_ = self.gds_validate_string(value_, node, 'ClearanceBrokerage')
            self.ClearanceBrokerage = value_
            self.ClearanceBrokerage_nsprefix_ = child_.prefix
            # validate type ClearanceBrokerageType
            self.validate_ClearanceBrokerageType(self.ClearanceBrokerage)
        elif nodeName_ == 'Commodities':
            obj_ = Commodity.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Commodities.append(obj_)
            obj_.original_tagname_ = 'Commodities'
        elif nodeName_ == 'ReturnDetail':
            obj_ = TrackReturnDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReturnDetail = obj_
            obj_.original_tagname_ = 'ReturnDetail'
        elif nodeName_ == 'CustomsOptionDetails':
            obj_ = CustomsOptionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomsOptionDetails.append(obj_)
            obj_.original_tagname_ = 'CustomsOptionDetails'
        elif nodeName_ == 'AdvanceNotificationDetail':
            obj_ = TrackAdvanceNotificationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AdvanceNotificationDetail = obj_
            obj_.original_tagname_ = 'AdvanceNotificationDetail'
        elif nodeName_ == 'SpecialHandlings':
            obj_ = TrackSpecialHandling.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SpecialHandlings.append(obj_)
            obj_.original_tagname_ = 'SpecialHandlings'
        elif nodeName_ == 'Payments':
            obj_ = TrackPayment.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Payments.append(obj_)
            obj_.original_tagname_ = 'Payments'
        elif nodeName_ == 'Shipper':
            obj_ = Contact.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Shipper = obj_
            obj_.original_tagname_ = 'Shipper'
        elif nodeName_ == 'PossessionStatus':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PossessionStatus')
            value_ = self.gds_validate_string(value_, node, 'PossessionStatus')
            self.PossessionStatus = value_
            self.PossessionStatus_nsprefix_ = child_.prefix
            # validate type TrackPossessionStatusType
            self.validate_TrackPossessionStatusType(self.PossessionStatus)
        elif nodeName_ == 'ShipperAddress':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipperAddress = obj_
            obj_.original_tagname_ = 'ShipperAddress'
        elif nodeName_ == 'OriginLocationAddress':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OriginLocationAddress = obj_
            obj_.original_tagname_ = 'OriginLocationAddress'
        elif nodeName_ == 'OriginStationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OriginStationId')
            value_ = self.gds_validate_string(value_, node, 'OriginStationId')
            self.OriginStationId = value_
            self.OriginStationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'DatesOrTimes':
            obj_ = TrackingDateOrTimestamp.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DatesOrTimes.append(obj_)
            obj_.original_tagname_ = 'DatesOrTimes'
        elif nodeName_ == 'TotalTransitDistance':
            obj_ = Distance.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalTransitDistance = obj_
            obj_.original_tagname_ = 'TotalTransitDistance'
        elif nodeName_ == 'DistanceToDestination':
            obj_ = Distance.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DistanceToDestination = obj_
            obj_.original_tagname_ = 'DistanceToDestination'
        elif nodeName_ == 'SpecialInstructions':
            obj_ = TrackSpecialInstruction.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SpecialInstructions.append(obj_)
            obj_.original_tagname_ = 'SpecialInstructions'
        elif nodeName_ == 'Recipient':
            obj_ = Contact.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Recipient = obj_
            obj_.original_tagname_ = 'Recipient'
        elif nodeName_ == 'LastUpdatedDestinationAddress':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LastUpdatedDestinationAddress = obj_
            obj_.original_tagname_ = 'LastUpdatedDestinationAddress'
        elif nodeName_ == 'DestinationAddress':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DestinationAddress = obj_
            obj_.original_tagname_ = 'DestinationAddress'
        elif nodeName_ == 'HoldAtLocationContact':
            obj_ = Contact.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HoldAtLocationContact = obj_
            obj_.original_tagname_ = 'HoldAtLocationContact'
        elif nodeName_ == 'HoldAtLocationAddress':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HoldAtLocationAddress = obj_
            obj_.original_tagname_ = 'HoldAtLocationAddress'
        elif nodeName_ == 'DestinationStationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DestinationStationId')
            value_ = self.gds_validate_string(value_, node, 'DestinationStationId')
            self.DestinationStationId = value_
            self.DestinationStationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'DestinationLocationAddress':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DestinationLocationAddress = obj_
            obj_.original_tagname_ = 'DestinationLocationAddress'
        elif nodeName_ == 'DestinationLocationType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DestinationLocationType')
            value_ = self.gds_validate_string(value_, node, 'DestinationLocationType')
            self.DestinationLocationType = value_
            self.DestinationLocationType_nsprefix_ = child_.prefix
            # validate type FedExLocationType
            self.validate_FedExLocationType(self.DestinationLocationType)
        elif nodeName_ == 'DestinationLocationTimeZoneOffset':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DestinationLocationTimeZoneOffset')
            value_ = self.gds_validate_string(value_, node, 'DestinationLocationTimeZoneOffset')
            self.DestinationLocationTimeZoneOffset = value_
            self.DestinationLocationTimeZoneOffset_nsprefix_ = child_.prefix
        elif nodeName_ == 'ActualDeliveryAddress':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ActualDeliveryAddress = obj_
            obj_.original_tagname_ = 'ActualDeliveryAddress'
        elif nodeName_ == 'OfficeOrderDeliveryMethod':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OfficeOrderDeliveryMethod')
            value_ = self.gds_validate_string(value_, node, 'OfficeOrderDeliveryMethod')
            self.OfficeOrderDeliveryMethod = value_
            self.OfficeOrderDeliveryMethod_nsprefix_ = child_.prefix
            # validate type OfficeOrderDeliveryMethodType
            self.validate_OfficeOrderDeliveryMethodType(self.OfficeOrderDeliveryMethod)
        elif nodeName_ == 'DeliveryLocationType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DeliveryLocationType')
            value_ = self.gds_validate_string(value_, node, 'DeliveryLocationType')
            self.DeliveryLocationType = value_
            self.DeliveryLocationType_nsprefix_ = child_.prefix
            # validate type TrackDeliveryLocationType
            self.validate_TrackDeliveryLocationType(self.DeliveryLocationType)
        elif nodeName_ == 'DeliveryLocationDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DeliveryLocationDescription')
            value_ = self.gds_validate_string(value_, node, 'DeliveryLocationDescription')
            self.DeliveryLocationDescription = value_
            self.DeliveryLocationDescription_nsprefix_ = child_.prefix
        elif nodeName_ == 'DeliveryAttempts' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'DeliveryAttempts')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'DeliveryAttempts')
            self.DeliveryAttempts = ival_
            self.DeliveryAttempts_nsprefix_ = child_.prefix
        elif nodeName_ == 'DeliverySignatureName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DeliverySignatureName')
            value_ = self.gds_validate_string(value_, node, 'DeliverySignatureName')
            self.DeliverySignatureName = value_
            self.DeliverySignatureName_nsprefix_ = child_.prefix
        elif nodeName_ == 'PieceCountVerificationDetails':
            obj_ = PieceCountVerificationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PieceCountVerificationDetails.append(obj_)
            obj_.original_tagname_ = 'PieceCountVerificationDetails'
        elif nodeName_ == 'TotalUniqueAddressCountInConsolidation' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'TotalUniqueAddressCountInConsolidation')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'TotalUniqueAddressCountInConsolidation')
            self.TotalUniqueAddressCountInConsolidation = ival_
            self.TotalUniqueAddressCountInConsolidation_nsprefix_ = child_.prefix
        elif nodeName_ == 'AvailableImages':
            obj_ = AvailableImagesDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AvailableImages.append(obj_)
            obj_.original_tagname_ = 'AvailableImages'
        elif nodeName_ == 'Signature':
            obj_ = SignatureImageDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Signature = obj_
            obj_.original_tagname_ = 'Signature'
        elif nodeName_ == 'NotificationEventsAvailable':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NotificationEventsAvailable')
            value_ = self.gds_validate_string(value_, node, 'NotificationEventsAvailable')
            self.NotificationEventsAvailable.append(value_)
            self.NotificationEventsAvailable_nsprefix_ = child_.prefix
            # validate type NotificationEventType
            self.validate_NotificationEventType(self.NotificationEventsAvailable[-1])
        elif nodeName_ == 'SplitShipmentParts':
            obj_ = TrackSplitShipmentPart.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SplitShipmentParts.append(obj_)
            obj_.original_tagname_ = 'SplitShipmentParts'
        elif nodeName_ == 'DeliveryOptionEligibilityDetails':
            obj_ = DeliveryOptionEligibilityDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DeliveryOptionEligibilityDetails.append(obj_)
            obj_.original_tagname_ = 'DeliveryOptionEligibilityDetails'
        elif nodeName_ == 'Events':
            obj_ = TrackEvent.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Events.append(obj_)
            obj_.original_tagname_ = 'Events'
# end class TrackDetail


class TrackEvent(GeneratedsSuper):
    """FedEx scanning information about a package."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Timestamp=None, EventType=None, EventDescription=None, StatusExceptionCode=None, StatusExceptionDescription=None, BarcodeEntryType=None, Address=None, StationId=None, ArrivalLocation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(Timestamp, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Timestamp, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = Timestamp
        self.Timestamp = initvalue_
        self.Timestamp_nsprefix_ = None
        self.EventType = EventType
        self.EventType_nsprefix_ = None
        self.EventDescription = EventDescription
        self.EventDescription_nsprefix_ = None
        self.StatusExceptionCode = StatusExceptionCode
        self.StatusExceptionCode_nsprefix_ = None
        self.StatusExceptionDescription = StatusExceptionDescription
        self.StatusExceptionDescription_nsprefix_ = None
        self.BarcodeEntryType = BarcodeEntryType
        self.validate_BarcodeEntryType(self.BarcodeEntryType)
        self.BarcodeEntryType_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
        self.StationId = StationId
        self.StationId_nsprefix_ = None
        self.ArrivalLocation = ArrivalLocation
        self.validate_ArrivalLocationType(self.ArrivalLocation)
        self.ArrivalLocation_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackEvent)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackEvent.subclass:
            return TrackEvent.subclass(*args_, **kwargs_)
        else:
            return TrackEvent(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Timestamp(self):
        return self.Timestamp
    def set_Timestamp(self, Timestamp):
        self.Timestamp = Timestamp
    def get_EventType(self):
        return self.EventType
    def set_EventType(self, EventType):
        self.EventType = EventType
    def get_EventDescription(self):
        return self.EventDescription
    def set_EventDescription(self, EventDescription):
        self.EventDescription = EventDescription
    def get_StatusExceptionCode(self):
        return self.StatusExceptionCode
    def set_StatusExceptionCode(self, StatusExceptionCode):
        self.StatusExceptionCode = StatusExceptionCode
    def get_StatusExceptionDescription(self):
        return self.StatusExceptionDescription
    def set_StatusExceptionDescription(self, StatusExceptionDescription):
        self.StatusExceptionDescription = StatusExceptionDescription
    def get_BarcodeEntryType(self):
        return self.BarcodeEntryType
    def set_BarcodeEntryType(self, BarcodeEntryType):
        self.BarcodeEntryType = BarcodeEntryType
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def get_StationId(self):
        return self.StationId
    def set_StationId(self, StationId):
        self.StationId = StationId
    def get_ArrivalLocation(self):
        return self.ArrivalLocation
    def set_ArrivalLocation(self, ArrivalLocation):
        self.ArrivalLocation = ArrivalLocation
    def validate_BarcodeEntryType(self, value):
        result = True
        # Validate type BarcodeEntryType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['MANUAL_ENTRY', 'SCAN']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on BarcodeEntryType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ArrivalLocationType(self, value):
        result = True
        # Validate type ArrivalLocationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AIRPORT', 'CUSTOMER', 'CUSTOMS_BROKER', 'DELIVERY_LOCATION', 'DESTINATION_AIRPORT', 'DESTINATION_FEDEX_FACILITY', 'DROP_BOX', 'ENROUTE', 'FEDEX_FACILITY', 'FEDEX_OFFICE_LOCATION', 'INTERLINE_CARRIER', 'NON_FEDEX_FACILITY', 'ORIGIN_AIRPORT', 'ORIGIN_FEDEX_FACILITY', 'PICKUP_LOCATION', 'PLANE', 'PORT_OF_ENTRY', 'SHIP_AND_GET_LOCATION', 'SORT_FACILITY', 'TURNPOINT', 'VEHICLE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ArrivalLocationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Timestamp is not None or
            self.EventType is not None or
            self.EventDescription is not None or
            self.StatusExceptionCode is not None or
            self.StatusExceptionDescription is not None or
            self.BarcodeEntryType is not None or
            self.Address is not None or
            self.StationId is not None or
            self.ArrivalLocation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackEvent', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackEvent')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackEvent':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackEvent')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackEvent', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackEvent'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackEvent', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Timestamp is not None:
            namespaceprefix_ = self.Timestamp_nsprefix_ + ':' if (UseCapturedNS_ and self.Timestamp_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimestamp>%s</%sTimestamp>%s' % (namespaceprefix_ , self.gds_format_datetime(self.Timestamp, input_name='Timestamp'), namespaceprefix_ , eol_))
        if self.EventType is not None:
            namespaceprefix_ = self.EventType_nsprefix_ + ':' if (UseCapturedNS_ and self.EventType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEventType>%s</%sEventType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EventType), input_name='EventType')), namespaceprefix_ , eol_))
        if self.EventDescription is not None:
            namespaceprefix_ = self.EventDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.EventDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEventDescription>%s</%sEventDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EventDescription), input_name='EventDescription')), namespaceprefix_ , eol_))
        if self.StatusExceptionCode is not None:
            namespaceprefix_ = self.StatusExceptionCode_nsprefix_ + ':' if (UseCapturedNS_ and self.StatusExceptionCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatusExceptionCode>%s</%sStatusExceptionCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StatusExceptionCode), input_name='StatusExceptionCode')), namespaceprefix_ , eol_))
        if self.StatusExceptionDescription is not None:
            namespaceprefix_ = self.StatusExceptionDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.StatusExceptionDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatusExceptionDescription>%s</%sStatusExceptionDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StatusExceptionDescription), input_name='StatusExceptionDescription')), namespaceprefix_ , eol_))
        if self.BarcodeEntryType is not None:
            namespaceprefix_ = self.BarcodeEntryType_nsprefix_ + ':' if (UseCapturedNS_ and self.BarcodeEntryType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBarcodeEntryType>%s</%sBarcodeEntryType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BarcodeEntryType), input_name='BarcodeEntryType')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
        if self.StationId is not None:
            namespaceprefix_ = self.StationId_nsprefix_ + ':' if (UseCapturedNS_ and self.StationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStationId>%s</%sStationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StationId), input_name='StationId')), namespaceprefix_ , eol_))
        if self.ArrivalLocation is not None:
            namespaceprefix_ = self.ArrivalLocation_nsprefix_ + ':' if (UseCapturedNS_ and self.ArrivalLocation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sArrivalLocation>%s</%sArrivalLocation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ArrivalLocation), input_name='ArrivalLocation')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Timestamp':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.Timestamp = dval_
            self.Timestamp_nsprefix_ = child_.prefix
        elif nodeName_ == 'EventType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EventType')
            value_ = self.gds_validate_string(value_, node, 'EventType')
            self.EventType = value_
            self.EventType_nsprefix_ = child_.prefix
        elif nodeName_ == 'EventDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EventDescription')
            value_ = self.gds_validate_string(value_, node, 'EventDescription')
            self.EventDescription = value_
            self.EventDescription_nsprefix_ = child_.prefix
        elif nodeName_ == 'StatusExceptionCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StatusExceptionCode')
            value_ = self.gds_validate_string(value_, node, 'StatusExceptionCode')
            self.StatusExceptionCode = value_
            self.StatusExceptionCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'StatusExceptionDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StatusExceptionDescription')
            value_ = self.gds_validate_string(value_, node, 'StatusExceptionDescription')
            self.StatusExceptionDescription = value_
            self.StatusExceptionDescription_nsprefix_ = child_.prefix
        elif nodeName_ == 'BarcodeEntryType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BarcodeEntryType')
            value_ = self.gds_validate_string(value_, node, 'BarcodeEntryType')
            self.BarcodeEntryType = value_
            self.BarcodeEntryType_nsprefix_ = child_.prefix
            # validate type BarcodeEntryType
            self.validate_BarcodeEntryType(self.BarcodeEntryType)
        elif nodeName_ == 'Address':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'StationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StationId')
            value_ = self.gds_validate_string(value_, node, 'StationId')
            self.StationId = value_
            self.StationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'ArrivalLocation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ArrivalLocation')
            value_ = self.gds_validate_string(value_, node, 'ArrivalLocation')
            self.ArrivalLocation = value_
            self.ArrivalLocation_nsprefix_ = child_.prefix
            # validate type ArrivalLocationType
            self.validate_ArrivalLocationType(self.ArrivalLocation)
# end class TrackEvent


class TrackInformationNoteDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackInformationNoteDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackInformationNoteDetail.subclass:
            return TrackInformationNoteDetail.subclass(*args_, **kwargs_)
        else:
            return TrackInformationNoteDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackInformationNoteDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackInformationNoteDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackInformationNoteDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackInformationNoteDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackInformationNoteDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackInformationNoteDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackInformationNoteDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class TrackInformationNoteDetail


class TrackNotificationPackage(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TrackingNumber=None, TrackingNumberUniqueIdentifiers=None, CarrierCode=None, ShipDate=None, Destination=None, RecipientDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TrackingNumber = TrackingNumber
        self.TrackingNumber_nsprefix_ = None
        self.TrackingNumberUniqueIdentifiers = TrackingNumberUniqueIdentifiers
        self.TrackingNumberUniqueIdentifiers_nsprefix_ = None
        self.CarrierCode = CarrierCode
        self.validate_CarrierCodeType(self.CarrierCode)
        self.CarrierCode_nsprefix_ = None
        if isinstance(ShipDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShipDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ShipDate
        self.ShipDate = initvalue_
        self.ShipDate_nsprefix_ = None
        self.Destination = Destination
        self.Destination_nsprefix_ = None
        if RecipientDetails is None:
            self.RecipientDetails = []
        else:
            self.RecipientDetails = RecipientDetails
        self.RecipientDetails_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackNotificationPackage)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackNotificationPackage.subclass:
            return TrackNotificationPackage.subclass(*args_, **kwargs_)
        else:
            return TrackNotificationPackage(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TrackingNumber(self):
        return self.TrackingNumber
    def set_TrackingNumber(self, TrackingNumber):
        self.TrackingNumber = TrackingNumber
    def get_TrackingNumberUniqueIdentifiers(self):
        return self.TrackingNumberUniqueIdentifiers
    def set_TrackingNumberUniqueIdentifiers(self, TrackingNumberUniqueIdentifiers):
        self.TrackingNumberUniqueIdentifiers = TrackingNumberUniqueIdentifiers
    def get_CarrierCode(self):
        return self.CarrierCode
    def set_CarrierCode(self, CarrierCode):
        self.CarrierCode = CarrierCode
    def get_ShipDate(self):
        return self.ShipDate
    def set_ShipDate(self, ShipDate):
        self.ShipDate = ShipDate
    def get_Destination(self):
        return self.Destination
    def set_Destination(self, Destination):
        self.Destination = Destination
    def get_RecipientDetails(self):
        return self.RecipientDetails
    def set_RecipientDetails(self, RecipientDetails):
        self.RecipientDetails = RecipientDetails
    def add_RecipientDetails(self, value):
        self.RecipientDetails.append(value)
    def insert_RecipientDetails_at(self, index, value):
        self.RecipientDetails.insert(index, value)
    def replace_RecipientDetails_at(self, index, value):
        self.RecipientDetails[index] = value
    def validate_CarrierCodeType(self, value):
        result = True
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FXCC', 'FXFR', 'FXSP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CarrierCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.TrackingNumber is not None or
            self.TrackingNumberUniqueIdentifiers is not None or
            self.CarrierCode is not None or
            self.ShipDate is not None or
            self.Destination is not None or
            self.RecipientDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackNotificationPackage', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackNotificationPackage')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackNotificationPackage':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackNotificationPackage')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackNotificationPackage', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackNotificationPackage'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackNotificationPackage', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TrackingNumber is not None:
            namespaceprefix_ = self.TrackingNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTrackingNumber>%s</%sTrackingNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumber), input_name='TrackingNumber')), namespaceprefix_ , eol_))
        if self.TrackingNumberUniqueIdentifiers is not None:
            namespaceprefix_ = self.TrackingNumberUniqueIdentifiers_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingNumberUniqueIdentifiers_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTrackingNumberUniqueIdentifiers>%s</%sTrackingNumberUniqueIdentifiers>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumberUniqueIdentifiers), input_name='TrackingNumberUniqueIdentifiers')), namespaceprefix_ , eol_))
        if self.CarrierCode is not None:
            namespaceprefix_ = self.CarrierCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CarrierCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierCode>%s</%sCarrierCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CarrierCode), input_name='CarrierCode')), namespaceprefix_ , eol_))
        if self.ShipDate is not None:
            namespaceprefix_ = self.ShipDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipDate>%s</%sShipDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ShipDate, input_name='ShipDate'), namespaceprefix_ , eol_))
        if self.Destination is not None:
            namespaceprefix_ = self.Destination_nsprefix_ + ':' if (UseCapturedNS_ and self.Destination_nsprefix_) else ''
            self.Destination.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Destination', pretty_print=pretty_print)
        for RecipientDetails_ in self.RecipientDetails:
            namespaceprefix_ = self.RecipientDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RecipientDetails_nsprefix_) else ''
            RecipientDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecipientDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TrackingNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TrackingNumber')
            value_ = self.gds_validate_string(value_, node, 'TrackingNumber')
            self.TrackingNumber = value_
            self.TrackingNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'TrackingNumberUniqueIdentifiers':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TrackingNumberUniqueIdentifiers')
            value_ = self.gds_validate_string(value_, node, 'TrackingNumberUniqueIdentifiers')
            self.TrackingNumberUniqueIdentifiers = value_
            self.TrackingNumberUniqueIdentifiers_nsprefix_ = child_.prefix
        elif nodeName_ == 'CarrierCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CarrierCode')
            value_ = self.gds_validate_string(value_, node, 'CarrierCode')
            self.CarrierCode = value_
            self.CarrierCode_nsprefix_ = child_.prefix
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.CarrierCode)
        elif nodeName_ == 'ShipDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ShipDate = dval_
            self.ShipDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'Destination':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Destination = obj_
            obj_.original_tagname_ = 'Destination'
        elif nodeName_ == 'RecipientDetails':
            obj_ = TrackNotificationRecipientDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecipientDetails.append(obj_)
            obj_.original_tagname_ = 'RecipientDetails'
# end class TrackNotificationPackage


class TrackNotificationRecipientDetail(GeneratedsSuper):
    """Options available for a tracking notification recipient."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, NotificationEventsAvailable=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if NotificationEventsAvailable is None:
            self.NotificationEventsAvailable = []
        else:
            self.NotificationEventsAvailable = NotificationEventsAvailable
        self.NotificationEventsAvailable_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackNotificationRecipientDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackNotificationRecipientDetail.subclass:
            return TrackNotificationRecipientDetail.subclass(*args_, **kwargs_)
        else:
            return TrackNotificationRecipientDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_NotificationEventsAvailable(self):
        return self.NotificationEventsAvailable
    def set_NotificationEventsAvailable(self, NotificationEventsAvailable):
        self.NotificationEventsAvailable = NotificationEventsAvailable
    def add_NotificationEventsAvailable(self, value):
        self.NotificationEventsAvailable.append(value)
    def insert_NotificationEventsAvailable_at(self, index, value):
        self.NotificationEventsAvailable.insert(index, value)
    def replace_NotificationEventsAvailable_at(self, index, value):
        self.NotificationEventsAvailable[index] = value
    def validate_NotificationEventType(self, value):
        result = True
        # Validate type NotificationEventType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ON_DELIVERY', 'ON_ESTIMATED_DELIVERY', 'ON_EXCEPTION', 'ON_PICKUP_DRIVER_ARRIVED', 'ON_PICKUP_DRIVER_ASSIGNED', 'ON_PICKUP_DRIVER_DEPARTED', 'ON_PICKUP_DRIVER_EN_ROUTE', 'ON_SHIPMENT', 'ON_TENDER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationEventType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.NotificationEventsAvailable
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackNotificationRecipientDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackNotificationRecipientDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackNotificationRecipientDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackNotificationRecipientDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackNotificationRecipientDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackNotificationRecipientDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackNotificationRecipientDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for NotificationEventsAvailable_ in self.NotificationEventsAvailable:
            namespaceprefix_ = self.NotificationEventsAvailable_nsprefix_ + ':' if (UseCapturedNS_ and self.NotificationEventsAvailable_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNotificationEventsAvailable>%s</%sNotificationEventsAvailable>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(NotificationEventsAvailable_), input_name='NotificationEventsAvailable')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'NotificationEventsAvailable':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NotificationEventsAvailable')
            value_ = self.gds_validate_string(value_, node, 'NotificationEventsAvailable')
            self.NotificationEventsAvailable.append(value_)
            self.NotificationEventsAvailable_nsprefix_ = child_.prefix
            # validate type NotificationEventType
            self.validate_NotificationEventType(self.NotificationEventsAvailable[-1])
# end class TrackNotificationRecipientDetail


class TrackOtherIdentifierDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PackageIdentifier=None, TrackingNumberUniqueIdentifier=None, CarrierCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PackageIdentifier = PackageIdentifier
        self.PackageIdentifier_nsprefix_ = None
        self.TrackingNumberUniqueIdentifier = TrackingNumberUniqueIdentifier
        self.TrackingNumberUniqueIdentifier_nsprefix_ = None
        self.CarrierCode = CarrierCode
        self.validate_CarrierCodeType(self.CarrierCode)
        self.CarrierCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackOtherIdentifierDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackOtherIdentifierDetail.subclass:
            return TrackOtherIdentifierDetail.subclass(*args_, **kwargs_)
        else:
            return TrackOtherIdentifierDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PackageIdentifier(self):
        return self.PackageIdentifier
    def set_PackageIdentifier(self, PackageIdentifier):
        self.PackageIdentifier = PackageIdentifier
    def get_TrackingNumberUniqueIdentifier(self):
        return self.TrackingNumberUniqueIdentifier
    def set_TrackingNumberUniqueIdentifier(self, TrackingNumberUniqueIdentifier):
        self.TrackingNumberUniqueIdentifier = TrackingNumberUniqueIdentifier
    def get_CarrierCode(self):
        return self.CarrierCode
    def set_CarrierCode(self, CarrierCode):
        self.CarrierCode = CarrierCode
    def validate_CarrierCodeType(self, value):
        result = True
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FXCC', 'FXFR', 'FXSP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CarrierCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.PackageIdentifier is not None or
            self.TrackingNumberUniqueIdentifier is not None or
            self.CarrierCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackOtherIdentifierDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackOtherIdentifierDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackOtherIdentifierDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackOtherIdentifierDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackOtherIdentifierDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackOtherIdentifierDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackOtherIdentifierDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackageIdentifier is not None:
            namespaceprefix_ = self.PackageIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageIdentifier_nsprefix_) else ''
            self.PackageIdentifier.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackageIdentifier', pretty_print=pretty_print)
        if self.TrackingNumberUniqueIdentifier is not None:
            namespaceprefix_ = self.TrackingNumberUniqueIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingNumberUniqueIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTrackingNumberUniqueIdentifier>%s</%sTrackingNumberUniqueIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumberUniqueIdentifier), input_name='TrackingNumberUniqueIdentifier')), namespaceprefix_ , eol_))
        if self.CarrierCode is not None:
            namespaceprefix_ = self.CarrierCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CarrierCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierCode>%s</%sCarrierCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CarrierCode), input_name='CarrierCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PackageIdentifier':
            obj_ = TrackPackageIdentifier.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackageIdentifier = obj_
            obj_.original_tagname_ = 'PackageIdentifier'
        elif nodeName_ == 'TrackingNumberUniqueIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TrackingNumberUniqueIdentifier')
            value_ = self.gds_validate_string(value_, node, 'TrackingNumberUniqueIdentifier')
            self.TrackingNumberUniqueIdentifier = value_
            self.TrackingNumberUniqueIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'CarrierCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CarrierCode')
            value_ = self.gds_validate_string(value_, node, 'CarrierCode')
            self.CarrierCode = value_
            self.CarrierCode_nsprefix_ = child_.prefix
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.CarrierCode)
# end class TrackOtherIdentifierDetail


class TrackPackageIdentifier(GeneratedsSuper):
    """The type and value of the package identifier that is to be used to
    retrieve the tracking information for a package."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_TrackIdentifierType(self.Type)
        self.Type_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackPackageIdentifier)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackPackageIdentifier.subclass:
            return TrackPackageIdentifier.subclass(*args_, **kwargs_)
        else:
            return TrackPackageIdentifier(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def validate_TrackIdentifierType(self, value):
        result = True
        # Validate type TrackIdentifierType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BILL_OF_LADING', 'COD_RETURN_TRACKING_NUMBER', 'CUSTOMER_AUTHORIZATION_NUMBER', 'CUSTOMER_REFERENCE', 'DEPARTMENT', 'DOCUMENT_AIRWAY_BILL', 'FREE_FORM_REFERENCE', 'GROUND_INTERNATIONAL', 'GROUND_SHIPMENT_ID', 'GROUP_MPS', 'INVOICE', 'JOB_GLOBAL_TRACKING_NUMBER', 'ORDER_GLOBAL_TRACKING_NUMBER', 'ORDER_TO_PAY_NUMBER', 'OUTBOUND_LINK_TO_RETURN', 'PARTNER_CARRIER_NUMBER', 'PART_NUMBER', 'PURCHASE_ORDER', 'REROUTE_TRACKING_NUMBER', 'RETURNED_TO_SHIPPER_TRACKING_NUMBER', 'RETURN_MATERIALS_AUTHORIZATION', 'SHIPPER_REFERENCE', 'STANDARD_MPS', 'TRACKING_NUMBER_OR_DOORTAG', 'TRANSPORTATION_CONTROL_NUMBER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TrackIdentifierType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackPackageIdentifier', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackPackageIdentifier')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackPackageIdentifier':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackPackageIdentifier')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackPackageIdentifier', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackPackageIdentifier'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackPackageIdentifier', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type TrackIdentifierType
            self.validate_TrackIdentifierType(self.Type)
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
# end class TrackPackageIdentifier


class TrackPackagingDescriptionDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.Type_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackPackagingDescriptionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackPackagingDescriptionDetail.subclass:
            return TrackPackagingDescriptionDetail.subclass(*args_, **kwargs_)
        else:
            return TrackPackagingDescriptionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackPackagingDescriptionDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackPackagingDescriptionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackPackagingDescriptionDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackPackagingDescriptionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackPackagingDescriptionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackPackagingDescriptionDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackPackagingDescriptionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class TrackPackagingDescriptionDetail


class TrackPayment(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Classification=None, Type=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Classification = Classification
        self.validate_TrackChargesPaymentClassificationType(self.Classification)
        self.Classification_nsprefix_ = None
        self.Type = Type
        self.validate_TrackPaymentType(self.Type)
        self.Type_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackPayment)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackPayment.subclass:
            return TrackPayment.subclass(*args_, **kwargs_)
        else:
            return TrackPayment(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Classification(self):
        return self.Classification
    def set_Classification(self, Classification):
        self.Classification = Classification
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def validate_TrackChargesPaymentClassificationType(self, value):
        result = True
        # Validate type TrackChargesPaymentClassificationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DUTIES_AND_TAXES', 'TRANSPORTATION']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TrackChargesPaymentClassificationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_TrackPaymentType(self, value):
        result = True
        # Validate type TrackPaymentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CASH_OR_CHECK_AT_DESTINATION', 'CASH_OR_CHECK_AT_ORIGIN', 'CREDIT_CARD_AT_DESTINATION', 'CREDIT_CARD_AT_ORIGIN', 'OTHER', 'RECIPIENT_ACCOUNT', 'SHIPPER_ACCOUNT', 'THIRD_PARTY_ACCOUNT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TrackPaymentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Classification is not None or
            self.Type is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackPayment', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackPayment')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackPayment':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackPayment')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackPayment', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackPayment'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackPayment', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Classification is not None:
            namespaceprefix_ = self.Classification_nsprefix_ + ':' if (UseCapturedNS_ and self.Classification_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassification>%s</%sClassification>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Classification), input_name='Classification')), namespaceprefix_ , eol_))
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Classification':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Classification')
            value_ = self.gds_validate_string(value_, node, 'Classification')
            self.Classification = value_
            self.Classification_nsprefix_ = child_.prefix
            # validate type TrackChargesPaymentClassificationType
            self.validate_TrackChargesPaymentClassificationType(self.Classification)
        elif nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type TrackPaymentType
            self.validate_TrackPaymentType(self.Type)
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class TrackPayment


class TrackReconciliation(GeneratedsSuper):
    """Used to report the status of a piece of a multiple piece shipment which
    is no longer traveling with the rest of the packages in the shipment or
    has not been accounted for."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Status=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Status = Status
        self.Status_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackReconciliation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackReconciliation.subclass:
            return TrackReconciliation.subclass(*args_, **kwargs_)
        else:
            return TrackReconciliation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Status(self):
        return self.Status
    def set_Status(self, Status):
        self.Status = Status
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Status is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackReconciliation', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackReconciliation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackReconciliation':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackReconciliation')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackReconciliation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackReconciliation'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackReconciliation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Status is not None:
            namespaceprefix_ = self.Status_nsprefix_ + ':' if (UseCapturedNS_ and self.Status_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatus>%s</%sStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Status), input_name='Status')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Status':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Status')
            value_ = self.gds_validate_string(value_, node, 'Status')
            self.Status = value_
            self.Status_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class TrackReconciliation


class TrackReply(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, CompletedTrackDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HighestSeverity = HighestSeverity
        self.validate_NotificationSeverityType(self.HighestSeverity)
        self.HighestSeverity_nsprefix_ = None
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.Notifications_nsprefix_ = None
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = None
        self.Version = Version
        self.Version_nsprefix_ = None
        if CompletedTrackDetails is None:
            self.CompletedTrackDetails = []
        else:
            self.CompletedTrackDetails = CompletedTrackDetails
        self.CompletedTrackDetails_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackReply)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackReply.subclass:
            return TrackReply.subclass(*args_, **kwargs_)
        else:
            return TrackReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HighestSeverity(self):
        return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity):
        self.HighestSeverity = HighestSeverity
    def get_Notifications(self):
        return self.Notifications
    def set_Notifications(self, Notifications):
        self.Notifications = Notifications
    def add_Notifications(self, value):
        self.Notifications.append(value)
    def insert_Notifications_at(self, index, value):
        self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value):
        self.Notifications[index] = value
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_CompletedTrackDetails(self):
        return self.CompletedTrackDetails
    def set_CompletedTrackDetails(self, CompletedTrackDetails):
        self.CompletedTrackDetails = CompletedTrackDetails
    def add_CompletedTrackDetails(self, value):
        self.CompletedTrackDetails.append(value)
    def insert_CompletedTrackDetails_at(self, index, value):
        self.CompletedTrackDetails.insert(index, value)
    def replace_CompletedTrackDetails_at(self, index, value):
        self.CompletedTrackDetails[index] = value
    def validate_NotificationSeverityType(self, value):
        result = True
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.CompletedTrackDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackReply', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackReply')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackReply':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackReply')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackReply', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackReply'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackReply', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HighestSeverity is not None:
            namespaceprefix_ = self.HighestSeverity_nsprefix_ + ':' if (UseCapturedNS_ and self.HighestSeverity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HighestSeverity), input_name='HighestSeverity')), namespaceprefix_ , eol_))
        for Notifications_ in self.Notifications:
            namespaceprefix_ = self.Notifications_nsprefix_ + ':' if (UseCapturedNS_ and self.Notifications_nsprefix_) else ''
            Notifications_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Notifications', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        for CompletedTrackDetails_ in self.CompletedTrackDetails:
            namespaceprefix_ = self.CompletedTrackDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.CompletedTrackDetails_nsprefix_) else ''
            CompletedTrackDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CompletedTrackDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HighestSeverity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HighestSeverity')
            value_ = self.gds_validate_string(value_, node, 'HighestSeverity')
            self.HighestSeverity = value_
            self.HighestSeverity_nsprefix_ = child_.prefix
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.HighestSeverity)
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'CompletedTrackDetails':
            obj_ = CompletedTrackDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CompletedTrackDetails.append(obj_)
            obj_.original_tagname_ = 'CompletedTrackDetails'
# end class TrackReply


class TrackRequest(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, SelectionDetails=None, TransactionTimeOutValueInMilliseconds=None, ProcessingOptions=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.WebAuthenticationDetail_nsprefix_ = None
        self.ClientDetail = ClientDetail
        self.ClientDetail_nsprefix_ = None
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = None
        self.Version = Version
        self.Version_nsprefix_ = None
        if SelectionDetails is None:
            self.SelectionDetails = []
        else:
            self.SelectionDetails = SelectionDetails
        self.SelectionDetails_nsprefix_ = None
        self.TransactionTimeOutValueInMilliseconds = TransactionTimeOutValueInMilliseconds
        self.TransactionTimeOutValueInMilliseconds_nsprefix_ = None
        if ProcessingOptions is None:
            self.ProcessingOptions = []
        else:
            self.ProcessingOptions = ProcessingOptions
        self.ProcessingOptions_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackRequest.subclass:
            return TrackRequest.subclass(*args_, **kwargs_)
        else:
            return TrackRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_WebAuthenticationDetail(self):
        return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail):
        self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self):
        return self.ClientDetail
    def set_ClientDetail(self, ClientDetail):
        self.ClientDetail = ClientDetail
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_SelectionDetails(self):
        return self.SelectionDetails
    def set_SelectionDetails(self, SelectionDetails):
        self.SelectionDetails = SelectionDetails
    def add_SelectionDetails(self, value):
        self.SelectionDetails.append(value)
    def insert_SelectionDetails_at(self, index, value):
        self.SelectionDetails.insert(index, value)
    def replace_SelectionDetails_at(self, index, value):
        self.SelectionDetails[index] = value
    def get_TransactionTimeOutValueInMilliseconds(self):
        return self.TransactionTimeOutValueInMilliseconds
    def set_TransactionTimeOutValueInMilliseconds(self, TransactionTimeOutValueInMilliseconds):
        self.TransactionTimeOutValueInMilliseconds = TransactionTimeOutValueInMilliseconds
    def get_ProcessingOptions(self):
        return self.ProcessingOptions
    def set_ProcessingOptions(self, ProcessingOptions):
        self.ProcessingOptions = ProcessingOptions
    def add_ProcessingOptions(self, value):
        self.ProcessingOptions.append(value)
    def insert_ProcessingOptions_at(self, index, value):
        self.ProcessingOptions.insert(index, value)
    def replace_ProcessingOptions_at(self, index, value):
        self.ProcessingOptions[index] = value
    def validate_TrackRequestProcessingOptionType(self, value):
        result = True
        # Validate type TrackRequestProcessingOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['INCLUDE_DETAILED_SCANS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TrackRequestProcessingOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.SelectionDetails or
            self.TransactionTimeOutValueInMilliseconds is not None or
            self.ProcessingOptions
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackRequest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackRequest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackRequest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WebAuthenticationDetail is not None:
            namespaceprefix_ = self.WebAuthenticationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.WebAuthenticationDetail_nsprefix_) else ''
            self.WebAuthenticationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WebAuthenticationDetail', pretty_print=pretty_print)
        if self.ClientDetail is not None:
            namespaceprefix_ = self.ClientDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientDetail_nsprefix_) else ''
            self.ClientDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClientDetail', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        for SelectionDetails_ in self.SelectionDetails:
            namespaceprefix_ = self.SelectionDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.SelectionDetails_nsprefix_) else ''
            SelectionDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SelectionDetails', pretty_print=pretty_print)
        if self.TransactionTimeOutValueInMilliseconds is not None:
            namespaceprefix_ = self.TransactionTimeOutValueInMilliseconds_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionTimeOutValueInMilliseconds_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransactionTimeOutValueInMilliseconds>%s</%sTransactionTimeOutValueInMilliseconds>%s' % (namespaceprefix_ , self.gds_format_integer(self.TransactionTimeOutValueInMilliseconds, input_name='TransactionTimeOutValueInMilliseconds'), namespaceprefix_ , eol_))
        for ProcessingOptions_ in self.ProcessingOptions:
            namespaceprefix_ = self.ProcessingOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.ProcessingOptions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProcessingOptions>%s</%sProcessingOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(ProcessingOptions_), input_name='ProcessingOptions')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WebAuthenticationDetail = obj_
            obj_.original_tagname_ = 'WebAuthenticationDetail'
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClientDetail = obj_
            obj_.original_tagname_ = 'ClientDetail'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'SelectionDetails':
            obj_ = TrackSelectionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SelectionDetails.append(obj_)
            obj_.original_tagname_ = 'SelectionDetails'
        elif nodeName_ == 'TransactionTimeOutValueInMilliseconds' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'TransactionTimeOutValueInMilliseconds')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'TransactionTimeOutValueInMilliseconds')
            self.TransactionTimeOutValueInMilliseconds = ival_
            self.TransactionTimeOutValueInMilliseconds_nsprefix_ = child_.prefix
        elif nodeName_ == 'ProcessingOptions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProcessingOptions')
            value_ = self.gds_validate_string(value_, node, 'ProcessingOptions')
            self.ProcessingOptions.append(value_)
            self.ProcessingOptions_nsprefix_ = child_.prefix
            # validate type TrackRequestProcessingOptionType
            self.validate_TrackRequestProcessingOptionType(self.ProcessingOptions[-1])
# end class TrackRequest


class TrackReturnDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MovementStatus=None, LabelType=None, Description=None, AuthorizationName=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.MovementStatus = MovementStatus
        self.validate_TrackReturnMovementStatusType(self.MovementStatus)
        self.MovementStatus_nsprefix_ = None
        self.LabelType = LabelType
        self.validate_TrackReturnLabelType(self.LabelType)
        self.LabelType_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.AuthorizationName = AuthorizationName
        self.AuthorizationName_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackReturnDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackReturnDetail.subclass:
            return TrackReturnDetail.subclass(*args_, **kwargs_)
        else:
            return TrackReturnDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MovementStatus(self):
        return self.MovementStatus
    def set_MovementStatus(self, MovementStatus):
        self.MovementStatus = MovementStatus
    def get_LabelType(self):
        return self.LabelType
    def set_LabelType(self, LabelType):
        self.LabelType = LabelType
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_AuthorizationName(self):
        return self.AuthorizationName
    def set_AuthorizationName(self, AuthorizationName):
        self.AuthorizationName = AuthorizationName
    def validate_TrackReturnMovementStatusType(self, value):
        result = True
        # Validate type TrackReturnMovementStatusType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['MOVEMENT_OCCURRED', 'NO_MOVEMENT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TrackReturnMovementStatusType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_TrackReturnLabelType(self, value):
        result = True
        # Validate type TrackReturnLabelType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['EMAIL', 'PRINT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TrackReturnLabelType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.MovementStatus is not None or
            self.LabelType is not None or
            self.Description is not None or
            self.AuthorizationName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackReturnDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackReturnDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackReturnDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackReturnDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackReturnDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackReturnDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackReturnDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MovementStatus is not None:
            namespaceprefix_ = self.MovementStatus_nsprefix_ + ':' if (UseCapturedNS_ and self.MovementStatus_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMovementStatus>%s</%sMovementStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MovementStatus), input_name='MovementStatus')), namespaceprefix_ , eol_))
        if self.LabelType is not None:
            namespaceprefix_ = self.LabelType_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelType>%s</%sLabelType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LabelType), input_name='LabelType')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.AuthorizationName is not None:
            namespaceprefix_ = self.AuthorizationName_nsprefix_ + ':' if (UseCapturedNS_ and self.AuthorizationName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthorizationName>%s</%sAuthorizationName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AuthorizationName), input_name='AuthorizationName')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MovementStatus':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MovementStatus')
            value_ = self.gds_validate_string(value_, node, 'MovementStatus')
            self.MovementStatus = value_
            self.MovementStatus_nsprefix_ = child_.prefix
            # validate type TrackReturnMovementStatusType
            self.validate_TrackReturnMovementStatusType(self.MovementStatus)
        elif nodeName_ == 'LabelType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelType')
            value_ = self.gds_validate_string(value_, node, 'LabelType')
            self.LabelType = value_
            self.LabelType_nsprefix_ = child_.prefix
            # validate type TrackReturnLabelType
            self.validate_TrackReturnLabelType(self.LabelType)
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'AuthorizationName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AuthorizationName')
            value_ = self.gds_validate_string(value_, node, 'AuthorizationName')
            self.AuthorizationName = value_
            self.AuthorizationName_nsprefix_ = child_.prefix
# end class TrackReturnDetail


class TrackSelectionDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CarrierCode=None, OperatingCompany=None, PackageIdentifier=None, TrackingNumberUniqueIdentifier=None, ShipDateRangeBegin=None, ShipDateRangeEnd=None, ShipmentAccountNumber=None, SecureSpodAccount=None, Destination=None, PagingDetail=None, CustomerSpecifiedTimeOutValueInMilliseconds=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CarrierCode = CarrierCode
        self.validate_CarrierCodeType(self.CarrierCode)
        self.CarrierCode_nsprefix_ = None
        self.OperatingCompany = OperatingCompany
        self.validate_OperatingCompanyType(self.OperatingCompany)
        self.OperatingCompany_nsprefix_ = None
        self.PackageIdentifier = PackageIdentifier
        self.PackageIdentifier_nsprefix_ = None
        self.TrackingNumberUniqueIdentifier = TrackingNumberUniqueIdentifier
        self.TrackingNumberUniqueIdentifier_nsprefix_ = None
        if isinstance(ShipDateRangeBegin, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShipDateRangeBegin, '%Y-%m-%d').date()
        else:
            initvalue_ = ShipDateRangeBegin
        self.ShipDateRangeBegin = initvalue_
        self.ShipDateRangeBegin_nsprefix_ = None
        if isinstance(ShipDateRangeEnd, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShipDateRangeEnd, '%Y-%m-%d').date()
        else:
            initvalue_ = ShipDateRangeEnd
        self.ShipDateRangeEnd = initvalue_
        self.ShipDateRangeEnd_nsprefix_ = None
        self.ShipmentAccountNumber = ShipmentAccountNumber
        self.ShipmentAccountNumber_nsprefix_ = None
        self.SecureSpodAccount = SecureSpodAccount
        self.SecureSpodAccount_nsprefix_ = None
        self.Destination = Destination
        self.Destination_nsprefix_ = None
        self.PagingDetail = PagingDetail
        self.PagingDetail_nsprefix_ = None
        self.CustomerSpecifiedTimeOutValueInMilliseconds = CustomerSpecifiedTimeOutValueInMilliseconds
        self.CustomerSpecifiedTimeOutValueInMilliseconds_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackSelectionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackSelectionDetail.subclass:
            return TrackSelectionDetail.subclass(*args_, **kwargs_)
        else:
            return TrackSelectionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CarrierCode(self):
        return self.CarrierCode
    def set_CarrierCode(self, CarrierCode):
        self.CarrierCode = CarrierCode
    def get_OperatingCompany(self):
        return self.OperatingCompany
    def set_OperatingCompany(self, OperatingCompany):
        self.OperatingCompany = OperatingCompany
    def get_PackageIdentifier(self):
        return self.PackageIdentifier
    def set_PackageIdentifier(self, PackageIdentifier):
        self.PackageIdentifier = PackageIdentifier
    def get_TrackingNumberUniqueIdentifier(self):
        return self.TrackingNumberUniqueIdentifier
    def set_TrackingNumberUniqueIdentifier(self, TrackingNumberUniqueIdentifier):
        self.TrackingNumberUniqueIdentifier = TrackingNumberUniqueIdentifier
    def get_ShipDateRangeBegin(self):
        return self.ShipDateRangeBegin
    def set_ShipDateRangeBegin(self, ShipDateRangeBegin):
        self.ShipDateRangeBegin = ShipDateRangeBegin
    def get_ShipDateRangeEnd(self):
        return self.ShipDateRangeEnd
    def set_ShipDateRangeEnd(self, ShipDateRangeEnd):
        self.ShipDateRangeEnd = ShipDateRangeEnd
    def get_ShipmentAccountNumber(self):
        return self.ShipmentAccountNumber
    def set_ShipmentAccountNumber(self, ShipmentAccountNumber):
        self.ShipmentAccountNumber = ShipmentAccountNumber
    def get_SecureSpodAccount(self):
        return self.SecureSpodAccount
    def set_SecureSpodAccount(self, SecureSpodAccount):
        self.SecureSpodAccount = SecureSpodAccount
    def get_Destination(self):
        return self.Destination
    def set_Destination(self, Destination):
        self.Destination = Destination
    def get_PagingDetail(self):
        return self.PagingDetail
    def set_PagingDetail(self, PagingDetail):
        self.PagingDetail = PagingDetail
    def get_CustomerSpecifiedTimeOutValueInMilliseconds(self):
        return self.CustomerSpecifiedTimeOutValueInMilliseconds
    def set_CustomerSpecifiedTimeOutValueInMilliseconds(self, CustomerSpecifiedTimeOutValueInMilliseconds):
        self.CustomerSpecifiedTimeOutValueInMilliseconds = CustomerSpecifiedTimeOutValueInMilliseconds
    def validate_CarrierCodeType(self, value):
        result = True
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FXCC', 'FXFR', 'FXSP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CarrierCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_OperatingCompanyType(self, value):
        result = True
        # Validate type OperatingCompanyType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_CARGO', 'FEDEX_CORPORATE_SERVICES', 'FEDEX_CORPORATION', 'FEDEX_CUSTOMER_INFORMATION_SYSTEMS', 'FEDEX_CUSTOM_CRITICAL', 'FEDEX_EXPRESS', 'FEDEX_FREIGHT', 'FEDEX_GROUND', 'FEDEX_KINKOS', 'FEDEX_OFFICE', 'FEDEX_SERVICES', 'FEDEX_TRADE_NETWORKS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on OperatingCompanyType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.CarrierCode is not None or
            self.OperatingCompany is not None or
            self.PackageIdentifier is not None or
            self.TrackingNumberUniqueIdentifier is not None or
            self.ShipDateRangeBegin is not None or
            self.ShipDateRangeEnd is not None or
            self.ShipmentAccountNumber is not None or
            self.SecureSpodAccount is not None or
            self.Destination is not None or
            self.PagingDetail is not None or
            self.CustomerSpecifiedTimeOutValueInMilliseconds is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackSelectionDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackSelectionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackSelectionDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackSelectionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackSelectionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackSelectionDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackSelectionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CarrierCode is not None:
            namespaceprefix_ = self.CarrierCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CarrierCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierCode>%s</%sCarrierCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CarrierCode), input_name='CarrierCode')), namespaceprefix_ , eol_))
        if self.OperatingCompany is not None:
            namespaceprefix_ = self.OperatingCompany_nsprefix_ + ':' if (UseCapturedNS_ and self.OperatingCompany_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOperatingCompany>%s</%sOperatingCompany>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OperatingCompany), input_name='OperatingCompany')), namespaceprefix_ , eol_))
        if self.PackageIdentifier is not None:
            namespaceprefix_ = self.PackageIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageIdentifier_nsprefix_) else ''
            self.PackageIdentifier.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackageIdentifier', pretty_print=pretty_print)
        if self.TrackingNumberUniqueIdentifier is not None:
            namespaceprefix_ = self.TrackingNumberUniqueIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingNumberUniqueIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTrackingNumberUniqueIdentifier>%s</%sTrackingNumberUniqueIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumberUniqueIdentifier), input_name='TrackingNumberUniqueIdentifier')), namespaceprefix_ , eol_))
        if self.ShipDateRangeBegin is not None:
            namespaceprefix_ = self.ShipDateRangeBegin_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipDateRangeBegin_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipDateRangeBegin>%s</%sShipDateRangeBegin>%s' % (namespaceprefix_ , self.gds_format_date(self.ShipDateRangeBegin, input_name='ShipDateRangeBegin'), namespaceprefix_ , eol_))
        if self.ShipDateRangeEnd is not None:
            namespaceprefix_ = self.ShipDateRangeEnd_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipDateRangeEnd_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipDateRangeEnd>%s</%sShipDateRangeEnd>%s' % (namespaceprefix_ , self.gds_format_date(self.ShipDateRangeEnd, input_name='ShipDateRangeEnd'), namespaceprefix_ , eol_))
        if self.ShipmentAccountNumber is not None:
            namespaceprefix_ = self.ShipmentAccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentAccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipmentAccountNumber>%s</%sShipmentAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShipmentAccountNumber), input_name='ShipmentAccountNumber')), namespaceprefix_ , eol_))
        if self.SecureSpodAccount is not None:
            namespaceprefix_ = self.SecureSpodAccount_nsprefix_ + ':' if (UseCapturedNS_ and self.SecureSpodAccount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSecureSpodAccount>%s</%sSecureSpodAccount>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SecureSpodAccount), input_name='SecureSpodAccount')), namespaceprefix_ , eol_))
        if self.Destination is not None:
            namespaceprefix_ = self.Destination_nsprefix_ + ':' if (UseCapturedNS_ and self.Destination_nsprefix_) else ''
            self.Destination.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Destination', pretty_print=pretty_print)
        if self.PagingDetail is not None:
            namespaceprefix_ = self.PagingDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.PagingDetail_nsprefix_) else ''
            self.PagingDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PagingDetail', pretty_print=pretty_print)
        if self.CustomerSpecifiedTimeOutValueInMilliseconds is not None:
            namespaceprefix_ = self.CustomerSpecifiedTimeOutValueInMilliseconds_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerSpecifiedTimeOutValueInMilliseconds_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomerSpecifiedTimeOutValueInMilliseconds>%s</%sCustomerSpecifiedTimeOutValueInMilliseconds>%s' % (namespaceprefix_ , self.gds_format_integer(self.CustomerSpecifiedTimeOutValueInMilliseconds, input_name='CustomerSpecifiedTimeOutValueInMilliseconds'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CarrierCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CarrierCode')
            value_ = self.gds_validate_string(value_, node, 'CarrierCode')
            self.CarrierCode = value_
            self.CarrierCode_nsprefix_ = child_.prefix
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.CarrierCode)
        elif nodeName_ == 'OperatingCompany':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OperatingCompany')
            value_ = self.gds_validate_string(value_, node, 'OperatingCompany')
            self.OperatingCompany = value_
            self.OperatingCompany_nsprefix_ = child_.prefix
            # validate type OperatingCompanyType
            self.validate_OperatingCompanyType(self.OperatingCompany)
        elif nodeName_ == 'PackageIdentifier':
            obj_ = TrackPackageIdentifier.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackageIdentifier = obj_
            obj_.original_tagname_ = 'PackageIdentifier'
        elif nodeName_ == 'TrackingNumberUniqueIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TrackingNumberUniqueIdentifier')
            value_ = self.gds_validate_string(value_, node, 'TrackingNumberUniqueIdentifier')
            self.TrackingNumberUniqueIdentifier = value_
            self.TrackingNumberUniqueIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShipDateRangeBegin':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ShipDateRangeBegin = dval_
            self.ShipDateRangeBegin_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShipDateRangeEnd':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ShipDateRangeEnd = dval_
            self.ShipDateRangeEnd_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShipmentAccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShipmentAccountNumber')
            value_ = self.gds_validate_string(value_, node, 'ShipmentAccountNumber')
            self.ShipmentAccountNumber = value_
            self.ShipmentAccountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'SecureSpodAccount':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SecureSpodAccount')
            value_ = self.gds_validate_string(value_, node, 'SecureSpodAccount')
            self.SecureSpodAccount = value_
            self.SecureSpodAccount_nsprefix_ = child_.prefix
        elif nodeName_ == 'Destination':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Destination = obj_
            obj_.original_tagname_ = 'Destination'
        elif nodeName_ == 'PagingDetail':
            obj_ = PagingDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PagingDetail = obj_
            obj_.original_tagname_ = 'PagingDetail'
        elif nodeName_ == 'CustomerSpecifiedTimeOutValueInMilliseconds' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'CustomerSpecifiedTimeOutValueInMilliseconds')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'CustomerSpecifiedTimeOutValueInMilliseconds')
            self.CustomerSpecifiedTimeOutValueInMilliseconds = ival_
            self.CustomerSpecifiedTimeOutValueInMilliseconds_nsprefix_ = child_.prefix
# end class TrackSelectionDetail


class TrackServiceDescriptionDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Description=None, ShortDescription=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.Type_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.ShortDescription = ShortDescription
        self.ShortDescription_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackServiceDescriptionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackServiceDescriptionDetail.subclass:
            return TrackServiceDescriptionDetail.subclass(*args_, **kwargs_)
        else:
            return TrackServiceDescriptionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_ShortDescription(self):
        return self.ShortDescription
    def set_ShortDescription(self, ShortDescription):
        self.ShortDescription = ShortDescription
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Description is not None or
            self.ShortDescription is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackServiceDescriptionDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackServiceDescriptionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackServiceDescriptionDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackServiceDescriptionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackServiceDescriptionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackServiceDescriptionDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackServiceDescriptionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.ShortDescription is not None:
            namespaceprefix_ = self.ShortDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.ShortDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortDescription>%s</%sShortDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShortDescription), input_name='ShortDescription')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShortDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShortDescription')
            value_ = self.gds_validate_string(value_, node, 'ShortDescription')
            self.ShortDescription = value_
            self.ShortDescription_nsprefix_ = child_.prefix
# end class TrackServiceDescriptionDetail


class TrackSpecialHandling(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Description=None, PaymentType=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.Type_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.PaymentType = PaymentType
        self.validate_TrackPaymentType(self.PaymentType)
        self.PaymentType_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackSpecialHandling)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackSpecialHandling.subclass:
            return TrackSpecialHandling.subclass(*args_, **kwargs_)
        else:
            return TrackSpecialHandling(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_PaymentType(self):
        return self.PaymentType
    def set_PaymentType(self, PaymentType):
        self.PaymentType = PaymentType
    def validate_TrackPaymentType(self, value):
        result = True
        # Validate type TrackPaymentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CASH_OR_CHECK_AT_DESTINATION', 'CASH_OR_CHECK_AT_ORIGIN', 'CREDIT_CARD_AT_DESTINATION', 'CREDIT_CARD_AT_ORIGIN', 'OTHER', 'RECIPIENT_ACCOUNT', 'SHIPPER_ACCOUNT', 'THIRD_PARTY_ACCOUNT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TrackPaymentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Description is not None or
            self.PaymentType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackSpecialHandling', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackSpecialHandling')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackSpecialHandling':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackSpecialHandling')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackSpecialHandling', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackSpecialHandling'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackSpecialHandling', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.PaymentType is not None:
            namespaceprefix_ = self.PaymentType_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentType>%s</%sPaymentType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PaymentType), input_name='PaymentType')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'PaymentType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PaymentType')
            value_ = self.gds_validate_string(value_, node, 'PaymentType')
            self.PaymentType = value_
            self.PaymentType_nsprefix_ = child_.prefix
            # validate type TrackPaymentType
            self.validate_TrackPaymentType(self.PaymentType)
# end class TrackSpecialHandling


class TrackSpecialInstruction(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Description=None, DeliveryOption=None, StatusDetail=None, OriginalEstimatedDeliveryTimestamp=None, OriginalRequestTime=None, RequestedAppointmentTime=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.DeliveryOption = DeliveryOption
        self.validate_TrackDeliveryOptionType(self.DeliveryOption)
        self.DeliveryOption_nsprefix_ = None
        self.StatusDetail = StatusDetail
        self.StatusDetail_nsprefix_ = None
        if isinstance(OriginalEstimatedDeliveryTimestamp, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(OriginalEstimatedDeliveryTimestamp, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = OriginalEstimatedDeliveryTimestamp
        self.OriginalEstimatedDeliveryTimestamp = initvalue_
        self.OriginalEstimatedDeliveryTimestamp_nsprefix_ = None
        if isinstance(OriginalRequestTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(OriginalRequestTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = OriginalRequestTime
        self.OriginalRequestTime = initvalue_
        self.OriginalRequestTime_nsprefix_ = None
        self.RequestedAppointmentTime = RequestedAppointmentTime
        self.RequestedAppointmentTime_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackSpecialInstruction)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackSpecialInstruction.subclass:
            return TrackSpecialInstruction.subclass(*args_, **kwargs_)
        else:
            return TrackSpecialInstruction(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_DeliveryOption(self):
        return self.DeliveryOption
    def set_DeliveryOption(self, DeliveryOption):
        self.DeliveryOption = DeliveryOption
    def get_StatusDetail(self):
        return self.StatusDetail
    def set_StatusDetail(self, StatusDetail):
        self.StatusDetail = StatusDetail
    def get_OriginalEstimatedDeliveryTimestamp(self):
        return self.OriginalEstimatedDeliveryTimestamp
    def set_OriginalEstimatedDeliveryTimestamp(self, OriginalEstimatedDeliveryTimestamp):
        self.OriginalEstimatedDeliveryTimestamp = OriginalEstimatedDeliveryTimestamp
    def get_OriginalRequestTime(self):
        return self.OriginalRequestTime
    def set_OriginalRequestTime(self, OriginalRequestTime):
        self.OriginalRequestTime = OriginalRequestTime
    def get_RequestedAppointmentTime(self):
        return self.RequestedAppointmentTime
    def set_RequestedAppointmentTime(self, RequestedAppointmentTime):
        self.RequestedAppointmentTime = RequestedAppointmentTime
    def validate_TrackDeliveryOptionType(self, value):
        result = True
        # Validate type TrackDeliveryOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['APPOINTMENT', 'DATE_CERTAIN', 'ELECTRONIC_SIGNATURE_RELEASE', 'EVENING', 'REDIRECT_TO_HOLD_AT_LOCATION', 'REROUTE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TrackDeliveryOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Description is not None or
            self.DeliveryOption is not None or
            self.StatusDetail is not None or
            self.OriginalEstimatedDeliveryTimestamp is not None or
            self.OriginalRequestTime is not None or
            self.RequestedAppointmentTime is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackSpecialInstruction', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackSpecialInstruction')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackSpecialInstruction':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackSpecialInstruction')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackSpecialInstruction', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackSpecialInstruction'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackSpecialInstruction', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.DeliveryOption is not None:
            namespaceprefix_ = self.DeliveryOption_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryOption_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryOption>%s</%sDeliveryOption>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryOption), input_name='DeliveryOption')), namespaceprefix_ , eol_))
        if self.StatusDetail is not None:
            namespaceprefix_ = self.StatusDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.StatusDetail_nsprefix_) else ''
            self.StatusDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='StatusDetail', pretty_print=pretty_print)
        if self.OriginalEstimatedDeliveryTimestamp is not None:
            namespaceprefix_ = self.OriginalEstimatedDeliveryTimestamp_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginalEstimatedDeliveryTimestamp_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginalEstimatedDeliveryTimestamp>%s</%sOriginalEstimatedDeliveryTimestamp>%s' % (namespaceprefix_ , self.gds_format_datetime(self.OriginalEstimatedDeliveryTimestamp, input_name='OriginalEstimatedDeliveryTimestamp'), namespaceprefix_ , eol_))
        if self.OriginalRequestTime is not None:
            namespaceprefix_ = self.OriginalRequestTime_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginalRequestTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginalRequestTime>%s</%sOriginalRequestTime>%s' % (namespaceprefix_ , self.gds_format_datetime(self.OriginalRequestTime, input_name='OriginalRequestTime'), namespaceprefix_ , eol_))
        if self.RequestedAppointmentTime is not None:
            namespaceprefix_ = self.RequestedAppointmentTime_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestedAppointmentTime_nsprefix_) else ''
            self.RequestedAppointmentTime.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RequestedAppointmentTime', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'DeliveryOption':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DeliveryOption')
            value_ = self.gds_validate_string(value_, node, 'DeliveryOption')
            self.DeliveryOption = value_
            self.DeliveryOption_nsprefix_ = child_.prefix
            # validate type TrackDeliveryOptionType
            self.validate_TrackDeliveryOptionType(self.DeliveryOption)
        elif nodeName_ == 'StatusDetail':
            obj_ = SpecialInstructionStatusDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.StatusDetail = obj_
            obj_.original_tagname_ = 'StatusDetail'
        elif nodeName_ == 'OriginalEstimatedDeliveryTimestamp':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.OriginalEstimatedDeliveryTimestamp = dval_
            self.OriginalEstimatedDeliveryTimestamp_nsprefix_ = child_.prefix
        elif nodeName_ == 'OriginalRequestTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.OriginalRequestTime = dval_
            self.OriginalRequestTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'RequestedAppointmentTime':
            obj_ = AppointmentDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RequestedAppointmentTime = obj_
            obj_.original_tagname_ = 'RequestedAppointmentTime'
# end class TrackSpecialInstruction


class TrackSplitShipmentPart(GeneratedsSuper):
    """Used when a cargo shipment is split across vehicles. This is used to
    give the status of each part of the shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PieceCount=None, Timestamp=None, StatusCode=None, StatusDescription=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PieceCount = PieceCount
        self.PieceCount_nsprefix_ = None
        if isinstance(Timestamp, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Timestamp, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = Timestamp
        self.Timestamp = initvalue_
        self.Timestamp_nsprefix_ = None
        self.StatusCode = StatusCode
        self.StatusCode_nsprefix_ = None
        self.StatusDescription = StatusDescription
        self.StatusDescription_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackSplitShipmentPart)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackSplitShipmentPart.subclass:
            return TrackSplitShipmentPart.subclass(*args_, **kwargs_)
        else:
            return TrackSplitShipmentPart(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PieceCount(self):
        return self.PieceCount
    def set_PieceCount(self, PieceCount):
        self.PieceCount = PieceCount
    def get_Timestamp(self):
        return self.Timestamp
    def set_Timestamp(self, Timestamp):
        self.Timestamp = Timestamp
    def get_StatusCode(self):
        return self.StatusCode
    def set_StatusCode(self, StatusCode):
        self.StatusCode = StatusCode
    def get_StatusDescription(self):
        return self.StatusDescription
    def set_StatusDescription(self, StatusDescription):
        self.StatusDescription = StatusDescription
    def hasContent_(self):
        if (
            self.PieceCount is not None or
            self.Timestamp is not None or
            self.StatusCode is not None or
            self.StatusDescription is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackSplitShipmentPart', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackSplitShipmentPart')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackSplitShipmentPart':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackSplitShipmentPart')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackSplitShipmentPart', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackSplitShipmentPart'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackSplitShipmentPart', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PieceCount is not None:
            namespaceprefix_ = self.PieceCount_nsprefix_ + ':' if (UseCapturedNS_ and self.PieceCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPieceCount>%s</%sPieceCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.PieceCount, input_name='PieceCount'), namespaceprefix_ , eol_))
        if self.Timestamp is not None:
            namespaceprefix_ = self.Timestamp_nsprefix_ + ':' if (UseCapturedNS_ and self.Timestamp_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimestamp>%s</%sTimestamp>%s' % (namespaceprefix_ , self.gds_format_datetime(self.Timestamp, input_name='Timestamp'), namespaceprefix_ , eol_))
        if self.StatusCode is not None:
            namespaceprefix_ = self.StatusCode_nsprefix_ + ':' if (UseCapturedNS_ and self.StatusCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatusCode>%s</%sStatusCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StatusCode), input_name='StatusCode')), namespaceprefix_ , eol_))
        if self.StatusDescription is not None:
            namespaceprefix_ = self.StatusDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.StatusDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatusDescription>%s</%sStatusDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StatusDescription), input_name='StatusDescription')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PieceCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PieceCount')
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PieceCount')
            self.PieceCount = ival_
            self.PieceCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'Timestamp':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.Timestamp = dval_
            self.Timestamp_nsprefix_ = child_.prefix
        elif nodeName_ == 'StatusCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StatusCode')
            value_ = self.gds_validate_string(value_, node, 'StatusCode')
            self.StatusCode = value_
            self.StatusCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'StatusDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StatusDescription')
            value_ = self.gds_validate_string(value_, node, 'StatusDescription')
            self.StatusDescription = value_
            self.StatusDescription_nsprefix_ = child_.prefix
# end class TrackSplitShipmentPart


class TrackStatusAncillaryDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Reason=None, ReasonDescription=None, Action=None, ActionDescription=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Reason = Reason
        self.Reason_nsprefix_ = None
        self.ReasonDescription = ReasonDescription
        self.ReasonDescription_nsprefix_ = None
        self.Action = Action
        self.Action_nsprefix_ = None
        self.ActionDescription = ActionDescription
        self.ActionDescription_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackStatusAncillaryDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackStatusAncillaryDetail.subclass:
            return TrackStatusAncillaryDetail.subclass(*args_, **kwargs_)
        else:
            return TrackStatusAncillaryDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Reason(self):
        return self.Reason
    def set_Reason(self, Reason):
        self.Reason = Reason
    def get_ReasonDescription(self):
        return self.ReasonDescription
    def set_ReasonDescription(self, ReasonDescription):
        self.ReasonDescription = ReasonDescription
    def get_Action(self):
        return self.Action
    def set_Action(self, Action):
        self.Action = Action
    def get_ActionDescription(self):
        return self.ActionDescription
    def set_ActionDescription(self, ActionDescription):
        self.ActionDescription = ActionDescription
    def hasContent_(self):
        if (
            self.Reason is not None or
            self.ReasonDescription is not None or
            self.Action is not None or
            self.ActionDescription is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackStatusAncillaryDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackStatusAncillaryDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackStatusAncillaryDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackStatusAncillaryDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackStatusAncillaryDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackStatusAncillaryDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackStatusAncillaryDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Reason is not None:
            namespaceprefix_ = self.Reason_nsprefix_ + ':' if (UseCapturedNS_ and self.Reason_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReason>%s</%sReason>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Reason), input_name='Reason')), namespaceprefix_ , eol_))
        if self.ReasonDescription is not None:
            namespaceprefix_ = self.ReasonDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.ReasonDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReasonDescription>%s</%sReasonDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReasonDescription), input_name='ReasonDescription')), namespaceprefix_ , eol_))
        if self.Action is not None:
            namespaceprefix_ = self.Action_nsprefix_ + ':' if (UseCapturedNS_ and self.Action_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAction>%s</%sAction>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Action), input_name='Action')), namespaceprefix_ , eol_))
        if self.ActionDescription is not None:
            namespaceprefix_ = self.ActionDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.ActionDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActionDescription>%s</%sActionDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ActionDescription), input_name='ActionDescription')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Reason':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Reason')
            value_ = self.gds_validate_string(value_, node, 'Reason')
            self.Reason = value_
            self.Reason_nsprefix_ = child_.prefix
        elif nodeName_ == 'ReasonDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ReasonDescription')
            value_ = self.gds_validate_string(value_, node, 'ReasonDescription')
            self.ReasonDescription = value_
            self.ReasonDescription_nsprefix_ = child_.prefix
        elif nodeName_ == 'Action':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Action')
            value_ = self.gds_validate_string(value_, node, 'Action')
            self.Action = value_
            self.Action_nsprefix_ = child_.prefix
        elif nodeName_ == 'ActionDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ActionDescription')
            value_ = self.gds_validate_string(value_, node, 'ActionDescription')
            self.ActionDescription = value_
            self.ActionDescription_nsprefix_ = child_.prefix
# end class TrackStatusAncillaryDetail


class TrackStatusDetail(GeneratedsSuper):
    """Specifies the details about the status of the track information for the
    shipments being tracked."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CreationTime=None, Code=None, Description=None, Location=None, AncillaryDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(CreationTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(CreationTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = CreationTime
        self.CreationTime = initvalue_
        self.CreationTime_nsprefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.Location = Location
        self.Location_nsprefix_ = None
        if AncillaryDetails is None:
            self.AncillaryDetails = []
        else:
            self.AncillaryDetails = AncillaryDetails
        self.AncillaryDetails_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackStatusDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackStatusDetail.subclass:
            return TrackStatusDetail.subclass(*args_, **kwargs_)
        else:
            return TrackStatusDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CreationTime(self):
        return self.CreationTime
    def set_CreationTime(self, CreationTime):
        self.CreationTime = CreationTime
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_Location(self):
        return self.Location
    def set_Location(self, Location):
        self.Location = Location
    def get_AncillaryDetails(self):
        return self.AncillaryDetails
    def set_AncillaryDetails(self, AncillaryDetails):
        self.AncillaryDetails = AncillaryDetails
    def add_AncillaryDetails(self, value):
        self.AncillaryDetails.append(value)
    def insert_AncillaryDetails_at(self, index, value):
        self.AncillaryDetails.insert(index, value)
    def replace_AncillaryDetails_at(self, index, value):
        self.AncillaryDetails[index] = value
    def hasContent_(self):
        if (
            self.CreationTime is not None or
            self.Code is not None or
            self.Description is not None or
            self.Location is not None or
            self.AncillaryDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackStatusDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackStatusDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackStatusDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackStatusDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackStatusDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackStatusDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackStatusDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CreationTime is not None:
            namespaceprefix_ = self.CreationTime_nsprefix_ + ':' if (UseCapturedNS_ and self.CreationTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreationTime>%s</%sCreationTime>%s' % (namespaceprefix_ , self.gds_format_datetime(self.CreationTime, input_name='CreationTime'), namespaceprefix_ , eol_))
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.Location is not None:
            namespaceprefix_ = self.Location_nsprefix_ + ':' if (UseCapturedNS_ and self.Location_nsprefix_) else ''
            self.Location.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Location', pretty_print=pretty_print)
        for AncillaryDetails_ in self.AncillaryDetails:
            namespaceprefix_ = self.AncillaryDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.AncillaryDetails_nsprefix_) else ''
            AncillaryDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AncillaryDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CreationTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.CreationTime = dval_
            self.CreationTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'Location':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Location = obj_
            obj_.original_tagname_ = 'Location'
        elif nodeName_ == 'AncillaryDetails':
            obj_ = TrackStatusAncillaryDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AncillaryDetails.append(obj_)
            obj_.original_tagname_ = 'AncillaryDetails'
# end class TrackStatusDetail


class TrackingBillOfLadingDocumentDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DocumentFormat=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DocumentFormat = DocumentFormat
        self.DocumentFormat_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackingBillOfLadingDocumentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackingBillOfLadingDocumentDetail.subclass:
            return TrackingBillOfLadingDocumentDetail.subclass(*args_, **kwargs_)
        else:
            return TrackingBillOfLadingDocumentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocumentFormat(self):
        return self.DocumentFormat
    def set_DocumentFormat(self, DocumentFormat):
        self.DocumentFormat = DocumentFormat
    def hasContent_(self):
        if (
            self.DocumentFormat is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackingBillOfLadingDocumentDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackingBillOfLadingDocumentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackingBillOfLadingDocumentDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackingBillOfLadingDocumentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackingBillOfLadingDocumentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackingBillOfLadingDocumentDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackingBillOfLadingDocumentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocumentFormat is not None:
            namespaceprefix_ = self.DocumentFormat_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentFormat_nsprefix_) else ''
            self.DocumentFormat.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocumentFormat', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocumentFormat':
            obj_ = TrackingDocumentFormat.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocumentFormat = obj_
            obj_.original_tagname_ = 'DocumentFormat'
# end class TrackingBillOfLadingDocumentDetail


class TrackingDateOrTimestamp(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, DateOrTimestamp=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_TrackingDateOrTimestampType(self.Type)
        self.Type_nsprefix_ = None
        self.DateOrTimestamp = DateOrTimestamp
        self.DateOrTimestamp_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackingDateOrTimestamp)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackingDateOrTimestamp.subclass:
            return TrackingDateOrTimestamp.subclass(*args_, **kwargs_)
        else:
            return TrackingDateOrTimestamp(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_DateOrTimestamp(self):
        return self.DateOrTimestamp
    def set_DateOrTimestamp(self, DateOrTimestamp):
        self.DateOrTimestamp = DateOrTimestamp
    def validate_TrackingDateOrTimestampType(self, value):
        result = True
        # Validate type TrackingDateOrTimestampType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACTUAL_DELIVERY', 'ACTUAL_PICKUP', 'ACTUAL_TENDER', 'ANTICIPATED_TENDER', 'APPOINTMENT_DELIVERY', 'ESTIMATED_DELIVERY', 'ESTIMATED_PICKUP', 'ESTIMATED_RETURN_TO_STATION', 'SHIP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TrackingDateOrTimestampType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.DateOrTimestamp is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackingDateOrTimestamp', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackingDateOrTimestamp')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackingDateOrTimestamp':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackingDateOrTimestamp')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackingDateOrTimestamp', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackingDateOrTimestamp'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackingDateOrTimestamp', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.DateOrTimestamp is not None:
            namespaceprefix_ = self.DateOrTimestamp_nsprefix_ + ':' if (UseCapturedNS_ and self.DateOrTimestamp_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateOrTimestamp>%s</%sDateOrTimestamp>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DateOrTimestamp), input_name='DateOrTimestamp')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type TrackingDateOrTimestampType
            self.validate_TrackingDateOrTimestampType(self.Type)
        elif nodeName_ == 'DateOrTimestamp':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DateOrTimestamp')
            value_ = self.gds_validate_string(value_, node, 'DateOrTimestamp')
            self.DateOrTimestamp = value_
            self.DateOrTimestamp_nsprefix_ = child_.prefix
# end class TrackingDateOrTimestamp


class TrackingDocument(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Localizations=None, ImageType=None, Resolution=None, Parts=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_TrackingDocumentType(self.Type)
        self.Type_nsprefix_ = None
        if Localizations is None:
            self.Localizations = []
        else:
            self.Localizations = Localizations
        self.Localizations_nsprefix_ = None
        self.ImageType = ImageType
        self.validate_TrackingDocumentImageType(self.ImageType)
        self.ImageType_nsprefix_ = None
        self.Resolution = Resolution
        self.Resolution_nsprefix_ = None
        if Parts is None:
            self.Parts = []
        else:
            self.Parts = Parts
        self.Parts_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackingDocument)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackingDocument.subclass:
            return TrackingDocument.subclass(*args_, **kwargs_)
        else:
            return TrackingDocument(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Localizations(self):
        return self.Localizations
    def set_Localizations(self, Localizations):
        self.Localizations = Localizations
    def add_Localizations(self, value):
        self.Localizations.append(value)
    def insert_Localizations_at(self, index, value):
        self.Localizations.insert(index, value)
    def replace_Localizations_at(self, index, value):
        self.Localizations[index] = value
    def get_ImageType(self):
        return self.ImageType
    def set_ImageType(self, ImageType):
        self.ImageType = ImageType
    def get_Resolution(self):
        return self.Resolution
    def set_Resolution(self, Resolution):
        self.Resolution = Resolution
    def get_Parts(self):
        return self.Parts
    def set_Parts(self, Parts):
        self.Parts = Parts
    def add_Parts(self, value):
        self.Parts.append(value)
    def insert_Parts_at(self, index, value):
        self.Parts.insert(index, value)
    def replace_Parts_at(self, index, value):
        self.Parts[index] = value
    def validate_TrackingDocumentType(self, value):
        result = True
        # Validate type TrackingDocumentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BILL_OF_LADING', 'FREIGHT_BILLING_DOCUMENT', 'SIGNATURE_PROOF_OF_DELIVERY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TrackingDocumentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_TrackingDocumentImageType(self, value):
        result = True
        # Validate type TrackingDocumentImageType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['PDF', 'PNG']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TrackingDocumentImageType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Localizations or
            self.ImageType is not None or
            self.Resolution is not None or
            self.Parts
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackingDocument', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackingDocument')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackingDocument':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackingDocument')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackingDocument', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackingDocument'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackingDocument', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        for Localizations_ in self.Localizations:
            namespaceprefix_ = self.Localizations_nsprefix_ + ':' if (UseCapturedNS_ and self.Localizations_nsprefix_) else ''
            Localizations_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Localizations', pretty_print=pretty_print)
        if self.ImageType is not None:
            namespaceprefix_ = self.ImageType_nsprefix_ + ':' if (UseCapturedNS_ and self.ImageType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sImageType>%s</%sImageType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ImageType), input_name='ImageType')), namespaceprefix_ , eol_))
        if self.Resolution is not None:
            namespaceprefix_ = self.Resolution_nsprefix_ + ':' if (UseCapturedNS_ and self.Resolution_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sResolution>%s</%sResolution>%s' % (namespaceprefix_ , self.gds_format_integer(self.Resolution, input_name='Resolution'), namespaceprefix_ , eol_))
        for Parts_ in self.Parts:
            namespaceprefix_ = self.Parts_nsprefix_ + ':' if (UseCapturedNS_ and self.Parts_nsprefix_) else ''
            Parts_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Parts', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type TrackingDocumentType
            self.validate_TrackingDocumentType(self.Type)
        elif nodeName_ == 'Localizations':
            obj_ = Localization.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Localizations.append(obj_)
            obj_.original_tagname_ = 'Localizations'
        elif nodeName_ == 'ImageType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ImageType')
            value_ = self.gds_validate_string(value_, node, 'ImageType')
            self.ImageType = value_
            self.ImageType_nsprefix_ = child_.prefix
            # validate type TrackingDocumentImageType
            self.validate_TrackingDocumentImageType(self.ImageType)
        elif nodeName_ == 'Resolution' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Resolution')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Resolution')
            self.Resolution = ival_
            self.Resolution_nsprefix_ = child_.prefix
        elif nodeName_ == 'Parts':
            obj_ = DocumentPart.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Parts.append(obj_)
            obj_.original_tagname_ = 'Parts'
# end class TrackingDocument


class TrackingDocumentDispositionDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DispositionType=None, EMailDetail=None, FaxDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DispositionType = DispositionType
        self.validate_TrackingDocumentDispositionType(self.DispositionType)
        self.DispositionType_nsprefix_ = None
        self.EMailDetail = EMailDetail
        self.EMailDetail_nsprefix_ = None
        if FaxDetails is None:
            self.FaxDetails = []
        else:
            self.FaxDetails = FaxDetails
        self.FaxDetails_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackingDocumentDispositionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackingDocumentDispositionDetail.subclass:
            return TrackingDocumentDispositionDetail.subclass(*args_, **kwargs_)
        else:
            return TrackingDocumentDispositionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DispositionType(self):
        return self.DispositionType
    def set_DispositionType(self, DispositionType):
        self.DispositionType = DispositionType
    def get_EMailDetail(self):
        return self.EMailDetail
    def set_EMailDetail(self, EMailDetail):
        self.EMailDetail = EMailDetail
    def get_FaxDetails(self):
        return self.FaxDetails
    def set_FaxDetails(self, FaxDetails):
        self.FaxDetails = FaxDetails
    def add_FaxDetails(self, value):
        self.FaxDetails.append(value)
    def insert_FaxDetails_at(self, index, value):
        self.FaxDetails.insert(index, value)
    def replace_FaxDetails_at(self, index, value):
        self.FaxDetails[index] = value
    def validate_TrackingDocumentDispositionType(self, value):
        result = True
        # Validate type TrackingDocumentDispositionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['EMAIL', 'FAX', 'RETURN']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TrackingDocumentDispositionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.DispositionType is not None or
            self.EMailDetail is not None or
            self.FaxDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackingDocumentDispositionDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackingDocumentDispositionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackingDocumentDispositionDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackingDocumentDispositionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackingDocumentDispositionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackingDocumentDispositionDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackingDocumentDispositionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DispositionType is not None:
            namespaceprefix_ = self.DispositionType_nsprefix_ + ':' if (UseCapturedNS_ and self.DispositionType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDispositionType>%s</%sDispositionType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DispositionType), input_name='DispositionType')), namespaceprefix_ , eol_))
        if self.EMailDetail is not None:
            namespaceprefix_ = self.EMailDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailDetail_nsprefix_) else ''
            self.EMailDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EMailDetail', pretty_print=pretty_print)
        for FaxDetails_ in self.FaxDetails:
            namespaceprefix_ = self.FaxDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.FaxDetails_nsprefix_) else ''
            FaxDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FaxDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DispositionType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DispositionType')
            value_ = self.gds_validate_string(value_, node, 'DispositionType')
            self.DispositionType = value_
            self.DispositionType_nsprefix_ = child_.prefix
            # validate type TrackingDocumentDispositionType
            self.validate_TrackingDocumentDispositionType(self.DispositionType)
        elif nodeName_ == 'EMailDetail':
            obj_ = TrackingDocumentEmailDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EMailDetail = obj_
            obj_.original_tagname_ = 'EMailDetail'
        elif nodeName_ == 'FaxDetails':
            obj_ = FaxDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FaxDetails.append(obj_)
            obj_.original_tagname_ = 'FaxDetails'
# end class TrackingDocumentDispositionDetail


class TrackingDocumentEmailDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Recipients=None, Sender=None, Localization=None, PersonalMessage=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Recipients is None:
            self.Recipients = []
        else:
            self.Recipients = Recipients
        self.Recipients_nsprefix_ = None
        self.Sender = Sender
        self.Sender_nsprefix_ = None
        self.Localization = Localization
        self.Localization_nsprefix_ = None
        self.PersonalMessage = PersonalMessage
        self.PersonalMessage_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackingDocumentEmailDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackingDocumentEmailDetail.subclass:
            return TrackingDocumentEmailDetail.subclass(*args_, **kwargs_)
        else:
            return TrackingDocumentEmailDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Recipients(self):
        return self.Recipients
    def set_Recipients(self, Recipients):
        self.Recipients = Recipients
    def add_Recipients(self, value):
        self.Recipients.append(value)
    def insert_Recipients_at(self, index, value):
        self.Recipients.insert(index, value)
    def replace_Recipients_at(self, index, value):
        self.Recipients[index] = value
    def get_Sender(self):
        return self.Sender
    def set_Sender(self, Sender):
        self.Sender = Sender
    def get_Localization(self):
        return self.Localization
    def set_Localization(self, Localization):
        self.Localization = Localization
    def get_PersonalMessage(self):
        return self.PersonalMessage
    def set_PersonalMessage(self, PersonalMessage):
        self.PersonalMessage = PersonalMessage
    def hasContent_(self):
        if (
            self.Recipients or
            self.Sender is not None or
            self.Localization is not None or
            self.PersonalMessage is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackingDocumentEmailDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackingDocumentEmailDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackingDocumentEmailDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackingDocumentEmailDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackingDocumentEmailDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackingDocumentEmailDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackingDocumentEmailDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Recipients_ in self.Recipients:
            namespaceprefix_ = self.Recipients_nsprefix_ + ':' if (UseCapturedNS_ and self.Recipients_nsprefix_) else ''
            Recipients_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Recipients', pretty_print=pretty_print)
        if self.Sender is not None:
            namespaceprefix_ = self.Sender_nsprefix_ + ':' if (UseCapturedNS_ and self.Sender_nsprefix_) else ''
            self.Sender.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Sender', pretty_print=pretty_print)
        if self.Localization is not None:
            namespaceprefix_ = self.Localization_nsprefix_ + ':' if (UseCapturedNS_ and self.Localization_nsprefix_) else ''
            self.Localization.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Localization', pretty_print=pretty_print)
        if self.PersonalMessage is not None:
            namespaceprefix_ = self.PersonalMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.PersonalMessage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPersonalMessage>%s</%sPersonalMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PersonalMessage), input_name='PersonalMessage')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Recipients':
            obj_ = EMailDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Recipients.append(obj_)
            obj_.original_tagname_ = 'Recipients'
        elif nodeName_ == 'Sender':
            obj_ = EMailDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Sender = obj_
            obj_.original_tagname_ = 'Sender'
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
        elif nodeName_ == 'PersonalMessage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PersonalMessage')
            value_ = self.gds_validate_string(value_, node, 'PersonalMessage')
            self.PersonalMessage = value_
            self.PersonalMessage_nsprefix_ = child_.prefix
# end class TrackingDocumentEmailDetail


class TrackingDocumentFormat(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Dispositions=None, Grouping=None, ImageType=None, Localization=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Dispositions is None:
            self.Dispositions = []
        else:
            self.Dispositions = Dispositions
        self.Dispositions_nsprefix_ = None
        self.Grouping = Grouping
        self.validate_TrackingDocumentGroupingType(self.Grouping)
        self.Grouping_nsprefix_ = None
        self.ImageType = ImageType
        self.validate_TrackingDocumentImageType(self.ImageType)
        self.ImageType_nsprefix_ = None
        self.Localization = Localization
        self.Localization_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackingDocumentFormat)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackingDocumentFormat.subclass:
            return TrackingDocumentFormat.subclass(*args_, **kwargs_)
        else:
            return TrackingDocumentFormat(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Dispositions(self):
        return self.Dispositions
    def set_Dispositions(self, Dispositions):
        self.Dispositions = Dispositions
    def add_Dispositions(self, value):
        self.Dispositions.append(value)
    def insert_Dispositions_at(self, index, value):
        self.Dispositions.insert(index, value)
    def replace_Dispositions_at(self, index, value):
        self.Dispositions[index] = value
    def get_Grouping(self):
        return self.Grouping
    def set_Grouping(self, Grouping):
        self.Grouping = Grouping
    def get_ImageType(self):
        return self.ImageType
    def set_ImageType(self, ImageType):
        self.ImageType = ImageType
    def get_Localization(self):
        return self.Localization
    def set_Localization(self, Localization):
        self.Localization = Localization
    def validate_TrackingDocumentGroupingType(self, value):
        result = True
        # Validate type TrackingDocumentGroupingType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CONSOLIDATED_BY_DOCUMENT_TYPE', 'INDIVIDUAL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TrackingDocumentGroupingType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_TrackingDocumentImageType(self, value):
        result = True
        # Validate type TrackingDocumentImageType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['PDF', 'PNG']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TrackingDocumentImageType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Dispositions or
            self.Grouping is not None or
            self.ImageType is not None or
            self.Localization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackingDocumentFormat', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackingDocumentFormat')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackingDocumentFormat':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackingDocumentFormat')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackingDocumentFormat', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackingDocumentFormat'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackingDocumentFormat', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Dispositions_ in self.Dispositions:
            namespaceprefix_ = self.Dispositions_nsprefix_ + ':' if (UseCapturedNS_ and self.Dispositions_nsprefix_) else ''
            Dispositions_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Dispositions', pretty_print=pretty_print)
        if self.Grouping is not None:
            namespaceprefix_ = self.Grouping_nsprefix_ + ':' if (UseCapturedNS_ and self.Grouping_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGrouping>%s</%sGrouping>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Grouping), input_name='Grouping')), namespaceprefix_ , eol_))
        if self.ImageType is not None:
            namespaceprefix_ = self.ImageType_nsprefix_ + ':' if (UseCapturedNS_ and self.ImageType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sImageType>%s</%sImageType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ImageType), input_name='ImageType')), namespaceprefix_ , eol_))
        if self.Localization is not None:
            namespaceprefix_ = self.Localization_nsprefix_ + ':' if (UseCapturedNS_ and self.Localization_nsprefix_) else ''
            self.Localization.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Localization', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Dispositions':
            obj_ = TrackingDocumentDispositionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Dispositions.append(obj_)
            obj_.original_tagname_ = 'Dispositions'
        elif nodeName_ == 'Grouping':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Grouping')
            value_ = self.gds_validate_string(value_, node, 'Grouping')
            self.Grouping = value_
            self.Grouping_nsprefix_ = child_.prefix
            # validate type TrackingDocumentGroupingType
            self.validate_TrackingDocumentGroupingType(self.Grouping)
        elif nodeName_ == 'ImageType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ImageType')
            value_ = self.gds_validate_string(value_, node, 'ImageType')
            self.ImageType = value_
            self.ImageType_nsprefix_ = child_.prefix
            # validate type TrackingDocumentImageType
            self.validate_TrackingDocumentImageType(self.ImageType)
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
# end class TrackingDocumentFormat


class TrackingDocumentSpecification(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DocumentTypes=None, BillOfLadingDocumentDetail=None, FreightBillingDocumentDetail=None, SignatureProofOfDeliveryDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if DocumentTypes is None:
            self.DocumentTypes = []
        else:
            self.DocumentTypes = DocumentTypes
        self.DocumentTypes_nsprefix_ = None
        self.BillOfLadingDocumentDetail = BillOfLadingDocumentDetail
        self.BillOfLadingDocumentDetail_nsprefix_ = None
        self.FreightBillingDocumentDetail = FreightBillingDocumentDetail
        self.FreightBillingDocumentDetail_nsprefix_ = None
        self.SignatureProofOfDeliveryDetail = SignatureProofOfDeliveryDetail
        self.SignatureProofOfDeliveryDetail_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackingDocumentSpecification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackingDocumentSpecification.subclass:
            return TrackingDocumentSpecification.subclass(*args_, **kwargs_)
        else:
            return TrackingDocumentSpecification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocumentTypes(self):
        return self.DocumentTypes
    def set_DocumentTypes(self, DocumentTypes):
        self.DocumentTypes = DocumentTypes
    def add_DocumentTypes(self, value):
        self.DocumentTypes.append(value)
    def insert_DocumentTypes_at(self, index, value):
        self.DocumentTypes.insert(index, value)
    def replace_DocumentTypes_at(self, index, value):
        self.DocumentTypes[index] = value
    def get_BillOfLadingDocumentDetail(self):
        return self.BillOfLadingDocumentDetail
    def set_BillOfLadingDocumentDetail(self, BillOfLadingDocumentDetail):
        self.BillOfLadingDocumentDetail = BillOfLadingDocumentDetail
    def get_FreightBillingDocumentDetail(self):
        return self.FreightBillingDocumentDetail
    def set_FreightBillingDocumentDetail(self, FreightBillingDocumentDetail):
        self.FreightBillingDocumentDetail = FreightBillingDocumentDetail
    def get_SignatureProofOfDeliveryDetail(self):
        return self.SignatureProofOfDeliveryDetail
    def set_SignatureProofOfDeliveryDetail(self, SignatureProofOfDeliveryDetail):
        self.SignatureProofOfDeliveryDetail = SignatureProofOfDeliveryDetail
    def validate_TrackingDocumentType(self, value):
        result = True
        # Validate type TrackingDocumentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BILL_OF_LADING', 'FREIGHT_BILLING_DOCUMENT', 'SIGNATURE_PROOF_OF_DELIVERY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TrackingDocumentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.DocumentTypes or
            self.BillOfLadingDocumentDetail is not None or
            self.FreightBillingDocumentDetail is not None or
            self.SignatureProofOfDeliveryDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackingDocumentSpecification', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackingDocumentSpecification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackingDocumentSpecification':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackingDocumentSpecification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackingDocumentSpecification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackingDocumentSpecification'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackingDocumentSpecification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DocumentTypes_ in self.DocumentTypes:
            namespaceprefix_ = self.DocumentTypes_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentTypes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentTypes>%s</%sDocumentTypes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(DocumentTypes_), input_name='DocumentTypes')), namespaceprefix_ , eol_))
        if self.BillOfLadingDocumentDetail is not None:
            namespaceprefix_ = self.BillOfLadingDocumentDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.BillOfLadingDocumentDetail_nsprefix_) else ''
            self.BillOfLadingDocumentDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BillOfLadingDocumentDetail', pretty_print=pretty_print)
        if self.FreightBillingDocumentDetail is not None:
            namespaceprefix_ = self.FreightBillingDocumentDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightBillingDocumentDetail_nsprefix_) else ''
            self.FreightBillingDocumentDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreightBillingDocumentDetail', pretty_print=pretty_print)
        if self.SignatureProofOfDeliveryDetail is not None:
            namespaceprefix_ = self.SignatureProofOfDeliveryDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.SignatureProofOfDeliveryDetail_nsprefix_) else ''
            self.SignatureProofOfDeliveryDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SignatureProofOfDeliveryDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocumentTypes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocumentTypes')
            value_ = self.gds_validate_string(value_, node, 'DocumentTypes')
            self.DocumentTypes.append(value_)
            self.DocumentTypes_nsprefix_ = child_.prefix
            # validate type TrackingDocumentType
            self.validate_TrackingDocumentType(self.DocumentTypes[-1])
        elif nodeName_ == 'BillOfLadingDocumentDetail':
            obj_ = TrackingBillOfLadingDocumentDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BillOfLadingDocumentDetail = obj_
            obj_.original_tagname_ = 'BillOfLadingDocumentDetail'
        elif nodeName_ == 'FreightBillingDocumentDetail':
            obj_ = TrackingFreightBillingDocumentDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreightBillingDocumentDetail = obj_
            obj_.original_tagname_ = 'FreightBillingDocumentDetail'
        elif nodeName_ == 'SignatureProofOfDeliveryDetail':
            obj_ = TrackingSignatureProofOfDeliveryDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SignatureProofOfDeliveryDetail = obj_
            obj_.original_tagname_ = 'SignatureProofOfDeliveryDetail'
# end class TrackingDocumentSpecification


class TrackingFreightBillingDocumentDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DocumentFormat=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DocumentFormat = DocumentFormat
        self.DocumentFormat_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackingFreightBillingDocumentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackingFreightBillingDocumentDetail.subclass:
            return TrackingFreightBillingDocumentDetail.subclass(*args_, **kwargs_)
        else:
            return TrackingFreightBillingDocumentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocumentFormat(self):
        return self.DocumentFormat
    def set_DocumentFormat(self, DocumentFormat):
        self.DocumentFormat = DocumentFormat
    def hasContent_(self):
        if (
            self.DocumentFormat is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackingFreightBillingDocumentDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackingFreightBillingDocumentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackingFreightBillingDocumentDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackingFreightBillingDocumentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackingFreightBillingDocumentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackingFreightBillingDocumentDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackingFreightBillingDocumentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocumentFormat is not None:
            namespaceprefix_ = self.DocumentFormat_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentFormat_nsprefix_) else ''
            self.DocumentFormat.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocumentFormat', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocumentFormat':
            obj_ = TrackingDocumentFormat.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocumentFormat = obj_
            obj_.original_tagname_ = 'DocumentFormat'
# end class TrackingFreightBillingDocumentDetail


class TrackingSignatureProofOfDeliveryDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DocumentFormat=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DocumentFormat = DocumentFormat
        self.DocumentFormat_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackingSignatureProofOfDeliveryDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackingSignatureProofOfDeliveryDetail.subclass:
            return TrackingSignatureProofOfDeliveryDetail.subclass(*args_, **kwargs_)
        else:
            return TrackingSignatureProofOfDeliveryDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocumentFormat(self):
        return self.DocumentFormat
    def set_DocumentFormat(self, DocumentFormat):
        self.DocumentFormat = DocumentFormat
    def hasContent_(self):
        if (
            self.DocumentFormat is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackingSignatureProofOfDeliveryDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackingSignatureProofOfDeliveryDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackingSignatureProofOfDeliveryDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackingSignatureProofOfDeliveryDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackingSignatureProofOfDeliveryDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackingSignatureProofOfDeliveryDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackingSignatureProofOfDeliveryDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocumentFormat is not None:
            namespaceprefix_ = self.DocumentFormat_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentFormat_nsprefix_) else ''
            self.DocumentFormat.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocumentFormat', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocumentFormat':
            obj_ = TrackingDocumentFormat.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocumentFormat = obj_
            obj_.original_tagname_ = 'DocumentFormat'
# end class TrackingSignatureProofOfDeliveryDetail


class TransactionDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CustomerTransactionId=None, Localization=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CustomerTransactionId = CustomerTransactionId
        self.CustomerTransactionId_nsprefix_ = None
        self.Localization = Localization
        self.Localization_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransactionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransactionDetail.subclass:
            return TransactionDetail.subclass(*args_, **kwargs_)
        else:
            return TransactionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CustomerTransactionId(self):
        return self.CustomerTransactionId
    def set_CustomerTransactionId(self, CustomerTransactionId):
        self.CustomerTransactionId = CustomerTransactionId
    def get_Localization(self):
        return self.Localization
    def set_Localization(self, Localization):
        self.Localization = Localization
    def hasContent_(self):
        if (
            self.CustomerTransactionId is not None or
            self.Localization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TransactionDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransactionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransactionDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransactionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransactionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TransactionDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TransactionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomerTransactionId is not None:
            namespaceprefix_ = self.CustomerTransactionId_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerTransactionId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomerTransactionId>%s</%sCustomerTransactionId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomerTransactionId), input_name='CustomerTransactionId')), namespaceprefix_ , eol_))
        if self.Localization is not None:
            namespaceprefix_ = self.Localization_nsprefix_ + ':' if (UseCapturedNS_ and self.Localization_nsprefix_) else ''
            self.Localization.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Localization', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CustomerTransactionId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomerTransactionId')
            value_ = self.gds_validate_string(value_, node, 'CustomerTransactionId')
            self.CustomerTransactionId = value_
            self.CustomerTransactionId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
# end class TransactionDetail


class Weight(GeneratedsSuper):
    """The descriptive data for the heaviness of an object."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Units=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Units = Units
        self.validate_WeightUnits(self.Units)
        self.Units_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Weight)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Weight.subclass:
            return Weight.subclass(*args_, **kwargs_)
        else:
            return Weight(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Units(self):
        return self.Units
    def set_Units(self, Units):
        self.Units = Units
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def validate_WeightUnits(self, value):
        result = True
        # Validate type WeightUnits, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['KG', 'LB']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on WeightUnits' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Units is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Weight', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Weight')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Weight':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Weight')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Weight', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Weight'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Weight', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Units is not None:
            namespaceprefix_ = self.Units_nsprefix_ + ':' if (UseCapturedNS_ and self.Units_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnits>%s</%sUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Value, input_name='Value'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Units':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Units')
            value_ = self.gds_validate_string(value_, node, 'Units')
            self.Units = value_
            self.Units_nsprefix_ = child_.prefix
            # validate type WeightUnits
            self.validate_WeightUnits(self.Units)
        elif nodeName_ == 'Value' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Value')
            fval_ = self.gds_validate_decimal(fval_, node, 'Value')
            self.Value = fval_
            self.Value_nsprefix_ = child_.prefix
# end class Weight


class WebAuthenticationDetail(GeneratedsSuper):
    """Used in authentication of the sender's identity."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ParentCredential=None, UserCredential=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ParentCredential = ParentCredential
        self.ParentCredential_nsprefix_ = None
        self.UserCredential = UserCredential
        self.UserCredential_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WebAuthenticationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WebAuthenticationDetail.subclass:
            return WebAuthenticationDetail.subclass(*args_, **kwargs_)
        else:
            return WebAuthenticationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ParentCredential(self):
        return self.ParentCredential
    def set_ParentCredential(self, ParentCredential):
        self.ParentCredential = ParentCredential
    def get_UserCredential(self):
        return self.UserCredential
    def set_UserCredential(self, UserCredential):
        self.UserCredential = UserCredential
    def hasContent_(self):
        if (
            self.ParentCredential is not None or
            self.UserCredential is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WebAuthenticationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WebAuthenticationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'WebAuthenticationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='WebAuthenticationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='WebAuthenticationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='WebAuthenticationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WebAuthenticationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ParentCredential is not None:
            namespaceprefix_ = self.ParentCredential_nsprefix_ + ':' if (UseCapturedNS_ and self.ParentCredential_nsprefix_) else ''
            self.ParentCredential.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ParentCredential', pretty_print=pretty_print)
        if self.UserCredential is not None:
            namespaceprefix_ = self.UserCredential_nsprefix_ + ':' if (UseCapturedNS_ and self.UserCredential_nsprefix_) else ''
            self.UserCredential.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UserCredential', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ParentCredential':
            obj_ = WebAuthenticationCredential.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ParentCredential = obj_
            obj_.original_tagname_ = 'ParentCredential'
        elif nodeName_ == 'UserCredential':
            obj_ = WebAuthenticationCredential.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UserCredential = obj_
            obj_.original_tagname_ = 'UserCredential'
# end class WebAuthenticationDetail


class WebAuthenticationCredential(GeneratedsSuper):
    """Two part authentication string used for the sender's identity"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Key=None, Password=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Key = Key
        self.Key_nsprefix_ = None
        self.Password = Password
        self.Password_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WebAuthenticationCredential)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WebAuthenticationCredential.subclass:
            return WebAuthenticationCredential.subclass(*args_, **kwargs_)
        else:
            return WebAuthenticationCredential(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Key(self):
        return self.Key
    def set_Key(self, Key):
        self.Key = Key
    def get_Password(self):
        return self.Password
    def set_Password(self, Password):
        self.Password = Password
    def hasContent_(self):
        if (
            self.Key is not None or
            self.Password is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WebAuthenticationCredential', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WebAuthenticationCredential')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'WebAuthenticationCredential':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='WebAuthenticationCredential')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='WebAuthenticationCredential', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='WebAuthenticationCredential'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WebAuthenticationCredential', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Key is not None:
            namespaceprefix_ = self.Key_nsprefix_ + ':' if (UseCapturedNS_ and self.Key_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sKey>%s</%sKey>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Key), input_name='Key')), namespaceprefix_ , eol_))
        if self.Password is not None:
            namespaceprefix_ = self.Password_nsprefix_ + ':' if (UseCapturedNS_ and self.Password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPassword>%s</%sPassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Password), input_name='Password')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Key':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Key')
            value_ = self.gds_validate_string(value_, node, 'Key')
            self.Key = value_
            self.Key_nsprefix_ = child_.prefix
        elif nodeName_ == 'Password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Password')
            value_ = self.gds_validate_string(value_, node, 'Password')
            self.Password = value_
            self.Password_nsprefix_ = child_.prefix
# end class WebAuthenticationCredential


class VersionId(GeneratedsSuper):
    """Identifies the version/level of a service operation expected by a caller
    (in each request) and performed by the callee (in each reply)."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ServiceId=None, Major=None, Intermediate=None, Minor=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ServiceId = ServiceId
        self.ServiceId_nsprefix_ = None
        self.Major = Major
        self.Major_nsprefix_ = None
        self.Intermediate = Intermediate
        self.Intermediate_nsprefix_ = None
        self.Minor = Minor
        self.Minor_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VersionId)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VersionId.subclass:
            return VersionId.subclass(*args_, **kwargs_)
        else:
            return VersionId(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ServiceId(self):
        return self.ServiceId
    def set_ServiceId(self, ServiceId):
        self.ServiceId = ServiceId
    def get_Major(self):
        return self.Major
    def set_Major(self, Major):
        self.Major = Major
    def get_Intermediate(self):
        return self.Intermediate
    def set_Intermediate(self, Intermediate):
        self.Intermediate = Intermediate
    def get_Minor(self):
        return self.Minor
    def set_Minor(self, Minor):
        self.Minor = Minor
    def hasContent_(self):
        if (
            self.ServiceId is not None or
            self.Major is not None or
            self.Intermediate is not None or
            self.Minor is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='VersionId', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VersionId')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'VersionId':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='VersionId')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='VersionId', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='VersionId'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='VersionId', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceId is not None:
            namespaceprefix_ = self.ServiceId_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceId>%s</%sServiceId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ServiceId), input_name='ServiceId')), namespaceprefix_ , eol_))
        if self.Major is not None:
            namespaceprefix_ = self.Major_nsprefix_ + ':' if (UseCapturedNS_ and self.Major_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMajor>%s</%sMajor>%s' % (namespaceprefix_ , self.gds_format_integer(self.Major, input_name='Major'), namespaceprefix_ , eol_))
        if self.Intermediate is not None:
            namespaceprefix_ = self.Intermediate_nsprefix_ + ':' if (UseCapturedNS_ and self.Intermediate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIntermediate>%s</%sIntermediate>%s' % (namespaceprefix_ , self.gds_format_integer(self.Intermediate, input_name='Intermediate'), namespaceprefix_ , eol_))
        if self.Minor is not None:
            namespaceprefix_ = self.Minor_nsprefix_ + ':' if (UseCapturedNS_ and self.Minor_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMinor>%s</%sMinor>%s' % (namespaceprefix_ , self.gds_format_integer(self.Minor, input_name='Minor'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ServiceId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ServiceId')
            value_ = self.gds_validate_string(value_, node, 'ServiceId')
            self.ServiceId = value_
            self.ServiceId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Major' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Major')
            ival_ = self.gds_validate_integer(ival_, node, 'Major')
            self.Major = ival_
            self.Major_nsprefix_ = child_.prefix
        elif nodeName_ == 'Intermediate' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Intermediate')
            ival_ = self.gds_validate_integer(ival_, node, 'Intermediate')
            self.Intermediate = ival_
            self.Intermediate_nsprefix_ = child_.prefix
        elif nodeName_ == 'Minor' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Minor')
            ival_ = self.gds_validate_integer(ival_, node, 'Minor')
            self.Minor = ival_
            self.Minor_nsprefix_ = child_.prefix
# end class VersionId


GDSClassesMapping = {
    'GetTrackingDocumentsReply': GetTrackingDocumentsReply,
    'GetTrackingDocumentsRequest': GetTrackingDocumentsRequest,
    'SendNotificationsReply': SendNotificationsReply,
    'SendNotificationsRequest': SendNotificationsRequest,
    'TrackReply': TrackReply,
    'TrackRequest': TrackRequest,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def get_required_ns_prefix_defs(rootNode):
    '''Get all name space prefix definitions required in this XML doc.
    Return a dictionary of definitions and a char string of definitions.
    '''
    nsmap = {
        prefix: uri
        for node in rootNode.iter()
        for (prefix, uri) in node.nsmap.items()
        if prefix is not None
    }
    namespacedefs = ' '.join([
        'xmlns:{}="{}"'.format(prefix, uri)
        for prefix, uri in nsmap.items()
    ])
    return nsmap, namespacedefs


def parse(inFileName, silence=False, print_warnings=True):
    global CapturedNsmap_
    gds_collector = GdsCollector_()
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'GetTrackingDocumentsReply'
        rootClass = GetTrackingDocumentsReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    CapturedNsmap_, namespacedefs = get_required_ns_prefix_defs(rootNode)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_=namespacedefs,
            pretty_print=True)
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseEtree(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'GetTrackingDocumentsReply'
        rootClass = GetTrackingDocumentsReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(str(content))
        sys.stdout.write('\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False, print_warnings=True):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    gds_collector = GdsCollector_()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'GetTrackingDocumentsReply'
        rootClass = GetTrackingDocumentsReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if not SaveElementTreeNode:
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:ns="http://fedex.com/ws/track/v18"')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseLiteral(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'GetTrackingDocumentsReply'
        rootClass = GetTrackingDocumentsReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('#from track_service_v18 import *\n\n')
        sys.stdout.write('import track_service_v18 as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

RenameMappings_ = {
}

__all__ = [
    "Address",
    "AppointmentDetail",
    "AppointmentTimeDetail",
    "AvailableImagesDetail",
    "ClientDetail",
    "Commodity",
    "CompletedTrackDetail",
    "Contact",
    "ContactAndAddress",
    "ContentRecord",
    "CustomerExceptionRequestDetail",
    "CustomsOptionDetail",
    "DateRange",
    "DeliveryOptionEligibilityDetail",
    "Dimensions",
    "Distance",
    "DocumentPart",
    "EMailDetail",
    "EdtExciseCondition",
    "FaxDetail",
    "GetTrackingDocumentsReply",
    "GetTrackingDocumentsRequest",
    "LocalTimeRange",
    "Localization",
    "Measure",
    "Money",
    "NaftaCommodityDetail",
    "Notification",
    "NotificationDetail",
    "NotificationParameter",
    "PagingDetail",
    "PieceCountVerificationDetail",
    "SendNotificationsReply",
    "SendNotificationsRequest",
    "ShipmentEventNotificationDetail",
    "ShipmentEventNotificationSpecification",
    "ShipmentNotificationFormatSpecification",
    "SignatureImageDetail",
    "SpecialInstructionStatusDetail",
    "StringBarcode",
    "TrackAdvanceNotificationDetail",
    "TrackChargeDetail",
    "TrackDetail",
    "TrackEvent",
    "TrackInformationNoteDetail",
    "TrackNotificationPackage",
    "TrackNotificationRecipientDetail",
    "TrackOtherIdentifierDetail",
    "TrackPackageIdentifier",
    "TrackPackagingDescriptionDetail",
    "TrackPayment",
    "TrackReconciliation",
    "TrackReply",
    "TrackRequest",
    "TrackReturnDetail",
    "TrackSelectionDetail",
    "TrackServiceDescriptionDetail",
    "TrackSpecialHandling",
    "TrackSpecialInstruction",
    "TrackSplitShipmentPart",
    "TrackStatusAncillaryDetail",
    "TrackStatusDetail",
    "TrackingBillOfLadingDocumentDetail",
    "TrackingDateOrTimestamp",
    "TrackingDocument",
    "TrackingDocumentDispositionDetail",
    "TrackingDocumentEmailDetail",
    "TrackingDocumentFormat",
    "TrackingDocumentSpecification",
    "TrackingFreightBillingDocumentDetail",
    "TrackingSignatureProofOfDeliveryDetail",
    "TransactionDetail",
    "VersionId",
    "WebAuthenticationCredential",
    "WebAuthenticationDetail",
    "Weight"
]
