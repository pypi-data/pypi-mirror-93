#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Fri Mar  6 15:54:39 2020 by generateDS.py version 2.35.15.
# Python 3.8.1 (v3.8.1:1b293b6006, Dec 18 2019, 14:08:53)  [Clang 6.0 (clang-600.0.57)]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('-o', './python/ship_service_v25.py')
#
# Command line arguments:
#   ./schemas/ShipService_v25.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/.sandbox/bin/generateDS --no-namespace-defs -o "./python/ship_service_v25.py" ./schemas/ShipService_v25.xsd
#
# Current working directory (os.getcwd()):
#   2020-02
#

from six.moves import zip_longest
import os
import sys
import re as re_
import base64
import datetime as datetime_
import decimal as decimal_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
SaveElementTreeNode = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ImportError:
    GenerateDSNamespaceTypePrefixes_ = {}

#
# You can replace the following class definition by defining an
# importable module named "generatedscollector" containing a class
# named "GdsCollector".  See the default class definition below for
# clues about the possible content of that class.
#
try:
    from generatedscollector import GdsCollector as GdsCollector_
except ImportError:

    class GdsCollector_(object):

        def __init__(self, messages=None):
            if messages is None:
                self.messages = []
            else:
                self.messages = messages

        def add_message(self, msg):
            self.messages.append(msg)

        def get_messages(self):
            return self.messages

        def clear_messages(self):
            self.messages = []

        def print_messages(self):
            for msg in self.messages:
                print("Warning: {}".format(msg))

        def write_messages(self, outstream):
            for msg in self.messages:
                outstream.write("Warning: {}\n".format(msg))


#
# The super-class for enum types
#

try:
    from enum import Enum
except ImportError:
    Enum = object

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        __hash__ = object.__hash__
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_parse_string(self, input_data, node=None, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_parse_integer(self, input_data, node=None, input_name=''):
            try:
                ival = int(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires integer value: %s' % exp)
            return ival
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            try:
                value = int(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires integer value')
            return value
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integer valuess')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_parse_float(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires float or double value: %s' % exp)
            return fval_
        def gds_validate_float(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires float value')
            return value
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of float values')
            return values
        def gds_format_decimal(self, input_data, input_name=''):
            return ('%s' % input_data).rstrip('0')
        def gds_parse_decimal(self, input_data, node=None, input_name=''):
            try:
                decimal_value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return decimal_value
        def gds_validate_decimal(self, input_data, node=None, input_name=''):
            try:
                value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return value
        def gds_format_decimal_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_decimal_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    decimal_.Decimal(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of decimal values')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_parse_double(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires double or float value: %s' % exp)
            return fval_
        def gds_validate_double(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires double or float value')
            return value
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(
                        node, 'Requires sequence of double or float values')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_parse_boolean(self, input_data, node=None, input_name=''):
            if input_data in ('true', '1'):
                bval = True
            elif input_data in ('false', '0'):
                bval = False
            else:
                raise_parse_error(node, 'Requires boolean value')
            return bval
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            if input_data not in (True, 1, False, 0, ):
                raise_parse_error(
                    node,
                    'Requires boolean value '
                    '(one of True, 1, False, 0)')
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in (True, 1, False, 0, ):
                    raise_parse_error(
                        node,
                        'Requires sequence of boolean values '
                        '(one of True, 1, False, 0)')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_check_cardinality_(
                self, value, input_name,
                min_occurs=0, max_occurs=1, required=None):
            if value is None:
                length = 0
            elif isinstance(value, list):
                length = len(value)
            else:
                length = 1
            if required is not None :
                if required and length < 1:
                    self.gds_collector_.add_message(
                        "Required value {}{} is missing".format(
                            input_name, self.gds_get_node_lineno_()))
            if length < min_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is below "
                    "the minimum allowed, "
                    "expected at least {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        min_occurs, length))
            elif length > max_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is above "
                    "the maximum allowed, "
                    "expected at most {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        max_occurs, length))
        def gds_validate_builtin_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value, input_name=input_name)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_validate_defined_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            # provide default value in case option --disable-xml is used.
            content = ""
            content = etree_.tostring(node, encoding="unicode")
            return content
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            def excl_select_objs_(obj):
                return (obj[0] != 'parent_object_' and
                        obj[0] != 'gds_collector_')
            if type(self) != type(other):
                return False
            return all(x == y for x, y in zip_longest(
                filter(excl_select_objs_, self.__dict__.items()),
                filter(excl_select_objs_, other.__dict__.items())))
        def __ne__(self, other):
            return not self.__eq__(other)
        # Django ETL transform hooks.
        def gds_djo_etl_transform(self):
            pass
        def gds_djo_etl_transform_db_obj(self, dbobj):
            pass
        # SQLAlchemy ETL transform hooks.
        def gds_sqa_etl_transform(self):
            return 0, None
        def gds_sqa_etl_transform_db_obj(self, dbobj):
            pass
        def gds_get_node_lineno_(self):
            if (hasattr(self, "gds_elementtree_node_") and
                    self.gds_elementtree_node_ is not None):
                return ' near line {}'.format(
                    self.gds_elementtree_node_.sourceline)
            else:
                return ""
    
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
# Set this to false in order to deactivate during export, the use of
# name space prefixes captured from the input document.
UseCapturedNS_ = True
CapturedNsmap_ = {}
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


def encode_str_2_3(instr):
    return instr


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if node is not None:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class AccessorRoleType(Enum):
    """Specifies the role that identifies the permissions the accessor of the
    pending shipment."""
    SHIPMENT_COMPLETOR='SHIPMENT_COMPLETOR'
    SHIPMENT_INITIATOR='SHIPMENT_INITIATOR'


class AdditionalLabelsType(Enum):
    BROKER='BROKER'
    CONSIGNEE='CONSIGNEE'
    CUSTOMS='CUSTOMS'
    DESTINATION='DESTINATION'
    FREIGHT_REFERENCE='FREIGHT_REFERENCE'
    MANIFEST='MANIFEST'
    ORIGIN='ORIGIN'
    RECIPIENT='RECIPIENT'
    SHIPPER='SHIPPER'


class AlcoholRecipientType(Enum):
    """Specifies the type of license that the recipient of the alcohol shipment
    has."""
    CONSUMER='CONSUMER'
    LICENSEE='LICENSEE'


class AncillaryFeeAndTaxType(Enum):
    CLEARANCE_ENTRY_FEE='CLEARANCE_ENTRY_FEE'
    GOODS_AND_SERVICES_TAX='GOODS_AND_SERVICES_TAX'
    HARMONIZED_SALES_TAX='HARMONIZED_SALES_TAX'
    OTHER='OTHER'


class AssociatedShipmentType(Enum):
    COD_AND_DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN='COD_AND_DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN'
    COD_RETURN='COD_RETURN'
    DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN='DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN'


class B13AFilingOptionType(Enum):
    FEDEX_TO_STAMP='FEDEX_TO_STAMP'
    FILED_ELECTRONICALLY='FILED_ELECTRONICALLY'
    MANUALLY_ATTACHED='MANUALLY_ATTACHED'
    NOT_REQUIRED='NOT_REQUIRED'
    SUMMARY_REPORTING='SUMMARY_REPORTING'


class BarcodeSymbologyType(Enum):
    """Identification of the type of barcode (symbology) used on FedEx
    documents and labels."""
    CODABAR='CODABAR'
    CODE_128='CODE128'
    CODE_128_B='CODE128B'
    CODE_128_C='CODE128C'
    CODE_128_WIDEBAR='CODE128_WIDEBAR'
    CODE_39='CODE39'
    CODE_93='CODE93'
    I_2_OF_5='I2OF5'
    PDF_417='PDF417'
    POSTNET='POSTNET'
    QR_CODE='QR_CODE'
    UCC_128='UCC128'


class BatteryMaterialType(Enum):
    """Describes the material composition of a battery or cell."""
    LITHIUM_ION='LITHIUM_ION'
    LITHIUM_METAL='LITHIUM_METAL'


class BatteryPackingType(Enum):
    """Describes the packing arrangement of a battery or cell with respect to
    other items within the same package."""
    CONTAINED_IN_EQUIPMENT='CONTAINED_IN_EQUIPMENT'
    PACKED_WITH_EQUIPMENT='PACKED_WITH_EQUIPMENT'


class BatteryRegulatorySubType(Enum):
    """A regulation specific classification for a battery or cell."""
    IATA_SECTION_II='IATA_SECTION_II'


class BinaryBarcodeType(Enum):
    COMMON__2_D='COMMON_2D'


class BrokerType(Enum):
    EXPORT='EXPORT'
    IMPORT='IMPORT'


class CarrierCodeType(Enum):
    """Identification of a FedEx operating company (transportation)."""
    FDXC='FDXC'
    FDXE='FDXE'
    FDXG='FDXG'
    FXCC='FXCC'
    FXFR='FXFR'
    FXSP='FXSP'


class ChargeBasisLevelType(Enum):
    CURRENT_PACKAGE='CURRENT_PACKAGE'
    SUM_OF_PACKAGES='SUM_OF_PACKAGES'


class ClearanceBrokerageType(Enum):
    """Specifies the type of brokerage to be applied to a shipment."""
    BROKER_INCLUSIVE='BROKER_INCLUSIVE'
    BROKER_INCLUSIVE_NON_RESIDENT_IMPORTER='BROKER_INCLUSIVE_NON_RESIDENT_IMPORTER'
    BROKER_SELECT='BROKER_SELECT'
    BROKER_SELECT_NON_RESIDENT_IMPORTER='BROKER_SELECT_NON_RESIDENT_IMPORTER'
    BROKER_UNASSIGNED='BROKER_UNASSIGNED'


class CodAddTransportationChargeBasisType(Enum):
    COD_SURCHARGE='COD_SURCHARGE'
    NET_CHARGE='NET_CHARGE'
    NET_FREIGHT='NET_FREIGHT'
    TOTAL_CUSTOMER_CHARGE='TOTAL_CUSTOMER_CHARGE'


class CodAdjustmentType(Enum):
    """Specifies the type of adjustment was performed to the COD collection
    amount during rating."""
    CHARGES_ADDED='CHARGES_ADDED'
    NONE='NONE'


class CodCollectionType(Enum):
    """Identifies the type of funds FedEx should collect upon shipment
    delivery."""
    ANY='ANY'
    CASH='CASH'
    COMPANY_CHECK='COMPANY_CHECK'
    GUARANTEED_FUNDS='GUARANTEED_FUNDS'
    PERSONAL_CHECK='PERSONAL_CHECK'


class CodReturnReferenceIndicatorType(Enum):
    INVOICE='INVOICE'
    PO='PO'
    REFERENCE='REFERENCE'
    TRACKING='TRACKING'


class CommodityPurposeType(Enum):
    BUSINESS='BUSINESS'
    CONSUMER='CONSUMER'


class CompletedEtdType(Enum):
    ELECTRONIC_DOCUMENTS_ONLY='ELECTRONIC_DOCUMENTS_ONLY'
    ELECTRONIC_DOCUMENTS_WITH_ORIGINALS='ELECTRONIC_DOCUMENTS_WITH_ORIGINALS'


class CustomDeliveryWindowType(Enum):
    AFTER='AFTER'
    BEFORE='BEFORE'
    BETWEEN='BETWEEN'
    ON='ON'


class CustomLabelCoordinateUnits(Enum):
    MILS='MILS'
    PIXELS='PIXELS'


class CustomerImageUsageType(Enum):
    LETTER_HEAD='LETTER_HEAD'
    SIGNATURE='SIGNATURE'


class CustomerReferenceType(Enum):
    CUSTOMER_REFERENCE='CUSTOMER_REFERENCE'
    DEPARTMENT_NUMBER='DEPARTMENT_NUMBER'
    INTRACOUNTRY_REGULATORY_REFERENCE='INTRACOUNTRY_REGULATORY_REFERENCE'
    INVOICE_NUMBER='INVOICE_NUMBER'
    P_O_NUMBER='P_O_NUMBER'
    RMA_ASSOCIATION='RMA_ASSOCIATION'
    SHIPMENT_INTEGRITY='SHIPMENT_INTEGRITY'


class CustomerSpecifiedLabelGenerationOptionType(Enum):
    CONTENT_ON_SHIPPING_LABEL_ONLY='CONTENT_ON_SHIPPING_LABEL_ONLY'
    CONTENT_ON_SHIPPING_LABEL_PREFERRED='CONTENT_ON_SHIPPING_LABEL_PREFERRED'
    CONTENT_ON_SUPPLEMENTAL_LABEL_ONLY='CONTENT_ON_SUPPLEMENTAL_LABEL_ONLY'


class CustomsDeclarationStatementType(Enum):
    """This indicates the different statements, declarations, acts, and
    certifications that may apply to a shipment."""
    NAFTA_LOW_VALUE='NAFTA_LOW_VALUE'


class CustomsOptionType(Enum):
    COURTESY_RETURN_LABEL='COURTESY_RETURN_LABEL'
    EXHIBITION_TRADE_SHOW='EXHIBITION_TRADE_SHOW'
    FAULTY_ITEM='FAULTY_ITEM'
    FOLLOWING_REPAIR='FOLLOWING_REPAIR'
    FOR_REPAIR='FOR_REPAIR'
    ITEM_FOR_LOAN='ITEM_FOR_LOAN'
    OTHER='OTHER'
    REJECTED='REJECTED'
    REPLACEMENT='REPLACEMENT'
    TRIAL='TRIAL'


class CustomsRoleType(Enum):
    EXPORTER='EXPORTER'
    IMPORTER='IMPORTER'
    LEGAL_AGENT='LEGAL_AGENT'
    PRODUCER='PRODUCER'


class DangerousGoodsAccessibilityType(Enum):
    ACCESSIBLE='ACCESSIBLE'
    INACCESSIBLE='INACCESSIBLE'


class DangerousGoodsPackingOptionType(Enum):
    OVERPACK='OVERPACK'


class DayOfWeekType(Enum):
    FRI='FRI'
    MON='MON'
    SAT='SAT'
    SUN='SUN'
    THU='THU'
    TUE='TUE'
    WED='WED'


class DeletionControlType(Enum):
    """Specifies the type of deletion to be performed on a shipment."""
    DELETE_ALL_PACKAGES='DELETE_ALL_PACKAGES'
    DELETE_ENTIRE_CONSOLIDATION='DELETE_ENTIRE_CONSOLIDATION'
    DELETE_ONE_PACKAGE='DELETE_ONE_PACKAGE'
    LEGACY='LEGACY'


class DestinationControlStatementType(Enum):
    DEPARTMENT_OF_COMMERCE='DEPARTMENT_OF_COMMERCE'
    DEPARTMENT_OF_STATE='DEPARTMENT_OF_STATE'


class DocTabContentType(Enum):
    BARCODED='BARCODED'
    CUSTOM='CUSTOM'
    MINIMUM='MINIMUM'
    STANDARD='STANDARD'
    ZONE_001='ZONE001'


class DocTabZoneJustificationType(Enum):
    LEFT='LEFT'
    RIGHT='RIGHT'


class DocumentFormatOptionType(Enum):
    SUPPRESS_ADDITIONAL_LANGUAGES='SUPPRESS_ADDITIONAL_LANGUAGES'


class DropoffType(Enum):
    BUSINESS_SERVICE_CENTER='BUSINESS_SERVICE_CENTER'
    DROP_BOX='DROP_BOX'
    REGULAR_PICKUP='REGULAR_PICKUP'
    REQUEST_COURIER='REQUEST_COURIER'
    STATION='STATION'


class EMailNotificationRecipientType(Enum):
    BROKER='BROKER'
    OTHER='OTHER'
    RECIPIENT='RECIPIENT'
    SHIPPER='SHIPPER'
    THIRD_PARTY='THIRD_PARTY'


class EdtRequestType(Enum):
    """Specifies the types of Estimated Duties and Taxes to be included in a
    rate quotation for an international shipment."""
    ALL='ALL'
    NONE='NONE'


class EdtTaxType(Enum):
    ADDITIONAL_TAXES='ADDITIONAL_TAXES'
    CONSULAR_INVOICE_FEE='CONSULAR_INVOICE_FEE'
    CUSTOMS_SURCHARGES='CUSTOMS_SURCHARGES'
    DUTY='DUTY'
    EXCISE_TAX='EXCISE_TAX'
    FOREIGN_EXCHANGE_TAX='FOREIGN_EXCHANGE_TAX'
    GENERAL_SALES_TAX='GENERAL_SALES_TAX'
    IMPORT_LICENSE_FEE='IMPORT_LICENSE_FEE'
    INTERNAL_ADDITIONAL_TAXES='INTERNAL_ADDITIONAL_TAXES'
    INTERNAL_SENSITIVE_PRODUCTS_TAX='INTERNAL_SENSITIVE_PRODUCTS_TAX'
    OTHER='OTHER'
    SENSITIVE_PRODUCTS_TAX='SENSITIVE_PRODUCTS_TAX'
    STAMP_TAX='STAMP_TAX'
    STATISTICAL_TAX='STATISTICAL_TAX'
    TRANSPORT_FACILITIES_TAX='TRANSPORT_FACILITIES_TAX'


class EmailOptionType(Enum):
    SUPPRESS_ACCESS_EMAILS='SUPPRESS_ACCESS_EMAILS'
    SUPPRESS_ADDITIONAL_LANGUAGES='SUPPRESS_ADDITIONAL_LANGUAGES'


class EnterpriseDocumentType(Enum):
    """This identifies some of the document types recognized by Enterprise
    Document Management Service."""
    AIR_WAYBILL='AIR_WAYBILL'
    CERTIFICATE_OF_ORIGIN='CERTIFICATE_OF_ORIGIN'
    COMMERCIAL_INVOICE='COMMERCIAL_INVOICE'
    NAFTA_CERTIFICATE_OF_ORIGIN='NAFTA_CERTIFICATE_OF_ORIGIN'
    PRO_FORMA_INVOICE='PRO_FORMA_INVOICE'


class EtdAttributeType(Enum):
    POST_SHIPMENT_UPLOAD_REQUESTED='POST_SHIPMENT_UPLOAD_REQUESTED'


class FedExLocationType(Enum):
    """Identifies a kind of FedEx facility."""
    FEDEX_AUTHORIZED_SHIP_CENTER='FEDEX_AUTHORIZED_SHIP_CENTER'
    FEDEX_EXPRESS_STATION='FEDEX_EXPRESS_STATION'
    FEDEX_FACILITY='FEDEX_FACILITY'
    FEDEX_FREIGHT_SERVICE_CENTER='FEDEX_FREIGHT_SERVICE_CENTER'
    FEDEX_GROUND_TERMINAL='FEDEX_GROUND_TERMINAL'
    FEDEX_HOME_DELIVERY_STATION='FEDEX_HOME_DELIVERY_STATION'
    FEDEX_OFFICE='FEDEX_OFFICE'
    FEDEX_ONSITE='FEDEX_ONSITE'
    FEDEX_SELF_SERVICE_LOCATION='FEDEX_SELF_SERVICE_LOCATION'
    FEDEX_SHIPSITE='FEDEX_SHIPSITE'
    FEDEX_SHIP_AND_GET='FEDEX_SHIP_AND_GET'
    FEDEX_SMART_POST_HUB='FEDEX_SMART_POST_HUB'


class FreightBaseChargeCalculationType(Enum):
    """Specifies the way in which base charges for a Freight shipment or
    shipment leg are calculated."""
    BEYOND='BEYOND'
    LINE_ITEMS='LINE_ITEMS'
    UNIT_PRICING='UNIT_PRICING'


class FreightChargeBasisType(Enum):
    CWT='CWT'
    FLAT='FLAT'
    MINIMUM='MINIMUM'


class FreightClassType(Enum):
    """These values represent the industry-standard freight classes used for
    FedEx Freight and FedEx National Freight shipment description. (Note:
    The alphabetic prefixes are required to distinguish these values from
    decimal numbers on some client platforms.)"""
    CLASS__050='CLASS_050'
    CLASS__055='CLASS_055'
    CLASS__060='CLASS_060'
    CLASS__065='CLASS_065'
    CLASS__070='CLASS_070'
    CLASS__077__5='CLASS_077_5'
    CLASS__085='CLASS_085'
    CLASS__092__5='CLASS_092_5'
    CLASS__100='CLASS_100'
    CLASS__110='CLASS_110'
    CLASS__125='CLASS_125'
    CLASS__150='CLASS_150'
    CLASS__175='CLASS_175'
    CLASS__200='CLASS_200'
    CLASS__250='CLASS_250'
    CLASS__300='CLASS_300'
    CLASS__400='CLASS_400'
    CLASS__500='CLASS_500'


class FreightCollectTermsType(Enum):
    NON_RECOURSE_SHIPPER_SIGNED='NON_RECOURSE_SHIPPER_SIGNED'
    STANDARD='STANDARD'


class FreightGuaranteeType(Enum):
    GUARANTEED_DATE='GUARANTEED_DATE'
    GUARANTEED_MORNING='GUARANTEED_MORNING'


class FreightOnValueType(Enum):
    """Identifies responsibilities with respect to loss, damage, etc."""
    CARRIER_RISK='CARRIER_RISK'
    OWN_RISK='OWN_RISK'


class FreightRateQuoteType(Enum):
    """Specifies the type of rate quote"""
    AUTOMATED='AUTOMATED'
    MANUAL='MANUAL'


class FreightShipmentRoleType(Enum):
    """Indicates the role of the party submitting the transaction."""
    CONSIGNEE='CONSIGNEE'
    SHIPPER='SHIPPER'


class GroundDeliveryEligibilityType(Enum):
    """Represents features of FedEx Ground delivery for which the shipment is
    eligible."""
    ALTERNATE_DAY_SERVICE='ALTERNATE_DAY_SERVICE'
    CARTAGE_AGENT_DELIVERY='CARTAGE_AGENT_DELIVERY'
    SATURDAY_DELIVERY='SATURDAY_DELIVERY'
    USPS_DELIVERY='USPS_DELIVERY'


class HazardousCommodityAttributeType(Enum):
    NOT_SUBJECT_TO_REGULATIONS='NOT_SUBJECT_TO_REGULATIONS'
    PLACARDED_VEHICLE_REQUIRED='PLACARDED_VEHICLE_REQUIRED'


class HazardousCommodityDescriptionProcessingOptionType(Enum):
    """Specifies any special processing to be applied to the dangerous goods
    commodity description validation."""
    INCLUDE_SPECIAL_PROVISIONS='INCLUDE_SPECIAL_PROVISIONS'


class HazardousCommodityLabelTextOptionType(Enum):
    """Specifies how the commodity is to be labeled."""
    APPEND='APPEND'
    OVERRIDE='OVERRIDE'
    STANDARD='STANDARD'


class HazardousCommodityOptionType(Enum):
    """Indicates which kind of hazardous content is being reported."""
    BATTERY='BATTERY'
    HAZARDOUS_MATERIALS='HAZARDOUS_MATERIALS'
    LIMITED_QUANTITIES_COMMODITIES='LIMITED_QUANTITIES_COMMODITIES'
    ORM_D='ORM_D'
    REPORTABLE_QUANTITIES='REPORTABLE_QUANTITIES'
    SMALL_QUANTITY_EXCEPTION='SMALL_QUANTITY_EXCEPTION'


class HazardousCommodityPackingGroupType(Enum):
    """Identifies DOT packing group for a hazardous commodity."""
    DEFAULT='DEFAULT'
    I='I'
    II='II'
    III='III'


class HazardousCommodityQuantityType(Enum):
    """Specifies the measure of quantity to be validated against a prescribed
    limit."""
    GROSS='GROSS'
    NET='NET'


class HazardousCommodityRegulationType(Enum):
    """Identifies the source of regulation for hazardous commodity data."""
    ADR='ADR'
    DOT='DOT'
    IATA='IATA'
    ORMD='ORMD'


class HazardousContainerPackingType(Enum):
    ALL_PACKED_IN_ONE='ALL_PACKED_IN_ONE'


class HomeDeliveryPremiumType(Enum):
    APPOINTMENT='APPOINTMENT'
    DATE_CERTAIN='DATE_CERTAIN'
    EVENING='EVENING'


class ImageId(Enum):
    IMAGE__1='IMAGE_1'
    IMAGE__2='IMAGE_2'
    IMAGE__3='IMAGE_3'
    IMAGE__4='IMAGE_4'
    IMAGE__5='IMAGE_5'


class InternationalControlledExportType(Enum):
    DEA__036='DEA_036'
    DEA__236='DEA_236'
    DEA__486='DEA_486'
    DSP__05='DSP_05'
    DSP__61='DSP_61'
    DSP__73='DSP_73'
    DSP__85='DSP_85'
    DSP__94='DSP_94'
    DSP_LICENSE_AGREEMENT='DSP_LICENSE_AGREEMENT'
    FROM_FOREIGN_TRADE_ZONE='FROM_FOREIGN_TRADE_ZONE'
    WAREHOUSE_WITHDRAWAL='WAREHOUSE_WITHDRAWAL'


class InternationalDocumentContentType(Enum):
    DERIVED='DERIVED'
    DOCUMENTS_ONLY='DOCUMENTS_ONLY'
    NON_DOCUMENTS='NON_DOCUMENTS'


class LabelFormatType(Enum):
    COMMON_2_D='COMMON2D'
    LABEL_DATA_ONLY='LABEL_DATA_ONLY'


class LabelMaskableDataType(Enum):
    """Names for data elements / areas which may be suppressed from printing on
    labels."""
    CUSTOMS_VALUE='CUSTOMS_VALUE'
    DUTIES_AND_TAXES_PAYOR_ACCOUNT_NUMBER='DUTIES_AND_TAXES_PAYOR_ACCOUNT_NUMBER'
    SECONDARY_BARCODE='SECONDARY_BARCODE'
    SHIPPER_ACCOUNT_NUMBER='SHIPPER_ACCOUNT_NUMBER'
    TERMS_AND_CONDITIONS='TERMS_AND_CONDITIONS'
    TRANSPORTATION_CHARGES_PAYOR_ACCOUNT_NUMBER='TRANSPORTATION_CHARGES_PAYOR_ACCOUNT_NUMBER'


class LabelOrderType(Enum):
    """Specifies the order in which the labels will be returned"""
    SHIPPING_LABEL_FIRST='SHIPPING_LABEL_FIRST'
    SHIPPING_LABEL_LAST='SHIPPING_LABEL_LAST'


class LabelPrintingOrientationType(Enum):
    BOTTOM_EDGE_OF_TEXT_FIRST='BOTTOM_EDGE_OF_TEXT_FIRST'
    TOP_EDGE_OF_TEXT_FIRST='TOP_EDGE_OF_TEXT_FIRST'


class LabelRotationType(Enum):
    """Relative to normal orientation for the printer."""
    LEFT='LEFT'
    NONE='NONE'
    RIGHT='RIGHT'
    UPSIDE_DOWN='UPSIDE_DOWN'


class LabelStockType(Enum):
    PAPER__4_X_6='PAPER_4X6'
    PAPER__4_X_6_75='PAPER_4X6.75'
    PAPER__4_X_8='PAPER_4X8'
    PAPER__4_X_9='PAPER_4X9'
    PAPER__7_X_4_75='PAPER_7X4.75'
    PAPER__8_5_X_11_BOTTOM_HALF_LABEL='PAPER_8.5X11_BOTTOM_HALF_LABEL'
    PAPER__8_5_X_11_TOP_HALF_LABEL='PAPER_8.5X11_TOP_HALF_LABEL'
    PAPER_LETTER='PAPER_LETTER'
    STOCK__4_X_6='STOCK_4X6'
    STOCK__4_X_6_75='STOCK_4X6.75'
    STOCK__4_X_6_75_LEADING_DOC_TAB='STOCK_4X6.75_LEADING_DOC_TAB'
    STOCK__4_X_6_75_TRAILING_DOC_TAB='STOCK_4X6.75_TRAILING_DOC_TAB'
    STOCK__4_X_8='STOCK_4X8'
    STOCK__4_X_9='STOCK_4X9'
    STOCK__4_X_9_LEADING_DOC_TAB='STOCK_4X9_LEADING_DOC_TAB'
    STOCK__4_X_9_TRAILING_DOC_TAB='STOCK_4X9_TRAILING_DOC_TAB'


class LiabilityCoverageType(Enum):
    NEW='NEW'
    USED_OR_RECONDITIONED='USED_OR_RECONDITIONED'


class LinearUnits(Enum):
    CM='CM'
    IN='IN'


class MinimumChargeType(Enum):
    CUSTOMER='CUSTOMER'
    CUSTOMER_FREIGHT_WEIGHT='CUSTOMER_FREIGHT_WEIGHT'
    EARNED_DISCOUNT='EARNED_DISCOUNT'
    MIXED='MIXED'
    RATE_SCALE='RATE_SCALE'


class NaftaImporterSpecificationType(Enum):
    IMPORTER_OF_RECORD='IMPORTER_OF_RECORD'
    RECIPIENT='RECIPIENT'
    UNKNOWN='UNKNOWN'
    VARIOUS='VARIOUS'


class NaftaNetCostMethodCode(Enum):
    NC='NC'
    NO='NO'


class NaftaPreferenceCriterionCode(Enum):
    """See instructions for NAFTA Certificate of Origin for code
    definitions."""
    A='A'
    B='B'
    C='C'
    D='D'
    E='E'
    F='F'


class NaftaProducerDeterminationCode(Enum):
    """See instructions for NAFTA Certificate of Origin for code
    definitions."""
    NO__1='NO_1'
    NO__2='NO_2'
    NO__3='NO_3'
    YES='YES'


class NaftaProducerSpecificationType(Enum):
    AVAILABLE_UPON_REQUEST='AVAILABLE_UPON_REQUEST'
    MULTIPLE_SPECIFIED='MULTIPLE_SPECIFIED'
    SAME='SAME'
    SINGLE_SPECIFIED='SINGLE_SPECIFIED'
    UNKNOWN='UNKNOWN'


class NetExplosiveClassificationType(Enum):
    NET_EXPLOSIVE_CONTENT='NET_EXPLOSIVE_CONTENT'
    NET_EXPLOSIVE_MASS='NET_EXPLOSIVE_MASS'
    NET_EXPLOSIVE_QUANTITY='NET_EXPLOSIVE_QUANTITY'
    NET_EXPLOSIVE_WEIGHT='NET_EXPLOSIVE_WEIGHT'


class NotificationEventType(Enum):
    ON_DELIVERY='ON_DELIVERY'
    ON_ESTIMATED_DELIVERY='ON_ESTIMATED_DELIVERY'
    ON_EXCEPTION='ON_EXCEPTION'
    ON_PICKUP_DRIVER_ARRIVED='ON_PICKUP_DRIVER_ARRIVED'
    ON_PICKUP_DRIVER_ASSIGNED='ON_PICKUP_DRIVER_ASSIGNED'
    ON_PICKUP_DRIVER_DEPARTED='ON_PICKUP_DRIVER_DEPARTED'
    ON_PICKUP_DRIVER_EN_ROUTE='ON_PICKUP_DRIVER_EN_ROUTE'
    ON_SHIPMENT='ON_SHIPMENT'
    ON_TENDER='ON_TENDER'


class NotificationFormatType(Enum):
    HTML='HTML'
    TEXT='TEXT'


class NotificationSeverityType(Enum):
    ERROR='ERROR'
    FAILURE='FAILURE'
    NOTE='NOTE'
    SUCCESS='SUCCESS'
    WARNING='WARNING'


class NotificationType(Enum):
    EMAIL='EMAIL'


class OversizeClassType(Enum):
    OVERSIZE__1='OVERSIZE_1'
    OVERSIZE__2='OVERSIZE_2'
    OVERSIZE__3='OVERSIZE_3'


class PageQuadrantType(Enum):
    BOTTOM_LEFT='BOTTOM_LEFT'
    BOTTOM_RIGHT='BOTTOM_RIGHT'
    TOP_LEFT='TOP_LEFT'
    TOP_RIGHT='TOP_RIGHT'


class PaymentType(Enum):
    ACCOUNT='ACCOUNT'
    COLLECT='COLLECT'
    RECIPIENT='RECIPIENT'
    SENDER='SENDER'
    THIRD_PARTY='THIRD_PARTY'


class PendingShipmentProcessingOptionType(Enum):
    ALLOW_MODIFICATIONS='ALLOW_MODIFICATIONS'


class PendingShipmentType(Enum):
    EMAIL='EMAIL'


class PhysicalFormType(Enum):
    GAS='GAS'
    LIQUID='LIQUID'
    SOLID='SOLID'
    SPECIAL='SPECIAL'


class PhysicalPackagingType(Enum):
    """This enumeration rationalizes the former FedEx Express international
    "admissibility package" types (based on ANSI X.12) and the FedEx
    Freight packaging types. The values represented are those common to
    both carriers."""
    BAG='BAG'
    BARREL='BARREL'
    BASKET='BASKET'
    BOX='BOX'
    BUCKET='BUCKET'
    BUNDLE='BUNDLE'
    CARTON='CARTON'
    CASE='CASE'
    CONTAINER='CONTAINER'
    CRATE='CRATE'
    CYLINDER='CYLINDER'
    DRUM='DRUM'
    ENVELOPE='ENVELOPE'
    HAMPER='HAMPER'
    OTHER='OTHER'
    PAIL='PAIL'
    PALLET='PALLET'
    PIECE='PIECE'
    REEL='REEL'
    ROLL='ROLL'
    SKID='SKID'
    TANK='TANK'
    TUBE='TUBE'


class PickupRequestSourceType(Enum):
    AUTOMATION='AUTOMATION'
    CUSTOMER_SERVICE='CUSTOMER_SERVICE'


class PickupRequestType(Enum):
    FUTURE_DAY='FUTURE_DAY'
    SAME_DAY='SAME_DAY'


class PricingCodeType(Enum):
    ACTUAL='ACTUAL'
    ALTERNATE='ALTERNATE'
    BASE='BASE'
    HUNDREDWEIGHT='HUNDREDWEIGHT'
    HUNDREDWEIGHT_ALTERNATE='HUNDREDWEIGHT_ALTERNATE'
    INTERNATIONAL_DISTRIBUTION='INTERNATIONAL_DISTRIBUTION'
    INTERNATIONAL_ECONOMY_SERVICE='INTERNATIONAL_ECONOMY_SERVICE'
    LTL_FREIGHT='LTL_FREIGHT'
    PACKAGE='PACKAGE'
    SHIPMENT='SHIPMENT'
    SHIPMENT_FIVE_POUND_OPTIONAL='SHIPMENT_FIVE_POUND_OPTIONAL'
    SHIPMENT_OPTIONAL='SHIPMENT_OPTIONAL'
    SPECIAL='SPECIAL'


class PrintedReferenceType(Enum):
    """Identifies a particular reference identifier printed on a Freight bill
    of lading."""
    BILL_OF_LADING='BILL_OF_LADING'
    CONSIGNEE_ID_NUMBER='CONSIGNEE_ID_NUMBER'
    SHIPPER_ID_NUMBER='SHIPPER_ID_NUMBER'


class PriorityAlertEnhancementType(Enum):
    PRIORITY_ALERT_PLUS='PRIORITY_ALERT_PLUS'


class ProhibitionType(Enum):
    COMMODITY='COMMODITY'
    COUNTRY='COUNTRY'
    DOCUMENT='DOCUMENT'
    SHIPMENT='SHIPMENT'


class PurposeOfShipmentType(Enum):
    GIFT='GIFT'
    NOT_SOLD='NOT_SOLD'
    PERSONAL_EFFECTS='PERSONAL_EFFECTS'
    REPAIR_AND_RETURN='REPAIR_AND_RETURN'
    SAMPLE='SAMPLE'
    SOLD='SOLD'


class RadioactiveContainerClassType(Enum):
    """Indicates the packaging type of the container used to package
    radioactive hazardous materials."""
    EXCEPTED_PACKAGE='EXCEPTED_PACKAGE'
    INDUSTRIAL_IP_1='INDUSTRIAL_IP1'
    INDUSTRIAL_IP_2='INDUSTRIAL_IP2'
    INDUSTRIAL_IP_3='INDUSTRIAL_IP3'
    TYPE_A='TYPE_A'
    TYPE_B_M='TYPE_B_M'
    TYPE_B_U='TYPE_B_U'
    TYPE_C='TYPE_C'


class RadioactiveLabelType(Enum):
    III_YELLOW='III_YELLOW'
    II_YELLOW='II_YELLOW'
    I_WHITE='I_WHITE'


class RadioactivityUnitOfMeasure(Enum):
    BQ='BQ'
    GBQ='GBQ'
    KBQ='KBQ'
    MBQ='MBQ'
    PBQ='PBQ'
    TBQ='TBQ'


class RateDimensionalDivisorType(Enum):
    """Indicates the reason that a dim divisor value was chose."""
    COUNTRY='COUNTRY'
    CUSTOMER='CUSTOMER'
    OTHER='OTHER'
    PRODUCT='PRODUCT'
    WAIVED='WAIVED'


class RateDiscountType(Enum):
    BONUS='BONUS'
    COUPON='COUPON'
    EARNED='EARNED'
    INCENTIVE='INCENTIVE'
    OTHER='OTHER'
    VOLUME='VOLUME'


class RateElementBasisType(Enum):
    """Selects the value from a set of rate data to which the percentage is
    applied."""
    BASE_CHARGE='BASE_CHARGE'
    NET_CHARGE='NET_CHARGE'
    NET_CHARGE_EXCLUDING_TAXES='NET_CHARGE_EXCLUDING_TAXES'
    NET_FREIGHT='NET_FREIGHT'


class RateRequestType(Enum):
    LIST='LIST'
    NONE='NONE'
    PREFERRED='PREFERRED'


class RateTypeBasisType(Enum):
    """Select the type of rate from which the element is to be selected."""
    ACCOUNT='ACCOUNT'
    LIST='LIST'


class RatedWeightMethod(Enum):
    ACTUAL='ACTUAL'
    AVERAGE_PACKAGE_WEIGHT_MINIMUM='AVERAGE_PACKAGE_WEIGHT_MINIMUM'
    BALLOON='BALLOON'
    DEFAULT_WEIGHT_APPLIED='DEFAULT_WEIGHT_APPLIED'
    DIM='DIM'
    FREIGHT_MINIMUM='FREIGHT_MINIMUM'
    MIXED='MIXED'
    OVERSIZE='OVERSIZE'
    OVERSIZE__1='OVERSIZE_1'
    OVERSIZE__2='OVERSIZE_2'
    OVERSIZE__3='OVERSIZE_3'
    PACKAGING_MINIMUM='PACKAGING_MINIMUM'
    WEIGHT_BREAK='WEIGHT_BREAK'


class RebateType(Enum):
    BONUS='BONUS'
    EARNED='EARNED'
    OTHER='OTHER'


class RecipientCustomsIdType(Enum):
    COMPANY='COMPANY'
    INDIVIDUAL='INDIVIDUAL'
    PASSPORT='PASSPORT'


class RecommendedDocumentType(Enum):
    """Type of documents that are recommended to be included with the
    shipment."""
    ANTIQUE_STATEMENT_EUROPEAN_UNION='ANTIQUE_STATEMENT_EUROPEAN_UNION'
    ANTIQUE_STATEMENT_UNITED_STATES='ANTIQUE_STATEMENT_UNITED_STATES'
    ASSEMBLER_DECLARATION='ASSEMBLER_DECLARATION'
    BEARING_WORKSHEET='BEARING_WORKSHEET'
    CERTIFICATE_OF_SHIPMENTS_TO_SYRIA='CERTIFICATE_OF_SHIPMENTS_TO_SYRIA'
    COMMERCIAL_INVOICE_FOR_THE_CARIBBEAN_COMMON_MARKET='COMMERCIAL_INVOICE_FOR_THE_CARIBBEAN_COMMON_MARKET'
    CONIFEROUS_SOLID_WOOD_PACKAGING_MATERIAL_TO_THE_PEOPLES_REPUBLIC_OF_CHINA='CONIFEROUS_SOLID_WOOD_PACKAGING_MATERIAL_TO_THE_PEOPLES_REPUBLIC_OF_CHINA'
    DECLARATION_FOR_FREE_ENTRY_OF_RETURNED_AMERICAN_PRODUCTS='DECLARATION_FOR_FREE_ENTRY_OF_RETURNED_AMERICAN_PRODUCTS'
    DECLARATION_OF_BIOLOGICAL_STANDARDS='DECLARATION_OF_BIOLOGICAL_STANDARDS'
    DECLARATION_OF_IMPORTED_ELECTRONIC_PRODUCTS_SUBJECT_TO_RADIATION_CONTROL_STANDARD='DECLARATION_OF_IMPORTED_ELECTRONIC_PRODUCTS_SUBJECT_TO_RADIATION_CONTROL_STANDARD'
    ELECTRONIC_INTEGRATED_CIRCUIT_WORKSHEET='ELECTRONIC_INTEGRATED_CIRCUIT_WORKSHEET'
    FILM_AND_VIDEO_CERTIFICATE='FILM_AND_VIDEO_CERTIFICATE'
    INTERIM_FOOTWEAR_INVOICE='INTERIM_FOOTWEAR_INVOICE'
    NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_ENGLISH='NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_ENGLISH'
    NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_FRENCH='NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_FRENCH'
    NAFTA_CERTIFICATE_OF_ORIGIN_SPANISH='NAFTA_CERTIFICATE_OF_ORIGIN_SPANISH'
    NAFTA_CERTIFICATE_OF_ORIGIN_UNITED_STATES='NAFTA_CERTIFICATE_OF_ORIGIN_UNITED_STATES'
    PACKING_LIST='PACKING_LIST'
    PRINTED_CIRCUIT_BOARD_WORKSHEET='PRINTED_CIRCUIT_BOARD_WORKSHEET'
    REPAIRED_WATCH_BREAKOUT_WORKSHEET='REPAIRED_WATCH_BREAKOUT_WORKSHEET'
    STATEMENT_REGARDING_THE_IMPORT_OF_RADIO_FREQUENCY_DEVICES='STATEMENT_REGARDING_THE_IMPORT_OF_RADIO_FREQUENCY_DEVICES'
    TOXIC_SUBSTANCES_CONTROL_ACT='TOXIC_SUBSTANCES_CONTROL_ACT'
    UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_NON_TEXTILES='UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_NON_TEXTILES'
    UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_TEXTILES='UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_TEXTILES'
    UNITED_STATES_NEW_WATCH_WORKSHEET='UNITED_STATES_NEW_WATCH_WORKSHEET'
    UNITED_STATES_WATCH_REPAIR_DECLARATION='UNITED_STATES_WATCH_REPAIR_DECLARATION'


class RegulatoryControlType(Enum):
    FOOD_OR_PERISHABLE='FOOD_OR_PERISHABLE'
    NAFTA='NAFTA'
    NOT_APPLICABLE_FOR_LOW_CUSTOMS_VALUE_EXCEPTION='NOT_APPLICABLE_FOR_LOW_CUSTOMS_VALUE_EXCEPTION'
    NOT_IN_FREE_CIRCULATION='NOT_IN_FREE_CIRCULATION'


class RegulatoryLabelType(Enum):
    ALCOHOL_SHIPMENT_LABEL='ALCOHOL_SHIPMENT_LABEL'


class RelativeVerticalPositionType(Enum):
    """Describes the vertical position of an item relative to another item."""
    ABOVE='ABOVE'
    BELOW='BELOW'


class RequestedShippingDocumentType(Enum):
    CERTIFICATE_OF_ORIGIN='CERTIFICATE_OF_ORIGIN'
    COMMERCIAL_INVOICE='COMMERCIAL_INVOICE'
    CUSTOMER_SPECIFIED_LABELS='CUSTOMER_SPECIFIED_LABELS'
    CUSTOM_PACKAGE_DOCUMENT='CUSTOM_PACKAGE_DOCUMENT'
    CUSTOM_SHIPMENT_DOCUMENT='CUSTOM_SHIPMENT_DOCUMENT'
    DANGEROUS_GOODS_SHIPPERS_DECLARATION='DANGEROUS_GOODS_SHIPPERS_DECLARATION'
    EXPORT_DECLARATION='EXPORT_DECLARATION'
    FEDEX_FREIGHT_STRAIGHT_BILL_OF_LADING='FEDEX_FREIGHT_STRAIGHT_BILL_OF_LADING'
    GENERAL_AGENCY_AGREEMENT='GENERAL_AGENCY_AGREEMENT'
    LABEL='LABEL'
    NAFTA_CERTIFICATE_OF_ORIGIN='NAFTA_CERTIFICATE_OF_ORIGIN'
    OP__900='OP_900'
    PRO_FORMA_INVOICE='PRO_FORMA_INVOICE'
    RETURN_INSTRUCTIONS='RETURN_INSTRUCTIONS'
    VICS_BILL_OF_LADING='VICS_BILL_OF_LADING'


class RequiredDocumentType(Enum):
    """This identifies the document types that can be required. This can also
    indicate when either a COMMERCIAL_INVOICE or a PRO_FORMA_INVOICE is
    required through the COMMERCIAL_OR_PRO_FORMA_INVOICE option."""
    AIR_WAYBILL='AIR_WAYBILL'
    CERTIFICATE_OF_ORIGIN='CERTIFICATE_OF_ORIGIN'
    COMMERCIAL_INVOICE='COMMERCIAL_INVOICE'
    COMMERCIAL_OR_PRO_FORMA_INVOICE='COMMERCIAL_OR_PRO_FORMA_INVOICE'
    NAFTA_CERTIFICATE_OF_ORIGIN='NAFTA_CERTIFICATE_OF_ORIGIN'
    PRO_FORMA_INVOICE='PRO_FORMA_INVOICE'


class RequirementType(Enum):
    OPTIONAL='OPTIONAL'
    PROHIBITED='PROHIBITED'
    REQUIRED='REQUIRED'


class ReturnEMailAllowedSpecialServiceType(Enum):
    """These values are used to control the availability of certain special
    services at the time when a customer uses the e-mail label link to
    create a return shipment."""
    SATURDAY_DELIVERY='SATURDAY_DELIVERY'
    SATURDAY_PICKUP='SATURDAY_PICKUP'


class ReturnType(Enum):
    FEDEX_TAG='FEDEX_TAG'
    PENDING='PENDING'
    PRINT_RETURN_LABEL='PRINT_RETURN_LABEL'


class ReturnedRateType(Enum):
    """The "PAYOR..." rates are expressed in the currency identified in the
    payor's rate table(s). The "RATED..." rates are expressed in the
    currency of the origin country. Former "...COUNTER..." values have
    become "...RETAIL..." values, except for PAYOR_COUNTER and
    RATED_COUNTER, which have been removed."""
    INCENTIVE='INCENTIVE'
    NEGOTIATED='NEGOTIATED'
    PAYOR_ACCOUNT_PACKAGE='PAYOR_ACCOUNT_PACKAGE'
    PAYOR_ACCOUNT_SHIPMENT='PAYOR_ACCOUNT_SHIPMENT'
    PAYOR_LIST_PACKAGE='PAYOR_LIST_PACKAGE'
    PAYOR_LIST_SHIPMENT='PAYOR_LIST_SHIPMENT'
    PREFERRED_ACCOUNT_PACKAGE='PREFERRED_ACCOUNT_PACKAGE'
    PREFERRED_ACCOUNT_SHIPMENT='PREFERRED_ACCOUNT_SHIPMENT'
    PREFERRED_LIST_PACKAGE='PREFERRED_LIST_PACKAGE'
    PREFERRED_LIST_SHIPMENT='PREFERRED_LIST_SHIPMENT'
    PREFERRED_NEGOTIATED='PREFERRED_NEGOTIATED'


class ReturnedShippingDocumentType(Enum):
    AUXILIARY_LABEL='AUXILIARY_LABEL'
    CERTIFICATE_OF_ORIGIN='CERTIFICATE_OF_ORIGIN'
    COD_AND_DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN__2_D_BARCODE='COD_AND_DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN_2_D_BARCODE'
    COD_AND_DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN_LABEL='COD_AND_DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN_LABEL'
    COD_RETURN__2_D_BARCODE='COD_RETURN_2_D_BARCODE'
    COD_RETURN_LABEL='COD_RETURN_LABEL'
    COMMERCIAL_INVOICE='COMMERCIAL_INVOICE'
    CUSTOM_PACKAGE_DOCUMENT='CUSTOM_PACKAGE_DOCUMENT'
    CUSTOM_SHIPMENT_DOCUMENT='CUSTOM_SHIPMENT_DOCUMENT'
    DANGEROUS_GOODS_SHIPPERS_DECLARATION='DANGEROUS_GOODS_SHIPPERS_DECLARATION'
    DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN__2_D_BARCODE='DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN_2_D_BARCODE'
    DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN_LABEL='DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN_LABEL'
    ETD_LABEL='ETD_LABEL'
    EXPORT_DECLARATION='EXPORT_DECLARATION'
    FEDEX_FREIGHT_STRAIGHT_BILL_OF_LADING='FEDEX_FREIGHT_STRAIGHT_BILL_OF_LADING'
    FREIGHT_ADDRESS_LABEL='FREIGHT_ADDRESS_LABEL'
    GENERAL_AGENCY_AGREEMENT='GENERAL_AGENCY_AGREEMENT'
    GROUND_BARCODE='GROUND_BARCODE'
    NAFTA_CERTIFICATE_OF_ORIGIN='NAFTA_CERTIFICATE_OF_ORIGIN'
    OP__900='OP_900'
    OUTBOUND__2_D_BARCODE='OUTBOUND_2_D_BARCODE'
    OUTBOUND_LABEL='OUTBOUND_LABEL'
    PRO_FORMA_INVOICE='PRO_FORMA_INVOICE'
    RECIPIENT_ADDRESS_BARCODE='RECIPIENT_ADDRESS_BARCODE'
    RECIPIENT_POSTAL_BARCODE='RECIPIENT_POSTAL_BARCODE'
    RETURN_INSTRUCTIONS='RETURN_INSTRUCTIONS'
    TERMS_AND_CONDITIONS='TERMS_AND_CONDITIONS'
    USPS_BARCODE='USPS_BARCODE'
    VICS_BILL_OF_LADING='VICS_BILL_OF_LADING'


class RotationType(Enum):
    """Describes the rotation of an item from its default orientation."""
    LEFT='LEFT'
    NONE='NONE'
    RIGHT='RIGHT'
    UPSIDE_DOWN='UPSIDE_DOWN'


class SecondaryBarcodeType(Enum):
    COMMON__2_D='COMMON_2D'
    NONE='NONE'
    SSCC__18='SSCC_18'
    USPS='USPS'


class ShipmentDryIceProcessingOptionType(Enum):
    SHIPMENT_LEVEL_DRY_ICE_ONLY='SHIPMENT_LEVEL_DRY_ICE_ONLY'


class ShipmentNotificationAggregationType(Enum):
    PER_PACKAGE='PER_PACKAGE'
    PER_SHIPMENT='PER_SHIPMENT'


class ShipmentNotificationRoleType(Enum):
    BROKER='BROKER'
    OTHER='OTHER'
    RECIPIENT='RECIPIENT'
    SHIPPER='SHIPPER'
    THIRD_PARTY='THIRD_PARTY'


class ShipmentRuleType(Enum):
    EXPORT='EXPORT'
    GENERAL='GENERAL'
    IMPORT='IMPORT'


class ShippingDocumentDispositionType(Enum):
    """Specifies how to return a shipping document to the caller."""
    DEFERRED_STORED='DEFERRED_STORED'
    EMAILED='EMAILED'
    QUEUED='QUEUED'
    RETURNED='RETURNED'
    STORED='STORED'


class ShippingDocumentEMailGroupingType(Enum):
    BY_RECIPIENT='BY_RECIPIENT'
    NONE='NONE'


class ShippingDocumentGroupingType(Enum):
    """Specifies how to organize all shipping documents of the same type."""
    CONSOLIDATED_BY_DOCUMENT_TYPE='CONSOLIDATED_BY_DOCUMENT_TYPE'
    INDIVIDUAL='INDIVIDUAL'


class ShippingDocumentImageType(Enum):
    """Specifies the image format used for a shipping document."""
    DOC='DOC'
    EPL_2='EPL2'
    PDF='PDF'
    PNG='PNG'
    RTF='RTF'
    TEXT='TEXT'
    ZPLII='ZPLII'


class ShippingDocumentNamingType(Enum):
    """Identifies the convention by which file names are constructed for STORED
    or DEFERRED documents."""
    FAST='FAST'
    LEGACY_FXRS='LEGACY_FXRS'


class ShippingDocumentStockType(Enum):
    """Specifies the type of paper (stock) on which a document will be
    printed."""
    OP__900_LG_B='OP_900_LG_B'
    OP__900_LL_B='OP_900_LL_B'
    OP__950='OP_950'
    PAPER__4_X_6='PAPER_4X6'
    PAPER__4_PER_PAGE_PORTRAIT='PAPER_4_PER_PAGE_PORTRAIT'
    PAPER_LETTER='PAPER_LETTER'
    STOCK__4_X_6='STOCK_4X6'
    STOCK__4_X_6_75_LEADING_DOC_TAB='STOCK_4X6.75_LEADING_DOC_TAB'
    STOCK__4_X_6_75_TRAILING_DOC_TAB='STOCK_4X6.75_TRAILING_DOC_TAB'
    STOCK__4_X_8='STOCK_4X8'
    STOCK__4_X_9_LEADING_DOC_TAB='STOCK_4X9_LEADING_DOC_TAB'
    STOCK__4_X_9_TRAILING_DOC_TAB='STOCK_4X9_TRAILING_DOC_TAB'


class ShippingDocumentStorageDetailType(Enum):
    ASYNC_SERVICE='ASYNC_SERVICE'
    LOCAL_FILE_SYSTEM='LOCAL_FILE_SYSTEM'


class SignatureOptionType(Enum):
    ADULT='ADULT'
    DIRECT='DIRECT'
    INDIRECT='INDIRECT'
    NO_SIGNATURE_REQUIRED='NO_SIGNATURE_REQUIRED'
    SERVICE_DEFAULT='SERVICE_DEFAULT'


class SmartPostAncillaryEndorsementType(Enum):
    """These values are mutually exclusive; at most one of them can be attached
    to a SmartPost shipment."""
    ADDRESS_CORRECTION='ADDRESS_CORRECTION'
    CARRIER_LEAVE_IF_NO_RESPONSE='CARRIER_LEAVE_IF_NO_RESPONSE'
    CHANGE_SERVICE='CHANGE_SERVICE'
    FORWARDING_SERVICE='FORWARDING_SERVICE'
    RETURN_SERVICE='RETURN_SERVICE'


class SmartPostIndiciaType(Enum):
    MEDIA_MAIL='MEDIA_MAIL'
    PARCEL_RETURN='PARCEL_RETURN'
    PARCEL_SELECT='PARCEL_SELECT'
    PRESORTED_BOUND_PRINTED_MATTER='PRESORTED_BOUND_PRINTED_MATTER'
    PRESORTED_STANDARD='PRESORTED_STANDARD'


class SmartPostShipmentProcessingOptionType(Enum):
    GROUND_TRACKING_NUMBER_REQUESTED='GROUND_TRACKING_NUMBER_REQUESTED'


class SpecialRatingAppliedType(Enum):
    FEDEX_ONE_RATE='FEDEX_ONE_RATE'
    FIXED_FUEL_SURCHARGE='FIXED_FUEL_SURCHARGE'
    IMPORT_PRICING='IMPORT_PRICING'


class StringBarcodeType(Enum):
    ADDRESS='ADDRESS'
    ASTRA='ASTRA'
    FEDEX__1_D='FEDEX_1D'
    GROUND='GROUND'
    POSTAL='POSTAL'
    USPS='USPS'


class SurchargeLevelType(Enum):
    PACKAGE='PACKAGE'
    SHIPMENT='SHIPMENT'


class SurchargeType(Enum):
    ACCOUNT_NUMBER_PROCESSING_FEE='ACCOUNT_NUMBER_PROCESSING_FEE'
    ADDITIONAL_HANDLING='ADDITIONAL_HANDLING'
    ADDRESS_CORRECTION='ADDRESS_CORRECTION'
    ANCILLARY_FEE='ANCILLARY_FEE'
    APPOINTMENT_DELIVERY='APPOINTMENT_DELIVERY'
    BROKER_SELECT_OPTION='BROKER_SELECT_OPTION'
    CANADIAN_DESTINATION='CANADIAN_DESTINATION'
    CLEARANCE_ENTRY_FEE='CLEARANCE_ENTRY_FEE'
    COD='COD'
    CUT_FLOWERS='CUT_FLOWERS'
    DANGEROUS_GOODS='DANGEROUS_GOODS'
    DELIVERY_AREA='DELIVERY_AREA'
    DELIVERY_CONFIRMATION='DELIVERY_CONFIRMATION'
    DELIVERY_ON_INVOICE_ACCEPTANCE='DELIVERY_ON_INVOICE_ACCEPTANCE'
    DOCUMENTATION_FEE='DOCUMENTATION_FEE'
    DRY_ICE='DRY_ICE'
    EMAIL_LABEL='EMAIL_LABEL'
    EUROPE_FIRST='EUROPE_FIRST'
    EXCESS_VALUE='EXCESS_VALUE'
    EXHIBITION='EXHIBITION'
    EXPORT='EXPORT'
    EXTRA_SURFACE_HANDLING_CHARGE='EXTRA_SURFACE_HANDLING_CHARGE'
    EXTREME_LENGTH='EXTREME_LENGTH'
    FEDEX_INTRACOUNTRY_FEES='FEDEX_INTRACOUNTRY_FEES'
    FEDEX_TAG='FEDEX_TAG'
    FICE='FICE'
    FLATBED='FLATBED'
    FREIGHT_GUARANTEE='FREIGHT_GUARANTEE'
    FREIGHT_ON_VALUE='FREIGHT_ON_VALUE'
    FREIGHT_TO_COLLECT='FREIGHT_TO_COLLECT'
    FUEL='FUEL'
    HOLD_AT_LOCATION='HOLD_AT_LOCATION'
    HOME_DELIVERY_APPOINTMENT='HOME_DELIVERY_APPOINTMENT'
    HOME_DELIVERY_DATE_CERTAIN='HOME_DELIVERY_DATE_CERTAIN'
    HOME_DELIVERY_EVENING='HOME_DELIVERY_EVENING'
    INSIDE_DELIVERY='INSIDE_DELIVERY'
    INSIDE_PICKUP='INSIDE_PICKUP'
    INSURED_VALUE='INSURED_VALUE'
    INTERHAWAII='INTERHAWAII'
    LIFTGATE_DELIVERY='LIFTGATE_DELIVERY'
    LIFTGATE_PICKUP='LIFTGATE_PICKUP'
    LIMITED_ACCESS_DELIVERY='LIMITED_ACCESS_DELIVERY'
    LIMITED_ACCESS_PICKUP='LIMITED_ACCESS_PICKUP'
    METRO_DELIVERY='METRO_DELIVERY'
    METRO_PICKUP='METRO_PICKUP'
    NON_MACHINABLE='NON_MACHINABLE'
    OFFSHORE='OFFSHORE'
    ON_CALL_PICKUP='ON_CALL_PICKUP'
    ON_DEMAND_CARE='ON_DEMAND_CARE'
    OTHER='OTHER'
    OUT_OF_DELIVERY_AREA='OUT_OF_DELIVERY_AREA'
    OUT_OF_PICKUP_AREA='OUT_OF_PICKUP_AREA'
    OVERSIZE='OVERSIZE'
    OVER_DIMENSION='OVER_DIMENSION'
    OVER_LENGTH='OVER_LENGTH'
    PEAK='PEAK'
    PEAK_ADDITIONAL_HANDLING='PEAK_ADDITIONAL_HANDLING'
    PEAK_OVERSIZE='PEAK_OVERSIZE'
    PEAK_RESIDENTIAL_DELIVERY='PEAK_RESIDENTIAL_DELIVERY'
    PIECE_COUNT_VERIFICATION='PIECE_COUNT_VERIFICATION'
    PRE_DELIVERY_NOTIFICATION='PRE_DELIVERY_NOTIFICATION'
    PRIORITY_ALERT='PRIORITY_ALERT'
    PROTECTION_FROM_FREEZING='PROTECTION_FROM_FREEZING'
    REGIONAL_MALL_DELIVERY='REGIONAL_MALL_DELIVERY'
    REGIONAL_MALL_PICKUP='REGIONAL_MALL_PICKUP'
    REROUTE='REROUTE'
    RESCHEDULE='RESCHEDULE'
    RESIDENTIAL_DELIVERY='RESIDENTIAL_DELIVERY'
    RESIDENTIAL_PICKUP='RESIDENTIAL_PICKUP'
    RETURN_LABEL='RETURN_LABEL'
    SATURDAY_DELIVERY='SATURDAY_DELIVERY'
    SATURDAY_PICKUP='SATURDAY_PICKUP'
    SIGNATURE_OPTION='SIGNATURE_OPTION'
    TARP='TARP'
    THIRD_PARTY_CONSIGNEE='THIRD_PARTY_CONSIGNEE'
    TRANSMART_SERVICE_FEE='TRANSMART_SERVICE_FEE'


class TaxType(Enum):
    EXPORT='EXPORT'
    GST='GST'
    HST='HST'
    INTRACOUNTRY='INTRACOUNTRY'
    OTHER='OTHER'
    PST='PST'
    VAT='VAT'


class TaxesOrMiscellaneousChargeType(Enum):
    """Specifice the kind of tax or miscellaneous charge being reported on a
    Commercial Invoice."""
    COMMISSIONS='COMMISSIONS'
    DISCOUNTS='DISCOUNTS'
    HANDLING_FEES='HANDLING_FEES'
    OTHER='OTHER'
    ROYALTIES_AND_LICENSE_FEES='ROYALTIES_AND_LICENSE_FEES'
    TAXES='TAXES'


class TinType(Enum):
    BUSINESS_NATIONAL='BUSINESS_NATIONAL'
    BUSINESS_STATE='BUSINESS_STATE'
    BUSINESS_UNION='BUSINESS_UNION'
    PERSONAL_NATIONAL='PERSONAL_NATIONAL'
    PERSONAL_STATE='PERSONAL_STATE'


class TrackingIdType(Enum):
    EXPRESS='EXPRESS'
    FEDEX='FEDEX'
    FREIGHT='FREIGHT'
    GROUND='GROUND'
    USPS='USPS'


class TransitTimeType(Enum):
    EIGHTEEN_DAYS='EIGHTEEN_DAYS'
    EIGHT_DAYS='EIGHT_DAYS'
    ELEVEN_DAYS='ELEVEN_DAYS'
    FIFTEEN_DAYS='FIFTEEN_DAYS'
    FIVE_DAYS='FIVE_DAYS'
    FOURTEEN_DAYS='FOURTEEN_DAYS'
    FOUR_DAYS='FOUR_DAYS'
    NINETEEN_DAYS='NINETEEN_DAYS'
    NINE_DAYS='NINE_DAYS'
    ONE_DAY='ONE_DAY'
    SEVENTEEN_DAYS='SEVENTEEN_DAYS'
    SEVEN_DAYS='SEVEN_DAYS'
    SIXTEEN_DAYS='SIXTEEN_DAYS'
    SIX_DAYS='SIX_DAYS'
    TEN_DAYS='TEN_DAYS'
    THIRTEEN_DAYS='THIRTEEN_DAYS'
    THREE_DAYS='THREE_DAYS'
    TWELVE_DAYS='TWELVE_DAYS'
    TWENTY_DAYS='TWENTY_DAYS'
    TWO_DAYS='TWO_DAYS'
    UNKNOWN='UNKNOWN'


class UploadDocumentIdProducer(Enum):
    """Specifies the application that is responsible for managing the document
    id."""
    CUSTOMER='CUSTOMER'


class UploadDocumentProducerType(Enum):
    CUSTOMER='CUSTOMER'


class UploadDocumentType(Enum):
    CERTIFICATE_OF_ORIGIN='CERTIFICATE_OF_ORIGIN'
    COMMERCIAL_INVOICE='COMMERCIAL_INVOICE'
    ETD_LABEL='ETD_LABEL'
    NAFTA_CERTIFICATE_OF_ORIGIN='NAFTA_CERTIFICATE_OF_ORIGIN'
    NET_RATE_SHEET='NET_RATE_SHEET'
    OTHER='OTHER'
    PRO_FORMA_INVOICE='PRO_FORMA_INVOICE'


class VolumeUnits(Enum):
    """Units of three-dimensional volume/cubic measure."""
    CUBIC_FT='CUBIC_FT'
    CUBIC_M='CUBIC_M'


class WeightUnits(Enum):
    KG='KG'
    LB='LB'


class AdditionalLabelsDetail(GeneratedsSuper):
    """Specifies additional labels to be produced. All required labels for
    shipments will be produced without the need to request additional
    labels. These are only available as thermal labels."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Count=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_AdditionalLabelsType(self.Type)
        self.Type_nsprefix_ = None
        self.Count = Count
        self.Count_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdditionalLabelsDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdditionalLabelsDetail.subclass:
            return AdditionalLabelsDetail.subclass(*args_, **kwargs_)
        else:
            return AdditionalLabelsDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Count(self):
        return self.Count
    def set_Count(self, Count):
        self.Count = Count
    def validate_AdditionalLabelsType(self, value):
        result = True
        # Validate type AdditionalLabelsType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BROKER', 'CONSIGNEE', 'CUSTOMS', 'DESTINATION', 'FREIGHT_REFERENCE', 'MANIFEST', 'ORIGIN', 'RECIPIENT', 'SHIPPER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on AdditionalLabelsType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Count is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AdditionalLabelsDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AdditionalLabelsDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AdditionalLabelsDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AdditionalLabelsDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AdditionalLabelsDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AdditionalLabelsDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AdditionalLabelsDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Count is not None:
            namespaceprefix_ = self.Count_nsprefix_ + ':' if (UseCapturedNS_ and self.Count_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCount>%s</%sCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.Count, input_name='Count'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type AdditionalLabelsType
            self.validate_AdditionalLabelsType(self.Type)
        elif nodeName_ == 'Count' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Count')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Count')
            self.Count = ival_
            self.Count_nsprefix_ = child_.prefix
# end class AdditionalLabelsDetail


class Address(GeneratedsSuper):
    """Descriptive data for a physical location. May be used as an actual
    physical address (place to which one could go), or as a container of
    "address parts" which should be handled as a unit (such as a city-
    state-ZIP combination within the US)."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, StreetLines=None, City=None, StateOrProvinceCode=None, PostalCode=None, UrbanizationCode=None, CountryCode=None, CountryName=None, Residential=None, GeographicCoordinates=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if StreetLines is None:
            self.StreetLines = []
        else:
            self.StreetLines = StreetLines
        self.StreetLines_nsprefix_ = None
        self.City = City
        self.City_nsprefix_ = None
        self.StateOrProvinceCode = StateOrProvinceCode
        self.StateOrProvinceCode_nsprefix_ = None
        self.PostalCode = PostalCode
        self.PostalCode_nsprefix_ = None
        self.UrbanizationCode = UrbanizationCode
        self.UrbanizationCode_nsprefix_ = None
        self.CountryCode = CountryCode
        self.CountryCode_nsprefix_ = None
        self.CountryName = CountryName
        self.CountryName_nsprefix_ = None
        self.Residential = Residential
        self.Residential_nsprefix_ = None
        self.GeographicCoordinates = GeographicCoordinates
        self.GeographicCoordinates_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Address)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Address.subclass:
            return Address.subclass(*args_, **kwargs_)
        else:
            return Address(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_StreetLines(self):
        return self.StreetLines
    def set_StreetLines(self, StreetLines):
        self.StreetLines = StreetLines
    def add_StreetLines(self, value):
        self.StreetLines.append(value)
    def insert_StreetLines_at(self, index, value):
        self.StreetLines.insert(index, value)
    def replace_StreetLines_at(self, index, value):
        self.StreetLines[index] = value
    def get_City(self):
        return self.City
    def set_City(self, City):
        self.City = City
    def get_StateOrProvinceCode(self):
        return self.StateOrProvinceCode
    def set_StateOrProvinceCode(self, StateOrProvinceCode):
        self.StateOrProvinceCode = StateOrProvinceCode
    def get_PostalCode(self):
        return self.PostalCode
    def set_PostalCode(self, PostalCode):
        self.PostalCode = PostalCode
    def get_UrbanizationCode(self):
        return self.UrbanizationCode
    def set_UrbanizationCode(self, UrbanizationCode):
        self.UrbanizationCode = UrbanizationCode
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def get_CountryName(self):
        return self.CountryName
    def set_CountryName(self, CountryName):
        self.CountryName = CountryName
    def get_Residential(self):
        return self.Residential
    def set_Residential(self, Residential):
        self.Residential = Residential
    def get_GeographicCoordinates(self):
        return self.GeographicCoordinates
    def set_GeographicCoordinates(self, GeographicCoordinates):
        self.GeographicCoordinates = GeographicCoordinates
    def hasContent_(self):
        if (
            self.StreetLines or
            self.City is not None or
            self.StateOrProvinceCode is not None or
            self.PostalCode is not None or
            self.UrbanizationCode is not None or
            self.CountryCode is not None or
            self.CountryName is not None or
            self.Residential is not None or
            self.GeographicCoordinates is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Address', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Address')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Address':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Address')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Address', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Address'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Address', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for StreetLines_ in self.StreetLines:
            namespaceprefix_ = self.StreetLines_nsprefix_ + ':' if (UseCapturedNS_ and self.StreetLines_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStreetLines>%s</%sStreetLines>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(StreetLines_), input_name='StreetLines')), namespaceprefix_ , eol_))
        if self.City is not None:
            namespaceprefix_ = self.City_nsprefix_ + ':' if (UseCapturedNS_ and self.City_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCity>%s</%sCity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), namespaceprefix_ , eol_))
        if self.StateOrProvinceCode is not None:
            namespaceprefix_ = self.StateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.StateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStateOrProvinceCode>%s</%sStateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StateOrProvinceCode), input_name='StateOrProvinceCode')), namespaceprefix_ , eol_))
        if self.PostalCode is not None:
            namespaceprefix_ = self.PostalCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PostalCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), namespaceprefix_ , eol_))
        if self.UrbanizationCode is not None:
            namespaceprefix_ = self.UrbanizationCode_nsprefix_ + ':' if (UseCapturedNS_ and self.UrbanizationCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUrbanizationCode>%s</%sUrbanizationCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UrbanizationCode), input_name='UrbanizationCode')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
        if self.CountryName is not None:
            namespaceprefix_ = self.CountryName_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryName>%s</%sCountryName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryName), input_name='CountryName')), namespaceprefix_ , eol_))
        if self.Residential is not None:
            namespaceprefix_ = self.Residential_nsprefix_ + ':' if (UseCapturedNS_ and self.Residential_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sResidential>%s</%sResidential>%s' % (namespaceprefix_ , self.gds_format_boolean(self.Residential, input_name='Residential'), namespaceprefix_ , eol_))
        if self.GeographicCoordinates is not None:
            namespaceprefix_ = self.GeographicCoordinates_nsprefix_ + ':' if (UseCapturedNS_ and self.GeographicCoordinates_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGeographicCoordinates>%s</%sGeographicCoordinates>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GeographicCoordinates), input_name='GeographicCoordinates')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'StreetLines':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StreetLines')
            value_ = self.gds_validate_string(value_, node, 'StreetLines')
            self.StreetLines.append(value_)
            self.StreetLines_nsprefix_ = child_.prefix
        elif nodeName_ == 'City':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'City')
            value_ = self.gds_validate_string(value_, node, 'City')
            self.City = value_
            self.City_nsprefix_ = child_.prefix
        elif nodeName_ == 'StateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'StateOrProvinceCode')
            self.StateOrProvinceCode = value_
            self.StateOrProvinceCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'PostalCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PostalCode')
            value_ = self.gds_validate_string(value_, node, 'PostalCode')
            self.PostalCode = value_
            self.PostalCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'UrbanizationCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UrbanizationCode')
            value_ = self.gds_validate_string(value_, node, 'UrbanizationCode')
            self.UrbanizationCode = value_
            self.UrbanizationCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'CountryName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryName')
            value_ = self.gds_validate_string(value_, node, 'CountryName')
            self.CountryName = value_
            self.CountryName_nsprefix_ = child_.prefix
        elif nodeName_ == 'Residential':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'Residential')
            ival_ = self.gds_validate_boolean(ival_, node, 'Residential')
            self.Residential = ival_
            self.Residential_nsprefix_ = child_.prefix
        elif nodeName_ == 'GeographicCoordinates':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GeographicCoordinates')
            value_ = self.gds_validate_string(value_, node, 'GeographicCoordinates')
            self.GeographicCoordinates = value_
            self.GeographicCoordinates_nsprefix_ = child_.prefix
# end class Address


class AdrLicenseDetail(GeneratedsSuper):
    """Specifies the details around the ADR license required for shipping."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LicenseOrPermitDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.LicenseOrPermitDetail = LicenseOrPermitDetail
        self.LicenseOrPermitDetail_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdrLicenseDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdrLicenseDetail.subclass:
            return AdrLicenseDetail.subclass(*args_, **kwargs_)
        else:
            return AdrLicenseDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LicenseOrPermitDetail(self):
        return self.LicenseOrPermitDetail
    def set_LicenseOrPermitDetail(self, LicenseOrPermitDetail):
        self.LicenseOrPermitDetail = LicenseOrPermitDetail
    def hasContent_(self):
        if (
            self.LicenseOrPermitDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AdrLicenseDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AdrLicenseDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AdrLicenseDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AdrLicenseDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AdrLicenseDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AdrLicenseDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AdrLicenseDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LicenseOrPermitDetail is not None:
            namespaceprefix_ = self.LicenseOrPermitDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenseOrPermitDetail_nsprefix_) else ''
            self.LicenseOrPermitDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LicenseOrPermitDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LicenseOrPermitDetail':
            obj_ = LicenseOrPermitDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LicenseOrPermitDetail = obj_
            obj_.original_tagname_ = 'LicenseOrPermitDetail'
# end class AdrLicenseDetail


class AlcoholDetail(GeneratedsSuper):
    """Specifies details for a package containing alcohol"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecipientType=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RecipientType = RecipientType
        self.validate_AlcoholRecipientType(self.RecipientType)
        self.RecipientType_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AlcoholDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AlcoholDetail.subclass:
            return AlcoholDetail.subclass(*args_, **kwargs_)
        else:
            return AlcoholDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecipientType(self):
        return self.RecipientType
    def set_RecipientType(self, RecipientType):
        self.RecipientType = RecipientType
    def validate_AlcoholRecipientType(self, value):
        result = True
        # Validate type AlcoholRecipientType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CONSUMER', 'LICENSEE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on AlcoholRecipientType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.RecipientType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AlcoholDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AlcoholDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AlcoholDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AlcoholDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AlcoholDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AlcoholDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AlcoholDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RecipientType is not None:
            namespaceprefix_ = self.RecipientType_nsprefix_ + ':' if (UseCapturedNS_ and self.RecipientType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecipientType>%s</%sRecipientType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecipientType), input_name='RecipientType')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecipientType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecipientType')
            value_ = self.gds_validate_string(value_, node, 'RecipientType')
            self.RecipientType = value_
            self.RecipientType_nsprefix_ = child_.prefix
            # validate type AlcoholRecipientType
            self.validate_AlcoholRecipientType(self.RecipientType)
# end class AlcoholDetail


class AncillaryFeeAndTax(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Description=None, Amount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_AncillaryFeeAndTaxType(self.Type)
        self.Type_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.Amount = Amount
        self.Amount_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AncillaryFeeAndTax)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AncillaryFeeAndTax.subclass:
            return AncillaryFeeAndTax.subclass(*args_, **kwargs_)
        else:
            return AncillaryFeeAndTax(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_Amount(self):
        return self.Amount
    def set_Amount(self, Amount):
        self.Amount = Amount
    def validate_AncillaryFeeAndTaxType(self, value):
        result = True
        # Validate type AncillaryFeeAndTaxType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CLEARANCE_ENTRY_FEE', 'GOODS_AND_SERVICES_TAX', 'HARMONIZED_SALES_TAX', 'OTHER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on AncillaryFeeAndTaxType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Description is not None or
            self.Amount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AncillaryFeeAndTax', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AncillaryFeeAndTax')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AncillaryFeeAndTax':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AncillaryFeeAndTax')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AncillaryFeeAndTax', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AncillaryFeeAndTax'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AncillaryFeeAndTax', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.Amount is not None:
            namespaceprefix_ = self.Amount_nsprefix_ + ':' if (UseCapturedNS_ and self.Amount_nsprefix_) else ''
            self.Amount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Amount', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type AncillaryFeeAndTaxType
            self.validate_AncillaryFeeAndTaxType(self.Type)
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'Amount':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Amount = obj_
            obj_.original_tagname_ = 'Amount'
# end class AncillaryFeeAndTax


class AssociatedFreightLineItemDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Id = Id
        self.Id_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AssociatedFreightLineItemDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AssociatedFreightLineItemDetail.subclass:
            return AssociatedFreightLineItemDetail.subclass(*args_, **kwargs_)
        else:
            return AssociatedFreightLineItemDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def hasContent_(self):
        if (
            self.Id is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AssociatedFreightLineItemDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AssociatedFreightLineItemDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AssociatedFreightLineItemDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AssociatedFreightLineItemDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AssociatedFreightLineItemDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AssociatedFreightLineItemDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AssociatedFreightLineItemDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Id is not None:
            namespaceprefix_ = self.Id_nsprefix_ + ':' if (UseCapturedNS_ and self.Id_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sId>%s</%sId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Id':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Id')
            value_ = self.gds_validate_string(value_, node, 'Id')
            self.Id = value_
            self.Id_nsprefix_ = child_.prefix
# end class AssociatedFreightLineItemDetail


class AssociatedShipmentDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Sender=None, Recipient=None, ServiceType=None, PackagingType=None, TrackingId=None, CustomerReferences=None, ShipmentOperationalDetail=None, PackageOperationalDetail=None, Label=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_AssociatedShipmentType(self.Type)
        self.Type_nsprefix_ = None
        self.Sender = Sender
        self.Sender_nsprefix_ = None
        self.Recipient = Recipient
        self.Recipient_nsprefix_ = None
        self.ServiceType = ServiceType
        self.ServiceType_nsprefix_ = None
        self.PackagingType = PackagingType
        self.PackagingType_nsprefix_ = None
        self.TrackingId = TrackingId
        self.TrackingId_nsprefix_ = None
        if CustomerReferences is None:
            self.CustomerReferences = []
        else:
            self.CustomerReferences = CustomerReferences
        self.CustomerReferences_nsprefix_ = None
        self.ShipmentOperationalDetail = ShipmentOperationalDetail
        self.ShipmentOperationalDetail_nsprefix_ = None
        self.PackageOperationalDetail = PackageOperationalDetail
        self.PackageOperationalDetail_nsprefix_ = None
        self.Label = Label
        self.Label_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AssociatedShipmentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AssociatedShipmentDetail.subclass:
            return AssociatedShipmentDetail.subclass(*args_, **kwargs_)
        else:
            return AssociatedShipmentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Sender(self):
        return self.Sender
    def set_Sender(self, Sender):
        self.Sender = Sender
    def get_Recipient(self):
        return self.Recipient
    def set_Recipient(self, Recipient):
        self.Recipient = Recipient
    def get_ServiceType(self):
        return self.ServiceType
    def set_ServiceType(self, ServiceType):
        self.ServiceType = ServiceType
    def get_PackagingType(self):
        return self.PackagingType
    def set_PackagingType(self, PackagingType):
        self.PackagingType = PackagingType
    def get_TrackingId(self):
        return self.TrackingId
    def set_TrackingId(self, TrackingId):
        self.TrackingId = TrackingId
    def get_CustomerReferences(self):
        return self.CustomerReferences
    def set_CustomerReferences(self, CustomerReferences):
        self.CustomerReferences = CustomerReferences
    def add_CustomerReferences(self, value):
        self.CustomerReferences.append(value)
    def insert_CustomerReferences_at(self, index, value):
        self.CustomerReferences.insert(index, value)
    def replace_CustomerReferences_at(self, index, value):
        self.CustomerReferences[index] = value
    def get_ShipmentOperationalDetail(self):
        return self.ShipmentOperationalDetail
    def set_ShipmentOperationalDetail(self, ShipmentOperationalDetail):
        self.ShipmentOperationalDetail = ShipmentOperationalDetail
    def get_PackageOperationalDetail(self):
        return self.PackageOperationalDetail
    def set_PackageOperationalDetail(self, PackageOperationalDetail):
        self.PackageOperationalDetail = PackageOperationalDetail
    def get_Label(self):
        return self.Label
    def set_Label(self, Label):
        self.Label = Label
    def validate_AssociatedShipmentType(self, value):
        result = True
        # Validate type AssociatedShipmentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['COD_AND_DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN', 'COD_RETURN', 'DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on AssociatedShipmentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Sender is not None or
            self.Recipient is not None or
            self.ServiceType is not None or
            self.PackagingType is not None or
            self.TrackingId is not None or
            self.CustomerReferences or
            self.ShipmentOperationalDetail is not None or
            self.PackageOperationalDetail is not None or
            self.Label is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AssociatedShipmentDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AssociatedShipmentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AssociatedShipmentDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AssociatedShipmentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AssociatedShipmentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AssociatedShipmentDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AssociatedShipmentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Sender is not None:
            namespaceprefix_ = self.Sender_nsprefix_ + ':' if (UseCapturedNS_ and self.Sender_nsprefix_) else ''
            self.Sender.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Sender', pretty_print=pretty_print)
        if self.Recipient is not None:
            namespaceprefix_ = self.Recipient_nsprefix_ + ':' if (UseCapturedNS_ and self.Recipient_nsprefix_) else ''
            self.Recipient.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Recipient', pretty_print=pretty_print)
        if self.ServiceType is not None:
            namespaceprefix_ = self.ServiceType_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceType>%s</%sServiceType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ServiceType), input_name='ServiceType')), namespaceprefix_ , eol_))
        if self.PackagingType is not None:
            namespaceprefix_ = self.PackagingType_nsprefix_ + ':' if (UseCapturedNS_ and self.PackagingType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackagingType>%s</%sPackagingType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PackagingType), input_name='PackagingType')), namespaceprefix_ , eol_))
        if self.TrackingId is not None:
            namespaceprefix_ = self.TrackingId_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingId_nsprefix_) else ''
            self.TrackingId.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TrackingId', pretty_print=pretty_print)
        for CustomerReferences_ in self.CustomerReferences:
            namespaceprefix_ = self.CustomerReferences_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerReferences_nsprefix_) else ''
            CustomerReferences_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomerReferences', pretty_print=pretty_print)
        if self.ShipmentOperationalDetail is not None:
            namespaceprefix_ = self.ShipmentOperationalDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentOperationalDetail_nsprefix_) else ''
            self.ShipmentOperationalDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentOperationalDetail', pretty_print=pretty_print)
        if self.PackageOperationalDetail is not None:
            namespaceprefix_ = self.PackageOperationalDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageOperationalDetail_nsprefix_) else ''
            self.PackageOperationalDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackageOperationalDetail', pretty_print=pretty_print)
        if self.Label is not None:
            namespaceprefix_ = self.Label_nsprefix_ + ':' if (UseCapturedNS_ and self.Label_nsprefix_) else ''
            self.Label.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Label', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type AssociatedShipmentType
            self.validate_AssociatedShipmentType(self.Type)
        elif nodeName_ == 'Sender':
            obj_ = Party.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Sender = obj_
            obj_.original_tagname_ = 'Sender'
        elif nodeName_ == 'Recipient':
            obj_ = Party.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Recipient = obj_
            obj_.original_tagname_ = 'Recipient'
        elif nodeName_ == 'ServiceType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ServiceType')
            value_ = self.gds_validate_string(value_, node, 'ServiceType')
            self.ServiceType = value_
            self.ServiceType_nsprefix_ = child_.prefix
        elif nodeName_ == 'PackagingType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackagingType')
            value_ = self.gds_validate_string(value_, node, 'PackagingType')
            self.PackagingType = value_
            self.PackagingType_nsprefix_ = child_.prefix
        elif nodeName_ == 'TrackingId':
            obj_ = TrackingId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TrackingId = obj_
            obj_.original_tagname_ = 'TrackingId'
        elif nodeName_ == 'CustomerReferences':
            obj_ = CustomerReference.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomerReferences.append(obj_)
            obj_.original_tagname_ = 'CustomerReferences'
        elif nodeName_ == 'ShipmentOperationalDetail':
            obj_ = ShipmentOperationalDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentOperationalDetail = obj_
            obj_.original_tagname_ = 'ShipmentOperationalDetail'
        elif nodeName_ == 'PackageOperationalDetail':
            obj_ = PackageOperationalDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackageOperationalDetail = obj_
            obj_.original_tagname_ = 'PackageOperationalDetail'
        elif nodeName_ == 'Label':
            obj_ = ShippingDocument.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Label = obj_
            obj_.original_tagname_ = 'Label'
# end class AssociatedShipmentDetail


class BatteryClassificationDetail(GeneratedsSuper):
    """Describes attributes of a battery or cell that are used for
    classification purposes. Typically this structure would be used to
    allow customers to declare batteries or cells for which full dangerous
    goods documentation and procedures are not required."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Material=None, Packing=None, RegulatorySubType=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Material = Material
        self.validate_BatteryMaterialType(self.Material)
        self.Material_nsprefix_ = None
        self.Packing = Packing
        self.validate_BatteryPackingType(self.Packing)
        self.Packing_nsprefix_ = None
        self.RegulatorySubType = RegulatorySubType
        self.validate_BatteryRegulatorySubType(self.RegulatorySubType)
        self.RegulatorySubType_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BatteryClassificationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BatteryClassificationDetail.subclass:
            return BatteryClassificationDetail.subclass(*args_, **kwargs_)
        else:
            return BatteryClassificationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Material(self):
        return self.Material
    def set_Material(self, Material):
        self.Material = Material
    def get_Packing(self):
        return self.Packing
    def set_Packing(self, Packing):
        self.Packing = Packing
    def get_RegulatorySubType(self):
        return self.RegulatorySubType
    def set_RegulatorySubType(self, RegulatorySubType):
        self.RegulatorySubType = RegulatorySubType
    def validate_BatteryMaterialType(self, value):
        result = True
        # Validate type BatteryMaterialType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['LITHIUM_ION', 'LITHIUM_METAL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on BatteryMaterialType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_BatteryPackingType(self, value):
        result = True
        # Validate type BatteryPackingType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CONTAINED_IN_EQUIPMENT', 'PACKED_WITH_EQUIPMENT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on BatteryPackingType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_BatteryRegulatorySubType(self, value):
        result = True
        # Validate type BatteryRegulatorySubType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['IATA_SECTION_II']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on BatteryRegulatorySubType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Material is not None or
            self.Packing is not None or
            self.RegulatorySubType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BatteryClassificationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BatteryClassificationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BatteryClassificationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BatteryClassificationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BatteryClassificationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BatteryClassificationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BatteryClassificationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Material is not None:
            namespaceprefix_ = self.Material_nsprefix_ + ':' if (UseCapturedNS_ and self.Material_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaterial>%s</%sMaterial>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Material), input_name='Material')), namespaceprefix_ , eol_))
        if self.Packing is not None:
            namespaceprefix_ = self.Packing_nsprefix_ + ':' if (UseCapturedNS_ and self.Packing_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPacking>%s</%sPacking>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Packing), input_name='Packing')), namespaceprefix_ , eol_))
        if self.RegulatorySubType is not None:
            namespaceprefix_ = self.RegulatorySubType_nsprefix_ + ':' if (UseCapturedNS_ and self.RegulatorySubType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegulatorySubType>%s</%sRegulatorySubType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegulatorySubType), input_name='RegulatorySubType')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Material':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Material')
            value_ = self.gds_validate_string(value_, node, 'Material')
            self.Material = value_
            self.Material_nsprefix_ = child_.prefix
            # validate type BatteryMaterialType
            self.validate_BatteryMaterialType(self.Material)
        elif nodeName_ == 'Packing':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Packing')
            value_ = self.gds_validate_string(value_, node, 'Packing')
            self.Packing = value_
            self.Packing_nsprefix_ = child_.prefix
            # validate type BatteryPackingType
            self.validate_BatteryPackingType(self.Packing)
        elif nodeName_ == 'RegulatorySubType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegulatorySubType')
            value_ = self.gds_validate_string(value_, node, 'RegulatorySubType')
            self.RegulatorySubType = value_
            self.RegulatorySubType_nsprefix_ = child_.prefix
            # validate type BatteryRegulatorySubType
            self.validate_BatteryRegulatorySubType(self.RegulatorySubType)
# end class BatteryClassificationDetail


class BinaryBarcode(GeneratedsSuper):
    """Each instance of this data type represents a barcode whose content must
    be represented as binary data (i.e. not ASCII text)."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_BinaryBarcodeType(self.Type)
        self.Type_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BinaryBarcode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BinaryBarcode.subclass:
            return BinaryBarcode.subclass(*args_, **kwargs_)
        else:
            return BinaryBarcode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def validate_BinaryBarcodeType(self, value):
        result = True
        # Validate type BinaryBarcodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['COMMON_2D']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on BinaryBarcodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BinaryBarcode', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BinaryBarcode')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BinaryBarcode':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BinaryBarcode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BinaryBarcode', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BinaryBarcode'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BinaryBarcode', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_format_base64(self.Value, input_name='Value'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type BinaryBarcodeType
            self.validate_BinaryBarcodeType(self.Type)
        elif nodeName_ == 'Value':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Value')
            else:
                bval_ = None
            self.Value = bval_
            self.Value_nsprefix_ = child_.prefix
# end class BinaryBarcode


class BrokerDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Broker=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_BrokerType(self.Type)
        self.Type_nsprefix_ = None
        self.Broker = Broker
        self.Broker_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BrokerDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BrokerDetail.subclass:
            return BrokerDetail.subclass(*args_, **kwargs_)
        else:
            return BrokerDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Broker(self):
        return self.Broker
    def set_Broker(self, Broker):
        self.Broker = Broker
    def validate_BrokerType(self, value):
        result = True
        # Validate type BrokerType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['EXPORT', 'IMPORT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on BrokerType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Broker is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BrokerDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BrokerDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BrokerDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BrokerDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BrokerDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BrokerDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='BrokerDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Broker is not None:
            namespaceprefix_ = self.Broker_nsprefix_ + ':' if (UseCapturedNS_ and self.Broker_nsprefix_) else ''
            self.Broker.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Broker', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type BrokerType
            self.validate_BrokerType(self.Type)
        elif nodeName_ == 'Broker':
            obj_ = Party.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Broker = obj_
            obj_.original_tagname_ = 'Broker'
# end class BrokerDetail


class CertificateOfOriginDetail(GeneratedsSuper):
    """The instructions indicating how to print the Certificate of Origin (
    e.g. whether or not to include the instructions, image type, etc
    ...)"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DocumentFormat=None, CustomerImageUsages=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DocumentFormat = DocumentFormat
        self.DocumentFormat_nsprefix_ = None
        if CustomerImageUsages is None:
            self.CustomerImageUsages = []
        else:
            self.CustomerImageUsages = CustomerImageUsages
        self.CustomerImageUsages_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CertificateOfOriginDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CertificateOfOriginDetail.subclass:
            return CertificateOfOriginDetail.subclass(*args_, **kwargs_)
        else:
            return CertificateOfOriginDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocumentFormat(self):
        return self.DocumentFormat
    def set_DocumentFormat(self, DocumentFormat):
        self.DocumentFormat = DocumentFormat
    def get_CustomerImageUsages(self):
        return self.CustomerImageUsages
    def set_CustomerImageUsages(self, CustomerImageUsages):
        self.CustomerImageUsages = CustomerImageUsages
    def add_CustomerImageUsages(self, value):
        self.CustomerImageUsages.append(value)
    def insert_CustomerImageUsages_at(self, index, value):
        self.CustomerImageUsages.insert(index, value)
    def replace_CustomerImageUsages_at(self, index, value):
        self.CustomerImageUsages[index] = value
    def hasContent_(self):
        if (
            self.DocumentFormat is not None or
            self.CustomerImageUsages
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CertificateOfOriginDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CertificateOfOriginDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CertificateOfOriginDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CertificateOfOriginDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CertificateOfOriginDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CertificateOfOriginDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CertificateOfOriginDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocumentFormat is not None:
            namespaceprefix_ = self.DocumentFormat_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentFormat_nsprefix_) else ''
            self.DocumentFormat.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocumentFormat', pretty_print=pretty_print)
        for CustomerImageUsages_ in self.CustomerImageUsages:
            namespaceprefix_ = self.CustomerImageUsages_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerImageUsages_nsprefix_) else ''
            CustomerImageUsages_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomerImageUsages', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocumentFormat':
            obj_ = ShippingDocumentFormat.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocumentFormat = obj_
            obj_.original_tagname_ = 'DocumentFormat'
        elif nodeName_ == 'CustomerImageUsages':
            obj_ = CustomerImageUsage.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomerImageUsages.append(obj_)
            obj_.original_tagname_ = 'CustomerImageUsages'
# end class CertificateOfOriginDetail


class ClientDetail(GeneratedsSuper):
    """Descriptive data for the client submitting a transaction."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, MeterNumber=None, IntegratorId=None, Localization=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AccountNumber = AccountNumber
        self.AccountNumber_nsprefix_ = None
        self.MeterNumber = MeterNumber
        self.MeterNumber_nsprefix_ = None
        self.IntegratorId = IntegratorId
        self.IntegratorId_nsprefix_ = None
        self.Localization = Localization
        self.Localization_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClientDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClientDetail.subclass:
            return ClientDetail.subclass(*args_, **kwargs_)
        else:
            return ClientDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AccountNumber(self):
        return self.AccountNumber
    def set_AccountNumber(self, AccountNumber):
        self.AccountNumber = AccountNumber
    def get_MeterNumber(self):
        return self.MeterNumber
    def set_MeterNumber(self, MeterNumber):
        self.MeterNumber = MeterNumber
    def get_IntegratorId(self):
        return self.IntegratorId
    def set_IntegratorId(self, IntegratorId):
        self.IntegratorId = IntegratorId
    def get_Localization(self):
        return self.Localization
    def set_Localization(self, Localization):
        self.Localization = Localization
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.MeterNumber is not None or
            self.IntegratorId is not None or
            self.Localization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ClientDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClientDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ClientDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ClientDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ClientDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ClientDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ClientDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountNumber is not None:
            namespaceprefix_ = self.AccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), namespaceprefix_ , eol_))
        if self.MeterNumber is not None:
            namespaceprefix_ = self.MeterNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.MeterNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeterNumber>%s</%sMeterNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MeterNumber), input_name='MeterNumber')), namespaceprefix_ , eol_))
        if self.IntegratorId is not None:
            namespaceprefix_ = self.IntegratorId_nsprefix_ + ':' if (UseCapturedNS_ and self.IntegratorId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIntegratorId>%s</%sIntegratorId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IntegratorId), input_name='IntegratorId')), namespaceprefix_ , eol_))
        if self.Localization is not None:
            namespaceprefix_ = self.Localization_nsprefix_ + ':' if (UseCapturedNS_ and self.Localization_nsprefix_) else ''
            self.Localization.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Localization', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountNumber')
            value_ = self.gds_validate_string(value_, node, 'AccountNumber')
            self.AccountNumber = value_
            self.AccountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'MeterNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MeterNumber')
            value_ = self.gds_validate_string(value_, node, 'MeterNumber')
            self.MeterNumber = value_
            self.MeterNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'IntegratorId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'IntegratorId')
            value_ = self.gds_validate_string(value_, node, 'IntegratorId')
            self.IntegratorId = value_
            self.IntegratorId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
# end class ClientDetail


class CodAddTransportationChargesDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RateTypeBasis=None, ChargeBasis=None, ChargeBasisLevel=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RateTypeBasis = RateTypeBasis
        self.validate_RateTypeBasisType(self.RateTypeBasis)
        self.RateTypeBasis_nsprefix_ = None
        self.ChargeBasis = ChargeBasis
        self.validate_CodAddTransportationChargeBasisType(self.ChargeBasis)
        self.ChargeBasis_nsprefix_ = None
        self.ChargeBasisLevel = ChargeBasisLevel
        self.validate_ChargeBasisLevelType(self.ChargeBasisLevel)
        self.ChargeBasisLevel_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CodAddTransportationChargesDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CodAddTransportationChargesDetail.subclass:
            return CodAddTransportationChargesDetail.subclass(*args_, **kwargs_)
        else:
            return CodAddTransportationChargesDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RateTypeBasis(self):
        return self.RateTypeBasis
    def set_RateTypeBasis(self, RateTypeBasis):
        self.RateTypeBasis = RateTypeBasis
    def get_ChargeBasis(self):
        return self.ChargeBasis
    def set_ChargeBasis(self, ChargeBasis):
        self.ChargeBasis = ChargeBasis
    def get_ChargeBasisLevel(self):
        return self.ChargeBasisLevel
    def set_ChargeBasisLevel(self, ChargeBasisLevel):
        self.ChargeBasisLevel = ChargeBasisLevel
    def validate_RateTypeBasisType(self, value):
        result = True
        # Validate type RateTypeBasisType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACCOUNT', 'LIST']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RateTypeBasisType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CodAddTransportationChargeBasisType(self, value):
        result = True
        # Validate type CodAddTransportationChargeBasisType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['COD_SURCHARGE', 'NET_CHARGE', 'NET_FREIGHT', 'TOTAL_CUSTOMER_CHARGE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CodAddTransportationChargeBasisType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ChargeBasisLevelType(self, value):
        result = True
        # Validate type ChargeBasisLevelType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CURRENT_PACKAGE', 'SUM_OF_PACKAGES']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ChargeBasisLevelType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.RateTypeBasis is not None or
            self.ChargeBasis is not None or
            self.ChargeBasisLevel is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CodAddTransportationChargesDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CodAddTransportationChargesDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CodAddTransportationChargesDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CodAddTransportationChargesDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CodAddTransportationChargesDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CodAddTransportationChargesDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CodAddTransportationChargesDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RateTypeBasis is not None:
            namespaceprefix_ = self.RateTypeBasis_nsprefix_ + ':' if (UseCapturedNS_ and self.RateTypeBasis_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateTypeBasis>%s</%sRateTypeBasis>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateTypeBasis), input_name='RateTypeBasis')), namespaceprefix_ , eol_))
        if self.ChargeBasis is not None:
            namespaceprefix_ = self.ChargeBasis_nsprefix_ + ':' if (UseCapturedNS_ and self.ChargeBasis_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChargeBasis>%s</%sChargeBasis>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ChargeBasis), input_name='ChargeBasis')), namespaceprefix_ , eol_))
        if self.ChargeBasisLevel is not None:
            namespaceprefix_ = self.ChargeBasisLevel_nsprefix_ + ':' if (UseCapturedNS_ and self.ChargeBasisLevel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChargeBasisLevel>%s</%sChargeBasisLevel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ChargeBasisLevel), input_name='ChargeBasisLevel')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RateTypeBasis':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RateTypeBasis')
            value_ = self.gds_validate_string(value_, node, 'RateTypeBasis')
            self.RateTypeBasis = value_
            self.RateTypeBasis_nsprefix_ = child_.prefix
            # validate type RateTypeBasisType
            self.validate_RateTypeBasisType(self.RateTypeBasis)
        elif nodeName_ == 'ChargeBasis':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ChargeBasis')
            value_ = self.gds_validate_string(value_, node, 'ChargeBasis')
            self.ChargeBasis = value_
            self.ChargeBasis_nsprefix_ = child_.prefix
            # validate type CodAddTransportationChargeBasisType
            self.validate_CodAddTransportationChargeBasisType(self.ChargeBasis)
        elif nodeName_ == 'ChargeBasisLevel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ChargeBasisLevel')
            value_ = self.gds_validate_string(value_, node, 'ChargeBasisLevel')
            self.ChargeBasisLevel = value_
            self.ChargeBasisLevel_nsprefix_ = child_.prefix
            # validate type ChargeBasisLevelType
            self.validate_ChargeBasisLevelType(self.ChargeBasisLevel)
# end class CodAddTransportationChargesDetail


class CodDetail(GeneratedsSuper):
    """Descriptive data required for a FedEx COD (Collect-On-Delivery)
    shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CodCollectionAmount=None, AddTransportationChargesDetail=None, CollectionType=None, CodRecipient=None, FinancialInstitutionContactAndAddress=None, RemitToName=None, ReferenceIndicator=None, ReturnTrackingId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CodCollectionAmount = CodCollectionAmount
        self.CodCollectionAmount_nsprefix_ = None
        self.AddTransportationChargesDetail = AddTransportationChargesDetail
        self.AddTransportationChargesDetail_nsprefix_ = None
        self.CollectionType = CollectionType
        self.validate_CodCollectionType(self.CollectionType)
        self.CollectionType_nsprefix_ = None
        self.CodRecipient = CodRecipient
        self.CodRecipient_nsprefix_ = None
        self.FinancialInstitutionContactAndAddress = FinancialInstitutionContactAndAddress
        self.FinancialInstitutionContactAndAddress_nsprefix_ = None
        self.RemitToName = RemitToName
        self.RemitToName_nsprefix_ = None
        self.ReferenceIndicator = ReferenceIndicator
        self.validate_CodReturnReferenceIndicatorType(self.ReferenceIndicator)
        self.ReferenceIndicator_nsprefix_ = None
        self.ReturnTrackingId = ReturnTrackingId
        self.ReturnTrackingId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CodDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CodDetail.subclass:
            return CodDetail.subclass(*args_, **kwargs_)
        else:
            return CodDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CodCollectionAmount(self):
        return self.CodCollectionAmount
    def set_CodCollectionAmount(self, CodCollectionAmount):
        self.CodCollectionAmount = CodCollectionAmount
    def get_AddTransportationChargesDetail(self):
        return self.AddTransportationChargesDetail
    def set_AddTransportationChargesDetail(self, AddTransportationChargesDetail):
        self.AddTransportationChargesDetail = AddTransportationChargesDetail
    def get_CollectionType(self):
        return self.CollectionType
    def set_CollectionType(self, CollectionType):
        self.CollectionType = CollectionType
    def get_CodRecipient(self):
        return self.CodRecipient
    def set_CodRecipient(self, CodRecipient):
        self.CodRecipient = CodRecipient
    def get_FinancialInstitutionContactAndAddress(self):
        return self.FinancialInstitutionContactAndAddress
    def set_FinancialInstitutionContactAndAddress(self, FinancialInstitutionContactAndAddress):
        self.FinancialInstitutionContactAndAddress = FinancialInstitutionContactAndAddress
    def get_RemitToName(self):
        return self.RemitToName
    def set_RemitToName(self, RemitToName):
        self.RemitToName = RemitToName
    def get_ReferenceIndicator(self):
        return self.ReferenceIndicator
    def set_ReferenceIndicator(self, ReferenceIndicator):
        self.ReferenceIndicator = ReferenceIndicator
    def get_ReturnTrackingId(self):
        return self.ReturnTrackingId
    def set_ReturnTrackingId(self, ReturnTrackingId):
        self.ReturnTrackingId = ReturnTrackingId
    def validate_CodCollectionType(self, value):
        result = True
        # Validate type CodCollectionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ANY', 'CASH', 'COMPANY_CHECK', 'GUARANTEED_FUNDS', 'PERSONAL_CHECK']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CodCollectionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CodReturnReferenceIndicatorType(self, value):
        result = True
        # Validate type CodReturnReferenceIndicatorType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['INVOICE', 'PO', 'REFERENCE', 'TRACKING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CodReturnReferenceIndicatorType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.CodCollectionAmount is not None or
            self.AddTransportationChargesDetail is not None or
            self.CollectionType is not None or
            self.CodRecipient is not None or
            self.FinancialInstitutionContactAndAddress is not None or
            self.RemitToName is not None or
            self.ReferenceIndicator is not None or
            self.ReturnTrackingId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CodDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CodDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CodDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CodDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CodDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CodDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CodDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CodCollectionAmount is not None:
            namespaceprefix_ = self.CodCollectionAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.CodCollectionAmount_nsprefix_) else ''
            self.CodCollectionAmount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CodCollectionAmount', pretty_print=pretty_print)
        if self.AddTransportationChargesDetail is not None:
            namespaceprefix_ = self.AddTransportationChargesDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.AddTransportationChargesDetail_nsprefix_) else ''
            self.AddTransportationChargesDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AddTransportationChargesDetail', pretty_print=pretty_print)
        if self.CollectionType is not None:
            namespaceprefix_ = self.CollectionType_nsprefix_ + ':' if (UseCapturedNS_ and self.CollectionType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCollectionType>%s</%sCollectionType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CollectionType), input_name='CollectionType')), namespaceprefix_ , eol_))
        if self.CodRecipient is not None:
            namespaceprefix_ = self.CodRecipient_nsprefix_ + ':' if (UseCapturedNS_ and self.CodRecipient_nsprefix_) else ''
            self.CodRecipient.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CodRecipient', pretty_print=pretty_print)
        if self.FinancialInstitutionContactAndAddress is not None:
            namespaceprefix_ = self.FinancialInstitutionContactAndAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.FinancialInstitutionContactAndAddress_nsprefix_) else ''
            self.FinancialInstitutionContactAndAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FinancialInstitutionContactAndAddress', pretty_print=pretty_print)
        if self.RemitToName is not None:
            namespaceprefix_ = self.RemitToName_nsprefix_ + ':' if (UseCapturedNS_ and self.RemitToName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRemitToName>%s</%sRemitToName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RemitToName), input_name='RemitToName')), namespaceprefix_ , eol_))
        if self.ReferenceIndicator is not None:
            namespaceprefix_ = self.ReferenceIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.ReferenceIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceIndicator>%s</%sReferenceIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceIndicator), input_name='ReferenceIndicator')), namespaceprefix_ , eol_))
        if self.ReturnTrackingId is not None:
            namespaceprefix_ = self.ReturnTrackingId_nsprefix_ + ':' if (UseCapturedNS_ and self.ReturnTrackingId_nsprefix_) else ''
            self.ReturnTrackingId.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReturnTrackingId', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CodCollectionAmount':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CodCollectionAmount = obj_
            obj_.original_tagname_ = 'CodCollectionAmount'
        elif nodeName_ == 'AddTransportationChargesDetail':
            obj_ = CodAddTransportationChargesDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AddTransportationChargesDetail = obj_
            obj_.original_tagname_ = 'AddTransportationChargesDetail'
        elif nodeName_ == 'CollectionType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CollectionType')
            value_ = self.gds_validate_string(value_, node, 'CollectionType')
            self.CollectionType = value_
            self.CollectionType_nsprefix_ = child_.prefix
            # validate type CodCollectionType
            self.validate_CodCollectionType(self.CollectionType)
        elif nodeName_ == 'CodRecipient':
            obj_ = Party.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CodRecipient = obj_
            obj_.original_tagname_ = 'CodRecipient'
        elif nodeName_ == 'FinancialInstitutionContactAndAddress':
            obj_ = ContactAndAddress.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FinancialInstitutionContactAndAddress = obj_
            obj_.original_tagname_ = 'FinancialInstitutionContactAndAddress'
        elif nodeName_ == 'RemitToName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RemitToName')
            value_ = self.gds_validate_string(value_, node, 'RemitToName')
            self.RemitToName = value_
            self.RemitToName_nsprefix_ = child_.prefix
        elif nodeName_ == 'ReferenceIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ReferenceIndicator')
            value_ = self.gds_validate_string(value_, node, 'ReferenceIndicator')
            self.ReferenceIndicator = value_
            self.ReferenceIndicator_nsprefix_ = child_.prefix
            # validate type CodReturnReferenceIndicatorType
            self.validate_CodReturnReferenceIndicatorType(self.ReferenceIndicator)
        elif nodeName_ == 'ReturnTrackingId':
            obj_ = TrackingId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReturnTrackingId = obj_
            obj_.original_tagname_ = 'ReturnTrackingId'
# end class CodDetail


class CodReturnPackageDetail(GeneratedsSuper):
    """Specifies the information associated with a package that has COD special
    service in a ground shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CollectionAmount=None, AdjustmentType=None, Electronic=None, Barcodes=None, Label=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CollectionAmount = CollectionAmount
        self.CollectionAmount_nsprefix_ = None
        self.AdjustmentType = AdjustmentType
        self.validate_CodAdjustmentType(self.AdjustmentType)
        self.AdjustmentType_nsprefix_ = None
        self.Electronic = Electronic
        self.Electronic_nsprefix_ = None
        self.Barcodes = Barcodes
        self.Barcodes_nsprefix_ = None
        self.Label = Label
        self.Label_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CodReturnPackageDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CodReturnPackageDetail.subclass:
            return CodReturnPackageDetail.subclass(*args_, **kwargs_)
        else:
            return CodReturnPackageDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CollectionAmount(self):
        return self.CollectionAmount
    def set_CollectionAmount(self, CollectionAmount):
        self.CollectionAmount = CollectionAmount
    def get_AdjustmentType(self):
        return self.AdjustmentType
    def set_AdjustmentType(self, AdjustmentType):
        self.AdjustmentType = AdjustmentType
    def get_Electronic(self):
        return self.Electronic
    def set_Electronic(self, Electronic):
        self.Electronic = Electronic
    def get_Barcodes(self):
        return self.Barcodes
    def set_Barcodes(self, Barcodes):
        self.Barcodes = Barcodes
    def get_Label(self):
        return self.Label
    def set_Label(self, Label):
        self.Label = Label
    def validate_CodAdjustmentType(self, value):
        result = True
        # Validate type CodAdjustmentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CHARGES_ADDED', 'NONE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CodAdjustmentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.CollectionAmount is not None or
            self.AdjustmentType is not None or
            self.Electronic is not None or
            self.Barcodes is not None or
            self.Label is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CodReturnPackageDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CodReturnPackageDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CodReturnPackageDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CodReturnPackageDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CodReturnPackageDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CodReturnPackageDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CodReturnPackageDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CollectionAmount is not None:
            namespaceprefix_ = self.CollectionAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.CollectionAmount_nsprefix_) else ''
            self.CollectionAmount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CollectionAmount', pretty_print=pretty_print)
        if self.AdjustmentType is not None:
            namespaceprefix_ = self.AdjustmentType_nsprefix_ + ':' if (UseCapturedNS_ and self.AdjustmentType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAdjustmentType>%s</%sAdjustmentType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AdjustmentType), input_name='AdjustmentType')), namespaceprefix_ , eol_))
        if self.Electronic is not None:
            namespaceprefix_ = self.Electronic_nsprefix_ + ':' if (UseCapturedNS_ and self.Electronic_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sElectronic>%s</%sElectronic>%s' % (namespaceprefix_ , self.gds_format_boolean(self.Electronic, input_name='Electronic'), namespaceprefix_ , eol_))
        if self.Barcodes is not None:
            namespaceprefix_ = self.Barcodes_nsprefix_ + ':' if (UseCapturedNS_ and self.Barcodes_nsprefix_) else ''
            self.Barcodes.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Barcodes', pretty_print=pretty_print)
        if self.Label is not None:
            namespaceprefix_ = self.Label_nsprefix_ + ':' if (UseCapturedNS_ and self.Label_nsprefix_) else ''
            self.Label.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Label', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CollectionAmount':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CollectionAmount = obj_
            obj_.original_tagname_ = 'CollectionAmount'
        elif nodeName_ == 'AdjustmentType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AdjustmentType')
            value_ = self.gds_validate_string(value_, node, 'AdjustmentType')
            self.AdjustmentType = value_
            self.AdjustmentType_nsprefix_ = child_.prefix
            # validate type CodAdjustmentType
            self.validate_CodAdjustmentType(self.AdjustmentType)
        elif nodeName_ == 'Electronic':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'Electronic')
            ival_ = self.gds_validate_boolean(ival_, node, 'Electronic')
            self.Electronic = ival_
            self.Electronic_nsprefix_ = child_.prefix
        elif nodeName_ == 'Barcodes':
            obj_ = PackageBarcodes.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Barcodes = obj_
            obj_.original_tagname_ = 'Barcodes'
        elif nodeName_ == 'Label':
            obj_ = ShippingDocument.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Label = obj_
            obj_.original_tagname_ = 'Label'
# end class CodReturnPackageDetail


class CommercialInvoice(GeneratedsSuper):
    """CommercialInvoice element is required for electronic upload of CI data.
    It will serve to create/transmit an Electronic Commercial Invoice
    through the FedEx Systems. Customers are responsible for printing their
    own Commercial Invoice.If you would likeFedEx to generate a Commercial
    Invoice and transmit it to Customs. for clearance purposes, you need to
    specify that in the ShippingDocumentSpecification element. If you would
    like a copy of the Commercial Invoice that FedEx generated returned to
    you in reply it needs to be specified in the
    ETDDetail/RequestedDocumentCopies element. Commercial Invoice support
    consists of maximum of 99 commodity line items."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Comments=None, FreightCharge=None, TaxesOrMiscellaneousCharge=None, TaxesOrMiscellaneousChargeType=None, PackingCosts=None, HandlingCosts=None, SpecialInstructions=None, DeclarationStatement=None, PaymentTerms=None, Purpose=None, CustomerReferences=None, OriginatorName=None, TermsOfSale=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Comments is None:
            self.Comments = []
        else:
            self.Comments = Comments
        self.Comments_nsprefix_ = None
        self.FreightCharge = FreightCharge
        self.FreightCharge_nsprefix_ = None
        self.TaxesOrMiscellaneousCharge = TaxesOrMiscellaneousCharge
        self.TaxesOrMiscellaneousCharge_nsprefix_ = None
        self.TaxesOrMiscellaneousChargeType = TaxesOrMiscellaneousChargeType
        self.validate_TaxesOrMiscellaneousChargeType(self.TaxesOrMiscellaneousChargeType)
        self.TaxesOrMiscellaneousChargeType_nsprefix_ = None
        self.PackingCosts = PackingCosts
        self.PackingCosts_nsprefix_ = None
        self.HandlingCosts = HandlingCosts
        self.HandlingCosts_nsprefix_ = None
        self.SpecialInstructions = SpecialInstructions
        self.SpecialInstructions_nsprefix_ = None
        self.DeclarationStatement = DeclarationStatement
        self.DeclarationStatement_nsprefix_ = None
        self.PaymentTerms = PaymentTerms
        self.PaymentTerms_nsprefix_ = None
        self.Purpose = Purpose
        self.validate_PurposeOfShipmentType(self.Purpose)
        self.Purpose_nsprefix_ = None
        if CustomerReferences is None:
            self.CustomerReferences = []
        else:
            self.CustomerReferences = CustomerReferences
        self.CustomerReferences_nsprefix_ = None
        self.OriginatorName = OriginatorName
        self.OriginatorName_nsprefix_ = None
        self.TermsOfSale = TermsOfSale
        self.TermsOfSale_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommercialInvoice)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommercialInvoice.subclass:
            return CommercialInvoice.subclass(*args_, **kwargs_)
        else:
            return CommercialInvoice(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Comments(self):
        return self.Comments
    def set_Comments(self, Comments):
        self.Comments = Comments
    def add_Comments(self, value):
        self.Comments.append(value)
    def insert_Comments_at(self, index, value):
        self.Comments.insert(index, value)
    def replace_Comments_at(self, index, value):
        self.Comments[index] = value
    def get_FreightCharge(self):
        return self.FreightCharge
    def set_FreightCharge(self, FreightCharge):
        self.FreightCharge = FreightCharge
    def get_TaxesOrMiscellaneousCharge(self):
        return self.TaxesOrMiscellaneousCharge
    def set_TaxesOrMiscellaneousCharge(self, TaxesOrMiscellaneousCharge):
        self.TaxesOrMiscellaneousCharge = TaxesOrMiscellaneousCharge
    def get_TaxesOrMiscellaneousChargeType(self):
        return self.TaxesOrMiscellaneousChargeType
    def set_TaxesOrMiscellaneousChargeType(self, TaxesOrMiscellaneousChargeType):
        self.TaxesOrMiscellaneousChargeType = TaxesOrMiscellaneousChargeType
    def get_PackingCosts(self):
        return self.PackingCosts
    def set_PackingCosts(self, PackingCosts):
        self.PackingCosts = PackingCosts
    def get_HandlingCosts(self):
        return self.HandlingCosts
    def set_HandlingCosts(self, HandlingCosts):
        self.HandlingCosts = HandlingCosts
    def get_SpecialInstructions(self):
        return self.SpecialInstructions
    def set_SpecialInstructions(self, SpecialInstructions):
        self.SpecialInstructions = SpecialInstructions
    def get_DeclarationStatement(self):
        return self.DeclarationStatement
    def set_DeclarationStatement(self, DeclarationStatement):
        self.DeclarationStatement = DeclarationStatement
    def get_PaymentTerms(self):
        return self.PaymentTerms
    def set_PaymentTerms(self, PaymentTerms):
        self.PaymentTerms = PaymentTerms
    def get_Purpose(self):
        return self.Purpose
    def set_Purpose(self, Purpose):
        self.Purpose = Purpose
    def get_CustomerReferences(self):
        return self.CustomerReferences
    def set_CustomerReferences(self, CustomerReferences):
        self.CustomerReferences = CustomerReferences
    def add_CustomerReferences(self, value):
        self.CustomerReferences.append(value)
    def insert_CustomerReferences_at(self, index, value):
        self.CustomerReferences.insert(index, value)
    def replace_CustomerReferences_at(self, index, value):
        self.CustomerReferences[index] = value
    def get_OriginatorName(self):
        return self.OriginatorName
    def set_OriginatorName(self, OriginatorName):
        self.OriginatorName = OriginatorName
    def get_TermsOfSale(self):
        return self.TermsOfSale
    def set_TermsOfSale(self, TermsOfSale):
        self.TermsOfSale = TermsOfSale
    def validate_TaxesOrMiscellaneousChargeType(self, value):
        result = True
        # Validate type TaxesOrMiscellaneousChargeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['COMMISSIONS', 'DISCOUNTS', 'HANDLING_FEES', 'OTHER', 'ROYALTIES_AND_LICENSE_FEES', 'TAXES']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TaxesOrMiscellaneousChargeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_PurposeOfShipmentType(self, value):
        result = True
        # Validate type PurposeOfShipmentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['GIFT', 'NOT_SOLD', 'PERSONAL_EFFECTS', 'REPAIR_AND_RETURN', 'SAMPLE', 'SOLD']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PurposeOfShipmentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Comments or
            self.FreightCharge is not None or
            self.TaxesOrMiscellaneousCharge is not None or
            self.TaxesOrMiscellaneousChargeType is not None or
            self.PackingCosts is not None or
            self.HandlingCosts is not None or
            self.SpecialInstructions is not None or
            self.DeclarationStatement is not None or
            self.PaymentTerms is not None or
            self.Purpose is not None or
            self.CustomerReferences or
            self.OriginatorName is not None or
            self.TermsOfSale is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CommercialInvoice', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CommercialInvoice')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CommercialInvoice':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CommercialInvoice')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CommercialInvoice', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CommercialInvoice'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CommercialInvoice', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Comments_ in self.Comments:
            namespaceprefix_ = self.Comments_nsprefix_ + ':' if (UseCapturedNS_ and self.Comments_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComments>%s</%sComments>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Comments_), input_name='Comments')), namespaceprefix_ , eol_))
        if self.FreightCharge is not None:
            namespaceprefix_ = self.FreightCharge_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightCharge_nsprefix_) else ''
            self.FreightCharge.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreightCharge', pretty_print=pretty_print)
        if self.TaxesOrMiscellaneousCharge is not None:
            namespaceprefix_ = self.TaxesOrMiscellaneousCharge_nsprefix_ + ':' if (UseCapturedNS_ and self.TaxesOrMiscellaneousCharge_nsprefix_) else ''
            self.TaxesOrMiscellaneousCharge.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TaxesOrMiscellaneousCharge', pretty_print=pretty_print)
        if self.TaxesOrMiscellaneousChargeType is not None:
            namespaceprefix_ = self.TaxesOrMiscellaneousChargeType_nsprefix_ + ':' if (UseCapturedNS_ and self.TaxesOrMiscellaneousChargeType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxesOrMiscellaneousChargeType>%s</%sTaxesOrMiscellaneousChargeType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TaxesOrMiscellaneousChargeType), input_name='TaxesOrMiscellaneousChargeType')), namespaceprefix_ , eol_))
        if self.PackingCosts is not None:
            namespaceprefix_ = self.PackingCosts_nsprefix_ + ':' if (UseCapturedNS_ and self.PackingCosts_nsprefix_) else ''
            self.PackingCosts.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackingCosts', pretty_print=pretty_print)
        if self.HandlingCosts is not None:
            namespaceprefix_ = self.HandlingCosts_nsprefix_ + ':' if (UseCapturedNS_ and self.HandlingCosts_nsprefix_) else ''
            self.HandlingCosts.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HandlingCosts', pretty_print=pretty_print)
        if self.SpecialInstructions is not None:
            namespaceprefix_ = self.SpecialInstructions_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialInstructions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialInstructions>%s</%sSpecialInstructions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SpecialInstructions), input_name='SpecialInstructions')), namespaceprefix_ , eol_))
        if self.DeclarationStatement is not None:
            namespaceprefix_ = self.DeclarationStatement_nsprefix_ + ':' if (UseCapturedNS_ and self.DeclarationStatement_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeclarationStatement>%s</%sDeclarationStatement>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeclarationStatement), input_name='DeclarationStatement')), namespaceprefix_ , eol_))
        if self.PaymentTerms is not None:
            namespaceprefix_ = self.PaymentTerms_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentTerms_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentTerms>%s</%sPaymentTerms>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PaymentTerms), input_name='PaymentTerms')), namespaceprefix_ , eol_))
        if self.Purpose is not None:
            namespaceprefix_ = self.Purpose_nsprefix_ + ':' if (UseCapturedNS_ and self.Purpose_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurpose>%s</%sPurpose>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Purpose), input_name='Purpose')), namespaceprefix_ , eol_))
        for CustomerReferences_ in self.CustomerReferences:
            namespaceprefix_ = self.CustomerReferences_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerReferences_nsprefix_) else ''
            CustomerReferences_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomerReferences', pretty_print=pretty_print)
        if self.OriginatorName is not None:
            namespaceprefix_ = self.OriginatorName_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginatorName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginatorName>%s</%sOriginatorName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OriginatorName), input_name='OriginatorName')), namespaceprefix_ , eol_))
        if self.TermsOfSale is not None:
            namespaceprefix_ = self.TermsOfSale_nsprefix_ + ':' if (UseCapturedNS_ and self.TermsOfSale_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTermsOfSale>%s</%sTermsOfSale>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TermsOfSale), input_name='TermsOfSale')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Comments':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Comments')
            value_ = self.gds_validate_string(value_, node, 'Comments')
            self.Comments.append(value_)
            self.Comments_nsprefix_ = child_.prefix
        elif nodeName_ == 'FreightCharge':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreightCharge = obj_
            obj_.original_tagname_ = 'FreightCharge'
        elif nodeName_ == 'TaxesOrMiscellaneousCharge':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TaxesOrMiscellaneousCharge = obj_
            obj_.original_tagname_ = 'TaxesOrMiscellaneousCharge'
        elif nodeName_ == 'TaxesOrMiscellaneousChargeType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TaxesOrMiscellaneousChargeType')
            value_ = self.gds_validate_string(value_, node, 'TaxesOrMiscellaneousChargeType')
            self.TaxesOrMiscellaneousChargeType = value_
            self.TaxesOrMiscellaneousChargeType_nsprefix_ = child_.prefix
            # validate type TaxesOrMiscellaneousChargeType
            self.validate_TaxesOrMiscellaneousChargeType(self.TaxesOrMiscellaneousChargeType)
        elif nodeName_ == 'PackingCosts':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackingCosts = obj_
            obj_.original_tagname_ = 'PackingCosts'
        elif nodeName_ == 'HandlingCosts':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HandlingCosts = obj_
            obj_.original_tagname_ = 'HandlingCosts'
        elif nodeName_ == 'SpecialInstructions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecialInstructions')
            value_ = self.gds_validate_string(value_, node, 'SpecialInstructions')
            self.SpecialInstructions = value_
            self.SpecialInstructions_nsprefix_ = child_.prefix
        elif nodeName_ == 'DeclarationStatement':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DeclarationStatement')
            value_ = self.gds_validate_string(value_, node, 'DeclarationStatement')
            self.DeclarationStatement = value_
            self.DeclarationStatement_nsprefix_ = child_.prefix
        elif nodeName_ == 'PaymentTerms':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PaymentTerms')
            value_ = self.gds_validate_string(value_, node, 'PaymentTerms')
            self.PaymentTerms = value_
            self.PaymentTerms_nsprefix_ = child_.prefix
        elif nodeName_ == 'Purpose':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Purpose')
            value_ = self.gds_validate_string(value_, node, 'Purpose')
            self.Purpose = value_
            self.Purpose_nsprefix_ = child_.prefix
            # validate type PurposeOfShipmentType
            self.validate_PurposeOfShipmentType(self.Purpose)
        elif nodeName_ == 'CustomerReferences':
            obj_ = CustomerReference.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomerReferences.append(obj_)
            obj_.original_tagname_ = 'CustomerReferences'
        elif nodeName_ == 'OriginatorName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OriginatorName')
            value_ = self.gds_validate_string(value_, node, 'OriginatorName')
            self.OriginatorName = value_
            self.OriginatorName_nsprefix_ = child_.prefix
        elif nodeName_ == 'TermsOfSale':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TermsOfSale')
            value_ = self.gds_validate_string(value_, node, 'TermsOfSale')
            self.TermsOfSale = value_
            self.TermsOfSale_nsprefix_ = child_.prefix
# end class CommercialInvoice


class CommercialInvoiceDetail(GeneratedsSuper):
    """The instructions indicating how to print the Commercial Invoice( e.g.
    image type) Specifies characteristics of a shipping document to be
    produced."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Format=None, CustomerImageUsages=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Format = Format
        self.Format_nsprefix_ = None
        if CustomerImageUsages is None:
            self.CustomerImageUsages = []
        else:
            self.CustomerImageUsages = CustomerImageUsages
        self.CustomerImageUsages_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommercialInvoiceDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommercialInvoiceDetail.subclass:
            return CommercialInvoiceDetail.subclass(*args_, **kwargs_)
        else:
            return CommercialInvoiceDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Format(self):
        return self.Format
    def set_Format(self, Format):
        self.Format = Format
    def get_CustomerImageUsages(self):
        return self.CustomerImageUsages
    def set_CustomerImageUsages(self, CustomerImageUsages):
        self.CustomerImageUsages = CustomerImageUsages
    def add_CustomerImageUsages(self, value):
        self.CustomerImageUsages.append(value)
    def insert_CustomerImageUsages_at(self, index, value):
        self.CustomerImageUsages.insert(index, value)
    def replace_CustomerImageUsages_at(self, index, value):
        self.CustomerImageUsages[index] = value
    def hasContent_(self):
        if (
            self.Format is not None or
            self.CustomerImageUsages
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CommercialInvoiceDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CommercialInvoiceDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CommercialInvoiceDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CommercialInvoiceDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CommercialInvoiceDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CommercialInvoiceDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CommercialInvoiceDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Format is not None:
            namespaceprefix_ = self.Format_nsprefix_ + ':' if (UseCapturedNS_ and self.Format_nsprefix_) else ''
            self.Format.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Format', pretty_print=pretty_print)
        for CustomerImageUsages_ in self.CustomerImageUsages:
            namespaceprefix_ = self.CustomerImageUsages_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerImageUsages_nsprefix_) else ''
            CustomerImageUsages_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomerImageUsages', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Format':
            obj_ = ShippingDocumentFormat.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Format = obj_
            obj_.original_tagname_ = 'Format'
        elif nodeName_ == 'CustomerImageUsages':
            obj_ = CustomerImageUsage.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomerImageUsages.append(obj_)
            obj_.original_tagname_ = 'CustomerImageUsages'
# end class CommercialInvoiceDetail


class Commodity(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Name=None, NumberOfPieces=None, Description=None, Purpose=None, CountryOfManufacture=None, HarmonizedCode=None, Weight=None, Quantity=None, QuantityUnits=None, AdditionalMeasures=None, UnitPrice=None, CustomsValue=None, ExciseConditions=None, ExportLicenseNumber=None, ExportLicenseExpirationDate=None, CIMarksAndNumbers=None, PartNumber=None, NaftaDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Name = Name
        self.Name_nsprefix_ = None
        self.NumberOfPieces = NumberOfPieces
        self.NumberOfPieces_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.Purpose = Purpose
        self.validate_CommodityPurposeType(self.Purpose)
        self.Purpose_nsprefix_ = None
        self.CountryOfManufacture = CountryOfManufacture
        self.CountryOfManufacture_nsprefix_ = None
        self.HarmonizedCode = HarmonizedCode
        self.HarmonizedCode_nsprefix_ = None
        self.Weight = Weight
        self.Weight_nsprefix_ = None
        self.Quantity = Quantity
        self.Quantity_nsprefix_ = None
        self.QuantityUnits = QuantityUnits
        self.QuantityUnits_nsprefix_ = None
        if AdditionalMeasures is None:
            self.AdditionalMeasures = []
        else:
            self.AdditionalMeasures = AdditionalMeasures
        self.AdditionalMeasures_nsprefix_ = None
        self.UnitPrice = UnitPrice
        self.UnitPrice_nsprefix_ = None
        self.CustomsValue = CustomsValue
        self.CustomsValue_nsprefix_ = None
        if ExciseConditions is None:
            self.ExciseConditions = []
        else:
            self.ExciseConditions = ExciseConditions
        self.ExciseConditions_nsprefix_ = None
        self.ExportLicenseNumber = ExportLicenseNumber
        self.ExportLicenseNumber_nsprefix_ = None
        if isinstance(ExportLicenseExpirationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ExportLicenseExpirationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ExportLicenseExpirationDate
        self.ExportLicenseExpirationDate = initvalue_
        self.ExportLicenseExpirationDate_nsprefix_ = None
        self.CIMarksAndNumbers = CIMarksAndNumbers
        self.CIMarksAndNumbers_nsprefix_ = None
        self.PartNumber = PartNumber
        self.PartNumber_nsprefix_ = None
        self.NaftaDetail = NaftaDetail
        self.NaftaDetail_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Commodity)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Commodity.subclass:
            return Commodity.subclass(*args_, **kwargs_)
        else:
            return Commodity(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_NumberOfPieces(self):
        return self.NumberOfPieces
    def set_NumberOfPieces(self, NumberOfPieces):
        self.NumberOfPieces = NumberOfPieces
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_Purpose(self):
        return self.Purpose
    def set_Purpose(self, Purpose):
        self.Purpose = Purpose
    def get_CountryOfManufacture(self):
        return self.CountryOfManufacture
    def set_CountryOfManufacture(self, CountryOfManufacture):
        self.CountryOfManufacture = CountryOfManufacture
    def get_HarmonizedCode(self):
        return self.HarmonizedCode
    def set_HarmonizedCode(self, HarmonizedCode):
        self.HarmonizedCode = HarmonizedCode
    def get_Weight(self):
        return self.Weight
    def set_Weight(self, Weight):
        self.Weight = Weight
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_QuantityUnits(self):
        return self.QuantityUnits
    def set_QuantityUnits(self, QuantityUnits):
        self.QuantityUnits = QuantityUnits
    def get_AdditionalMeasures(self):
        return self.AdditionalMeasures
    def set_AdditionalMeasures(self, AdditionalMeasures):
        self.AdditionalMeasures = AdditionalMeasures
    def add_AdditionalMeasures(self, value):
        self.AdditionalMeasures.append(value)
    def insert_AdditionalMeasures_at(self, index, value):
        self.AdditionalMeasures.insert(index, value)
    def replace_AdditionalMeasures_at(self, index, value):
        self.AdditionalMeasures[index] = value
    def get_UnitPrice(self):
        return self.UnitPrice
    def set_UnitPrice(self, UnitPrice):
        self.UnitPrice = UnitPrice
    def get_CustomsValue(self):
        return self.CustomsValue
    def set_CustomsValue(self, CustomsValue):
        self.CustomsValue = CustomsValue
    def get_ExciseConditions(self):
        return self.ExciseConditions
    def set_ExciseConditions(self, ExciseConditions):
        self.ExciseConditions = ExciseConditions
    def add_ExciseConditions(self, value):
        self.ExciseConditions.append(value)
    def insert_ExciseConditions_at(self, index, value):
        self.ExciseConditions.insert(index, value)
    def replace_ExciseConditions_at(self, index, value):
        self.ExciseConditions[index] = value
    def get_ExportLicenseNumber(self):
        return self.ExportLicenseNumber
    def set_ExportLicenseNumber(self, ExportLicenseNumber):
        self.ExportLicenseNumber = ExportLicenseNumber
    def get_ExportLicenseExpirationDate(self):
        return self.ExportLicenseExpirationDate
    def set_ExportLicenseExpirationDate(self, ExportLicenseExpirationDate):
        self.ExportLicenseExpirationDate = ExportLicenseExpirationDate
    def get_CIMarksAndNumbers(self):
        return self.CIMarksAndNumbers
    def set_CIMarksAndNumbers(self, CIMarksAndNumbers):
        self.CIMarksAndNumbers = CIMarksAndNumbers
    def get_PartNumber(self):
        return self.PartNumber
    def set_PartNumber(self, PartNumber):
        self.PartNumber = PartNumber
    def get_NaftaDetail(self):
        return self.NaftaDetail
    def set_NaftaDetail(self, NaftaDetail):
        self.NaftaDetail = NaftaDetail
    def validate_CommodityPurposeType(self, value):
        result = True
        # Validate type CommodityPurposeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BUSINESS', 'CONSUMER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CommodityPurposeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Name is not None or
            self.NumberOfPieces is not None or
            self.Description is not None or
            self.Purpose is not None or
            self.CountryOfManufacture is not None or
            self.HarmonizedCode is not None or
            self.Weight is not None or
            self.Quantity is not None or
            self.QuantityUnits is not None or
            self.AdditionalMeasures or
            self.UnitPrice is not None or
            self.CustomsValue is not None or
            self.ExciseConditions or
            self.ExportLicenseNumber is not None or
            self.ExportLicenseExpirationDate is not None or
            self.CIMarksAndNumbers is not None or
            self.PartNumber is not None or
            self.NaftaDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Commodity', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Commodity')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Commodity':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Commodity')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Commodity', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Commodity'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Commodity', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.NumberOfPieces is not None:
            namespaceprefix_ = self.NumberOfPieces_nsprefix_ + ':' if (UseCapturedNS_ and self.NumberOfPieces_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfPieces>%s</%sNumberOfPieces>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumberOfPieces, input_name='NumberOfPieces'), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.Purpose is not None:
            namespaceprefix_ = self.Purpose_nsprefix_ + ':' if (UseCapturedNS_ and self.Purpose_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurpose>%s</%sPurpose>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Purpose), input_name='Purpose')), namespaceprefix_ , eol_))
        if self.CountryOfManufacture is not None:
            namespaceprefix_ = self.CountryOfManufacture_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryOfManufacture_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryOfManufacture>%s</%sCountryOfManufacture>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryOfManufacture), input_name='CountryOfManufacture')), namespaceprefix_ , eol_))
        if self.HarmonizedCode is not None:
            namespaceprefix_ = self.HarmonizedCode_nsprefix_ + ':' if (UseCapturedNS_ and self.HarmonizedCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHarmonizedCode>%s</%sHarmonizedCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HarmonizedCode), input_name='HarmonizedCode')), namespaceprefix_ , eol_))
        if self.Weight is not None:
            namespaceprefix_ = self.Weight_nsprefix_ + ':' if (UseCapturedNS_ and self.Weight_nsprefix_) else ''
            self.Weight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Weight', pretty_print=pretty_print)
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.QuantityUnits is not None:
            namespaceprefix_ = self.QuantityUnits_nsprefix_ + ':' if (UseCapturedNS_ and self.QuantityUnits_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityUnits>%s</%sQuantityUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QuantityUnits), input_name='QuantityUnits')), namespaceprefix_ , eol_))
        for AdditionalMeasures_ in self.AdditionalMeasures:
            namespaceprefix_ = self.AdditionalMeasures_nsprefix_ + ':' if (UseCapturedNS_ and self.AdditionalMeasures_nsprefix_) else ''
            AdditionalMeasures_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AdditionalMeasures', pretty_print=pretty_print)
        if self.UnitPrice is not None:
            namespaceprefix_ = self.UnitPrice_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitPrice_nsprefix_) else ''
            self.UnitPrice.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UnitPrice', pretty_print=pretty_print)
        if self.CustomsValue is not None:
            namespaceprefix_ = self.CustomsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsValue_nsprefix_) else ''
            self.CustomsValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomsValue', pretty_print=pretty_print)
        for ExciseConditions_ in self.ExciseConditions:
            namespaceprefix_ = self.ExciseConditions_nsprefix_ + ':' if (UseCapturedNS_ and self.ExciseConditions_nsprefix_) else ''
            ExciseConditions_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExciseConditions', pretty_print=pretty_print)
        if self.ExportLicenseNumber is not None:
            namespaceprefix_ = self.ExportLicenseNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ExportLicenseNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExportLicenseNumber>%s</%sExportLicenseNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExportLicenseNumber), input_name='ExportLicenseNumber')), namespaceprefix_ , eol_))
        if self.ExportLicenseExpirationDate is not None:
            namespaceprefix_ = self.ExportLicenseExpirationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ExportLicenseExpirationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExportLicenseExpirationDate>%s</%sExportLicenseExpirationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ExportLicenseExpirationDate, input_name='ExportLicenseExpirationDate'), namespaceprefix_ , eol_))
        if self.CIMarksAndNumbers is not None:
            namespaceprefix_ = self.CIMarksAndNumbers_nsprefix_ + ':' if (UseCapturedNS_ and self.CIMarksAndNumbers_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCIMarksAndNumbers>%s</%sCIMarksAndNumbers>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CIMarksAndNumbers), input_name='CIMarksAndNumbers')), namespaceprefix_ , eol_))
        if self.PartNumber is not None:
            namespaceprefix_ = self.PartNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PartNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPartNumber>%s</%sPartNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PartNumber), input_name='PartNumber')), namespaceprefix_ , eol_))
        if self.NaftaDetail is not None:
            namespaceprefix_ = self.NaftaDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.NaftaDetail_nsprefix_) else ''
            self.NaftaDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NaftaDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Name')
            value_ = self.gds_validate_string(value_, node, 'Name')
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
        elif nodeName_ == 'NumberOfPieces' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'NumberOfPieces')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'NumberOfPieces')
            self.NumberOfPieces = ival_
            self.NumberOfPieces_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'Purpose':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Purpose')
            value_ = self.gds_validate_string(value_, node, 'Purpose')
            self.Purpose = value_
            self.Purpose_nsprefix_ = child_.prefix
            # validate type CommodityPurposeType
            self.validate_CommodityPurposeType(self.Purpose)
        elif nodeName_ == 'CountryOfManufacture':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryOfManufacture')
            value_ = self.gds_validate_string(value_, node, 'CountryOfManufacture')
            self.CountryOfManufacture = value_
            self.CountryOfManufacture_nsprefix_ = child_.prefix
        elif nodeName_ == 'HarmonizedCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HarmonizedCode')
            value_ = self.gds_validate_string(value_, node, 'HarmonizedCode')
            self.HarmonizedCode = value_
            self.HarmonizedCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'Weight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'QuantityUnits':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'QuantityUnits')
            value_ = self.gds_validate_string(value_, node, 'QuantityUnits')
            self.QuantityUnits = value_
            self.QuantityUnits_nsprefix_ = child_.prefix
        elif nodeName_ == 'AdditionalMeasures':
            obj_ = Measure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AdditionalMeasures.append(obj_)
            obj_.original_tagname_ = 'AdditionalMeasures'
        elif nodeName_ == 'UnitPrice':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UnitPrice = obj_
            obj_.original_tagname_ = 'UnitPrice'
        elif nodeName_ == 'CustomsValue':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomsValue = obj_
            obj_.original_tagname_ = 'CustomsValue'
        elif nodeName_ == 'ExciseConditions':
            obj_ = EdtExciseCondition.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExciseConditions.append(obj_)
            obj_.original_tagname_ = 'ExciseConditions'
        elif nodeName_ == 'ExportLicenseNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExportLicenseNumber')
            value_ = self.gds_validate_string(value_, node, 'ExportLicenseNumber')
            self.ExportLicenseNumber = value_
            self.ExportLicenseNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ExportLicenseExpirationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ExportLicenseExpirationDate = dval_
            self.ExportLicenseExpirationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'CIMarksAndNumbers':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CIMarksAndNumbers')
            value_ = self.gds_validate_string(value_, node, 'CIMarksAndNumbers')
            self.CIMarksAndNumbers = value_
            self.CIMarksAndNumbers_nsprefix_ = child_.prefix
        elif nodeName_ == 'PartNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PartNumber')
            value_ = self.gds_validate_string(value_, node, 'PartNumber')
            self.PartNumber = value_
            self.PartNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'NaftaDetail':
            obj_ = NaftaCommodityDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NaftaDetail = obj_
            obj_.original_tagname_ = 'NaftaDetail'
# end class Commodity


class CompletedCodDetail(GeneratedsSuper):
    """Specifies the results of processing for the COD special service."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CollectionAmount=None, AdjustmentType=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CollectionAmount = CollectionAmount
        self.CollectionAmount_nsprefix_ = None
        self.AdjustmentType = AdjustmentType
        self.validate_CodAdjustmentType(self.AdjustmentType)
        self.AdjustmentType_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CompletedCodDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CompletedCodDetail.subclass:
            return CompletedCodDetail.subclass(*args_, **kwargs_)
        else:
            return CompletedCodDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CollectionAmount(self):
        return self.CollectionAmount
    def set_CollectionAmount(self, CollectionAmount):
        self.CollectionAmount = CollectionAmount
    def get_AdjustmentType(self):
        return self.AdjustmentType
    def set_AdjustmentType(self, AdjustmentType):
        self.AdjustmentType = AdjustmentType
    def validate_CodAdjustmentType(self, value):
        result = True
        # Validate type CodAdjustmentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CHARGES_ADDED', 'NONE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CodAdjustmentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.CollectionAmount is not None or
            self.AdjustmentType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompletedCodDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CompletedCodDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CompletedCodDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CompletedCodDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CompletedCodDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CompletedCodDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompletedCodDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CollectionAmount is not None:
            namespaceprefix_ = self.CollectionAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.CollectionAmount_nsprefix_) else ''
            self.CollectionAmount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CollectionAmount', pretty_print=pretty_print)
        if self.AdjustmentType is not None:
            namespaceprefix_ = self.AdjustmentType_nsprefix_ + ':' if (UseCapturedNS_ and self.AdjustmentType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAdjustmentType>%s</%sAdjustmentType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AdjustmentType), input_name='AdjustmentType')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CollectionAmount':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CollectionAmount = obj_
            obj_.original_tagname_ = 'CollectionAmount'
        elif nodeName_ == 'AdjustmentType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AdjustmentType')
            value_ = self.gds_validate_string(value_, node, 'AdjustmentType')
            self.AdjustmentType = value_
            self.AdjustmentType_nsprefix_ = child_.prefix
            # validate type CodAdjustmentType
            self.validate_CodAdjustmentType(self.AdjustmentType)
# end class CompletedCodDetail


class CompletedEtdDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FolderId=None, Type=None, UploadDocumentReferenceDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.FolderId = FolderId
        self.FolderId_nsprefix_ = None
        self.Type = Type
        self.validate_CompletedEtdType(self.Type)
        self.Type_nsprefix_ = None
        if UploadDocumentReferenceDetails is None:
            self.UploadDocumentReferenceDetails = []
        else:
            self.UploadDocumentReferenceDetails = UploadDocumentReferenceDetails
        self.UploadDocumentReferenceDetails_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CompletedEtdDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CompletedEtdDetail.subclass:
            return CompletedEtdDetail.subclass(*args_, **kwargs_)
        else:
            return CompletedEtdDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FolderId(self):
        return self.FolderId
    def set_FolderId(self, FolderId):
        self.FolderId = FolderId
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_UploadDocumentReferenceDetails(self):
        return self.UploadDocumentReferenceDetails
    def set_UploadDocumentReferenceDetails(self, UploadDocumentReferenceDetails):
        self.UploadDocumentReferenceDetails = UploadDocumentReferenceDetails
    def add_UploadDocumentReferenceDetails(self, value):
        self.UploadDocumentReferenceDetails.append(value)
    def insert_UploadDocumentReferenceDetails_at(self, index, value):
        self.UploadDocumentReferenceDetails.insert(index, value)
    def replace_UploadDocumentReferenceDetails_at(self, index, value):
        self.UploadDocumentReferenceDetails[index] = value
    def validate_CompletedEtdType(self, value):
        result = True
        # Validate type CompletedEtdType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ELECTRONIC_DOCUMENTS_ONLY', 'ELECTRONIC_DOCUMENTS_WITH_ORIGINALS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CompletedEtdType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.FolderId is not None or
            self.Type is not None or
            self.UploadDocumentReferenceDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompletedEtdDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CompletedEtdDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CompletedEtdDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CompletedEtdDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CompletedEtdDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CompletedEtdDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompletedEtdDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FolderId is not None:
            namespaceprefix_ = self.FolderId_nsprefix_ + ':' if (UseCapturedNS_ and self.FolderId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFolderId>%s</%sFolderId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FolderId), input_name='FolderId')), namespaceprefix_ , eol_))
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        for UploadDocumentReferenceDetails_ in self.UploadDocumentReferenceDetails:
            namespaceprefix_ = self.UploadDocumentReferenceDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.UploadDocumentReferenceDetails_nsprefix_) else ''
            UploadDocumentReferenceDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UploadDocumentReferenceDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FolderId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FolderId')
            value_ = self.gds_validate_string(value_, node, 'FolderId')
            self.FolderId = value_
            self.FolderId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type CompletedEtdType
            self.validate_CompletedEtdType(self.Type)
        elif nodeName_ == 'UploadDocumentReferenceDetails':
            obj_ = UploadDocumentReferenceDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UploadDocumentReferenceDetails.append(obj_)
            obj_.original_tagname_ = 'UploadDocumentReferenceDetails'
# end class CompletedEtdDetail


class CompletedHazardousPackageDetail(GeneratedsSuper):
    """Completed package-level hazardous commodity information for a single
    package."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ReferenceId=None, Accessibility=None, CargoAircraftOnly=None, Regulation=None, RadioactiveTransportIndex=None, LabelType=None, Containers=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ReferenceId = ReferenceId
        self.ReferenceId_nsprefix_ = None
        self.Accessibility = Accessibility
        self.validate_DangerousGoodsAccessibilityType(self.Accessibility)
        self.Accessibility_nsprefix_ = None
        self.CargoAircraftOnly = CargoAircraftOnly
        self.CargoAircraftOnly_nsprefix_ = None
        self.Regulation = Regulation
        self.validate_HazardousCommodityRegulationType(self.Regulation)
        self.Regulation_nsprefix_ = None
        self.RadioactiveTransportIndex = RadioactiveTransportIndex
        self.RadioactiveTransportIndex_nsprefix_ = None
        self.LabelType = LabelType
        self.validate_RadioactiveLabelType(self.LabelType)
        self.LabelType_nsprefix_ = None
        if Containers is None:
            self.Containers = []
        else:
            self.Containers = Containers
        self.Containers_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CompletedHazardousPackageDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CompletedHazardousPackageDetail.subclass:
            return CompletedHazardousPackageDetail.subclass(*args_, **kwargs_)
        else:
            return CompletedHazardousPackageDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ReferenceId(self):
        return self.ReferenceId
    def set_ReferenceId(self, ReferenceId):
        self.ReferenceId = ReferenceId
    def get_Accessibility(self):
        return self.Accessibility
    def set_Accessibility(self, Accessibility):
        self.Accessibility = Accessibility
    def get_CargoAircraftOnly(self):
        return self.CargoAircraftOnly
    def set_CargoAircraftOnly(self, CargoAircraftOnly):
        self.CargoAircraftOnly = CargoAircraftOnly
    def get_Regulation(self):
        return self.Regulation
    def set_Regulation(self, Regulation):
        self.Regulation = Regulation
    def get_RadioactiveTransportIndex(self):
        return self.RadioactiveTransportIndex
    def set_RadioactiveTransportIndex(self, RadioactiveTransportIndex):
        self.RadioactiveTransportIndex = RadioactiveTransportIndex
    def get_LabelType(self):
        return self.LabelType
    def set_LabelType(self, LabelType):
        self.LabelType = LabelType
    def get_Containers(self):
        return self.Containers
    def set_Containers(self, Containers):
        self.Containers = Containers
    def add_Containers(self, value):
        self.Containers.append(value)
    def insert_Containers_at(self, index, value):
        self.Containers.insert(index, value)
    def replace_Containers_at(self, index, value):
        self.Containers[index] = value
    def validate_DangerousGoodsAccessibilityType(self, value):
        result = True
        # Validate type DangerousGoodsAccessibilityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACCESSIBLE', 'INACCESSIBLE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DangerousGoodsAccessibilityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_HazardousCommodityRegulationType(self, value):
        result = True
        # Validate type HazardousCommodityRegulationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ADR', 'DOT', 'IATA', 'ORMD']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on HazardousCommodityRegulationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_RadioactiveLabelType(self, value):
        result = True
        # Validate type RadioactiveLabelType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['III_YELLOW', 'II_YELLOW', 'I_WHITE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RadioactiveLabelType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.ReferenceId is not None or
            self.Accessibility is not None or
            self.CargoAircraftOnly is not None or
            self.Regulation is not None or
            self.RadioactiveTransportIndex is not None or
            self.LabelType is not None or
            self.Containers
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompletedHazardousPackageDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CompletedHazardousPackageDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CompletedHazardousPackageDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CompletedHazardousPackageDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CompletedHazardousPackageDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CompletedHazardousPackageDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompletedHazardousPackageDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReferenceId is not None:
            namespaceprefix_ = self.ReferenceId_nsprefix_ + ':' if (UseCapturedNS_ and self.ReferenceId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceId>%s</%sReferenceId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceId), input_name='ReferenceId')), namespaceprefix_ , eol_))
        if self.Accessibility is not None:
            namespaceprefix_ = self.Accessibility_nsprefix_ + ':' if (UseCapturedNS_ and self.Accessibility_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccessibility>%s</%sAccessibility>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Accessibility), input_name='Accessibility')), namespaceprefix_ , eol_))
        if self.CargoAircraftOnly is not None:
            namespaceprefix_ = self.CargoAircraftOnly_nsprefix_ + ':' if (UseCapturedNS_ and self.CargoAircraftOnly_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCargoAircraftOnly>%s</%sCargoAircraftOnly>%s' % (namespaceprefix_ , self.gds_format_boolean(self.CargoAircraftOnly, input_name='CargoAircraftOnly'), namespaceprefix_ , eol_))
        if self.Regulation is not None:
            namespaceprefix_ = self.Regulation_nsprefix_ + ':' if (UseCapturedNS_ and self.Regulation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegulation>%s</%sRegulation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Regulation), input_name='Regulation')), namespaceprefix_ , eol_))
        if self.RadioactiveTransportIndex is not None:
            namespaceprefix_ = self.RadioactiveTransportIndex_nsprefix_ + ':' if (UseCapturedNS_ and self.RadioactiveTransportIndex_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRadioactiveTransportIndex>%s</%sRadioactiveTransportIndex>%s' % (namespaceprefix_ , self.gds_format_decimal(self.RadioactiveTransportIndex, input_name='RadioactiveTransportIndex'), namespaceprefix_ , eol_))
        if self.LabelType is not None:
            namespaceprefix_ = self.LabelType_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelType>%s</%sLabelType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LabelType), input_name='LabelType')), namespaceprefix_ , eol_))
        for Containers_ in self.Containers:
            namespaceprefix_ = self.Containers_nsprefix_ + ':' if (UseCapturedNS_ and self.Containers_nsprefix_) else ''
            Containers_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Containers', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ReferenceId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ReferenceId')
            value_ = self.gds_validate_string(value_, node, 'ReferenceId')
            self.ReferenceId = value_
            self.ReferenceId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Accessibility':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Accessibility')
            value_ = self.gds_validate_string(value_, node, 'Accessibility')
            self.Accessibility = value_
            self.Accessibility_nsprefix_ = child_.prefix
            # validate type DangerousGoodsAccessibilityType
            self.validate_DangerousGoodsAccessibilityType(self.Accessibility)
        elif nodeName_ == 'CargoAircraftOnly':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'CargoAircraftOnly')
            ival_ = self.gds_validate_boolean(ival_, node, 'CargoAircraftOnly')
            self.CargoAircraftOnly = ival_
            self.CargoAircraftOnly_nsprefix_ = child_.prefix
        elif nodeName_ == 'Regulation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Regulation')
            value_ = self.gds_validate_string(value_, node, 'Regulation')
            self.Regulation = value_
            self.Regulation_nsprefix_ = child_.prefix
            # validate type HazardousCommodityRegulationType
            self.validate_HazardousCommodityRegulationType(self.Regulation)
        elif nodeName_ == 'RadioactiveTransportIndex' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'RadioactiveTransportIndex')
            fval_ = self.gds_validate_decimal(fval_, node, 'RadioactiveTransportIndex')
            self.RadioactiveTransportIndex = fval_
            self.RadioactiveTransportIndex_nsprefix_ = child_.prefix
        elif nodeName_ == 'LabelType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelType')
            value_ = self.gds_validate_string(value_, node, 'LabelType')
            self.LabelType = value_
            self.LabelType_nsprefix_ = child_.prefix
            # validate type RadioactiveLabelType
            self.validate_RadioactiveLabelType(self.LabelType)
        elif nodeName_ == 'Containers':
            obj_ = ValidatedHazardousContainer.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Containers.append(obj_)
            obj_.original_tagname_ = 'Containers'
# end class CompletedHazardousPackageDetail


class CompletedHazardousShipmentDetail(GeneratedsSuper):
    """Computed shipment level hazardous commodity information."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HazardousSummaryDetail=None, DryIceDetail=None, AdrLicense=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HazardousSummaryDetail = HazardousSummaryDetail
        self.HazardousSummaryDetail_nsprefix_ = None
        self.DryIceDetail = DryIceDetail
        self.DryIceDetail_nsprefix_ = None
        self.AdrLicense = AdrLicense
        self.AdrLicense_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CompletedHazardousShipmentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CompletedHazardousShipmentDetail.subclass:
            return CompletedHazardousShipmentDetail.subclass(*args_, **kwargs_)
        else:
            return CompletedHazardousShipmentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HazardousSummaryDetail(self):
        return self.HazardousSummaryDetail
    def set_HazardousSummaryDetail(self, HazardousSummaryDetail):
        self.HazardousSummaryDetail = HazardousSummaryDetail
    def get_DryIceDetail(self):
        return self.DryIceDetail
    def set_DryIceDetail(self, DryIceDetail):
        self.DryIceDetail = DryIceDetail
    def get_AdrLicense(self):
        return self.AdrLicense
    def set_AdrLicense(self, AdrLicense):
        self.AdrLicense = AdrLicense
    def hasContent_(self):
        if (
            self.HazardousSummaryDetail is not None or
            self.DryIceDetail is not None or
            self.AdrLicense is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompletedHazardousShipmentDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CompletedHazardousShipmentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CompletedHazardousShipmentDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CompletedHazardousShipmentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CompletedHazardousShipmentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CompletedHazardousShipmentDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompletedHazardousShipmentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HazardousSummaryDetail is not None:
            namespaceprefix_ = self.HazardousSummaryDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.HazardousSummaryDetail_nsprefix_) else ''
            self.HazardousSummaryDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HazardousSummaryDetail', pretty_print=pretty_print)
        if self.DryIceDetail is not None:
            namespaceprefix_ = self.DryIceDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.DryIceDetail_nsprefix_) else ''
            self.DryIceDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DryIceDetail', pretty_print=pretty_print)
        if self.AdrLicense is not None:
            namespaceprefix_ = self.AdrLicense_nsprefix_ + ':' if (UseCapturedNS_ and self.AdrLicense_nsprefix_) else ''
            self.AdrLicense.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AdrLicense', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HazardousSummaryDetail':
            obj_ = CompletedHazardousSummaryDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HazardousSummaryDetail = obj_
            obj_.original_tagname_ = 'HazardousSummaryDetail'
        elif nodeName_ == 'DryIceDetail':
            obj_ = ShipmentDryIceDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DryIceDetail = obj_
            obj_.original_tagname_ = 'DryIceDetail'
        elif nodeName_ == 'AdrLicense':
            obj_ = AdrLicenseDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AdrLicense = obj_
            obj_.original_tagname_ = 'AdrLicense'
# end class CompletedHazardousShipmentDetail


class CompletedHazardousSummaryDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SmallQuantityExceptionPackageCount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.SmallQuantityExceptionPackageCount = SmallQuantityExceptionPackageCount
        self.SmallQuantityExceptionPackageCount_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CompletedHazardousSummaryDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CompletedHazardousSummaryDetail.subclass:
            return CompletedHazardousSummaryDetail.subclass(*args_, **kwargs_)
        else:
            return CompletedHazardousSummaryDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SmallQuantityExceptionPackageCount(self):
        return self.SmallQuantityExceptionPackageCount
    def set_SmallQuantityExceptionPackageCount(self, SmallQuantityExceptionPackageCount):
        self.SmallQuantityExceptionPackageCount = SmallQuantityExceptionPackageCount
    def hasContent_(self):
        if (
            self.SmallQuantityExceptionPackageCount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompletedHazardousSummaryDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CompletedHazardousSummaryDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CompletedHazardousSummaryDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CompletedHazardousSummaryDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CompletedHazardousSummaryDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CompletedHazardousSummaryDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompletedHazardousSummaryDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SmallQuantityExceptionPackageCount is not None:
            namespaceprefix_ = self.SmallQuantityExceptionPackageCount_nsprefix_ + ':' if (UseCapturedNS_ and self.SmallQuantityExceptionPackageCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSmallQuantityExceptionPackageCount>%s</%sSmallQuantityExceptionPackageCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.SmallQuantityExceptionPackageCount, input_name='SmallQuantityExceptionPackageCount'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SmallQuantityExceptionPackageCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'SmallQuantityExceptionPackageCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'SmallQuantityExceptionPackageCount')
            self.SmallQuantityExceptionPackageCount = ival_
            self.SmallQuantityExceptionPackageCount_nsprefix_ = child_.prefix
# end class CompletedHazardousSummaryDetail


class CompletedHoldAtLocationDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HoldingLocation=None, HoldingLocationType=None, HoldingLocationTypeForDisplay=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HoldingLocation = HoldingLocation
        self.HoldingLocation_nsprefix_ = None
        self.HoldingLocationType = HoldingLocationType
        self.validate_FedExLocationType(self.HoldingLocationType)
        self.HoldingLocationType_nsprefix_ = None
        self.HoldingLocationTypeForDisplay = HoldingLocationTypeForDisplay
        self.HoldingLocationTypeForDisplay_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CompletedHoldAtLocationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CompletedHoldAtLocationDetail.subclass:
            return CompletedHoldAtLocationDetail.subclass(*args_, **kwargs_)
        else:
            return CompletedHoldAtLocationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HoldingLocation(self):
        return self.HoldingLocation
    def set_HoldingLocation(self, HoldingLocation):
        self.HoldingLocation = HoldingLocation
    def get_HoldingLocationType(self):
        return self.HoldingLocationType
    def set_HoldingLocationType(self, HoldingLocationType):
        self.HoldingLocationType = HoldingLocationType
    def get_HoldingLocationTypeForDisplay(self):
        return self.HoldingLocationTypeForDisplay
    def set_HoldingLocationTypeForDisplay(self, HoldingLocationTypeForDisplay):
        self.HoldingLocationTypeForDisplay = HoldingLocationTypeForDisplay
    def validate_FedExLocationType(self, value):
        result = True
        # Validate type FedExLocationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_AUTHORIZED_SHIP_CENTER', 'FEDEX_EXPRESS_STATION', 'FEDEX_FACILITY', 'FEDEX_FREIGHT_SERVICE_CENTER', 'FEDEX_GROUND_TERMINAL', 'FEDEX_HOME_DELIVERY_STATION', 'FEDEX_OFFICE', 'FEDEX_ONSITE', 'FEDEX_SELF_SERVICE_LOCATION', 'FEDEX_SHIPSITE', 'FEDEX_SHIP_AND_GET', 'FEDEX_SMART_POST_HUB']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FedExLocationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.HoldingLocation is not None or
            self.HoldingLocationType is not None or
            self.HoldingLocationTypeForDisplay is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompletedHoldAtLocationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CompletedHoldAtLocationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CompletedHoldAtLocationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CompletedHoldAtLocationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CompletedHoldAtLocationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CompletedHoldAtLocationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompletedHoldAtLocationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HoldingLocation is not None:
            namespaceprefix_ = self.HoldingLocation_nsprefix_ + ':' if (UseCapturedNS_ and self.HoldingLocation_nsprefix_) else ''
            self.HoldingLocation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HoldingLocation', pretty_print=pretty_print)
        if self.HoldingLocationType is not None:
            namespaceprefix_ = self.HoldingLocationType_nsprefix_ + ':' if (UseCapturedNS_ and self.HoldingLocationType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHoldingLocationType>%s</%sHoldingLocationType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HoldingLocationType), input_name='HoldingLocationType')), namespaceprefix_ , eol_))
        if self.HoldingLocationTypeForDisplay is not None:
            namespaceprefix_ = self.HoldingLocationTypeForDisplay_nsprefix_ + ':' if (UseCapturedNS_ and self.HoldingLocationTypeForDisplay_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHoldingLocationTypeForDisplay>%s</%sHoldingLocationTypeForDisplay>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HoldingLocationTypeForDisplay), input_name='HoldingLocationTypeForDisplay')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HoldingLocation':
            obj_ = ContactAndAddress.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HoldingLocation = obj_
            obj_.original_tagname_ = 'HoldingLocation'
        elif nodeName_ == 'HoldingLocationType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HoldingLocationType')
            value_ = self.gds_validate_string(value_, node, 'HoldingLocationType')
            self.HoldingLocationType = value_
            self.HoldingLocationType_nsprefix_ = child_.prefix
            # validate type FedExLocationType
            self.validate_FedExLocationType(self.HoldingLocationType)
        elif nodeName_ == 'HoldingLocationTypeForDisplay':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HoldingLocationTypeForDisplay')
            value_ = self.gds_validate_string(value_, node, 'HoldingLocationTypeForDisplay')
            self.HoldingLocationTypeForDisplay = value_
            self.HoldingLocationTypeForDisplay_nsprefix_ = child_.prefix
# end class CompletedHoldAtLocationDetail


class CompletedPackageDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SequenceNumber=None, TrackingIds=None, GroupNumber=None, OversizeClass=None, PackageRating=None, SpecialServiceDescriptions=None, OperationalDetail=None, Label=None, PackageDocuments=None, CodReturnDetail=None, SignatureOption=None, DryIceWeight=None, HazardousPackageDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.SequenceNumber = SequenceNumber
        self.SequenceNumber_nsprefix_ = None
        if TrackingIds is None:
            self.TrackingIds = []
        else:
            self.TrackingIds = TrackingIds
        self.TrackingIds_nsprefix_ = None
        self.GroupNumber = GroupNumber
        self.GroupNumber_nsprefix_ = None
        self.OversizeClass = OversizeClass
        self.validate_OversizeClassType(self.OversizeClass)
        self.OversizeClass_nsprefix_ = None
        self.PackageRating = PackageRating
        self.PackageRating_nsprefix_ = None
        if SpecialServiceDescriptions is None:
            self.SpecialServiceDescriptions = []
        else:
            self.SpecialServiceDescriptions = SpecialServiceDescriptions
        self.SpecialServiceDescriptions_nsprefix_ = None
        self.OperationalDetail = OperationalDetail
        self.OperationalDetail_nsprefix_ = None
        self.Label = Label
        self.Label_nsprefix_ = None
        if PackageDocuments is None:
            self.PackageDocuments = []
        else:
            self.PackageDocuments = PackageDocuments
        self.PackageDocuments_nsprefix_ = None
        self.CodReturnDetail = CodReturnDetail
        self.CodReturnDetail_nsprefix_ = None
        self.SignatureOption = SignatureOption
        self.validate_SignatureOptionType(self.SignatureOption)
        self.SignatureOption_nsprefix_ = None
        self.DryIceWeight = DryIceWeight
        self.DryIceWeight_nsprefix_ = None
        self.HazardousPackageDetail = HazardousPackageDetail
        self.HazardousPackageDetail_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CompletedPackageDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CompletedPackageDetail.subclass:
            return CompletedPackageDetail.subclass(*args_, **kwargs_)
        else:
            return CompletedPackageDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SequenceNumber(self):
        return self.SequenceNumber
    def set_SequenceNumber(self, SequenceNumber):
        self.SequenceNumber = SequenceNumber
    def get_TrackingIds(self):
        return self.TrackingIds
    def set_TrackingIds(self, TrackingIds):
        self.TrackingIds = TrackingIds
    def add_TrackingIds(self, value):
        self.TrackingIds.append(value)
    def insert_TrackingIds_at(self, index, value):
        self.TrackingIds.insert(index, value)
    def replace_TrackingIds_at(self, index, value):
        self.TrackingIds[index] = value
    def get_GroupNumber(self):
        return self.GroupNumber
    def set_GroupNumber(self, GroupNumber):
        self.GroupNumber = GroupNumber
    def get_OversizeClass(self):
        return self.OversizeClass
    def set_OversizeClass(self, OversizeClass):
        self.OversizeClass = OversizeClass
    def get_PackageRating(self):
        return self.PackageRating
    def set_PackageRating(self, PackageRating):
        self.PackageRating = PackageRating
    def get_SpecialServiceDescriptions(self):
        return self.SpecialServiceDescriptions
    def set_SpecialServiceDescriptions(self, SpecialServiceDescriptions):
        self.SpecialServiceDescriptions = SpecialServiceDescriptions
    def add_SpecialServiceDescriptions(self, value):
        self.SpecialServiceDescriptions.append(value)
    def insert_SpecialServiceDescriptions_at(self, index, value):
        self.SpecialServiceDescriptions.insert(index, value)
    def replace_SpecialServiceDescriptions_at(self, index, value):
        self.SpecialServiceDescriptions[index] = value
    def get_OperationalDetail(self):
        return self.OperationalDetail
    def set_OperationalDetail(self, OperationalDetail):
        self.OperationalDetail = OperationalDetail
    def get_Label(self):
        return self.Label
    def set_Label(self, Label):
        self.Label = Label
    def get_PackageDocuments(self):
        return self.PackageDocuments
    def set_PackageDocuments(self, PackageDocuments):
        self.PackageDocuments = PackageDocuments
    def add_PackageDocuments(self, value):
        self.PackageDocuments.append(value)
    def insert_PackageDocuments_at(self, index, value):
        self.PackageDocuments.insert(index, value)
    def replace_PackageDocuments_at(self, index, value):
        self.PackageDocuments[index] = value
    def get_CodReturnDetail(self):
        return self.CodReturnDetail
    def set_CodReturnDetail(self, CodReturnDetail):
        self.CodReturnDetail = CodReturnDetail
    def get_SignatureOption(self):
        return self.SignatureOption
    def set_SignatureOption(self, SignatureOption):
        self.SignatureOption = SignatureOption
    def get_DryIceWeight(self):
        return self.DryIceWeight
    def set_DryIceWeight(self, DryIceWeight):
        self.DryIceWeight = DryIceWeight
    def get_HazardousPackageDetail(self):
        return self.HazardousPackageDetail
    def set_HazardousPackageDetail(self, HazardousPackageDetail):
        self.HazardousPackageDetail = HazardousPackageDetail
    def validate_OversizeClassType(self, value):
        result = True
        # Validate type OversizeClassType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['OVERSIZE_1', 'OVERSIZE_2', 'OVERSIZE_3']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on OversizeClassType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_SignatureOptionType(self, value):
        result = True
        # Validate type SignatureOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ADULT', 'DIRECT', 'INDIRECT', 'NO_SIGNATURE_REQUIRED', 'SERVICE_DEFAULT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SignatureOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.SequenceNumber is not None or
            self.TrackingIds or
            self.GroupNumber is not None or
            self.OversizeClass is not None or
            self.PackageRating is not None or
            self.SpecialServiceDescriptions or
            self.OperationalDetail is not None or
            self.Label is not None or
            self.PackageDocuments or
            self.CodReturnDetail is not None or
            self.SignatureOption is not None or
            self.DryIceWeight is not None or
            self.HazardousPackageDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompletedPackageDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CompletedPackageDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CompletedPackageDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CompletedPackageDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CompletedPackageDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CompletedPackageDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompletedPackageDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SequenceNumber is not None:
            namespaceprefix_ = self.SequenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.SequenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSequenceNumber>%s</%sSequenceNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.SequenceNumber, input_name='SequenceNumber'), namespaceprefix_ , eol_))
        for TrackingIds_ in self.TrackingIds:
            namespaceprefix_ = self.TrackingIds_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingIds_nsprefix_) else ''
            TrackingIds_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TrackingIds', pretty_print=pretty_print)
        if self.GroupNumber is not None:
            namespaceprefix_ = self.GroupNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.GroupNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroupNumber>%s</%sGroupNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.GroupNumber, input_name='GroupNumber'), namespaceprefix_ , eol_))
        if self.OversizeClass is not None:
            namespaceprefix_ = self.OversizeClass_nsprefix_ + ':' if (UseCapturedNS_ and self.OversizeClass_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOversizeClass>%s</%sOversizeClass>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OversizeClass), input_name='OversizeClass')), namespaceprefix_ , eol_))
        if self.PackageRating is not None:
            namespaceprefix_ = self.PackageRating_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageRating_nsprefix_) else ''
            self.PackageRating.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackageRating', pretty_print=pretty_print)
        for SpecialServiceDescriptions_ in self.SpecialServiceDescriptions:
            namespaceprefix_ = self.SpecialServiceDescriptions_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialServiceDescriptions_nsprefix_) else ''
            SpecialServiceDescriptions_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SpecialServiceDescriptions', pretty_print=pretty_print)
        if self.OperationalDetail is not None:
            namespaceprefix_ = self.OperationalDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.OperationalDetail_nsprefix_) else ''
            self.OperationalDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OperationalDetail', pretty_print=pretty_print)
        if self.Label is not None:
            namespaceprefix_ = self.Label_nsprefix_ + ':' if (UseCapturedNS_ and self.Label_nsprefix_) else ''
            self.Label.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Label', pretty_print=pretty_print)
        for PackageDocuments_ in self.PackageDocuments:
            namespaceprefix_ = self.PackageDocuments_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageDocuments_nsprefix_) else ''
            PackageDocuments_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackageDocuments', pretty_print=pretty_print)
        if self.CodReturnDetail is not None:
            namespaceprefix_ = self.CodReturnDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CodReturnDetail_nsprefix_) else ''
            self.CodReturnDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CodReturnDetail', pretty_print=pretty_print)
        if self.SignatureOption is not None:
            namespaceprefix_ = self.SignatureOption_nsprefix_ + ':' if (UseCapturedNS_ and self.SignatureOption_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSignatureOption>%s</%sSignatureOption>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SignatureOption), input_name='SignatureOption')), namespaceprefix_ , eol_))
        if self.DryIceWeight is not None:
            namespaceprefix_ = self.DryIceWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.DryIceWeight_nsprefix_) else ''
            self.DryIceWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DryIceWeight', pretty_print=pretty_print)
        if self.HazardousPackageDetail is not None:
            namespaceprefix_ = self.HazardousPackageDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.HazardousPackageDetail_nsprefix_) else ''
            self.HazardousPackageDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HazardousPackageDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SequenceNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'SequenceNumber')
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'SequenceNumber')
            self.SequenceNumber = ival_
            self.SequenceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'TrackingIds':
            obj_ = TrackingId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TrackingIds.append(obj_)
            obj_.original_tagname_ = 'TrackingIds'
        elif nodeName_ == 'GroupNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'GroupNumber')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'GroupNumber')
            self.GroupNumber = ival_
            self.GroupNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'OversizeClass':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OversizeClass')
            value_ = self.gds_validate_string(value_, node, 'OversizeClass')
            self.OversizeClass = value_
            self.OversizeClass_nsprefix_ = child_.prefix
            # validate type OversizeClassType
            self.validate_OversizeClassType(self.OversizeClass)
        elif nodeName_ == 'PackageRating':
            obj_ = PackageRating.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackageRating = obj_
            obj_.original_tagname_ = 'PackageRating'
        elif nodeName_ == 'SpecialServiceDescriptions':
            obj_ = SpecialServiceDescription.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SpecialServiceDescriptions.append(obj_)
            obj_.original_tagname_ = 'SpecialServiceDescriptions'
        elif nodeName_ == 'OperationalDetail':
            obj_ = PackageOperationalDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OperationalDetail = obj_
            obj_.original_tagname_ = 'OperationalDetail'
        elif nodeName_ == 'Label':
            obj_ = ShippingDocument.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Label = obj_
            obj_.original_tagname_ = 'Label'
        elif nodeName_ == 'PackageDocuments':
            obj_ = ShippingDocument.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackageDocuments.append(obj_)
            obj_.original_tagname_ = 'PackageDocuments'
        elif nodeName_ == 'CodReturnDetail':
            obj_ = CodReturnPackageDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CodReturnDetail = obj_
            obj_.original_tagname_ = 'CodReturnDetail'
        elif nodeName_ == 'SignatureOption':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SignatureOption')
            value_ = self.gds_validate_string(value_, node, 'SignatureOption')
            self.SignatureOption = value_
            self.SignatureOption_nsprefix_ = child_.prefix
            # validate type SignatureOptionType
            self.validate_SignatureOptionType(self.SignatureOption)
        elif nodeName_ == 'DryIceWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DryIceWeight = obj_
            obj_.original_tagname_ = 'DryIceWeight'
        elif nodeName_ == 'HazardousPackageDetail':
            obj_ = CompletedHazardousPackageDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HazardousPackageDetail = obj_
            obj_.original_tagname_ = 'HazardousPackageDetail'
# end class CompletedPackageDetail


class CompletedShipmentDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UsDomestic=None, CarrierCode=None, MasterTrackingId=None, ServiceDescription=None, PackagingDescription=None, SpecialServiceDescriptions=None, OperationalDetail=None, AccessDetail=None, TagDetail=None, SmartPostDetail=None, HazardousShipmentDetail=None, ShipmentRating=None, CompletedHoldAtLocationDetail=None, ExportComplianceStatement=None, DocumentRequirements=None, CompletedEtdDetail=None, ShipmentDocuments=None, AssociatedShipments=None, CompletedCodDetail=None, CompletedPackageDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UsDomestic = UsDomestic
        self.UsDomestic_nsprefix_ = None
        self.CarrierCode = CarrierCode
        self.validate_CarrierCodeType(self.CarrierCode)
        self.CarrierCode_nsprefix_ = None
        self.MasterTrackingId = MasterTrackingId
        self.MasterTrackingId_nsprefix_ = None
        self.ServiceDescription = ServiceDescription
        self.ServiceDescription_nsprefix_ = None
        self.PackagingDescription = PackagingDescription
        self.PackagingDescription_nsprefix_ = None
        if SpecialServiceDescriptions is None:
            self.SpecialServiceDescriptions = []
        else:
            self.SpecialServiceDescriptions = SpecialServiceDescriptions
        self.SpecialServiceDescriptions_nsprefix_ = None
        self.OperationalDetail = OperationalDetail
        self.OperationalDetail_nsprefix_ = None
        self.AccessDetail = AccessDetail
        self.AccessDetail_nsprefix_ = None
        self.TagDetail = TagDetail
        self.TagDetail_nsprefix_ = None
        self.SmartPostDetail = SmartPostDetail
        self.SmartPostDetail_nsprefix_ = None
        self.HazardousShipmentDetail = HazardousShipmentDetail
        self.HazardousShipmentDetail_nsprefix_ = None
        self.ShipmentRating = ShipmentRating
        self.ShipmentRating_nsprefix_ = None
        self.CompletedHoldAtLocationDetail = CompletedHoldAtLocationDetail
        self.CompletedHoldAtLocationDetail_nsprefix_ = None
        self.ExportComplianceStatement = ExportComplianceStatement
        self.ExportComplianceStatement_nsprefix_ = None
        self.DocumentRequirements = DocumentRequirements
        self.DocumentRequirements_nsprefix_ = None
        self.CompletedEtdDetail = CompletedEtdDetail
        self.CompletedEtdDetail_nsprefix_ = None
        if ShipmentDocuments is None:
            self.ShipmentDocuments = []
        else:
            self.ShipmentDocuments = ShipmentDocuments
        self.ShipmentDocuments_nsprefix_ = None
        if AssociatedShipments is None:
            self.AssociatedShipments = []
        else:
            self.AssociatedShipments = AssociatedShipments
        self.AssociatedShipments_nsprefix_ = None
        self.CompletedCodDetail = CompletedCodDetail
        self.CompletedCodDetail_nsprefix_ = None
        if CompletedPackageDetails is None:
            self.CompletedPackageDetails = []
        else:
            self.CompletedPackageDetails = CompletedPackageDetails
        self.CompletedPackageDetails_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CompletedShipmentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CompletedShipmentDetail.subclass:
            return CompletedShipmentDetail.subclass(*args_, **kwargs_)
        else:
            return CompletedShipmentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UsDomestic(self):
        return self.UsDomestic
    def set_UsDomestic(self, UsDomestic):
        self.UsDomestic = UsDomestic
    def get_CarrierCode(self):
        return self.CarrierCode
    def set_CarrierCode(self, CarrierCode):
        self.CarrierCode = CarrierCode
    def get_MasterTrackingId(self):
        return self.MasterTrackingId
    def set_MasterTrackingId(self, MasterTrackingId):
        self.MasterTrackingId = MasterTrackingId
    def get_ServiceDescription(self):
        return self.ServiceDescription
    def set_ServiceDescription(self, ServiceDescription):
        self.ServiceDescription = ServiceDescription
    def get_PackagingDescription(self):
        return self.PackagingDescription
    def set_PackagingDescription(self, PackagingDescription):
        self.PackagingDescription = PackagingDescription
    def get_SpecialServiceDescriptions(self):
        return self.SpecialServiceDescriptions
    def set_SpecialServiceDescriptions(self, SpecialServiceDescriptions):
        self.SpecialServiceDescriptions = SpecialServiceDescriptions
    def add_SpecialServiceDescriptions(self, value):
        self.SpecialServiceDescriptions.append(value)
    def insert_SpecialServiceDescriptions_at(self, index, value):
        self.SpecialServiceDescriptions.insert(index, value)
    def replace_SpecialServiceDescriptions_at(self, index, value):
        self.SpecialServiceDescriptions[index] = value
    def get_OperationalDetail(self):
        return self.OperationalDetail
    def set_OperationalDetail(self, OperationalDetail):
        self.OperationalDetail = OperationalDetail
    def get_AccessDetail(self):
        return self.AccessDetail
    def set_AccessDetail(self, AccessDetail):
        self.AccessDetail = AccessDetail
    def get_TagDetail(self):
        return self.TagDetail
    def set_TagDetail(self, TagDetail):
        self.TagDetail = TagDetail
    def get_SmartPostDetail(self):
        return self.SmartPostDetail
    def set_SmartPostDetail(self, SmartPostDetail):
        self.SmartPostDetail = SmartPostDetail
    def get_HazardousShipmentDetail(self):
        return self.HazardousShipmentDetail
    def set_HazardousShipmentDetail(self, HazardousShipmentDetail):
        self.HazardousShipmentDetail = HazardousShipmentDetail
    def get_ShipmentRating(self):
        return self.ShipmentRating
    def set_ShipmentRating(self, ShipmentRating):
        self.ShipmentRating = ShipmentRating
    def get_CompletedHoldAtLocationDetail(self):
        return self.CompletedHoldAtLocationDetail
    def set_CompletedHoldAtLocationDetail(self, CompletedHoldAtLocationDetail):
        self.CompletedHoldAtLocationDetail = CompletedHoldAtLocationDetail
    def get_ExportComplianceStatement(self):
        return self.ExportComplianceStatement
    def set_ExportComplianceStatement(self, ExportComplianceStatement):
        self.ExportComplianceStatement = ExportComplianceStatement
    def get_DocumentRequirements(self):
        return self.DocumentRequirements
    def set_DocumentRequirements(self, DocumentRequirements):
        self.DocumentRequirements = DocumentRequirements
    def get_CompletedEtdDetail(self):
        return self.CompletedEtdDetail
    def set_CompletedEtdDetail(self, CompletedEtdDetail):
        self.CompletedEtdDetail = CompletedEtdDetail
    def get_ShipmentDocuments(self):
        return self.ShipmentDocuments
    def set_ShipmentDocuments(self, ShipmentDocuments):
        self.ShipmentDocuments = ShipmentDocuments
    def add_ShipmentDocuments(self, value):
        self.ShipmentDocuments.append(value)
    def insert_ShipmentDocuments_at(self, index, value):
        self.ShipmentDocuments.insert(index, value)
    def replace_ShipmentDocuments_at(self, index, value):
        self.ShipmentDocuments[index] = value
    def get_AssociatedShipments(self):
        return self.AssociatedShipments
    def set_AssociatedShipments(self, AssociatedShipments):
        self.AssociatedShipments = AssociatedShipments
    def add_AssociatedShipments(self, value):
        self.AssociatedShipments.append(value)
    def insert_AssociatedShipments_at(self, index, value):
        self.AssociatedShipments.insert(index, value)
    def replace_AssociatedShipments_at(self, index, value):
        self.AssociatedShipments[index] = value
    def get_CompletedCodDetail(self):
        return self.CompletedCodDetail
    def set_CompletedCodDetail(self, CompletedCodDetail):
        self.CompletedCodDetail = CompletedCodDetail
    def get_CompletedPackageDetails(self):
        return self.CompletedPackageDetails
    def set_CompletedPackageDetails(self, CompletedPackageDetails):
        self.CompletedPackageDetails = CompletedPackageDetails
    def add_CompletedPackageDetails(self, value):
        self.CompletedPackageDetails.append(value)
    def insert_CompletedPackageDetails_at(self, index, value):
        self.CompletedPackageDetails.insert(index, value)
    def replace_CompletedPackageDetails_at(self, index, value):
        self.CompletedPackageDetails[index] = value
    def validate_CarrierCodeType(self, value):
        result = True
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FXCC', 'FXFR', 'FXSP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CarrierCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.UsDomestic is not None or
            self.CarrierCode is not None or
            self.MasterTrackingId is not None or
            self.ServiceDescription is not None or
            self.PackagingDescription is not None or
            self.SpecialServiceDescriptions or
            self.OperationalDetail is not None or
            self.AccessDetail is not None or
            self.TagDetail is not None or
            self.SmartPostDetail is not None or
            self.HazardousShipmentDetail is not None or
            self.ShipmentRating is not None or
            self.CompletedHoldAtLocationDetail is not None or
            self.ExportComplianceStatement is not None or
            self.DocumentRequirements is not None or
            self.CompletedEtdDetail is not None or
            self.ShipmentDocuments or
            self.AssociatedShipments or
            self.CompletedCodDetail is not None or
            self.CompletedPackageDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompletedShipmentDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CompletedShipmentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CompletedShipmentDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CompletedShipmentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CompletedShipmentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CompletedShipmentDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompletedShipmentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UsDomestic is not None:
            namespaceprefix_ = self.UsDomestic_nsprefix_ + ':' if (UseCapturedNS_ and self.UsDomestic_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUsDomestic>%s</%sUsDomestic>%s' % (namespaceprefix_ , self.gds_format_boolean(self.UsDomestic, input_name='UsDomestic'), namespaceprefix_ , eol_))
        if self.CarrierCode is not None:
            namespaceprefix_ = self.CarrierCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CarrierCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierCode>%s</%sCarrierCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CarrierCode), input_name='CarrierCode')), namespaceprefix_ , eol_))
        if self.MasterTrackingId is not None:
            namespaceprefix_ = self.MasterTrackingId_nsprefix_ + ':' if (UseCapturedNS_ and self.MasterTrackingId_nsprefix_) else ''
            self.MasterTrackingId.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MasterTrackingId', pretty_print=pretty_print)
        if self.ServiceDescription is not None:
            namespaceprefix_ = self.ServiceDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceDescription_nsprefix_) else ''
            self.ServiceDescription.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ServiceDescription', pretty_print=pretty_print)
        if self.PackagingDescription is not None:
            namespaceprefix_ = self.PackagingDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.PackagingDescription_nsprefix_) else ''
            self.PackagingDescription.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackagingDescription', pretty_print=pretty_print)
        for SpecialServiceDescriptions_ in self.SpecialServiceDescriptions:
            namespaceprefix_ = self.SpecialServiceDescriptions_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialServiceDescriptions_nsprefix_) else ''
            SpecialServiceDescriptions_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SpecialServiceDescriptions', pretty_print=pretty_print)
        if self.OperationalDetail is not None:
            namespaceprefix_ = self.OperationalDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.OperationalDetail_nsprefix_) else ''
            self.OperationalDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OperationalDetail', pretty_print=pretty_print)
        if self.AccessDetail is not None:
            namespaceprefix_ = self.AccessDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.AccessDetail_nsprefix_) else ''
            self.AccessDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AccessDetail', pretty_print=pretty_print)
        if self.TagDetail is not None:
            namespaceprefix_ = self.TagDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TagDetail_nsprefix_) else ''
            self.TagDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TagDetail', pretty_print=pretty_print)
        if self.SmartPostDetail is not None:
            namespaceprefix_ = self.SmartPostDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.SmartPostDetail_nsprefix_) else ''
            self.SmartPostDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SmartPostDetail', pretty_print=pretty_print)
        if self.HazardousShipmentDetail is not None:
            namespaceprefix_ = self.HazardousShipmentDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.HazardousShipmentDetail_nsprefix_) else ''
            self.HazardousShipmentDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HazardousShipmentDetail', pretty_print=pretty_print)
        if self.ShipmentRating is not None:
            namespaceprefix_ = self.ShipmentRating_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentRating_nsprefix_) else ''
            self.ShipmentRating.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentRating', pretty_print=pretty_print)
        if self.CompletedHoldAtLocationDetail is not None:
            namespaceprefix_ = self.CompletedHoldAtLocationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CompletedHoldAtLocationDetail_nsprefix_) else ''
            self.CompletedHoldAtLocationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CompletedHoldAtLocationDetail', pretty_print=pretty_print)
        if self.ExportComplianceStatement is not None:
            namespaceprefix_ = self.ExportComplianceStatement_nsprefix_ + ':' if (UseCapturedNS_ and self.ExportComplianceStatement_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExportComplianceStatement>%s</%sExportComplianceStatement>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExportComplianceStatement), input_name='ExportComplianceStatement')), namespaceprefix_ , eol_))
        if self.DocumentRequirements is not None:
            namespaceprefix_ = self.DocumentRequirements_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentRequirements_nsprefix_) else ''
            self.DocumentRequirements.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocumentRequirements', pretty_print=pretty_print)
        if self.CompletedEtdDetail is not None:
            namespaceprefix_ = self.CompletedEtdDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CompletedEtdDetail_nsprefix_) else ''
            self.CompletedEtdDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CompletedEtdDetail', pretty_print=pretty_print)
        for ShipmentDocuments_ in self.ShipmentDocuments:
            namespaceprefix_ = self.ShipmentDocuments_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentDocuments_nsprefix_) else ''
            ShipmentDocuments_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentDocuments', pretty_print=pretty_print)
        for AssociatedShipments_ in self.AssociatedShipments:
            namespaceprefix_ = self.AssociatedShipments_nsprefix_ + ':' if (UseCapturedNS_ and self.AssociatedShipments_nsprefix_) else ''
            AssociatedShipments_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AssociatedShipments', pretty_print=pretty_print)
        if self.CompletedCodDetail is not None:
            namespaceprefix_ = self.CompletedCodDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CompletedCodDetail_nsprefix_) else ''
            self.CompletedCodDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CompletedCodDetail', pretty_print=pretty_print)
        for CompletedPackageDetails_ in self.CompletedPackageDetails:
            namespaceprefix_ = self.CompletedPackageDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.CompletedPackageDetails_nsprefix_) else ''
            CompletedPackageDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CompletedPackageDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UsDomestic':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'UsDomestic')
            ival_ = self.gds_validate_boolean(ival_, node, 'UsDomestic')
            self.UsDomestic = ival_
            self.UsDomestic_nsprefix_ = child_.prefix
        elif nodeName_ == 'CarrierCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CarrierCode')
            value_ = self.gds_validate_string(value_, node, 'CarrierCode')
            self.CarrierCode = value_
            self.CarrierCode_nsprefix_ = child_.prefix
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.CarrierCode)
        elif nodeName_ == 'MasterTrackingId':
            obj_ = TrackingId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MasterTrackingId = obj_
            obj_.original_tagname_ = 'MasterTrackingId'
        elif nodeName_ == 'ServiceDescription':
            obj_ = ServiceDescription.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ServiceDescription = obj_
            obj_.original_tagname_ = 'ServiceDescription'
        elif nodeName_ == 'PackagingDescription':
            obj_ = PackagingDescription.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackagingDescription = obj_
            obj_.original_tagname_ = 'PackagingDescription'
        elif nodeName_ == 'SpecialServiceDescriptions':
            obj_ = SpecialServiceDescription.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SpecialServiceDescriptions.append(obj_)
            obj_.original_tagname_ = 'SpecialServiceDescriptions'
        elif nodeName_ == 'OperationalDetail':
            obj_ = ShipmentOperationalDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OperationalDetail = obj_
            obj_.original_tagname_ = 'OperationalDetail'
        elif nodeName_ == 'AccessDetail':
            obj_ = PendingShipmentAccessDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AccessDetail = obj_
            obj_.original_tagname_ = 'AccessDetail'
        elif nodeName_ == 'TagDetail':
            obj_ = CompletedTagDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TagDetail = obj_
            obj_.original_tagname_ = 'TagDetail'
        elif nodeName_ == 'SmartPostDetail':
            obj_ = CompletedSmartPostDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SmartPostDetail = obj_
            obj_.original_tagname_ = 'SmartPostDetail'
        elif nodeName_ == 'HazardousShipmentDetail':
            obj_ = CompletedHazardousShipmentDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HazardousShipmentDetail = obj_
            obj_.original_tagname_ = 'HazardousShipmentDetail'
        elif nodeName_ == 'ShipmentRating':
            obj_ = ShipmentRating.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentRating = obj_
            obj_.original_tagname_ = 'ShipmentRating'
        elif nodeName_ == 'CompletedHoldAtLocationDetail':
            obj_ = CompletedHoldAtLocationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CompletedHoldAtLocationDetail = obj_
            obj_.original_tagname_ = 'CompletedHoldAtLocationDetail'
        elif nodeName_ == 'ExportComplianceStatement':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExportComplianceStatement')
            value_ = self.gds_validate_string(value_, node, 'ExportComplianceStatement')
            self.ExportComplianceStatement = value_
            self.ExportComplianceStatement_nsprefix_ = child_.prefix
        elif nodeName_ == 'DocumentRequirements':
            obj_ = DocumentRequirementsDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocumentRequirements = obj_
            obj_.original_tagname_ = 'DocumentRequirements'
        elif nodeName_ == 'CompletedEtdDetail':
            obj_ = CompletedEtdDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CompletedEtdDetail = obj_
            obj_.original_tagname_ = 'CompletedEtdDetail'
        elif nodeName_ == 'ShipmentDocuments':
            obj_ = ShippingDocument.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentDocuments.append(obj_)
            obj_.original_tagname_ = 'ShipmentDocuments'
        elif nodeName_ == 'AssociatedShipments':
            obj_ = AssociatedShipmentDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AssociatedShipments.append(obj_)
            obj_.original_tagname_ = 'AssociatedShipments'
        elif nodeName_ == 'CompletedCodDetail':
            obj_ = CompletedCodDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CompletedCodDetail = obj_
            obj_.original_tagname_ = 'CompletedCodDetail'
        elif nodeName_ == 'CompletedPackageDetails':
            obj_ = CompletedPackageDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CompletedPackageDetails.append(obj_)
            obj_.original_tagname_ = 'CompletedPackageDetails'
# end class CompletedShipmentDetail


class CompletedSmartPostDetail(GeneratedsSuper):
    """Provides reply information specific to SmartPost shipments."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PickUpCarrier=None, Machinable=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PickUpCarrier = PickUpCarrier
        self.validate_CarrierCodeType(self.PickUpCarrier)
        self.PickUpCarrier_nsprefix_ = None
        self.Machinable = Machinable
        self.Machinable_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CompletedSmartPostDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CompletedSmartPostDetail.subclass:
            return CompletedSmartPostDetail.subclass(*args_, **kwargs_)
        else:
            return CompletedSmartPostDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PickUpCarrier(self):
        return self.PickUpCarrier
    def set_PickUpCarrier(self, PickUpCarrier):
        self.PickUpCarrier = PickUpCarrier
    def get_Machinable(self):
        return self.Machinable
    def set_Machinable(self, Machinable):
        self.Machinable = Machinable
    def validate_CarrierCodeType(self, value):
        result = True
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FXCC', 'FXFR', 'FXSP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CarrierCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.PickUpCarrier is not None or
            self.Machinable is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompletedSmartPostDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CompletedSmartPostDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CompletedSmartPostDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CompletedSmartPostDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CompletedSmartPostDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CompletedSmartPostDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompletedSmartPostDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PickUpCarrier is not None:
            namespaceprefix_ = self.PickUpCarrier_nsprefix_ + ':' if (UseCapturedNS_ and self.PickUpCarrier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPickUpCarrier>%s</%sPickUpCarrier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PickUpCarrier), input_name='PickUpCarrier')), namespaceprefix_ , eol_))
        if self.Machinable is not None:
            namespaceprefix_ = self.Machinable_nsprefix_ + ':' if (UseCapturedNS_ and self.Machinable_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMachinable>%s</%sMachinable>%s' % (namespaceprefix_ , self.gds_format_boolean(self.Machinable, input_name='Machinable'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PickUpCarrier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PickUpCarrier')
            value_ = self.gds_validate_string(value_, node, 'PickUpCarrier')
            self.PickUpCarrier = value_
            self.PickUpCarrier_nsprefix_ = child_.prefix
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.PickUpCarrier)
        elif nodeName_ == 'Machinable':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'Machinable')
            ival_ = self.gds_validate_boolean(ival_, node, 'Machinable')
            self.Machinable = ival_
            self.Machinable_nsprefix_ = child_.prefix
# end class CompletedSmartPostDetail


class CompletedTagDetail(GeneratedsSuper):
    """Provides reply information specific to a tag request."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ConfirmationNumber=None, AccessTime=None, CutoffTime=None, Location=None, DeliveryCommitment=None, DispatchDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ConfirmationNumber = ConfirmationNumber
        self.ConfirmationNumber_nsprefix_ = None
        self.AccessTime = AccessTime
        self.AccessTime_nsprefix_ = None
        if isinstance(CutoffTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(CutoffTime, '%H:%M:%S').time()
        else:
            initvalue_ = CutoffTime
        self.CutoffTime = initvalue_
        self.CutoffTime_nsprefix_ = None
        self.Location = Location
        self.Location_nsprefix_ = None
        if isinstance(DeliveryCommitment, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DeliveryCommitment, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = DeliveryCommitment
        self.DeliveryCommitment = initvalue_
        self.DeliveryCommitment_nsprefix_ = None
        if isinstance(DispatchDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DispatchDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DispatchDate
        self.DispatchDate = initvalue_
        self.DispatchDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CompletedTagDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CompletedTagDetail.subclass:
            return CompletedTagDetail.subclass(*args_, **kwargs_)
        else:
            return CompletedTagDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ConfirmationNumber(self):
        return self.ConfirmationNumber
    def set_ConfirmationNumber(self, ConfirmationNumber):
        self.ConfirmationNumber = ConfirmationNumber
    def get_AccessTime(self):
        return self.AccessTime
    def set_AccessTime(self, AccessTime):
        self.AccessTime = AccessTime
    def get_CutoffTime(self):
        return self.CutoffTime
    def set_CutoffTime(self, CutoffTime):
        self.CutoffTime = CutoffTime
    def get_Location(self):
        return self.Location
    def set_Location(self, Location):
        self.Location = Location
    def get_DeliveryCommitment(self):
        return self.DeliveryCommitment
    def set_DeliveryCommitment(self, DeliveryCommitment):
        self.DeliveryCommitment = DeliveryCommitment
    def get_DispatchDate(self):
        return self.DispatchDate
    def set_DispatchDate(self, DispatchDate):
        self.DispatchDate = DispatchDate
    def hasContent_(self):
        if (
            self.ConfirmationNumber is not None or
            self.AccessTime is not None or
            self.CutoffTime is not None or
            self.Location is not None or
            self.DeliveryCommitment is not None or
            self.DispatchDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompletedTagDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CompletedTagDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CompletedTagDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CompletedTagDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CompletedTagDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CompletedTagDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompletedTagDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ConfirmationNumber is not None:
            namespaceprefix_ = self.ConfirmationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ConfirmationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConfirmationNumber>%s</%sConfirmationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ConfirmationNumber), input_name='ConfirmationNumber')), namespaceprefix_ , eol_))
        if self.AccessTime is not None:
            namespaceprefix_ = self.AccessTime_nsprefix_ + ':' if (UseCapturedNS_ and self.AccessTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccessTime>%s</%sAccessTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccessTime), input_name='AccessTime')), namespaceprefix_ , eol_))
        if self.CutoffTime is not None:
            namespaceprefix_ = self.CutoffTime_nsprefix_ + ':' if (UseCapturedNS_ and self.CutoffTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCutoffTime>%s</%sCutoffTime>%s' % (namespaceprefix_ , self.gds_format_time(self.CutoffTime, input_name='CutoffTime'), namespaceprefix_ , eol_))
        if self.Location is not None:
            namespaceprefix_ = self.Location_nsprefix_ + ':' if (UseCapturedNS_ and self.Location_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocation>%s</%sLocation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Location), input_name='Location')), namespaceprefix_ , eol_))
        if self.DeliveryCommitment is not None:
            namespaceprefix_ = self.DeliveryCommitment_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryCommitment_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryCommitment>%s</%sDeliveryCommitment>%s' % (namespaceprefix_ , self.gds_format_datetime(self.DeliveryCommitment, input_name='DeliveryCommitment'), namespaceprefix_ , eol_))
        if self.DispatchDate is not None:
            namespaceprefix_ = self.DispatchDate_nsprefix_ + ':' if (UseCapturedNS_ and self.DispatchDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDispatchDate>%s</%sDispatchDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DispatchDate, input_name='DispatchDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ConfirmationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ConfirmationNumber')
            value_ = self.gds_validate_string(value_, node, 'ConfirmationNumber')
            self.ConfirmationNumber = value_
            self.ConfirmationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'AccessTime':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccessTime')
            value_ = self.gds_validate_string(value_, node, 'AccessTime')
            self.AccessTime = value_
            self.AccessTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'CutoffTime':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.CutoffTime = dval_
            self.CutoffTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'Location':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Location')
            value_ = self.gds_validate_string(value_, node, 'Location')
            self.Location = value_
            self.Location_nsprefix_ = child_.prefix
        elif nodeName_ == 'DeliveryCommitment':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.DeliveryCommitment = dval_
            self.DeliveryCommitment_nsprefix_ = child_.prefix
        elif nodeName_ == 'DispatchDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DispatchDate = dval_
            self.DispatchDate_nsprefix_ = child_.prefix
# end class CompletedTagDetail


class ConfigurableLabelReferenceEntry(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ZoneNumber=None, Header=None, DataField=None, LiteralValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ZoneNumber = ZoneNumber
        self.ZoneNumber_nsprefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.DataField = DataField
        self.DataField_nsprefix_ = None
        self.LiteralValue = LiteralValue
        self.LiteralValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ConfigurableLabelReferenceEntry)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ConfigurableLabelReferenceEntry.subclass:
            return ConfigurableLabelReferenceEntry.subclass(*args_, **kwargs_)
        else:
            return ConfigurableLabelReferenceEntry(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ZoneNumber(self):
        return self.ZoneNumber
    def set_ZoneNumber(self, ZoneNumber):
        self.ZoneNumber = ZoneNumber
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_DataField(self):
        return self.DataField
    def set_DataField(self, DataField):
        self.DataField = DataField
    def get_LiteralValue(self):
        return self.LiteralValue
    def set_LiteralValue(self, LiteralValue):
        self.LiteralValue = LiteralValue
    def hasContent_(self):
        if (
            self.ZoneNumber is not None or
            self.Header is not None or
            self.DataField is not None or
            self.LiteralValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConfigurableLabelReferenceEntry', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ConfigurableLabelReferenceEntry')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ConfigurableLabelReferenceEntry':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ConfigurableLabelReferenceEntry')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ConfigurableLabelReferenceEntry', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ConfigurableLabelReferenceEntry'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConfigurableLabelReferenceEntry', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ZoneNumber is not None:
            namespaceprefix_ = self.ZoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ZoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sZoneNumber>%s</%sZoneNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.ZoneNumber, input_name='ZoneNumber'), namespaceprefix_ , eol_))
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHeader>%s</%sHeader>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Header), input_name='Header')), namespaceprefix_ , eol_))
        if self.DataField is not None:
            namespaceprefix_ = self.DataField_nsprefix_ + ':' if (UseCapturedNS_ and self.DataField_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataField>%s</%sDataField>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DataField), input_name='DataField')), namespaceprefix_ , eol_))
        if self.LiteralValue is not None:
            namespaceprefix_ = self.LiteralValue_nsprefix_ + ':' if (UseCapturedNS_ and self.LiteralValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLiteralValue>%s</%sLiteralValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LiteralValue), input_name='LiteralValue')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ZoneNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'ZoneNumber')
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'ZoneNumber')
            self.ZoneNumber = ival_
            self.ZoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Header':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Header')
            value_ = self.gds_validate_string(value_, node, 'Header')
            self.Header = value_
            self.Header_nsprefix_ = child_.prefix
        elif nodeName_ == 'DataField':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DataField')
            value_ = self.gds_validate_string(value_, node, 'DataField')
            self.DataField = value_
            self.DataField_nsprefix_ = child_.prefix
        elif nodeName_ == 'LiteralValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LiteralValue')
            value_ = self.gds_validate_string(value_, node, 'LiteralValue')
            self.LiteralValue = value_
            self.LiteralValue_nsprefix_ = child_.prefix
# end class ConfigurableLabelReferenceEntry


class Contact(GeneratedsSuper):
    """The descriptive data for a point-of-contact person."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ContactId=None, PersonName=None, Title=None, CompanyName=None, PhoneNumber=None, PhoneExtension=None, TollFreePhoneNumber=None, PagerNumber=None, FaxNumber=None, EMailAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ContactId = ContactId
        self.ContactId_nsprefix_ = None
        self.PersonName = PersonName
        self.PersonName_nsprefix_ = None
        self.Title = Title
        self.Title_nsprefix_ = None
        self.CompanyName = CompanyName
        self.CompanyName_nsprefix_ = None
        self.PhoneNumber = PhoneNumber
        self.PhoneNumber_nsprefix_ = None
        self.PhoneExtension = PhoneExtension
        self.PhoneExtension_nsprefix_ = None
        self.TollFreePhoneNumber = TollFreePhoneNumber
        self.TollFreePhoneNumber_nsprefix_ = None
        self.PagerNumber = PagerNumber
        self.PagerNumber_nsprefix_ = None
        self.FaxNumber = FaxNumber
        self.FaxNumber_nsprefix_ = None
        self.EMailAddress = EMailAddress
        self.EMailAddress_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Contact)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Contact.subclass:
            return Contact.subclass(*args_, **kwargs_)
        else:
            return Contact(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ContactId(self):
        return self.ContactId
    def set_ContactId(self, ContactId):
        self.ContactId = ContactId
    def get_PersonName(self):
        return self.PersonName
    def set_PersonName(self, PersonName):
        self.PersonName = PersonName
    def get_Title(self):
        return self.Title
    def set_Title(self, Title):
        self.Title = Title
    def get_CompanyName(self):
        return self.CompanyName
    def set_CompanyName(self, CompanyName):
        self.CompanyName = CompanyName
    def get_PhoneNumber(self):
        return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber):
        self.PhoneNumber = PhoneNumber
    def get_PhoneExtension(self):
        return self.PhoneExtension
    def set_PhoneExtension(self, PhoneExtension):
        self.PhoneExtension = PhoneExtension
    def get_TollFreePhoneNumber(self):
        return self.TollFreePhoneNumber
    def set_TollFreePhoneNumber(self, TollFreePhoneNumber):
        self.TollFreePhoneNumber = TollFreePhoneNumber
    def get_PagerNumber(self):
        return self.PagerNumber
    def set_PagerNumber(self, PagerNumber):
        self.PagerNumber = PagerNumber
    def get_FaxNumber(self):
        return self.FaxNumber
    def set_FaxNumber(self, FaxNumber):
        self.FaxNumber = FaxNumber
    def get_EMailAddress(self):
        return self.EMailAddress
    def set_EMailAddress(self, EMailAddress):
        self.EMailAddress = EMailAddress
    def hasContent_(self):
        if (
            self.ContactId is not None or
            self.PersonName is not None or
            self.Title is not None or
            self.CompanyName is not None or
            self.PhoneNumber is not None or
            self.PhoneExtension is not None or
            self.TollFreePhoneNumber is not None or
            self.PagerNumber is not None or
            self.FaxNumber is not None or
            self.EMailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Contact', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Contact')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Contact':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Contact')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Contact', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Contact'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Contact', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactId is not None:
            namespaceprefix_ = self.ContactId_nsprefix_ + ':' if (UseCapturedNS_ and self.ContactId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactId>%s</%sContactId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ContactId), input_name='ContactId')), namespaceprefix_ , eol_))
        if self.PersonName is not None:
            namespaceprefix_ = self.PersonName_nsprefix_ + ':' if (UseCapturedNS_ and self.PersonName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPersonName>%s</%sPersonName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PersonName), input_name='PersonName')), namespaceprefix_ , eol_))
        if self.Title is not None:
            namespaceprefix_ = self.Title_nsprefix_ + ':' if (UseCapturedNS_ and self.Title_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTitle>%s</%sTitle>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Title), input_name='Title')), namespaceprefix_ , eol_))
        if self.CompanyName is not None:
            namespaceprefix_ = self.CompanyName_nsprefix_ + ':' if (UseCapturedNS_ and self.CompanyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompanyName>%s</%sCompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CompanyName), input_name='CompanyName')), namespaceprefix_ , eol_))
        if self.PhoneNumber is not None:
            namespaceprefix_ = self.PhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhoneNumber>%s</%sPhoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), namespaceprefix_ , eol_))
        if self.PhoneExtension is not None:
            namespaceprefix_ = self.PhoneExtension_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneExtension_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhoneExtension>%s</%sPhoneExtension>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhoneExtension), input_name='PhoneExtension')), namespaceprefix_ , eol_))
        if self.TollFreePhoneNumber is not None:
            namespaceprefix_ = self.TollFreePhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TollFreePhoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTollFreePhoneNumber>%s</%sTollFreePhoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TollFreePhoneNumber), input_name='TollFreePhoneNumber')), namespaceprefix_ , eol_))
        if self.PagerNumber is not None:
            namespaceprefix_ = self.PagerNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PagerNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPagerNumber>%s</%sPagerNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PagerNumber), input_name='PagerNumber')), namespaceprefix_ , eol_))
        if self.FaxNumber is not None:
            namespaceprefix_ = self.FaxNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.FaxNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFaxNumber>%s</%sFaxNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FaxNumber), input_name='FaxNumber')), namespaceprefix_ , eol_))
        if self.EMailAddress is not None:
            namespaceprefix_ = self.EMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ContactId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ContactId')
            value_ = self.gds_validate_string(value_, node, 'ContactId')
            self.ContactId = value_
            self.ContactId_nsprefix_ = child_.prefix
        elif nodeName_ == 'PersonName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PersonName')
            value_ = self.gds_validate_string(value_, node, 'PersonName')
            self.PersonName = value_
            self.PersonName_nsprefix_ = child_.prefix
        elif nodeName_ == 'Title':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Title')
            value_ = self.gds_validate_string(value_, node, 'Title')
            self.Title = value_
            self.Title_nsprefix_ = child_.prefix
        elif nodeName_ == 'CompanyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CompanyName')
            value_ = self.gds_validate_string(value_, node, 'CompanyName')
            self.CompanyName = value_
            self.CompanyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'PhoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhoneNumber')
            value_ = self.gds_validate_string(value_, node, 'PhoneNumber')
            self.PhoneNumber = value_
            self.PhoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'PhoneExtension':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhoneExtension')
            value_ = self.gds_validate_string(value_, node, 'PhoneExtension')
            self.PhoneExtension = value_
            self.PhoneExtension_nsprefix_ = child_.prefix
        elif nodeName_ == 'TollFreePhoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TollFreePhoneNumber')
            value_ = self.gds_validate_string(value_, node, 'TollFreePhoneNumber')
            self.TollFreePhoneNumber = value_
            self.TollFreePhoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'PagerNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PagerNumber')
            value_ = self.gds_validate_string(value_, node, 'PagerNumber')
            self.PagerNumber = value_
            self.PagerNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'FaxNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FaxNumber')
            value_ = self.gds_validate_string(value_, node, 'FaxNumber')
            self.FaxNumber = value_
            self.FaxNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'EMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EMailAddress')
            value_ = self.gds_validate_string(value_, node, 'EMailAddress')
            self.EMailAddress = value_
            self.EMailAddress_nsprefix_ = child_.prefix
# end class Contact


class ContactAndAddress(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Contact=None, Address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Contact = Contact
        self.Contact_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactAndAddress)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactAndAddress.subclass:
            return ContactAndAddress.subclass(*args_, **kwargs_)
        else:
            return ContactAndAddress(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Contact(self):
        return self.Contact
    def set_Contact(self, Contact):
        self.Contact = Contact
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def hasContent_(self):
        if (
            self.Contact is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ContactAndAddress', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContactAndAddress')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContactAndAddress':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContactAndAddress')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContactAndAddress', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContactAndAddress'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ContactAndAddress', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Contact is not None:
            namespaceprefix_ = self.Contact_nsprefix_ + ':' if (UseCapturedNS_ and self.Contact_nsprefix_) else ''
            self.Contact.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Contact', pretty_print=pretty_print)
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Contact':
            obj_ = Contact.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Address':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class ContactAndAddress


class ContentRecord(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PartNumber=None, ItemNumber=None, ReceivedQuantity=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PartNumber = PartNumber
        self.PartNumber_nsprefix_ = None
        self.ItemNumber = ItemNumber
        self.ItemNumber_nsprefix_ = None
        self.ReceivedQuantity = ReceivedQuantity
        self.ReceivedQuantity_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentRecord)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentRecord.subclass:
            return ContentRecord.subclass(*args_, **kwargs_)
        else:
            return ContentRecord(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PartNumber(self):
        return self.PartNumber
    def set_PartNumber(self, PartNumber):
        self.PartNumber = PartNumber
    def get_ItemNumber(self):
        return self.ItemNumber
    def set_ItemNumber(self, ItemNumber):
        self.ItemNumber = ItemNumber
    def get_ReceivedQuantity(self):
        return self.ReceivedQuantity
    def set_ReceivedQuantity(self, ReceivedQuantity):
        self.ReceivedQuantity = ReceivedQuantity
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.PartNumber is not None or
            self.ItemNumber is not None or
            self.ReceivedQuantity is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ContentRecord', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentRecord')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentRecord':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentRecord')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentRecord', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentRecord'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ContentRecord', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PartNumber is not None:
            namespaceprefix_ = self.PartNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PartNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPartNumber>%s</%sPartNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PartNumber), input_name='PartNumber')), namespaceprefix_ , eol_))
        if self.ItemNumber is not None:
            namespaceprefix_ = self.ItemNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ItemNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemNumber>%s</%sItemNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ItemNumber), input_name='ItemNumber')), namespaceprefix_ , eol_))
        if self.ReceivedQuantity is not None:
            namespaceprefix_ = self.ReceivedQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.ReceivedQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReceivedQuantity>%s</%sReceivedQuantity>%s' % (namespaceprefix_ , self.gds_format_integer(self.ReceivedQuantity, input_name='ReceivedQuantity'), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PartNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PartNumber')
            value_ = self.gds_validate_string(value_, node, 'PartNumber')
            self.PartNumber = value_
            self.PartNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ItemNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ItemNumber')
            value_ = self.gds_validate_string(value_, node, 'ItemNumber')
            self.ItemNumber = value_
            self.ItemNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ReceivedQuantity' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'ReceivedQuantity')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'ReceivedQuantity')
            self.ReceivedQuantity = ival_
            self.ReceivedQuantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class ContentRecord


class CurrencyExchangeRate(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FromCurrency=None, IntoCurrency=None, Rate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.FromCurrency = FromCurrency
        self.FromCurrency_nsprefix_ = None
        self.IntoCurrency = IntoCurrency
        self.IntoCurrency_nsprefix_ = None
        self.Rate = Rate
        self.Rate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CurrencyExchangeRate)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CurrencyExchangeRate.subclass:
            return CurrencyExchangeRate.subclass(*args_, **kwargs_)
        else:
            return CurrencyExchangeRate(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FromCurrency(self):
        return self.FromCurrency
    def set_FromCurrency(self, FromCurrency):
        self.FromCurrency = FromCurrency
    def get_IntoCurrency(self):
        return self.IntoCurrency
    def set_IntoCurrency(self, IntoCurrency):
        self.IntoCurrency = IntoCurrency
    def get_Rate(self):
        return self.Rate
    def set_Rate(self, Rate):
        self.Rate = Rate
    def hasContent_(self):
        if (
            self.FromCurrency is not None or
            self.IntoCurrency is not None or
            self.Rate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CurrencyExchangeRate', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CurrencyExchangeRate')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CurrencyExchangeRate':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CurrencyExchangeRate')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CurrencyExchangeRate', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CurrencyExchangeRate'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CurrencyExchangeRate', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FromCurrency is not None:
            namespaceprefix_ = self.FromCurrency_nsprefix_ + ':' if (UseCapturedNS_ and self.FromCurrency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFromCurrency>%s</%sFromCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FromCurrency), input_name='FromCurrency')), namespaceprefix_ , eol_))
        if self.IntoCurrency is not None:
            namespaceprefix_ = self.IntoCurrency_nsprefix_ + ':' if (UseCapturedNS_ and self.IntoCurrency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIntoCurrency>%s</%sIntoCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IntoCurrency), input_name='IntoCurrency')), namespaceprefix_ , eol_))
        if self.Rate is not None:
            namespaceprefix_ = self.Rate_nsprefix_ + ':' if (UseCapturedNS_ and self.Rate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRate>%s</%sRate>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Rate, input_name='Rate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FromCurrency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FromCurrency')
            value_ = self.gds_validate_string(value_, node, 'FromCurrency')
            self.FromCurrency = value_
            self.FromCurrency_nsprefix_ = child_.prefix
        elif nodeName_ == 'IntoCurrency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'IntoCurrency')
            value_ = self.gds_validate_string(value_, node, 'IntoCurrency')
            self.IntoCurrency = value_
            self.IntoCurrency_nsprefix_ = child_.prefix
        elif nodeName_ == 'Rate' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Rate')
            fval_ = self.gds_validate_decimal(fval_, node, 'Rate')
            self.Rate = fval_
            self.Rate_nsprefix_ = child_.prefix
# end class CurrencyExchangeRate


class CustomDeliveryWindowDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, RequestTime=None, RequestRange=None, RequestDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_CustomDeliveryWindowType(self.Type)
        self.Type_nsprefix_ = None
        if isinstance(RequestTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RequestTime, '%H:%M:%S').time()
        else:
            initvalue_ = RequestTime
        self.RequestTime = initvalue_
        self.RequestTime_nsprefix_ = None
        self.RequestRange = RequestRange
        self.RequestRange_nsprefix_ = None
        if isinstance(RequestDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RequestDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RequestDate
        self.RequestDate = initvalue_
        self.RequestDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomDeliveryWindowDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomDeliveryWindowDetail.subclass:
            return CustomDeliveryWindowDetail.subclass(*args_, **kwargs_)
        else:
            return CustomDeliveryWindowDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_RequestTime(self):
        return self.RequestTime
    def set_RequestTime(self, RequestTime):
        self.RequestTime = RequestTime
    def get_RequestRange(self):
        return self.RequestRange
    def set_RequestRange(self, RequestRange):
        self.RequestRange = RequestRange
    def get_RequestDate(self):
        return self.RequestDate
    def set_RequestDate(self, RequestDate):
        self.RequestDate = RequestDate
    def validate_CustomDeliveryWindowType(self, value):
        result = True
        # Validate type CustomDeliveryWindowType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AFTER', 'BEFORE', 'BETWEEN', 'ON']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomDeliveryWindowType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.RequestTime is not None or
            self.RequestRange is not None or
            self.RequestDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomDeliveryWindowDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomDeliveryWindowDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomDeliveryWindowDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomDeliveryWindowDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomDeliveryWindowDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomDeliveryWindowDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomDeliveryWindowDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.RequestTime is not None:
            namespaceprefix_ = self.RequestTime_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestTime>%s</%sRequestTime>%s' % (namespaceprefix_ , self.gds_format_time(self.RequestTime, input_name='RequestTime'), namespaceprefix_ , eol_))
        if self.RequestRange is not None:
            namespaceprefix_ = self.RequestRange_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestRange_nsprefix_) else ''
            self.RequestRange.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RequestRange', pretty_print=pretty_print)
        if self.RequestDate is not None:
            namespaceprefix_ = self.RequestDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestDate>%s</%sRequestDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RequestDate, input_name='RequestDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type CustomDeliveryWindowType
            self.validate_CustomDeliveryWindowType(self.Type)
        elif nodeName_ == 'RequestTime':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.RequestTime = dval_
            self.RequestTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'RequestRange':
            obj_ = DateRange.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RequestRange = obj_
            obj_.original_tagname_ = 'RequestRange'
        elif nodeName_ == 'RequestDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RequestDate = dval_
            self.RequestDate_nsprefix_ = child_.prefix
# end class CustomDeliveryWindowDetail


class CustomDocumentDetail(GeneratedsSuper):
    """Data required to produce a custom-specified document, either at shipment
    or package level."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Format=None, LabelPrintingOrientation=None, LabelRotation=None, SpecificationId=None, CustomDocumentIdentifier=None, DocTabContent=None, CustomContent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Format = Format
        self.Format_nsprefix_ = None
        self.LabelPrintingOrientation = LabelPrintingOrientation
        self.validate_LabelPrintingOrientationType(self.LabelPrintingOrientation)
        self.LabelPrintingOrientation_nsprefix_ = None
        self.LabelRotation = LabelRotation
        self.validate_LabelRotationType(self.LabelRotation)
        self.LabelRotation_nsprefix_ = None
        self.SpecificationId = SpecificationId
        self.SpecificationId_nsprefix_ = None
        self.CustomDocumentIdentifier = CustomDocumentIdentifier
        self.CustomDocumentIdentifier_nsprefix_ = None
        self.DocTabContent = DocTabContent
        self.DocTabContent_nsprefix_ = None
        self.CustomContent = CustomContent
        self.CustomContent_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomDocumentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomDocumentDetail.subclass:
            return CustomDocumentDetail.subclass(*args_, **kwargs_)
        else:
            return CustomDocumentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Format(self):
        return self.Format
    def set_Format(self, Format):
        self.Format = Format
    def get_LabelPrintingOrientation(self):
        return self.LabelPrintingOrientation
    def set_LabelPrintingOrientation(self, LabelPrintingOrientation):
        self.LabelPrintingOrientation = LabelPrintingOrientation
    def get_LabelRotation(self):
        return self.LabelRotation
    def set_LabelRotation(self, LabelRotation):
        self.LabelRotation = LabelRotation
    def get_SpecificationId(self):
        return self.SpecificationId
    def set_SpecificationId(self, SpecificationId):
        self.SpecificationId = SpecificationId
    def get_CustomDocumentIdentifier(self):
        return self.CustomDocumentIdentifier
    def set_CustomDocumentIdentifier(self, CustomDocumentIdentifier):
        self.CustomDocumentIdentifier = CustomDocumentIdentifier
    def get_DocTabContent(self):
        return self.DocTabContent
    def set_DocTabContent(self, DocTabContent):
        self.DocTabContent = DocTabContent
    def get_CustomContent(self):
        return self.CustomContent
    def set_CustomContent(self, CustomContent):
        self.CustomContent = CustomContent
    def validate_LabelPrintingOrientationType(self, value):
        result = True
        # Validate type LabelPrintingOrientationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BOTTOM_EDGE_OF_TEXT_FIRST', 'TOP_EDGE_OF_TEXT_FIRST']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on LabelPrintingOrientationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_LabelRotationType(self, value):
        result = True
        # Validate type LabelRotationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['LEFT', 'NONE', 'RIGHT', 'UPSIDE_DOWN']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on LabelRotationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Format is not None or
            self.LabelPrintingOrientation is not None or
            self.LabelRotation is not None or
            self.SpecificationId is not None or
            self.CustomDocumentIdentifier is not None or
            self.DocTabContent is not None or
            self.CustomContent is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomDocumentDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomDocumentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomDocumentDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomDocumentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomDocumentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomDocumentDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomDocumentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Format is not None:
            namespaceprefix_ = self.Format_nsprefix_ + ':' if (UseCapturedNS_ and self.Format_nsprefix_) else ''
            self.Format.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Format', pretty_print=pretty_print)
        if self.LabelPrintingOrientation is not None:
            namespaceprefix_ = self.LabelPrintingOrientation_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelPrintingOrientation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelPrintingOrientation>%s</%sLabelPrintingOrientation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LabelPrintingOrientation), input_name='LabelPrintingOrientation')), namespaceprefix_ , eol_))
        if self.LabelRotation is not None:
            namespaceprefix_ = self.LabelRotation_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelRotation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelRotation>%s</%sLabelRotation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LabelRotation), input_name='LabelRotation')), namespaceprefix_ , eol_))
        if self.SpecificationId is not None:
            namespaceprefix_ = self.SpecificationId_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecificationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecificationId>%s</%sSpecificationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SpecificationId), input_name='SpecificationId')), namespaceprefix_ , eol_))
        if self.CustomDocumentIdentifier is not None:
            namespaceprefix_ = self.CustomDocumentIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomDocumentIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomDocumentIdentifier>%s</%sCustomDocumentIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomDocumentIdentifier), input_name='CustomDocumentIdentifier')), namespaceprefix_ , eol_))
        if self.DocTabContent is not None:
            namespaceprefix_ = self.DocTabContent_nsprefix_ + ':' if (UseCapturedNS_ and self.DocTabContent_nsprefix_) else ''
            self.DocTabContent.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocTabContent', pretty_print=pretty_print)
        if self.CustomContent is not None:
            namespaceprefix_ = self.CustomContent_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomContent_nsprefix_) else ''
            self.CustomContent.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomContent', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Format':
            obj_ = ShippingDocumentFormat.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Format = obj_
            obj_.original_tagname_ = 'Format'
        elif nodeName_ == 'LabelPrintingOrientation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelPrintingOrientation')
            value_ = self.gds_validate_string(value_, node, 'LabelPrintingOrientation')
            self.LabelPrintingOrientation = value_
            self.LabelPrintingOrientation_nsprefix_ = child_.prefix
            # validate type LabelPrintingOrientationType
            self.validate_LabelPrintingOrientationType(self.LabelPrintingOrientation)
        elif nodeName_ == 'LabelRotation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelRotation')
            value_ = self.gds_validate_string(value_, node, 'LabelRotation')
            self.LabelRotation = value_
            self.LabelRotation_nsprefix_ = child_.prefix
            # validate type LabelRotationType
            self.validate_LabelRotationType(self.LabelRotation)
        elif nodeName_ == 'SpecificationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecificationId')
            value_ = self.gds_validate_string(value_, node, 'SpecificationId')
            self.SpecificationId = value_
            self.SpecificationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'CustomDocumentIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomDocumentIdentifier')
            value_ = self.gds_validate_string(value_, node, 'CustomDocumentIdentifier')
            self.CustomDocumentIdentifier = value_
            self.CustomDocumentIdentifier_nsprefix_ = child_.prefix
        elif nodeName_ == 'DocTabContent':
            obj_ = DocTabContent.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocTabContent = obj_
            obj_.original_tagname_ = 'DocTabContent'
        elif nodeName_ == 'CustomContent':
            obj_ = CustomLabelDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomContent = obj_
            obj_.original_tagname_ = 'CustomContent'
# end class CustomDocumentDetail


class CustomLabelBarcodeEntry(GeneratedsSuper):
    """Constructed string, based on format and zero or more data fields,
    printed in specified barcode symbology."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, Format=None, DataFields=None, BarHeight=None, ThinBarWidth=None, BarcodeSymbology=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Position = Position
        self.Position_nsprefix_ = None
        self.Format = Format
        self.Format_nsprefix_ = None
        if DataFields is None:
            self.DataFields = []
        else:
            self.DataFields = DataFields
        self.DataFields_nsprefix_ = None
        self.BarHeight = BarHeight
        self.BarHeight_nsprefix_ = None
        self.ThinBarWidth = ThinBarWidth
        self.ThinBarWidth_nsprefix_ = None
        self.BarcodeSymbology = BarcodeSymbology
        self.validate_BarcodeSymbologyType(self.BarcodeSymbology)
        self.BarcodeSymbology_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomLabelBarcodeEntry)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomLabelBarcodeEntry.subclass:
            return CustomLabelBarcodeEntry.subclass(*args_, **kwargs_)
        else:
            return CustomLabelBarcodeEntry(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def get_Format(self):
        return self.Format
    def set_Format(self, Format):
        self.Format = Format
    def get_DataFields(self):
        return self.DataFields
    def set_DataFields(self, DataFields):
        self.DataFields = DataFields
    def add_DataFields(self, value):
        self.DataFields.append(value)
    def insert_DataFields_at(self, index, value):
        self.DataFields.insert(index, value)
    def replace_DataFields_at(self, index, value):
        self.DataFields[index] = value
    def get_BarHeight(self):
        return self.BarHeight
    def set_BarHeight(self, BarHeight):
        self.BarHeight = BarHeight
    def get_ThinBarWidth(self):
        return self.ThinBarWidth
    def set_ThinBarWidth(self, ThinBarWidth):
        self.ThinBarWidth = ThinBarWidth
    def get_BarcodeSymbology(self):
        return self.BarcodeSymbology
    def set_BarcodeSymbology(self, BarcodeSymbology):
        self.BarcodeSymbology = BarcodeSymbology
    def validate_BarcodeSymbologyType(self, value):
        result = True
        # Validate type BarcodeSymbologyType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CODABAR', 'CODE128', 'CODE128B', 'CODE128C', 'CODE128_WIDEBAR', 'CODE39', 'CODE93', 'I2OF5', 'PDF417', 'POSTNET', 'QR_CODE', 'UCC128']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on BarcodeSymbologyType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Position is not None or
            self.Format is not None or
            self.DataFields or
            self.BarHeight is not None or
            self.ThinBarWidth is not None or
            self.BarcodeSymbology is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomLabelBarcodeEntry', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomLabelBarcodeEntry')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomLabelBarcodeEntry':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomLabelBarcodeEntry')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomLabelBarcodeEntry', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomLabelBarcodeEntry'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomLabelBarcodeEntry', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Position is not None:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            self.Position.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
        if self.Format is not None:
            namespaceprefix_ = self.Format_nsprefix_ + ':' if (UseCapturedNS_ and self.Format_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormat>%s</%sFormat>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Format), input_name='Format')), namespaceprefix_ , eol_))
        for DataFields_ in self.DataFields:
            namespaceprefix_ = self.DataFields_nsprefix_ + ':' if (UseCapturedNS_ and self.DataFields_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataFields>%s</%sDataFields>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(DataFields_), input_name='DataFields')), namespaceprefix_ , eol_))
        if self.BarHeight is not None:
            namespaceprefix_ = self.BarHeight_nsprefix_ + ':' if (UseCapturedNS_ and self.BarHeight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBarHeight>%s</%sBarHeight>%s' % (namespaceprefix_ , self.gds_format_integer(self.BarHeight, input_name='BarHeight'), namespaceprefix_ , eol_))
        if self.ThinBarWidth is not None:
            namespaceprefix_ = self.ThinBarWidth_nsprefix_ + ':' if (UseCapturedNS_ and self.ThinBarWidth_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sThinBarWidth>%s</%sThinBarWidth>%s' % (namespaceprefix_ , self.gds_format_integer(self.ThinBarWidth, input_name='ThinBarWidth'), namespaceprefix_ , eol_))
        if self.BarcodeSymbology is not None:
            namespaceprefix_ = self.BarcodeSymbology_nsprefix_ + ':' if (UseCapturedNS_ and self.BarcodeSymbology_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBarcodeSymbology>%s</%sBarcodeSymbology>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BarcodeSymbology), input_name='BarcodeSymbology')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = CustomLabelPosition.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position = obj_
            obj_.original_tagname_ = 'Position'
        elif nodeName_ == 'Format':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Format')
            value_ = self.gds_validate_string(value_, node, 'Format')
            self.Format = value_
            self.Format_nsprefix_ = child_.prefix
        elif nodeName_ == 'DataFields':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DataFields')
            value_ = self.gds_validate_string(value_, node, 'DataFields')
            self.DataFields.append(value_)
            self.DataFields_nsprefix_ = child_.prefix
        elif nodeName_ == 'BarHeight' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'BarHeight')
            ival_ = self.gds_validate_integer(ival_, node, 'BarHeight')
            self.BarHeight = ival_
            self.BarHeight_nsprefix_ = child_.prefix
        elif nodeName_ == 'ThinBarWidth' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'ThinBarWidth')
            ival_ = self.gds_validate_integer(ival_, node, 'ThinBarWidth')
            self.ThinBarWidth = ival_
            self.ThinBarWidth_nsprefix_ = child_.prefix
        elif nodeName_ == 'BarcodeSymbology':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BarcodeSymbology')
            value_ = self.gds_validate_string(value_, node, 'BarcodeSymbology')
            self.BarcodeSymbology = value_
            self.BarcodeSymbology_nsprefix_ = child_.prefix
            # validate type BarcodeSymbologyType
            self.validate_BarcodeSymbologyType(self.BarcodeSymbology)
# end class CustomLabelBarcodeEntry


class CustomLabelBoxEntry(GeneratedsSuper):
    """Solid (filled) rectangular area on label."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TopLeftCorner=None, BottomRightCorner=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TopLeftCorner = TopLeftCorner
        self.TopLeftCorner_nsprefix_ = None
        self.BottomRightCorner = BottomRightCorner
        self.BottomRightCorner_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomLabelBoxEntry)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomLabelBoxEntry.subclass:
            return CustomLabelBoxEntry.subclass(*args_, **kwargs_)
        else:
            return CustomLabelBoxEntry(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TopLeftCorner(self):
        return self.TopLeftCorner
    def set_TopLeftCorner(self, TopLeftCorner):
        self.TopLeftCorner = TopLeftCorner
    def get_BottomRightCorner(self):
        return self.BottomRightCorner
    def set_BottomRightCorner(self, BottomRightCorner):
        self.BottomRightCorner = BottomRightCorner
    def hasContent_(self):
        if (
            self.TopLeftCorner is not None or
            self.BottomRightCorner is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomLabelBoxEntry', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomLabelBoxEntry')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomLabelBoxEntry':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomLabelBoxEntry')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomLabelBoxEntry', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomLabelBoxEntry'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomLabelBoxEntry', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TopLeftCorner is not None:
            namespaceprefix_ = self.TopLeftCorner_nsprefix_ + ':' if (UseCapturedNS_ and self.TopLeftCorner_nsprefix_) else ''
            self.TopLeftCorner.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TopLeftCorner', pretty_print=pretty_print)
        if self.BottomRightCorner is not None:
            namespaceprefix_ = self.BottomRightCorner_nsprefix_ + ':' if (UseCapturedNS_ and self.BottomRightCorner_nsprefix_) else ''
            self.BottomRightCorner.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BottomRightCorner', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TopLeftCorner':
            obj_ = CustomLabelPosition.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TopLeftCorner = obj_
            obj_.original_tagname_ = 'TopLeftCorner'
        elif nodeName_ == 'BottomRightCorner':
            obj_ = CustomLabelPosition.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BottomRightCorner = obj_
            obj_.original_tagname_ = 'BottomRightCorner'
# end class CustomLabelBoxEntry


class CustomLabelDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CoordinateUnits=None, TextEntries=None, GraphicEntries=None, BoxEntries=None, TextBoxEntries=None, BarcodeEntries=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CoordinateUnits = CoordinateUnits
        self.validate_CustomLabelCoordinateUnits(self.CoordinateUnits)
        self.CoordinateUnits_nsprefix_ = None
        if TextEntries is None:
            self.TextEntries = []
        else:
            self.TextEntries = TextEntries
        self.TextEntries_nsprefix_ = None
        if GraphicEntries is None:
            self.GraphicEntries = []
        else:
            self.GraphicEntries = GraphicEntries
        self.GraphicEntries_nsprefix_ = None
        if BoxEntries is None:
            self.BoxEntries = []
        else:
            self.BoxEntries = BoxEntries
        self.BoxEntries_nsprefix_ = None
        if TextBoxEntries is None:
            self.TextBoxEntries = []
        else:
            self.TextBoxEntries = TextBoxEntries
        self.TextBoxEntries_nsprefix_ = None
        if BarcodeEntries is None:
            self.BarcodeEntries = []
        else:
            self.BarcodeEntries = BarcodeEntries
        self.BarcodeEntries_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomLabelDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomLabelDetail.subclass:
            return CustomLabelDetail.subclass(*args_, **kwargs_)
        else:
            return CustomLabelDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CoordinateUnits(self):
        return self.CoordinateUnits
    def set_CoordinateUnits(self, CoordinateUnits):
        self.CoordinateUnits = CoordinateUnits
    def get_TextEntries(self):
        return self.TextEntries
    def set_TextEntries(self, TextEntries):
        self.TextEntries = TextEntries
    def add_TextEntries(self, value):
        self.TextEntries.append(value)
    def insert_TextEntries_at(self, index, value):
        self.TextEntries.insert(index, value)
    def replace_TextEntries_at(self, index, value):
        self.TextEntries[index] = value
    def get_GraphicEntries(self):
        return self.GraphicEntries
    def set_GraphicEntries(self, GraphicEntries):
        self.GraphicEntries = GraphicEntries
    def add_GraphicEntries(self, value):
        self.GraphicEntries.append(value)
    def insert_GraphicEntries_at(self, index, value):
        self.GraphicEntries.insert(index, value)
    def replace_GraphicEntries_at(self, index, value):
        self.GraphicEntries[index] = value
    def get_BoxEntries(self):
        return self.BoxEntries
    def set_BoxEntries(self, BoxEntries):
        self.BoxEntries = BoxEntries
    def add_BoxEntries(self, value):
        self.BoxEntries.append(value)
    def insert_BoxEntries_at(self, index, value):
        self.BoxEntries.insert(index, value)
    def replace_BoxEntries_at(self, index, value):
        self.BoxEntries[index] = value
    def get_TextBoxEntries(self):
        return self.TextBoxEntries
    def set_TextBoxEntries(self, TextBoxEntries):
        self.TextBoxEntries = TextBoxEntries
    def add_TextBoxEntries(self, value):
        self.TextBoxEntries.append(value)
    def insert_TextBoxEntries_at(self, index, value):
        self.TextBoxEntries.insert(index, value)
    def replace_TextBoxEntries_at(self, index, value):
        self.TextBoxEntries[index] = value
    def get_BarcodeEntries(self):
        return self.BarcodeEntries
    def set_BarcodeEntries(self, BarcodeEntries):
        self.BarcodeEntries = BarcodeEntries
    def add_BarcodeEntries(self, value):
        self.BarcodeEntries.append(value)
    def insert_BarcodeEntries_at(self, index, value):
        self.BarcodeEntries.insert(index, value)
    def replace_BarcodeEntries_at(self, index, value):
        self.BarcodeEntries[index] = value
    def validate_CustomLabelCoordinateUnits(self, value):
        result = True
        # Validate type CustomLabelCoordinateUnits, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['MILS', 'PIXELS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomLabelCoordinateUnits' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.CoordinateUnits is not None or
            self.TextEntries or
            self.GraphicEntries or
            self.BoxEntries or
            self.TextBoxEntries or
            self.BarcodeEntries
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomLabelDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomLabelDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomLabelDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomLabelDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomLabelDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomLabelDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomLabelDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CoordinateUnits is not None:
            namespaceprefix_ = self.CoordinateUnits_nsprefix_ + ':' if (UseCapturedNS_ and self.CoordinateUnits_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCoordinateUnits>%s</%sCoordinateUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CoordinateUnits), input_name='CoordinateUnits')), namespaceprefix_ , eol_))
        for TextEntries_ in self.TextEntries:
            namespaceprefix_ = self.TextEntries_nsprefix_ + ':' if (UseCapturedNS_ and self.TextEntries_nsprefix_) else ''
            TextEntries_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TextEntries', pretty_print=pretty_print)
        for GraphicEntries_ in self.GraphicEntries:
            namespaceprefix_ = self.GraphicEntries_nsprefix_ + ':' if (UseCapturedNS_ and self.GraphicEntries_nsprefix_) else ''
            GraphicEntries_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GraphicEntries', pretty_print=pretty_print)
        for BoxEntries_ in self.BoxEntries:
            namespaceprefix_ = self.BoxEntries_nsprefix_ + ':' if (UseCapturedNS_ and self.BoxEntries_nsprefix_) else ''
            BoxEntries_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BoxEntries', pretty_print=pretty_print)
        for TextBoxEntries_ in self.TextBoxEntries:
            namespaceprefix_ = self.TextBoxEntries_nsprefix_ + ':' if (UseCapturedNS_ and self.TextBoxEntries_nsprefix_) else ''
            TextBoxEntries_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TextBoxEntries', pretty_print=pretty_print)
        for BarcodeEntries_ in self.BarcodeEntries:
            namespaceprefix_ = self.BarcodeEntries_nsprefix_ + ':' if (UseCapturedNS_ and self.BarcodeEntries_nsprefix_) else ''
            BarcodeEntries_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BarcodeEntries', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CoordinateUnits':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CoordinateUnits')
            value_ = self.gds_validate_string(value_, node, 'CoordinateUnits')
            self.CoordinateUnits = value_
            self.CoordinateUnits_nsprefix_ = child_.prefix
            # validate type CustomLabelCoordinateUnits
            self.validate_CustomLabelCoordinateUnits(self.CoordinateUnits)
        elif nodeName_ == 'TextEntries':
            obj_ = CustomLabelTextEntry.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TextEntries.append(obj_)
            obj_.original_tagname_ = 'TextEntries'
        elif nodeName_ == 'GraphicEntries':
            obj_ = CustomLabelGraphicEntry.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GraphicEntries.append(obj_)
            obj_.original_tagname_ = 'GraphicEntries'
        elif nodeName_ == 'BoxEntries':
            obj_ = CustomLabelBoxEntry.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BoxEntries.append(obj_)
            obj_.original_tagname_ = 'BoxEntries'
        elif nodeName_ == 'TextBoxEntries':
            obj_ = CustomLabelTextBoxEntry.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TextBoxEntries.append(obj_)
            obj_.original_tagname_ = 'TextBoxEntries'
        elif nodeName_ == 'BarcodeEntries':
            obj_ = CustomLabelBarcodeEntry.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BarcodeEntries.append(obj_)
            obj_.original_tagname_ = 'BarcodeEntries'
# end class CustomLabelDetail


class CustomLabelGraphicEntry(GeneratedsSuper):
    """Image to be included from printer's memory, or from a local file for
    offline clients."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, PrinterGraphicId=None, FileGraphicFullName=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Position = Position
        self.Position_nsprefix_ = None
        self.PrinterGraphicId = PrinterGraphicId
        self.PrinterGraphicId_nsprefix_ = None
        self.FileGraphicFullName = FileGraphicFullName
        self.FileGraphicFullName_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomLabelGraphicEntry)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomLabelGraphicEntry.subclass:
            return CustomLabelGraphicEntry.subclass(*args_, **kwargs_)
        else:
            return CustomLabelGraphicEntry(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def get_PrinterGraphicId(self):
        return self.PrinterGraphicId
    def set_PrinterGraphicId(self, PrinterGraphicId):
        self.PrinterGraphicId = PrinterGraphicId
    def get_FileGraphicFullName(self):
        return self.FileGraphicFullName
    def set_FileGraphicFullName(self, FileGraphicFullName):
        self.FileGraphicFullName = FileGraphicFullName
    def hasContent_(self):
        if (
            self.Position is not None or
            self.PrinterGraphicId is not None or
            self.FileGraphicFullName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomLabelGraphicEntry', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomLabelGraphicEntry')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomLabelGraphicEntry':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomLabelGraphicEntry')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomLabelGraphicEntry', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomLabelGraphicEntry'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomLabelGraphicEntry', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Position is not None:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            self.Position.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
        if self.PrinterGraphicId is not None:
            namespaceprefix_ = self.PrinterGraphicId_nsprefix_ + ':' if (UseCapturedNS_ and self.PrinterGraphicId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrinterGraphicId>%s</%sPrinterGraphicId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrinterGraphicId), input_name='PrinterGraphicId')), namespaceprefix_ , eol_))
        if self.FileGraphicFullName is not None:
            namespaceprefix_ = self.FileGraphicFullName_nsprefix_ + ':' if (UseCapturedNS_ and self.FileGraphicFullName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFileGraphicFullName>%s</%sFileGraphicFullName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FileGraphicFullName), input_name='FileGraphicFullName')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = CustomLabelPosition.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position = obj_
            obj_.original_tagname_ = 'Position'
        elif nodeName_ == 'PrinterGraphicId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PrinterGraphicId')
            value_ = self.gds_validate_string(value_, node, 'PrinterGraphicId')
            self.PrinterGraphicId = value_
            self.PrinterGraphicId_nsprefix_ = child_.prefix
        elif nodeName_ == 'FileGraphicFullName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FileGraphicFullName')
            value_ = self.gds_validate_string(value_, node, 'FileGraphicFullName')
            self.FileGraphicFullName = value_
            self.FileGraphicFullName_nsprefix_ = child_.prefix
# end class CustomLabelGraphicEntry


class CustomLabelPosition(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, X=None, Y=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.X = X
        self.X_nsprefix_ = None
        self.Y = Y
        self.Y_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomLabelPosition)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomLabelPosition.subclass:
            return CustomLabelPosition.subclass(*args_, **kwargs_)
        else:
            return CustomLabelPosition(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_X(self):
        return self.X
    def set_X(self, X):
        self.X = X
    def get_Y(self):
        return self.Y
    def set_Y(self, Y):
        self.Y = Y
    def hasContent_(self):
        if (
            self.X is not None or
            self.Y is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomLabelPosition', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomLabelPosition')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomLabelPosition':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomLabelPosition')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomLabelPosition', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomLabelPosition'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomLabelPosition', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.X is not None:
            namespaceprefix_ = self.X_nsprefix_ + ':' if (UseCapturedNS_ and self.X_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX>%s</%sX>%s' % (namespaceprefix_ , self.gds_format_integer(self.X, input_name='X'), namespaceprefix_ , eol_))
        if self.Y is not None:
            namespaceprefix_ = self.Y_nsprefix_ + ':' if (UseCapturedNS_ and self.Y_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sY>%s</%sY>%s' % (namespaceprefix_ , self.gds_format_integer(self.Y, input_name='Y'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'X' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'X')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'X')
            self.X = ival_
            self.X_nsprefix_ = child_.prefix
        elif nodeName_ == 'Y' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Y')
            ival_ = self.gds_validate_integer(ival_, node, 'Y')
            self.Y = ival_
            self.Y_nsprefix_ = child_.prefix
# end class CustomLabelPosition


class CustomLabelTextBoxEntry(GeneratedsSuper):
    """Constructed string, based on format and zero or more data fields,
    printed in specified printer font (for thermal labels) or generic
    font/size (for plain paper labels)."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TopLeftCorner=None, BottomRightCorner=None, Position=None, Format=None, DataFields=None, ThermalFontId=None, FontName=None, FontSize=None, Rotation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TopLeftCorner = TopLeftCorner
        self.TopLeftCorner_nsprefix_ = None
        self.BottomRightCorner = BottomRightCorner
        self.BottomRightCorner_nsprefix_ = None
        self.Position = Position
        self.Position_nsprefix_ = None
        self.Format = Format
        self.Format_nsprefix_ = None
        if DataFields is None:
            self.DataFields = []
        else:
            self.DataFields = DataFields
        self.DataFields_nsprefix_ = None
        self.ThermalFontId = ThermalFontId
        self.ThermalFontId_nsprefix_ = None
        self.FontName = FontName
        self.FontName_nsprefix_ = None
        self.FontSize = FontSize
        self.FontSize_nsprefix_ = None
        self.Rotation = Rotation
        self.validate_RotationType(self.Rotation)
        self.Rotation_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomLabelTextBoxEntry)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomLabelTextBoxEntry.subclass:
            return CustomLabelTextBoxEntry.subclass(*args_, **kwargs_)
        else:
            return CustomLabelTextBoxEntry(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TopLeftCorner(self):
        return self.TopLeftCorner
    def set_TopLeftCorner(self, TopLeftCorner):
        self.TopLeftCorner = TopLeftCorner
    def get_BottomRightCorner(self):
        return self.BottomRightCorner
    def set_BottomRightCorner(self, BottomRightCorner):
        self.BottomRightCorner = BottomRightCorner
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def get_Format(self):
        return self.Format
    def set_Format(self, Format):
        self.Format = Format
    def get_DataFields(self):
        return self.DataFields
    def set_DataFields(self, DataFields):
        self.DataFields = DataFields
    def add_DataFields(self, value):
        self.DataFields.append(value)
    def insert_DataFields_at(self, index, value):
        self.DataFields.insert(index, value)
    def replace_DataFields_at(self, index, value):
        self.DataFields[index] = value
    def get_ThermalFontId(self):
        return self.ThermalFontId
    def set_ThermalFontId(self, ThermalFontId):
        self.ThermalFontId = ThermalFontId
    def get_FontName(self):
        return self.FontName
    def set_FontName(self, FontName):
        self.FontName = FontName
    def get_FontSize(self):
        return self.FontSize
    def set_FontSize(self, FontSize):
        self.FontSize = FontSize
    def get_Rotation(self):
        return self.Rotation
    def set_Rotation(self, Rotation):
        self.Rotation = Rotation
    def validate_RotationType(self, value):
        result = True
        # Validate type RotationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['LEFT', 'NONE', 'RIGHT', 'UPSIDE_DOWN']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RotationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.TopLeftCorner is not None or
            self.BottomRightCorner is not None or
            self.Position is not None or
            self.Format is not None or
            self.DataFields or
            self.ThermalFontId is not None or
            self.FontName is not None or
            self.FontSize is not None or
            self.Rotation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomLabelTextBoxEntry', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomLabelTextBoxEntry')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomLabelTextBoxEntry':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomLabelTextBoxEntry')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomLabelTextBoxEntry', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomLabelTextBoxEntry'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomLabelTextBoxEntry', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TopLeftCorner is not None:
            namespaceprefix_ = self.TopLeftCorner_nsprefix_ + ':' if (UseCapturedNS_ and self.TopLeftCorner_nsprefix_) else ''
            self.TopLeftCorner.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TopLeftCorner', pretty_print=pretty_print)
        if self.BottomRightCorner is not None:
            namespaceprefix_ = self.BottomRightCorner_nsprefix_ + ':' if (UseCapturedNS_ and self.BottomRightCorner_nsprefix_) else ''
            self.BottomRightCorner.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BottomRightCorner', pretty_print=pretty_print)
        if self.Position is not None:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            self.Position.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
        if self.Format is not None:
            namespaceprefix_ = self.Format_nsprefix_ + ':' if (UseCapturedNS_ and self.Format_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormat>%s</%sFormat>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Format), input_name='Format')), namespaceprefix_ , eol_))
        for DataFields_ in self.DataFields:
            namespaceprefix_ = self.DataFields_nsprefix_ + ':' if (UseCapturedNS_ and self.DataFields_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataFields>%s</%sDataFields>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(DataFields_), input_name='DataFields')), namespaceprefix_ , eol_))
        if self.ThermalFontId is not None:
            namespaceprefix_ = self.ThermalFontId_nsprefix_ + ':' if (UseCapturedNS_ and self.ThermalFontId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sThermalFontId>%s</%sThermalFontId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ThermalFontId), input_name='ThermalFontId')), namespaceprefix_ , eol_))
        if self.FontName is not None:
            namespaceprefix_ = self.FontName_nsprefix_ + ':' if (UseCapturedNS_ and self.FontName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFontName>%s</%sFontName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FontName), input_name='FontName')), namespaceprefix_ , eol_))
        if self.FontSize is not None:
            namespaceprefix_ = self.FontSize_nsprefix_ + ':' if (UseCapturedNS_ and self.FontSize_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFontSize>%s</%sFontSize>%s' % (namespaceprefix_ , self.gds_format_integer(self.FontSize, input_name='FontSize'), namespaceprefix_ , eol_))
        if self.Rotation is not None:
            namespaceprefix_ = self.Rotation_nsprefix_ + ':' if (UseCapturedNS_ and self.Rotation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRotation>%s</%sRotation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Rotation), input_name='Rotation')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TopLeftCorner':
            obj_ = CustomLabelPosition.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TopLeftCorner = obj_
            obj_.original_tagname_ = 'TopLeftCorner'
        elif nodeName_ == 'BottomRightCorner':
            obj_ = CustomLabelPosition.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BottomRightCorner = obj_
            obj_.original_tagname_ = 'BottomRightCorner'
        elif nodeName_ == 'Position':
            obj_ = CustomLabelPosition.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position = obj_
            obj_.original_tagname_ = 'Position'
        elif nodeName_ == 'Format':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Format')
            value_ = self.gds_validate_string(value_, node, 'Format')
            self.Format = value_
            self.Format_nsprefix_ = child_.prefix
        elif nodeName_ == 'DataFields':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DataFields')
            value_ = self.gds_validate_string(value_, node, 'DataFields')
            self.DataFields.append(value_)
            self.DataFields_nsprefix_ = child_.prefix
        elif nodeName_ == 'ThermalFontId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ThermalFontId')
            value_ = self.gds_validate_string(value_, node, 'ThermalFontId')
            self.ThermalFontId = value_
            self.ThermalFontId_nsprefix_ = child_.prefix
        elif nodeName_ == 'FontName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FontName')
            value_ = self.gds_validate_string(value_, node, 'FontName')
            self.FontName = value_
            self.FontName_nsprefix_ = child_.prefix
        elif nodeName_ == 'FontSize' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'FontSize')
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'FontSize')
            self.FontSize = ival_
            self.FontSize_nsprefix_ = child_.prefix
        elif nodeName_ == 'Rotation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Rotation')
            value_ = self.gds_validate_string(value_, node, 'Rotation')
            self.Rotation = value_
            self.Rotation_nsprefix_ = child_.prefix
            # validate type RotationType
            self.validate_RotationType(self.Rotation)
# end class CustomLabelTextBoxEntry


class CustomLabelTextEntry(GeneratedsSuper):
    """Constructed string, based on format and zero or more data fields,
    printed in specified printer font (for thermal labels) or generic
    font/size (for plain paper labels)."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, Format=None, DataFields=None, ThermalFontId=None, FontName=None, FontSize=None, Rotation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Position = Position
        self.Position_nsprefix_ = None
        self.Format = Format
        self.Format_nsprefix_ = None
        if DataFields is None:
            self.DataFields = []
        else:
            self.DataFields = DataFields
        self.DataFields_nsprefix_ = None
        self.ThermalFontId = ThermalFontId
        self.ThermalFontId_nsprefix_ = None
        self.FontName = FontName
        self.FontName_nsprefix_ = None
        self.FontSize = FontSize
        self.FontSize_nsprefix_ = None
        self.Rotation = Rotation
        self.validate_RotationType(self.Rotation)
        self.Rotation_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomLabelTextEntry)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomLabelTextEntry.subclass:
            return CustomLabelTextEntry.subclass(*args_, **kwargs_)
        else:
            return CustomLabelTextEntry(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def get_Format(self):
        return self.Format
    def set_Format(self, Format):
        self.Format = Format
    def get_DataFields(self):
        return self.DataFields
    def set_DataFields(self, DataFields):
        self.DataFields = DataFields
    def add_DataFields(self, value):
        self.DataFields.append(value)
    def insert_DataFields_at(self, index, value):
        self.DataFields.insert(index, value)
    def replace_DataFields_at(self, index, value):
        self.DataFields[index] = value
    def get_ThermalFontId(self):
        return self.ThermalFontId
    def set_ThermalFontId(self, ThermalFontId):
        self.ThermalFontId = ThermalFontId
    def get_FontName(self):
        return self.FontName
    def set_FontName(self, FontName):
        self.FontName = FontName
    def get_FontSize(self):
        return self.FontSize
    def set_FontSize(self, FontSize):
        self.FontSize = FontSize
    def get_Rotation(self):
        return self.Rotation
    def set_Rotation(self, Rotation):
        self.Rotation = Rotation
    def validate_RotationType(self, value):
        result = True
        # Validate type RotationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['LEFT', 'NONE', 'RIGHT', 'UPSIDE_DOWN']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RotationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Position is not None or
            self.Format is not None or
            self.DataFields or
            self.ThermalFontId is not None or
            self.FontName is not None or
            self.FontSize is not None or
            self.Rotation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomLabelTextEntry', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomLabelTextEntry')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomLabelTextEntry':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomLabelTextEntry')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomLabelTextEntry', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomLabelTextEntry'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomLabelTextEntry', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Position is not None:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            self.Position.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
        if self.Format is not None:
            namespaceprefix_ = self.Format_nsprefix_ + ':' if (UseCapturedNS_ and self.Format_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormat>%s</%sFormat>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Format), input_name='Format')), namespaceprefix_ , eol_))
        for DataFields_ in self.DataFields:
            namespaceprefix_ = self.DataFields_nsprefix_ + ':' if (UseCapturedNS_ and self.DataFields_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataFields>%s</%sDataFields>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(DataFields_), input_name='DataFields')), namespaceprefix_ , eol_))
        if self.ThermalFontId is not None:
            namespaceprefix_ = self.ThermalFontId_nsprefix_ + ':' if (UseCapturedNS_ and self.ThermalFontId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sThermalFontId>%s</%sThermalFontId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ThermalFontId), input_name='ThermalFontId')), namespaceprefix_ , eol_))
        if self.FontName is not None:
            namespaceprefix_ = self.FontName_nsprefix_ + ':' if (UseCapturedNS_ and self.FontName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFontName>%s</%sFontName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FontName), input_name='FontName')), namespaceprefix_ , eol_))
        if self.FontSize is not None:
            namespaceprefix_ = self.FontSize_nsprefix_ + ':' if (UseCapturedNS_ and self.FontSize_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFontSize>%s</%sFontSize>%s' % (namespaceprefix_ , self.gds_format_integer(self.FontSize, input_name='FontSize'), namespaceprefix_ , eol_))
        if self.Rotation is not None:
            namespaceprefix_ = self.Rotation_nsprefix_ + ':' if (UseCapturedNS_ and self.Rotation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRotation>%s</%sRotation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Rotation), input_name='Rotation')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = CustomLabelPosition.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position = obj_
            obj_.original_tagname_ = 'Position'
        elif nodeName_ == 'Format':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Format')
            value_ = self.gds_validate_string(value_, node, 'Format')
            self.Format = value_
            self.Format_nsprefix_ = child_.prefix
        elif nodeName_ == 'DataFields':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DataFields')
            value_ = self.gds_validate_string(value_, node, 'DataFields')
            self.DataFields.append(value_)
            self.DataFields_nsprefix_ = child_.prefix
        elif nodeName_ == 'ThermalFontId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ThermalFontId')
            value_ = self.gds_validate_string(value_, node, 'ThermalFontId')
            self.ThermalFontId = value_
            self.ThermalFontId_nsprefix_ = child_.prefix
        elif nodeName_ == 'FontName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FontName')
            value_ = self.gds_validate_string(value_, node, 'FontName')
            self.FontName = value_
            self.FontName_nsprefix_ = child_.prefix
        elif nodeName_ == 'FontSize' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'FontSize')
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'FontSize')
            self.FontSize = ival_
            self.FontSize_nsprefix_ = child_.prefix
        elif nodeName_ == 'Rotation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Rotation')
            value_ = self.gds_validate_string(value_, node, 'Rotation')
            self.Rotation = value_
            self.Rotation_nsprefix_ = child_.prefix
            # validate type RotationType
            self.validate_RotationType(self.Rotation)
# end class CustomLabelTextEntry


class CustomerImageUsage(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Id=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_CustomerImageUsageType(self.Type)
        self.Type_nsprefix_ = None
        self.Id = Id
        self.validate_ImageId(self.Id)
        self.Id_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomerImageUsage)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomerImageUsage.subclass:
            return CustomerImageUsage.subclass(*args_, **kwargs_)
        else:
            return CustomerImageUsage(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def validate_CustomerImageUsageType(self, value):
        result = True
        # Validate type CustomerImageUsageType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['LETTER_HEAD', 'SIGNATURE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomerImageUsageType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ImageId(self, value):
        result = True
        # Validate type ImageId, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['IMAGE_1', 'IMAGE_2', 'IMAGE_3', 'IMAGE_4', 'IMAGE_5']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ImageId' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Id is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerImageUsage', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomerImageUsage')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomerImageUsage':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomerImageUsage')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomerImageUsage', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomerImageUsage'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerImageUsage', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Id is not None:
            namespaceprefix_ = self.Id_nsprefix_ + ':' if (UseCapturedNS_ and self.Id_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sId>%s</%sId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type CustomerImageUsageType
            self.validate_CustomerImageUsageType(self.Type)
        elif nodeName_ == 'Id':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Id')
            value_ = self.gds_validate_string(value_, node, 'Id')
            self.Id = value_
            self.Id_nsprefix_ = child_.prefix
            # validate type ImageId
            self.validate_ImageId(self.Id)
# end class CustomerImageUsage


class CustomerReference(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CustomerReferenceType=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CustomerReferenceType = CustomerReferenceType
        self.validate_CustomerReferenceType(self.CustomerReferenceType)
        self.CustomerReferenceType_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomerReference)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomerReference.subclass:
            return CustomerReference.subclass(*args_, **kwargs_)
        else:
            return CustomerReference(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CustomerReferenceType(self):
        return self.CustomerReferenceType
    def set_CustomerReferenceType(self, CustomerReferenceType):
        self.CustomerReferenceType = CustomerReferenceType
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def validate_CustomerReferenceType(self, value):
        result = True
        # Validate type CustomerReferenceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CUSTOMER_REFERENCE', 'DEPARTMENT_NUMBER', 'INTRACOUNTRY_REGULATORY_REFERENCE', 'INVOICE_NUMBER', 'P_O_NUMBER', 'RMA_ASSOCIATION', 'SHIPMENT_INTEGRITY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomerReferenceType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.CustomerReferenceType is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerReference', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomerReference')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomerReference':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomerReference')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomerReference', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomerReference'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerReference', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomerReferenceType is not None:
            namespaceprefix_ = self.CustomerReferenceType_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerReferenceType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomerReferenceType>%s</%sCustomerReferenceType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomerReferenceType), input_name='CustomerReferenceType')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CustomerReferenceType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomerReferenceType')
            value_ = self.gds_validate_string(value_, node, 'CustomerReferenceType')
            self.CustomerReferenceType = value_
            self.CustomerReferenceType_nsprefix_ = child_.prefix
            # validate type CustomerReferenceType
            self.validate_CustomerReferenceType(self.CustomerReferenceType)
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
# end class CustomerReference


class CustomerSpecifiedLabelDetail(GeneratedsSuper):
    """Allows customer-specified control of label content."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DocTabContent=None, CustomContentPosition=None, CustomContent=None, ConfigurableReferenceEntries=None, MaskedData=None, SecondaryBarcode=None, TermsAndConditionsLocalization=None, RegulatoryLabels=None, AdditionalLabels=None, AirWaybillSuppressionCount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DocTabContent = DocTabContent
        self.DocTabContent_nsprefix_ = None
        self.CustomContentPosition = CustomContentPosition
        self.validate_RelativeVerticalPositionType(self.CustomContentPosition)
        self.CustomContentPosition_nsprefix_ = None
        self.CustomContent = CustomContent
        self.CustomContent_nsprefix_ = None
        if ConfigurableReferenceEntries is None:
            self.ConfigurableReferenceEntries = []
        else:
            self.ConfigurableReferenceEntries = ConfigurableReferenceEntries
        self.ConfigurableReferenceEntries_nsprefix_ = None
        if MaskedData is None:
            self.MaskedData = []
        else:
            self.MaskedData = MaskedData
        self.MaskedData_nsprefix_ = None
        self.SecondaryBarcode = SecondaryBarcode
        self.validate_SecondaryBarcodeType(self.SecondaryBarcode)
        self.SecondaryBarcode_nsprefix_ = None
        self.TermsAndConditionsLocalization = TermsAndConditionsLocalization
        self.TermsAndConditionsLocalization_nsprefix_ = None
        if RegulatoryLabels is None:
            self.RegulatoryLabels = []
        else:
            self.RegulatoryLabels = RegulatoryLabels
        self.RegulatoryLabels_nsprefix_ = None
        if AdditionalLabels is None:
            self.AdditionalLabels = []
        else:
            self.AdditionalLabels = AdditionalLabels
        self.AdditionalLabels_nsprefix_ = None
        self.AirWaybillSuppressionCount = AirWaybillSuppressionCount
        self.AirWaybillSuppressionCount_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomerSpecifiedLabelDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomerSpecifiedLabelDetail.subclass:
            return CustomerSpecifiedLabelDetail.subclass(*args_, **kwargs_)
        else:
            return CustomerSpecifiedLabelDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocTabContent(self):
        return self.DocTabContent
    def set_DocTabContent(self, DocTabContent):
        self.DocTabContent = DocTabContent
    def get_CustomContentPosition(self):
        return self.CustomContentPosition
    def set_CustomContentPosition(self, CustomContentPosition):
        self.CustomContentPosition = CustomContentPosition
    def get_CustomContent(self):
        return self.CustomContent
    def set_CustomContent(self, CustomContent):
        self.CustomContent = CustomContent
    def get_ConfigurableReferenceEntries(self):
        return self.ConfigurableReferenceEntries
    def set_ConfigurableReferenceEntries(self, ConfigurableReferenceEntries):
        self.ConfigurableReferenceEntries = ConfigurableReferenceEntries
    def add_ConfigurableReferenceEntries(self, value):
        self.ConfigurableReferenceEntries.append(value)
    def insert_ConfigurableReferenceEntries_at(self, index, value):
        self.ConfigurableReferenceEntries.insert(index, value)
    def replace_ConfigurableReferenceEntries_at(self, index, value):
        self.ConfigurableReferenceEntries[index] = value
    def get_MaskedData(self):
        return self.MaskedData
    def set_MaskedData(self, MaskedData):
        self.MaskedData = MaskedData
    def add_MaskedData(self, value):
        self.MaskedData.append(value)
    def insert_MaskedData_at(self, index, value):
        self.MaskedData.insert(index, value)
    def replace_MaskedData_at(self, index, value):
        self.MaskedData[index] = value
    def get_SecondaryBarcode(self):
        return self.SecondaryBarcode
    def set_SecondaryBarcode(self, SecondaryBarcode):
        self.SecondaryBarcode = SecondaryBarcode
    def get_TermsAndConditionsLocalization(self):
        return self.TermsAndConditionsLocalization
    def set_TermsAndConditionsLocalization(self, TermsAndConditionsLocalization):
        self.TermsAndConditionsLocalization = TermsAndConditionsLocalization
    def get_RegulatoryLabels(self):
        return self.RegulatoryLabels
    def set_RegulatoryLabels(self, RegulatoryLabels):
        self.RegulatoryLabels = RegulatoryLabels
    def add_RegulatoryLabels(self, value):
        self.RegulatoryLabels.append(value)
    def insert_RegulatoryLabels_at(self, index, value):
        self.RegulatoryLabels.insert(index, value)
    def replace_RegulatoryLabels_at(self, index, value):
        self.RegulatoryLabels[index] = value
    def get_AdditionalLabels(self):
        return self.AdditionalLabels
    def set_AdditionalLabels(self, AdditionalLabels):
        self.AdditionalLabels = AdditionalLabels
    def add_AdditionalLabels(self, value):
        self.AdditionalLabels.append(value)
    def insert_AdditionalLabels_at(self, index, value):
        self.AdditionalLabels.insert(index, value)
    def replace_AdditionalLabels_at(self, index, value):
        self.AdditionalLabels[index] = value
    def get_AirWaybillSuppressionCount(self):
        return self.AirWaybillSuppressionCount
    def set_AirWaybillSuppressionCount(self, AirWaybillSuppressionCount):
        self.AirWaybillSuppressionCount = AirWaybillSuppressionCount
    def validate_RelativeVerticalPositionType(self, value):
        result = True
        # Validate type RelativeVerticalPositionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ABOVE', 'BELOW']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RelativeVerticalPositionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_LabelMaskableDataType(self, value):
        result = True
        # Validate type LabelMaskableDataType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CUSTOMS_VALUE', 'DUTIES_AND_TAXES_PAYOR_ACCOUNT_NUMBER', 'SECONDARY_BARCODE', 'SHIPPER_ACCOUNT_NUMBER', 'TERMS_AND_CONDITIONS', 'TRANSPORTATION_CHARGES_PAYOR_ACCOUNT_NUMBER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on LabelMaskableDataType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_SecondaryBarcodeType(self, value):
        result = True
        # Validate type SecondaryBarcodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['COMMON_2D', 'NONE', 'SSCC_18', 'USPS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SecondaryBarcodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.DocTabContent is not None or
            self.CustomContentPosition is not None or
            self.CustomContent is not None or
            self.ConfigurableReferenceEntries or
            self.MaskedData or
            self.SecondaryBarcode is not None or
            self.TermsAndConditionsLocalization is not None or
            self.RegulatoryLabels or
            self.AdditionalLabels or
            self.AirWaybillSuppressionCount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerSpecifiedLabelDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomerSpecifiedLabelDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomerSpecifiedLabelDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomerSpecifiedLabelDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomerSpecifiedLabelDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomerSpecifiedLabelDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomerSpecifiedLabelDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocTabContent is not None:
            namespaceprefix_ = self.DocTabContent_nsprefix_ + ':' if (UseCapturedNS_ and self.DocTabContent_nsprefix_) else ''
            self.DocTabContent.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocTabContent', pretty_print=pretty_print)
        if self.CustomContentPosition is not None:
            namespaceprefix_ = self.CustomContentPosition_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomContentPosition_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomContentPosition>%s</%sCustomContentPosition>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomContentPosition), input_name='CustomContentPosition')), namespaceprefix_ , eol_))
        if self.CustomContent is not None:
            namespaceprefix_ = self.CustomContent_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomContent_nsprefix_) else ''
            self.CustomContent.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomContent', pretty_print=pretty_print)
        for ConfigurableReferenceEntries_ in self.ConfigurableReferenceEntries:
            namespaceprefix_ = self.ConfigurableReferenceEntries_nsprefix_ + ':' if (UseCapturedNS_ and self.ConfigurableReferenceEntries_nsprefix_) else ''
            ConfigurableReferenceEntries_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ConfigurableReferenceEntries', pretty_print=pretty_print)
        for MaskedData_ in self.MaskedData:
            namespaceprefix_ = self.MaskedData_nsprefix_ + ':' if (UseCapturedNS_ and self.MaskedData_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaskedData>%s</%sMaskedData>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(MaskedData_), input_name='MaskedData')), namespaceprefix_ , eol_))
        if self.SecondaryBarcode is not None:
            namespaceprefix_ = self.SecondaryBarcode_nsprefix_ + ':' if (UseCapturedNS_ and self.SecondaryBarcode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSecondaryBarcode>%s</%sSecondaryBarcode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SecondaryBarcode), input_name='SecondaryBarcode')), namespaceprefix_ , eol_))
        if self.TermsAndConditionsLocalization is not None:
            namespaceprefix_ = self.TermsAndConditionsLocalization_nsprefix_ + ':' if (UseCapturedNS_ and self.TermsAndConditionsLocalization_nsprefix_) else ''
            self.TermsAndConditionsLocalization.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TermsAndConditionsLocalization', pretty_print=pretty_print)
        for RegulatoryLabels_ in self.RegulatoryLabels:
            namespaceprefix_ = self.RegulatoryLabels_nsprefix_ + ':' if (UseCapturedNS_ and self.RegulatoryLabels_nsprefix_) else ''
            RegulatoryLabels_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RegulatoryLabels', pretty_print=pretty_print)
        for AdditionalLabels_ in self.AdditionalLabels:
            namespaceprefix_ = self.AdditionalLabels_nsprefix_ + ':' if (UseCapturedNS_ and self.AdditionalLabels_nsprefix_) else ''
            AdditionalLabels_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AdditionalLabels', pretty_print=pretty_print)
        if self.AirWaybillSuppressionCount is not None:
            namespaceprefix_ = self.AirWaybillSuppressionCount_nsprefix_ + ':' if (UseCapturedNS_ and self.AirWaybillSuppressionCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAirWaybillSuppressionCount>%s</%sAirWaybillSuppressionCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.AirWaybillSuppressionCount, input_name='AirWaybillSuppressionCount'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocTabContent':
            obj_ = DocTabContent.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocTabContent = obj_
            obj_.original_tagname_ = 'DocTabContent'
        elif nodeName_ == 'CustomContentPosition':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomContentPosition')
            value_ = self.gds_validate_string(value_, node, 'CustomContentPosition')
            self.CustomContentPosition = value_
            self.CustomContentPosition_nsprefix_ = child_.prefix
            # validate type RelativeVerticalPositionType
            self.validate_RelativeVerticalPositionType(self.CustomContentPosition)
        elif nodeName_ == 'CustomContent':
            obj_ = CustomLabelDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomContent = obj_
            obj_.original_tagname_ = 'CustomContent'
        elif nodeName_ == 'ConfigurableReferenceEntries':
            obj_ = ConfigurableLabelReferenceEntry.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ConfigurableReferenceEntries.append(obj_)
            obj_.original_tagname_ = 'ConfigurableReferenceEntries'
        elif nodeName_ == 'MaskedData':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MaskedData')
            value_ = self.gds_validate_string(value_, node, 'MaskedData')
            self.MaskedData.append(value_)
            self.MaskedData_nsprefix_ = child_.prefix
            # validate type LabelMaskableDataType
            self.validate_LabelMaskableDataType(self.MaskedData[-1])
        elif nodeName_ == 'SecondaryBarcode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SecondaryBarcode')
            value_ = self.gds_validate_string(value_, node, 'SecondaryBarcode')
            self.SecondaryBarcode = value_
            self.SecondaryBarcode_nsprefix_ = child_.prefix
            # validate type SecondaryBarcodeType
            self.validate_SecondaryBarcodeType(self.SecondaryBarcode)
        elif nodeName_ == 'TermsAndConditionsLocalization':
            obj_ = Localization.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TermsAndConditionsLocalization = obj_
            obj_.original_tagname_ = 'TermsAndConditionsLocalization'
        elif nodeName_ == 'RegulatoryLabels':
            obj_ = RegulatoryLabelContentDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RegulatoryLabels.append(obj_)
            obj_.original_tagname_ = 'RegulatoryLabels'
        elif nodeName_ == 'AdditionalLabels':
            obj_ = AdditionalLabelsDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AdditionalLabels.append(obj_)
            obj_.original_tagname_ = 'AdditionalLabels'
        elif nodeName_ == 'AirWaybillSuppressionCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'AirWaybillSuppressionCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'AirWaybillSuppressionCount')
            self.AirWaybillSuppressionCount = ival_
            self.AirWaybillSuppressionCount_nsprefix_ = child_.prefix
# end class CustomerSpecifiedLabelDetail


class CustomsClearanceDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Brokers=None, ClearanceBrokerage=None, CustomsOptions=None, ImporterOfRecord=None, RecipientCustomsId=None, DutiesPayment=None, DocumentContent=None, CustomsValue=None, FreightOnValue=None, InsuranceCharges=None, PartiesToTransactionAreRelated=None, CommercialInvoice=None, Commodities=None, ExportDetail=None, RegulatoryControls=None, DeclarationStatementDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Brokers is None:
            self.Brokers = []
        else:
            self.Brokers = Brokers
        self.Brokers_nsprefix_ = None
        self.ClearanceBrokerage = ClearanceBrokerage
        self.validate_ClearanceBrokerageType(self.ClearanceBrokerage)
        self.ClearanceBrokerage_nsprefix_ = None
        self.CustomsOptions = CustomsOptions
        self.CustomsOptions_nsprefix_ = None
        self.ImporterOfRecord = ImporterOfRecord
        self.ImporterOfRecord_nsprefix_ = None
        self.RecipientCustomsId = RecipientCustomsId
        self.RecipientCustomsId_nsprefix_ = None
        self.DutiesPayment = DutiesPayment
        self.DutiesPayment_nsprefix_ = None
        self.DocumentContent = DocumentContent
        self.validate_InternationalDocumentContentType(self.DocumentContent)
        self.DocumentContent_nsprefix_ = None
        self.CustomsValue = CustomsValue
        self.CustomsValue_nsprefix_ = None
        self.FreightOnValue = FreightOnValue
        self.validate_FreightOnValueType(self.FreightOnValue)
        self.FreightOnValue_nsprefix_ = None
        self.InsuranceCharges = InsuranceCharges
        self.InsuranceCharges_nsprefix_ = None
        self.PartiesToTransactionAreRelated = PartiesToTransactionAreRelated
        self.PartiesToTransactionAreRelated_nsprefix_ = None
        self.CommercialInvoice = CommercialInvoice
        self.CommercialInvoice_nsprefix_ = None
        if Commodities is None:
            self.Commodities = []
        else:
            self.Commodities = Commodities
        self.Commodities_nsprefix_ = None
        self.ExportDetail = ExportDetail
        self.ExportDetail_nsprefix_ = None
        if RegulatoryControls is None:
            self.RegulatoryControls = []
        else:
            self.RegulatoryControls = RegulatoryControls
        self.RegulatoryControls_nsprefix_ = None
        self.DeclarationStatementDetail = DeclarationStatementDetail
        self.DeclarationStatementDetail_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomsClearanceDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomsClearanceDetail.subclass:
            return CustomsClearanceDetail.subclass(*args_, **kwargs_)
        else:
            return CustomsClearanceDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Brokers(self):
        return self.Brokers
    def set_Brokers(self, Brokers):
        self.Brokers = Brokers
    def add_Brokers(self, value):
        self.Brokers.append(value)
    def insert_Brokers_at(self, index, value):
        self.Brokers.insert(index, value)
    def replace_Brokers_at(self, index, value):
        self.Brokers[index] = value
    def get_ClearanceBrokerage(self):
        return self.ClearanceBrokerage
    def set_ClearanceBrokerage(self, ClearanceBrokerage):
        self.ClearanceBrokerage = ClearanceBrokerage
    def get_CustomsOptions(self):
        return self.CustomsOptions
    def set_CustomsOptions(self, CustomsOptions):
        self.CustomsOptions = CustomsOptions
    def get_ImporterOfRecord(self):
        return self.ImporterOfRecord
    def set_ImporterOfRecord(self, ImporterOfRecord):
        self.ImporterOfRecord = ImporterOfRecord
    def get_RecipientCustomsId(self):
        return self.RecipientCustomsId
    def set_RecipientCustomsId(self, RecipientCustomsId):
        self.RecipientCustomsId = RecipientCustomsId
    def get_DutiesPayment(self):
        return self.DutiesPayment
    def set_DutiesPayment(self, DutiesPayment):
        self.DutiesPayment = DutiesPayment
    def get_DocumentContent(self):
        return self.DocumentContent
    def set_DocumentContent(self, DocumentContent):
        self.DocumentContent = DocumentContent
    def get_CustomsValue(self):
        return self.CustomsValue
    def set_CustomsValue(self, CustomsValue):
        self.CustomsValue = CustomsValue
    def get_FreightOnValue(self):
        return self.FreightOnValue
    def set_FreightOnValue(self, FreightOnValue):
        self.FreightOnValue = FreightOnValue
    def get_InsuranceCharges(self):
        return self.InsuranceCharges
    def set_InsuranceCharges(self, InsuranceCharges):
        self.InsuranceCharges = InsuranceCharges
    def get_PartiesToTransactionAreRelated(self):
        return self.PartiesToTransactionAreRelated
    def set_PartiesToTransactionAreRelated(self, PartiesToTransactionAreRelated):
        self.PartiesToTransactionAreRelated = PartiesToTransactionAreRelated
    def get_CommercialInvoice(self):
        return self.CommercialInvoice
    def set_CommercialInvoice(self, CommercialInvoice):
        self.CommercialInvoice = CommercialInvoice
    def get_Commodities(self):
        return self.Commodities
    def set_Commodities(self, Commodities):
        self.Commodities = Commodities
    def add_Commodities(self, value):
        self.Commodities.append(value)
    def insert_Commodities_at(self, index, value):
        self.Commodities.insert(index, value)
    def replace_Commodities_at(self, index, value):
        self.Commodities[index] = value
    def get_ExportDetail(self):
        return self.ExportDetail
    def set_ExportDetail(self, ExportDetail):
        self.ExportDetail = ExportDetail
    def get_RegulatoryControls(self):
        return self.RegulatoryControls
    def set_RegulatoryControls(self, RegulatoryControls):
        self.RegulatoryControls = RegulatoryControls
    def add_RegulatoryControls(self, value):
        self.RegulatoryControls.append(value)
    def insert_RegulatoryControls_at(self, index, value):
        self.RegulatoryControls.insert(index, value)
    def replace_RegulatoryControls_at(self, index, value):
        self.RegulatoryControls[index] = value
    def get_DeclarationStatementDetail(self):
        return self.DeclarationStatementDetail
    def set_DeclarationStatementDetail(self, DeclarationStatementDetail):
        self.DeclarationStatementDetail = DeclarationStatementDetail
    def validate_ClearanceBrokerageType(self, value):
        result = True
        # Validate type ClearanceBrokerageType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BROKER_INCLUSIVE', 'BROKER_INCLUSIVE_NON_RESIDENT_IMPORTER', 'BROKER_SELECT', 'BROKER_SELECT_NON_RESIDENT_IMPORTER', 'BROKER_UNASSIGNED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ClearanceBrokerageType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_InternationalDocumentContentType(self, value):
        result = True
        # Validate type InternationalDocumentContentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DERIVED', 'DOCUMENTS_ONLY', 'NON_DOCUMENTS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on InternationalDocumentContentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_FreightOnValueType(self, value):
        result = True
        # Validate type FreightOnValueType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CARRIER_RISK', 'OWN_RISK']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FreightOnValueType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_RegulatoryControlType(self, value):
        result = True
        # Validate type RegulatoryControlType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FOOD_OR_PERISHABLE', 'NAFTA', 'NOT_APPLICABLE_FOR_LOW_CUSTOMS_VALUE_EXCEPTION', 'NOT_IN_FREE_CIRCULATION']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RegulatoryControlType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Brokers or
            self.ClearanceBrokerage is not None or
            self.CustomsOptions is not None or
            self.ImporterOfRecord is not None or
            self.RecipientCustomsId is not None or
            self.DutiesPayment is not None or
            self.DocumentContent is not None or
            self.CustomsValue is not None or
            self.FreightOnValue is not None or
            self.InsuranceCharges is not None or
            self.PartiesToTransactionAreRelated is not None or
            self.CommercialInvoice is not None or
            self.Commodities or
            self.ExportDetail is not None or
            self.RegulatoryControls or
            self.DeclarationStatementDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomsClearanceDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomsClearanceDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomsClearanceDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomsClearanceDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomsClearanceDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomsClearanceDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomsClearanceDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Brokers_ in self.Brokers:
            namespaceprefix_ = self.Brokers_nsprefix_ + ':' if (UseCapturedNS_ and self.Brokers_nsprefix_) else ''
            Brokers_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Brokers', pretty_print=pretty_print)
        if self.ClearanceBrokerage is not None:
            namespaceprefix_ = self.ClearanceBrokerage_nsprefix_ + ':' if (UseCapturedNS_ and self.ClearanceBrokerage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClearanceBrokerage>%s</%sClearanceBrokerage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClearanceBrokerage), input_name='ClearanceBrokerage')), namespaceprefix_ , eol_))
        if self.CustomsOptions is not None:
            namespaceprefix_ = self.CustomsOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsOptions_nsprefix_) else ''
            self.CustomsOptions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomsOptions', pretty_print=pretty_print)
        if self.ImporterOfRecord is not None:
            namespaceprefix_ = self.ImporterOfRecord_nsprefix_ + ':' if (UseCapturedNS_ and self.ImporterOfRecord_nsprefix_) else ''
            self.ImporterOfRecord.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ImporterOfRecord', pretty_print=pretty_print)
        if self.RecipientCustomsId is not None:
            namespaceprefix_ = self.RecipientCustomsId_nsprefix_ + ':' if (UseCapturedNS_ and self.RecipientCustomsId_nsprefix_) else ''
            self.RecipientCustomsId.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecipientCustomsId', pretty_print=pretty_print)
        if self.DutiesPayment is not None:
            namespaceprefix_ = self.DutiesPayment_nsprefix_ + ':' if (UseCapturedNS_ and self.DutiesPayment_nsprefix_) else ''
            self.DutiesPayment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DutiesPayment', pretty_print=pretty_print)
        if self.DocumentContent is not None:
            namespaceprefix_ = self.DocumentContent_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentContent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentContent>%s</%sDocumentContent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentContent), input_name='DocumentContent')), namespaceprefix_ , eol_))
        if self.CustomsValue is not None:
            namespaceprefix_ = self.CustomsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsValue_nsprefix_) else ''
            self.CustomsValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomsValue', pretty_print=pretty_print)
        if self.FreightOnValue is not None:
            namespaceprefix_ = self.FreightOnValue_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightOnValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFreightOnValue>%s</%sFreightOnValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FreightOnValue), input_name='FreightOnValue')), namespaceprefix_ , eol_))
        if self.InsuranceCharges is not None:
            namespaceprefix_ = self.InsuranceCharges_nsprefix_ + ':' if (UseCapturedNS_ and self.InsuranceCharges_nsprefix_) else ''
            self.InsuranceCharges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InsuranceCharges', pretty_print=pretty_print)
        if self.PartiesToTransactionAreRelated is not None:
            namespaceprefix_ = self.PartiesToTransactionAreRelated_nsprefix_ + ':' if (UseCapturedNS_ and self.PartiesToTransactionAreRelated_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPartiesToTransactionAreRelated>%s</%sPartiesToTransactionAreRelated>%s' % (namespaceprefix_ , self.gds_format_boolean(self.PartiesToTransactionAreRelated, input_name='PartiesToTransactionAreRelated'), namespaceprefix_ , eol_))
        if self.CommercialInvoice is not None:
            namespaceprefix_ = self.CommercialInvoice_nsprefix_ + ':' if (UseCapturedNS_ and self.CommercialInvoice_nsprefix_) else ''
            self.CommercialInvoice.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CommercialInvoice', pretty_print=pretty_print)
        for Commodities_ in self.Commodities:
            namespaceprefix_ = self.Commodities_nsprefix_ + ':' if (UseCapturedNS_ and self.Commodities_nsprefix_) else ''
            Commodities_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Commodities', pretty_print=pretty_print)
        if self.ExportDetail is not None:
            namespaceprefix_ = self.ExportDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ExportDetail_nsprefix_) else ''
            self.ExportDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExportDetail', pretty_print=pretty_print)
        for RegulatoryControls_ in self.RegulatoryControls:
            namespaceprefix_ = self.RegulatoryControls_nsprefix_ + ':' if (UseCapturedNS_ and self.RegulatoryControls_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegulatoryControls>%s</%sRegulatoryControls>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(RegulatoryControls_), input_name='RegulatoryControls')), namespaceprefix_ , eol_))
        if self.DeclarationStatementDetail is not None:
            namespaceprefix_ = self.DeclarationStatementDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.DeclarationStatementDetail_nsprefix_) else ''
            self.DeclarationStatementDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DeclarationStatementDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Brokers':
            obj_ = BrokerDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Brokers.append(obj_)
            obj_.original_tagname_ = 'Brokers'
        elif nodeName_ == 'ClearanceBrokerage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClearanceBrokerage')
            value_ = self.gds_validate_string(value_, node, 'ClearanceBrokerage')
            self.ClearanceBrokerage = value_
            self.ClearanceBrokerage_nsprefix_ = child_.prefix
            # validate type ClearanceBrokerageType
            self.validate_ClearanceBrokerageType(self.ClearanceBrokerage)
        elif nodeName_ == 'CustomsOptions':
            obj_ = CustomsOptionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomsOptions = obj_
            obj_.original_tagname_ = 'CustomsOptions'
        elif nodeName_ == 'ImporterOfRecord':
            obj_ = Party.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ImporterOfRecord = obj_
            obj_.original_tagname_ = 'ImporterOfRecord'
        elif nodeName_ == 'RecipientCustomsId':
            obj_ = RecipientCustomsId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecipientCustomsId = obj_
            obj_.original_tagname_ = 'RecipientCustomsId'
        elif nodeName_ == 'DutiesPayment':
            obj_ = Payment.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DutiesPayment = obj_
            obj_.original_tagname_ = 'DutiesPayment'
        elif nodeName_ == 'DocumentContent':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocumentContent')
            value_ = self.gds_validate_string(value_, node, 'DocumentContent')
            self.DocumentContent = value_
            self.DocumentContent_nsprefix_ = child_.prefix
            # validate type InternationalDocumentContentType
            self.validate_InternationalDocumentContentType(self.DocumentContent)
        elif nodeName_ == 'CustomsValue':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomsValue = obj_
            obj_.original_tagname_ = 'CustomsValue'
        elif nodeName_ == 'FreightOnValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FreightOnValue')
            value_ = self.gds_validate_string(value_, node, 'FreightOnValue')
            self.FreightOnValue = value_
            self.FreightOnValue_nsprefix_ = child_.prefix
            # validate type FreightOnValueType
            self.validate_FreightOnValueType(self.FreightOnValue)
        elif nodeName_ == 'InsuranceCharges':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InsuranceCharges = obj_
            obj_.original_tagname_ = 'InsuranceCharges'
        elif nodeName_ == 'PartiesToTransactionAreRelated':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'PartiesToTransactionAreRelated')
            ival_ = self.gds_validate_boolean(ival_, node, 'PartiesToTransactionAreRelated')
            self.PartiesToTransactionAreRelated = ival_
            self.PartiesToTransactionAreRelated_nsprefix_ = child_.prefix
        elif nodeName_ == 'CommercialInvoice':
            obj_ = CommercialInvoice.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CommercialInvoice = obj_
            obj_.original_tagname_ = 'CommercialInvoice'
        elif nodeName_ == 'Commodities':
            obj_ = Commodity.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Commodities.append(obj_)
            obj_.original_tagname_ = 'Commodities'
        elif nodeName_ == 'ExportDetail':
            obj_ = ExportDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExportDetail = obj_
            obj_.original_tagname_ = 'ExportDetail'
        elif nodeName_ == 'RegulatoryControls':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegulatoryControls')
            value_ = self.gds_validate_string(value_, node, 'RegulatoryControls')
            self.RegulatoryControls.append(value_)
            self.RegulatoryControls_nsprefix_ = child_.prefix
            # validate type RegulatoryControlType
            self.validate_RegulatoryControlType(self.RegulatoryControls[-1])
        elif nodeName_ == 'DeclarationStatementDetail':
            obj_ = CustomsDeclarationStatementDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DeclarationStatementDetail = obj_
            obj_.original_tagname_ = 'DeclarationStatementDetail'
# end class CustomsClearanceDetail


class CustomsDeclarationStatementDetail(GeneratedsSuper):
    """This provides the information necessary to identify the different
    statements, declarations, acts, and/or certifications that apply to
    this shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Types=None, NaftaLowValueStatementDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Types is None:
            self.Types = []
        else:
            self.Types = Types
        self.Types_nsprefix_ = None
        self.NaftaLowValueStatementDetail = NaftaLowValueStatementDetail
        self.NaftaLowValueStatementDetail_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomsDeclarationStatementDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomsDeclarationStatementDetail.subclass:
            return CustomsDeclarationStatementDetail.subclass(*args_, **kwargs_)
        else:
            return CustomsDeclarationStatementDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Types(self):
        return self.Types
    def set_Types(self, Types):
        self.Types = Types
    def add_Types(self, value):
        self.Types.append(value)
    def insert_Types_at(self, index, value):
        self.Types.insert(index, value)
    def replace_Types_at(self, index, value):
        self.Types[index] = value
    def get_NaftaLowValueStatementDetail(self):
        return self.NaftaLowValueStatementDetail
    def set_NaftaLowValueStatementDetail(self, NaftaLowValueStatementDetail):
        self.NaftaLowValueStatementDetail = NaftaLowValueStatementDetail
    def validate_CustomsDeclarationStatementType(self, value):
        result = True
        # Validate type CustomsDeclarationStatementType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['NAFTA_LOW_VALUE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomsDeclarationStatementType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Types or
            self.NaftaLowValueStatementDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomsDeclarationStatementDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomsDeclarationStatementDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomsDeclarationStatementDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomsDeclarationStatementDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomsDeclarationStatementDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomsDeclarationStatementDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomsDeclarationStatementDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Types_ in self.Types:
            namespaceprefix_ = self.Types_nsprefix_ + ':' if (UseCapturedNS_ and self.Types_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTypes>%s</%sTypes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Types_), input_name='Types')), namespaceprefix_ , eol_))
        if self.NaftaLowValueStatementDetail is not None:
            namespaceprefix_ = self.NaftaLowValueStatementDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.NaftaLowValueStatementDetail_nsprefix_) else ''
            self.NaftaLowValueStatementDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NaftaLowValueStatementDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Types':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Types')
            value_ = self.gds_validate_string(value_, node, 'Types')
            self.Types.append(value_)
            self.Types_nsprefix_ = child_.prefix
            # validate type CustomsDeclarationStatementType
            self.validate_CustomsDeclarationStatementType(self.Types[-1])
        elif nodeName_ == 'NaftaLowValueStatementDetail':
            obj_ = NaftaLowValueStatementDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NaftaLowValueStatementDetail = obj_
            obj_.original_tagname_ = 'NaftaLowValueStatementDetail'
# end class CustomsDeclarationStatementDetail


class CustomsOptionDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_CustomsOptionType(self.Type)
        self.Type_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomsOptionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomsOptionDetail.subclass:
            return CustomsOptionDetail.subclass(*args_, **kwargs_)
        else:
            return CustomsOptionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def validate_CustomsOptionType(self, value):
        result = True
        # Validate type CustomsOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['COURTESY_RETURN_LABEL', 'EXHIBITION_TRADE_SHOW', 'FAULTY_ITEM', 'FOLLOWING_REPAIR', 'FOR_REPAIR', 'ITEM_FOR_LOAN', 'OTHER', 'REJECTED', 'REPLACEMENT', 'TRIAL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomsOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomsOptionDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomsOptionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomsOptionDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomsOptionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomsOptionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomsOptionDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomsOptionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type CustomsOptionType
            self.validate_CustomsOptionType(self.Type)
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class CustomsOptionDetail


class DangerousGoodsContainer(GeneratedsSuper):
    """Describes an approved container used to package dangerous goods
    commodities. This does not describe any individual inner receptacles
    that may be within this container."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PackingType=None, ContainerType=None, RadioactiveContainerClass=None, NumberOfContainers=None, HazardousCommodities=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PackingType = PackingType
        self.validate_HazardousContainerPackingType(self.PackingType)
        self.PackingType_nsprefix_ = None
        self.ContainerType = ContainerType
        self.ContainerType_nsprefix_ = None
        self.RadioactiveContainerClass = RadioactiveContainerClass
        self.validate_RadioactiveContainerClassType(self.RadioactiveContainerClass)
        self.RadioactiveContainerClass_nsprefix_ = None
        self.NumberOfContainers = NumberOfContainers
        self.NumberOfContainers_nsprefix_ = None
        if HazardousCommodities is None:
            self.HazardousCommodities = []
        else:
            self.HazardousCommodities = HazardousCommodities
        self.HazardousCommodities_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DangerousGoodsContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DangerousGoodsContainer.subclass:
            return DangerousGoodsContainer.subclass(*args_, **kwargs_)
        else:
            return DangerousGoodsContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PackingType(self):
        return self.PackingType
    def set_PackingType(self, PackingType):
        self.PackingType = PackingType
    def get_ContainerType(self):
        return self.ContainerType
    def set_ContainerType(self, ContainerType):
        self.ContainerType = ContainerType
    def get_RadioactiveContainerClass(self):
        return self.RadioactiveContainerClass
    def set_RadioactiveContainerClass(self, RadioactiveContainerClass):
        self.RadioactiveContainerClass = RadioactiveContainerClass
    def get_NumberOfContainers(self):
        return self.NumberOfContainers
    def set_NumberOfContainers(self, NumberOfContainers):
        self.NumberOfContainers = NumberOfContainers
    def get_HazardousCommodities(self):
        return self.HazardousCommodities
    def set_HazardousCommodities(self, HazardousCommodities):
        self.HazardousCommodities = HazardousCommodities
    def add_HazardousCommodities(self, value):
        self.HazardousCommodities.append(value)
    def insert_HazardousCommodities_at(self, index, value):
        self.HazardousCommodities.insert(index, value)
    def replace_HazardousCommodities_at(self, index, value):
        self.HazardousCommodities[index] = value
    def validate_HazardousContainerPackingType(self, value):
        result = True
        # Validate type HazardousContainerPackingType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ALL_PACKED_IN_ONE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on HazardousContainerPackingType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_RadioactiveContainerClassType(self, value):
        result = True
        # Validate type RadioactiveContainerClassType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['EXCEPTED_PACKAGE', 'INDUSTRIAL_IP1', 'INDUSTRIAL_IP2', 'INDUSTRIAL_IP3', 'TYPE_A', 'TYPE_B_M', 'TYPE_B_U', 'TYPE_C']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RadioactiveContainerClassType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.PackingType is not None or
            self.ContainerType is not None or
            self.RadioactiveContainerClass is not None or
            self.NumberOfContainers is not None or
            self.HazardousCommodities
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DangerousGoodsContainer', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DangerousGoodsContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DangerousGoodsContainer':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DangerousGoodsContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DangerousGoodsContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DangerousGoodsContainer'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DangerousGoodsContainer', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackingType is not None:
            namespaceprefix_ = self.PackingType_nsprefix_ + ':' if (UseCapturedNS_ and self.PackingType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingType>%s</%sPackingType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PackingType), input_name='PackingType')), namespaceprefix_ , eol_))
        if self.ContainerType is not None:
            namespaceprefix_ = self.ContainerType_nsprefix_ + ':' if (UseCapturedNS_ and self.ContainerType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContainerType>%s</%sContainerType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ContainerType), input_name='ContainerType')), namespaceprefix_ , eol_))
        if self.RadioactiveContainerClass is not None:
            namespaceprefix_ = self.RadioactiveContainerClass_nsprefix_ + ':' if (UseCapturedNS_ and self.RadioactiveContainerClass_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRadioactiveContainerClass>%s</%sRadioactiveContainerClass>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RadioactiveContainerClass), input_name='RadioactiveContainerClass')), namespaceprefix_ , eol_))
        if self.NumberOfContainers is not None:
            namespaceprefix_ = self.NumberOfContainers_nsprefix_ + ':' if (UseCapturedNS_ and self.NumberOfContainers_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfContainers>%s</%sNumberOfContainers>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumberOfContainers, input_name='NumberOfContainers'), namespaceprefix_ , eol_))
        for HazardousCommodities_ in self.HazardousCommodities:
            namespaceprefix_ = self.HazardousCommodities_nsprefix_ + ':' if (UseCapturedNS_ and self.HazardousCommodities_nsprefix_) else ''
            HazardousCommodities_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HazardousCommodities', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PackingType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackingType')
            value_ = self.gds_validate_string(value_, node, 'PackingType')
            self.PackingType = value_
            self.PackingType_nsprefix_ = child_.prefix
            # validate type HazardousContainerPackingType
            self.validate_HazardousContainerPackingType(self.PackingType)
        elif nodeName_ == 'ContainerType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ContainerType')
            value_ = self.gds_validate_string(value_, node, 'ContainerType')
            self.ContainerType = value_
            self.ContainerType_nsprefix_ = child_.prefix
        elif nodeName_ == 'RadioactiveContainerClass':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RadioactiveContainerClass')
            value_ = self.gds_validate_string(value_, node, 'RadioactiveContainerClass')
            self.RadioactiveContainerClass = value_
            self.RadioactiveContainerClass_nsprefix_ = child_.prefix
            # validate type RadioactiveContainerClassType
            self.validate_RadioactiveContainerClassType(self.RadioactiveContainerClass)
        elif nodeName_ == 'NumberOfContainers' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'NumberOfContainers')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'NumberOfContainers')
            self.NumberOfContainers = ival_
            self.NumberOfContainers_nsprefix_ = child_.prefix
        elif nodeName_ == 'HazardousCommodities':
            obj_ = HazardousCommodityContent.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HazardousCommodities.append(obj_)
            obj_.original_tagname_ = 'HazardousCommodities'
# end class DangerousGoodsContainer


class DangerousGoodsDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UploadedTrackingNumber=None, Regulation=None, Accessibility=None, CargoAircraftOnly=None, Options=None, PackingOption=None, ReferenceId=None, Containers=None, Packaging=None, Signatory=None, EmergencyContactNumber=None, Offeror=None, InfectiousSubstanceResponsibleContact=None, AdditionalHandling=None, RadioactivityDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UploadedTrackingNumber = UploadedTrackingNumber
        self.UploadedTrackingNumber_nsprefix_ = None
        self.Regulation = Regulation
        self.validate_HazardousCommodityRegulationType(self.Regulation)
        self.Regulation_nsprefix_ = None
        self.Accessibility = Accessibility
        self.validate_DangerousGoodsAccessibilityType(self.Accessibility)
        self.Accessibility_nsprefix_ = None
        self.CargoAircraftOnly = CargoAircraftOnly
        self.CargoAircraftOnly_nsprefix_ = None
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.Options_nsprefix_ = None
        self.PackingOption = PackingOption
        self.validate_DangerousGoodsPackingOptionType(self.PackingOption)
        self.PackingOption_nsprefix_ = None
        self.ReferenceId = ReferenceId
        self.ReferenceId_nsprefix_ = None
        if Containers is None:
            self.Containers = []
        else:
            self.Containers = Containers
        self.Containers_nsprefix_ = None
        self.Packaging = Packaging
        self.Packaging_nsprefix_ = None
        self.Signatory = Signatory
        self.Signatory_nsprefix_ = None
        self.EmergencyContactNumber = EmergencyContactNumber
        self.EmergencyContactNumber_nsprefix_ = None
        self.Offeror = Offeror
        self.Offeror_nsprefix_ = None
        self.InfectiousSubstanceResponsibleContact = InfectiousSubstanceResponsibleContact
        self.InfectiousSubstanceResponsibleContact_nsprefix_ = None
        self.AdditionalHandling = AdditionalHandling
        self.AdditionalHandling_nsprefix_ = None
        self.RadioactivityDetail = RadioactivityDetail
        self.RadioactivityDetail_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DangerousGoodsDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DangerousGoodsDetail.subclass:
            return DangerousGoodsDetail.subclass(*args_, **kwargs_)
        else:
            return DangerousGoodsDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UploadedTrackingNumber(self):
        return self.UploadedTrackingNumber
    def set_UploadedTrackingNumber(self, UploadedTrackingNumber):
        self.UploadedTrackingNumber = UploadedTrackingNumber
    def get_Regulation(self):
        return self.Regulation
    def set_Regulation(self, Regulation):
        self.Regulation = Regulation
    def get_Accessibility(self):
        return self.Accessibility
    def set_Accessibility(self, Accessibility):
        self.Accessibility = Accessibility
    def get_CargoAircraftOnly(self):
        return self.CargoAircraftOnly
    def set_CargoAircraftOnly(self, CargoAircraftOnly):
        self.CargoAircraftOnly = CargoAircraftOnly
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def add_Options(self, value):
        self.Options.append(value)
    def insert_Options_at(self, index, value):
        self.Options.insert(index, value)
    def replace_Options_at(self, index, value):
        self.Options[index] = value
    def get_PackingOption(self):
        return self.PackingOption
    def set_PackingOption(self, PackingOption):
        self.PackingOption = PackingOption
    def get_ReferenceId(self):
        return self.ReferenceId
    def set_ReferenceId(self, ReferenceId):
        self.ReferenceId = ReferenceId
    def get_Containers(self):
        return self.Containers
    def set_Containers(self, Containers):
        self.Containers = Containers
    def add_Containers(self, value):
        self.Containers.append(value)
    def insert_Containers_at(self, index, value):
        self.Containers.insert(index, value)
    def replace_Containers_at(self, index, value):
        self.Containers[index] = value
    def get_Packaging(self):
        return self.Packaging
    def set_Packaging(self, Packaging):
        self.Packaging = Packaging
    def get_Signatory(self):
        return self.Signatory
    def set_Signatory(self, Signatory):
        self.Signatory = Signatory
    def get_EmergencyContactNumber(self):
        return self.EmergencyContactNumber
    def set_EmergencyContactNumber(self, EmergencyContactNumber):
        self.EmergencyContactNumber = EmergencyContactNumber
    def get_Offeror(self):
        return self.Offeror
    def set_Offeror(self, Offeror):
        self.Offeror = Offeror
    def get_InfectiousSubstanceResponsibleContact(self):
        return self.InfectiousSubstanceResponsibleContact
    def set_InfectiousSubstanceResponsibleContact(self, InfectiousSubstanceResponsibleContact):
        self.InfectiousSubstanceResponsibleContact = InfectiousSubstanceResponsibleContact
    def get_AdditionalHandling(self):
        return self.AdditionalHandling
    def set_AdditionalHandling(self, AdditionalHandling):
        self.AdditionalHandling = AdditionalHandling
    def get_RadioactivityDetail(self):
        return self.RadioactivityDetail
    def set_RadioactivityDetail(self, RadioactivityDetail):
        self.RadioactivityDetail = RadioactivityDetail
    def validate_HazardousCommodityRegulationType(self, value):
        result = True
        # Validate type HazardousCommodityRegulationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ADR', 'DOT', 'IATA', 'ORMD']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on HazardousCommodityRegulationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_DangerousGoodsAccessibilityType(self, value):
        result = True
        # Validate type DangerousGoodsAccessibilityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACCESSIBLE', 'INACCESSIBLE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DangerousGoodsAccessibilityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_HazardousCommodityOptionType(self, value):
        result = True
        # Validate type HazardousCommodityOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BATTERY', 'HAZARDOUS_MATERIALS', 'LIMITED_QUANTITIES_COMMODITIES', 'ORM_D', 'REPORTABLE_QUANTITIES', 'SMALL_QUANTITY_EXCEPTION']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on HazardousCommodityOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_DangerousGoodsPackingOptionType(self, value):
        result = True
        # Validate type DangerousGoodsPackingOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['OVERPACK']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DangerousGoodsPackingOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.UploadedTrackingNumber is not None or
            self.Regulation is not None or
            self.Accessibility is not None or
            self.CargoAircraftOnly is not None or
            self.Options or
            self.PackingOption is not None or
            self.ReferenceId is not None or
            self.Containers or
            self.Packaging is not None or
            self.Signatory is not None or
            self.EmergencyContactNumber is not None or
            self.Offeror is not None or
            self.InfectiousSubstanceResponsibleContact is not None or
            self.AdditionalHandling is not None or
            self.RadioactivityDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DangerousGoodsDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DangerousGoodsDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DangerousGoodsDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DangerousGoodsDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DangerousGoodsDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DangerousGoodsDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DangerousGoodsDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UploadedTrackingNumber is not None:
            namespaceprefix_ = self.UploadedTrackingNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.UploadedTrackingNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUploadedTrackingNumber>%s</%sUploadedTrackingNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UploadedTrackingNumber), input_name='UploadedTrackingNumber')), namespaceprefix_ , eol_))
        if self.Regulation is not None:
            namespaceprefix_ = self.Regulation_nsprefix_ + ':' if (UseCapturedNS_ and self.Regulation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegulation>%s</%sRegulation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Regulation), input_name='Regulation')), namespaceprefix_ , eol_))
        if self.Accessibility is not None:
            namespaceprefix_ = self.Accessibility_nsprefix_ + ':' if (UseCapturedNS_ and self.Accessibility_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccessibility>%s</%sAccessibility>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Accessibility), input_name='Accessibility')), namespaceprefix_ , eol_))
        if self.CargoAircraftOnly is not None:
            namespaceprefix_ = self.CargoAircraftOnly_nsprefix_ + ':' if (UseCapturedNS_ and self.CargoAircraftOnly_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCargoAircraftOnly>%s</%sCargoAircraftOnly>%s' % (namespaceprefix_ , self.gds_format_boolean(self.CargoAircraftOnly, input_name='CargoAircraftOnly'), namespaceprefix_ , eol_))
        for Options_ in self.Options:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptions>%s</%sOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), namespaceprefix_ , eol_))
        if self.PackingOption is not None:
            namespaceprefix_ = self.PackingOption_nsprefix_ + ':' if (UseCapturedNS_ and self.PackingOption_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingOption>%s</%sPackingOption>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PackingOption), input_name='PackingOption')), namespaceprefix_ , eol_))
        if self.ReferenceId is not None:
            namespaceprefix_ = self.ReferenceId_nsprefix_ + ':' if (UseCapturedNS_ and self.ReferenceId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceId>%s</%sReferenceId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceId), input_name='ReferenceId')), namespaceprefix_ , eol_))
        for Containers_ in self.Containers:
            namespaceprefix_ = self.Containers_nsprefix_ + ':' if (UseCapturedNS_ and self.Containers_nsprefix_) else ''
            Containers_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Containers', pretty_print=pretty_print)
        if self.Packaging is not None:
            namespaceprefix_ = self.Packaging_nsprefix_ + ':' if (UseCapturedNS_ and self.Packaging_nsprefix_) else ''
            self.Packaging.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Packaging', pretty_print=pretty_print)
        if self.Signatory is not None:
            namespaceprefix_ = self.Signatory_nsprefix_ + ':' if (UseCapturedNS_ and self.Signatory_nsprefix_) else ''
            self.Signatory.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Signatory', pretty_print=pretty_print)
        if self.EmergencyContactNumber is not None:
            namespaceprefix_ = self.EmergencyContactNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.EmergencyContactNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmergencyContactNumber>%s</%sEmergencyContactNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EmergencyContactNumber), input_name='EmergencyContactNumber')), namespaceprefix_ , eol_))
        if self.Offeror is not None:
            namespaceprefix_ = self.Offeror_nsprefix_ + ':' if (UseCapturedNS_ and self.Offeror_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOfferor>%s</%sOfferor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Offeror), input_name='Offeror')), namespaceprefix_ , eol_))
        if self.InfectiousSubstanceResponsibleContact is not None:
            namespaceprefix_ = self.InfectiousSubstanceResponsibleContact_nsprefix_ + ':' if (UseCapturedNS_ and self.InfectiousSubstanceResponsibleContact_nsprefix_) else ''
            self.InfectiousSubstanceResponsibleContact.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InfectiousSubstanceResponsibleContact', pretty_print=pretty_print)
        if self.AdditionalHandling is not None:
            namespaceprefix_ = self.AdditionalHandling_nsprefix_ + ':' if (UseCapturedNS_ and self.AdditionalHandling_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAdditionalHandling>%s</%sAdditionalHandling>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AdditionalHandling), input_name='AdditionalHandling')), namespaceprefix_ , eol_))
        if self.RadioactivityDetail is not None:
            namespaceprefix_ = self.RadioactivityDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.RadioactivityDetail_nsprefix_) else ''
            self.RadioactivityDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RadioactivityDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UploadedTrackingNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UploadedTrackingNumber')
            value_ = self.gds_validate_string(value_, node, 'UploadedTrackingNumber')
            self.UploadedTrackingNumber = value_
            self.UploadedTrackingNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Regulation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Regulation')
            value_ = self.gds_validate_string(value_, node, 'Regulation')
            self.Regulation = value_
            self.Regulation_nsprefix_ = child_.prefix
            # validate type HazardousCommodityRegulationType
            self.validate_HazardousCommodityRegulationType(self.Regulation)
        elif nodeName_ == 'Accessibility':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Accessibility')
            value_ = self.gds_validate_string(value_, node, 'Accessibility')
            self.Accessibility = value_
            self.Accessibility_nsprefix_ = child_.prefix
            # validate type DangerousGoodsAccessibilityType
            self.validate_DangerousGoodsAccessibilityType(self.Accessibility)
        elif nodeName_ == 'CargoAircraftOnly':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'CargoAircraftOnly')
            ival_ = self.gds_validate_boolean(ival_, node, 'CargoAircraftOnly')
            self.CargoAircraftOnly = ival_
            self.CargoAircraftOnly_nsprefix_ = child_.prefix
        elif nodeName_ == 'Options':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Options')
            value_ = self.gds_validate_string(value_, node, 'Options')
            self.Options.append(value_)
            self.Options_nsprefix_ = child_.prefix
            # validate type HazardousCommodityOptionType
            self.validate_HazardousCommodityOptionType(self.Options[-1])
        elif nodeName_ == 'PackingOption':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackingOption')
            value_ = self.gds_validate_string(value_, node, 'PackingOption')
            self.PackingOption = value_
            self.PackingOption_nsprefix_ = child_.prefix
            # validate type DangerousGoodsPackingOptionType
            self.validate_DangerousGoodsPackingOptionType(self.PackingOption)
        elif nodeName_ == 'ReferenceId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ReferenceId')
            value_ = self.gds_validate_string(value_, node, 'ReferenceId')
            self.ReferenceId = value_
            self.ReferenceId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Containers':
            obj_ = DangerousGoodsContainer.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Containers.append(obj_)
            obj_.original_tagname_ = 'Containers'
        elif nodeName_ == 'Packaging':
            obj_ = HazardousCommodityPackagingDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Packaging = obj_
            obj_.original_tagname_ = 'Packaging'
        elif nodeName_ == 'Signatory':
            obj_ = DangerousGoodsSignatory.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Signatory = obj_
            obj_.original_tagname_ = 'Signatory'
        elif nodeName_ == 'EmergencyContactNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EmergencyContactNumber')
            value_ = self.gds_validate_string(value_, node, 'EmergencyContactNumber')
            self.EmergencyContactNumber = value_
            self.EmergencyContactNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Offeror':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Offeror')
            value_ = self.gds_validate_string(value_, node, 'Offeror')
            self.Offeror = value_
            self.Offeror_nsprefix_ = child_.prefix
        elif nodeName_ == 'InfectiousSubstanceResponsibleContact':
            obj_ = Contact.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InfectiousSubstanceResponsibleContact = obj_
            obj_.original_tagname_ = 'InfectiousSubstanceResponsibleContact'
        elif nodeName_ == 'AdditionalHandling':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AdditionalHandling')
            value_ = self.gds_validate_string(value_, node, 'AdditionalHandling')
            self.AdditionalHandling = value_
            self.AdditionalHandling_nsprefix_ = child_.prefix
        elif nodeName_ == 'RadioactivityDetail':
            obj_ = RadioactivityDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RadioactivityDetail = obj_
            obj_.original_tagname_ = 'RadioactivityDetail'
# end class DangerousGoodsDetail


class DangerousGoodsShippersDeclarationDetail(GeneratedsSuper):
    """The instructions indicating how to print the 1421c form for dangerous
    goods shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Format=None, CustomerImageUsages=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Format = Format
        self.Format_nsprefix_ = None
        if CustomerImageUsages is None:
            self.CustomerImageUsages = []
        else:
            self.CustomerImageUsages = CustomerImageUsages
        self.CustomerImageUsages_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DangerousGoodsShippersDeclarationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DangerousGoodsShippersDeclarationDetail.subclass:
            return DangerousGoodsShippersDeclarationDetail.subclass(*args_, **kwargs_)
        else:
            return DangerousGoodsShippersDeclarationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Format(self):
        return self.Format
    def set_Format(self, Format):
        self.Format = Format
    def get_CustomerImageUsages(self):
        return self.CustomerImageUsages
    def set_CustomerImageUsages(self, CustomerImageUsages):
        self.CustomerImageUsages = CustomerImageUsages
    def add_CustomerImageUsages(self, value):
        self.CustomerImageUsages.append(value)
    def insert_CustomerImageUsages_at(self, index, value):
        self.CustomerImageUsages.insert(index, value)
    def replace_CustomerImageUsages_at(self, index, value):
        self.CustomerImageUsages[index] = value
    def hasContent_(self):
        if (
            self.Format is not None or
            self.CustomerImageUsages
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DangerousGoodsShippersDeclarationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DangerousGoodsShippersDeclarationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DangerousGoodsShippersDeclarationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DangerousGoodsShippersDeclarationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DangerousGoodsShippersDeclarationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DangerousGoodsShippersDeclarationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DangerousGoodsShippersDeclarationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Format is not None:
            namespaceprefix_ = self.Format_nsprefix_ + ':' if (UseCapturedNS_ and self.Format_nsprefix_) else ''
            self.Format.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Format', pretty_print=pretty_print)
        for CustomerImageUsages_ in self.CustomerImageUsages:
            namespaceprefix_ = self.CustomerImageUsages_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerImageUsages_nsprefix_) else ''
            CustomerImageUsages_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomerImageUsages', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Format':
            obj_ = ShippingDocumentFormat.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Format = obj_
            obj_.original_tagname_ = 'Format'
        elif nodeName_ == 'CustomerImageUsages':
            obj_ = CustomerImageUsage.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomerImageUsages.append(obj_)
            obj_.original_tagname_ = 'CustomerImageUsages'
# end class DangerousGoodsShippersDeclarationDetail


class DangerousGoodsSignatory(GeneratedsSuper):
    """Specifies that name, title and place of the signatory responsible for
    the dangerous goods shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ContactName=None, Title=None, Place=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ContactName = ContactName
        self.ContactName_nsprefix_ = None
        self.Title = Title
        self.Title_nsprefix_ = None
        self.Place = Place
        self.Place_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DangerousGoodsSignatory)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DangerousGoodsSignatory.subclass:
            return DangerousGoodsSignatory.subclass(*args_, **kwargs_)
        else:
            return DangerousGoodsSignatory(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ContactName(self):
        return self.ContactName
    def set_ContactName(self, ContactName):
        self.ContactName = ContactName
    def get_Title(self):
        return self.Title
    def set_Title(self, Title):
        self.Title = Title
    def get_Place(self):
        return self.Place
    def set_Place(self, Place):
        self.Place = Place
    def hasContent_(self):
        if (
            self.ContactName is not None or
            self.Title is not None or
            self.Place is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DangerousGoodsSignatory', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DangerousGoodsSignatory')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DangerousGoodsSignatory':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DangerousGoodsSignatory')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DangerousGoodsSignatory', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DangerousGoodsSignatory'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DangerousGoodsSignatory', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactName is not None:
            namespaceprefix_ = self.ContactName_nsprefix_ + ':' if (UseCapturedNS_ and self.ContactName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactName>%s</%sContactName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ContactName), input_name='ContactName')), namespaceprefix_ , eol_))
        if self.Title is not None:
            namespaceprefix_ = self.Title_nsprefix_ + ':' if (UseCapturedNS_ and self.Title_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTitle>%s</%sTitle>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Title), input_name='Title')), namespaceprefix_ , eol_))
        if self.Place is not None:
            namespaceprefix_ = self.Place_nsprefix_ + ':' if (UseCapturedNS_ and self.Place_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPlace>%s</%sPlace>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Place), input_name='Place')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ContactName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ContactName')
            value_ = self.gds_validate_string(value_, node, 'ContactName')
            self.ContactName = value_
            self.ContactName_nsprefix_ = child_.prefix
        elif nodeName_ == 'Title':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Title')
            value_ = self.gds_validate_string(value_, node, 'Title')
            self.Title = value_
            self.Title_nsprefix_ = child_.prefix
        elif nodeName_ == 'Place':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Place')
            value_ = self.gds_validate_string(value_, node, 'Place')
            self.Place = value_
            self.Place_nsprefix_ = child_.prefix
# end class DangerousGoodsSignatory


class DateRange(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Begins=None, Ends=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(Begins, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Begins, '%Y-%m-%d').date()
        else:
            initvalue_ = Begins
        self.Begins = initvalue_
        self.Begins_nsprefix_ = None
        if isinstance(Ends, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Ends, '%Y-%m-%d').date()
        else:
            initvalue_ = Ends
        self.Ends = initvalue_
        self.Ends_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateRange)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateRange.subclass:
            return DateRange.subclass(*args_, **kwargs_)
        else:
            return DateRange(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Begins(self):
        return self.Begins
    def set_Begins(self, Begins):
        self.Begins = Begins
    def get_Ends(self):
        return self.Ends
    def set_Ends(self, Ends):
        self.Ends = Ends
    def hasContent_(self):
        if (
            self.Begins is not None or
            self.Ends is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DateRange', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DateRange')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DateRange':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DateRange')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DateRange', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DateRange'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DateRange', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Begins is not None:
            namespaceprefix_ = self.Begins_nsprefix_ + ':' if (UseCapturedNS_ and self.Begins_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBegins>%s</%sBegins>%s' % (namespaceprefix_ , self.gds_format_date(self.Begins, input_name='Begins'), namespaceprefix_ , eol_))
        if self.Ends is not None:
            namespaceprefix_ = self.Ends_nsprefix_ + ':' if (UseCapturedNS_ and self.Ends_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEnds>%s</%sEnds>%s' % (namespaceprefix_ , self.gds_format_date(self.Ends, input_name='Ends'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Begins':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Begins = dval_
            self.Begins_nsprefix_ = child_.prefix
        elif nodeName_ == 'Ends':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Ends = dval_
            self.Ends_nsprefix_ = child_.prefix
# end class DateRange


class DeleteShipmentRequest(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, ShipTimestamp=None, TrackingId=None, DeletionControl=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.WebAuthenticationDetail_nsprefix_ = None
        self.ClientDetail = ClientDetail
        self.ClientDetail_nsprefix_ = None
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = None
        self.Version = Version
        self.Version_nsprefix_ = None
        if isinstance(ShipTimestamp, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShipTimestamp, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = ShipTimestamp
        self.ShipTimestamp = initvalue_
        self.ShipTimestamp_nsprefix_ = None
        self.TrackingId = TrackingId
        self.TrackingId_nsprefix_ = None
        self.DeletionControl = DeletionControl
        self.validate_DeletionControlType(self.DeletionControl)
        self.DeletionControl_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeleteShipmentRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeleteShipmentRequest.subclass:
            return DeleteShipmentRequest.subclass(*args_, **kwargs_)
        else:
            return DeleteShipmentRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_WebAuthenticationDetail(self):
        return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail):
        self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self):
        return self.ClientDetail
    def set_ClientDetail(self, ClientDetail):
        self.ClientDetail = ClientDetail
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_ShipTimestamp(self):
        return self.ShipTimestamp
    def set_ShipTimestamp(self, ShipTimestamp):
        self.ShipTimestamp = ShipTimestamp
    def get_TrackingId(self):
        return self.TrackingId
    def set_TrackingId(self, TrackingId):
        self.TrackingId = TrackingId
    def get_DeletionControl(self):
        return self.DeletionControl
    def set_DeletionControl(self, DeletionControl):
        self.DeletionControl = DeletionControl
    def validate_DeletionControlType(self, value):
        result = True
        # Validate type DeletionControlType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DELETE_ALL_PACKAGES', 'DELETE_ENTIRE_CONSOLIDATION', 'DELETE_ONE_PACKAGE', 'LEGACY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DeletionControlType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.ShipTimestamp is not None or
            self.TrackingId is not None or
            self.DeletionControl is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeleteShipmentRequest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeleteShipmentRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DeleteShipmentRequest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DeleteShipmentRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DeleteShipmentRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DeleteShipmentRequest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeleteShipmentRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WebAuthenticationDetail is not None:
            namespaceprefix_ = self.WebAuthenticationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.WebAuthenticationDetail_nsprefix_) else ''
            self.WebAuthenticationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WebAuthenticationDetail', pretty_print=pretty_print)
        if self.ClientDetail is not None:
            namespaceprefix_ = self.ClientDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientDetail_nsprefix_) else ''
            self.ClientDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClientDetail', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        if self.ShipTimestamp is not None:
            namespaceprefix_ = self.ShipTimestamp_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipTimestamp_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipTimestamp>%s</%sShipTimestamp>%s' % (namespaceprefix_ , self.gds_format_datetime(self.ShipTimestamp, input_name='ShipTimestamp'), namespaceprefix_ , eol_))
        if self.TrackingId is not None:
            namespaceprefix_ = self.TrackingId_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingId_nsprefix_) else ''
            self.TrackingId.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TrackingId', pretty_print=pretty_print)
        if self.DeletionControl is not None:
            namespaceprefix_ = self.DeletionControl_nsprefix_ + ':' if (UseCapturedNS_ and self.DeletionControl_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeletionControl>%s</%sDeletionControl>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeletionControl), input_name='DeletionControl')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WebAuthenticationDetail = obj_
            obj_.original_tagname_ = 'WebAuthenticationDetail'
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClientDetail = obj_
            obj_.original_tagname_ = 'ClientDetail'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'ShipTimestamp':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.ShipTimestamp = dval_
            self.ShipTimestamp_nsprefix_ = child_.prefix
        elif nodeName_ == 'TrackingId':
            obj_ = TrackingId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TrackingId = obj_
            obj_.original_tagname_ = 'TrackingId'
        elif nodeName_ == 'DeletionControl':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DeletionControl')
            value_ = self.gds_validate_string(value_, node, 'DeletionControl')
            self.DeletionControl = value_
            self.DeletionControl_nsprefix_ = child_.prefix
            # validate type DeletionControlType
            self.validate_DeletionControlType(self.DeletionControl)
# end class DeleteShipmentRequest


class DeleteTagRequest(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, DispatchLocationId=None, DispatchDate=None, Payment=None, ConfirmationNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.WebAuthenticationDetail_nsprefix_ = None
        self.ClientDetail = ClientDetail
        self.ClientDetail_nsprefix_ = None
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = None
        self.Version = Version
        self.Version_nsprefix_ = None
        self.DispatchLocationId = DispatchLocationId
        self.DispatchLocationId_nsprefix_ = None
        if isinstance(DispatchDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DispatchDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DispatchDate
        self.DispatchDate = initvalue_
        self.DispatchDate_nsprefix_ = None
        self.Payment = Payment
        self.Payment_nsprefix_ = None
        self.ConfirmationNumber = ConfirmationNumber
        self.ConfirmationNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeleteTagRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeleteTagRequest.subclass:
            return DeleteTagRequest.subclass(*args_, **kwargs_)
        else:
            return DeleteTagRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_WebAuthenticationDetail(self):
        return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail):
        self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self):
        return self.ClientDetail
    def set_ClientDetail(self, ClientDetail):
        self.ClientDetail = ClientDetail
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_DispatchLocationId(self):
        return self.DispatchLocationId
    def set_DispatchLocationId(self, DispatchLocationId):
        self.DispatchLocationId = DispatchLocationId
    def get_DispatchDate(self):
        return self.DispatchDate
    def set_DispatchDate(self, DispatchDate):
        self.DispatchDate = DispatchDate
    def get_Payment(self):
        return self.Payment
    def set_Payment(self, Payment):
        self.Payment = Payment
    def get_ConfirmationNumber(self):
        return self.ConfirmationNumber
    def set_ConfirmationNumber(self, ConfirmationNumber):
        self.ConfirmationNumber = ConfirmationNumber
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.DispatchLocationId is not None or
            self.DispatchDate is not None or
            self.Payment is not None or
            self.ConfirmationNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeleteTagRequest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeleteTagRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DeleteTagRequest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DeleteTagRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DeleteTagRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DeleteTagRequest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeleteTagRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WebAuthenticationDetail is not None:
            namespaceprefix_ = self.WebAuthenticationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.WebAuthenticationDetail_nsprefix_) else ''
            self.WebAuthenticationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WebAuthenticationDetail', pretty_print=pretty_print)
        if self.ClientDetail is not None:
            namespaceprefix_ = self.ClientDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientDetail_nsprefix_) else ''
            self.ClientDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClientDetail', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        if self.DispatchLocationId is not None:
            namespaceprefix_ = self.DispatchLocationId_nsprefix_ + ':' if (UseCapturedNS_ and self.DispatchLocationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDispatchLocationId>%s</%sDispatchLocationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DispatchLocationId), input_name='DispatchLocationId')), namespaceprefix_ , eol_))
        if self.DispatchDate is not None:
            namespaceprefix_ = self.DispatchDate_nsprefix_ + ':' if (UseCapturedNS_ and self.DispatchDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDispatchDate>%s</%sDispatchDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DispatchDate, input_name='DispatchDate'), namespaceprefix_ , eol_))
        if self.Payment is not None:
            namespaceprefix_ = self.Payment_nsprefix_ + ':' if (UseCapturedNS_ and self.Payment_nsprefix_) else ''
            self.Payment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Payment', pretty_print=pretty_print)
        if self.ConfirmationNumber is not None:
            namespaceprefix_ = self.ConfirmationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ConfirmationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConfirmationNumber>%s</%sConfirmationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ConfirmationNumber), input_name='ConfirmationNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WebAuthenticationDetail = obj_
            obj_.original_tagname_ = 'WebAuthenticationDetail'
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClientDetail = obj_
            obj_.original_tagname_ = 'ClientDetail'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'DispatchLocationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DispatchLocationId')
            value_ = self.gds_validate_string(value_, node, 'DispatchLocationId')
            self.DispatchLocationId = value_
            self.DispatchLocationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'DispatchDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DispatchDate = dval_
            self.DispatchDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'Payment':
            obj_ = Payment.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Payment = obj_
            obj_.original_tagname_ = 'Payment'
        elif nodeName_ == 'ConfirmationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ConfirmationNumber')
            value_ = self.gds_validate_string(value_, node, 'ConfirmationNumber')
            self.ConfirmationNumber = value_
            self.ConfirmationNumber_nsprefix_ = child_.prefix
# end class DeleteTagRequest


class DeliveryOnInvoiceAcceptanceDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Recipient=None, TrackingId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Recipient = Recipient
        self.Recipient_nsprefix_ = None
        self.TrackingId = TrackingId
        self.TrackingId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeliveryOnInvoiceAcceptanceDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeliveryOnInvoiceAcceptanceDetail.subclass:
            return DeliveryOnInvoiceAcceptanceDetail.subclass(*args_, **kwargs_)
        else:
            return DeliveryOnInvoiceAcceptanceDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Recipient(self):
        return self.Recipient
    def set_Recipient(self, Recipient):
        self.Recipient = Recipient
    def get_TrackingId(self):
        return self.TrackingId
    def set_TrackingId(self, TrackingId):
        self.TrackingId = TrackingId
    def hasContent_(self):
        if (
            self.Recipient is not None or
            self.TrackingId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeliveryOnInvoiceAcceptanceDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeliveryOnInvoiceAcceptanceDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DeliveryOnInvoiceAcceptanceDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DeliveryOnInvoiceAcceptanceDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DeliveryOnInvoiceAcceptanceDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DeliveryOnInvoiceAcceptanceDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeliveryOnInvoiceAcceptanceDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Recipient is not None:
            namespaceprefix_ = self.Recipient_nsprefix_ + ':' if (UseCapturedNS_ and self.Recipient_nsprefix_) else ''
            self.Recipient.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Recipient', pretty_print=pretty_print)
        if self.TrackingId is not None:
            namespaceprefix_ = self.TrackingId_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingId_nsprefix_) else ''
            self.TrackingId.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TrackingId', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Recipient':
            obj_ = Party.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Recipient = obj_
            obj_.original_tagname_ = 'Recipient'
        elif nodeName_ == 'TrackingId':
            obj_ = TrackingId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TrackingId = obj_
            obj_.original_tagname_ = 'TrackingId'
# end class DeliveryOnInvoiceAcceptanceDetail


class DestinationControlDetail(GeneratedsSuper):
    """Data required to complete the Destionation Control Statement for US
    exports."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, StatementTypes=None, DestinationCountries=None, EndUser=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if StatementTypes is None:
            self.StatementTypes = []
        else:
            self.StatementTypes = StatementTypes
        self.StatementTypes_nsprefix_ = None
        self.DestinationCountries = DestinationCountries
        self.DestinationCountries_nsprefix_ = None
        self.EndUser = EndUser
        self.EndUser_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DestinationControlDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DestinationControlDetail.subclass:
            return DestinationControlDetail.subclass(*args_, **kwargs_)
        else:
            return DestinationControlDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_StatementTypes(self):
        return self.StatementTypes
    def set_StatementTypes(self, StatementTypes):
        self.StatementTypes = StatementTypes
    def add_StatementTypes(self, value):
        self.StatementTypes.append(value)
    def insert_StatementTypes_at(self, index, value):
        self.StatementTypes.insert(index, value)
    def replace_StatementTypes_at(self, index, value):
        self.StatementTypes[index] = value
    def get_DestinationCountries(self):
        return self.DestinationCountries
    def set_DestinationCountries(self, DestinationCountries):
        self.DestinationCountries = DestinationCountries
    def get_EndUser(self):
        return self.EndUser
    def set_EndUser(self, EndUser):
        self.EndUser = EndUser
    def validate_DestinationControlStatementType(self, value):
        result = True
        # Validate type DestinationControlStatementType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DEPARTMENT_OF_COMMERCE', 'DEPARTMENT_OF_STATE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DestinationControlStatementType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.StatementTypes or
            self.DestinationCountries is not None or
            self.EndUser is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DestinationControlDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DestinationControlDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DestinationControlDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DestinationControlDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DestinationControlDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DestinationControlDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DestinationControlDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for StatementTypes_ in self.StatementTypes:
            namespaceprefix_ = self.StatementTypes_nsprefix_ + ':' if (UseCapturedNS_ and self.StatementTypes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatementTypes>%s</%sStatementTypes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(StatementTypes_), input_name='StatementTypes')), namespaceprefix_ , eol_))
        if self.DestinationCountries is not None:
            namespaceprefix_ = self.DestinationCountries_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationCountries_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDestinationCountries>%s</%sDestinationCountries>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DestinationCountries), input_name='DestinationCountries')), namespaceprefix_ , eol_))
        if self.EndUser is not None:
            namespaceprefix_ = self.EndUser_nsprefix_ + ':' if (UseCapturedNS_ and self.EndUser_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEndUser>%s</%sEndUser>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EndUser), input_name='EndUser')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'StatementTypes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StatementTypes')
            value_ = self.gds_validate_string(value_, node, 'StatementTypes')
            self.StatementTypes.append(value_)
            self.StatementTypes_nsprefix_ = child_.prefix
            # validate type DestinationControlStatementType
            self.validate_DestinationControlStatementType(self.StatementTypes[-1])
        elif nodeName_ == 'DestinationCountries':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DestinationCountries')
            value_ = self.gds_validate_string(value_, node, 'DestinationCountries')
            self.DestinationCountries = value_
            self.DestinationCountries_nsprefix_ = child_.prefix
        elif nodeName_ == 'EndUser':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EndUser')
            value_ = self.gds_validate_string(value_, node, 'EndUser')
            self.EndUser = value_
            self.EndUser_nsprefix_ = child_.prefix
# end class DestinationControlDetail


class Dimensions(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Length=None, Width=None, Height=None, Units=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Length = Length
        self.Length_nsprefix_ = None
        self.Width = Width
        self.Width_nsprefix_ = None
        self.Height = Height
        self.Height_nsprefix_ = None
        self.Units = Units
        self.validate_LinearUnits(self.Units)
        self.Units_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Dimensions)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Dimensions.subclass:
            return Dimensions.subclass(*args_, **kwargs_)
        else:
            return Dimensions(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Length(self):
        return self.Length
    def set_Length(self, Length):
        self.Length = Length
    def get_Width(self):
        return self.Width
    def set_Width(self, Width):
        self.Width = Width
    def get_Height(self):
        return self.Height
    def set_Height(self, Height):
        self.Height = Height
    def get_Units(self):
        return self.Units
    def set_Units(self, Units):
        self.Units = Units
    def validate_LinearUnits(self, value):
        result = True
        # Validate type LinearUnits, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CM', 'IN']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on LinearUnits' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Length is not None or
            self.Width is not None or
            self.Height is not None or
            self.Units is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Dimensions', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Dimensions')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Dimensions':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Dimensions')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Dimensions', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Dimensions'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Dimensions', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Length is not None:
            namespaceprefix_ = self.Length_nsprefix_ + ':' if (UseCapturedNS_ and self.Length_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLength>%s</%sLength>%s' % (namespaceprefix_ , self.gds_format_integer(self.Length, input_name='Length'), namespaceprefix_ , eol_))
        if self.Width is not None:
            namespaceprefix_ = self.Width_nsprefix_ + ':' if (UseCapturedNS_ and self.Width_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWidth>%s</%sWidth>%s' % (namespaceprefix_ , self.gds_format_integer(self.Width, input_name='Width'), namespaceprefix_ , eol_))
        if self.Height is not None:
            namespaceprefix_ = self.Height_nsprefix_ + ':' if (UseCapturedNS_ and self.Height_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHeight>%s</%sHeight>%s' % (namespaceprefix_ , self.gds_format_integer(self.Height, input_name='Height'), namespaceprefix_ , eol_))
        if self.Units is not None:
            namespaceprefix_ = self.Units_nsprefix_ + ':' if (UseCapturedNS_ and self.Units_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnits>%s</%sUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Length' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Length')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Length')
            self.Length = ival_
            self.Length_nsprefix_ = child_.prefix
        elif nodeName_ == 'Width' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Width')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Width')
            self.Width = ival_
            self.Width_nsprefix_ = child_.prefix
        elif nodeName_ == 'Height' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Height')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Height')
            self.Height = ival_
            self.Height_nsprefix_ = child_.prefix
        elif nodeName_ == 'Units':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Units')
            value_ = self.gds_validate_string(value_, node, 'Units')
            self.Units = value_
            self.Units_nsprefix_ = child_.prefix
            # validate type LinearUnits
            self.validate_LinearUnits(self.Units)
# end class Dimensions


class DocTabContent(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DocTabContentType=None, Zone001=None, Barcoded=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DocTabContentType = DocTabContentType
        self.validate_DocTabContentType(self.DocTabContentType)
        self.DocTabContentType_nsprefix_ = None
        self.Zone001 = Zone001
        self.Zone001_nsprefix_ = None
        self.Barcoded = Barcoded
        self.Barcoded_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocTabContent)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocTabContent.subclass:
            return DocTabContent.subclass(*args_, **kwargs_)
        else:
            return DocTabContent(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocTabContentType(self):
        return self.DocTabContentType
    def set_DocTabContentType(self, DocTabContentType):
        self.DocTabContentType = DocTabContentType
    def get_Zone001(self):
        return self.Zone001
    def set_Zone001(self, Zone001):
        self.Zone001 = Zone001
    def get_Barcoded(self):
        return self.Barcoded
    def set_Barcoded(self, Barcoded):
        self.Barcoded = Barcoded
    def validate_DocTabContentType(self, value):
        result = True
        # Validate type DocTabContentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BARCODED', 'CUSTOM', 'MINIMUM', 'STANDARD', 'ZONE001']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DocTabContentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.DocTabContentType is not None or
            self.Zone001 is not None or
            self.Barcoded is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocTabContent', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocTabContent')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DocTabContent':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocTabContent')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DocTabContent', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DocTabContent'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocTabContent', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocTabContentType is not None:
            namespaceprefix_ = self.DocTabContentType_nsprefix_ + ':' if (UseCapturedNS_ and self.DocTabContentType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocTabContentType>%s</%sDocTabContentType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocTabContentType), input_name='DocTabContentType')), namespaceprefix_ , eol_))
        if self.Zone001 is not None:
            namespaceprefix_ = self.Zone001_nsprefix_ + ':' if (UseCapturedNS_ and self.Zone001_nsprefix_) else ''
            self.Zone001.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Zone001', pretty_print=pretty_print)
        if self.Barcoded is not None:
            namespaceprefix_ = self.Barcoded_nsprefix_ + ':' if (UseCapturedNS_ and self.Barcoded_nsprefix_) else ''
            self.Barcoded.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Barcoded', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocTabContentType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocTabContentType')
            value_ = self.gds_validate_string(value_, node, 'DocTabContentType')
            self.DocTabContentType = value_
            self.DocTabContentType_nsprefix_ = child_.prefix
            # validate type DocTabContentType
            self.validate_DocTabContentType(self.DocTabContentType)
        elif nodeName_ == 'Zone001':
            obj_ = DocTabContentZone001.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Zone001 = obj_
            obj_.original_tagname_ = 'Zone001'
        elif nodeName_ == 'Barcoded':
            obj_ = DocTabContentBarcoded.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Barcoded = obj_
            obj_.original_tagname_ = 'Barcoded'
# end class DocTabContent


class DocTabContentBarcoded(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Symbology=None, Specification=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Symbology = Symbology
        self.validate_BarcodeSymbologyType(self.Symbology)
        self.Symbology_nsprefix_ = None
        self.Specification = Specification
        self.Specification_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocTabContentBarcoded)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocTabContentBarcoded.subclass:
            return DocTabContentBarcoded.subclass(*args_, **kwargs_)
        else:
            return DocTabContentBarcoded(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Symbology(self):
        return self.Symbology
    def set_Symbology(self, Symbology):
        self.Symbology = Symbology
    def get_Specification(self):
        return self.Specification
    def set_Specification(self, Specification):
        self.Specification = Specification
    def validate_BarcodeSymbologyType(self, value):
        result = True
        # Validate type BarcodeSymbologyType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CODABAR', 'CODE128', 'CODE128B', 'CODE128C', 'CODE128_WIDEBAR', 'CODE39', 'CODE93', 'I2OF5', 'PDF417', 'POSTNET', 'QR_CODE', 'UCC128']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on BarcodeSymbologyType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Symbology is not None or
            self.Specification is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocTabContentBarcoded', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocTabContentBarcoded')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DocTabContentBarcoded':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocTabContentBarcoded')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DocTabContentBarcoded', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DocTabContentBarcoded'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocTabContentBarcoded', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Symbology is not None:
            namespaceprefix_ = self.Symbology_nsprefix_ + ':' if (UseCapturedNS_ and self.Symbology_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSymbology>%s</%sSymbology>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Symbology), input_name='Symbology')), namespaceprefix_ , eol_))
        if self.Specification is not None:
            namespaceprefix_ = self.Specification_nsprefix_ + ':' if (UseCapturedNS_ and self.Specification_nsprefix_) else ''
            self.Specification.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Specification', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Symbology':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Symbology')
            value_ = self.gds_validate_string(value_, node, 'Symbology')
            self.Symbology = value_
            self.Symbology_nsprefix_ = child_.prefix
            # validate type BarcodeSymbologyType
            self.validate_BarcodeSymbologyType(self.Symbology)
        elif nodeName_ == 'Specification':
            obj_ = DocTabZoneSpecification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Specification = obj_
            obj_.original_tagname_ = 'Specification'
# end class DocTabContentBarcoded


class DocTabContentZone001(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DocTabZoneSpecifications=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if DocTabZoneSpecifications is None:
            self.DocTabZoneSpecifications = []
        else:
            self.DocTabZoneSpecifications = DocTabZoneSpecifications
        self.DocTabZoneSpecifications_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocTabContentZone001)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocTabContentZone001.subclass:
            return DocTabContentZone001.subclass(*args_, **kwargs_)
        else:
            return DocTabContentZone001(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocTabZoneSpecifications(self):
        return self.DocTabZoneSpecifications
    def set_DocTabZoneSpecifications(self, DocTabZoneSpecifications):
        self.DocTabZoneSpecifications = DocTabZoneSpecifications
    def add_DocTabZoneSpecifications(self, value):
        self.DocTabZoneSpecifications.append(value)
    def insert_DocTabZoneSpecifications_at(self, index, value):
        self.DocTabZoneSpecifications.insert(index, value)
    def replace_DocTabZoneSpecifications_at(self, index, value):
        self.DocTabZoneSpecifications[index] = value
    def hasContent_(self):
        if (
            self.DocTabZoneSpecifications
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocTabContentZone001', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocTabContentZone001')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DocTabContentZone001':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocTabContentZone001')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DocTabContentZone001', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DocTabContentZone001'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocTabContentZone001', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DocTabZoneSpecifications_ in self.DocTabZoneSpecifications:
            namespaceprefix_ = self.DocTabZoneSpecifications_nsprefix_ + ':' if (UseCapturedNS_ and self.DocTabZoneSpecifications_nsprefix_) else ''
            DocTabZoneSpecifications_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocTabZoneSpecifications', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocTabZoneSpecifications':
            obj_ = DocTabZoneSpecification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocTabZoneSpecifications.append(obj_)
            obj_.original_tagname_ = 'DocTabZoneSpecifications'
# end class DocTabContentZone001


class DocTabZoneSpecification(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ZoneNumber=None, Header=None, DataField=None, LiteralValue=None, Justification=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ZoneNumber = ZoneNumber
        self.ZoneNumber_nsprefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.DataField = DataField
        self.DataField_nsprefix_ = None
        self.LiteralValue = LiteralValue
        self.LiteralValue_nsprefix_ = None
        self.Justification = Justification
        self.validate_DocTabZoneJustificationType(self.Justification)
        self.Justification_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocTabZoneSpecification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocTabZoneSpecification.subclass:
            return DocTabZoneSpecification.subclass(*args_, **kwargs_)
        else:
            return DocTabZoneSpecification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ZoneNumber(self):
        return self.ZoneNumber
    def set_ZoneNumber(self, ZoneNumber):
        self.ZoneNumber = ZoneNumber
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_DataField(self):
        return self.DataField
    def set_DataField(self, DataField):
        self.DataField = DataField
    def get_LiteralValue(self):
        return self.LiteralValue
    def set_LiteralValue(self, LiteralValue):
        self.LiteralValue = LiteralValue
    def get_Justification(self):
        return self.Justification
    def set_Justification(self, Justification):
        self.Justification = Justification
    def validate_DocTabZoneJustificationType(self, value):
        result = True
        # Validate type DocTabZoneJustificationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['LEFT', 'RIGHT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DocTabZoneJustificationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.ZoneNumber is not None or
            self.Header is not None or
            self.DataField is not None or
            self.LiteralValue is not None or
            self.Justification is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocTabZoneSpecification', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocTabZoneSpecification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DocTabZoneSpecification':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocTabZoneSpecification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DocTabZoneSpecification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DocTabZoneSpecification'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocTabZoneSpecification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ZoneNumber is not None:
            namespaceprefix_ = self.ZoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ZoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sZoneNumber>%s</%sZoneNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.ZoneNumber, input_name='ZoneNumber'), namespaceprefix_ , eol_))
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHeader>%s</%sHeader>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Header), input_name='Header')), namespaceprefix_ , eol_))
        if self.DataField is not None:
            namespaceprefix_ = self.DataField_nsprefix_ + ':' if (UseCapturedNS_ and self.DataField_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataField>%s</%sDataField>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DataField), input_name='DataField')), namespaceprefix_ , eol_))
        if self.LiteralValue is not None:
            namespaceprefix_ = self.LiteralValue_nsprefix_ + ':' if (UseCapturedNS_ and self.LiteralValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLiteralValue>%s</%sLiteralValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LiteralValue), input_name='LiteralValue')), namespaceprefix_ , eol_))
        if self.Justification is not None:
            namespaceprefix_ = self.Justification_nsprefix_ + ':' if (UseCapturedNS_ and self.Justification_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJustification>%s</%sJustification>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Justification), input_name='Justification')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ZoneNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'ZoneNumber')
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'ZoneNumber')
            self.ZoneNumber = ival_
            self.ZoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Header':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Header')
            value_ = self.gds_validate_string(value_, node, 'Header')
            self.Header = value_
            self.Header_nsprefix_ = child_.prefix
        elif nodeName_ == 'DataField':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DataField')
            value_ = self.gds_validate_string(value_, node, 'DataField')
            self.DataField = value_
            self.DataField_nsprefix_ = child_.prefix
        elif nodeName_ == 'LiteralValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LiteralValue')
            value_ = self.gds_validate_string(value_, node, 'LiteralValue')
            self.LiteralValue = value_
            self.LiteralValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'Justification':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Justification')
            value_ = self.gds_validate_string(value_, node, 'Justification')
            self.Justification = value_
            self.Justification_nsprefix_ = child_.prefix
            # validate type DocTabZoneJustificationType
            self.validate_DocTabZoneJustificationType(self.Justification)
# end class DocTabZoneSpecification


class DocumentFormatOptionsRequested(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Options=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.Options_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocumentFormatOptionsRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocumentFormatOptionsRequested.subclass:
            return DocumentFormatOptionsRequested.subclass(*args_, **kwargs_)
        else:
            return DocumentFormatOptionsRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def add_Options(self, value):
        self.Options.append(value)
    def insert_Options_at(self, index, value):
        self.Options.insert(index, value)
    def replace_Options_at(self, index, value):
        self.Options[index] = value
    def validate_DocumentFormatOptionType(self, value):
        result = True
        # Validate type DocumentFormatOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['SUPPRESS_ADDITIONAL_LANGUAGES']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DocumentFormatOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Options
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocumentFormatOptionsRequested', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocumentFormatOptionsRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DocumentFormatOptionsRequested':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocumentFormatOptionsRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DocumentFormatOptionsRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DocumentFormatOptionsRequested'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocumentFormatOptionsRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Options_ in self.Options:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptions>%s</%sOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Options':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Options')
            value_ = self.gds_validate_string(value_, node, 'Options')
            self.Options.append(value_)
            self.Options_nsprefix_ = child_.prefix
            # validate type DocumentFormatOptionType
            self.validate_DocumentFormatOptionType(self.Options[-1])
# end class DocumentFormatOptionsRequested


class DocumentGenerationDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, MinimumCopiesRequired=None, Letterhead=None, ElectronicSignature=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_EnterpriseDocumentType(self.Type)
        self.Type_nsprefix_ = None
        self.MinimumCopiesRequired = MinimumCopiesRequired
        self.MinimumCopiesRequired_nsprefix_ = None
        self.Letterhead = Letterhead
        self.validate_RequirementType(self.Letterhead)
        self.Letterhead_nsprefix_ = None
        self.ElectronicSignature = ElectronicSignature
        self.validate_RequirementType(self.ElectronicSignature)
        self.ElectronicSignature_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocumentGenerationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocumentGenerationDetail.subclass:
            return DocumentGenerationDetail.subclass(*args_, **kwargs_)
        else:
            return DocumentGenerationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_MinimumCopiesRequired(self):
        return self.MinimumCopiesRequired
    def set_MinimumCopiesRequired(self, MinimumCopiesRequired):
        self.MinimumCopiesRequired = MinimumCopiesRequired
    def get_Letterhead(self):
        return self.Letterhead
    def set_Letterhead(self, Letterhead):
        self.Letterhead = Letterhead
    def get_ElectronicSignature(self):
        return self.ElectronicSignature
    def set_ElectronicSignature(self, ElectronicSignature):
        self.ElectronicSignature = ElectronicSignature
    def validate_EnterpriseDocumentType(self, value):
        result = True
        # Validate type EnterpriseDocumentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AIR_WAYBILL', 'CERTIFICATE_OF_ORIGIN', 'COMMERCIAL_INVOICE', 'NAFTA_CERTIFICATE_OF_ORIGIN', 'PRO_FORMA_INVOICE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on EnterpriseDocumentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_RequirementType(self, value):
        result = True
        # Validate type RequirementType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['OPTIONAL', 'PROHIBITED', 'REQUIRED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RequirementType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.MinimumCopiesRequired is not None or
            self.Letterhead is not None or
            self.ElectronicSignature is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocumentGenerationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocumentGenerationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DocumentGenerationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocumentGenerationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DocumentGenerationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DocumentGenerationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocumentGenerationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.MinimumCopiesRequired is not None:
            namespaceprefix_ = self.MinimumCopiesRequired_nsprefix_ + ':' if (UseCapturedNS_ and self.MinimumCopiesRequired_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMinimumCopiesRequired>%s</%sMinimumCopiesRequired>%s' % (namespaceprefix_ , self.gds_format_integer(self.MinimumCopiesRequired, input_name='MinimumCopiesRequired'), namespaceprefix_ , eol_))
        if self.Letterhead is not None:
            namespaceprefix_ = self.Letterhead_nsprefix_ + ':' if (UseCapturedNS_ and self.Letterhead_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLetterhead>%s</%sLetterhead>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Letterhead), input_name='Letterhead')), namespaceprefix_ , eol_))
        if self.ElectronicSignature is not None:
            namespaceprefix_ = self.ElectronicSignature_nsprefix_ + ':' if (UseCapturedNS_ and self.ElectronicSignature_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sElectronicSignature>%s</%sElectronicSignature>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ElectronicSignature), input_name='ElectronicSignature')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type EnterpriseDocumentType
            self.validate_EnterpriseDocumentType(self.Type)
        elif nodeName_ == 'MinimumCopiesRequired' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'MinimumCopiesRequired')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'MinimumCopiesRequired')
            self.MinimumCopiesRequired = ival_
            self.MinimumCopiesRequired_nsprefix_ = child_.prefix
        elif nodeName_ == 'Letterhead':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Letterhead')
            value_ = self.gds_validate_string(value_, node, 'Letterhead')
            self.Letterhead = value_
            self.Letterhead_nsprefix_ = child_.prefix
            # validate type RequirementType
            self.validate_RequirementType(self.Letterhead)
        elif nodeName_ == 'ElectronicSignature':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ElectronicSignature')
            value_ = self.gds_validate_string(value_, node, 'ElectronicSignature')
            self.ElectronicSignature = value_
            self.ElectronicSignature_nsprefix_ = child_.prefix
            # validate type RequirementType
            self.validate_RequirementType(self.ElectronicSignature)
# end class DocumentGenerationDetail


class DocumentRequirementsDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RequiredDocuments=None, GenerationDetails=None, ProhibitedDocuments=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RequiredDocuments is None:
            self.RequiredDocuments = []
        else:
            self.RequiredDocuments = RequiredDocuments
        self.RequiredDocuments_nsprefix_ = None
        if GenerationDetails is None:
            self.GenerationDetails = []
        else:
            self.GenerationDetails = GenerationDetails
        self.GenerationDetails_nsprefix_ = None
        if ProhibitedDocuments is None:
            self.ProhibitedDocuments = []
        else:
            self.ProhibitedDocuments = ProhibitedDocuments
        self.ProhibitedDocuments_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocumentRequirementsDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocumentRequirementsDetail.subclass:
            return DocumentRequirementsDetail.subclass(*args_, **kwargs_)
        else:
            return DocumentRequirementsDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RequiredDocuments(self):
        return self.RequiredDocuments
    def set_RequiredDocuments(self, RequiredDocuments):
        self.RequiredDocuments = RequiredDocuments
    def add_RequiredDocuments(self, value):
        self.RequiredDocuments.append(value)
    def insert_RequiredDocuments_at(self, index, value):
        self.RequiredDocuments.insert(index, value)
    def replace_RequiredDocuments_at(self, index, value):
        self.RequiredDocuments[index] = value
    def get_GenerationDetails(self):
        return self.GenerationDetails
    def set_GenerationDetails(self, GenerationDetails):
        self.GenerationDetails = GenerationDetails
    def add_GenerationDetails(self, value):
        self.GenerationDetails.append(value)
    def insert_GenerationDetails_at(self, index, value):
        self.GenerationDetails.insert(index, value)
    def replace_GenerationDetails_at(self, index, value):
        self.GenerationDetails[index] = value
    def get_ProhibitedDocuments(self):
        return self.ProhibitedDocuments
    def set_ProhibitedDocuments(self, ProhibitedDocuments):
        self.ProhibitedDocuments = ProhibitedDocuments
    def add_ProhibitedDocuments(self, value):
        self.ProhibitedDocuments.append(value)
    def insert_ProhibitedDocuments_at(self, index, value):
        self.ProhibitedDocuments.insert(index, value)
    def replace_ProhibitedDocuments_at(self, index, value):
        self.ProhibitedDocuments[index] = value
    def validate_RequiredDocumentType(self, value):
        result = True
        # Validate type RequiredDocumentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AIR_WAYBILL', 'CERTIFICATE_OF_ORIGIN', 'COMMERCIAL_INVOICE', 'COMMERCIAL_OR_PRO_FORMA_INVOICE', 'NAFTA_CERTIFICATE_OF_ORIGIN', 'PRO_FORMA_INVOICE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RequiredDocumentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_EnterpriseDocumentType(self, value):
        result = True
        # Validate type EnterpriseDocumentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AIR_WAYBILL', 'CERTIFICATE_OF_ORIGIN', 'COMMERCIAL_INVOICE', 'NAFTA_CERTIFICATE_OF_ORIGIN', 'PRO_FORMA_INVOICE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on EnterpriseDocumentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.RequiredDocuments or
            self.GenerationDetails or
            self.ProhibitedDocuments
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocumentRequirementsDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocumentRequirementsDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DocumentRequirementsDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocumentRequirementsDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DocumentRequirementsDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DocumentRequirementsDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DocumentRequirementsDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RequiredDocuments_ in self.RequiredDocuments:
            namespaceprefix_ = self.RequiredDocuments_nsprefix_ + ':' if (UseCapturedNS_ and self.RequiredDocuments_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequiredDocuments>%s</%sRequiredDocuments>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(RequiredDocuments_), input_name='RequiredDocuments')), namespaceprefix_ , eol_))
        for GenerationDetails_ in self.GenerationDetails:
            namespaceprefix_ = self.GenerationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.GenerationDetails_nsprefix_) else ''
            GenerationDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GenerationDetails', pretty_print=pretty_print)
        for ProhibitedDocuments_ in self.ProhibitedDocuments:
            namespaceprefix_ = self.ProhibitedDocuments_nsprefix_ + ':' if (UseCapturedNS_ and self.ProhibitedDocuments_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProhibitedDocuments>%s</%sProhibitedDocuments>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(ProhibitedDocuments_), input_name='ProhibitedDocuments')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RequiredDocuments':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequiredDocuments')
            value_ = self.gds_validate_string(value_, node, 'RequiredDocuments')
            self.RequiredDocuments.append(value_)
            self.RequiredDocuments_nsprefix_ = child_.prefix
            # validate type RequiredDocumentType
            self.validate_RequiredDocumentType(self.RequiredDocuments[-1])
        elif nodeName_ == 'GenerationDetails':
            obj_ = DocumentGenerationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GenerationDetails.append(obj_)
            obj_.original_tagname_ = 'GenerationDetails'
        elif nodeName_ == 'ProhibitedDocuments':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProhibitedDocuments')
            value_ = self.gds_validate_string(value_, node, 'ProhibitedDocuments')
            self.ProhibitedDocuments.append(value_)
            self.ProhibitedDocuments_nsprefix_ = child_.prefix
            # validate type EnterpriseDocumentType
            self.validate_EnterpriseDocumentType(self.ProhibitedDocuments[-1])
# end class DocumentRequirementsDetail


class EMailDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EmailAddress=None, Name=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.EmailAddress = EmailAddress
        self.EmailAddress_nsprefix_ = None
        self.Name = Name
        self.Name_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EMailDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EMailDetail.subclass:
            return EMailDetail.subclass(*args_, **kwargs_)
        else:
            return EMailDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EmailAddress(self):
        return self.EmailAddress
    def set_EmailAddress(self, EmailAddress):
        self.EmailAddress = EmailAddress
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def hasContent_(self):
        if (
            self.EmailAddress is not None or
            self.Name is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMailDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EMailDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EMailDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EMailDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EMailDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EMailDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMailDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EmailAddress is not None:
            namespaceprefix_ = self.EmailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EmailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmailAddress>%s</%sEmailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EmailAddress), input_name='EmailAddress')), namespaceprefix_ , eol_))
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EmailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EmailAddress')
            value_ = self.gds_validate_string(value_, node, 'EmailAddress')
            self.EmailAddress = value_
            self.EmailAddress_nsprefix_ = child_.prefix
        elif nodeName_ == 'Name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Name')
            value_ = self.gds_validate_string(value_, node, 'Name')
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
# end class EMailDetail


class EMailLabelDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Message=None, Recipients=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Message = Message
        self.Message_nsprefix_ = None
        if Recipients is None:
            self.Recipients = []
        else:
            self.Recipients = Recipients
        self.Recipients_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EMailLabelDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EMailLabelDetail.subclass:
            return EMailLabelDetail.subclass(*args_, **kwargs_)
        else:
            return EMailLabelDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Message(self):
        return self.Message
    def set_Message(self, Message):
        self.Message = Message
    def get_Recipients(self):
        return self.Recipients
    def set_Recipients(self, Recipients):
        self.Recipients = Recipients
    def add_Recipients(self, value):
        self.Recipients.append(value)
    def insert_Recipients_at(self, index, value):
        self.Recipients.insert(index, value)
    def replace_Recipients_at(self, index, value):
        self.Recipients[index] = value
    def hasContent_(self):
        if (
            self.Message is not None or
            self.Recipients
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMailLabelDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EMailLabelDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EMailLabelDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EMailLabelDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EMailLabelDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EMailLabelDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMailLabelDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Message is not None:
            namespaceprefix_ = self.Message_nsprefix_ + ':' if (UseCapturedNS_ and self.Message_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMessage>%s</%sMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Message), input_name='Message')), namespaceprefix_ , eol_))
        for Recipients_ in self.Recipients:
            namespaceprefix_ = self.Recipients_nsprefix_ + ':' if (UseCapturedNS_ and self.Recipients_nsprefix_) else ''
            Recipients_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Recipients', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Message':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Message')
            value_ = self.gds_validate_string(value_, node, 'Message')
            self.Message = value_
            self.Message_nsprefix_ = child_.prefix
        elif nodeName_ == 'Recipients':
            obj_ = EMailRecipient.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Recipients.append(obj_)
            obj_.original_tagname_ = 'Recipients'
# end class EMailLabelDetail


class EMailRecipient(GeneratedsSuper):
    """Information describing the address of of the email recipient, role of
    the email recipient and languages that are requested to be
    supported."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EmailAddress=None, Role=None, OptionsRequested=None, Localization=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.EmailAddress = EmailAddress
        self.EmailAddress_nsprefix_ = None
        self.Role = Role
        self.validate_AccessorRoleType(self.Role)
        self.Role_nsprefix_ = None
        self.OptionsRequested = OptionsRequested
        self.OptionsRequested_nsprefix_ = None
        self.Localization = Localization
        self.Localization_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EMailRecipient)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EMailRecipient.subclass:
            return EMailRecipient.subclass(*args_, **kwargs_)
        else:
            return EMailRecipient(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EmailAddress(self):
        return self.EmailAddress
    def set_EmailAddress(self, EmailAddress):
        self.EmailAddress = EmailAddress
    def get_Role(self):
        return self.Role
    def set_Role(self, Role):
        self.Role = Role
    def get_OptionsRequested(self):
        return self.OptionsRequested
    def set_OptionsRequested(self, OptionsRequested):
        self.OptionsRequested = OptionsRequested
    def get_Localization(self):
        return self.Localization
    def set_Localization(self, Localization):
        self.Localization = Localization
    def validate_AccessorRoleType(self, value):
        result = True
        # Validate type AccessorRoleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['SHIPMENT_COMPLETOR', 'SHIPMENT_INITIATOR']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on AccessorRoleType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.EmailAddress is not None or
            self.Role is not None or
            self.OptionsRequested is not None or
            self.Localization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMailRecipient', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EMailRecipient')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EMailRecipient':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EMailRecipient')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EMailRecipient', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EMailRecipient'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMailRecipient', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EmailAddress is not None:
            namespaceprefix_ = self.EmailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EmailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmailAddress>%s</%sEmailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EmailAddress), input_name='EmailAddress')), namespaceprefix_ , eol_))
        if self.Role is not None:
            namespaceprefix_ = self.Role_nsprefix_ + ':' if (UseCapturedNS_ and self.Role_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRole>%s</%sRole>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Role), input_name='Role')), namespaceprefix_ , eol_))
        if self.OptionsRequested is not None:
            namespaceprefix_ = self.OptionsRequested_nsprefix_ + ':' if (UseCapturedNS_ and self.OptionsRequested_nsprefix_) else ''
            self.OptionsRequested.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OptionsRequested', pretty_print=pretty_print)
        if self.Localization is not None:
            namespaceprefix_ = self.Localization_nsprefix_ + ':' if (UseCapturedNS_ and self.Localization_nsprefix_) else ''
            self.Localization.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Localization', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EmailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EmailAddress')
            value_ = self.gds_validate_string(value_, node, 'EmailAddress')
            self.EmailAddress = value_
            self.EmailAddress_nsprefix_ = child_.prefix
        elif nodeName_ == 'Role':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Role')
            value_ = self.gds_validate_string(value_, node, 'Role')
            self.Role = value_
            self.Role_nsprefix_ = child_.prefix
            # validate type AccessorRoleType
            self.validate_AccessorRoleType(self.Role)
        elif nodeName_ == 'OptionsRequested':
            obj_ = EmailOptionsRequested.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OptionsRequested = obj_
            obj_.original_tagname_ = 'OptionsRequested'
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
# end class EMailRecipient


class EdtCommodityTax(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HarmonizedCode=None, Taxes=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HarmonizedCode = HarmonizedCode
        self.HarmonizedCode_nsprefix_ = None
        if Taxes is None:
            self.Taxes = []
        else:
            self.Taxes = Taxes
        self.Taxes_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EdtCommodityTax)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EdtCommodityTax.subclass:
            return EdtCommodityTax.subclass(*args_, **kwargs_)
        else:
            return EdtCommodityTax(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HarmonizedCode(self):
        return self.HarmonizedCode
    def set_HarmonizedCode(self, HarmonizedCode):
        self.HarmonizedCode = HarmonizedCode
    def get_Taxes(self):
        return self.Taxes
    def set_Taxes(self, Taxes):
        self.Taxes = Taxes
    def add_Taxes(self, value):
        self.Taxes.append(value)
    def insert_Taxes_at(self, index, value):
        self.Taxes.insert(index, value)
    def replace_Taxes_at(self, index, value):
        self.Taxes[index] = value
    def hasContent_(self):
        if (
            self.HarmonizedCode is not None or
            self.Taxes
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EdtCommodityTax', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EdtCommodityTax')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EdtCommodityTax':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EdtCommodityTax')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EdtCommodityTax', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EdtCommodityTax'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EdtCommodityTax', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HarmonizedCode is not None:
            namespaceprefix_ = self.HarmonizedCode_nsprefix_ + ':' if (UseCapturedNS_ and self.HarmonizedCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHarmonizedCode>%s</%sHarmonizedCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HarmonizedCode), input_name='HarmonizedCode')), namespaceprefix_ , eol_))
        for Taxes_ in self.Taxes:
            namespaceprefix_ = self.Taxes_nsprefix_ + ':' if (UseCapturedNS_ and self.Taxes_nsprefix_) else ''
            Taxes_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Taxes', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HarmonizedCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HarmonizedCode')
            value_ = self.gds_validate_string(value_, node, 'HarmonizedCode')
            self.HarmonizedCode = value_
            self.HarmonizedCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'Taxes':
            obj_ = EdtTaxDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Taxes.append(obj_)
            obj_.original_tagname_ = 'Taxes'
# end class EdtCommodityTax


class EdtExciseCondition(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Category=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Category = Category
        self.Category_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EdtExciseCondition)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EdtExciseCondition.subclass:
            return EdtExciseCondition.subclass(*args_, **kwargs_)
        else:
            return EdtExciseCondition(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Category(self):
        return self.Category
    def set_Category(self, Category):
        self.Category = Category
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def hasContent_(self):
        if (
            self.Category is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EdtExciseCondition', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EdtExciseCondition')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EdtExciseCondition':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EdtExciseCondition')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EdtExciseCondition', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EdtExciseCondition'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EdtExciseCondition', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Category is not None:
            namespaceprefix_ = self.Category_nsprefix_ + ':' if (UseCapturedNS_ and self.Category_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCategory>%s</%sCategory>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Category), input_name='Category')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Category':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Category')
            value_ = self.gds_validate_string(value_, node, 'Category')
            self.Category = value_
            self.Category_nsprefix_ = child_.prefix
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
# end class EdtExciseCondition


class EdtTaxDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TaxType=None, EffectiveDate=None, Name=None, TaxableValue=None, Description=None, Formula=None, Amount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TaxType = TaxType
        self.validate_EdtTaxType(self.TaxType)
        self.TaxType_nsprefix_ = None
        if isinstance(EffectiveDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EffectiveDate, '%Y-%m-%d').date()
        else:
            initvalue_ = EffectiveDate
        self.EffectiveDate = initvalue_
        self.EffectiveDate_nsprefix_ = None
        self.Name = Name
        self.Name_nsprefix_ = None
        self.TaxableValue = TaxableValue
        self.TaxableValue_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.Formula = Formula
        self.Formula_nsprefix_ = None
        self.Amount = Amount
        self.Amount_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EdtTaxDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EdtTaxDetail.subclass:
            return EdtTaxDetail.subclass(*args_, **kwargs_)
        else:
            return EdtTaxDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TaxType(self):
        return self.TaxType
    def set_TaxType(self, TaxType):
        self.TaxType = TaxType
    def get_EffectiveDate(self):
        return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate):
        self.EffectiveDate = EffectiveDate
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_TaxableValue(self):
        return self.TaxableValue
    def set_TaxableValue(self, TaxableValue):
        self.TaxableValue = TaxableValue
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_Formula(self):
        return self.Formula
    def set_Formula(self, Formula):
        self.Formula = Formula
    def get_Amount(self):
        return self.Amount
    def set_Amount(self, Amount):
        self.Amount = Amount
    def validate_EdtTaxType(self, value):
        result = True
        # Validate type EdtTaxType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ADDITIONAL_TAXES', 'CONSULAR_INVOICE_FEE', 'CUSTOMS_SURCHARGES', 'DUTY', 'EXCISE_TAX', 'FOREIGN_EXCHANGE_TAX', 'GENERAL_SALES_TAX', 'IMPORT_LICENSE_FEE', 'INTERNAL_ADDITIONAL_TAXES', 'INTERNAL_SENSITIVE_PRODUCTS_TAX', 'OTHER', 'SENSITIVE_PRODUCTS_TAX', 'STAMP_TAX', 'STATISTICAL_TAX', 'TRANSPORT_FACILITIES_TAX']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on EdtTaxType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.TaxType is not None or
            self.EffectiveDate is not None or
            self.Name is not None or
            self.TaxableValue is not None or
            self.Description is not None or
            self.Formula is not None or
            self.Amount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EdtTaxDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EdtTaxDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EdtTaxDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EdtTaxDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EdtTaxDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EdtTaxDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EdtTaxDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxType is not None:
            namespaceprefix_ = self.TaxType_nsprefix_ + ':' if (UseCapturedNS_ and self.TaxType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxType>%s</%sTaxType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TaxType), input_name='TaxType')), namespaceprefix_ , eol_))
        if self.EffectiveDate is not None:
            namespaceprefix_ = self.EffectiveDate_nsprefix_ + ':' if (UseCapturedNS_ and self.EffectiveDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEffectiveDate>%s</%sEffectiveDate>%s' % (namespaceprefix_ , self.gds_format_date(self.EffectiveDate, input_name='EffectiveDate'), namespaceprefix_ , eol_))
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.TaxableValue is not None:
            namespaceprefix_ = self.TaxableValue_nsprefix_ + ':' if (UseCapturedNS_ and self.TaxableValue_nsprefix_) else ''
            self.TaxableValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TaxableValue', pretty_print=pretty_print)
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.Formula is not None:
            namespaceprefix_ = self.Formula_nsprefix_ + ':' if (UseCapturedNS_ and self.Formula_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormula>%s</%sFormula>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Formula), input_name='Formula')), namespaceprefix_ , eol_))
        if self.Amount is not None:
            namespaceprefix_ = self.Amount_nsprefix_ + ':' if (UseCapturedNS_ and self.Amount_nsprefix_) else ''
            self.Amount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Amount', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TaxType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TaxType')
            value_ = self.gds_validate_string(value_, node, 'TaxType')
            self.TaxType = value_
            self.TaxType_nsprefix_ = child_.prefix
            # validate type EdtTaxType
            self.validate_EdtTaxType(self.TaxType)
        elif nodeName_ == 'EffectiveDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.EffectiveDate = dval_
            self.EffectiveDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'Name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Name')
            value_ = self.gds_validate_string(value_, node, 'Name')
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
        elif nodeName_ == 'TaxableValue':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TaxableValue = obj_
            obj_.original_tagname_ = 'TaxableValue'
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'Formula':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Formula')
            value_ = self.gds_validate_string(value_, node, 'Formula')
            self.Formula = value_
            self.Formula_nsprefix_ = child_.prefix
        elif nodeName_ == 'Amount':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Amount = obj_
            obj_.original_tagname_ = 'Amount'
# end class EdtTaxDetail


class EmailOptionsRequested(GeneratedsSuper):
    """Specifies how to apply the localization detail to the current
    context."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Options=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.Options_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EmailOptionsRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EmailOptionsRequested.subclass:
            return EmailOptionsRequested.subclass(*args_, **kwargs_)
        else:
            return EmailOptionsRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def add_Options(self, value):
        self.Options.append(value)
    def insert_Options_at(self, index, value):
        self.Options.insert(index, value)
    def replace_Options_at(self, index, value):
        self.Options[index] = value
    def validate_EmailOptionType(self, value):
        result = True
        # Validate type EmailOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['SUPPRESS_ACCESS_EMAILS', 'SUPPRESS_ADDITIONAL_LANGUAGES']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on EmailOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Options
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EmailOptionsRequested', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EmailOptionsRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EmailOptionsRequested':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EmailOptionsRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EmailOptionsRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EmailOptionsRequested'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EmailOptionsRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Options_ in self.Options:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptions>%s</%sOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Options':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Options')
            value_ = self.gds_validate_string(value_, node, 'Options')
            self.Options.append(value_)
            self.Options_nsprefix_ = child_.prefix
            # validate type EmailOptionType
            self.validate_EmailOptionType(self.Options[-1])
# end class EmailOptionsRequested


class EtdDetail(GeneratedsSuper):
    """Electronic Trade document references used with the ETD special
    service."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Attributes=None, RequestedDocumentCopies=None, DocumentReferences=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Attributes is None:
            self.Attributes = []
        else:
            self.Attributes = Attributes
        self.Attributes_nsprefix_ = None
        if RequestedDocumentCopies is None:
            self.RequestedDocumentCopies = []
        else:
            self.RequestedDocumentCopies = RequestedDocumentCopies
        self.RequestedDocumentCopies_nsprefix_ = None
        if DocumentReferences is None:
            self.DocumentReferences = []
        else:
            self.DocumentReferences = DocumentReferences
        self.DocumentReferences_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EtdDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EtdDetail.subclass:
            return EtdDetail.subclass(*args_, **kwargs_)
        else:
            return EtdDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Attributes(self):
        return self.Attributes
    def set_Attributes(self, Attributes):
        self.Attributes = Attributes
    def add_Attributes(self, value):
        self.Attributes.append(value)
    def insert_Attributes_at(self, index, value):
        self.Attributes.insert(index, value)
    def replace_Attributes_at(self, index, value):
        self.Attributes[index] = value
    def get_RequestedDocumentCopies(self):
        return self.RequestedDocumentCopies
    def set_RequestedDocumentCopies(self, RequestedDocumentCopies):
        self.RequestedDocumentCopies = RequestedDocumentCopies
    def add_RequestedDocumentCopies(self, value):
        self.RequestedDocumentCopies.append(value)
    def insert_RequestedDocumentCopies_at(self, index, value):
        self.RequestedDocumentCopies.insert(index, value)
    def replace_RequestedDocumentCopies_at(self, index, value):
        self.RequestedDocumentCopies[index] = value
    def get_DocumentReferences(self):
        return self.DocumentReferences
    def set_DocumentReferences(self, DocumentReferences):
        self.DocumentReferences = DocumentReferences
    def add_DocumentReferences(self, value):
        self.DocumentReferences.append(value)
    def insert_DocumentReferences_at(self, index, value):
        self.DocumentReferences.insert(index, value)
    def replace_DocumentReferences_at(self, index, value):
        self.DocumentReferences[index] = value
    def validate_EtdAttributeType(self, value):
        result = True
        # Validate type EtdAttributeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['POST_SHIPMENT_UPLOAD_REQUESTED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on EtdAttributeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_RequestedShippingDocumentType(self, value):
        result = True
        # Validate type RequestedShippingDocumentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CERTIFICATE_OF_ORIGIN', 'COMMERCIAL_INVOICE', 'CUSTOMER_SPECIFIED_LABELS', 'CUSTOM_PACKAGE_DOCUMENT', 'CUSTOM_SHIPMENT_DOCUMENT', 'DANGEROUS_GOODS_SHIPPERS_DECLARATION', 'EXPORT_DECLARATION', 'FEDEX_FREIGHT_STRAIGHT_BILL_OF_LADING', 'GENERAL_AGENCY_AGREEMENT', 'LABEL', 'NAFTA_CERTIFICATE_OF_ORIGIN', 'OP_900', 'PRO_FORMA_INVOICE', 'RETURN_INSTRUCTIONS', 'VICS_BILL_OF_LADING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RequestedShippingDocumentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Attributes or
            self.RequestedDocumentCopies or
            self.DocumentReferences
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EtdDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EtdDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EtdDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EtdDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EtdDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EtdDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EtdDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Attributes_ in self.Attributes:
            namespaceprefix_ = self.Attributes_nsprefix_ + ':' if (UseCapturedNS_ and self.Attributes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttributes>%s</%sAttributes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Attributes_), input_name='Attributes')), namespaceprefix_ , eol_))
        for RequestedDocumentCopies_ in self.RequestedDocumentCopies:
            namespaceprefix_ = self.RequestedDocumentCopies_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestedDocumentCopies_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestedDocumentCopies>%s</%sRequestedDocumentCopies>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(RequestedDocumentCopies_), input_name='RequestedDocumentCopies')), namespaceprefix_ , eol_))
        for DocumentReferences_ in self.DocumentReferences:
            namespaceprefix_ = self.DocumentReferences_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentReferences_nsprefix_) else ''
            DocumentReferences_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocumentReferences', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Attributes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Attributes')
            value_ = self.gds_validate_string(value_, node, 'Attributes')
            self.Attributes.append(value_)
            self.Attributes_nsprefix_ = child_.prefix
            # validate type EtdAttributeType
            self.validate_EtdAttributeType(self.Attributes[-1])
        elif nodeName_ == 'RequestedDocumentCopies':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequestedDocumentCopies')
            value_ = self.gds_validate_string(value_, node, 'RequestedDocumentCopies')
            self.RequestedDocumentCopies.append(value_)
            self.RequestedDocumentCopies_nsprefix_ = child_.prefix
            # validate type RequestedShippingDocumentType
            self.validate_RequestedShippingDocumentType(self.RequestedDocumentCopies[-1])
        elif nodeName_ == 'DocumentReferences':
            obj_ = UploadDocumentReferenceDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocumentReferences.append(obj_)
            obj_.original_tagname_ = 'DocumentReferences'
# end class EtdDetail


class ExportDeclarationDetail(GeneratedsSuper):
    """The instructions indicating how to print the Export Declaration."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DocumentFormat=None, CustomerImageUsages=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DocumentFormat = DocumentFormat
        self.DocumentFormat_nsprefix_ = None
        if CustomerImageUsages is None:
            self.CustomerImageUsages = []
        else:
            self.CustomerImageUsages = CustomerImageUsages
        self.CustomerImageUsages_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExportDeclarationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExportDeclarationDetail.subclass:
            return ExportDeclarationDetail.subclass(*args_, **kwargs_)
        else:
            return ExportDeclarationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocumentFormat(self):
        return self.DocumentFormat
    def set_DocumentFormat(self, DocumentFormat):
        self.DocumentFormat = DocumentFormat
    def get_CustomerImageUsages(self):
        return self.CustomerImageUsages
    def set_CustomerImageUsages(self, CustomerImageUsages):
        self.CustomerImageUsages = CustomerImageUsages
    def add_CustomerImageUsages(self, value):
        self.CustomerImageUsages.append(value)
    def insert_CustomerImageUsages_at(self, index, value):
        self.CustomerImageUsages.insert(index, value)
    def replace_CustomerImageUsages_at(self, index, value):
        self.CustomerImageUsages[index] = value
    def hasContent_(self):
        if (
            self.DocumentFormat is not None or
            self.CustomerImageUsages
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExportDeclarationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExportDeclarationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ExportDeclarationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ExportDeclarationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ExportDeclarationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ExportDeclarationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExportDeclarationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocumentFormat is not None:
            namespaceprefix_ = self.DocumentFormat_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentFormat_nsprefix_) else ''
            self.DocumentFormat.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocumentFormat', pretty_print=pretty_print)
        for CustomerImageUsages_ in self.CustomerImageUsages:
            namespaceprefix_ = self.CustomerImageUsages_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerImageUsages_nsprefix_) else ''
            CustomerImageUsages_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomerImageUsages', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocumentFormat':
            obj_ = ShippingDocumentFormat.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocumentFormat = obj_
            obj_.original_tagname_ = 'DocumentFormat'
        elif nodeName_ == 'CustomerImageUsages':
            obj_ = CustomerImageUsage.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomerImageUsages.append(obj_)
            obj_.original_tagname_ = 'CustomerImageUsages'
# end class ExportDeclarationDetail


class ExportDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, B13AFilingOption=None, ExportComplianceStatement=None, PermitNumber=None, DestinationControlDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.B13AFilingOption = B13AFilingOption
        self.validate_B13AFilingOptionType(self.B13AFilingOption)
        self.B13AFilingOption_nsprefix_ = None
        self.ExportComplianceStatement = ExportComplianceStatement
        self.ExportComplianceStatement_nsprefix_ = None
        self.PermitNumber = PermitNumber
        self.PermitNumber_nsprefix_ = None
        self.DestinationControlDetail = DestinationControlDetail
        self.DestinationControlDetail_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExportDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExportDetail.subclass:
            return ExportDetail.subclass(*args_, **kwargs_)
        else:
            return ExportDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_B13AFilingOption(self):
        return self.B13AFilingOption
    def set_B13AFilingOption(self, B13AFilingOption):
        self.B13AFilingOption = B13AFilingOption
    def get_ExportComplianceStatement(self):
        return self.ExportComplianceStatement
    def set_ExportComplianceStatement(self, ExportComplianceStatement):
        self.ExportComplianceStatement = ExportComplianceStatement
    def get_PermitNumber(self):
        return self.PermitNumber
    def set_PermitNumber(self, PermitNumber):
        self.PermitNumber = PermitNumber
    def get_DestinationControlDetail(self):
        return self.DestinationControlDetail
    def set_DestinationControlDetail(self, DestinationControlDetail):
        self.DestinationControlDetail = DestinationControlDetail
    def validate_B13AFilingOptionType(self, value):
        result = True
        # Validate type B13AFilingOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_TO_STAMP', 'FILED_ELECTRONICALLY', 'MANUALLY_ATTACHED', 'NOT_REQUIRED', 'SUMMARY_REPORTING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on B13AFilingOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.B13AFilingOption is not None or
            self.ExportComplianceStatement is not None or
            self.PermitNumber is not None or
            self.DestinationControlDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExportDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExportDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ExportDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ExportDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ExportDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ExportDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExportDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.B13AFilingOption is not None:
            namespaceprefix_ = self.B13AFilingOption_nsprefix_ + ':' if (UseCapturedNS_ and self.B13AFilingOption_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sB13AFilingOption>%s</%sB13AFilingOption>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.B13AFilingOption), input_name='B13AFilingOption')), namespaceprefix_ , eol_))
        if self.ExportComplianceStatement is not None:
            namespaceprefix_ = self.ExportComplianceStatement_nsprefix_ + ':' if (UseCapturedNS_ and self.ExportComplianceStatement_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExportComplianceStatement>%s</%sExportComplianceStatement>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExportComplianceStatement), input_name='ExportComplianceStatement')), namespaceprefix_ , eol_))
        if self.PermitNumber is not None:
            namespaceprefix_ = self.PermitNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PermitNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPermitNumber>%s</%sPermitNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PermitNumber), input_name='PermitNumber')), namespaceprefix_ , eol_))
        if self.DestinationControlDetail is not None:
            namespaceprefix_ = self.DestinationControlDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationControlDetail_nsprefix_) else ''
            self.DestinationControlDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DestinationControlDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'B13AFilingOption':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'B13AFilingOption')
            value_ = self.gds_validate_string(value_, node, 'B13AFilingOption')
            self.B13AFilingOption = value_
            self.B13AFilingOption_nsprefix_ = child_.prefix
            # validate type B13AFilingOptionType
            self.validate_B13AFilingOptionType(self.B13AFilingOption)
        elif nodeName_ == 'ExportComplianceStatement':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExportComplianceStatement')
            value_ = self.gds_validate_string(value_, node, 'ExportComplianceStatement')
            self.ExportComplianceStatement = value_
            self.ExportComplianceStatement_nsprefix_ = child_.prefix
        elif nodeName_ == 'PermitNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PermitNumber')
            value_ = self.gds_validate_string(value_, node, 'PermitNumber')
            self.PermitNumber = value_
            self.PermitNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'DestinationControlDetail':
            obj_ = DestinationControlDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DestinationControlDetail = obj_
            obj_.original_tagname_ = 'DestinationControlDetail'
# end class ExportDetail


class ExpressFreightDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PackingListEnclosed=None, ShippersLoadAndCount=None, BookingConfirmationNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PackingListEnclosed = PackingListEnclosed
        self.PackingListEnclosed_nsprefix_ = None
        self.ShippersLoadAndCount = ShippersLoadAndCount
        self.ShippersLoadAndCount_nsprefix_ = None
        self.BookingConfirmationNumber = BookingConfirmationNumber
        self.BookingConfirmationNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExpressFreightDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExpressFreightDetail.subclass:
            return ExpressFreightDetail.subclass(*args_, **kwargs_)
        else:
            return ExpressFreightDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PackingListEnclosed(self):
        return self.PackingListEnclosed
    def set_PackingListEnclosed(self, PackingListEnclosed):
        self.PackingListEnclosed = PackingListEnclosed
    def get_ShippersLoadAndCount(self):
        return self.ShippersLoadAndCount
    def set_ShippersLoadAndCount(self, ShippersLoadAndCount):
        self.ShippersLoadAndCount = ShippersLoadAndCount
    def get_BookingConfirmationNumber(self):
        return self.BookingConfirmationNumber
    def set_BookingConfirmationNumber(self, BookingConfirmationNumber):
        self.BookingConfirmationNumber = BookingConfirmationNumber
    def hasContent_(self):
        if (
            self.PackingListEnclosed is not None or
            self.ShippersLoadAndCount is not None or
            self.BookingConfirmationNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExpressFreightDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExpressFreightDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ExpressFreightDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ExpressFreightDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ExpressFreightDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ExpressFreightDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExpressFreightDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackingListEnclosed is not None:
            namespaceprefix_ = self.PackingListEnclosed_nsprefix_ + ':' if (UseCapturedNS_ and self.PackingListEnclosed_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingListEnclosed>%s</%sPackingListEnclosed>%s' % (namespaceprefix_ , self.gds_format_boolean(self.PackingListEnclosed, input_name='PackingListEnclosed'), namespaceprefix_ , eol_))
        if self.ShippersLoadAndCount is not None:
            namespaceprefix_ = self.ShippersLoadAndCount_nsprefix_ + ':' if (UseCapturedNS_ and self.ShippersLoadAndCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShippersLoadAndCount>%s</%sShippersLoadAndCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.ShippersLoadAndCount, input_name='ShippersLoadAndCount'), namespaceprefix_ , eol_))
        if self.BookingConfirmationNumber is not None:
            namespaceprefix_ = self.BookingConfirmationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.BookingConfirmationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBookingConfirmationNumber>%s</%sBookingConfirmationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BookingConfirmationNumber), input_name='BookingConfirmationNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PackingListEnclosed':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'PackingListEnclosed')
            ival_ = self.gds_validate_boolean(ival_, node, 'PackingListEnclosed')
            self.PackingListEnclosed = ival_
            self.PackingListEnclosed_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShippersLoadAndCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'ShippersLoadAndCount')
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'ShippersLoadAndCount')
            self.ShippersLoadAndCount = ival_
            self.ShippersLoadAndCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'BookingConfirmationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BookingConfirmationNumber')
            value_ = self.gds_validate_string(value_, node, 'BookingConfirmationNumber')
            self.BookingConfirmationNumber = value_
            self.BookingConfirmationNumber_nsprefix_ = child_.prefix
# end class ExpressFreightDetail


class FreightAddressLabelDetail(GeneratedsSuper):
    """Data required to produce the Freight handling-unit-level address labels.
    Note that the number of UNIQUE labels (the N as in 1 of N, 2 of N,
    etc.) is determined by total handling units."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Format=None, Copies=None, StartingPosition=None, DocTabContent=None, CustomContentPosition=None, CustomContent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Format = Format
        self.Format_nsprefix_ = None
        self.Copies = Copies
        self.Copies_nsprefix_ = None
        self.StartingPosition = StartingPosition
        self.validate_PageQuadrantType(self.StartingPosition)
        self.StartingPosition_nsprefix_ = None
        self.DocTabContent = DocTabContent
        self.DocTabContent_nsprefix_ = None
        self.CustomContentPosition = CustomContentPosition
        self.validate_RelativeVerticalPositionType(self.CustomContentPosition)
        self.CustomContentPosition_nsprefix_ = None
        self.CustomContent = CustomContent
        self.CustomContent_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightAddressLabelDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightAddressLabelDetail.subclass:
            return FreightAddressLabelDetail.subclass(*args_, **kwargs_)
        else:
            return FreightAddressLabelDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Format(self):
        return self.Format
    def set_Format(self, Format):
        self.Format = Format
    def get_Copies(self):
        return self.Copies
    def set_Copies(self, Copies):
        self.Copies = Copies
    def get_StartingPosition(self):
        return self.StartingPosition
    def set_StartingPosition(self, StartingPosition):
        self.StartingPosition = StartingPosition
    def get_DocTabContent(self):
        return self.DocTabContent
    def set_DocTabContent(self, DocTabContent):
        self.DocTabContent = DocTabContent
    def get_CustomContentPosition(self):
        return self.CustomContentPosition
    def set_CustomContentPosition(self, CustomContentPosition):
        self.CustomContentPosition = CustomContentPosition
    def get_CustomContent(self):
        return self.CustomContent
    def set_CustomContent(self, CustomContent):
        self.CustomContent = CustomContent
    def validate_PageQuadrantType(self, value):
        result = True
        # Validate type PageQuadrantType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BOTTOM_LEFT', 'BOTTOM_RIGHT', 'TOP_LEFT', 'TOP_RIGHT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PageQuadrantType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_RelativeVerticalPositionType(self, value):
        result = True
        # Validate type RelativeVerticalPositionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ABOVE', 'BELOW']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RelativeVerticalPositionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Format is not None or
            self.Copies is not None or
            self.StartingPosition is not None or
            self.DocTabContent is not None or
            self.CustomContentPosition is not None or
            self.CustomContent is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightAddressLabelDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightAddressLabelDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightAddressLabelDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightAddressLabelDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightAddressLabelDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightAddressLabelDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightAddressLabelDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Format is not None:
            namespaceprefix_ = self.Format_nsprefix_ + ':' if (UseCapturedNS_ and self.Format_nsprefix_) else ''
            self.Format.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Format', pretty_print=pretty_print)
        if self.Copies is not None:
            namespaceprefix_ = self.Copies_nsprefix_ + ':' if (UseCapturedNS_ and self.Copies_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCopies>%s</%sCopies>%s' % (namespaceprefix_ , self.gds_format_integer(self.Copies, input_name='Copies'), namespaceprefix_ , eol_))
        if self.StartingPosition is not None:
            namespaceprefix_ = self.StartingPosition_nsprefix_ + ':' if (UseCapturedNS_ and self.StartingPosition_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStartingPosition>%s</%sStartingPosition>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StartingPosition), input_name='StartingPosition')), namespaceprefix_ , eol_))
        if self.DocTabContent is not None:
            namespaceprefix_ = self.DocTabContent_nsprefix_ + ':' if (UseCapturedNS_ and self.DocTabContent_nsprefix_) else ''
            self.DocTabContent.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocTabContent', pretty_print=pretty_print)
        if self.CustomContentPosition is not None:
            namespaceprefix_ = self.CustomContentPosition_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomContentPosition_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomContentPosition>%s</%sCustomContentPosition>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomContentPosition), input_name='CustomContentPosition')), namespaceprefix_ , eol_))
        if self.CustomContent is not None:
            namespaceprefix_ = self.CustomContent_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomContent_nsprefix_) else ''
            self.CustomContent.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomContent', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Format':
            obj_ = ShippingDocumentFormat.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Format = obj_
            obj_.original_tagname_ = 'Format'
        elif nodeName_ == 'Copies' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Copies')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Copies')
            self.Copies = ival_
            self.Copies_nsprefix_ = child_.prefix
        elif nodeName_ == 'StartingPosition':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StartingPosition')
            value_ = self.gds_validate_string(value_, node, 'StartingPosition')
            self.StartingPosition = value_
            self.StartingPosition_nsprefix_ = child_.prefix
            # validate type PageQuadrantType
            self.validate_PageQuadrantType(self.StartingPosition)
        elif nodeName_ == 'DocTabContent':
            obj_ = DocTabContent.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocTabContent = obj_
            obj_.original_tagname_ = 'DocTabContent'
        elif nodeName_ == 'CustomContentPosition':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomContentPosition')
            value_ = self.gds_validate_string(value_, node, 'CustomContentPosition')
            self.CustomContentPosition = value_
            self.CustomContentPosition_nsprefix_ = child_.prefix
            # validate type RelativeVerticalPositionType
            self.validate_RelativeVerticalPositionType(self.CustomContentPosition)
        elif nodeName_ == 'CustomContent':
            obj_ = CustomLabelDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomContent = obj_
            obj_.original_tagname_ = 'CustomContent'
# end class FreightAddressLabelDetail


class FreightBaseCharge(GeneratedsSuper):
    """Individual charge which contributes to the total base charge for the
    shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FreightClass=None, RatedAsClass=None, NmfcCode=None, Description=None, Weight=None, ChargeRate=None, ChargeBasis=None, ExtendedAmount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.FreightClass = FreightClass
        self.validate_FreightClassType(self.FreightClass)
        self.FreightClass_nsprefix_ = None
        self.RatedAsClass = RatedAsClass
        self.validate_FreightClassType(self.RatedAsClass)
        self.RatedAsClass_nsprefix_ = None
        self.NmfcCode = NmfcCode
        self.NmfcCode_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.Weight = Weight
        self.Weight_nsprefix_ = None
        self.ChargeRate = ChargeRate
        self.ChargeRate_nsprefix_ = None
        self.ChargeBasis = ChargeBasis
        self.validate_FreightChargeBasisType(self.ChargeBasis)
        self.ChargeBasis_nsprefix_ = None
        self.ExtendedAmount = ExtendedAmount
        self.ExtendedAmount_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightBaseCharge)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightBaseCharge.subclass:
            return FreightBaseCharge.subclass(*args_, **kwargs_)
        else:
            return FreightBaseCharge(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FreightClass(self):
        return self.FreightClass
    def set_FreightClass(self, FreightClass):
        self.FreightClass = FreightClass
    def get_RatedAsClass(self):
        return self.RatedAsClass
    def set_RatedAsClass(self, RatedAsClass):
        self.RatedAsClass = RatedAsClass
    def get_NmfcCode(self):
        return self.NmfcCode
    def set_NmfcCode(self, NmfcCode):
        self.NmfcCode = NmfcCode
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_Weight(self):
        return self.Weight
    def set_Weight(self, Weight):
        self.Weight = Weight
    def get_ChargeRate(self):
        return self.ChargeRate
    def set_ChargeRate(self, ChargeRate):
        self.ChargeRate = ChargeRate
    def get_ChargeBasis(self):
        return self.ChargeBasis
    def set_ChargeBasis(self, ChargeBasis):
        self.ChargeBasis = ChargeBasis
    def get_ExtendedAmount(self):
        return self.ExtendedAmount
    def set_ExtendedAmount(self, ExtendedAmount):
        self.ExtendedAmount = ExtendedAmount
    def validate_FreightClassType(self, value):
        result = True
        # Validate type FreightClassType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CLASS_050', 'CLASS_055', 'CLASS_060', 'CLASS_065', 'CLASS_070', 'CLASS_077_5', 'CLASS_085', 'CLASS_092_5', 'CLASS_100', 'CLASS_110', 'CLASS_125', 'CLASS_150', 'CLASS_175', 'CLASS_200', 'CLASS_250', 'CLASS_300', 'CLASS_400', 'CLASS_500']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FreightClassType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_FreightChargeBasisType(self, value):
        result = True
        # Validate type FreightChargeBasisType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CWT', 'FLAT', 'MINIMUM']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FreightChargeBasisType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.FreightClass is not None or
            self.RatedAsClass is not None or
            self.NmfcCode is not None or
            self.Description is not None or
            self.Weight is not None or
            self.ChargeRate is not None or
            self.ChargeBasis is not None or
            self.ExtendedAmount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightBaseCharge', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightBaseCharge')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightBaseCharge':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightBaseCharge')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightBaseCharge', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightBaseCharge'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightBaseCharge', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FreightClass is not None:
            namespaceprefix_ = self.FreightClass_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightClass_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFreightClass>%s</%sFreightClass>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FreightClass), input_name='FreightClass')), namespaceprefix_ , eol_))
        if self.RatedAsClass is not None:
            namespaceprefix_ = self.RatedAsClass_nsprefix_ + ':' if (UseCapturedNS_ and self.RatedAsClass_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRatedAsClass>%s</%sRatedAsClass>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RatedAsClass), input_name='RatedAsClass')), namespaceprefix_ , eol_))
        if self.NmfcCode is not None:
            namespaceprefix_ = self.NmfcCode_nsprefix_ + ':' if (UseCapturedNS_ and self.NmfcCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNmfcCode>%s</%sNmfcCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NmfcCode), input_name='NmfcCode')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.Weight is not None:
            namespaceprefix_ = self.Weight_nsprefix_ + ':' if (UseCapturedNS_ and self.Weight_nsprefix_) else ''
            self.Weight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Weight', pretty_print=pretty_print)
        if self.ChargeRate is not None:
            namespaceprefix_ = self.ChargeRate_nsprefix_ + ':' if (UseCapturedNS_ and self.ChargeRate_nsprefix_) else ''
            self.ChargeRate.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ChargeRate', pretty_print=pretty_print)
        if self.ChargeBasis is not None:
            namespaceprefix_ = self.ChargeBasis_nsprefix_ + ':' if (UseCapturedNS_ and self.ChargeBasis_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChargeBasis>%s</%sChargeBasis>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ChargeBasis), input_name='ChargeBasis')), namespaceprefix_ , eol_))
        if self.ExtendedAmount is not None:
            namespaceprefix_ = self.ExtendedAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.ExtendedAmount_nsprefix_) else ''
            self.ExtendedAmount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExtendedAmount', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FreightClass':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FreightClass')
            value_ = self.gds_validate_string(value_, node, 'FreightClass')
            self.FreightClass = value_
            self.FreightClass_nsprefix_ = child_.prefix
            # validate type FreightClassType
            self.validate_FreightClassType(self.FreightClass)
        elif nodeName_ == 'RatedAsClass':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RatedAsClass')
            value_ = self.gds_validate_string(value_, node, 'RatedAsClass')
            self.RatedAsClass = value_
            self.RatedAsClass_nsprefix_ = child_.prefix
            # validate type FreightClassType
            self.validate_FreightClassType(self.RatedAsClass)
        elif nodeName_ == 'NmfcCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NmfcCode')
            value_ = self.gds_validate_string(value_, node, 'NmfcCode')
            self.NmfcCode = value_
            self.NmfcCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'Weight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
        elif nodeName_ == 'ChargeRate':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ChargeRate = obj_
            obj_.original_tagname_ = 'ChargeRate'
        elif nodeName_ == 'ChargeBasis':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ChargeBasis')
            value_ = self.gds_validate_string(value_, node, 'ChargeBasis')
            self.ChargeBasis = value_
            self.ChargeBasis_nsprefix_ = child_.prefix
            # validate type FreightChargeBasisType
            self.validate_FreightChargeBasisType(self.ChargeBasis)
        elif nodeName_ == 'ExtendedAmount':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExtendedAmount = obj_
            obj_.original_tagname_ = 'ExtendedAmount'
# end class FreightBaseCharge


class FreightBillOfLadingDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Format=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Format = Format
        self.Format_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightBillOfLadingDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightBillOfLadingDetail.subclass:
            return FreightBillOfLadingDetail.subclass(*args_, **kwargs_)
        else:
            return FreightBillOfLadingDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Format(self):
        return self.Format
    def set_Format(self, Format):
        self.Format = Format
    def hasContent_(self):
        if (
            self.Format is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightBillOfLadingDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightBillOfLadingDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightBillOfLadingDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightBillOfLadingDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightBillOfLadingDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightBillOfLadingDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightBillOfLadingDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Format is not None:
            namespaceprefix_ = self.Format_nsprefix_ + ':' if (UseCapturedNS_ and self.Format_nsprefix_) else ''
            self.Format.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Format', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Format':
            obj_ = ShippingDocumentFormat.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Format = obj_
            obj_.original_tagname_ = 'Format'
# end class FreightBillOfLadingDetail


class FreightGuaranteeDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Date=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_FreightGuaranteeType(self.Type)
        self.Type_nsprefix_ = None
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.Date_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightGuaranteeDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightGuaranteeDetail.subclass:
            return FreightGuaranteeDetail.subclass(*args_, **kwargs_)
        else:
            return FreightGuaranteeDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def validate_FreightGuaranteeType(self, value):
        result = True
        # Validate type FreightGuaranteeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['GUARANTEED_DATE', 'GUARANTEED_MORNING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FreightGuaranteeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Date is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightGuaranteeDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightGuaranteeDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightGuaranteeDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightGuaranteeDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightGuaranteeDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightGuaranteeDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightGuaranteeDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Date is not None:
            namespaceprefix_ = self.Date_nsprefix_ + ':' if (UseCapturedNS_ and self.Date_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type FreightGuaranteeType
            self.validate_FreightGuaranteeType(self.Type)
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
            self.Date_nsprefix_ = child_.prefix
# end class FreightGuaranteeDetail


class FreightRateDetail(GeneratedsSuper):
    """Rate data specific to FedEx Freight or FedEx National Freight
    services."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, QuoteNumber=None, QuoteType=None, BaseChargeCalculation=None, BaseCharges=None, Notations=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.QuoteNumber = QuoteNumber
        self.QuoteNumber_nsprefix_ = None
        self.QuoteType = QuoteType
        self.validate_FreightRateQuoteType(self.QuoteType)
        self.QuoteType_nsprefix_ = None
        self.BaseChargeCalculation = BaseChargeCalculation
        self.validate_FreightBaseChargeCalculationType(self.BaseChargeCalculation)
        self.BaseChargeCalculation_nsprefix_ = None
        if BaseCharges is None:
            self.BaseCharges = []
        else:
            self.BaseCharges = BaseCharges
        self.BaseCharges_nsprefix_ = None
        if Notations is None:
            self.Notations = []
        else:
            self.Notations = Notations
        self.Notations_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightRateDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightRateDetail.subclass:
            return FreightRateDetail.subclass(*args_, **kwargs_)
        else:
            return FreightRateDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_QuoteNumber(self):
        return self.QuoteNumber
    def set_QuoteNumber(self, QuoteNumber):
        self.QuoteNumber = QuoteNumber
    def get_QuoteType(self):
        return self.QuoteType
    def set_QuoteType(self, QuoteType):
        self.QuoteType = QuoteType
    def get_BaseChargeCalculation(self):
        return self.BaseChargeCalculation
    def set_BaseChargeCalculation(self, BaseChargeCalculation):
        self.BaseChargeCalculation = BaseChargeCalculation
    def get_BaseCharges(self):
        return self.BaseCharges
    def set_BaseCharges(self, BaseCharges):
        self.BaseCharges = BaseCharges
    def add_BaseCharges(self, value):
        self.BaseCharges.append(value)
    def insert_BaseCharges_at(self, index, value):
        self.BaseCharges.insert(index, value)
    def replace_BaseCharges_at(self, index, value):
        self.BaseCharges[index] = value
    def get_Notations(self):
        return self.Notations
    def set_Notations(self, Notations):
        self.Notations = Notations
    def add_Notations(self, value):
        self.Notations.append(value)
    def insert_Notations_at(self, index, value):
        self.Notations.insert(index, value)
    def replace_Notations_at(self, index, value):
        self.Notations[index] = value
    def validate_FreightRateQuoteType(self, value):
        result = True
        # Validate type FreightRateQuoteType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AUTOMATED', 'MANUAL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FreightRateQuoteType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_FreightBaseChargeCalculationType(self, value):
        result = True
        # Validate type FreightBaseChargeCalculationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BEYOND', 'LINE_ITEMS', 'UNIT_PRICING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FreightBaseChargeCalculationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.QuoteNumber is not None or
            self.QuoteType is not None or
            self.BaseChargeCalculation is not None or
            self.BaseCharges or
            self.Notations
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightRateDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightRateDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightRateDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightRateDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightRateDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightRateDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightRateDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.QuoteNumber is not None:
            namespaceprefix_ = self.QuoteNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.QuoteNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuoteNumber>%s</%sQuoteNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QuoteNumber), input_name='QuoteNumber')), namespaceprefix_ , eol_))
        if self.QuoteType is not None:
            namespaceprefix_ = self.QuoteType_nsprefix_ + ':' if (UseCapturedNS_ and self.QuoteType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuoteType>%s</%sQuoteType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QuoteType), input_name='QuoteType')), namespaceprefix_ , eol_))
        if self.BaseChargeCalculation is not None:
            namespaceprefix_ = self.BaseChargeCalculation_nsprefix_ + ':' if (UseCapturedNS_ and self.BaseChargeCalculation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaseChargeCalculation>%s</%sBaseChargeCalculation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BaseChargeCalculation), input_name='BaseChargeCalculation')), namespaceprefix_ , eol_))
        for BaseCharges_ in self.BaseCharges:
            namespaceprefix_ = self.BaseCharges_nsprefix_ + ':' if (UseCapturedNS_ and self.BaseCharges_nsprefix_) else ''
            BaseCharges_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BaseCharges', pretty_print=pretty_print)
        for Notations_ in self.Notations:
            namespaceprefix_ = self.Notations_nsprefix_ + ':' if (UseCapturedNS_ and self.Notations_nsprefix_) else ''
            Notations_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Notations', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'QuoteNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'QuoteNumber')
            value_ = self.gds_validate_string(value_, node, 'QuoteNumber')
            self.QuoteNumber = value_
            self.QuoteNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'QuoteType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'QuoteType')
            value_ = self.gds_validate_string(value_, node, 'QuoteType')
            self.QuoteType = value_
            self.QuoteType_nsprefix_ = child_.prefix
            # validate type FreightRateQuoteType
            self.validate_FreightRateQuoteType(self.QuoteType)
        elif nodeName_ == 'BaseChargeCalculation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BaseChargeCalculation')
            value_ = self.gds_validate_string(value_, node, 'BaseChargeCalculation')
            self.BaseChargeCalculation = value_
            self.BaseChargeCalculation_nsprefix_ = child_.prefix
            # validate type FreightBaseChargeCalculationType
            self.validate_FreightBaseChargeCalculationType(self.BaseChargeCalculation)
        elif nodeName_ == 'BaseCharges':
            obj_ = FreightBaseCharge.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BaseCharges.append(obj_)
            obj_.original_tagname_ = 'BaseCharges'
        elif nodeName_ == 'Notations':
            obj_ = FreightRateNotation.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Notations.append(obj_)
            obj_.original_tagname_ = 'Notations'
# end class FreightRateDetail


class FreightRateNotation(GeneratedsSuper):
    """Additional non-monetary data returned with Freight rates."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightRateNotation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightRateNotation.subclass:
            return FreightRateNotation.subclass(*args_, **kwargs_)
        else:
            return FreightRateNotation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightRateNotation', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightRateNotation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightRateNotation':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightRateNotation')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightRateNotation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightRateNotation'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightRateNotation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class FreightRateNotation


class FreightShipmentDetail(GeneratedsSuper):
    """Data applicable to shipments using FEDEX_FREIGHT_ECONOMY and
    FEDEX_FREIGHT_PRIORITY services."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FedExFreightAccountNumber=None, FedExFreightBillingContactAndAddress=None, AlternateBilling=None, PrintedReferences=None, Role=None, CollectTermsType=None, DeclaredValuePerUnit=None, DeclaredValueUnits=None, LiabilityCoverageDetail=None, Coupons=None, TotalHandlingUnits=None, ClientDiscountPercent=None, PalletWeight=None, ShipmentDimensions=None, Comment=None, SpecialServicePayments=None, HazardousMaterialsEmergencyContactNumber=None, HazardousMaterialsOfferor=None, LineItems=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.FedExFreightAccountNumber = FedExFreightAccountNumber
        self.FedExFreightAccountNumber_nsprefix_ = None
        self.FedExFreightBillingContactAndAddress = FedExFreightBillingContactAndAddress
        self.FedExFreightBillingContactAndAddress_nsprefix_ = None
        self.AlternateBilling = AlternateBilling
        self.AlternateBilling_nsprefix_ = None
        if PrintedReferences is None:
            self.PrintedReferences = []
        else:
            self.PrintedReferences = PrintedReferences
        self.PrintedReferences_nsprefix_ = None
        self.Role = Role
        self.validate_FreightShipmentRoleType(self.Role)
        self.Role_nsprefix_ = None
        self.CollectTermsType = CollectTermsType
        self.validate_FreightCollectTermsType(self.CollectTermsType)
        self.CollectTermsType_nsprefix_ = None
        self.DeclaredValuePerUnit = DeclaredValuePerUnit
        self.DeclaredValuePerUnit_nsprefix_ = None
        self.DeclaredValueUnits = DeclaredValueUnits
        self.DeclaredValueUnits_nsprefix_ = None
        self.LiabilityCoverageDetail = LiabilityCoverageDetail
        self.LiabilityCoverageDetail_nsprefix_ = None
        if Coupons is None:
            self.Coupons = []
        else:
            self.Coupons = Coupons
        self.Coupons_nsprefix_ = None
        self.TotalHandlingUnits = TotalHandlingUnits
        self.TotalHandlingUnits_nsprefix_ = None
        self.ClientDiscountPercent = ClientDiscountPercent
        self.ClientDiscountPercent_nsprefix_ = None
        self.PalletWeight = PalletWeight
        self.PalletWeight_nsprefix_ = None
        self.ShipmentDimensions = ShipmentDimensions
        self.ShipmentDimensions_nsprefix_ = None
        self.Comment = Comment
        self.Comment_nsprefix_ = None
        if SpecialServicePayments is None:
            self.SpecialServicePayments = []
        else:
            self.SpecialServicePayments = SpecialServicePayments
        self.SpecialServicePayments_nsprefix_ = None
        self.HazardousMaterialsEmergencyContactNumber = HazardousMaterialsEmergencyContactNumber
        self.HazardousMaterialsEmergencyContactNumber_nsprefix_ = None
        self.HazardousMaterialsOfferor = HazardousMaterialsOfferor
        self.HazardousMaterialsOfferor_nsprefix_ = None
        if LineItems is None:
            self.LineItems = []
        else:
            self.LineItems = LineItems
        self.LineItems_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightShipmentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightShipmentDetail.subclass:
            return FreightShipmentDetail.subclass(*args_, **kwargs_)
        else:
            return FreightShipmentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FedExFreightAccountNumber(self):
        return self.FedExFreightAccountNumber
    def set_FedExFreightAccountNumber(self, FedExFreightAccountNumber):
        self.FedExFreightAccountNumber = FedExFreightAccountNumber
    def get_FedExFreightBillingContactAndAddress(self):
        return self.FedExFreightBillingContactAndAddress
    def set_FedExFreightBillingContactAndAddress(self, FedExFreightBillingContactAndAddress):
        self.FedExFreightBillingContactAndAddress = FedExFreightBillingContactAndAddress
    def get_AlternateBilling(self):
        return self.AlternateBilling
    def set_AlternateBilling(self, AlternateBilling):
        self.AlternateBilling = AlternateBilling
    def get_PrintedReferences(self):
        return self.PrintedReferences
    def set_PrintedReferences(self, PrintedReferences):
        self.PrintedReferences = PrintedReferences
    def add_PrintedReferences(self, value):
        self.PrintedReferences.append(value)
    def insert_PrintedReferences_at(self, index, value):
        self.PrintedReferences.insert(index, value)
    def replace_PrintedReferences_at(self, index, value):
        self.PrintedReferences[index] = value
    def get_Role(self):
        return self.Role
    def set_Role(self, Role):
        self.Role = Role
    def get_CollectTermsType(self):
        return self.CollectTermsType
    def set_CollectTermsType(self, CollectTermsType):
        self.CollectTermsType = CollectTermsType
    def get_DeclaredValuePerUnit(self):
        return self.DeclaredValuePerUnit
    def set_DeclaredValuePerUnit(self, DeclaredValuePerUnit):
        self.DeclaredValuePerUnit = DeclaredValuePerUnit
    def get_DeclaredValueUnits(self):
        return self.DeclaredValueUnits
    def set_DeclaredValueUnits(self, DeclaredValueUnits):
        self.DeclaredValueUnits = DeclaredValueUnits
    def get_LiabilityCoverageDetail(self):
        return self.LiabilityCoverageDetail
    def set_LiabilityCoverageDetail(self, LiabilityCoverageDetail):
        self.LiabilityCoverageDetail = LiabilityCoverageDetail
    def get_Coupons(self):
        return self.Coupons
    def set_Coupons(self, Coupons):
        self.Coupons = Coupons
    def add_Coupons(self, value):
        self.Coupons.append(value)
    def insert_Coupons_at(self, index, value):
        self.Coupons.insert(index, value)
    def replace_Coupons_at(self, index, value):
        self.Coupons[index] = value
    def get_TotalHandlingUnits(self):
        return self.TotalHandlingUnits
    def set_TotalHandlingUnits(self, TotalHandlingUnits):
        self.TotalHandlingUnits = TotalHandlingUnits
    def get_ClientDiscountPercent(self):
        return self.ClientDiscountPercent
    def set_ClientDiscountPercent(self, ClientDiscountPercent):
        self.ClientDiscountPercent = ClientDiscountPercent
    def get_PalletWeight(self):
        return self.PalletWeight
    def set_PalletWeight(self, PalletWeight):
        self.PalletWeight = PalletWeight
    def get_ShipmentDimensions(self):
        return self.ShipmentDimensions
    def set_ShipmentDimensions(self, ShipmentDimensions):
        self.ShipmentDimensions = ShipmentDimensions
    def get_Comment(self):
        return self.Comment
    def set_Comment(self, Comment):
        self.Comment = Comment
    def get_SpecialServicePayments(self):
        return self.SpecialServicePayments
    def set_SpecialServicePayments(self, SpecialServicePayments):
        self.SpecialServicePayments = SpecialServicePayments
    def add_SpecialServicePayments(self, value):
        self.SpecialServicePayments.append(value)
    def insert_SpecialServicePayments_at(self, index, value):
        self.SpecialServicePayments.insert(index, value)
    def replace_SpecialServicePayments_at(self, index, value):
        self.SpecialServicePayments[index] = value
    def get_HazardousMaterialsEmergencyContactNumber(self):
        return self.HazardousMaterialsEmergencyContactNumber
    def set_HazardousMaterialsEmergencyContactNumber(self, HazardousMaterialsEmergencyContactNumber):
        self.HazardousMaterialsEmergencyContactNumber = HazardousMaterialsEmergencyContactNumber
    def get_HazardousMaterialsOfferor(self):
        return self.HazardousMaterialsOfferor
    def set_HazardousMaterialsOfferor(self, HazardousMaterialsOfferor):
        self.HazardousMaterialsOfferor = HazardousMaterialsOfferor
    def get_LineItems(self):
        return self.LineItems
    def set_LineItems(self, LineItems):
        self.LineItems = LineItems
    def add_LineItems(self, value):
        self.LineItems.append(value)
    def insert_LineItems_at(self, index, value):
        self.LineItems.insert(index, value)
    def replace_LineItems_at(self, index, value):
        self.LineItems[index] = value
    def validate_FreightShipmentRoleType(self, value):
        result = True
        # Validate type FreightShipmentRoleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CONSIGNEE', 'SHIPPER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FreightShipmentRoleType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_FreightCollectTermsType(self, value):
        result = True
        # Validate type FreightCollectTermsType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['NON_RECOURSE_SHIPPER_SIGNED', 'STANDARD']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FreightCollectTermsType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.FedExFreightAccountNumber is not None or
            self.FedExFreightBillingContactAndAddress is not None or
            self.AlternateBilling is not None or
            self.PrintedReferences or
            self.Role is not None or
            self.CollectTermsType is not None or
            self.DeclaredValuePerUnit is not None or
            self.DeclaredValueUnits is not None or
            self.LiabilityCoverageDetail is not None or
            self.Coupons or
            self.TotalHandlingUnits is not None or
            self.ClientDiscountPercent is not None or
            self.PalletWeight is not None or
            self.ShipmentDimensions is not None or
            self.Comment is not None or
            self.SpecialServicePayments or
            self.HazardousMaterialsEmergencyContactNumber is not None or
            self.HazardousMaterialsOfferor is not None or
            self.LineItems
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightShipmentDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightShipmentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightShipmentDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightShipmentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightShipmentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightShipmentDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightShipmentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FedExFreightAccountNumber is not None:
            namespaceprefix_ = self.FedExFreightAccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.FedExFreightAccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFedExFreightAccountNumber>%s</%sFedExFreightAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FedExFreightAccountNumber), input_name='FedExFreightAccountNumber')), namespaceprefix_ , eol_))
        if self.FedExFreightBillingContactAndAddress is not None:
            namespaceprefix_ = self.FedExFreightBillingContactAndAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.FedExFreightBillingContactAndAddress_nsprefix_) else ''
            self.FedExFreightBillingContactAndAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FedExFreightBillingContactAndAddress', pretty_print=pretty_print)
        if self.AlternateBilling is not None:
            namespaceprefix_ = self.AlternateBilling_nsprefix_ + ':' if (UseCapturedNS_ and self.AlternateBilling_nsprefix_) else ''
            self.AlternateBilling.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AlternateBilling', pretty_print=pretty_print)
        for PrintedReferences_ in self.PrintedReferences:
            namespaceprefix_ = self.PrintedReferences_nsprefix_ + ':' if (UseCapturedNS_ and self.PrintedReferences_nsprefix_) else ''
            PrintedReferences_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PrintedReferences', pretty_print=pretty_print)
        if self.Role is not None:
            namespaceprefix_ = self.Role_nsprefix_ + ':' if (UseCapturedNS_ and self.Role_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRole>%s</%sRole>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Role), input_name='Role')), namespaceprefix_ , eol_))
        if self.CollectTermsType is not None:
            namespaceprefix_ = self.CollectTermsType_nsprefix_ + ':' if (UseCapturedNS_ and self.CollectTermsType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCollectTermsType>%s</%sCollectTermsType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CollectTermsType), input_name='CollectTermsType')), namespaceprefix_ , eol_))
        if self.DeclaredValuePerUnit is not None:
            namespaceprefix_ = self.DeclaredValuePerUnit_nsprefix_ + ':' if (UseCapturedNS_ and self.DeclaredValuePerUnit_nsprefix_) else ''
            self.DeclaredValuePerUnit.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DeclaredValuePerUnit', pretty_print=pretty_print)
        if self.DeclaredValueUnits is not None:
            namespaceprefix_ = self.DeclaredValueUnits_nsprefix_ + ':' if (UseCapturedNS_ and self.DeclaredValueUnits_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeclaredValueUnits>%s</%sDeclaredValueUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeclaredValueUnits), input_name='DeclaredValueUnits')), namespaceprefix_ , eol_))
        if self.LiabilityCoverageDetail is not None:
            namespaceprefix_ = self.LiabilityCoverageDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.LiabilityCoverageDetail_nsprefix_) else ''
            self.LiabilityCoverageDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LiabilityCoverageDetail', pretty_print=pretty_print)
        for Coupons_ in self.Coupons:
            namespaceprefix_ = self.Coupons_nsprefix_ + ':' if (UseCapturedNS_ and self.Coupons_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCoupons>%s</%sCoupons>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Coupons_), input_name='Coupons')), namespaceprefix_ , eol_))
        if self.TotalHandlingUnits is not None:
            namespaceprefix_ = self.TotalHandlingUnits_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalHandlingUnits_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalHandlingUnits>%s</%sTotalHandlingUnits>%s' % (namespaceprefix_ , self.gds_format_integer(self.TotalHandlingUnits, input_name='TotalHandlingUnits'), namespaceprefix_ , eol_))
        if self.ClientDiscountPercent is not None:
            namespaceprefix_ = self.ClientDiscountPercent_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientDiscountPercent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientDiscountPercent>%s</%sClientDiscountPercent>%s' % (namespaceprefix_ , self.gds_format_decimal(self.ClientDiscountPercent, input_name='ClientDiscountPercent'), namespaceprefix_ , eol_))
        if self.PalletWeight is not None:
            namespaceprefix_ = self.PalletWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.PalletWeight_nsprefix_) else ''
            self.PalletWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PalletWeight', pretty_print=pretty_print)
        if self.ShipmentDimensions is not None:
            namespaceprefix_ = self.ShipmentDimensions_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentDimensions_nsprefix_) else ''
            self.ShipmentDimensions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentDimensions', pretty_print=pretty_print)
        if self.Comment is not None:
            namespaceprefix_ = self.Comment_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComment>%s</%sComment>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Comment), input_name='Comment')), namespaceprefix_ , eol_))
        for SpecialServicePayments_ in self.SpecialServicePayments:
            namespaceprefix_ = self.SpecialServicePayments_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialServicePayments_nsprefix_) else ''
            SpecialServicePayments_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SpecialServicePayments', pretty_print=pretty_print)
        if self.HazardousMaterialsEmergencyContactNumber is not None:
            namespaceprefix_ = self.HazardousMaterialsEmergencyContactNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.HazardousMaterialsEmergencyContactNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHazardousMaterialsEmergencyContactNumber>%s</%sHazardousMaterialsEmergencyContactNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HazardousMaterialsEmergencyContactNumber), input_name='HazardousMaterialsEmergencyContactNumber')), namespaceprefix_ , eol_))
        if self.HazardousMaterialsOfferor is not None:
            namespaceprefix_ = self.HazardousMaterialsOfferor_nsprefix_ + ':' if (UseCapturedNS_ and self.HazardousMaterialsOfferor_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHazardousMaterialsOfferor>%s</%sHazardousMaterialsOfferor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HazardousMaterialsOfferor), input_name='HazardousMaterialsOfferor')), namespaceprefix_ , eol_))
        for LineItems_ in self.LineItems:
            namespaceprefix_ = self.LineItems_nsprefix_ + ':' if (UseCapturedNS_ and self.LineItems_nsprefix_) else ''
            LineItems_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LineItems', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FedExFreightAccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FedExFreightAccountNumber')
            value_ = self.gds_validate_string(value_, node, 'FedExFreightAccountNumber')
            self.FedExFreightAccountNumber = value_
            self.FedExFreightAccountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'FedExFreightBillingContactAndAddress':
            obj_ = ContactAndAddress.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FedExFreightBillingContactAndAddress = obj_
            obj_.original_tagname_ = 'FedExFreightBillingContactAndAddress'
        elif nodeName_ == 'AlternateBilling':
            obj_ = Party.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AlternateBilling = obj_
            obj_.original_tagname_ = 'AlternateBilling'
        elif nodeName_ == 'PrintedReferences':
            obj_ = PrintedReference.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PrintedReferences.append(obj_)
            obj_.original_tagname_ = 'PrintedReferences'
        elif nodeName_ == 'Role':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Role')
            value_ = self.gds_validate_string(value_, node, 'Role')
            self.Role = value_
            self.Role_nsprefix_ = child_.prefix
            # validate type FreightShipmentRoleType
            self.validate_FreightShipmentRoleType(self.Role)
        elif nodeName_ == 'CollectTermsType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CollectTermsType')
            value_ = self.gds_validate_string(value_, node, 'CollectTermsType')
            self.CollectTermsType = value_
            self.CollectTermsType_nsprefix_ = child_.prefix
            # validate type FreightCollectTermsType
            self.validate_FreightCollectTermsType(self.CollectTermsType)
        elif nodeName_ == 'DeclaredValuePerUnit':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DeclaredValuePerUnit = obj_
            obj_.original_tagname_ = 'DeclaredValuePerUnit'
        elif nodeName_ == 'DeclaredValueUnits':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DeclaredValueUnits')
            value_ = self.gds_validate_string(value_, node, 'DeclaredValueUnits')
            self.DeclaredValueUnits = value_
            self.DeclaredValueUnits_nsprefix_ = child_.prefix
        elif nodeName_ == 'LiabilityCoverageDetail':
            obj_ = LiabilityCoverageDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LiabilityCoverageDetail = obj_
            obj_.original_tagname_ = 'LiabilityCoverageDetail'
        elif nodeName_ == 'Coupons':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Coupons')
            value_ = self.gds_validate_string(value_, node, 'Coupons')
            self.Coupons.append(value_)
            self.Coupons_nsprefix_ = child_.prefix
        elif nodeName_ == 'TotalHandlingUnits' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'TotalHandlingUnits')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'TotalHandlingUnits')
            self.TotalHandlingUnits = ival_
            self.TotalHandlingUnits_nsprefix_ = child_.prefix
        elif nodeName_ == 'ClientDiscountPercent' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'ClientDiscountPercent')
            fval_ = self.gds_validate_decimal(fval_, node, 'ClientDiscountPercent')
            self.ClientDiscountPercent = fval_
            self.ClientDiscountPercent_nsprefix_ = child_.prefix
        elif nodeName_ == 'PalletWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PalletWeight = obj_
            obj_.original_tagname_ = 'PalletWeight'
        elif nodeName_ == 'ShipmentDimensions':
            obj_ = Dimensions.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentDimensions = obj_
            obj_.original_tagname_ = 'ShipmentDimensions'
        elif nodeName_ == 'Comment':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Comment')
            value_ = self.gds_validate_string(value_, node, 'Comment')
            self.Comment = value_
            self.Comment_nsprefix_ = child_.prefix
        elif nodeName_ == 'SpecialServicePayments':
            obj_ = FreightSpecialServicePayment.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SpecialServicePayments.append(obj_)
            obj_.original_tagname_ = 'SpecialServicePayments'
        elif nodeName_ == 'HazardousMaterialsEmergencyContactNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HazardousMaterialsEmergencyContactNumber')
            value_ = self.gds_validate_string(value_, node, 'HazardousMaterialsEmergencyContactNumber')
            self.HazardousMaterialsEmergencyContactNumber = value_
            self.HazardousMaterialsEmergencyContactNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'HazardousMaterialsOfferor':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HazardousMaterialsOfferor')
            value_ = self.gds_validate_string(value_, node, 'HazardousMaterialsOfferor')
            self.HazardousMaterialsOfferor = value_
            self.HazardousMaterialsOfferor_nsprefix_ = child_.prefix
        elif nodeName_ == 'LineItems':
            obj_ = FreightShipmentLineItem.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LineItems.append(obj_)
            obj_.original_tagname_ = 'LineItems'
# end class FreightShipmentDetail


class FreightShipmentLineItem(GeneratedsSuper):
    """Description of an individual commodity or class of content in a
    shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, FreightClass=None, ClassProvidedByCustomer=None, HandlingUnits=None, Packaging=None, Pieces=None, NmfcCode=None, HazardousMaterials=None, PurchaseOrderNumber=None, Description=None, Weight=None, Dimensions=None, Volume=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Id = Id
        self.Id_nsprefix_ = None
        self.FreightClass = FreightClass
        self.validate_FreightClassType(self.FreightClass)
        self.FreightClass_nsprefix_ = None
        self.ClassProvidedByCustomer = ClassProvidedByCustomer
        self.ClassProvidedByCustomer_nsprefix_ = None
        self.HandlingUnits = HandlingUnits
        self.HandlingUnits_nsprefix_ = None
        self.Packaging = Packaging
        self.validate_PhysicalPackagingType(self.Packaging)
        self.Packaging_nsprefix_ = None
        self.Pieces = Pieces
        self.Pieces_nsprefix_ = None
        self.NmfcCode = NmfcCode
        self.NmfcCode_nsprefix_ = None
        self.HazardousMaterials = HazardousMaterials
        self.validate_HazardousCommodityOptionType(self.HazardousMaterials)
        self.HazardousMaterials_nsprefix_ = None
        self.PurchaseOrderNumber = PurchaseOrderNumber
        self.PurchaseOrderNumber_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.Weight = Weight
        self.Weight_nsprefix_ = None
        self.Dimensions = Dimensions
        self.Dimensions_nsprefix_ = None
        self.Volume = Volume
        self.Volume_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightShipmentLineItem)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightShipmentLineItem.subclass:
            return FreightShipmentLineItem.subclass(*args_, **kwargs_)
        else:
            return FreightShipmentLineItem(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_FreightClass(self):
        return self.FreightClass
    def set_FreightClass(self, FreightClass):
        self.FreightClass = FreightClass
    def get_ClassProvidedByCustomer(self):
        return self.ClassProvidedByCustomer
    def set_ClassProvidedByCustomer(self, ClassProvidedByCustomer):
        self.ClassProvidedByCustomer = ClassProvidedByCustomer
    def get_HandlingUnits(self):
        return self.HandlingUnits
    def set_HandlingUnits(self, HandlingUnits):
        self.HandlingUnits = HandlingUnits
    def get_Packaging(self):
        return self.Packaging
    def set_Packaging(self, Packaging):
        self.Packaging = Packaging
    def get_Pieces(self):
        return self.Pieces
    def set_Pieces(self, Pieces):
        self.Pieces = Pieces
    def get_NmfcCode(self):
        return self.NmfcCode
    def set_NmfcCode(self, NmfcCode):
        self.NmfcCode = NmfcCode
    def get_HazardousMaterials(self):
        return self.HazardousMaterials
    def set_HazardousMaterials(self, HazardousMaterials):
        self.HazardousMaterials = HazardousMaterials
    def get_PurchaseOrderNumber(self):
        return self.PurchaseOrderNumber
    def set_PurchaseOrderNumber(self, PurchaseOrderNumber):
        self.PurchaseOrderNumber = PurchaseOrderNumber
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_Weight(self):
        return self.Weight
    def set_Weight(self, Weight):
        self.Weight = Weight
    def get_Dimensions(self):
        return self.Dimensions
    def set_Dimensions(self, Dimensions):
        self.Dimensions = Dimensions
    def get_Volume(self):
        return self.Volume
    def set_Volume(self, Volume):
        self.Volume = Volume
    def validate_FreightClassType(self, value):
        result = True
        # Validate type FreightClassType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CLASS_050', 'CLASS_055', 'CLASS_060', 'CLASS_065', 'CLASS_070', 'CLASS_077_5', 'CLASS_085', 'CLASS_092_5', 'CLASS_100', 'CLASS_110', 'CLASS_125', 'CLASS_150', 'CLASS_175', 'CLASS_200', 'CLASS_250', 'CLASS_300', 'CLASS_400', 'CLASS_500']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FreightClassType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_PhysicalPackagingType(self, value):
        result = True
        # Validate type PhysicalPackagingType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BAG', 'BARREL', 'BASKET', 'BOX', 'BUCKET', 'BUNDLE', 'CARTON', 'CASE', 'CONTAINER', 'CRATE', 'CYLINDER', 'DRUM', 'ENVELOPE', 'HAMPER', 'OTHER', 'PAIL', 'PALLET', 'PIECE', 'REEL', 'ROLL', 'SKID', 'TANK', 'TUBE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PhysicalPackagingType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_HazardousCommodityOptionType(self, value):
        result = True
        # Validate type HazardousCommodityOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BATTERY', 'HAZARDOUS_MATERIALS', 'LIMITED_QUANTITIES_COMMODITIES', 'ORM_D', 'REPORTABLE_QUANTITIES', 'SMALL_QUANTITY_EXCEPTION']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on HazardousCommodityOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Id is not None or
            self.FreightClass is not None or
            self.ClassProvidedByCustomer is not None or
            self.HandlingUnits is not None or
            self.Packaging is not None or
            self.Pieces is not None or
            self.NmfcCode is not None or
            self.HazardousMaterials is not None or
            self.PurchaseOrderNumber is not None or
            self.Description is not None or
            self.Weight is not None or
            self.Dimensions is not None or
            self.Volume is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightShipmentLineItem', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightShipmentLineItem')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightShipmentLineItem':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightShipmentLineItem')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightShipmentLineItem', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightShipmentLineItem'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightShipmentLineItem', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Id is not None:
            namespaceprefix_ = self.Id_nsprefix_ + ':' if (UseCapturedNS_ and self.Id_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sId>%s</%sId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), namespaceprefix_ , eol_))
        if self.FreightClass is not None:
            namespaceprefix_ = self.FreightClass_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightClass_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFreightClass>%s</%sFreightClass>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FreightClass), input_name='FreightClass')), namespaceprefix_ , eol_))
        if self.ClassProvidedByCustomer is not None:
            namespaceprefix_ = self.ClassProvidedByCustomer_nsprefix_ + ':' if (UseCapturedNS_ and self.ClassProvidedByCustomer_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassProvidedByCustomer>%s</%sClassProvidedByCustomer>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ClassProvidedByCustomer, input_name='ClassProvidedByCustomer'), namespaceprefix_ , eol_))
        if self.HandlingUnits is not None:
            namespaceprefix_ = self.HandlingUnits_nsprefix_ + ':' if (UseCapturedNS_ and self.HandlingUnits_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHandlingUnits>%s</%sHandlingUnits>%s' % (namespaceprefix_ , self.gds_format_integer(self.HandlingUnits, input_name='HandlingUnits'), namespaceprefix_ , eol_))
        if self.Packaging is not None:
            namespaceprefix_ = self.Packaging_nsprefix_ + ':' if (UseCapturedNS_ and self.Packaging_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackaging>%s</%sPackaging>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Packaging), input_name='Packaging')), namespaceprefix_ , eol_))
        if self.Pieces is not None:
            namespaceprefix_ = self.Pieces_nsprefix_ + ':' if (UseCapturedNS_ and self.Pieces_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPieces>%s</%sPieces>%s' % (namespaceprefix_ , self.gds_format_integer(self.Pieces, input_name='Pieces'), namespaceprefix_ , eol_))
        if self.NmfcCode is not None:
            namespaceprefix_ = self.NmfcCode_nsprefix_ + ':' if (UseCapturedNS_ and self.NmfcCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNmfcCode>%s</%sNmfcCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NmfcCode), input_name='NmfcCode')), namespaceprefix_ , eol_))
        if self.HazardousMaterials is not None:
            namespaceprefix_ = self.HazardousMaterials_nsprefix_ + ':' if (UseCapturedNS_ and self.HazardousMaterials_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHazardousMaterials>%s</%sHazardousMaterials>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HazardousMaterials), input_name='HazardousMaterials')), namespaceprefix_ , eol_))
        if self.PurchaseOrderNumber is not None:
            namespaceprefix_ = self.PurchaseOrderNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PurchaseOrderNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchaseOrderNumber>%s</%sPurchaseOrderNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PurchaseOrderNumber), input_name='PurchaseOrderNumber')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.Weight is not None:
            namespaceprefix_ = self.Weight_nsprefix_ + ':' if (UseCapturedNS_ and self.Weight_nsprefix_) else ''
            self.Weight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Weight', pretty_print=pretty_print)
        if self.Dimensions is not None:
            namespaceprefix_ = self.Dimensions_nsprefix_ + ':' if (UseCapturedNS_ and self.Dimensions_nsprefix_) else ''
            self.Dimensions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Dimensions', pretty_print=pretty_print)
        if self.Volume is not None:
            namespaceprefix_ = self.Volume_nsprefix_ + ':' if (UseCapturedNS_ and self.Volume_nsprefix_) else ''
            self.Volume.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Volume', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Id':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Id')
            value_ = self.gds_validate_string(value_, node, 'Id')
            self.Id = value_
            self.Id_nsprefix_ = child_.prefix
        elif nodeName_ == 'FreightClass':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FreightClass')
            value_ = self.gds_validate_string(value_, node, 'FreightClass')
            self.FreightClass = value_
            self.FreightClass_nsprefix_ = child_.prefix
            # validate type FreightClassType
            self.validate_FreightClassType(self.FreightClass)
        elif nodeName_ == 'ClassProvidedByCustomer':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ClassProvidedByCustomer')
            ival_ = self.gds_validate_boolean(ival_, node, 'ClassProvidedByCustomer')
            self.ClassProvidedByCustomer = ival_
            self.ClassProvidedByCustomer_nsprefix_ = child_.prefix
        elif nodeName_ == 'HandlingUnits' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'HandlingUnits')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'HandlingUnits')
            self.HandlingUnits = ival_
            self.HandlingUnits_nsprefix_ = child_.prefix
        elif nodeName_ == 'Packaging':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Packaging')
            value_ = self.gds_validate_string(value_, node, 'Packaging')
            self.Packaging = value_
            self.Packaging_nsprefix_ = child_.prefix
            # validate type PhysicalPackagingType
            self.validate_PhysicalPackagingType(self.Packaging)
        elif nodeName_ == 'Pieces' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Pieces')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Pieces')
            self.Pieces = ival_
            self.Pieces_nsprefix_ = child_.prefix
        elif nodeName_ == 'NmfcCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NmfcCode')
            value_ = self.gds_validate_string(value_, node, 'NmfcCode')
            self.NmfcCode = value_
            self.NmfcCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'HazardousMaterials':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HazardousMaterials')
            value_ = self.gds_validate_string(value_, node, 'HazardousMaterials')
            self.HazardousMaterials = value_
            self.HazardousMaterials_nsprefix_ = child_.prefix
            # validate type HazardousCommodityOptionType
            self.validate_HazardousCommodityOptionType(self.HazardousMaterials)
        elif nodeName_ == 'PurchaseOrderNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PurchaseOrderNumber')
            value_ = self.gds_validate_string(value_, node, 'PurchaseOrderNumber')
            self.PurchaseOrderNumber = value_
            self.PurchaseOrderNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'Weight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
        elif nodeName_ == 'Dimensions':
            obj_ = Dimensions.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
        elif nodeName_ == 'Volume':
            obj_ = Volume.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Volume = obj_
            obj_.original_tagname_ = 'Volume'
# end class FreightShipmentLineItem


class FreightSpecialServicePayment(GeneratedsSuper):
    """Specifies which party will be responsible for payment of any surcharges
    for Freight special services for which split billing is allowed."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SpecialService=None, PaymentType=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.SpecialService = SpecialService
        self.SpecialService_nsprefix_ = None
        self.PaymentType = PaymentType
        self.validate_FreightShipmentRoleType(self.PaymentType)
        self.PaymentType_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightSpecialServicePayment)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightSpecialServicePayment.subclass:
            return FreightSpecialServicePayment.subclass(*args_, **kwargs_)
        else:
            return FreightSpecialServicePayment(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SpecialService(self):
        return self.SpecialService
    def set_SpecialService(self, SpecialService):
        self.SpecialService = SpecialService
    def get_PaymentType(self):
        return self.PaymentType
    def set_PaymentType(self, PaymentType):
        self.PaymentType = PaymentType
    def validate_FreightShipmentRoleType(self, value):
        result = True
        # Validate type FreightShipmentRoleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CONSIGNEE', 'SHIPPER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FreightShipmentRoleType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.SpecialService is not None or
            self.PaymentType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightSpecialServicePayment', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightSpecialServicePayment')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightSpecialServicePayment':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightSpecialServicePayment')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightSpecialServicePayment', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightSpecialServicePayment'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightSpecialServicePayment', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SpecialService is not None:
            namespaceprefix_ = self.SpecialService_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialService_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialService>%s</%sSpecialService>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SpecialService), input_name='SpecialService')), namespaceprefix_ , eol_))
        if self.PaymentType is not None:
            namespaceprefix_ = self.PaymentType_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentType>%s</%sPaymentType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PaymentType), input_name='PaymentType')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SpecialService':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecialService')
            value_ = self.gds_validate_string(value_, node, 'SpecialService')
            self.SpecialService = value_
            self.SpecialService_nsprefix_ = child_.prefix
        elif nodeName_ == 'PaymentType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PaymentType')
            value_ = self.gds_validate_string(value_, node, 'PaymentType')
            self.PaymentType = value_
            self.PaymentType_nsprefix_ = child_.prefix
            # validate type FreightShipmentRoleType
            self.validate_FreightShipmentRoleType(self.PaymentType)
# end class FreightSpecialServicePayment


class GeneralAgencyAgreementDetail(GeneratedsSuper):
    """Data required to produce a General Agency Agreement document. Remaining
    content (business data) to be defined once requirements have been
    completed."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Format=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Format = Format
        self.Format_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GeneralAgencyAgreementDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GeneralAgencyAgreementDetail.subclass:
            return GeneralAgencyAgreementDetail.subclass(*args_, **kwargs_)
        else:
            return GeneralAgencyAgreementDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Format(self):
        return self.Format
    def set_Format(self, Format):
        self.Format = Format
    def hasContent_(self):
        if (
            self.Format is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralAgencyAgreementDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GeneralAgencyAgreementDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GeneralAgencyAgreementDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GeneralAgencyAgreementDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GeneralAgencyAgreementDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='GeneralAgencyAgreementDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='GeneralAgencyAgreementDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Format is not None:
            namespaceprefix_ = self.Format_nsprefix_ + ':' if (UseCapturedNS_ and self.Format_nsprefix_) else ''
            self.Format.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Format', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Format':
            obj_ = ShippingDocumentFormat.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Format = obj_
            obj_.original_tagname_ = 'Format'
# end class GeneralAgencyAgreementDetail


class HazardousCommodityContent(GeneratedsSuper):
    """Documents the kind and quantity of an individual hazardous commodity in
    a package."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Description=None, Quantity=None, InnerReceptacles=None, Options=None, RadionuclideDetail=None, NetExplosiveDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.Quantity = Quantity
        self.Quantity_nsprefix_ = None
        if InnerReceptacles is None:
            self.InnerReceptacles = []
        else:
            self.InnerReceptacles = InnerReceptacles
        self.InnerReceptacles_nsprefix_ = None
        self.Options = Options
        self.Options_nsprefix_ = None
        self.RadionuclideDetail = RadionuclideDetail
        self.RadionuclideDetail_nsprefix_ = None
        self.NetExplosiveDetail = NetExplosiveDetail
        self.NetExplosiveDetail_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HazardousCommodityContent)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HazardousCommodityContent.subclass:
            return HazardousCommodityContent.subclass(*args_, **kwargs_)
        else:
            return HazardousCommodityContent(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_InnerReceptacles(self):
        return self.InnerReceptacles
    def set_InnerReceptacles(self, InnerReceptacles):
        self.InnerReceptacles = InnerReceptacles
    def add_InnerReceptacles(self, value):
        self.InnerReceptacles.append(value)
    def insert_InnerReceptacles_at(self, index, value):
        self.InnerReceptacles.insert(index, value)
    def replace_InnerReceptacles_at(self, index, value):
        self.InnerReceptacles[index] = value
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def get_RadionuclideDetail(self):
        return self.RadionuclideDetail
    def set_RadionuclideDetail(self, RadionuclideDetail):
        self.RadionuclideDetail = RadionuclideDetail
    def get_NetExplosiveDetail(self):
        return self.NetExplosiveDetail
    def set_NetExplosiveDetail(self, NetExplosiveDetail):
        self.NetExplosiveDetail = NetExplosiveDetail
    def hasContent_(self):
        if (
            self.Description is not None or
            self.Quantity is not None or
            self.InnerReceptacles or
            self.Options is not None or
            self.RadionuclideDetail is not None or
            self.NetExplosiveDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazardousCommodityContent', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HazardousCommodityContent')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HazardousCommodityContent':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HazardousCommodityContent')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HazardousCommodityContent', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HazardousCommodityContent'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazardousCommodityContent', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            self.Description.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Description', pretty_print=pretty_print)
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            self.Quantity.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Quantity', pretty_print=pretty_print)
        for InnerReceptacles_ in self.InnerReceptacles:
            namespaceprefix_ = self.InnerReceptacles_nsprefix_ + ':' if (UseCapturedNS_ and self.InnerReceptacles_nsprefix_) else ''
            InnerReceptacles_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InnerReceptacles', pretty_print=pretty_print)
        if self.Options is not None:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            self.Options.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Options', pretty_print=pretty_print)
        if self.RadionuclideDetail is not None:
            namespaceprefix_ = self.RadionuclideDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.RadionuclideDetail_nsprefix_) else ''
            self.RadionuclideDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RadionuclideDetail', pretty_print=pretty_print)
        if self.NetExplosiveDetail is not None:
            namespaceprefix_ = self.NetExplosiveDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.NetExplosiveDetail_nsprefix_) else ''
            self.NetExplosiveDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NetExplosiveDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Description':
            obj_ = HazardousCommodityDescription.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Quantity':
            obj_ = HazardousCommodityQuantityDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Quantity = obj_
            obj_.original_tagname_ = 'Quantity'
        elif nodeName_ == 'InnerReceptacles':
            obj_ = HazardousCommodityInnerReceptacleDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InnerReceptacles.append(obj_)
            obj_.original_tagname_ = 'InnerReceptacles'
        elif nodeName_ == 'Options':
            obj_ = HazardousCommodityOptionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Options = obj_
            obj_.original_tagname_ = 'Options'
        elif nodeName_ == 'RadionuclideDetail':
            obj_ = RadionuclideDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RadionuclideDetail = obj_
            obj_.original_tagname_ = 'RadionuclideDetail'
        elif nodeName_ == 'NetExplosiveDetail':
            obj_ = NetExplosiveDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NetExplosiveDetail = obj_
            obj_.original_tagname_ = 'NetExplosiveDetail'
# end class HazardousCommodityContent


class HazardousCommodityDescription(GeneratedsSuper):
    """Identifies and describes an individual hazardous commodity."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, SequenceNumber=None, PackingGroup=None, PackingDetails=None, ReportableQuantity=None, ProperShippingName=None, TechnicalName=None, Percentage=None, HazardClass=None, SubsidiaryClasses=None, LabelText=None, ProcessingOptions=None, Authorization=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Id = Id
        self.Id_nsprefix_ = None
        self.SequenceNumber = SequenceNumber
        self.SequenceNumber_nsprefix_ = None
        self.PackingGroup = PackingGroup
        self.validate_HazardousCommodityPackingGroupType(self.PackingGroup)
        self.PackingGroup_nsprefix_ = None
        self.PackingDetails = PackingDetails
        self.PackingDetails_nsprefix_ = None
        self.ReportableQuantity = ReportableQuantity
        self.ReportableQuantity_nsprefix_ = None
        self.ProperShippingName = ProperShippingName
        self.ProperShippingName_nsprefix_ = None
        self.TechnicalName = TechnicalName
        self.TechnicalName_nsprefix_ = None
        self.Percentage = Percentage
        self.Percentage_nsprefix_ = None
        self.HazardClass = HazardClass
        self.HazardClass_nsprefix_ = None
        if SubsidiaryClasses is None:
            self.SubsidiaryClasses = []
        else:
            self.SubsidiaryClasses = SubsidiaryClasses
        self.SubsidiaryClasses_nsprefix_ = None
        self.LabelText = LabelText
        self.LabelText_nsprefix_ = None
        if ProcessingOptions is None:
            self.ProcessingOptions = []
        else:
            self.ProcessingOptions = ProcessingOptions
        self.ProcessingOptions_nsprefix_ = None
        self.Authorization = Authorization
        self.Authorization_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HazardousCommodityDescription)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HazardousCommodityDescription.subclass:
            return HazardousCommodityDescription.subclass(*args_, **kwargs_)
        else:
            return HazardousCommodityDescription(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_SequenceNumber(self):
        return self.SequenceNumber
    def set_SequenceNumber(self, SequenceNumber):
        self.SequenceNumber = SequenceNumber
    def get_PackingGroup(self):
        return self.PackingGroup
    def set_PackingGroup(self, PackingGroup):
        self.PackingGroup = PackingGroup
    def get_PackingDetails(self):
        return self.PackingDetails
    def set_PackingDetails(self, PackingDetails):
        self.PackingDetails = PackingDetails
    def get_ReportableQuantity(self):
        return self.ReportableQuantity
    def set_ReportableQuantity(self, ReportableQuantity):
        self.ReportableQuantity = ReportableQuantity
    def get_ProperShippingName(self):
        return self.ProperShippingName
    def set_ProperShippingName(self, ProperShippingName):
        self.ProperShippingName = ProperShippingName
    def get_TechnicalName(self):
        return self.TechnicalName
    def set_TechnicalName(self, TechnicalName):
        self.TechnicalName = TechnicalName
    def get_Percentage(self):
        return self.Percentage
    def set_Percentage(self, Percentage):
        self.Percentage = Percentage
    def get_HazardClass(self):
        return self.HazardClass
    def set_HazardClass(self, HazardClass):
        self.HazardClass = HazardClass
    def get_SubsidiaryClasses(self):
        return self.SubsidiaryClasses
    def set_SubsidiaryClasses(self, SubsidiaryClasses):
        self.SubsidiaryClasses = SubsidiaryClasses
    def add_SubsidiaryClasses(self, value):
        self.SubsidiaryClasses.append(value)
    def insert_SubsidiaryClasses_at(self, index, value):
        self.SubsidiaryClasses.insert(index, value)
    def replace_SubsidiaryClasses_at(self, index, value):
        self.SubsidiaryClasses[index] = value
    def get_LabelText(self):
        return self.LabelText
    def set_LabelText(self, LabelText):
        self.LabelText = LabelText
    def get_ProcessingOptions(self):
        return self.ProcessingOptions
    def set_ProcessingOptions(self, ProcessingOptions):
        self.ProcessingOptions = ProcessingOptions
    def add_ProcessingOptions(self, value):
        self.ProcessingOptions.append(value)
    def insert_ProcessingOptions_at(self, index, value):
        self.ProcessingOptions.insert(index, value)
    def replace_ProcessingOptions_at(self, index, value):
        self.ProcessingOptions[index] = value
    def get_Authorization(self):
        return self.Authorization
    def set_Authorization(self, Authorization):
        self.Authorization = Authorization
    def validate_HazardousCommodityPackingGroupType(self, value):
        result = True
        # Validate type HazardousCommodityPackingGroupType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DEFAULT', 'I', 'II', 'III']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on HazardousCommodityPackingGroupType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_HazardousCommodityDescriptionProcessingOptionType(self, value):
        result = True
        # Validate type HazardousCommodityDescriptionProcessingOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['INCLUDE_SPECIAL_PROVISIONS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on HazardousCommodityDescriptionProcessingOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Id is not None or
            self.SequenceNumber is not None or
            self.PackingGroup is not None or
            self.PackingDetails is not None or
            self.ReportableQuantity is not None or
            self.ProperShippingName is not None or
            self.TechnicalName is not None or
            self.Percentage is not None or
            self.HazardClass is not None or
            self.SubsidiaryClasses or
            self.LabelText is not None or
            self.ProcessingOptions or
            self.Authorization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazardousCommodityDescription', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HazardousCommodityDescription')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HazardousCommodityDescription':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HazardousCommodityDescription')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HazardousCommodityDescription', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HazardousCommodityDescription'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazardousCommodityDescription', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Id is not None:
            namespaceprefix_ = self.Id_nsprefix_ + ':' if (UseCapturedNS_ and self.Id_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sId>%s</%sId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), namespaceprefix_ , eol_))
        if self.SequenceNumber is not None:
            namespaceprefix_ = self.SequenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.SequenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSequenceNumber>%s</%sSequenceNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.SequenceNumber, input_name='SequenceNumber'), namespaceprefix_ , eol_))
        if self.PackingGroup is not None:
            namespaceprefix_ = self.PackingGroup_nsprefix_ + ':' if (UseCapturedNS_ and self.PackingGroup_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingGroup>%s</%sPackingGroup>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PackingGroup), input_name='PackingGroup')), namespaceprefix_ , eol_))
        if self.PackingDetails is not None:
            namespaceprefix_ = self.PackingDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.PackingDetails_nsprefix_) else ''
            self.PackingDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackingDetails', pretty_print=pretty_print)
        if self.ReportableQuantity is not None:
            namespaceprefix_ = self.ReportableQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.ReportableQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReportableQuantity>%s</%sReportableQuantity>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ReportableQuantity, input_name='ReportableQuantity'), namespaceprefix_ , eol_))
        if self.ProperShippingName is not None:
            namespaceprefix_ = self.ProperShippingName_nsprefix_ + ':' if (UseCapturedNS_ and self.ProperShippingName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProperShippingName>%s</%sProperShippingName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProperShippingName), input_name='ProperShippingName')), namespaceprefix_ , eol_))
        if self.TechnicalName is not None:
            namespaceprefix_ = self.TechnicalName_nsprefix_ + ':' if (UseCapturedNS_ and self.TechnicalName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTechnicalName>%s</%sTechnicalName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TechnicalName), input_name='TechnicalName')), namespaceprefix_ , eol_))
        if self.Percentage is not None:
            namespaceprefix_ = self.Percentage_nsprefix_ + ':' if (UseCapturedNS_ and self.Percentage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPercentage>%s</%sPercentage>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Percentage, input_name='Percentage'), namespaceprefix_ , eol_))
        if self.HazardClass is not None:
            namespaceprefix_ = self.HazardClass_nsprefix_ + ':' if (UseCapturedNS_ and self.HazardClass_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHazardClass>%s</%sHazardClass>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HazardClass), input_name='HazardClass')), namespaceprefix_ , eol_))
        for SubsidiaryClasses_ in self.SubsidiaryClasses:
            namespaceprefix_ = self.SubsidiaryClasses_nsprefix_ + ':' if (UseCapturedNS_ and self.SubsidiaryClasses_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSubsidiaryClasses>%s</%sSubsidiaryClasses>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(SubsidiaryClasses_), input_name='SubsidiaryClasses')), namespaceprefix_ , eol_))
        if self.LabelText is not None:
            namespaceprefix_ = self.LabelText_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelText_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelText>%s</%sLabelText>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LabelText), input_name='LabelText')), namespaceprefix_ , eol_))
        for ProcessingOptions_ in self.ProcessingOptions:
            namespaceprefix_ = self.ProcessingOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.ProcessingOptions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProcessingOptions>%s</%sProcessingOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(ProcessingOptions_), input_name='ProcessingOptions')), namespaceprefix_ , eol_))
        if self.Authorization is not None:
            namespaceprefix_ = self.Authorization_nsprefix_ + ':' if (UseCapturedNS_ and self.Authorization_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthorization>%s</%sAuthorization>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Authorization), input_name='Authorization')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Id':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Id')
            value_ = self.gds_validate_string(value_, node, 'Id')
            self.Id = value_
            self.Id_nsprefix_ = child_.prefix
        elif nodeName_ == 'SequenceNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'SequenceNumber')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'SequenceNumber')
            self.SequenceNumber = ival_
            self.SequenceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'PackingGroup':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackingGroup')
            value_ = self.gds_validate_string(value_, node, 'PackingGroup')
            self.PackingGroup = value_
            self.PackingGroup_nsprefix_ = child_.prefix
            # validate type HazardousCommodityPackingGroupType
            self.validate_HazardousCommodityPackingGroupType(self.PackingGroup)
        elif nodeName_ == 'PackingDetails':
            obj_ = HazardousCommodityPackingDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackingDetails = obj_
            obj_.original_tagname_ = 'PackingDetails'
        elif nodeName_ == 'ReportableQuantity':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ReportableQuantity')
            ival_ = self.gds_validate_boolean(ival_, node, 'ReportableQuantity')
            self.ReportableQuantity = ival_
            self.ReportableQuantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'ProperShippingName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProperShippingName')
            value_ = self.gds_validate_string(value_, node, 'ProperShippingName')
            self.ProperShippingName = value_
            self.ProperShippingName_nsprefix_ = child_.prefix
        elif nodeName_ == 'TechnicalName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TechnicalName')
            value_ = self.gds_validate_string(value_, node, 'TechnicalName')
            self.TechnicalName = value_
            self.TechnicalName_nsprefix_ = child_.prefix
        elif nodeName_ == 'Percentage' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Percentage')
            fval_ = self.gds_validate_decimal(fval_, node, 'Percentage')
            self.Percentage = fval_
            self.Percentage_nsprefix_ = child_.prefix
        elif nodeName_ == 'HazardClass':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HazardClass')
            value_ = self.gds_validate_string(value_, node, 'HazardClass')
            self.HazardClass = value_
            self.HazardClass_nsprefix_ = child_.prefix
        elif nodeName_ == 'SubsidiaryClasses':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SubsidiaryClasses')
            value_ = self.gds_validate_string(value_, node, 'SubsidiaryClasses')
            self.SubsidiaryClasses.append(value_)
            self.SubsidiaryClasses_nsprefix_ = child_.prefix
        elif nodeName_ == 'LabelText':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelText')
            value_ = self.gds_validate_string(value_, node, 'LabelText')
            self.LabelText = value_
            self.LabelText_nsprefix_ = child_.prefix
        elif nodeName_ == 'ProcessingOptions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProcessingOptions')
            value_ = self.gds_validate_string(value_, node, 'ProcessingOptions')
            self.ProcessingOptions.append(value_)
            self.ProcessingOptions_nsprefix_ = child_.prefix
            # validate type HazardousCommodityDescriptionProcessingOptionType
            self.validate_HazardousCommodityDescriptionProcessingOptionType(self.ProcessingOptions[-1])
        elif nodeName_ == 'Authorization':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Authorization')
            value_ = self.gds_validate_string(value_, node, 'Authorization')
            self.Authorization = value_
            self.Authorization_nsprefix_ = child_.prefix
# end class HazardousCommodityDescription


class HazardousCommodityInnerReceptacleDetail(GeneratedsSuper):
    """This describes information about the inner receptacles for the hazardous
    commodity in a particular dangerous goods container."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Quantity=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Quantity = Quantity
        self.Quantity_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HazardousCommodityInnerReceptacleDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HazardousCommodityInnerReceptacleDetail.subclass:
            return HazardousCommodityInnerReceptacleDetail.subclass(*args_, **kwargs_)
        else:
            return HazardousCommodityInnerReceptacleDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def hasContent_(self):
        if (
            self.Quantity is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazardousCommodityInnerReceptacleDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HazardousCommodityInnerReceptacleDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HazardousCommodityInnerReceptacleDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HazardousCommodityInnerReceptacleDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HazardousCommodityInnerReceptacleDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HazardousCommodityInnerReceptacleDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazardousCommodityInnerReceptacleDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            self.Quantity.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Quantity', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Quantity':
            obj_ = HazardousCommodityQuantityDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Quantity = obj_
            obj_.original_tagname_ = 'Quantity'
# end class HazardousCommodityInnerReceptacleDetail


class HazardousCommodityOptionDetail(GeneratedsSuper):
    """Customer-provided specifications for handling individual commodities."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LabelTextOption=None, CustomerSuppliedLabelText=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.LabelTextOption = LabelTextOption
        self.validate_HazardousCommodityLabelTextOptionType(self.LabelTextOption)
        self.LabelTextOption_nsprefix_ = None
        self.CustomerSuppliedLabelText = CustomerSuppliedLabelText
        self.CustomerSuppliedLabelText_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HazardousCommodityOptionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HazardousCommodityOptionDetail.subclass:
            return HazardousCommodityOptionDetail.subclass(*args_, **kwargs_)
        else:
            return HazardousCommodityOptionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LabelTextOption(self):
        return self.LabelTextOption
    def set_LabelTextOption(self, LabelTextOption):
        self.LabelTextOption = LabelTextOption
    def get_CustomerSuppliedLabelText(self):
        return self.CustomerSuppliedLabelText
    def set_CustomerSuppliedLabelText(self, CustomerSuppliedLabelText):
        self.CustomerSuppliedLabelText = CustomerSuppliedLabelText
    def validate_HazardousCommodityLabelTextOptionType(self, value):
        result = True
        # Validate type HazardousCommodityLabelTextOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['APPEND', 'OVERRIDE', 'STANDARD']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on HazardousCommodityLabelTextOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.LabelTextOption is not None or
            self.CustomerSuppliedLabelText is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazardousCommodityOptionDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HazardousCommodityOptionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HazardousCommodityOptionDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HazardousCommodityOptionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HazardousCommodityOptionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HazardousCommodityOptionDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazardousCommodityOptionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LabelTextOption is not None:
            namespaceprefix_ = self.LabelTextOption_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelTextOption_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelTextOption>%s</%sLabelTextOption>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LabelTextOption), input_name='LabelTextOption')), namespaceprefix_ , eol_))
        if self.CustomerSuppliedLabelText is not None:
            namespaceprefix_ = self.CustomerSuppliedLabelText_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerSuppliedLabelText_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomerSuppliedLabelText>%s</%sCustomerSuppliedLabelText>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomerSuppliedLabelText), input_name='CustomerSuppliedLabelText')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LabelTextOption':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelTextOption')
            value_ = self.gds_validate_string(value_, node, 'LabelTextOption')
            self.LabelTextOption = value_
            self.LabelTextOption_nsprefix_ = child_.prefix
            # validate type HazardousCommodityLabelTextOptionType
            self.validate_HazardousCommodityLabelTextOptionType(self.LabelTextOption)
        elif nodeName_ == 'CustomerSuppliedLabelText':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomerSuppliedLabelText')
            value_ = self.gds_validate_string(value_, node, 'CustomerSuppliedLabelText')
            self.CustomerSuppliedLabelText = value_
            self.CustomerSuppliedLabelText_nsprefix_ = child_.prefix
# end class HazardousCommodityOptionDetail


class HazardousCommodityPackagingDetail(GeneratedsSuper):
    """Identifies number and type of packaging units for hazardous
    commodities."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Count=None, Units=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Count = Count
        self.Count_nsprefix_ = None
        self.Units = Units
        self.Units_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HazardousCommodityPackagingDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HazardousCommodityPackagingDetail.subclass:
            return HazardousCommodityPackagingDetail.subclass(*args_, **kwargs_)
        else:
            return HazardousCommodityPackagingDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Count(self):
        return self.Count
    def set_Count(self, Count):
        self.Count = Count
    def get_Units(self):
        return self.Units
    def set_Units(self, Units):
        self.Units = Units
    def hasContent_(self):
        if (
            self.Count is not None or
            self.Units is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazardousCommodityPackagingDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HazardousCommodityPackagingDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HazardousCommodityPackagingDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HazardousCommodityPackagingDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HazardousCommodityPackagingDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HazardousCommodityPackagingDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazardousCommodityPackagingDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Count is not None:
            namespaceprefix_ = self.Count_nsprefix_ + ':' if (UseCapturedNS_ and self.Count_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCount>%s</%sCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.Count, input_name='Count'), namespaceprefix_ , eol_))
        if self.Units is not None:
            namespaceprefix_ = self.Units_nsprefix_ + ':' if (UseCapturedNS_ and self.Units_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnits>%s</%sUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Count' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Count')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Count')
            self.Count = ival_
            self.Count_nsprefix_ = child_.prefix
        elif nodeName_ == 'Units':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Units')
            value_ = self.gds_validate_string(value_, node, 'Units')
            self.Units = value_
            self.Units_nsprefix_ = child_.prefix
# end class HazardousCommodityPackagingDetail


class HazardousCommodityPackingDetail(GeneratedsSuper):
    """Specifies documentation and limits for validation of an individual
    packing group/category."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CargoAircraftOnly=None, PackingInstructions=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CargoAircraftOnly = CargoAircraftOnly
        self.CargoAircraftOnly_nsprefix_ = None
        self.PackingInstructions = PackingInstructions
        self.PackingInstructions_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HazardousCommodityPackingDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HazardousCommodityPackingDetail.subclass:
            return HazardousCommodityPackingDetail.subclass(*args_, **kwargs_)
        else:
            return HazardousCommodityPackingDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CargoAircraftOnly(self):
        return self.CargoAircraftOnly
    def set_CargoAircraftOnly(self, CargoAircraftOnly):
        self.CargoAircraftOnly = CargoAircraftOnly
    def get_PackingInstructions(self):
        return self.PackingInstructions
    def set_PackingInstructions(self, PackingInstructions):
        self.PackingInstructions = PackingInstructions
    def hasContent_(self):
        if (
            self.CargoAircraftOnly is not None or
            self.PackingInstructions is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazardousCommodityPackingDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HazardousCommodityPackingDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HazardousCommodityPackingDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HazardousCommodityPackingDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HazardousCommodityPackingDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HazardousCommodityPackingDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazardousCommodityPackingDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CargoAircraftOnly is not None:
            namespaceprefix_ = self.CargoAircraftOnly_nsprefix_ + ':' if (UseCapturedNS_ and self.CargoAircraftOnly_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCargoAircraftOnly>%s</%sCargoAircraftOnly>%s' % (namespaceprefix_ , self.gds_format_boolean(self.CargoAircraftOnly, input_name='CargoAircraftOnly'), namespaceprefix_ , eol_))
        if self.PackingInstructions is not None:
            namespaceprefix_ = self.PackingInstructions_nsprefix_ + ':' if (UseCapturedNS_ and self.PackingInstructions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingInstructions>%s</%sPackingInstructions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PackingInstructions), input_name='PackingInstructions')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CargoAircraftOnly':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'CargoAircraftOnly')
            ival_ = self.gds_validate_boolean(ival_, node, 'CargoAircraftOnly')
            self.CargoAircraftOnly = ival_
            self.CargoAircraftOnly_nsprefix_ = child_.prefix
        elif nodeName_ == 'PackingInstructions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackingInstructions')
            value_ = self.gds_validate_string(value_, node, 'PackingInstructions')
            self.PackingInstructions = value_
            self.PackingInstructions_nsprefix_ = child_.prefix
# end class HazardousCommodityPackingDetail


class HazardousCommodityQuantityDetail(GeneratedsSuper):
    """Identifies amount and units for quantity of hazardous commodities."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Amount=None, Units=None, QuantityType=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Amount = Amount
        self.Amount_nsprefix_ = None
        self.Units = Units
        self.Units_nsprefix_ = None
        self.QuantityType = QuantityType
        self.validate_HazardousCommodityQuantityType(self.QuantityType)
        self.QuantityType_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HazardousCommodityQuantityDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HazardousCommodityQuantityDetail.subclass:
            return HazardousCommodityQuantityDetail.subclass(*args_, **kwargs_)
        else:
            return HazardousCommodityQuantityDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Amount(self):
        return self.Amount
    def set_Amount(self, Amount):
        self.Amount = Amount
    def get_Units(self):
        return self.Units
    def set_Units(self, Units):
        self.Units = Units
    def get_QuantityType(self):
        return self.QuantityType
    def set_QuantityType(self, QuantityType):
        self.QuantityType = QuantityType
    def validate_HazardousCommodityQuantityType(self, value):
        result = True
        # Validate type HazardousCommodityQuantityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['GROSS', 'NET']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on HazardousCommodityQuantityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Amount is not None or
            self.Units is not None or
            self.QuantityType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazardousCommodityQuantityDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HazardousCommodityQuantityDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HazardousCommodityQuantityDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HazardousCommodityQuantityDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HazardousCommodityQuantityDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HazardousCommodityQuantityDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HazardousCommodityQuantityDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Amount is not None:
            namespaceprefix_ = self.Amount_nsprefix_ + ':' if (UseCapturedNS_ and self.Amount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAmount>%s</%sAmount>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Amount, input_name='Amount'), namespaceprefix_ , eol_))
        if self.Units is not None:
            namespaceprefix_ = self.Units_nsprefix_ + ':' if (UseCapturedNS_ and self.Units_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnits>%s</%sUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), namespaceprefix_ , eol_))
        if self.QuantityType is not None:
            namespaceprefix_ = self.QuantityType_nsprefix_ + ':' if (UseCapturedNS_ and self.QuantityType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityType>%s</%sQuantityType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QuantityType), input_name='QuantityType')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Amount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Amount')
            fval_ = self.gds_validate_decimal(fval_, node, 'Amount')
            self.Amount = fval_
            self.Amount_nsprefix_ = child_.prefix
        elif nodeName_ == 'Units':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Units')
            value_ = self.gds_validate_string(value_, node, 'Units')
            self.Units = value_
            self.Units_nsprefix_ = child_.prefix
        elif nodeName_ == 'QuantityType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'QuantityType')
            value_ = self.gds_validate_string(value_, node, 'QuantityType')
            self.QuantityType = value_
            self.QuantityType_nsprefix_ = child_.prefix
            # validate type HazardousCommodityQuantityType
            self.validate_HazardousCommodityQuantityType(self.QuantityType)
# end class HazardousCommodityQuantityDetail


class HoldAtLocationDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PhoneNumber=None, LocationContactAndAddress=None, LocationType=None, LocationId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PhoneNumber = PhoneNumber
        self.PhoneNumber_nsprefix_ = None
        self.LocationContactAndAddress = LocationContactAndAddress
        self.LocationContactAndAddress_nsprefix_ = None
        self.LocationType = LocationType
        self.validate_FedExLocationType(self.LocationType)
        self.LocationType_nsprefix_ = None
        self.LocationId = LocationId
        self.LocationId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HoldAtLocationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HoldAtLocationDetail.subclass:
            return HoldAtLocationDetail.subclass(*args_, **kwargs_)
        else:
            return HoldAtLocationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PhoneNumber(self):
        return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber):
        self.PhoneNumber = PhoneNumber
    def get_LocationContactAndAddress(self):
        return self.LocationContactAndAddress
    def set_LocationContactAndAddress(self, LocationContactAndAddress):
        self.LocationContactAndAddress = LocationContactAndAddress
    def get_LocationType(self):
        return self.LocationType
    def set_LocationType(self, LocationType):
        self.LocationType = LocationType
    def get_LocationId(self):
        return self.LocationId
    def set_LocationId(self, LocationId):
        self.LocationId = LocationId
    def validate_FedExLocationType(self, value):
        result = True
        # Validate type FedExLocationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_AUTHORIZED_SHIP_CENTER', 'FEDEX_EXPRESS_STATION', 'FEDEX_FACILITY', 'FEDEX_FREIGHT_SERVICE_CENTER', 'FEDEX_GROUND_TERMINAL', 'FEDEX_HOME_DELIVERY_STATION', 'FEDEX_OFFICE', 'FEDEX_ONSITE', 'FEDEX_SELF_SERVICE_LOCATION', 'FEDEX_SHIPSITE', 'FEDEX_SHIP_AND_GET', 'FEDEX_SMART_POST_HUB']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FedExLocationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.PhoneNumber is not None or
            self.LocationContactAndAddress is not None or
            self.LocationType is not None or
            self.LocationId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HoldAtLocationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HoldAtLocationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HoldAtLocationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HoldAtLocationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HoldAtLocationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HoldAtLocationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HoldAtLocationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PhoneNumber is not None:
            namespaceprefix_ = self.PhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhoneNumber>%s</%sPhoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), namespaceprefix_ , eol_))
        if self.LocationContactAndAddress is not None:
            namespaceprefix_ = self.LocationContactAndAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.LocationContactAndAddress_nsprefix_) else ''
            self.LocationContactAndAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LocationContactAndAddress', pretty_print=pretty_print)
        if self.LocationType is not None:
            namespaceprefix_ = self.LocationType_nsprefix_ + ':' if (UseCapturedNS_ and self.LocationType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationType>%s</%sLocationType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocationType), input_name='LocationType')), namespaceprefix_ , eol_))
        if self.LocationId is not None:
            namespaceprefix_ = self.LocationId_nsprefix_ + ':' if (UseCapturedNS_ and self.LocationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationId>%s</%sLocationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocationId), input_name='LocationId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PhoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhoneNumber')
            value_ = self.gds_validate_string(value_, node, 'PhoneNumber')
            self.PhoneNumber = value_
            self.PhoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocationContactAndAddress':
            obj_ = ContactAndAddress.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LocationContactAndAddress = obj_
            obj_.original_tagname_ = 'LocationContactAndAddress'
        elif nodeName_ == 'LocationType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocationType')
            value_ = self.gds_validate_string(value_, node, 'LocationType')
            self.LocationType = value_
            self.LocationType_nsprefix_ = child_.prefix
            # validate type FedExLocationType
            self.validate_FedExLocationType(self.LocationType)
        elif nodeName_ == 'LocationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocationId')
            value_ = self.gds_validate_string(value_, node, 'LocationId')
            self.LocationId = value_
            self.LocationId_nsprefix_ = child_.prefix
# end class HoldAtLocationDetail


class HomeDeliveryPremiumDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HomeDeliveryPremiumType=None, Date=None, PhoneNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HomeDeliveryPremiumType = HomeDeliveryPremiumType
        self.validate_HomeDeliveryPremiumType(self.HomeDeliveryPremiumType)
        self.HomeDeliveryPremiumType_nsprefix_ = None
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.Date_nsprefix_ = None
        self.PhoneNumber = PhoneNumber
        self.PhoneNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HomeDeliveryPremiumDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HomeDeliveryPremiumDetail.subclass:
            return HomeDeliveryPremiumDetail.subclass(*args_, **kwargs_)
        else:
            return HomeDeliveryPremiumDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HomeDeliveryPremiumType(self):
        return self.HomeDeliveryPremiumType
    def set_HomeDeliveryPremiumType(self, HomeDeliveryPremiumType):
        self.HomeDeliveryPremiumType = HomeDeliveryPremiumType
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_PhoneNumber(self):
        return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber):
        self.PhoneNumber = PhoneNumber
    def validate_HomeDeliveryPremiumType(self, value):
        result = True
        # Validate type HomeDeliveryPremiumType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['APPOINTMENT', 'DATE_CERTAIN', 'EVENING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on HomeDeliveryPremiumType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.HomeDeliveryPremiumType is not None or
            self.Date is not None or
            self.PhoneNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HomeDeliveryPremiumDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HomeDeliveryPremiumDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HomeDeliveryPremiumDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HomeDeliveryPremiumDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HomeDeliveryPremiumDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HomeDeliveryPremiumDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HomeDeliveryPremiumDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HomeDeliveryPremiumType is not None:
            namespaceprefix_ = self.HomeDeliveryPremiumType_nsprefix_ + ':' if (UseCapturedNS_ and self.HomeDeliveryPremiumType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHomeDeliveryPremiumType>%s</%sHomeDeliveryPremiumType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HomeDeliveryPremiumType), input_name='HomeDeliveryPremiumType')), namespaceprefix_ , eol_))
        if self.Date is not None:
            namespaceprefix_ = self.Date_nsprefix_ + ':' if (UseCapturedNS_ and self.Date_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.PhoneNumber is not None:
            namespaceprefix_ = self.PhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhoneNumber>%s</%sPhoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HomeDeliveryPremiumType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HomeDeliveryPremiumType')
            value_ = self.gds_validate_string(value_, node, 'HomeDeliveryPremiumType')
            self.HomeDeliveryPremiumType = value_
            self.HomeDeliveryPremiumType_nsprefix_ = child_.prefix
            # validate type HomeDeliveryPremiumType
            self.validate_HomeDeliveryPremiumType(self.HomeDeliveryPremiumType)
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
            self.Date_nsprefix_ = child_.prefix
        elif nodeName_ == 'PhoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhoneNumber')
            value_ = self.gds_validate_string(value_, node, 'PhoneNumber')
            self.PhoneNumber = value_
            self.PhoneNumber_nsprefix_ = child_.prefix
# end class HomeDeliveryPremiumDetail


class InternationalControlledExportDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, ForeignTradeZoneCode=None, EntryNumber=None, LicenseOrPermitNumber=None, LicenseOrPermitExpirationDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_InternationalControlledExportType(self.Type)
        self.Type_nsprefix_ = None
        self.ForeignTradeZoneCode = ForeignTradeZoneCode
        self.ForeignTradeZoneCode_nsprefix_ = None
        self.EntryNumber = EntryNumber
        self.EntryNumber_nsprefix_ = None
        self.LicenseOrPermitNumber = LicenseOrPermitNumber
        self.LicenseOrPermitNumber_nsprefix_ = None
        if isinstance(LicenseOrPermitExpirationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LicenseOrPermitExpirationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = LicenseOrPermitExpirationDate
        self.LicenseOrPermitExpirationDate = initvalue_
        self.LicenseOrPermitExpirationDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InternationalControlledExportDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InternationalControlledExportDetail.subclass:
            return InternationalControlledExportDetail.subclass(*args_, **kwargs_)
        else:
            return InternationalControlledExportDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_ForeignTradeZoneCode(self):
        return self.ForeignTradeZoneCode
    def set_ForeignTradeZoneCode(self, ForeignTradeZoneCode):
        self.ForeignTradeZoneCode = ForeignTradeZoneCode
    def get_EntryNumber(self):
        return self.EntryNumber
    def set_EntryNumber(self, EntryNumber):
        self.EntryNumber = EntryNumber
    def get_LicenseOrPermitNumber(self):
        return self.LicenseOrPermitNumber
    def set_LicenseOrPermitNumber(self, LicenseOrPermitNumber):
        self.LicenseOrPermitNumber = LicenseOrPermitNumber
    def get_LicenseOrPermitExpirationDate(self):
        return self.LicenseOrPermitExpirationDate
    def set_LicenseOrPermitExpirationDate(self, LicenseOrPermitExpirationDate):
        self.LicenseOrPermitExpirationDate = LicenseOrPermitExpirationDate
    def validate_InternationalControlledExportType(self, value):
        result = True
        # Validate type InternationalControlledExportType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DEA_036', 'DEA_236', 'DEA_486', 'DSP_05', 'DSP_61', 'DSP_73', 'DSP_85', 'DSP_94', 'DSP_LICENSE_AGREEMENT', 'FROM_FOREIGN_TRADE_ZONE', 'WAREHOUSE_WITHDRAWAL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on InternationalControlledExportType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.ForeignTradeZoneCode is not None or
            self.EntryNumber is not None or
            self.LicenseOrPermitNumber is not None or
            self.LicenseOrPermitExpirationDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InternationalControlledExportDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InternationalControlledExportDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InternationalControlledExportDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InternationalControlledExportDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InternationalControlledExportDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InternationalControlledExportDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InternationalControlledExportDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.ForeignTradeZoneCode is not None:
            namespaceprefix_ = self.ForeignTradeZoneCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ForeignTradeZoneCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sForeignTradeZoneCode>%s</%sForeignTradeZoneCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ForeignTradeZoneCode), input_name='ForeignTradeZoneCode')), namespaceprefix_ , eol_))
        if self.EntryNumber is not None:
            namespaceprefix_ = self.EntryNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.EntryNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEntryNumber>%s</%sEntryNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EntryNumber), input_name='EntryNumber')), namespaceprefix_ , eol_))
        if self.LicenseOrPermitNumber is not None:
            namespaceprefix_ = self.LicenseOrPermitNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenseOrPermitNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicenseOrPermitNumber>%s</%sLicenseOrPermitNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LicenseOrPermitNumber), input_name='LicenseOrPermitNumber')), namespaceprefix_ , eol_))
        if self.LicenseOrPermitExpirationDate is not None:
            namespaceprefix_ = self.LicenseOrPermitExpirationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenseOrPermitExpirationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicenseOrPermitExpirationDate>%s</%sLicenseOrPermitExpirationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.LicenseOrPermitExpirationDate, input_name='LicenseOrPermitExpirationDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type InternationalControlledExportType
            self.validate_InternationalControlledExportType(self.Type)
        elif nodeName_ == 'ForeignTradeZoneCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ForeignTradeZoneCode')
            value_ = self.gds_validate_string(value_, node, 'ForeignTradeZoneCode')
            self.ForeignTradeZoneCode = value_
            self.ForeignTradeZoneCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'EntryNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EntryNumber')
            value_ = self.gds_validate_string(value_, node, 'EntryNumber')
            self.EntryNumber = value_
            self.EntryNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'LicenseOrPermitNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LicenseOrPermitNumber')
            value_ = self.gds_validate_string(value_, node, 'LicenseOrPermitNumber')
            self.LicenseOrPermitNumber = value_
            self.LicenseOrPermitNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'LicenseOrPermitExpirationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.LicenseOrPermitExpirationDate = dval_
            self.LicenseOrPermitExpirationDate_nsprefix_ = child_.prefix
# end class InternationalControlledExportDetail


class InternationalTrafficInArmsRegulationsDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LicenseOrExemptionNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.LicenseOrExemptionNumber = LicenseOrExemptionNumber
        self.LicenseOrExemptionNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InternationalTrafficInArmsRegulationsDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InternationalTrafficInArmsRegulationsDetail.subclass:
            return InternationalTrafficInArmsRegulationsDetail.subclass(*args_, **kwargs_)
        else:
            return InternationalTrafficInArmsRegulationsDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LicenseOrExemptionNumber(self):
        return self.LicenseOrExemptionNumber
    def set_LicenseOrExemptionNumber(self, LicenseOrExemptionNumber):
        self.LicenseOrExemptionNumber = LicenseOrExemptionNumber
    def hasContent_(self):
        if (
            self.LicenseOrExemptionNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InternationalTrafficInArmsRegulationsDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InternationalTrafficInArmsRegulationsDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InternationalTrafficInArmsRegulationsDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InternationalTrafficInArmsRegulationsDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InternationalTrafficInArmsRegulationsDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InternationalTrafficInArmsRegulationsDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InternationalTrafficInArmsRegulationsDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LicenseOrExemptionNumber is not None:
            namespaceprefix_ = self.LicenseOrExemptionNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenseOrExemptionNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicenseOrExemptionNumber>%s</%sLicenseOrExemptionNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LicenseOrExemptionNumber), input_name='LicenseOrExemptionNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LicenseOrExemptionNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LicenseOrExemptionNumber')
            value_ = self.gds_validate_string(value_, node, 'LicenseOrExemptionNumber')
            self.LicenseOrExemptionNumber = value_
            self.LicenseOrExemptionNumber_nsprefix_ = child_.prefix
# end class InternationalTrafficInArmsRegulationsDetail


class LabelSpecification(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Dispositions=None, LabelFormatType=None, ImageType=None, LabelStockType=None, LabelPrintingOrientation=None, LabelOrder=None, PrintedLabelOrigin=None, CustomerSpecifiedDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Dispositions is None:
            self.Dispositions = []
        else:
            self.Dispositions = Dispositions
        self.Dispositions_nsprefix_ = None
        self.LabelFormatType = LabelFormatType
        self.validate_LabelFormatType(self.LabelFormatType)
        self.LabelFormatType_nsprefix_ = None
        self.ImageType = ImageType
        self.validate_ShippingDocumentImageType(self.ImageType)
        self.ImageType_nsprefix_ = None
        self.LabelStockType = LabelStockType
        self.validate_LabelStockType(self.LabelStockType)
        self.LabelStockType_nsprefix_ = None
        self.LabelPrintingOrientation = LabelPrintingOrientation
        self.validate_LabelPrintingOrientationType(self.LabelPrintingOrientation)
        self.LabelPrintingOrientation_nsprefix_ = None
        self.LabelOrder = LabelOrder
        self.validate_LabelOrderType(self.LabelOrder)
        self.LabelOrder_nsprefix_ = None
        self.PrintedLabelOrigin = PrintedLabelOrigin
        self.PrintedLabelOrigin_nsprefix_ = None
        self.CustomerSpecifiedDetail = CustomerSpecifiedDetail
        self.CustomerSpecifiedDetail_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LabelSpecification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LabelSpecification.subclass:
            return LabelSpecification.subclass(*args_, **kwargs_)
        else:
            return LabelSpecification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Dispositions(self):
        return self.Dispositions
    def set_Dispositions(self, Dispositions):
        self.Dispositions = Dispositions
    def add_Dispositions(self, value):
        self.Dispositions.append(value)
    def insert_Dispositions_at(self, index, value):
        self.Dispositions.insert(index, value)
    def replace_Dispositions_at(self, index, value):
        self.Dispositions[index] = value
    def get_LabelFormatType(self):
        return self.LabelFormatType
    def set_LabelFormatType(self, LabelFormatType):
        self.LabelFormatType = LabelFormatType
    def get_ImageType(self):
        return self.ImageType
    def set_ImageType(self, ImageType):
        self.ImageType = ImageType
    def get_LabelStockType(self):
        return self.LabelStockType
    def set_LabelStockType(self, LabelStockType):
        self.LabelStockType = LabelStockType
    def get_LabelPrintingOrientation(self):
        return self.LabelPrintingOrientation
    def set_LabelPrintingOrientation(self, LabelPrintingOrientation):
        self.LabelPrintingOrientation = LabelPrintingOrientation
    def get_LabelOrder(self):
        return self.LabelOrder
    def set_LabelOrder(self, LabelOrder):
        self.LabelOrder = LabelOrder
    def get_PrintedLabelOrigin(self):
        return self.PrintedLabelOrigin
    def set_PrintedLabelOrigin(self, PrintedLabelOrigin):
        self.PrintedLabelOrigin = PrintedLabelOrigin
    def get_CustomerSpecifiedDetail(self):
        return self.CustomerSpecifiedDetail
    def set_CustomerSpecifiedDetail(self, CustomerSpecifiedDetail):
        self.CustomerSpecifiedDetail = CustomerSpecifiedDetail
    def validate_LabelFormatType(self, value):
        result = True
        # Validate type LabelFormatType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['COMMON2D', 'LABEL_DATA_ONLY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on LabelFormatType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ShippingDocumentImageType(self, value):
        result = True
        # Validate type ShippingDocumentImageType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DOC', 'EPL2', 'PDF', 'PNG', 'RTF', 'TEXT', 'ZPLII']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShippingDocumentImageType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_LabelStockType(self, value):
        result = True
        # Validate type LabelStockType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['PAPER_4X6', 'PAPER_4X6.75', 'PAPER_4X8', 'PAPER_4X9', 'PAPER_7X4.75', 'PAPER_8.5X11_BOTTOM_HALF_LABEL', 'PAPER_8.5X11_TOP_HALF_LABEL', 'PAPER_LETTER', 'STOCK_4X6', 'STOCK_4X6.75', 'STOCK_4X6.75_LEADING_DOC_TAB', 'STOCK_4X6.75_TRAILING_DOC_TAB', 'STOCK_4X8', 'STOCK_4X9', 'STOCK_4X9_LEADING_DOC_TAB', 'STOCK_4X9_TRAILING_DOC_TAB']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on LabelStockType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_LabelPrintingOrientationType(self, value):
        result = True
        # Validate type LabelPrintingOrientationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BOTTOM_EDGE_OF_TEXT_FIRST', 'TOP_EDGE_OF_TEXT_FIRST']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on LabelPrintingOrientationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_LabelOrderType(self, value):
        result = True
        # Validate type LabelOrderType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['SHIPPING_LABEL_FIRST', 'SHIPPING_LABEL_LAST']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on LabelOrderType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Dispositions or
            self.LabelFormatType is not None or
            self.ImageType is not None or
            self.LabelStockType is not None or
            self.LabelPrintingOrientation is not None or
            self.LabelOrder is not None or
            self.PrintedLabelOrigin is not None or
            self.CustomerSpecifiedDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LabelSpecification', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LabelSpecification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LabelSpecification':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LabelSpecification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LabelSpecification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LabelSpecification'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LabelSpecification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Dispositions_ in self.Dispositions:
            namespaceprefix_ = self.Dispositions_nsprefix_ + ':' if (UseCapturedNS_ and self.Dispositions_nsprefix_) else ''
            Dispositions_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Dispositions', pretty_print=pretty_print)
        if self.LabelFormatType is not None:
            namespaceprefix_ = self.LabelFormatType_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelFormatType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelFormatType>%s</%sLabelFormatType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LabelFormatType), input_name='LabelFormatType')), namespaceprefix_ , eol_))
        if self.ImageType is not None:
            namespaceprefix_ = self.ImageType_nsprefix_ + ':' if (UseCapturedNS_ and self.ImageType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sImageType>%s</%sImageType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ImageType), input_name='ImageType')), namespaceprefix_ , eol_))
        if self.LabelStockType is not None:
            namespaceprefix_ = self.LabelStockType_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelStockType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelStockType>%s</%sLabelStockType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LabelStockType), input_name='LabelStockType')), namespaceprefix_ , eol_))
        if self.LabelPrintingOrientation is not None:
            namespaceprefix_ = self.LabelPrintingOrientation_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelPrintingOrientation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelPrintingOrientation>%s</%sLabelPrintingOrientation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LabelPrintingOrientation), input_name='LabelPrintingOrientation')), namespaceprefix_ , eol_))
        if self.LabelOrder is not None:
            namespaceprefix_ = self.LabelOrder_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelOrder_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelOrder>%s</%sLabelOrder>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LabelOrder), input_name='LabelOrder')), namespaceprefix_ , eol_))
        if self.PrintedLabelOrigin is not None:
            namespaceprefix_ = self.PrintedLabelOrigin_nsprefix_ + ':' if (UseCapturedNS_ and self.PrintedLabelOrigin_nsprefix_) else ''
            self.PrintedLabelOrigin.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PrintedLabelOrigin', pretty_print=pretty_print)
        if self.CustomerSpecifiedDetail is not None:
            namespaceprefix_ = self.CustomerSpecifiedDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerSpecifiedDetail_nsprefix_) else ''
            self.CustomerSpecifiedDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomerSpecifiedDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Dispositions':
            obj_ = ShippingDocumentDispositionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Dispositions.append(obj_)
            obj_.original_tagname_ = 'Dispositions'
        elif nodeName_ == 'LabelFormatType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelFormatType')
            value_ = self.gds_validate_string(value_, node, 'LabelFormatType')
            self.LabelFormatType = value_
            self.LabelFormatType_nsprefix_ = child_.prefix
            # validate type LabelFormatType
            self.validate_LabelFormatType(self.LabelFormatType)
        elif nodeName_ == 'ImageType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ImageType')
            value_ = self.gds_validate_string(value_, node, 'ImageType')
            self.ImageType = value_
            self.ImageType_nsprefix_ = child_.prefix
            # validate type ShippingDocumentImageType
            self.validate_ShippingDocumentImageType(self.ImageType)
        elif nodeName_ == 'LabelStockType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelStockType')
            value_ = self.gds_validate_string(value_, node, 'LabelStockType')
            self.LabelStockType = value_
            self.LabelStockType_nsprefix_ = child_.prefix
            # validate type LabelStockType
            self.validate_LabelStockType(self.LabelStockType)
        elif nodeName_ == 'LabelPrintingOrientation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelPrintingOrientation')
            value_ = self.gds_validate_string(value_, node, 'LabelPrintingOrientation')
            self.LabelPrintingOrientation = value_
            self.LabelPrintingOrientation_nsprefix_ = child_.prefix
            # validate type LabelPrintingOrientationType
            self.validate_LabelPrintingOrientationType(self.LabelPrintingOrientation)
        elif nodeName_ == 'LabelOrder':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelOrder')
            value_ = self.gds_validate_string(value_, node, 'LabelOrder')
            self.LabelOrder = value_
            self.LabelOrder_nsprefix_ = child_.prefix
            # validate type LabelOrderType
            self.validate_LabelOrderType(self.LabelOrder)
        elif nodeName_ == 'PrintedLabelOrigin':
            obj_ = ContactAndAddress.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PrintedLabelOrigin = obj_
            obj_.original_tagname_ = 'PrintedLabelOrigin'
        elif nodeName_ == 'CustomerSpecifiedDetail':
            obj_ = CustomerSpecifiedLabelDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomerSpecifiedDetail = obj_
            obj_.original_tagname_ = 'CustomerSpecifiedDetail'
# end class LabelSpecification


class LiabilityCoverageDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CoverageType=None, CoverageAmount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CoverageType = CoverageType
        self.validate_LiabilityCoverageType(self.CoverageType)
        self.CoverageType_nsprefix_ = None
        self.CoverageAmount = CoverageAmount
        self.CoverageAmount_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LiabilityCoverageDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LiabilityCoverageDetail.subclass:
            return LiabilityCoverageDetail.subclass(*args_, **kwargs_)
        else:
            return LiabilityCoverageDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CoverageType(self):
        return self.CoverageType
    def set_CoverageType(self, CoverageType):
        self.CoverageType = CoverageType
    def get_CoverageAmount(self):
        return self.CoverageAmount
    def set_CoverageAmount(self, CoverageAmount):
        self.CoverageAmount = CoverageAmount
    def validate_LiabilityCoverageType(self, value):
        result = True
        # Validate type LiabilityCoverageType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['NEW', 'USED_OR_RECONDITIONED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on LiabilityCoverageType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.CoverageType is not None or
            self.CoverageAmount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LiabilityCoverageDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LiabilityCoverageDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LiabilityCoverageDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LiabilityCoverageDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LiabilityCoverageDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LiabilityCoverageDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LiabilityCoverageDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CoverageType is not None:
            namespaceprefix_ = self.CoverageType_nsprefix_ + ':' if (UseCapturedNS_ and self.CoverageType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCoverageType>%s</%sCoverageType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CoverageType), input_name='CoverageType')), namespaceprefix_ , eol_))
        if self.CoverageAmount is not None:
            namespaceprefix_ = self.CoverageAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.CoverageAmount_nsprefix_) else ''
            self.CoverageAmount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CoverageAmount', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CoverageType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CoverageType')
            value_ = self.gds_validate_string(value_, node, 'CoverageType')
            self.CoverageType = value_
            self.CoverageType_nsprefix_ = child_.prefix
            # validate type LiabilityCoverageType
            self.validate_LiabilityCoverageType(self.CoverageType)
        elif nodeName_ == 'CoverageAmount':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CoverageAmount = obj_
            obj_.original_tagname_ = 'CoverageAmount'
# end class LiabilityCoverageDetail


class LicenseOrPermitDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Number=None, EffectiveDate=None, ExpirationDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Number = Number
        self.Number_nsprefix_ = None
        if isinstance(EffectiveDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EffectiveDate, '%Y-%m-%d').date()
        else:
            initvalue_ = EffectiveDate
        self.EffectiveDate = initvalue_
        self.EffectiveDate_nsprefix_ = None
        if isinstance(ExpirationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ExpirationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ExpirationDate
        self.ExpirationDate = initvalue_
        self.ExpirationDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LicenseOrPermitDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LicenseOrPermitDetail.subclass:
            return LicenseOrPermitDetail.subclass(*args_, **kwargs_)
        else:
            return LicenseOrPermitDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_EffectiveDate(self):
        return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate):
        self.EffectiveDate = EffectiveDate
    def get_ExpirationDate(self):
        return self.ExpirationDate
    def set_ExpirationDate(self, ExpirationDate):
        self.ExpirationDate = ExpirationDate
    def hasContent_(self):
        if (
            self.Number is not None or
            self.EffectiveDate is not None or
            self.ExpirationDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LicenseOrPermitDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LicenseOrPermitDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LicenseOrPermitDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LicenseOrPermitDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LicenseOrPermitDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LicenseOrPermitDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LicenseOrPermitDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
        if self.EffectiveDate is not None:
            namespaceprefix_ = self.EffectiveDate_nsprefix_ + ':' if (UseCapturedNS_ and self.EffectiveDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEffectiveDate>%s</%sEffectiveDate>%s' % (namespaceprefix_ , self.gds_format_date(self.EffectiveDate, input_name='EffectiveDate'), namespaceprefix_ , eol_))
        if self.ExpirationDate is not None:
            namespaceprefix_ = self.ExpirationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ExpirationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExpirationDate>%s</%sExpirationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ExpirationDate, input_name='ExpirationDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
        elif nodeName_ == 'EffectiveDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.EffectiveDate = dval_
            self.EffectiveDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'ExpirationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ExpirationDate = dval_
            self.ExpirationDate_nsprefix_ = child_.prefix
# end class LicenseOrPermitDetail


class LinearMeasure(GeneratedsSuper):
    """Represents a one-dimensional measurement in small units (e.g. suitable
    for measuring a package or document), contrasted with Distance, which
    represents a large one-dimensional measurement (e.g. distance between
    cities)."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Value=None, Units=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
        self.Units = Units
        self.validate_LinearUnits(self.Units)
        self.Units_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LinearMeasure)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LinearMeasure.subclass:
            return LinearMeasure.subclass(*args_, **kwargs_)
        else:
            return LinearMeasure(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def get_Units(self):
        return self.Units
    def set_Units(self, Units):
        self.Units = Units
    def validate_LinearUnits(self, value):
        result = True
        # Validate type LinearUnits, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CM', 'IN']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on LinearUnits' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Value is not None or
            self.Units is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LinearMeasure', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LinearMeasure')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LinearMeasure':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LinearMeasure')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LinearMeasure', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LinearMeasure'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='LinearMeasure', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Value, input_name='Value'), namespaceprefix_ , eol_))
        if self.Units is not None:
            namespaceprefix_ = self.Units_nsprefix_ + ':' if (UseCapturedNS_ and self.Units_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnits>%s</%sUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Value' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Value')
            fval_ = self.gds_validate_decimal(fval_, node, 'Value')
            self.Value = fval_
            self.Value_nsprefix_ = child_.prefix
        elif nodeName_ == 'Units':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Units')
            value_ = self.gds_validate_string(value_, node, 'Units')
            self.Units = value_
            self.Units_nsprefix_ = child_.prefix
            # validate type LinearUnits
            self.validate_LinearUnits(self.Units)
# end class LinearMeasure


class Localization(GeneratedsSuper):
    """Identifies the representation of human-readable text."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LanguageCode=None, LocaleCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.LanguageCode = LanguageCode
        self.LanguageCode_nsprefix_ = None
        self.LocaleCode = LocaleCode
        self.LocaleCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Localization)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Localization.subclass:
            return Localization.subclass(*args_, **kwargs_)
        else:
            return Localization(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LanguageCode(self):
        return self.LanguageCode
    def set_LanguageCode(self, LanguageCode):
        self.LanguageCode = LanguageCode
    def get_LocaleCode(self):
        return self.LocaleCode
    def set_LocaleCode(self, LocaleCode):
        self.LocaleCode = LocaleCode
    def hasContent_(self):
        if (
            self.LanguageCode is not None or
            self.LocaleCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Localization', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Localization')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Localization':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Localization')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Localization', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Localization'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Localization', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LanguageCode is not None:
            namespaceprefix_ = self.LanguageCode_nsprefix_ + ':' if (UseCapturedNS_ and self.LanguageCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLanguageCode>%s</%sLanguageCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LanguageCode), input_name='LanguageCode')), namespaceprefix_ , eol_))
        if self.LocaleCode is not None:
            namespaceprefix_ = self.LocaleCode_nsprefix_ + ':' if (UseCapturedNS_ and self.LocaleCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocaleCode>%s</%sLocaleCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocaleCode), input_name='LocaleCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LanguageCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LanguageCode')
            value_ = self.gds_validate_string(value_, node, 'LanguageCode')
            self.LanguageCode = value_
            self.LanguageCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocaleCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocaleCode')
            value_ = self.gds_validate_string(value_, node, 'LocaleCode')
            self.LocaleCode = value_
            self.LocaleCode_nsprefix_ = child_.prefix
# end class Localization


class Measure(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Quantity=None, Units=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Quantity = Quantity
        self.Quantity_nsprefix_ = None
        self.Units = Units
        self.Units_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Measure)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Measure.subclass:
            return Measure.subclass(*args_, **kwargs_)
        else:
            return Measure(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_Units(self):
        return self.Units
    def set_Units(self, Units):
        self.Units = Units
    def hasContent_(self):
        if (
            self.Quantity is not None or
            self.Units is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Measure', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Measure')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Measure':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Measure')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Measure', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Measure'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Measure', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.Units is not None:
            namespaceprefix_ = self.Units_nsprefix_ + ':' if (UseCapturedNS_ and self.Units_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnits>%s</%sUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'Units':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Units')
            value_ = self.gds_validate_string(value_, node, 'Units')
            self.Units = value_
            self.Units_nsprefix_ = child_.prefix
# end class Measure


class Message(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, Text=None, LocalizedText=None, Parameters=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Text = Text
        self.Text_nsprefix_ = None
        self.LocalizedText = LocalizedText
        self.LocalizedText_nsprefix_ = None
        if Parameters is None:
            self.Parameters = []
        else:
            self.Parameters = Parameters
        self.Parameters_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Message)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Message.subclass:
            return Message.subclass(*args_, **kwargs_)
        else:
            return Message(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Text(self):
        return self.Text
    def set_Text(self, Text):
        self.Text = Text
    def get_LocalizedText(self):
        return self.LocalizedText
    def set_LocalizedText(self, LocalizedText):
        self.LocalizedText = LocalizedText
    def get_Parameters(self):
        return self.Parameters
    def set_Parameters(self, Parameters):
        self.Parameters = Parameters
    def add_Parameters(self, value):
        self.Parameters.append(value)
    def insert_Parameters_at(self, index, value):
        self.Parameters.insert(index, value)
    def replace_Parameters_at(self, index, value):
        self.Parameters[index] = value
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Text is not None or
            self.LocalizedText is not None or
            self.Parameters
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Message', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Message')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Message':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Message')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Message', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Message'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Message', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Text is not None:
            namespaceprefix_ = self.Text_nsprefix_ + ':' if (UseCapturedNS_ and self.Text_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sText>%s</%sText>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Text), input_name='Text')), namespaceprefix_ , eol_))
        if self.LocalizedText is not None:
            namespaceprefix_ = self.LocalizedText_nsprefix_ + ':' if (UseCapturedNS_ and self.LocalizedText_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocalizedText>%s</%sLocalizedText>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocalizedText), input_name='LocalizedText')), namespaceprefix_ , eol_))
        for Parameters_ in self.Parameters:
            namespaceprefix_ = self.Parameters_nsprefix_ + ':' if (UseCapturedNS_ and self.Parameters_nsprefix_) else ''
            Parameters_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Parameters', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Text':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Text')
            value_ = self.gds_validate_string(value_, node, 'Text')
            self.Text = value_
            self.Text_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocalizedText':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocalizedText')
            value_ = self.gds_validate_string(value_, node, 'LocalizedText')
            self.LocalizedText = value_
            self.LocalizedText_nsprefix_ = child_.prefix
        elif nodeName_ == 'Parameters':
            obj_ = MessageParameter.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Parameters.append(obj_)
            obj_.original_tagname_ = 'Parameters'
# end class Message


class MessageParameter(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Id = Id
        self.Id_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MessageParameter)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MessageParameter.subclass:
            return MessageParameter.subclass(*args_, **kwargs_)
        else:
            return MessageParameter(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def hasContent_(self):
        if (
            self.Id is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MessageParameter', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MessageParameter')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MessageParameter':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MessageParameter')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MessageParameter', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MessageParameter'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MessageParameter', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Id is not None:
            namespaceprefix_ = self.Id_nsprefix_ + ':' if (UseCapturedNS_ and self.Id_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sId>%s</%sId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Id':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Id')
            value_ = self.gds_validate_string(value_, node, 'Id')
            self.Id = value_
            self.Id_nsprefix_ = child_.prefix
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
# end class MessageParameter


class Money(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Currency=None, Amount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Currency = Currency
        self.Currency_nsprefix_ = None
        self.Amount = Amount
        self.Amount_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Money)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Money.subclass:
            return Money.subclass(*args_, **kwargs_)
        else:
            return Money(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Currency(self):
        return self.Currency
    def set_Currency(self, Currency):
        self.Currency = Currency
    def get_Amount(self):
        return self.Amount
    def set_Amount(self, Amount):
        self.Amount = Amount
    def hasContent_(self):
        if (
            self.Currency is not None or
            self.Amount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Money', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Money')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Money':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Money')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Money', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Money'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Money', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Currency is not None:
            namespaceprefix_ = self.Currency_nsprefix_ + ':' if (UseCapturedNS_ and self.Currency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrency>%s</%sCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Currency), input_name='Currency')), namespaceprefix_ , eol_))
        if self.Amount is not None:
            namespaceprefix_ = self.Amount_nsprefix_ + ':' if (UseCapturedNS_ and self.Amount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAmount>%s</%sAmount>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Amount, input_name='Amount'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Currency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Currency')
            value_ = self.gds_validate_string(value_, node, 'Currency')
            self.Currency = value_
            self.Currency_nsprefix_ = child_.prefix
        elif nodeName_ == 'Amount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Amount')
            fval_ = self.gds_validate_decimal(fval_, node, 'Amount')
            self.Amount = fval_
            self.Amount_nsprefix_ = child_.prefix
# end class Money


class NaftaCertificateOfOriginDetail(GeneratedsSuper):
    """Data required to produce a Certificate of Origin document. Remaining
    content (business data) to be defined once requirements have been
    completed."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Format=None, BlanketPeriod=None, ImporterSpecification=None, SignatureContact=None, ProducerSpecification=None, Producers=None, CustomerImageUsages=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Format = Format
        self.Format_nsprefix_ = None
        self.BlanketPeriod = BlanketPeriod
        self.BlanketPeriod_nsprefix_ = None
        self.ImporterSpecification = ImporterSpecification
        self.validate_NaftaImporterSpecificationType(self.ImporterSpecification)
        self.ImporterSpecification_nsprefix_ = None
        self.SignatureContact = SignatureContact
        self.SignatureContact_nsprefix_ = None
        self.ProducerSpecification = ProducerSpecification
        self.validate_NaftaProducerSpecificationType(self.ProducerSpecification)
        self.ProducerSpecification_nsprefix_ = None
        if Producers is None:
            self.Producers = []
        else:
            self.Producers = Producers
        self.Producers_nsprefix_ = None
        if CustomerImageUsages is None:
            self.CustomerImageUsages = []
        else:
            self.CustomerImageUsages = CustomerImageUsages
        self.CustomerImageUsages_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NaftaCertificateOfOriginDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NaftaCertificateOfOriginDetail.subclass:
            return NaftaCertificateOfOriginDetail.subclass(*args_, **kwargs_)
        else:
            return NaftaCertificateOfOriginDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Format(self):
        return self.Format
    def set_Format(self, Format):
        self.Format = Format
    def get_BlanketPeriod(self):
        return self.BlanketPeriod
    def set_BlanketPeriod(self, BlanketPeriod):
        self.BlanketPeriod = BlanketPeriod
    def get_ImporterSpecification(self):
        return self.ImporterSpecification
    def set_ImporterSpecification(self, ImporterSpecification):
        self.ImporterSpecification = ImporterSpecification
    def get_SignatureContact(self):
        return self.SignatureContact
    def set_SignatureContact(self, SignatureContact):
        self.SignatureContact = SignatureContact
    def get_ProducerSpecification(self):
        return self.ProducerSpecification
    def set_ProducerSpecification(self, ProducerSpecification):
        self.ProducerSpecification = ProducerSpecification
    def get_Producers(self):
        return self.Producers
    def set_Producers(self, Producers):
        self.Producers = Producers
    def add_Producers(self, value):
        self.Producers.append(value)
    def insert_Producers_at(self, index, value):
        self.Producers.insert(index, value)
    def replace_Producers_at(self, index, value):
        self.Producers[index] = value
    def get_CustomerImageUsages(self):
        return self.CustomerImageUsages
    def set_CustomerImageUsages(self, CustomerImageUsages):
        self.CustomerImageUsages = CustomerImageUsages
    def add_CustomerImageUsages(self, value):
        self.CustomerImageUsages.append(value)
    def insert_CustomerImageUsages_at(self, index, value):
        self.CustomerImageUsages.insert(index, value)
    def replace_CustomerImageUsages_at(self, index, value):
        self.CustomerImageUsages[index] = value
    def validate_NaftaImporterSpecificationType(self, value):
        result = True
        # Validate type NaftaImporterSpecificationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['IMPORTER_OF_RECORD', 'RECIPIENT', 'UNKNOWN', 'VARIOUS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NaftaImporterSpecificationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_NaftaProducerSpecificationType(self, value):
        result = True
        # Validate type NaftaProducerSpecificationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AVAILABLE_UPON_REQUEST', 'MULTIPLE_SPECIFIED', 'SAME', 'SINGLE_SPECIFIED', 'UNKNOWN']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NaftaProducerSpecificationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Format is not None or
            self.BlanketPeriod is not None or
            self.ImporterSpecification is not None or
            self.SignatureContact is not None or
            self.ProducerSpecification is not None or
            self.Producers or
            self.CustomerImageUsages
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NaftaCertificateOfOriginDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NaftaCertificateOfOriginDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NaftaCertificateOfOriginDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NaftaCertificateOfOriginDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NaftaCertificateOfOriginDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NaftaCertificateOfOriginDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NaftaCertificateOfOriginDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Format is not None:
            namespaceprefix_ = self.Format_nsprefix_ + ':' if (UseCapturedNS_ and self.Format_nsprefix_) else ''
            self.Format.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Format', pretty_print=pretty_print)
        if self.BlanketPeriod is not None:
            namespaceprefix_ = self.BlanketPeriod_nsprefix_ + ':' if (UseCapturedNS_ and self.BlanketPeriod_nsprefix_) else ''
            self.BlanketPeriod.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BlanketPeriod', pretty_print=pretty_print)
        if self.ImporterSpecification is not None:
            namespaceprefix_ = self.ImporterSpecification_nsprefix_ + ':' if (UseCapturedNS_ and self.ImporterSpecification_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sImporterSpecification>%s</%sImporterSpecification>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ImporterSpecification), input_name='ImporterSpecification')), namespaceprefix_ , eol_))
        if self.SignatureContact is not None:
            namespaceprefix_ = self.SignatureContact_nsprefix_ + ':' if (UseCapturedNS_ and self.SignatureContact_nsprefix_) else ''
            self.SignatureContact.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SignatureContact', pretty_print=pretty_print)
        if self.ProducerSpecification is not None:
            namespaceprefix_ = self.ProducerSpecification_nsprefix_ + ':' if (UseCapturedNS_ and self.ProducerSpecification_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProducerSpecification>%s</%sProducerSpecification>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProducerSpecification), input_name='ProducerSpecification')), namespaceprefix_ , eol_))
        for Producers_ in self.Producers:
            namespaceprefix_ = self.Producers_nsprefix_ + ':' if (UseCapturedNS_ and self.Producers_nsprefix_) else ''
            Producers_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Producers', pretty_print=pretty_print)
        for CustomerImageUsages_ in self.CustomerImageUsages:
            namespaceprefix_ = self.CustomerImageUsages_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerImageUsages_nsprefix_) else ''
            CustomerImageUsages_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomerImageUsages', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Format':
            obj_ = ShippingDocumentFormat.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Format = obj_
            obj_.original_tagname_ = 'Format'
        elif nodeName_ == 'BlanketPeriod':
            obj_ = DateRange.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BlanketPeriod = obj_
            obj_.original_tagname_ = 'BlanketPeriod'
        elif nodeName_ == 'ImporterSpecification':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ImporterSpecification')
            value_ = self.gds_validate_string(value_, node, 'ImporterSpecification')
            self.ImporterSpecification = value_
            self.ImporterSpecification_nsprefix_ = child_.prefix
            # validate type NaftaImporterSpecificationType
            self.validate_NaftaImporterSpecificationType(self.ImporterSpecification)
        elif nodeName_ == 'SignatureContact':
            obj_ = Contact.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SignatureContact = obj_
            obj_.original_tagname_ = 'SignatureContact'
        elif nodeName_ == 'ProducerSpecification':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProducerSpecification')
            value_ = self.gds_validate_string(value_, node, 'ProducerSpecification')
            self.ProducerSpecification = value_
            self.ProducerSpecification_nsprefix_ = child_.prefix
            # validate type NaftaProducerSpecificationType
            self.validate_NaftaProducerSpecificationType(self.ProducerSpecification)
        elif nodeName_ == 'Producers':
            obj_ = NaftaProducer.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Producers.append(obj_)
            obj_.original_tagname_ = 'Producers'
        elif nodeName_ == 'CustomerImageUsages':
            obj_ = CustomerImageUsage.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomerImageUsages.append(obj_)
            obj_.original_tagname_ = 'CustomerImageUsages'
# end class NaftaCertificateOfOriginDetail


class NaftaCommodityDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PreferenceCriterion=None, ProducerDetermination=None, ProducerId=None, NetCostMethod=None, NetCostDateRange=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PreferenceCriterion = PreferenceCriterion
        self.validate_NaftaPreferenceCriterionCode(self.PreferenceCriterion)
        self.PreferenceCriterion_nsprefix_ = None
        self.ProducerDetermination = ProducerDetermination
        self.validate_NaftaProducerDeterminationCode(self.ProducerDetermination)
        self.ProducerDetermination_nsprefix_ = None
        self.ProducerId = ProducerId
        self.ProducerId_nsprefix_ = None
        self.NetCostMethod = NetCostMethod
        self.validate_NaftaNetCostMethodCode(self.NetCostMethod)
        self.NetCostMethod_nsprefix_ = None
        self.NetCostDateRange = NetCostDateRange
        self.NetCostDateRange_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NaftaCommodityDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NaftaCommodityDetail.subclass:
            return NaftaCommodityDetail.subclass(*args_, **kwargs_)
        else:
            return NaftaCommodityDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PreferenceCriterion(self):
        return self.PreferenceCriterion
    def set_PreferenceCriterion(self, PreferenceCriterion):
        self.PreferenceCriterion = PreferenceCriterion
    def get_ProducerDetermination(self):
        return self.ProducerDetermination
    def set_ProducerDetermination(self, ProducerDetermination):
        self.ProducerDetermination = ProducerDetermination
    def get_ProducerId(self):
        return self.ProducerId
    def set_ProducerId(self, ProducerId):
        self.ProducerId = ProducerId
    def get_NetCostMethod(self):
        return self.NetCostMethod
    def set_NetCostMethod(self, NetCostMethod):
        self.NetCostMethod = NetCostMethod
    def get_NetCostDateRange(self):
        return self.NetCostDateRange
    def set_NetCostDateRange(self, NetCostDateRange):
        self.NetCostDateRange = NetCostDateRange
    def validate_NaftaPreferenceCriterionCode(self, value):
        result = True
        # Validate type NaftaPreferenceCriterionCode, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['A', 'B', 'C', 'D', 'E', 'F']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NaftaPreferenceCriterionCode' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_NaftaProducerDeterminationCode(self, value):
        result = True
        # Validate type NaftaProducerDeterminationCode, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['NO_1', 'NO_2', 'NO_3', 'YES']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NaftaProducerDeterminationCode' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_NaftaNetCostMethodCode(self, value):
        result = True
        # Validate type NaftaNetCostMethodCode, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['NC', 'NO']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NaftaNetCostMethodCode' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.PreferenceCriterion is not None or
            self.ProducerDetermination is not None or
            self.ProducerId is not None or
            self.NetCostMethod is not None or
            self.NetCostDateRange is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NaftaCommodityDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NaftaCommodityDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NaftaCommodityDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NaftaCommodityDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NaftaCommodityDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NaftaCommodityDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NaftaCommodityDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PreferenceCriterion is not None:
            namespaceprefix_ = self.PreferenceCriterion_nsprefix_ + ':' if (UseCapturedNS_ and self.PreferenceCriterion_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPreferenceCriterion>%s</%sPreferenceCriterion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PreferenceCriterion), input_name='PreferenceCriterion')), namespaceprefix_ , eol_))
        if self.ProducerDetermination is not None:
            namespaceprefix_ = self.ProducerDetermination_nsprefix_ + ':' if (UseCapturedNS_ and self.ProducerDetermination_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProducerDetermination>%s</%sProducerDetermination>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProducerDetermination), input_name='ProducerDetermination')), namespaceprefix_ , eol_))
        if self.ProducerId is not None:
            namespaceprefix_ = self.ProducerId_nsprefix_ + ':' if (UseCapturedNS_ and self.ProducerId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProducerId>%s</%sProducerId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProducerId), input_name='ProducerId')), namespaceprefix_ , eol_))
        if self.NetCostMethod is not None:
            namespaceprefix_ = self.NetCostMethod_nsprefix_ + ':' if (UseCapturedNS_ and self.NetCostMethod_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNetCostMethod>%s</%sNetCostMethod>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NetCostMethod), input_name='NetCostMethod')), namespaceprefix_ , eol_))
        if self.NetCostDateRange is not None:
            namespaceprefix_ = self.NetCostDateRange_nsprefix_ + ':' if (UseCapturedNS_ and self.NetCostDateRange_nsprefix_) else ''
            self.NetCostDateRange.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NetCostDateRange', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PreferenceCriterion':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PreferenceCriterion')
            value_ = self.gds_validate_string(value_, node, 'PreferenceCriterion')
            self.PreferenceCriterion = value_
            self.PreferenceCriterion_nsprefix_ = child_.prefix
            # validate type NaftaPreferenceCriterionCode
            self.validate_NaftaPreferenceCriterionCode(self.PreferenceCriterion)
        elif nodeName_ == 'ProducerDetermination':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProducerDetermination')
            value_ = self.gds_validate_string(value_, node, 'ProducerDetermination')
            self.ProducerDetermination = value_
            self.ProducerDetermination_nsprefix_ = child_.prefix
            # validate type NaftaProducerDeterminationCode
            self.validate_NaftaProducerDeterminationCode(self.ProducerDetermination)
        elif nodeName_ == 'ProducerId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProducerId')
            value_ = self.gds_validate_string(value_, node, 'ProducerId')
            self.ProducerId = value_
            self.ProducerId_nsprefix_ = child_.prefix
        elif nodeName_ == 'NetCostMethod':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NetCostMethod')
            value_ = self.gds_validate_string(value_, node, 'NetCostMethod')
            self.NetCostMethod = value_
            self.NetCostMethod_nsprefix_ = child_.prefix
            # validate type NaftaNetCostMethodCode
            self.validate_NaftaNetCostMethodCode(self.NetCostMethod)
        elif nodeName_ == 'NetCostDateRange':
            obj_ = DateRange.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NetCostDateRange = obj_
            obj_.original_tagname_ = 'NetCostDateRange'
# end class NaftaCommodityDetail


class NaftaLowValueStatementDetail(GeneratedsSuper):
    """Specifies the information necessary for printing the NAFTA Low Value
    statement on customs documentation."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Role=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Role = Role
        self.validate_CustomsRoleType(self.Role)
        self.Role_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NaftaLowValueStatementDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NaftaLowValueStatementDetail.subclass:
            return NaftaLowValueStatementDetail.subclass(*args_, **kwargs_)
        else:
            return NaftaLowValueStatementDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Role(self):
        return self.Role
    def set_Role(self, Role):
        self.Role = Role
    def validate_CustomsRoleType(self, value):
        result = True
        # Validate type CustomsRoleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['EXPORTER', 'IMPORTER', 'LEGAL_AGENT', 'PRODUCER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomsRoleType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Role is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NaftaLowValueStatementDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NaftaLowValueStatementDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NaftaLowValueStatementDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NaftaLowValueStatementDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NaftaLowValueStatementDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NaftaLowValueStatementDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NaftaLowValueStatementDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Role is not None:
            namespaceprefix_ = self.Role_nsprefix_ + ':' if (UseCapturedNS_ and self.Role_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRole>%s</%sRole>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Role), input_name='Role')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Role':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Role')
            value_ = self.gds_validate_string(value_, node, 'Role')
            self.Role = value_
            self.Role_nsprefix_ = child_.prefix
            # validate type CustomsRoleType
            self.validate_CustomsRoleType(self.Role)
# end class NaftaLowValueStatementDetail


class NaftaProducer(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, Producer=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Id = Id
        self.Id_nsprefix_ = None
        self.Producer = Producer
        self.Producer_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NaftaProducer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NaftaProducer.subclass:
            return NaftaProducer.subclass(*args_, **kwargs_)
        else:
            return NaftaProducer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_Producer(self):
        return self.Producer
    def set_Producer(self, Producer):
        self.Producer = Producer
    def hasContent_(self):
        if (
            self.Id is not None or
            self.Producer is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NaftaProducer', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NaftaProducer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NaftaProducer':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NaftaProducer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NaftaProducer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NaftaProducer'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NaftaProducer', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Id is not None:
            namespaceprefix_ = self.Id_nsprefix_ + ':' if (UseCapturedNS_ and self.Id_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sId>%s</%sId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), namespaceprefix_ , eol_))
        if self.Producer is not None:
            namespaceprefix_ = self.Producer_nsprefix_ + ':' if (UseCapturedNS_ and self.Producer_nsprefix_) else ''
            self.Producer.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Producer', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Id':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Id')
            value_ = self.gds_validate_string(value_, node, 'Id')
            self.Id = value_
            self.Id_nsprefix_ = child_.prefix
        elif nodeName_ == 'Producer':
            obj_ = Party.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Producer = obj_
            obj_.original_tagname_ = 'Producer'
# end class NaftaProducer


class NetExplosiveDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Amount=None, Units=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_NetExplosiveClassificationType(self.Type)
        self.Type_nsprefix_ = None
        self.Amount = Amount
        self.Amount_nsprefix_ = None
        self.Units = Units
        self.Units_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NetExplosiveDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NetExplosiveDetail.subclass:
            return NetExplosiveDetail.subclass(*args_, **kwargs_)
        else:
            return NetExplosiveDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Amount(self):
        return self.Amount
    def set_Amount(self, Amount):
        self.Amount = Amount
    def get_Units(self):
        return self.Units
    def set_Units(self, Units):
        self.Units = Units
    def validate_NetExplosiveClassificationType(self, value):
        result = True
        # Validate type NetExplosiveClassificationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['NET_EXPLOSIVE_CONTENT', 'NET_EXPLOSIVE_MASS', 'NET_EXPLOSIVE_QUANTITY', 'NET_EXPLOSIVE_WEIGHT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NetExplosiveClassificationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Amount is not None or
            self.Units is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NetExplosiveDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NetExplosiveDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NetExplosiveDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NetExplosiveDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NetExplosiveDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NetExplosiveDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NetExplosiveDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Amount is not None:
            namespaceprefix_ = self.Amount_nsprefix_ + ':' if (UseCapturedNS_ and self.Amount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAmount>%s</%sAmount>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Amount, input_name='Amount'), namespaceprefix_ , eol_))
        if self.Units is not None:
            namespaceprefix_ = self.Units_nsprefix_ + ':' if (UseCapturedNS_ and self.Units_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnits>%s</%sUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type NetExplosiveClassificationType
            self.validate_NetExplosiveClassificationType(self.Type)
        elif nodeName_ == 'Amount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Amount')
            fval_ = self.gds_validate_decimal(fval_, node, 'Amount')
            self.Amount = fval_
            self.Amount_nsprefix_ = child_.prefix
        elif nodeName_ == 'Units':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Units')
            value_ = self.gds_validate_string(value_, node, 'Units')
            self.Units = value_
            self.Units_nsprefix_ = child_.prefix
# end class NetExplosiveDetail


class Notification(GeneratedsSuper):
    """The descriptive data regarding the result of the submitted
    transaction."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Severity=None, Source=None, Code=None, Message=None, LocalizedMessage=None, MessageParameters=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Severity = Severity
        self.validate_NotificationSeverityType(self.Severity)
        self.Severity_nsprefix_ = None
        self.Source = Source
        self.Source_nsprefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Message = Message
        self.Message_nsprefix_ = None
        self.LocalizedMessage = LocalizedMessage
        self.LocalizedMessage_nsprefix_ = None
        if MessageParameters is None:
            self.MessageParameters = []
        else:
            self.MessageParameters = MessageParameters
        self.MessageParameters_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Notification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Notification.subclass:
            return Notification.subclass(*args_, **kwargs_)
        else:
            return Notification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Severity(self):
        return self.Severity
    def set_Severity(self, Severity):
        self.Severity = Severity
    def get_Source(self):
        return self.Source
    def set_Source(self, Source):
        self.Source = Source
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Message(self):
        return self.Message
    def set_Message(self, Message):
        self.Message = Message
    def get_LocalizedMessage(self):
        return self.LocalizedMessage
    def set_LocalizedMessage(self, LocalizedMessage):
        self.LocalizedMessage = LocalizedMessage
    def get_MessageParameters(self):
        return self.MessageParameters
    def set_MessageParameters(self, MessageParameters):
        self.MessageParameters = MessageParameters
    def add_MessageParameters(self, value):
        self.MessageParameters.append(value)
    def insert_MessageParameters_at(self, index, value):
        self.MessageParameters.insert(index, value)
    def replace_MessageParameters_at(self, index, value):
        self.MessageParameters[index] = value
    def validate_NotificationSeverityType(self, value):
        result = True
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Severity is not None or
            self.Source is not None or
            self.Code is not None or
            self.Message is not None or
            self.LocalizedMessage is not None or
            self.MessageParameters
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Notification', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Notification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Notification':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Notification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Notification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Notification'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Notification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Severity is not None:
            namespaceprefix_ = self.Severity_nsprefix_ + ':' if (UseCapturedNS_ and self.Severity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSeverity>%s</%sSeverity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Severity), input_name='Severity')), namespaceprefix_ , eol_))
        if self.Source is not None:
            namespaceprefix_ = self.Source_nsprefix_ + ':' if (UseCapturedNS_ and self.Source_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSource>%s</%sSource>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Source), input_name='Source')), namespaceprefix_ , eol_))
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Message is not None:
            namespaceprefix_ = self.Message_nsprefix_ + ':' if (UseCapturedNS_ and self.Message_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMessage>%s</%sMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Message), input_name='Message')), namespaceprefix_ , eol_))
        if self.LocalizedMessage is not None:
            namespaceprefix_ = self.LocalizedMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.LocalizedMessage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocalizedMessage>%s</%sLocalizedMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocalizedMessage), input_name='LocalizedMessage')), namespaceprefix_ , eol_))
        for MessageParameters_ in self.MessageParameters:
            namespaceprefix_ = self.MessageParameters_nsprefix_ + ':' if (UseCapturedNS_ and self.MessageParameters_nsprefix_) else ''
            MessageParameters_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MessageParameters', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Severity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Severity')
            value_ = self.gds_validate_string(value_, node, 'Severity')
            self.Severity = value_
            self.Severity_nsprefix_ = child_.prefix
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.Severity)
        elif nodeName_ == 'Source':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Source')
            value_ = self.gds_validate_string(value_, node, 'Source')
            self.Source = value_
            self.Source_nsprefix_ = child_.prefix
        elif nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Message':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Message')
            value_ = self.gds_validate_string(value_, node, 'Message')
            self.Message = value_
            self.Message_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocalizedMessage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocalizedMessage')
            value_ = self.gds_validate_string(value_, node, 'LocalizedMessage')
            self.LocalizedMessage = value_
            self.LocalizedMessage_nsprefix_ = child_.prefix
        elif nodeName_ == 'MessageParameters':
            obj_ = NotificationParameter.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MessageParameters.append(obj_)
            obj_.original_tagname_ = 'MessageParameters'
# end class Notification


class NotificationDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, NotificationType=None, EmailDetail=None, Localization=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.NotificationType = NotificationType
        self.validate_NotificationType(self.NotificationType)
        self.NotificationType_nsprefix_ = None
        self.EmailDetail = EmailDetail
        self.EmailDetail_nsprefix_ = None
        self.Localization = Localization
        self.Localization_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotificationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotificationDetail.subclass:
            return NotificationDetail.subclass(*args_, **kwargs_)
        else:
            return NotificationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_NotificationType(self):
        return self.NotificationType
    def set_NotificationType(self, NotificationType):
        self.NotificationType = NotificationType
    def get_EmailDetail(self):
        return self.EmailDetail
    def set_EmailDetail(self, EmailDetail):
        self.EmailDetail = EmailDetail
    def get_Localization(self):
        return self.Localization
    def set_Localization(self, Localization):
        self.Localization = Localization
    def validate_NotificationType(self, value):
        result = True
        # Validate type NotificationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['EMAIL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.NotificationType is not None or
            self.EmailDetail is not None or
            self.Localization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NotificationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NotificationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NotificationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NotificationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NotificationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NotificationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NotificationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NotificationType is not None:
            namespaceprefix_ = self.NotificationType_nsprefix_ + ':' if (UseCapturedNS_ and self.NotificationType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNotificationType>%s</%sNotificationType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NotificationType), input_name='NotificationType')), namespaceprefix_ , eol_))
        if self.EmailDetail is not None:
            namespaceprefix_ = self.EmailDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.EmailDetail_nsprefix_) else ''
            self.EmailDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EmailDetail', pretty_print=pretty_print)
        if self.Localization is not None:
            namespaceprefix_ = self.Localization_nsprefix_ + ':' if (UseCapturedNS_ and self.Localization_nsprefix_) else ''
            self.Localization.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Localization', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'NotificationType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NotificationType')
            value_ = self.gds_validate_string(value_, node, 'NotificationType')
            self.NotificationType = value_
            self.NotificationType_nsprefix_ = child_.prefix
            # validate type NotificationType
            self.validate_NotificationType(self.NotificationType)
        elif nodeName_ == 'EmailDetail':
            obj_ = EMailDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EmailDetail = obj_
            obj_.original_tagname_ = 'EmailDetail'
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
# end class NotificationDetail


class NotificationParameter(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Id = Id
        self.Id_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotificationParameter)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotificationParameter.subclass:
            return NotificationParameter.subclass(*args_, **kwargs_)
        else:
            return NotificationParameter(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def hasContent_(self):
        if (
            self.Id is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NotificationParameter', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NotificationParameter')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NotificationParameter':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NotificationParameter')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NotificationParameter', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NotificationParameter'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NotificationParameter', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Id is not None:
            namespaceprefix_ = self.Id_nsprefix_ + ':' if (UseCapturedNS_ and self.Id_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sId>%s</%sId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Id':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Id')
            value_ = self.gds_validate_string(value_, node, 'Id')
            self.Id = value_
            self.Id_nsprefix_ = child_.prefix
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
# end class NotificationParameter


class OfferingIdentifierDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, Type=None, Code=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Id = Id
        self.Id_nsprefix_ = None
        self.Type = Type
        self.Type_nsprefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OfferingIdentifierDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OfferingIdentifierDetail.subclass:
            return OfferingIdentifierDetail.subclass(*args_, **kwargs_)
        else:
            return OfferingIdentifierDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def hasContent_(self):
        if (
            self.Id is not None or
            self.Type is not None or
            self.Code is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='OfferingIdentifierDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OfferingIdentifierDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OfferingIdentifierDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OfferingIdentifierDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OfferingIdentifierDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='OfferingIdentifierDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='OfferingIdentifierDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Id is not None:
            namespaceprefix_ = self.Id_nsprefix_ + ':' if (UseCapturedNS_ and self.Id_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sId>%s</%sId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), namespaceprefix_ , eol_))
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Id':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Id')
            value_ = self.gds_validate_string(value_, node, 'Id')
            self.Id = value_
            self.Id_nsprefix_ = child_.prefix
        elif nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
        elif nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
# end class OfferingIdentifierDetail


class Op900Detail(GeneratedsSuper):
    """The instructions indicating how to print the OP-900 form for hazardous
    materials packages."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Format=None, Reference=None, CustomerImageUsages=None, SignatureName=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Format = Format
        self.Format_nsprefix_ = None
        self.Reference = Reference
        self.validate_CustomerReferenceType(self.Reference)
        self.Reference_nsprefix_ = None
        if CustomerImageUsages is None:
            self.CustomerImageUsages = []
        else:
            self.CustomerImageUsages = CustomerImageUsages
        self.CustomerImageUsages_nsprefix_ = None
        self.SignatureName = SignatureName
        self.SignatureName_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Op900Detail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Op900Detail.subclass:
            return Op900Detail.subclass(*args_, **kwargs_)
        else:
            return Op900Detail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Format(self):
        return self.Format
    def set_Format(self, Format):
        self.Format = Format
    def get_Reference(self):
        return self.Reference
    def set_Reference(self, Reference):
        self.Reference = Reference
    def get_CustomerImageUsages(self):
        return self.CustomerImageUsages
    def set_CustomerImageUsages(self, CustomerImageUsages):
        self.CustomerImageUsages = CustomerImageUsages
    def add_CustomerImageUsages(self, value):
        self.CustomerImageUsages.append(value)
    def insert_CustomerImageUsages_at(self, index, value):
        self.CustomerImageUsages.insert(index, value)
    def replace_CustomerImageUsages_at(self, index, value):
        self.CustomerImageUsages[index] = value
    def get_SignatureName(self):
        return self.SignatureName
    def set_SignatureName(self, SignatureName):
        self.SignatureName = SignatureName
    def validate_CustomerReferenceType(self, value):
        result = True
        # Validate type CustomerReferenceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CUSTOMER_REFERENCE', 'DEPARTMENT_NUMBER', 'INTRACOUNTRY_REGULATORY_REFERENCE', 'INVOICE_NUMBER', 'P_O_NUMBER', 'RMA_ASSOCIATION', 'SHIPMENT_INTEGRITY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomerReferenceType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Format is not None or
            self.Reference is not None or
            self.CustomerImageUsages or
            self.SignatureName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Op900Detail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Op900Detail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Op900Detail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Op900Detail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Op900Detail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Op900Detail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Op900Detail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Format is not None:
            namespaceprefix_ = self.Format_nsprefix_ + ':' if (UseCapturedNS_ and self.Format_nsprefix_) else ''
            self.Format.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Format', pretty_print=pretty_print)
        if self.Reference is not None:
            namespaceprefix_ = self.Reference_nsprefix_ + ':' if (UseCapturedNS_ and self.Reference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReference>%s</%sReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Reference), input_name='Reference')), namespaceprefix_ , eol_))
        for CustomerImageUsages_ in self.CustomerImageUsages:
            namespaceprefix_ = self.CustomerImageUsages_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerImageUsages_nsprefix_) else ''
            CustomerImageUsages_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomerImageUsages', pretty_print=pretty_print)
        if self.SignatureName is not None:
            namespaceprefix_ = self.SignatureName_nsprefix_ + ':' if (UseCapturedNS_ and self.SignatureName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSignatureName>%s</%sSignatureName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SignatureName), input_name='SignatureName')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Format':
            obj_ = ShippingDocumentFormat.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Format = obj_
            obj_.original_tagname_ = 'Format'
        elif nodeName_ == 'Reference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Reference')
            value_ = self.gds_validate_string(value_, node, 'Reference')
            self.Reference = value_
            self.Reference_nsprefix_ = child_.prefix
            # validate type CustomerReferenceType
            self.validate_CustomerReferenceType(self.Reference)
        elif nodeName_ == 'CustomerImageUsages':
            obj_ = CustomerImageUsage.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomerImageUsages.append(obj_)
            obj_.original_tagname_ = 'CustomerImageUsages'
        elif nodeName_ == 'SignatureName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SignatureName')
            value_ = self.gds_validate_string(value_, node, 'SignatureName')
            self.SignatureName = value_
            self.SignatureName_nsprefix_ = child_.prefix
# end class Op900Detail


class OperationalInstruction(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Number=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Number = Number
        self.Number_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OperationalInstruction)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OperationalInstruction.subclass:
            return OperationalInstruction.subclass(*args_, **kwargs_)
        else:
            return OperationalInstruction(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def hasContent_(self):
        if (
            self.Number is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='OperationalInstruction', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OperationalInstruction')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OperationalInstruction':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OperationalInstruction')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OperationalInstruction', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='OperationalInstruction'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='OperationalInstruction', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.Number, input_name='Number'), namespaceprefix_ , eol_))
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContent>%s</%sContent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Content), input_name='Content')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Number' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Number')
            ival_ = self.gds_validate_integer(ival_, node, 'Number')
            self.Number = ival_
            self.Number_nsprefix_ = child_.prefix
        elif nodeName_ == 'Content':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Content')
            value_ = self.gds_validate_string(value_, node, 'Content')
            self.Content = value_
            self.Content_nsprefix_ = child_.prefix
# end class OperationalInstruction


class PackageBarcodes(GeneratedsSuper):
    """Each instance of this data type represents the set of barcodes (of all
    types) which are associated with a specific package."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, BinaryBarcodes=None, StringBarcodes=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if BinaryBarcodes is None:
            self.BinaryBarcodes = []
        else:
            self.BinaryBarcodes = BinaryBarcodes
        self.BinaryBarcodes_nsprefix_ = None
        if StringBarcodes is None:
            self.StringBarcodes = []
        else:
            self.StringBarcodes = StringBarcodes
        self.StringBarcodes_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageBarcodes)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageBarcodes.subclass:
            return PackageBarcodes.subclass(*args_, **kwargs_)
        else:
            return PackageBarcodes(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_BinaryBarcodes(self):
        return self.BinaryBarcodes
    def set_BinaryBarcodes(self, BinaryBarcodes):
        self.BinaryBarcodes = BinaryBarcodes
    def add_BinaryBarcodes(self, value):
        self.BinaryBarcodes.append(value)
    def insert_BinaryBarcodes_at(self, index, value):
        self.BinaryBarcodes.insert(index, value)
    def replace_BinaryBarcodes_at(self, index, value):
        self.BinaryBarcodes[index] = value
    def get_StringBarcodes(self):
        return self.StringBarcodes
    def set_StringBarcodes(self, StringBarcodes):
        self.StringBarcodes = StringBarcodes
    def add_StringBarcodes(self, value):
        self.StringBarcodes.append(value)
    def insert_StringBarcodes_at(self, index, value):
        self.StringBarcodes.insert(index, value)
    def replace_StringBarcodes_at(self, index, value):
        self.StringBarcodes[index] = value
    def hasContent_(self):
        if (
            self.BinaryBarcodes or
            self.StringBarcodes
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackageBarcodes', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageBarcodes')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackageBarcodes':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackageBarcodes')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackageBarcodes', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackageBarcodes'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackageBarcodes', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for BinaryBarcodes_ in self.BinaryBarcodes:
            namespaceprefix_ = self.BinaryBarcodes_nsprefix_ + ':' if (UseCapturedNS_ and self.BinaryBarcodes_nsprefix_) else ''
            BinaryBarcodes_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BinaryBarcodes', pretty_print=pretty_print)
        for StringBarcodes_ in self.StringBarcodes:
            namespaceprefix_ = self.StringBarcodes_nsprefix_ + ':' if (UseCapturedNS_ and self.StringBarcodes_nsprefix_) else ''
            StringBarcodes_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='StringBarcodes', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'BinaryBarcodes':
            obj_ = BinaryBarcode.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BinaryBarcodes.append(obj_)
            obj_.original_tagname_ = 'BinaryBarcodes'
        elif nodeName_ == 'StringBarcodes':
            obj_ = StringBarcode.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.StringBarcodes.append(obj_)
            obj_.original_tagname_ = 'StringBarcodes'
# end class PackageBarcodes


class PackageOperationalDetail(GeneratedsSuper):
    """Package-level data required for labeling and/or movement."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AstraHandlingText=None, OperationalInstructions=None, Barcodes=None, GroundServiceCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AstraHandlingText = AstraHandlingText
        self.AstraHandlingText_nsprefix_ = None
        if OperationalInstructions is None:
            self.OperationalInstructions = []
        else:
            self.OperationalInstructions = OperationalInstructions
        self.OperationalInstructions_nsprefix_ = None
        self.Barcodes = Barcodes
        self.Barcodes_nsprefix_ = None
        self.GroundServiceCode = GroundServiceCode
        self.GroundServiceCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageOperationalDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageOperationalDetail.subclass:
            return PackageOperationalDetail.subclass(*args_, **kwargs_)
        else:
            return PackageOperationalDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AstraHandlingText(self):
        return self.AstraHandlingText
    def set_AstraHandlingText(self, AstraHandlingText):
        self.AstraHandlingText = AstraHandlingText
    def get_OperationalInstructions(self):
        return self.OperationalInstructions
    def set_OperationalInstructions(self, OperationalInstructions):
        self.OperationalInstructions = OperationalInstructions
    def add_OperationalInstructions(self, value):
        self.OperationalInstructions.append(value)
    def insert_OperationalInstructions_at(self, index, value):
        self.OperationalInstructions.insert(index, value)
    def replace_OperationalInstructions_at(self, index, value):
        self.OperationalInstructions[index] = value
    def get_Barcodes(self):
        return self.Barcodes
    def set_Barcodes(self, Barcodes):
        self.Barcodes = Barcodes
    def get_GroundServiceCode(self):
        return self.GroundServiceCode
    def set_GroundServiceCode(self, GroundServiceCode):
        self.GroundServiceCode = GroundServiceCode
    def hasContent_(self):
        if (
            self.AstraHandlingText is not None or
            self.OperationalInstructions or
            self.Barcodes is not None or
            self.GroundServiceCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackageOperationalDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageOperationalDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackageOperationalDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackageOperationalDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackageOperationalDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackageOperationalDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackageOperationalDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AstraHandlingText is not None:
            namespaceprefix_ = self.AstraHandlingText_nsprefix_ + ':' if (UseCapturedNS_ and self.AstraHandlingText_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAstraHandlingText>%s</%sAstraHandlingText>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AstraHandlingText), input_name='AstraHandlingText')), namespaceprefix_ , eol_))
        for OperationalInstructions_ in self.OperationalInstructions:
            namespaceprefix_ = self.OperationalInstructions_nsprefix_ + ':' if (UseCapturedNS_ and self.OperationalInstructions_nsprefix_) else ''
            OperationalInstructions_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OperationalInstructions', pretty_print=pretty_print)
        if self.Barcodes is not None:
            namespaceprefix_ = self.Barcodes_nsprefix_ + ':' if (UseCapturedNS_ and self.Barcodes_nsprefix_) else ''
            self.Barcodes.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Barcodes', pretty_print=pretty_print)
        if self.GroundServiceCode is not None:
            namespaceprefix_ = self.GroundServiceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.GroundServiceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroundServiceCode>%s</%sGroundServiceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GroundServiceCode), input_name='GroundServiceCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AstraHandlingText':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AstraHandlingText')
            value_ = self.gds_validate_string(value_, node, 'AstraHandlingText')
            self.AstraHandlingText = value_
            self.AstraHandlingText_nsprefix_ = child_.prefix
        elif nodeName_ == 'OperationalInstructions':
            obj_ = OperationalInstruction.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OperationalInstructions.append(obj_)
            obj_.original_tagname_ = 'OperationalInstructions'
        elif nodeName_ == 'Barcodes':
            obj_ = PackageBarcodes.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Barcodes = obj_
            obj_.original_tagname_ = 'Barcodes'
        elif nodeName_ == 'GroundServiceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GroundServiceCode')
            value_ = self.gds_validate_string(value_, node, 'GroundServiceCode')
            self.GroundServiceCode = value_
            self.GroundServiceCode_nsprefix_ = child_.prefix
# end class PackageOperationalDetail


class PackageRateDetail(GeneratedsSuper):
    """Data for a package's rates, as calculated per a specific rate type."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RateType=None, RatedWeightMethod=None, MinimumChargeType=None, BillingWeight=None, DimWeight=None, OversizeWeight=None, BaseCharge=None, TotalFreightDiscounts=None, NetFreight=None, TotalSurcharges=None, NetFedExCharge=None, TotalTaxes=None, NetCharge=None, TotalRebates=None, FreightDiscounts=None, Rebates=None, Surcharges=None, Taxes=None, VariableHandlingCharges=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RateType = RateType
        self.validate_ReturnedRateType(self.RateType)
        self.RateType_nsprefix_ = None
        self.RatedWeightMethod = RatedWeightMethod
        self.validate_RatedWeightMethod(self.RatedWeightMethod)
        self.RatedWeightMethod_nsprefix_ = None
        self.MinimumChargeType = MinimumChargeType
        self.validate_MinimumChargeType(self.MinimumChargeType)
        self.MinimumChargeType_nsprefix_ = None
        self.BillingWeight = BillingWeight
        self.BillingWeight_nsprefix_ = None
        self.DimWeight = DimWeight
        self.DimWeight_nsprefix_ = None
        self.OversizeWeight = OversizeWeight
        self.OversizeWeight_nsprefix_ = None
        self.BaseCharge = BaseCharge
        self.BaseCharge_nsprefix_ = None
        self.TotalFreightDiscounts = TotalFreightDiscounts
        self.TotalFreightDiscounts_nsprefix_ = None
        self.NetFreight = NetFreight
        self.NetFreight_nsprefix_ = None
        self.TotalSurcharges = TotalSurcharges
        self.TotalSurcharges_nsprefix_ = None
        self.NetFedExCharge = NetFedExCharge
        self.NetFedExCharge_nsprefix_ = None
        self.TotalTaxes = TotalTaxes
        self.TotalTaxes_nsprefix_ = None
        self.NetCharge = NetCharge
        self.NetCharge_nsprefix_ = None
        self.TotalRebates = TotalRebates
        self.TotalRebates_nsprefix_ = None
        if FreightDiscounts is None:
            self.FreightDiscounts = []
        else:
            self.FreightDiscounts = FreightDiscounts
        self.FreightDiscounts_nsprefix_ = None
        if Rebates is None:
            self.Rebates = []
        else:
            self.Rebates = Rebates
        self.Rebates_nsprefix_ = None
        if Surcharges is None:
            self.Surcharges = []
        else:
            self.Surcharges = Surcharges
        self.Surcharges_nsprefix_ = None
        if Taxes is None:
            self.Taxes = []
        else:
            self.Taxes = Taxes
        self.Taxes_nsprefix_ = None
        self.VariableHandlingCharges = VariableHandlingCharges
        self.VariableHandlingCharges_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageRateDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageRateDetail.subclass:
            return PackageRateDetail.subclass(*args_, **kwargs_)
        else:
            return PackageRateDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RateType(self):
        return self.RateType
    def set_RateType(self, RateType):
        self.RateType = RateType
    def get_RatedWeightMethod(self):
        return self.RatedWeightMethod
    def set_RatedWeightMethod(self, RatedWeightMethod):
        self.RatedWeightMethod = RatedWeightMethod
    def get_MinimumChargeType(self):
        return self.MinimumChargeType
    def set_MinimumChargeType(self, MinimumChargeType):
        self.MinimumChargeType = MinimumChargeType
    def get_BillingWeight(self):
        return self.BillingWeight
    def set_BillingWeight(self, BillingWeight):
        self.BillingWeight = BillingWeight
    def get_DimWeight(self):
        return self.DimWeight
    def set_DimWeight(self, DimWeight):
        self.DimWeight = DimWeight
    def get_OversizeWeight(self):
        return self.OversizeWeight
    def set_OversizeWeight(self, OversizeWeight):
        self.OversizeWeight = OversizeWeight
    def get_BaseCharge(self):
        return self.BaseCharge
    def set_BaseCharge(self, BaseCharge):
        self.BaseCharge = BaseCharge
    def get_TotalFreightDiscounts(self):
        return self.TotalFreightDiscounts
    def set_TotalFreightDiscounts(self, TotalFreightDiscounts):
        self.TotalFreightDiscounts = TotalFreightDiscounts
    def get_NetFreight(self):
        return self.NetFreight
    def set_NetFreight(self, NetFreight):
        self.NetFreight = NetFreight
    def get_TotalSurcharges(self):
        return self.TotalSurcharges
    def set_TotalSurcharges(self, TotalSurcharges):
        self.TotalSurcharges = TotalSurcharges
    def get_NetFedExCharge(self):
        return self.NetFedExCharge
    def set_NetFedExCharge(self, NetFedExCharge):
        self.NetFedExCharge = NetFedExCharge
    def get_TotalTaxes(self):
        return self.TotalTaxes
    def set_TotalTaxes(self, TotalTaxes):
        self.TotalTaxes = TotalTaxes
    def get_NetCharge(self):
        return self.NetCharge
    def set_NetCharge(self, NetCharge):
        self.NetCharge = NetCharge
    def get_TotalRebates(self):
        return self.TotalRebates
    def set_TotalRebates(self, TotalRebates):
        self.TotalRebates = TotalRebates
    def get_FreightDiscounts(self):
        return self.FreightDiscounts
    def set_FreightDiscounts(self, FreightDiscounts):
        self.FreightDiscounts = FreightDiscounts
    def add_FreightDiscounts(self, value):
        self.FreightDiscounts.append(value)
    def insert_FreightDiscounts_at(self, index, value):
        self.FreightDiscounts.insert(index, value)
    def replace_FreightDiscounts_at(self, index, value):
        self.FreightDiscounts[index] = value
    def get_Rebates(self):
        return self.Rebates
    def set_Rebates(self, Rebates):
        self.Rebates = Rebates
    def add_Rebates(self, value):
        self.Rebates.append(value)
    def insert_Rebates_at(self, index, value):
        self.Rebates.insert(index, value)
    def replace_Rebates_at(self, index, value):
        self.Rebates[index] = value
    def get_Surcharges(self):
        return self.Surcharges
    def set_Surcharges(self, Surcharges):
        self.Surcharges = Surcharges
    def add_Surcharges(self, value):
        self.Surcharges.append(value)
    def insert_Surcharges_at(self, index, value):
        self.Surcharges.insert(index, value)
    def replace_Surcharges_at(self, index, value):
        self.Surcharges[index] = value
    def get_Taxes(self):
        return self.Taxes
    def set_Taxes(self, Taxes):
        self.Taxes = Taxes
    def add_Taxes(self, value):
        self.Taxes.append(value)
    def insert_Taxes_at(self, index, value):
        self.Taxes.insert(index, value)
    def replace_Taxes_at(self, index, value):
        self.Taxes[index] = value
    def get_VariableHandlingCharges(self):
        return self.VariableHandlingCharges
    def set_VariableHandlingCharges(self, VariableHandlingCharges):
        self.VariableHandlingCharges = VariableHandlingCharges
    def validate_ReturnedRateType(self, value):
        result = True
        # Validate type ReturnedRateType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['INCENTIVE', 'NEGOTIATED', 'PAYOR_ACCOUNT_PACKAGE', 'PAYOR_ACCOUNT_SHIPMENT', 'PAYOR_LIST_PACKAGE', 'PAYOR_LIST_SHIPMENT', 'PREFERRED_ACCOUNT_PACKAGE', 'PREFERRED_ACCOUNT_SHIPMENT', 'PREFERRED_LIST_PACKAGE', 'PREFERRED_LIST_SHIPMENT', 'PREFERRED_NEGOTIATED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ReturnedRateType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_RatedWeightMethod(self, value):
        result = True
        # Validate type RatedWeightMethod, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACTUAL', 'AVERAGE_PACKAGE_WEIGHT_MINIMUM', 'BALLOON', 'DEFAULT_WEIGHT_APPLIED', 'DIM', 'FREIGHT_MINIMUM', 'MIXED', 'OVERSIZE', 'OVERSIZE_1', 'OVERSIZE_2', 'OVERSIZE_3', 'PACKAGING_MINIMUM', 'WEIGHT_BREAK']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RatedWeightMethod' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_MinimumChargeType(self, value):
        result = True
        # Validate type MinimumChargeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CUSTOMER', 'CUSTOMER_FREIGHT_WEIGHT', 'EARNED_DISCOUNT', 'MIXED', 'RATE_SCALE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on MinimumChargeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.RateType is not None or
            self.RatedWeightMethod is not None or
            self.MinimumChargeType is not None or
            self.BillingWeight is not None or
            self.DimWeight is not None or
            self.OversizeWeight is not None or
            self.BaseCharge is not None or
            self.TotalFreightDiscounts is not None or
            self.NetFreight is not None or
            self.TotalSurcharges is not None or
            self.NetFedExCharge is not None or
            self.TotalTaxes is not None or
            self.NetCharge is not None or
            self.TotalRebates is not None or
            self.FreightDiscounts or
            self.Rebates or
            self.Surcharges or
            self.Taxes or
            self.VariableHandlingCharges is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackageRateDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageRateDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackageRateDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackageRateDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackageRateDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackageRateDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackageRateDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RateType is not None:
            namespaceprefix_ = self.RateType_nsprefix_ + ':' if (UseCapturedNS_ and self.RateType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateType>%s</%sRateType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateType), input_name='RateType')), namespaceprefix_ , eol_))
        if self.RatedWeightMethod is not None:
            namespaceprefix_ = self.RatedWeightMethod_nsprefix_ + ':' if (UseCapturedNS_ and self.RatedWeightMethod_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRatedWeightMethod>%s</%sRatedWeightMethod>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RatedWeightMethod), input_name='RatedWeightMethod')), namespaceprefix_ , eol_))
        if self.MinimumChargeType is not None:
            namespaceprefix_ = self.MinimumChargeType_nsprefix_ + ':' if (UseCapturedNS_ and self.MinimumChargeType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMinimumChargeType>%s</%sMinimumChargeType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MinimumChargeType), input_name='MinimumChargeType')), namespaceprefix_ , eol_))
        if self.BillingWeight is not None:
            namespaceprefix_ = self.BillingWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.BillingWeight_nsprefix_) else ''
            self.BillingWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BillingWeight', pretty_print=pretty_print)
        if self.DimWeight is not None:
            namespaceprefix_ = self.DimWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.DimWeight_nsprefix_) else ''
            self.DimWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DimWeight', pretty_print=pretty_print)
        if self.OversizeWeight is not None:
            namespaceprefix_ = self.OversizeWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.OversizeWeight_nsprefix_) else ''
            self.OversizeWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OversizeWeight', pretty_print=pretty_print)
        if self.BaseCharge is not None:
            namespaceprefix_ = self.BaseCharge_nsprefix_ + ':' if (UseCapturedNS_ and self.BaseCharge_nsprefix_) else ''
            self.BaseCharge.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BaseCharge', pretty_print=pretty_print)
        if self.TotalFreightDiscounts is not None:
            namespaceprefix_ = self.TotalFreightDiscounts_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalFreightDiscounts_nsprefix_) else ''
            self.TotalFreightDiscounts.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalFreightDiscounts', pretty_print=pretty_print)
        if self.NetFreight is not None:
            namespaceprefix_ = self.NetFreight_nsprefix_ + ':' if (UseCapturedNS_ and self.NetFreight_nsprefix_) else ''
            self.NetFreight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NetFreight', pretty_print=pretty_print)
        if self.TotalSurcharges is not None:
            namespaceprefix_ = self.TotalSurcharges_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalSurcharges_nsprefix_) else ''
            self.TotalSurcharges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalSurcharges', pretty_print=pretty_print)
        if self.NetFedExCharge is not None:
            namespaceprefix_ = self.NetFedExCharge_nsprefix_ + ':' if (UseCapturedNS_ and self.NetFedExCharge_nsprefix_) else ''
            self.NetFedExCharge.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NetFedExCharge', pretty_print=pretty_print)
        if self.TotalTaxes is not None:
            namespaceprefix_ = self.TotalTaxes_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalTaxes_nsprefix_) else ''
            self.TotalTaxes.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalTaxes', pretty_print=pretty_print)
        if self.NetCharge is not None:
            namespaceprefix_ = self.NetCharge_nsprefix_ + ':' if (UseCapturedNS_ and self.NetCharge_nsprefix_) else ''
            self.NetCharge.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NetCharge', pretty_print=pretty_print)
        if self.TotalRebates is not None:
            namespaceprefix_ = self.TotalRebates_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalRebates_nsprefix_) else ''
            self.TotalRebates.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalRebates', pretty_print=pretty_print)
        for FreightDiscounts_ in self.FreightDiscounts:
            namespaceprefix_ = self.FreightDiscounts_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightDiscounts_nsprefix_) else ''
            FreightDiscounts_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreightDiscounts', pretty_print=pretty_print)
        for Rebates_ in self.Rebates:
            namespaceprefix_ = self.Rebates_nsprefix_ + ':' if (UseCapturedNS_ and self.Rebates_nsprefix_) else ''
            Rebates_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Rebates', pretty_print=pretty_print)
        for Surcharges_ in self.Surcharges:
            namespaceprefix_ = self.Surcharges_nsprefix_ + ':' if (UseCapturedNS_ and self.Surcharges_nsprefix_) else ''
            Surcharges_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Surcharges', pretty_print=pretty_print)
        for Taxes_ in self.Taxes:
            namespaceprefix_ = self.Taxes_nsprefix_ + ':' if (UseCapturedNS_ and self.Taxes_nsprefix_) else ''
            Taxes_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Taxes', pretty_print=pretty_print)
        if self.VariableHandlingCharges is not None:
            namespaceprefix_ = self.VariableHandlingCharges_nsprefix_ + ':' if (UseCapturedNS_ and self.VariableHandlingCharges_nsprefix_) else ''
            self.VariableHandlingCharges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='VariableHandlingCharges', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RateType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RateType')
            value_ = self.gds_validate_string(value_, node, 'RateType')
            self.RateType = value_
            self.RateType_nsprefix_ = child_.prefix
            # validate type ReturnedRateType
            self.validate_ReturnedRateType(self.RateType)
        elif nodeName_ == 'RatedWeightMethod':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RatedWeightMethod')
            value_ = self.gds_validate_string(value_, node, 'RatedWeightMethod')
            self.RatedWeightMethod = value_
            self.RatedWeightMethod_nsprefix_ = child_.prefix
            # validate type RatedWeightMethod
            self.validate_RatedWeightMethod(self.RatedWeightMethod)
        elif nodeName_ == 'MinimumChargeType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MinimumChargeType')
            value_ = self.gds_validate_string(value_, node, 'MinimumChargeType')
            self.MinimumChargeType = value_
            self.MinimumChargeType_nsprefix_ = child_.prefix
            # validate type MinimumChargeType
            self.validate_MinimumChargeType(self.MinimumChargeType)
        elif nodeName_ == 'BillingWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BillingWeight = obj_
            obj_.original_tagname_ = 'BillingWeight'
        elif nodeName_ == 'DimWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DimWeight = obj_
            obj_.original_tagname_ = 'DimWeight'
        elif nodeName_ == 'OversizeWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OversizeWeight = obj_
            obj_.original_tagname_ = 'OversizeWeight'
        elif nodeName_ == 'BaseCharge':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BaseCharge = obj_
            obj_.original_tagname_ = 'BaseCharge'
        elif nodeName_ == 'TotalFreightDiscounts':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalFreightDiscounts = obj_
            obj_.original_tagname_ = 'TotalFreightDiscounts'
        elif nodeName_ == 'NetFreight':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NetFreight = obj_
            obj_.original_tagname_ = 'NetFreight'
        elif nodeName_ == 'TotalSurcharges':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalSurcharges = obj_
            obj_.original_tagname_ = 'TotalSurcharges'
        elif nodeName_ == 'NetFedExCharge':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NetFedExCharge = obj_
            obj_.original_tagname_ = 'NetFedExCharge'
        elif nodeName_ == 'TotalTaxes':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalTaxes = obj_
            obj_.original_tagname_ = 'TotalTaxes'
        elif nodeName_ == 'NetCharge':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NetCharge = obj_
            obj_.original_tagname_ = 'NetCharge'
        elif nodeName_ == 'TotalRebates':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalRebates = obj_
            obj_.original_tagname_ = 'TotalRebates'
        elif nodeName_ == 'FreightDiscounts':
            obj_ = RateDiscount.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreightDiscounts.append(obj_)
            obj_.original_tagname_ = 'FreightDiscounts'
        elif nodeName_ == 'Rebates':
            obj_ = Rebate.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Rebates.append(obj_)
            obj_.original_tagname_ = 'Rebates'
        elif nodeName_ == 'Surcharges':
            obj_ = Surcharge.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Surcharges.append(obj_)
            obj_.original_tagname_ = 'Surcharges'
        elif nodeName_ == 'Taxes':
            obj_ = Tax.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Taxes.append(obj_)
            obj_.original_tagname_ = 'Taxes'
        elif nodeName_ == 'VariableHandlingCharges':
            obj_ = VariableHandlingCharges.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.VariableHandlingCharges = obj_
            obj_.original_tagname_ = 'VariableHandlingCharges'
# end class PackageRateDetail


class PackageRating(GeneratedsSuper):
    """This class groups together for a single package all package-level rate
    data (across all rate types) as part of the response to a shipping
    request, which groups shipment-level data together and groups package-
    level data by package."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ActualRateType=None, EffectiveNetDiscount=None, PackageRateDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ActualRateType = ActualRateType
        self.validate_ReturnedRateType(self.ActualRateType)
        self.ActualRateType_nsprefix_ = None
        self.EffectiveNetDiscount = EffectiveNetDiscount
        self.EffectiveNetDiscount_nsprefix_ = None
        if PackageRateDetails is None:
            self.PackageRateDetails = []
        else:
            self.PackageRateDetails = PackageRateDetails
        self.PackageRateDetails_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageRating)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageRating.subclass:
            return PackageRating.subclass(*args_, **kwargs_)
        else:
            return PackageRating(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ActualRateType(self):
        return self.ActualRateType
    def set_ActualRateType(self, ActualRateType):
        self.ActualRateType = ActualRateType
    def get_EffectiveNetDiscount(self):
        return self.EffectiveNetDiscount
    def set_EffectiveNetDiscount(self, EffectiveNetDiscount):
        self.EffectiveNetDiscount = EffectiveNetDiscount
    def get_PackageRateDetails(self):
        return self.PackageRateDetails
    def set_PackageRateDetails(self, PackageRateDetails):
        self.PackageRateDetails = PackageRateDetails
    def add_PackageRateDetails(self, value):
        self.PackageRateDetails.append(value)
    def insert_PackageRateDetails_at(self, index, value):
        self.PackageRateDetails.insert(index, value)
    def replace_PackageRateDetails_at(self, index, value):
        self.PackageRateDetails[index] = value
    def validate_ReturnedRateType(self, value):
        result = True
        # Validate type ReturnedRateType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['INCENTIVE', 'NEGOTIATED', 'PAYOR_ACCOUNT_PACKAGE', 'PAYOR_ACCOUNT_SHIPMENT', 'PAYOR_LIST_PACKAGE', 'PAYOR_LIST_SHIPMENT', 'PREFERRED_ACCOUNT_PACKAGE', 'PREFERRED_ACCOUNT_SHIPMENT', 'PREFERRED_LIST_PACKAGE', 'PREFERRED_LIST_SHIPMENT', 'PREFERRED_NEGOTIATED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ReturnedRateType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.ActualRateType is not None or
            self.EffectiveNetDiscount is not None or
            self.PackageRateDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackageRating', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageRating')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackageRating':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackageRating')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackageRating', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackageRating'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackageRating', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ActualRateType is not None:
            namespaceprefix_ = self.ActualRateType_nsprefix_ + ':' if (UseCapturedNS_ and self.ActualRateType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActualRateType>%s</%sActualRateType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ActualRateType), input_name='ActualRateType')), namespaceprefix_ , eol_))
        if self.EffectiveNetDiscount is not None:
            namespaceprefix_ = self.EffectiveNetDiscount_nsprefix_ + ':' if (UseCapturedNS_ and self.EffectiveNetDiscount_nsprefix_) else ''
            self.EffectiveNetDiscount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EffectiveNetDiscount', pretty_print=pretty_print)
        for PackageRateDetails_ in self.PackageRateDetails:
            namespaceprefix_ = self.PackageRateDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageRateDetails_nsprefix_) else ''
            PackageRateDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackageRateDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ActualRateType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ActualRateType')
            value_ = self.gds_validate_string(value_, node, 'ActualRateType')
            self.ActualRateType = value_
            self.ActualRateType_nsprefix_ = child_.prefix
            # validate type ReturnedRateType
            self.validate_ReturnedRateType(self.ActualRateType)
        elif nodeName_ == 'EffectiveNetDiscount':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EffectiveNetDiscount = obj_
            obj_.original_tagname_ = 'EffectiveNetDiscount'
        elif nodeName_ == 'PackageRateDetails':
            obj_ = PackageRateDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackageRateDetails.append(obj_)
            obj_.original_tagname_ = 'PackageRateDetails'
# end class PackageRating


class PackageSpecialServicesRequested(GeneratedsSuper):
    """These special services are available at the package level for some or
    all service types. If the shipper is requesting a special service which
    requires additional data, the package special service type must be
    present in the specialServiceTypes collection, and the supporting
    detail must be provided in the appropriate sub-object below."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SpecialServiceTypes=None, CodDetail=None, DangerousGoodsDetail=None, BatteryDetails=None, DryIceWeight=None, SignatureOptionDetail=None, PriorityAlertDetail=None, AlcoholDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if SpecialServiceTypes is None:
            self.SpecialServiceTypes = []
        else:
            self.SpecialServiceTypes = SpecialServiceTypes
        self.SpecialServiceTypes_nsprefix_ = None
        self.CodDetail = CodDetail
        self.CodDetail_nsprefix_ = None
        self.DangerousGoodsDetail = DangerousGoodsDetail
        self.DangerousGoodsDetail_nsprefix_ = None
        if BatteryDetails is None:
            self.BatteryDetails = []
        else:
            self.BatteryDetails = BatteryDetails
        self.BatteryDetails_nsprefix_ = None
        self.DryIceWeight = DryIceWeight
        self.DryIceWeight_nsprefix_ = None
        self.SignatureOptionDetail = SignatureOptionDetail
        self.SignatureOptionDetail_nsprefix_ = None
        self.PriorityAlertDetail = PriorityAlertDetail
        self.PriorityAlertDetail_nsprefix_ = None
        self.AlcoholDetail = AlcoholDetail
        self.AlcoholDetail_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackageSpecialServicesRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackageSpecialServicesRequested.subclass:
            return PackageSpecialServicesRequested.subclass(*args_, **kwargs_)
        else:
            return PackageSpecialServicesRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SpecialServiceTypes(self):
        return self.SpecialServiceTypes
    def set_SpecialServiceTypes(self, SpecialServiceTypes):
        self.SpecialServiceTypes = SpecialServiceTypes
    def add_SpecialServiceTypes(self, value):
        self.SpecialServiceTypes.append(value)
    def insert_SpecialServiceTypes_at(self, index, value):
        self.SpecialServiceTypes.insert(index, value)
    def replace_SpecialServiceTypes_at(self, index, value):
        self.SpecialServiceTypes[index] = value
    def get_CodDetail(self):
        return self.CodDetail
    def set_CodDetail(self, CodDetail):
        self.CodDetail = CodDetail
    def get_DangerousGoodsDetail(self):
        return self.DangerousGoodsDetail
    def set_DangerousGoodsDetail(self, DangerousGoodsDetail):
        self.DangerousGoodsDetail = DangerousGoodsDetail
    def get_BatteryDetails(self):
        return self.BatteryDetails
    def set_BatteryDetails(self, BatteryDetails):
        self.BatteryDetails = BatteryDetails
    def add_BatteryDetails(self, value):
        self.BatteryDetails.append(value)
    def insert_BatteryDetails_at(self, index, value):
        self.BatteryDetails.insert(index, value)
    def replace_BatteryDetails_at(self, index, value):
        self.BatteryDetails[index] = value
    def get_DryIceWeight(self):
        return self.DryIceWeight
    def set_DryIceWeight(self, DryIceWeight):
        self.DryIceWeight = DryIceWeight
    def get_SignatureOptionDetail(self):
        return self.SignatureOptionDetail
    def set_SignatureOptionDetail(self, SignatureOptionDetail):
        self.SignatureOptionDetail = SignatureOptionDetail
    def get_PriorityAlertDetail(self):
        return self.PriorityAlertDetail
    def set_PriorityAlertDetail(self, PriorityAlertDetail):
        self.PriorityAlertDetail = PriorityAlertDetail
    def get_AlcoholDetail(self):
        return self.AlcoholDetail
    def set_AlcoholDetail(self, AlcoholDetail):
        self.AlcoholDetail = AlcoholDetail
    def hasContent_(self):
        if (
            self.SpecialServiceTypes or
            self.CodDetail is not None or
            self.DangerousGoodsDetail is not None or
            self.BatteryDetails or
            self.DryIceWeight is not None or
            self.SignatureOptionDetail is not None or
            self.PriorityAlertDetail is not None or
            self.AlcoholDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackageSpecialServicesRequested', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackageSpecialServicesRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackageSpecialServicesRequested':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackageSpecialServicesRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackageSpecialServicesRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackageSpecialServicesRequested'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackageSpecialServicesRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SpecialServiceTypes_ in self.SpecialServiceTypes:
            namespaceprefix_ = self.SpecialServiceTypes_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialServiceTypes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialServiceTypes>%s</%sSpecialServiceTypes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(SpecialServiceTypes_), input_name='SpecialServiceTypes')), namespaceprefix_ , eol_))
        if self.CodDetail is not None:
            namespaceprefix_ = self.CodDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CodDetail_nsprefix_) else ''
            self.CodDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CodDetail', pretty_print=pretty_print)
        if self.DangerousGoodsDetail is not None:
            namespaceprefix_ = self.DangerousGoodsDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.DangerousGoodsDetail_nsprefix_) else ''
            self.DangerousGoodsDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DangerousGoodsDetail', pretty_print=pretty_print)
        for BatteryDetails_ in self.BatteryDetails:
            namespaceprefix_ = self.BatteryDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.BatteryDetails_nsprefix_) else ''
            BatteryDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BatteryDetails', pretty_print=pretty_print)
        if self.DryIceWeight is not None:
            namespaceprefix_ = self.DryIceWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.DryIceWeight_nsprefix_) else ''
            self.DryIceWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DryIceWeight', pretty_print=pretty_print)
        if self.SignatureOptionDetail is not None:
            namespaceprefix_ = self.SignatureOptionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.SignatureOptionDetail_nsprefix_) else ''
            self.SignatureOptionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SignatureOptionDetail', pretty_print=pretty_print)
        if self.PriorityAlertDetail is not None:
            namespaceprefix_ = self.PriorityAlertDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.PriorityAlertDetail_nsprefix_) else ''
            self.PriorityAlertDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PriorityAlertDetail', pretty_print=pretty_print)
        if self.AlcoholDetail is not None:
            namespaceprefix_ = self.AlcoholDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.AlcoholDetail_nsprefix_) else ''
            self.AlcoholDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AlcoholDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SpecialServiceTypes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecialServiceTypes')
            value_ = self.gds_validate_string(value_, node, 'SpecialServiceTypes')
            self.SpecialServiceTypes.append(value_)
            self.SpecialServiceTypes_nsprefix_ = child_.prefix
        elif nodeName_ == 'CodDetail':
            obj_ = CodDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CodDetail = obj_
            obj_.original_tagname_ = 'CodDetail'
        elif nodeName_ == 'DangerousGoodsDetail':
            obj_ = DangerousGoodsDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DangerousGoodsDetail = obj_
            obj_.original_tagname_ = 'DangerousGoodsDetail'
        elif nodeName_ == 'BatteryDetails':
            obj_ = BatteryClassificationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BatteryDetails.append(obj_)
            obj_.original_tagname_ = 'BatteryDetails'
        elif nodeName_ == 'DryIceWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DryIceWeight = obj_
            obj_.original_tagname_ = 'DryIceWeight'
        elif nodeName_ == 'SignatureOptionDetail':
            obj_ = SignatureOptionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SignatureOptionDetail = obj_
            obj_.original_tagname_ = 'SignatureOptionDetail'
        elif nodeName_ == 'PriorityAlertDetail':
            obj_ = PriorityAlertDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PriorityAlertDetail = obj_
            obj_.original_tagname_ = 'PriorityAlertDetail'
        elif nodeName_ == 'AlcoholDetail':
            obj_ = AlcoholDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AlcoholDetail = obj_
            obj_.original_tagname_ = 'AlcoholDetail'
# end class PackageSpecialServicesRequested


class PackagingDescription(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PackagingType=None, Code=None, Names=None, Description=None, AstraDescription=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PackagingType = PackagingType
        self.PackagingType_nsprefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        if Names is None:
            self.Names = []
        else:
            self.Names = Names
        self.Names_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.AstraDescription = AstraDescription
        self.AstraDescription_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackagingDescription)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackagingDescription.subclass:
            return PackagingDescription.subclass(*args_, **kwargs_)
        else:
            return PackagingDescription(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PackagingType(self):
        return self.PackagingType
    def set_PackagingType(self, PackagingType):
        self.PackagingType = PackagingType
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Names(self):
        return self.Names
    def set_Names(self, Names):
        self.Names = Names
    def add_Names(self, value):
        self.Names.append(value)
    def insert_Names_at(self, index, value):
        self.Names.insert(index, value)
    def replace_Names_at(self, index, value):
        self.Names[index] = value
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_AstraDescription(self):
        return self.AstraDescription
    def set_AstraDescription(self, AstraDescription):
        self.AstraDescription = AstraDescription
    def hasContent_(self):
        if (
            self.PackagingType is not None or
            self.Code is not None or
            self.Names or
            self.Description is not None or
            self.AstraDescription is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackagingDescription', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackagingDescription')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackagingDescription':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackagingDescription')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackagingDescription', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PackagingDescription'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PackagingDescription', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackagingType is not None:
            namespaceprefix_ = self.PackagingType_nsprefix_ + ':' if (UseCapturedNS_ and self.PackagingType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackagingType>%s</%sPackagingType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PackagingType), input_name='PackagingType')), namespaceprefix_ , eol_))
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        for Names_ in self.Names:
            namespaceprefix_ = self.Names_nsprefix_ + ':' if (UseCapturedNS_ and self.Names_nsprefix_) else ''
            Names_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Names', pretty_print=pretty_print)
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.AstraDescription is not None:
            namespaceprefix_ = self.AstraDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.AstraDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAstraDescription>%s</%sAstraDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AstraDescription), input_name='AstraDescription')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PackagingType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackagingType')
            value_ = self.gds_validate_string(value_, node, 'PackagingType')
            self.PackagingType = value_
            self.PackagingType_nsprefix_ = child_.prefix
        elif nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Names':
            obj_ = ProductName.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Names.append(obj_)
            obj_.original_tagname_ = 'Names'
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'AstraDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AstraDescription')
            value_ = self.gds_validate_string(value_, node, 'AstraDescription')
            self.AstraDescription = value_
            self.AstraDescription_nsprefix_ = child_.prefix
# end class PackagingDescription


class Party(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, Tins=None, Contact=None, Address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AccountNumber = AccountNumber
        self.AccountNumber_nsprefix_ = None
        if Tins is None:
            self.Tins = []
        else:
            self.Tins = Tins
        self.Tins_nsprefix_ = None
        self.Contact = Contact
        self.Contact_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Party)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Party.subclass:
            return Party.subclass(*args_, **kwargs_)
        else:
            return Party(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AccountNumber(self):
        return self.AccountNumber
    def set_AccountNumber(self, AccountNumber):
        self.AccountNumber = AccountNumber
    def get_Tins(self):
        return self.Tins
    def set_Tins(self, Tins):
        self.Tins = Tins
    def add_Tins(self, value):
        self.Tins.append(value)
    def insert_Tins_at(self, index, value):
        self.Tins.insert(index, value)
    def replace_Tins_at(self, index, value):
        self.Tins[index] = value
    def get_Contact(self):
        return self.Contact
    def set_Contact(self, Contact):
        self.Contact = Contact
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.Tins or
            self.Contact is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Party', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Party')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Party':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Party')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Party', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Party'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Party', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountNumber is not None:
            namespaceprefix_ = self.AccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), namespaceprefix_ , eol_))
        for Tins_ in self.Tins:
            namespaceprefix_ = self.Tins_nsprefix_ + ':' if (UseCapturedNS_ and self.Tins_nsprefix_) else ''
            Tins_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Tins', pretty_print=pretty_print)
        if self.Contact is not None:
            namespaceprefix_ = self.Contact_nsprefix_ + ':' if (UseCapturedNS_ and self.Contact_nsprefix_) else ''
            self.Contact.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Contact', pretty_print=pretty_print)
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountNumber')
            value_ = self.gds_validate_string(value_, node, 'AccountNumber')
            self.AccountNumber = value_
            self.AccountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Tins':
            obj_ = TaxpayerIdentification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Tins.append(obj_)
            obj_.original_tagname_ = 'Tins'
        elif nodeName_ == 'Contact':
            obj_ = Contact.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Address':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class Party


class Payment(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PaymentType=None, Payor=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PaymentType = PaymentType
        self.validate_PaymentType(self.PaymentType)
        self.PaymentType_nsprefix_ = None
        self.Payor = Payor
        self.Payor_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Payment)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Payment.subclass:
            return Payment.subclass(*args_, **kwargs_)
        else:
            return Payment(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PaymentType(self):
        return self.PaymentType
    def set_PaymentType(self, PaymentType):
        self.PaymentType = PaymentType
    def get_Payor(self):
        return self.Payor
    def set_Payor(self, Payor):
        self.Payor = Payor
    def validate_PaymentType(self, value):
        result = True
        # Validate type PaymentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACCOUNT', 'COLLECT', 'RECIPIENT', 'SENDER', 'THIRD_PARTY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PaymentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.PaymentType is not None or
            self.Payor is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Payment', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Payment')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Payment':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Payment')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Payment', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Payment'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Payment', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PaymentType is not None:
            namespaceprefix_ = self.PaymentType_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentType>%s</%sPaymentType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PaymentType), input_name='PaymentType')), namespaceprefix_ , eol_))
        if self.Payor is not None:
            namespaceprefix_ = self.Payor_nsprefix_ + ':' if (UseCapturedNS_ and self.Payor_nsprefix_) else ''
            self.Payor.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Payor', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PaymentType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PaymentType')
            value_ = self.gds_validate_string(value_, node, 'PaymentType')
            self.PaymentType = value_
            self.PaymentType_nsprefix_ = child_.prefix
            # validate type PaymentType
            self.validate_PaymentType(self.PaymentType)
        elif nodeName_ == 'Payor':
            obj_ = Payor.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Payor = obj_
            obj_.original_tagname_ = 'Payor'
# end class Payment


class Payor(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ResponsibleParty=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ResponsibleParty = ResponsibleParty
        self.ResponsibleParty_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Payor)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Payor.subclass:
            return Payor.subclass(*args_, **kwargs_)
        else:
            return Payor(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ResponsibleParty(self):
        return self.ResponsibleParty
    def set_ResponsibleParty(self, ResponsibleParty):
        self.ResponsibleParty = ResponsibleParty
    def hasContent_(self):
        if (
            self.ResponsibleParty is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Payor', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Payor')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Payor':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Payor')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Payor', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Payor'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Payor', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ResponsibleParty is not None:
            namespaceprefix_ = self.ResponsibleParty_nsprefix_ + ':' if (UseCapturedNS_ and self.ResponsibleParty_nsprefix_) else ''
            self.ResponsibleParty.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ResponsibleParty', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ResponsibleParty':
            obj_ = Party.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ResponsibleParty = obj_
            obj_.original_tagname_ = 'ResponsibleParty'
# end class Payor


class PendingShipmentAccessDetail(GeneratedsSuper):
    """This information describes how and when a pending shipment may be
    accessed for completion."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AccessorDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if AccessorDetails is None:
            self.AccessorDetails = []
        else:
            self.AccessorDetails = AccessorDetails
        self.AccessorDetails_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PendingShipmentAccessDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PendingShipmentAccessDetail.subclass:
            return PendingShipmentAccessDetail.subclass(*args_, **kwargs_)
        else:
            return PendingShipmentAccessDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AccessorDetails(self):
        return self.AccessorDetails
    def set_AccessorDetails(self, AccessorDetails):
        self.AccessorDetails = AccessorDetails
    def add_AccessorDetails(self, value):
        self.AccessorDetails.append(value)
    def insert_AccessorDetails_at(self, index, value):
        self.AccessorDetails.insert(index, value)
    def replace_AccessorDetails_at(self, index, value):
        self.AccessorDetails[index] = value
    def hasContent_(self):
        if (
            self.AccessorDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PendingShipmentAccessDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PendingShipmentAccessDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PendingShipmentAccessDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PendingShipmentAccessDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PendingShipmentAccessDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PendingShipmentAccessDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PendingShipmentAccessDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AccessorDetails_ in self.AccessorDetails:
            namespaceprefix_ = self.AccessorDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.AccessorDetails_nsprefix_) else ''
            AccessorDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AccessorDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AccessorDetails':
            obj_ = PendingShipmentAccessorDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AccessorDetails.append(obj_)
            obj_.original_tagname_ = 'AccessorDetails'
# end class PendingShipmentAccessDetail


class PendingShipmentAccessorDetail(GeneratedsSuper):
    """Specifies the details to be used by the user of the pending shipment"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Role=None, UserId=None, Password=None, EmailLabelUrl=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Role = Role
        self.validate_AccessorRoleType(self.Role)
        self.Role_nsprefix_ = None
        self.UserId = UserId
        self.UserId_nsprefix_ = None
        self.Password = Password
        self.Password_nsprefix_ = None
        self.EmailLabelUrl = EmailLabelUrl
        self.EmailLabelUrl_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PendingShipmentAccessorDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PendingShipmentAccessorDetail.subclass:
            return PendingShipmentAccessorDetail.subclass(*args_, **kwargs_)
        else:
            return PendingShipmentAccessorDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Role(self):
        return self.Role
    def set_Role(self, Role):
        self.Role = Role
    def get_UserId(self):
        return self.UserId
    def set_UserId(self, UserId):
        self.UserId = UserId
    def get_Password(self):
        return self.Password
    def set_Password(self, Password):
        self.Password = Password
    def get_EmailLabelUrl(self):
        return self.EmailLabelUrl
    def set_EmailLabelUrl(self, EmailLabelUrl):
        self.EmailLabelUrl = EmailLabelUrl
    def validate_AccessorRoleType(self, value):
        result = True
        # Validate type AccessorRoleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['SHIPMENT_COMPLETOR', 'SHIPMENT_INITIATOR']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on AccessorRoleType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Role is not None or
            self.UserId is not None or
            self.Password is not None or
            self.EmailLabelUrl is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PendingShipmentAccessorDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PendingShipmentAccessorDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PendingShipmentAccessorDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PendingShipmentAccessorDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PendingShipmentAccessorDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PendingShipmentAccessorDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PendingShipmentAccessorDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Role is not None:
            namespaceprefix_ = self.Role_nsprefix_ + ':' if (UseCapturedNS_ and self.Role_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRole>%s</%sRole>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Role), input_name='Role')), namespaceprefix_ , eol_))
        if self.UserId is not None:
            namespaceprefix_ = self.UserId_nsprefix_ + ':' if (UseCapturedNS_ and self.UserId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUserId>%s</%sUserId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UserId), input_name='UserId')), namespaceprefix_ , eol_))
        if self.Password is not None:
            namespaceprefix_ = self.Password_nsprefix_ + ':' if (UseCapturedNS_ and self.Password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPassword>%s</%sPassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Password), input_name='Password')), namespaceprefix_ , eol_))
        if self.EmailLabelUrl is not None:
            namespaceprefix_ = self.EmailLabelUrl_nsprefix_ + ':' if (UseCapturedNS_ and self.EmailLabelUrl_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmailLabelUrl>%s</%sEmailLabelUrl>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EmailLabelUrl), input_name='EmailLabelUrl')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Role':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Role')
            value_ = self.gds_validate_string(value_, node, 'Role')
            self.Role = value_
            self.Role_nsprefix_ = child_.prefix
            # validate type AccessorRoleType
            self.validate_AccessorRoleType(self.Role)
        elif nodeName_ == 'UserId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UserId')
            value_ = self.gds_validate_string(value_, node, 'UserId')
            self.UserId = value_
            self.UserId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Password')
            value_ = self.gds_validate_string(value_, node, 'Password')
            self.Password = value_
            self.Password_nsprefix_ = child_.prefix
        elif nodeName_ == 'EmailLabelUrl':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EmailLabelUrl')
            value_ = self.gds_validate_string(value_, node, 'EmailLabelUrl')
            self.EmailLabelUrl = value_
            self.EmailLabelUrl_nsprefix_ = child_.prefix
# end class PendingShipmentAccessorDetail


class PendingShipmentDetail(GeneratedsSuper):
    """This information describes the kind of pending shipment being
    requested."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, ExpirationDate=None, EmailLabelDetail=None, ProcessingOptions=None, RecommendedDocumentSpecification=None, DocumentReferences=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_PendingShipmentType(self.Type)
        self.Type_nsprefix_ = None
        if isinstance(ExpirationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ExpirationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ExpirationDate
        self.ExpirationDate = initvalue_
        self.ExpirationDate_nsprefix_ = None
        self.EmailLabelDetail = EmailLabelDetail
        self.EmailLabelDetail_nsprefix_ = None
        self.ProcessingOptions = ProcessingOptions
        self.ProcessingOptions_nsprefix_ = None
        self.RecommendedDocumentSpecification = RecommendedDocumentSpecification
        self.RecommendedDocumentSpecification_nsprefix_ = None
        if DocumentReferences is None:
            self.DocumentReferences = []
        else:
            self.DocumentReferences = DocumentReferences
        self.DocumentReferences_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PendingShipmentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PendingShipmentDetail.subclass:
            return PendingShipmentDetail.subclass(*args_, **kwargs_)
        else:
            return PendingShipmentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_ExpirationDate(self):
        return self.ExpirationDate
    def set_ExpirationDate(self, ExpirationDate):
        self.ExpirationDate = ExpirationDate
    def get_EmailLabelDetail(self):
        return self.EmailLabelDetail
    def set_EmailLabelDetail(self, EmailLabelDetail):
        self.EmailLabelDetail = EmailLabelDetail
    def get_ProcessingOptions(self):
        return self.ProcessingOptions
    def set_ProcessingOptions(self, ProcessingOptions):
        self.ProcessingOptions = ProcessingOptions
    def get_RecommendedDocumentSpecification(self):
        return self.RecommendedDocumentSpecification
    def set_RecommendedDocumentSpecification(self, RecommendedDocumentSpecification):
        self.RecommendedDocumentSpecification = RecommendedDocumentSpecification
    def get_DocumentReferences(self):
        return self.DocumentReferences
    def set_DocumentReferences(self, DocumentReferences):
        self.DocumentReferences = DocumentReferences
    def add_DocumentReferences(self, value):
        self.DocumentReferences.append(value)
    def insert_DocumentReferences_at(self, index, value):
        self.DocumentReferences.insert(index, value)
    def replace_DocumentReferences_at(self, index, value):
        self.DocumentReferences[index] = value
    def validate_PendingShipmentType(self, value):
        result = True
        # Validate type PendingShipmentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['EMAIL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PendingShipmentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.ExpirationDate is not None or
            self.EmailLabelDetail is not None or
            self.ProcessingOptions is not None or
            self.RecommendedDocumentSpecification is not None or
            self.DocumentReferences
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PendingShipmentDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PendingShipmentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PendingShipmentDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PendingShipmentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PendingShipmentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PendingShipmentDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PendingShipmentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.ExpirationDate is not None:
            namespaceprefix_ = self.ExpirationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ExpirationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExpirationDate>%s</%sExpirationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ExpirationDate, input_name='ExpirationDate'), namespaceprefix_ , eol_))
        if self.EmailLabelDetail is not None:
            namespaceprefix_ = self.EmailLabelDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.EmailLabelDetail_nsprefix_) else ''
            self.EmailLabelDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EmailLabelDetail', pretty_print=pretty_print)
        if self.ProcessingOptions is not None:
            namespaceprefix_ = self.ProcessingOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.ProcessingOptions_nsprefix_) else ''
            self.ProcessingOptions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ProcessingOptions', pretty_print=pretty_print)
        if self.RecommendedDocumentSpecification is not None:
            namespaceprefix_ = self.RecommendedDocumentSpecification_nsprefix_ + ':' if (UseCapturedNS_ and self.RecommendedDocumentSpecification_nsprefix_) else ''
            self.RecommendedDocumentSpecification.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecommendedDocumentSpecification', pretty_print=pretty_print)
        for DocumentReferences_ in self.DocumentReferences:
            namespaceprefix_ = self.DocumentReferences_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentReferences_nsprefix_) else ''
            DocumentReferences_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocumentReferences', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type PendingShipmentType
            self.validate_PendingShipmentType(self.Type)
        elif nodeName_ == 'ExpirationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ExpirationDate = dval_
            self.ExpirationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'EmailLabelDetail':
            obj_ = EMailLabelDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EmailLabelDetail = obj_
            obj_.original_tagname_ = 'EmailLabelDetail'
        elif nodeName_ == 'ProcessingOptions':
            obj_ = PendingShipmentProcessingOptionsRequested.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ProcessingOptions = obj_
            obj_.original_tagname_ = 'ProcessingOptions'
        elif nodeName_ == 'RecommendedDocumentSpecification':
            obj_ = RecommendedDocumentSpecification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecommendedDocumentSpecification = obj_
            obj_.original_tagname_ = 'RecommendedDocumentSpecification'
        elif nodeName_ == 'DocumentReferences':
            obj_ = UploadDocumentReferenceDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocumentReferences.append(obj_)
            obj_.original_tagname_ = 'DocumentReferences'
# end class PendingShipmentDetail


class PendingShipmentProcessingOptionsRequested(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Options=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.Options_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PendingShipmentProcessingOptionsRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PendingShipmentProcessingOptionsRequested.subclass:
            return PendingShipmentProcessingOptionsRequested.subclass(*args_, **kwargs_)
        else:
            return PendingShipmentProcessingOptionsRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def add_Options(self, value):
        self.Options.append(value)
    def insert_Options_at(self, index, value):
        self.Options.insert(index, value)
    def replace_Options_at(self, index, value):
        self.Options[index] = value
    def validate_PendingShipmentProcessingOptionType(self, value):
        result = True
        # Validate type PendingShipmentProcessingOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ALLOW_MODIFICATIONS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PendingShipmentProcessingOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Options
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PendingShipmentProcessingOptionsRequested', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PendingShipmentProcessingOptionsRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PendingShipmentProcessingOptionsRequested':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PendingShipmentProcessingOptionsRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PendingShipmentProcessingOptionsRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PendingShipmentProcessingOptionsRequested'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PendingShipmentProcessingOptionsRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Options_ in self.Options:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptions>%s</%sOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Options':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Options')
            value_ = self.gds_validate_string(value_, node, 'Options')
            self.Options.append(value_)
            self.Options_nsprefix_ = child_.prefix
            # validate type PendingShipmentProcessingOptionType
            self.validate_PendingShipmentProcessingOptionType(self.Options[-1])
# end class PendingShipmentProcessingOptionsRequested


class PickupDetail(GeneratedsSuper):
    """This class describes the pickup characteristics of a shipment (e.g. for
    use in a tag request)."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ReadyDateTime=None, LatestPickupDateTime=None, CourierInstructions=None, RequestType=None, RequestSource=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(ReadyDateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ReadyDateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = ReadyDateTime
        self.ReadyDateTime = initvalue_
        self.ReadyDateTime_nsprefix_ = None
        if isinstance(LatestPickupDateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LatestPickupDateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = LatestPickupDateTime
        self.LatestPickupDateTime = initvalue_
        self.LatestPickupDateTime_nsprefix_ = None
        self.CourierInstructions = CourierInstructions
        self.CourierInstructions_nsprefix_ = None
        self.RequestType = RequestType
        self.validate_PickupRequestType(self.RequestType)
        self.RequestType_nsprefix_ = None
        self.RequestSource = RequestSource
        self.validate_PickupRequestSourceType(self.RequestSource)
        self.RequestSource_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickupDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickupDetail.subclass:
            return PickupDetail.subclass(*args_, **kwargs_)
        else:
            return PickupDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ReadyDateTime(self):
        return self.ReadyDateTime
    def set_ReadyDateTime(self, ReadyDateTime):
        self.ReadyDateTime = ReadyDateTime
    def get_LatestPickupDateTime(self):
        return self.LatestPickupDateTime
    def set_LatestPickupDateTime(self, LatestPickupDateTime):
        self.LatestPickupDateTime = LatestPickupDateTime
    def get_CourierInstructions(self):
        return self.CourierInstructions
    def set_CourierInstructions(self, CourierInstructions):
        self.CourierInstructions = CourierInstructions
    def get_RequestType(self):
        return self.RequestType
    def set_RequestType(self, RequestType):
        self.RequestType = RequestType
    def get_RequestSource(self):
        return self.RequestSource
    def set_RequestSource(self, RequestSource):
        self.RequestSource = RequestSource
    def validate_PickupRequestType(self, value):
        result = True
        # Validate type PickupRequestType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FUTURE_DAY', 'SAME_DAY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PickupRequestType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_PickupRequestSourceType(self, value):
        result = True
        # Validate type PickupRequestSourceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AUTOMATION', 'CUSTOMER_SERVICE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PickupRequestSourceType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.ReadyDateTime is not None or
            self.LatestPickupDateTime is not None or
            self.CourierInstructions is not None or
            self.RequestType is not None or
            self.RequestSource is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PickupDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickupDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PickupDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PickupDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PickupDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PickupDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PickupDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReadyDateTime is not None:
            namespaceprefix_ = self.ReadyDateTime_nsprefix_ + ':' if (UseCapturedNS_ and self.ReadyDateTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReadyDateTime>%s</%sReadyDateTime>%s' % (namespaceprefix_ , self.gds_format_datetime(self.ReadyDateTime, input_name='ReadyDateTime'), namespaceprefix_ , eol_))
        if self.LatestPickupDateTime is not None:
            namespaceprefix_ = self.LatestPickupDateTime_nsprefix_ + ':' if (UseCapturedNS_ and self.LatestPickupDateTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLatestPickupDateTime>%s</%sLatestPickupDateTime>%s' % (namespaceprefix_ , self.gds_format_datetime(self.LatestPickupDateTime, input_name='LatestPickupDateTime'), namespaceprefix_ , eol_))
        if self.CourierInstructions is not None:
            namespaceprefix_ = self.CourierInstructions_nsprefix_ + ':' if (UseCapturedNS_ and self.CourierInstructions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCourierInstructions>%s</%sCourierInstructions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CourierInstructions), input_name='CourierInstructions')), namespaceprefix_ , eol_))
        if self.RequestType is not None:
            namespaceprefix_ = self.RequestType_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestType>%s</%sRequestType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RequestType), input_name='RequestType')), namespaceprefix_ , eol_))
        if self.RequestSource is not None:
            namespaceprefix_ = self.RequestSource_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestSource_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestSource>%s</%sRequestSource>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RequestSource), input_name='RequestSource')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ReadyDateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.ReadyDateTime = dval_
            self.ReadyDateTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'LatestPickupDateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.LatestPickupDateTime = dval_
            self.LatestPickupDateTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'CourierInstructions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CourierInstructions')
            value_ = self.gds_validate_string(value_, node, 'CourierInstructions')
            self.CourierInstructions = value_
            self.CourierInstructions_nsprefix_ = child_.prefix
        elif nodeName_ == 'RequestType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequestType')
            value_ = self.gds_validate_string(value_, node, 'RequestType')
            self.RequestType = value_
            self.RequestType_nsprefix_ = child_.prefix
            # validate type PickupRequestType
            self.validate_PickupRequestType(self.RequestType)
        elif nodeName_ == 'RequestSource':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequestSource')
            value_ = self.gds_validate_string(value_, node, 'RequestSource')
            self.RequestSource = value_
            self.RequestSource_nsprefix_ = child_.prefix
            # validate type PickupRequestSourceType
            self.validate_PickupRequestSourceType(self.RequestSource)
# end class PickupDetail


class PrintedReference(GeneratedsSuper):
    """Represents a reference identifier printed on Freight bills of lading"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_PrintedReferenceType(self.Type)
        self.Type_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PrintedReference)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PrintedReference.subclass:
            return PrintedReference.subclass(*args_, **kwargs_)
        else:
            return PrintedReference(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def validate_PrintedReferenceType(self, value):
        result = True
        # Validate type PrintedReferenceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BILL_OF_LADING', 'CONSIGNEE_ID_NUMBER', 'SHIPPER_ID_NUMBER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PrintedReferenceType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PrintedReference', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PrintedReference')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PrintedReference':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PrintedReference')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PrintedReference', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PrintedReference'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PrintedReference', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type PrintedReferenceType
            self.validate_PrintedReferenceType(self.Type)
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
# end class PrintedReference


class PriorityAlertDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EnhancementTypes=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if EnhancementTypes is None:
            self.EnhancementTypes = []
        else:
            self.EnhancementTypes = EnhancementTypes
        self.EnhancementTypes_nsprefix_ = None
        if Content is None:
            self.Content = []
        else:
            self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriorityAlertDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriorityAlertDetail.subclass:
            return PriorityAlertDetail.subclass(*args_, **kwargs_)
        else:
            return PriorityAlertDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EnhancementTypes(self):
        return self.EnhancementTypes
    def set_EnhancementTypes(self, EnhancementTypes):
        self.EnhancementTypes = EnhancementTypes
    def add_EnhancementTypes(self, value):
        self.EnhancementTypes.append(value)
    def insert_EnhancementTypes_at(self, index, value):
        self.EnhancementTypes.insert(index, value)
    def replace_EnhancementTypes_at(self, index, value):
        self.EnhancementTypes[index] = value
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def add_Content(self, value):
        self.Content.append(value)
    def insert_Content_at(self, index, value):
        self.Content.insert(index, value)
    def replace_Content_at(self, index, value):
        self.Content[index] = value
    def validate_PriorityAlertEnhancementType(self, value):
        result = True
        # Validate type PriorityAlertEnhancementType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['PRIORITY_ALERT_PLUS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PriorityAlertEnhancementType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.EnhancementTypes or
            self.Content
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PriorityAlertDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PriorityAlertDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PriorityAlertDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PriorityAlertDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PriorityAlertDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PriorityAlertDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PriorityAlertDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for EnhancementTypes_ in self.EnhancementTypes:
            namespaceprefix_ = self.EnhancementTypes_nsprefix_ + ':' if (UseCapturedNS_ and self.EnhancementTypes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEnhancementTypes>%s</%sEnhancementTypes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(EnhancementTypes_), input_name='EnhancementTypes')), namespaceprefix_ , eol_))
        for Content_ in self.Content:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContent>%s</%sContent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Content_), input_name='Content')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EnhancementTypes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EnhancementTypes')
            value_ = self.gds_validate_string(value_, node, 'EnhancementTypes')
            self.EnhancementTypes.append(value_)
            self.EnhancementTypes_nsprefix_ = child_.prefix
            # validate type PriorityAlertEnhancementType
            self.validate_PriorityAlertEnhancementType(self.EnhancementTypes[-1])
        elif nodeName_ == 'Content':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Content')
            value_ = self.gds_validate_string(value_, node, 'Content')
            self.Content.append(value_)
            self.Content_nsprefix_ = child_.prefix
# end class PriorityAlertDetail


class ProcessShipmentReply(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, JobId=None, CompletedShipmentDetail=None, ErrorLabels=None, AdvisoryDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HighestSeverity = HighestSeverity
        self.validate_NotificationSeverityType(self.HighestSeverity)
        self.HighestSeverity_nsprefix_ = None
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.Notifications_nsprefix_ = None
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = None
        self.Version = Version
        self.Version_nsprefix_ = None
        self.JobId = JobId
        self.JobId_nsprefix_ = None
        self.CompletedShipmentDetail = CompletedShipmentDetail
        self.CompletedShipmentDetail_nsprefix_ = None
        if ErrorLabels is None:
            self.ErrorLabels = []
        else:
            self.ErrorLabels = ErrorLabels
        self.ErrorLabels_nsprefix_ = None
        self.AdvisoryDetail = AdvisoryDetail
        self.AdvisoryDetail_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProcessShipmentReply)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProcessShipmentReply.subclass:
            return ProcessShipmentReply.subclass(*args_, **kwargs_)
        else:
            return ProcessShipmentReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HighestSeverity(self):
        return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity):
        self.HighestSeverity = HighestSeverity
    def get_Notifications(self):
        return self.Notifications
    def set_Notifications(self, Notifications):
        self.Notifications = Notifications
    def add_Notifications(self, value):
        self.Notifications.append(value)
    def insert_Notifications_at(self, index, value):
        self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value):
        self.Notifications[index] = value
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_JobId(self):
        return self.JobId
    def set_JobId(self, JobId):
        self.JobId = JobId
    def get_CompletedShipmentDetail(self):
        return self.CompletedShipmentDetail
    def set_CompletedShipmentDetail(self, CompletedShipmentDetail):
        self.CompletedShipmentDetail = CompletedShipmentDetail
    def get_ErrorLabels(self):
        return self.ErrorLabels
    def set_ErrorLabels(self, ErrorLabels):
        self.ErrorLabels = ErrorLabels
    def add_ErrorLabels(self, value):
        self.ErrorLabels.append(value)
    def insert_ErrorLabels_at(self, index, value):
        self.ErrorLabels.insert(index, value)
    def replace_ErrorLabels_at(self, index, value):
        self.ErrorLabels[index] = value
    def get_AdvisoryDetail(self):
        return self.AdvisoryDetail
    def set_AdvisoryDetail(self, AdvisoryDetail):
        self.AdvisoryDetail = AdvisoryDetail
    def validate_NotificationSeverityType(self, value):
        result = True
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.JobId is not None or
            self.CompletedShipmentDetail is not None or
            self.ErrorLabels or
            self.AdvisoryDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ProcessShipmentReply', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProcessShipmentReply')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProcessShipmentReply':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProcessShipmentReply')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProcessShipmentReply', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ProcessShipmentReply'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ProcessShipmentReply', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HighestSeverity is not None:
            namespaceprefix_ = self.HighestSeverity_nsprefix_ + ':' if (UseCapturedNS_ and self.HighestSeverity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HighestSeverity), input_name='HighestSeverity')), namespaceprefix_ , eol_))
        for Notifications_ in self.Notifications:
            namespaceprefix_ = self.Notifications_nsprefix_ + ':' if (UseCapturedNS_ and self.Notifications_nsprefix_) else ''
            Notifications_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Notifications', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        if self.JobId is not None:
            namespaceprefix_ = self.JobId_nsprefix_ + ':' if (UseCapturedNS_ and self.JobId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJobId>%s</%sJobId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.JobId), input_name='JobId')), namespaceprefix_ , eol_))
        if self.CompletedShipmentDetail is not None:
            namespaceprefix_ = self.CompletedShipmentDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CompletedShipmentDetail_nsprefix_) else ''
            self.CompletedShipmentDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CompletedShipmentDetail', pretty_print=pretty_print)
        for ErrorLabels_ in self.ErrorLabels:
            namespaceprefix_ = self.ErrorLabels_nsprefix_ + ':' if (UseCapturedNS_ and self.ErrorLabels_nsprefix_) else ''
            ErrorLabels_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ErrorLabels', pretty_print=pretty_print)
        if self.AdvisoryDetail is not None:
            namespaceprefix_ = self.AdvisoryDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.AdvisoryDetail_nsprefix_) else ''
            self.AdvisoryDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AdvisoryDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HighestSeverity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HighestSeverity')
            value_ = self.gds_validate_string(value_, node, 'HighestSeverity')
            self.HighestSeverity = value_
            self.HighestSeverity_nsprefix_ = child_.prefix
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.HighestSeverity)
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'JobId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'JobId')
            value_ = self.gds_validate_string(value_, node, 'JobId')
            self.JobId = value_
            self.JobId_nsprefix_ = child_.prefix
        elif nodeName_ == 'CompletedShipmentDetail':
            obj_ = CompletedShipmentDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CompletedShipmentDetail = obj_
            obj_.original_tagname_ = 'CompletedShipmentDetail'
        elif nodeName_ == 'ErrorLabels':
            obj_ = ShippingDocument.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ErrorLabels.append(obj_)
            obj_.original_tagname_ = 'ErrorLabels'
        elif nodeName_ == 'AdvisoryDetail':
            obj_ = ShipmentAdvisoryDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AdvisoryDetail = obj_
            obj_.original_tagname_ = 'AdvisoryDetail'
# end class ProcessShipmentReply


class ProcessShipmentRequest(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, RequestedShipment=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.WebAuthenticationDetail_nsprefix_ = None
        self.ClientDetail = ClientDetail
        self.ClientDetail_nsprefix_ = None
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = None
        self.Version = Version
        self.Version_nsprefix_ = None
        self.RequestedShipment = RequestedShipment
        self.RequestedShipment_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProcessShipmentRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProcessShipmentRequest.subclass:
            return ProcessShipmentRequest.subclass(*args_, **kwargs_)
        else:
            return ProcessShipmentRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_WebAuthenticationDetail(self):
        return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail):
        self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self):
        return self.ClientDetail
    def set_ClientDetail(self, ClientDetail):
        self.ClientDetail = ClientDetail
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_RequestedShipment(self):
        return self.RequestedShipment
    def set_RequestedShipment(self, RequestedShipment):
        self.RequestedShipment = RequestedShipment
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.RequestedShipment is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ProcessShipmentRequest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProcessShipmentRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProcessShipmentRequest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProcessShipmentRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProcessShipmentRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ProcessShipmentRequest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ProcessShipmentRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WebAuthenticationDetail is not None:
            namespaceprefix_ = self.WebAuthenticationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.WebAuthenticationDetail_nsprefix_) else ''
            self.WebAuthenticationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WebAuthenticationDetail', pretty_print=pretty_print)
        if self.ClientDetail is not None:
            namespaceprefix_ = self.ClientDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientDetail_nsprefix_) else ''
            self.ClientDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClientDetail', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        if self.RequestedShipment is not None:
            namespaceprefix_ = self.RequestedShipment_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestedShipment_nsprefix_) else ''
            self.RequestedShipment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RequestedShipment', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WebAuthenticationDetail = obj_
            obj_.original_tagname_ = 'WebAuthenticationDetail'
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClientDetail = obj_
            obj_.original_tagname_ = 'ClientDetail'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'RequestedShipment':
            obj_ = RequestedShipment.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RequestedShipment = obj_
            obj_.original_tagname_ = 'RequestedShipment'
# end class ProcessShipmentRequest


class ProcessTagReply(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, CompletedShipmentDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HighestSeverity = HighestSeverity
        self.validate_NotificationSeverityType(self.HighestSeverity)
        self.HighestSeverity_nsprefix_ = None
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.Notifications_nsprefix_ = None
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = None
        self.Version = Version
        self.Version_nsprefix_ = None
        self.CompletedShipmentDetail = CompletedShipmentDetail
        self.CompletedShipmentDetail_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProcessTagReply)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProcessTagReply.subclass:
            return ProcessTagReply.subclass(*args_, **kwargs_)
        else:
            return ProcessTagReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HighestSeverity(self):
        return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity):
        self.HighestSeverity = HighestSeverity
    def get_Notifications(self):
        return self.Notifications
    def set_Notifications(self, Notifications):
        self.Notifications = Notifications
    def add_Notifications(self, value):
        self.Notifications.append(value)
    def insert_Notifications_at(self, index, value):
        self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value):
        self.Notifications[index] = value
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_CompletedShipmentDetail(self):
        return self.CompletedShipmentDetail
    def set_CompletedShipmentDetail(self, CompletedShipmentDetail):
        self.CompletedShipmentDetail = CompletedShipmentDetail
    def validate_NotificationSeverityType(self, value):
        result = True
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.CompletedShipmentDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ProcessTagReply', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProcessTagReply')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProcessTagReply':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProcessTagReply')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProcessTagReply', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ProcessTagReply'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ProcessTagReply', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HighestSeverity is not None:
            namespaceprefix_ = self.HighestSeverity_nsprefix_ + ':' if (UseCapturedNS_ and self.HighestSeverity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HighestSeverity), input_name='HighestSeverity')), namespaceprefix_ , eol_))
        for Notifications_ in self.Notifications:
            namespaceprefix_ = self.Notifications_nsprefix_ + ':' if (UseCapturedNS_ and self.Notifications_nsprefix_) else ''
            Notifications_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Notifications', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        if self.CompletedShipmentDetail is not None:
            namespaceprefix_ = self.CompletedShipmentDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CompletedShipmentDetail_nsprefix_) else ''
            self.CompletedShipmentDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CompletedShipmentDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HighestSeverity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HighestSeverity')
            value_ = self.gds_validate_string(value_, node, 'HighestSeverity')
            self.HighestSeverity = value_
            self.HighestSeverity_nsprefix_ = child_.prefix
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.HighestSeverity)
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'CompletedShipmentDetail':
            obj_ = CompletedShipmentDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CompletedShipmentDetail = obj_
            obj_.original_tagname_ = 'CompletedShipmentDetail'
# end class ProcessTagReply


class ProcessTagRequest(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, RequestedShipment=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.WebAuthenticationDetail_nsprefix_ = None
        self.ClientDetail = ClientDetail
        self.ClientDetail_nsprefix_ = None
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = None
        self.Version = Version
        self.Version_nsprefix_ = None
        self.RequestedShipment = RequestedShipment
        self.RequestedShipment_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProcessTagRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProcessTagRequest.subclass:
            return ProcessTagRequest.subclass(*args_, **kwargs_)
        else:
            return ProcessTagRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_WebAuthenticationDetail(self):
        return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail):
        self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self):
        return self.ClientDetail
    def set_ClientDetail(self, ClientDetail):
        self.ClientDetail = ClientDetail
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_RequestedShipment(self):
        return self.RequestedShipment
    def set_RequestedShipment(self, RequestedShipment):
        self.RequestedShipment = RequestedShipment
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.RequestedShipment is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ProcessTagRequest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProcessTagRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProcessTagRequest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProcessTagRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProcessTagRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ProcessTagRequest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ProcessTagRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WebAuthenticationDetail is not None:
            namespaceprefix_ = self.WebAuthenticationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.WebAuthenticationDetail_nsprefix_) else ''
            self.WebAuthenticationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WebAuthenticationDetail', pretty_print=pretty_print)
        if self.ClientDetail is not None:
            namespaceprefix_ = self.ClientDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientDetail_nsprefix_) else ''
            self.ClientDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClientDetail', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        if self.RequestedShipment is not None:
            namespaceprefix_ = self.RequestedShipment_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestedShipment_nsprefix_) else ''
            self.RequestedShipment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RequestedShipment', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WebAuthenticationDetail = obj_
            obj_.original_tagname_ = 'WebAuthenticationDetail'
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClientDetail = obj_
            obj_.original_tagname_ = 'ClientDetail'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'RequestedShipment':
            obj_ = RequestedShipment.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RequestedShipment = obj_
            obj_.original_tagname_ = 'RequestedShipment'
# end class ProcessTagRequest


class ProductName(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Encoding=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.Type_nsprefix_ = None
        self.Encoding = Encoding
        self.Encoding_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductName)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductName.subclass:
            return ProductName.subclass(*args_, **kwargs_)
        else:
            return ProductName(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Encoding(self):
        return self.Encoding
    def set_Encoding(self, Encoding):
        self.Encoding = Encoding
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Encoding is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ProductName', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductName')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductName':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductName')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductName', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ProductName'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ProductName', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Encoding is not None:
            namespaceprefix_ = self.Encoding_nsprefix_ + ':' if (UseCapturedNS_ and self.Encoding_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEncoding>%s</%sEncoding>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Encoding), input_name='Encoding')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
        elif nodeName_ == 'Encoding':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Encoding')
            value_ = self.gds_validate_string(value_, node, 'Encoding')
            self.Encoding = value_
            self.Encoding_nsprefix_ = child_.prefix
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
# end class ProductName


class RadioactivityDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TransportIndex=None, SurfaceReading=None, CriticalitySafetyIndex=None, Dimensions=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TransportIndex = TransportIndex
        self.TransportIndex_nsprefix_ = None
        self.SurfaceReading = SurfaceReading
        self.SurfaceReading_nsprefix_ = None
        self.CriticalitySafetyIndex = CriticalitySafetyIndex
        self.CriticalitySafetyIndex_nsprefix_ = None
        self.Dimensions = Dimensions
        self.Dimensions_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RadioactivityDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RadioactivityDetail.subclass:
            return RadioactivityDetail.subclass(*args_, **kwargs_)
        else:
            return RadioactivityDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TransportIndex(self):
        return self.TransportIndex
    def set_TransportIndex(self, TransportIndex):
        self.TransportIndex = TransportIndex
    def get_SurfaceReading(self):
        return self.SurfaceReading
    def set_SurfaceReading(self, SurfaceReading):
        self.SurfaceReading = SurfaceReading
    def get_CriticalitySafetyIndex(self):
        return self.CriticalitySafetyIndex
    def set_CriticalitySafetyIndex(self, CriticalitySafetyIndex):
        self.CriticalitySafetyIndex = CriticalitySafetyIndex
    def get_Dimensions(self):
        return self.Dimensions
    def set_Dimensions(self, Dimensions):
        self.Dimensions = Dimensions
    def hasContent_(self):
        if (
            self.TransportIndex is not None or
            self.SurfaceReading is not None or
            self.CriticalitySafetyIndex is not None or
            self.Dimensions is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RadioactivityDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RadioactivityDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RadioactivityDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RadioactivityDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RadioactivityDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RadioactivityDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RadioactivityDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TransportIndex is not None:
            namespaceprefix_ = self.TransportIndex_nsprefix_ + ':' if (UseCapturedNS_ and self.TransportIndex_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransportIndex>%s</%sTransportIndex>%s' % (namespaceprefix_ , self.gds_format_decimal(self.TransportIndex, input_name='TransportIndex'), namespaceprefix_ , eol_))
        if self.SurfaceReading is not None:
            namespaceprefix_ = self.SurfaceReading_nsprefix_ + ':' if (UseCapturedNS_ and self.SurfaceReading_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSurfaceReading>%s</%sSurfaceReading>%s' % (namespaceprefix_ , self.gds_format_decimal(self.SurfaceReading, input_name='SurfaceReading'), namespaceprefix_ , eol_))
        if self.CriticalitySafetyIndex is not None:
            namespaceprefix_ = self.CriticalitySafetyIndex_nsprefix_ + ':' if (UseCapturedNS_ and self.CriticalitySafetyIndex_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCriticalitySafetyIndex>%s</%sCriticalitySafetyIndex>%s' % (namespaceprefix_ , self.gds_format_decimal(self.CriticalitySafetyIndex, input_name='CriticalitySafetyIndex'), namespaceprefix_ , eol_))
        if self.Dimensions is not None:
            namespaceprefix_ = self.Dimensions_nsprefix_ + ':' if (UseCapturedNS_ and self.Dimensions_nsprefix_) else ''
            self.Dimensions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Dimensions', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TransportIndex' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'TransportIndex')
            fval_ = self.gds_validate_decimal(fval_, node, 'TransportIndex')
            self.TransportIndex = fval_
            self.TransportIndex_nsprefix_ = child_.prefix
        elif nodeName_ == 'SurfaceReading' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'SurfaceReading')
            fval_ = self.gds_validate_decimal(fval_, node, 'SurfaceReading')
            self.SurfaceReading = fval_
            self.SurfaceReading_nsprefix_ = child_.prefix
        elif nodeName_ == 'CriticalitySafetyIndex' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'CriticalitySafetyIndex')
            fval_ = self.gds_validate_decimal(fval_, node, 'CriticalitySafetyIndex')
            self.CriticalitySafetyIndex = fval_
            self.CriticalitySafetyIndex_nsprefix_ = child_.prefix
        elif nodeName_ == 'Dimensions':
            obj_ = Dimensions.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
# end class RadioactivityDetail


class RadionuclideActivity(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Value=None, UnitOfMeasure=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
        self.UnitOfMeasure = UnitOfMeasure
        self.validate_RadioactivityUnitOfMeasure(self.UnitOfMeasure)
        self.UnitOfMeasure_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RadionuclideActivity)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RadionuclideActivity.subclass:
            return RadionuclideActivity.subclass(*args_, **kwargs_)
        else:
            return RadionuclideActivity(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def get_UnitOfMeasure(self):
        return self.UnitOfMeasure
    def set_UnitOfMeasure(self, UnitOfMeasure):
        self.UnitOfMeasure = UnitOfMeasure
    def validate_RadioactivityUnitOfMeasure(self, value):
        result = True
        # Validate type RadioactivityUnitOfMeasure, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BQ', 'GBQ', 'KBQ', 'MBQ', 'PBQ', 'TBQ']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RadioactivityUnitOfMeasure' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Value is not None or
            self.UnitOfMeasure is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RadionuclideActivity', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RadionuclideActivity')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RadionuclideActivity':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RadionuclideActivity')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RadionuclideActivity', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RadionuclideActivity'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RadionuclideActivity', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Value, input_name='Value'), namespaceprefix_ , eol_))
        if self.UnitOfMeasure is not None:
            namespaceprefix_ = self.UnitOfMeasure_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitOfMeasure_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitOfMeasure>%s</%sUnitOfMeasure>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UnitOfMeasure), input_name='UnitOfMeasure')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Value' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Value')
            fval_ = self.gds_validate_decimal(fval_, node, 'Value')
            self.Value = fval_
            self.Value_nsprefix_ = child_.prefix
        elif nodeName_ == 'UnitOfMeasure':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UnitOfMeasure')
            value_ = self.gds_validate_string(value_, node, 'UnitOfMeasure')
            self.UnitOfMeasure = value_
            self.UnitOfMeasure_nsprefix_ = child_.prefix
            # validate type RadioactivityUnitOfMeasure
            self.validate_RadioactivityUnitOfMeasure(self.UnitOfMeasure)
# end class RadionuclideActivity


class RadionuclideDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Radionuclide=None, Activity=None, ExceptedPackagingIsReportableQuantity=None, PhysicalForm=None, ChemicalForm=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Radionuclide = Radionuclide
        self.Radionuclide_nsprefix_ = None
        self.Activity = Activity
        self.Activity_nsprefix_ = None
        self.ExceptedPackagingIsReportableQuantity = ExceptedPackagingIsReportableQuantity
        self.ExceptedPackagingIsReportableQuantity_nsprefix_ = None
        self.PhysicalForm = PhysicalForm
        self.validate_PhysicalFormType(self.PhysicalForm)
        self.PhysicalForm_nsprefix_ = None
        self.ChemicalForm = ChemicalForm
        self.ChemicalForm_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RadionuclideDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RadionuclideDetail.subclass:
            return RadionuclideDetail.subclass(*args_, **kwargs_)
        else:
            return RadionuclideDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Radionuclide(self):
        return self.Radionuclide
    def set_Radionuclide(self, Radionuclide):
        self.Radionuclide = Radionuclide
    def get_Activity(self):
        return self.Activity
    def set_Activity(self, Activity):
        self.Activity = Activity
    def get_ExceptedPackagingIsReportableQuantity(self):
        return self.ExceptedPackagingIsReportableQuantity
    def set_ExceptedPackagingIsReportableQuantity(self, ExceptedPackagingIsReportableQuantity):
        self.ExceptedPackagingIsReportableQuantity = ExceptedPackagingIsReportableQuantity
    def get_PhysicalForm(self):
        return self.PhysicalForm
    def set_PhysicalForm(self, PhysicalForm):
        self.PhysicalForm = PhysicalForm
    def get_ChemicalForm(self):
        return self.ChemicalForm
    def set_ChemicalForm(self, ChemicalForm):
        self.ChemicalForm = ChemicalForm
    def validate_PhysicalFormType(self, value):
        result = True
        # Validate type PhysicalFormType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['GAS', 'LIQUID', 'SOLID', 'SPECIAL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PhysicalFormType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Radionuclide is not None or
            self.Activity is not None or
            self.ExceptedPackagingIsReportableQuantity is not None or
            self.PhysicalForm is not None or
            self.ChemicalForm is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RadionuclideDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RadionuclideDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RadionuclideDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RadionuclideDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RadionuclideDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RadionuclideDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RadionuclideDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Radionuclide is not None:
            namespaceprefix_ = self.Radionuclide_nsprefix_ + ':' if (UseCapturedNS_ and self.Radionuclide_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRadionuclide>%s</%sRadionuclide>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Radionuclide), input_name='Radionuclide')), namespaceprefix_ , eol_))
        if self.Activity is not None:
            namespaceprefix_ = self.Activity_nsprefix_ + ':' if (UseCapturedNS_ and self.Activity_nsprefix_) else ''
            self.Activity.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Activity', pretty_print=pretty_print)
        if self.ExceptedPackagingIsReportableQuantity is not None:
            namespaceprefix_ = self.ExceptedPackagingIsReportableQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.ExceptedPackagingIsReportableQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExceptedPackagingIsReportableQuantity>%s</%sExceptedPackagingIsReportableQuantity>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ExceptedPackagingIsReportableQuantity, input_name='ExceptedPackagingIsReportableQuantity'), namespaceprefix_ , eol_))
        if self.PhysicalForm is not None:
            namespaceprefix_ = self.PhysicalForm_nsprefix_ + ':' if (UseCapturedNS_ and self.PhysicalForm_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhysicalForm>%s</%sPhysicalForm>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhysicalForm), input_name='PhysicalForm')), namespaceprefix_ , eol_))
        if self.ChemicalForm is not None:
            namespaceprefix_ = self.ChemicalForm_nsprefix_ + ':' if (UseCapturedNS_ and self.ChemicalForm_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChemicalForm>%s</%sChemicalForm>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ChemicalForm), input_name='ChemicalForm')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Radionuclide':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Radionuclide')
            value_ = self.gds_validate_string(value_, node, 'Radionuclide')
            self.Radionuclide = value_
            self.Radionuclide_nsprefix_ = child_.prefix
        elif nodeName_ == 'Activity':
            obj_ = RadionuclideActivity.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Activity = obj_
            obj_.original_tagname_ = 'Activity'
        elif nodeName_ == 'ExceptedPackagingIsReportableQuantity':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ExceptedPackagingIsReportableQuantity')
            ival_ = self.gds_validate_boolean(ival_, node, 'ExceptedPackagingIsReportableQuantity')
            self.ExceptedPackagingIsReportableQuantity = ival_
            self.ExceptedPackagingIsReportableQuantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'PhysicalForm':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhysicalForm')
            value_ = self.gds_validate_string(value_, node, 'PhysicalForm')
            self.PhysicalForm = value_
            self.PhysicalForm_nsprefix_ = child_.prefix
            # validate type PhysicalFormType
            self.validate_PhysicalFormType(self.PhysicalForm)
        elif nodeName_ == 'ChemicalForm':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ChemicalForm')
            value_ = self.gds_validate_string(value_, node, 'ChemicalForm')
            self.ChemicalForm = value_
            self.ChemicalForm_nsprefix_ = child_.prefix
# end class RadionuclideDetail


class RateDiscount(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RateDiscountType=None, Description=None, Amount=None, Percent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RateDiscountType = RateDiscountType
        self.validate_RateDiscountType(self.RateDiscountType)
        self.RateDiscountType_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.Amount = Amount
        self.Amount_nsprefix_ = None
        self.Percent = Percent
        self.Percent_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RateDiscount)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RateDiscount.subclass:
            return RateDiscount.subclass(*args_, **kwargs_)
        else:
            return RateDiscount(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RateDiscountType(self):
        return self.RateDiscountType
    def set_RateDiscountType(self, RateDiscountType):
        self.RateDiscountType = RateDiscountType
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_Amount(self):
        return self.Amount
    def set_Amount(self, Amount):
        self.Amount = Amount
    def get_Percent(self):
        return self.Percent
    def set_Percent(self, Percent):
        self.Percent = Percent
    def validate_RateDiscountType(self, value):
        result = True
        # Validate type RateDiscountType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BONUS', 'COUPON', 'EARNED', 'INCENTIVE', 'OTHER', 'VOLUME']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RateDiscountType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.RateDiscountType is not None or
            self.Description is not None or
            self.Amount is not None or
            self.Percent is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RateDiscount', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RateDiscount')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RateDiscount':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RateDiscount')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RateDiscount', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RateDiscount'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RateDiscount', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RateDiscountType is not None:
            namespaceprefix_ = self.RateDiscountType_nsprefix_ + ':' if (UseCapturedNS_ and self.RateDiscountType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateDiscountType>%s</%sRateDiscountType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateDiscountType), input_name='RateDiscountType')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.Amount is not None:
            namespaceprefix_ = self.Amount_nsprefix_ + ':' if (UseCapturedNS_ and self.Amount_nsprefix_) else ''
            self.Amount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Amount', pretty_print=pretty_print)
        if self.Percent is not None:
            namespaceprefix_ = self.Percent_nsprefix_ + ':' if (UseCapturedNS_ and self.Percent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPercent>%s</%sPercent>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Percent, input_name='Percent'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RateDiscountType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RateDiscountType')
            value_ = self.gds_validate_string(value_, node, 'RateDiscountType')
            self.RateDiscountType = value_
            self.RateDiscountType_nsprefix_ = child_.prefix
            # validate type RateDiscountType
            self.validate_RateDiscountType(self.RateDiscountType)
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'Amount':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Amount = obj_
            obj_.original_tagname_ = 'Amount'
        elif nodeName_ == 'Percent' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Percent')
            fval_ = self.gds_validate_decimal(fval_, node, 'Percent')
            self.Percent = fval_
            self.Percent_nsprefix_ = child_.prefix
# end class RateDiscount


class Rebate(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RebateType=None, Description=None, Amount=None, Percent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RebateType = RebateType
        self.validate_RebateType(self.RebateType)
        self.RebateType_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.Amount = Amount
        self.Amount_nsprefix_ = None
        self.Percent = Percent
        self.Percent_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Rebate)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Rebate.subclass:
            return Rebate.subclass(*args_, **kwargs_)
        else:
            return Rebate(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RebateType(self):
        return self.RebateType
    def set_RebateType(self, RebateType):
        self.RebateType = RebateType
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_Amount(self):
        return self.Amount
    def set_Amount(self, Amount):
        self.Amount = Amount
    def get_Percent(self):
        return self.Percent
    def set_Percent(self, Percent):
        self.Percent = Percent
    def validate_RebateType(self, value):
        result = True
        # Validate type RebateType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BONUS', 'EARNED', 'OTHER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RebateType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.RebateType is not None or
            self.Description is not None or
            self.Amount is not None or
            self.Percent is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Rebate', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Rebate')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Rebate':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Rebate')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Rebate', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Rebate'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Rebate', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RebateType is not None:
            namespaceprefix_ = self.RebateType_nsprefix_ + ':' if (UseCapturedNS_ and self.RebateType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRebateType>%s</%sRebateType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RebateType), input_name='RebateType')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.Amount is not None:
            namespaceprefix_ = self.Amount_nsprefix_ + ':' if (UseCapturedNS_ and self.Amount_nsprefix_) else ''
            self.Amount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Amount', pretty_print=pretty_print)
        if self.Percent is not None:
            namespaceprefix_ = self.Percent_nsprefix_ + ':' if (UseCapturedNS_ and self.Percent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPercent>%s</%sPercent>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Percent, input_name='Percent'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RebateType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RebateType')
            value_ = self.gds_validate_string(value_, node, 'RebateType')
            self.RebateType = value_
            self.RebateType_nsprefix_ = child_.prefix
            # validate type RebateType
            self.validate_RebateType(self.RebateType)
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'Amount':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Amount = obj_
            obj_.original_tagname_ = 'Amount'
        elif nodeName_ == 'Percent' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Percent')
            fval_ = self.gds_validate_decimal(fval_, node, 'Percent')
            self.Percent = fval_
            self.Percent_nsprefix_ = child_.prefix
# end class Rebate


class RecipientCustomsId(GeneratedsSuper):
    """Specifies how the recipient is identified for customs purposes; the
    requirements on this information vary with destination country."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_RecipientCustomsIdType(self.Type)
        self.Type_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecipientCustomsId)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecipientCustomsId.subclass:
            return RecipientCustomsId.subclass(*args_, **kwargs_)
        else:
            return RecipientCustomsId(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def validate_RecipientCustomsIdType(self, value):
        result = True
        # Validate type RecipientCustomsIdType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['COMPANY', 'INDIVIDUAL', 'PASSPORT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RecipientCustomsIdType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RecipientCustomsId', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecipientCustomsId')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecipientCustomsId':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecipientCustomsId')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecipientCustomsId', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecipientCustomsId'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RecipientCustomsId', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type RecipientCustomsIdType
            self.validate_RecipientCustomsIdType(self.Type)
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
# end class RecipientCustomsId


class RecommendedDocumentSpecification(GeneratedsSuper):
    """Specifies the details about documents that are recommended to be
    included with the shipment for ease of shipment processing and
    transportation."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Types=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Types is None:
            self.Types = []
        else:
            self.Types = Types
        self.Types_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecommendedDocumentSpecification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecommendedDocumentSpecification.subclass:
            return RecommendedDocumentSpecification.subclass(*args_, **kwargs_)
        else:
            return RecommendedDocumentSpecification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Types(self):
        return self.Types
    def set_Types(self, Types):
        self.Types = Types
    def add_Types(self, value):
        self.Types.append(value)
    def insert_Types_at(self, index, value):
        self.Types.insert(index, value)
    def replace_Types_at(self, index, value):
        self.Types[index] = value
    def validate_RecommendedDocumentType(self, value):
        result = True
        # Validate type RecommendedDocumentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ANTIQUE_STATEMENT_EUROPEAN_UNION', 'ANTIQUE_STATEMENT_UNITED_STATES', 'ASSEMBLER_DECLARATION', 'BEARING_WORKSHEET', 'CERTIFICATE_OF_SHIPMENTS_TO_SYRIA', 'COMMERCIAL_INVOICE_FOR_THE_CARIBBEAN_COMMON_MARKET', 'CONIFEROUS_SOLID_WOOD_PACKAGING_MATERIAL_TO_THE_PEOPLES_REPUBLIC_OF_CHINA', 'DECLARATION_FOR_FREE_ENTRY_OF_RETURNED_AMERICAN_PRODUCTS', 'DECLARATION_OF_BIOLOGICAL_STANDARDS', 'DECLARATION_OF_IMPORTED_ELECTRONIC_PRODUCTS_SUBJECT_TO_RADIATION_CONTROL_STANDARD', 'ELECTRONIC_INTEGRATED_CIRCUIT_WORKSHEET', 'FILM_AND_VIDEO_CERTIFICATE', 'INTERIM_FOOTWEAR_INVOICE', 'NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_ENGLISH', 'NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_FRENCH', 'NAFTA_CERTIFICATE_OF_ORIGIN_SPANISH', 'NAFTA_CERTIFICATE_OF_ORIGIN_UNITED_STATES', 'PACKING_LIST', 'PRINTED_CIRCUIT_BOARD_WORKSHEET', 'REPAIRED_WATCH_BREAKOUT_WORKSHEET', 'STATEMENT_REGARDING_THE_IMPORT_OF_RADIO_FREQUENCY_DEVICES', 'TOXIC_SUBSTANCES_CONTROL_ACT', 'UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_NON_TEXTILES', 'UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_TEXTILES', 'UNITED_STATES_NEW_WATCH_WORKSHEET', 'UNITED_STATES_WATCH_REPAIR_DECLARATION']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RecommendedDocumentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Types
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RecommendedDocumentSpecification', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecommendedDocumentSpecification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecommendedDocumentSpecification':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecommendedDocumentSpecification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecommendedDocumentSpecification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecommendedDocumentSpecification'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RecommendedDocumentSpecification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Types_ in self.Types:
            namespaceprefix_ = self.Types_nsprefix_ + ':' if (UseCapturedNS_ and self.Types_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTypes>%s</%sTypes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Types_), input_name='Types')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Types':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Types')
            value_ = self.gds_validate_string(value_, node, 'Types')
            self.Types.append(value_)
            self.Types_nsprefix_ = child_.prefix
            # validate type RecommendedDocumentType
            self.validate_RecommendedDocumentType(self.Types[-1])
# end class RecommendedDocumentSpecification


class RegulatoryAdvisoryDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Categories=None, CommodityIndex=None, DerivedHarmonizedCode=None, Advisories=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_ProhibitionType(self.Type)
        self.Type_nsprefix_ = None
        if Categories is None:
            self.Categories = []
        else:
            self.Categories = Categories
        self.Categories_nsprefix_ = None
        self.CommodityIndex = CommodityIndex
        self.CommodityIndex_nsprefix_ = None
        self.DerivedHarmonizedCode = DerivedHarmonizedCode
        self.DerivedHarmonizedCode_nsprefix_ = None
        if Advisories is None:
            self.Advisories = []
        else:
            self.Advisories = Advisories
        self.Advisories_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RegulatoryAdvisoryDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RegulatoryAdvisoryDetail.subclass:
            return RegulatoryAdvisoryDetail.subclass(*args_, **kwargs_)
        else:
            return RegulatoryAdvisoryDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Categories(self):
        return self.Categories
    def set_Categories(self, Categories):
        self.Categories = Categories
    def add_Categories(self, value):
        self.Categories.append(value)
    def insert_Categories_at(self, index, value):
        self.Categories.insert(index, value)
    def replace_Categories_at(self, index, value):
        self.Categories[index] = value
    def get_CommodityIndex(self):
        return self.CommodityIndex
    def set_CommodityIndex(self, CommodityIndex):
        self.CommodityIndex = CommodityIndex
    def get_DerivedHarmonizedCode(self):
        return self.DerivedHarmonizedCode
    def set_DerivedHarmonizedCode(self, DerivedHarmonizedCode):
        self.DerivedHarmonizedCode = DerivedHarmonizedCode
    def get_Advisories(self):
        return self.Advisories
    def set_Advisories(self, Advisories):
        self.Advisories = Advisories
    def add_Advisories(self, value):
        self.Advisories.append(value)
    def insert_Advisories_at(self, index, value):
        self.Advisories.insert(index, value)
    def replace_Advisories_at(self, index, value):
        self.Advisories[index] = value
    def validate_ProhibitionType(self, value):
        result = True
        # Validate type ProhibitionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['COMMODITY', 'COUNTRY', 'DOCUMENT', 'SHIPMENT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ProhibitionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ShipmentRuleType(self, value):
        result = True
        # Validate type ShipmentRuleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['EXPORT', 'GENERAL', 'IMPORT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShipmentRuleType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Categories or
            self.CommodityIndex is not None or
            self.DerivedHarmonizedCode is not None or
            self.Advisories
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RegulatoryAdvisoryDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RegulatoryAdvisoryDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RegulatoryAdvisoryDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RegulatoryAdvisoryDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RegulatoryAdvisoryDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RegulatoryAdvisoryDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RegulatoryAdvisoryDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        for Categories_ in self.Categories:
            namespaceprefix_ = self.Categories_nsprefix_ + ':' if (UseCapturedNS_ and self.Categories_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCategories>%s</%sCategories>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Categories_), input_name='Categories')), namespaceprefix_ , eol_))
        if self.CommodityIndex is not None:
            namespaceprefix_ = self.CommodityIndex_nsprefix_ + ':' if (UseCapturedNS_ and self.CommodityIndex_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommodityIndex>%s</%sCommodityIndex>%s' % (namespaceprefix_ , self.gds_format_integer(self.CommodityIndex, input_name='CommodityIndex'), namespaceprefix_ , eol_))
        if self.DerivedHarmonizedCode is not None:
            namespaceprefix_ = self.DerivedHarmonizedCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DerivedHarmonizedCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDerivedHarmonizedCode>%s</%sDerivedHarmonizedCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DerivedHarmonizedCode), input_name='DerivedHarmonizedCode')), namespaceprefix_ , eol_))
        for Advisories_ in self.Advisories:
            namespaceprefix_ = self.Advisories_nsprefix_ + ':' if (UseCapturedNS_ and self.Advisories_nsprefix_) else ''
            Advisories_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Advisories', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type ProhibitionType
            self.validate_ProhibitionType(self.Type)
        elif nodeName_ == 'Categories':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Categories')
            value_ = self.gds_validate_string(value_, node, 'Categories')
            self.Categories.append(value_)
            self.Categories_nsprefix_ = child_.prefix
            # validate type ShipmentRuleType
            self.validate_ShipmentRuleType(self.Categories[-1])
        elif nodeName_ == 'CommodityIndex' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'CommodityIndex')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'CommodityIndex')
            self.CommodityIndex = ival_
            self.CommodityIndex_nsprefix_ = child_.prefix
        elif nodeName_ == 'DerivedHarmonizedCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DerivedHarmonizedCode')
            value_ = self.gds_validate_string(value_, node, 'DerivedHarmonizedCode')
            self.DerivedHarmonizedCode = value_
            self.DerivedHarmonizedCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'Advisories':
            obj_ = Message.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Advisories.append(obj_)
            obj_.original_tagname_ = 'Advisories'
# end class RegulatoryAdvisoryDetail


class RegulatoryLabelContentDetail(GeneratedsSuper):
    """Specifies details needed to generate any label artifacts required due to
    regulatory requirements."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, GenerationOptions=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_RegulatoryLabelType(self.Type)
        self.Type_nsprefix_ = None
        if GenerationOptions is None:
            self.GenerationOptions = []
        else:
            self.GenerationOptions = GenerationOptions
        self.GenerationOptions_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RegulatoryLabelContentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RegulatoryLabelContentDetail.subclass:
            return RegulatoryLabelContentDetail.subclass(*args_, **kwargs_)
        else:
            return RegulatoryLabelContentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_GenerationOptions(self):
        return self.GenerationOptions
    def set_GenerationOptions(self, GenerationOptions):
        self.GenerationOptions = GenerationOptions
    def add_GenerationOptions(self, value):
        self.GenerationOptions.append(value)
    def insert_GenerationOptions_at(self, index, value):
        self.GenerationOptions.insert(index, value)
    def replace_GenerationOptions_at(self, index, value):
        self.GenerationOptions[index] = value
    def validate_RegulatoryLabelType(self, value):
        result = True
        # Validate type RegulatoryLabelType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ALCOHOL_SHIPMENT_LABEL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RegulatoryLabelType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CustomerSpecifiedLabelGenerationOptionType(self, value):
        result = True
        # Validate type CustomerSpecifiedLabelGenerationOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CONTENT_ON_SHIPPING_LABEL_ONLY', 'CONTENT_ON_SHIPPING_LABEL_PREFERRED', 'CONTENT_ON_SUPPLEMENTAL_LABEL_ONLY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomerSpecifiedLabelGenerationOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.GenerationOptions
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RegulatoryLabelContentDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RegulatoryLabelContentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RegulatoryLabelContentDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RegulatoryLabelContentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RegulatoryLabelContentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RegulatoryLabelContentDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RegulatoryLabelContentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        for GenerationOptions_ in self.GenerationOptions:
            namespaceprefix_ = self.GenerationOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.GenerationOptions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGenerationOptions>%s</%sGenerationOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(GenerationOptions_), input_name='GenerationOptions')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type RegulatoryLabelType
            self.validate_RegulatoryLabelType(self.Type)
        elif nodeName_ == 'GenerationOptions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GenerationOptions')
            value_ = self.gds_validate_string(value_, node, 'GenerationOptions')
            self.GenerationOptions.append(value_)
            self.GenerationOptions_nsprefix_ = child_.prefix
            # validate type CustomerSpecifiedLabelGenerationOptionType
            self.validate_CustomerSpecifiedLabelGenerationOptionType(self.GenerationOptions[-1])
# end class RegulatoryLabelContentDetail


class RequestedPackageLineItem(GeneratedsSuper):
    """This class rationalizes RequestedPackage and RequestedPackageSummary
    from previous interfaces."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SequenceNumber=None, GroupNumber=None, GroupPackageCount=None, VariableHandlingChargeDetail=None, InsuredValue=None, Weight=None, Dimensions=None, PhysicalPackaging=None, AssociatedFreightLineItems=None, ItemDescription=None, ItemDescriptionForClearance=None, CustomerReferences=None, SpecialServicesRequested=None, ContentRecords=None, ConveyanceDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.SequenceNumber = SequenceNumber
        self.SequenceNumber_nsprefix_ = None
        self.GroupNumber = GroupNumber
        self.GroupNumber_nsprefix_ = None
        self.GroupPackageCount = GroupPackageCount
        self.GroupPackageCount_nsprefix_ = None
        self.VariableHandlingChargeDetail = VariableHandlingChargeDetail
        self.VariableHandlingChargeDetail_nsprefix_ = None
        self.InsuredValue = InsuredValue
        self.InsuredValue_nsprefix_ = None
        self.Weight = Weight
        self.Weight_nsprefix_ = None
        self.Dimensions = Dimensions
        self.Dimensions_nsprefix_ = None
        self.PhysicalPackaging = PhysicalPackaging
        self.validate_PhysicalPackagingType(self.PhysicalPackaging)
        self.PhysicalPackaging_nsprefix_ = None
        if AssociatedFreightLineItems is None:
            self.AssociatedFreightLineItems = []
        else:
            self.AssociatedFreightLineItems = AssociatedFreightLineItems
        self.AssociatedFreightLineItems_nsprefix_ = None
        self.ItemDescription = ItemDescription
        self.ItemDescription_nsprefix_ = None
        self.ItemDescriptionForClearance = ItemDescriptionForClearance
        self.ItemDescriptionForClearance_nsprefix_ = None
        if CustomerReferences is None:
            self.CustomerReferences = []
        else:
            self.CustomerReferences = CustomerReferences
        self.CustomerReferences_nsprefix_ = None
        self.SpecialServicesRequested = SpecialServicesRequested
        self.SpecialServicesRequested_nsprefix_ = None
        if ContentRecords is None:
            self.ContentRecords = []
        else:
            self.ContentRecords = ContentRecords
        self.ContentRecords_nsprefix_ = None
        self.ConveyanceDetail = ConveyanceDetail
        self.ConveyanceDetail_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestedPackageLineItem)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestedPackageLineItem.subclass:
            return RequestedPackageLineItem.subclass(*args_, **kwargs_)
        else:
            return RequestedPackageLineItem(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SequenceNumber(self):
        return self.SequenceNumber
    def set_SequenceNumber(self, SequenceNumber):
        self.SequenceNumber = SequenceNumber
    def get_GroupNumber(self):
        return self.GroupNumber
    def set_GroupNumber(self, GroupNumber):
        self.GroupNumber = GroupNumber
    def get_GroupPackageCount(self):
        return self.GroupPackageCount
    def set_GroupPackageCount(self, GroupPackageCount):
        self.GroupPackageCount = GroupPackageCount
    def get_VariableHandlingChargeDetail(self):
        return self.VariableHandlingChargeDetail
    def set_VariableHandlingChargeDetail(self, VariableHandlingChargeDetail):
        self.VariableHandlingChargeDetail = VariableHandlingChargeDetail
    def get_InsuredValue(self):
        return self.InsuredValue
    def set_InsuredValue(self, InsuredValue):
        self.InsuredValue = InsuredValue
    def get_Weight(self):
        return self.Weight
    def set_Weight(self, Weight):
        self.Weight = Weight
    def get_Dimensions(self):
        return self.Dimensions
    def set_Dimensions(self, Dimensions):
        self.Dimensions = Dimensions
    def get_PhysicalPackaging(self):
        return self.PhysicalPackaging
    def set_PhysicalPackaging(self, PhysicalPackaging):
        self.PhysicalPackaging = PhysicalPackaging
    def get_AssociatedFreightLineItems(self):
        return self.AssociatedFreightLineItems
    def set_AssociatedFreightLineItems(self, AssociatedFreightLineItems):
        self.AssociatedFreightLineItems = AssociatedFreightLineItems
    def add_AssociatedFreightLineItems(self, value):
        self.AssociatedFreightLineItems.append(value)
    def insert_AssociatedFreightLineItems_at(self, index, value):
        self.AssociatedFreightLineItems.insert(index, value)
    def replace_AssociatedFreightLineItems_at(self, index, value):
        self.AssociatedFreightLineItems[index] = value
    def get_ItemDescription(self):
        return self.ItemDescription
    def set_ItemDescription(self, ItemDescription):
        self.ItemDescription = ItemDescription
    def get_ItemDescriptionForClearance(self):
        return self.ItemDescriptionForClearance
    def set_ItemDescriptionForClearance(self, ItemDescriptionForClearance):
        self.ItemDescriptionForClearance = ItemDescriptionForClearance
    def get_CustomerReferences(self):
        return self.CustomerReferences
    def set_CustomerReferences(self, CustomerReferences):
        self.CustomerReferences = CustomerReferences
    def add_CustomerReferences(self, value):
        self.CustomerReferences.append(value)
    def insert_CustomerReferences_at(self, index, value):
        self.CustomerReferences.insert(index, value)
    def replace_CustomerReferences_at(self, index, value):
        self.CustomerReferences[index] = value
    def get_SpecialServicesRequested(self):
        return self.SpecialServicesRequested
    def set_SpecialServicesRequested(self, SpecialServicesRequested):
        self.SpecialServicesRequested = SpecialServicesRequested
    def get_ContentRecords(self):
        return self.ContentRecords
    def set_ContentRecords(self, ContentRecords):
        self.ContentRecords = ContentRecords
    def add_ContentRecords(self, value):
        self.ContentRecords.append(value)
    def insert_ContentRecords_at(self, index, value):
        self.ContentRecords.insert(index, value)
    def replace_ContentRecords_at(self, index, value):
        self.ContentRecords[index] = value
    def get_ConveyanceDetail(self):
        return self.ConveyanceDetail
    def set_ConveyanceDetail(self, ConveyanceDetail):
        self.ConveyanceDetail = ConveyanceDetail
    def validate_PhysicalPackagingType(self, value):
        result = True
        # Validate type PhysicalPackagingType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BAG', 'BARREL', 'BASKET', 'BOX', 'BUCKET', 'BUNDLE', 'CARTON', 'CASE', 'CONTAINER', 'CRATE', 'CYLINDER', 'DRUM', 'ENVELOPE', 'HAMPER', 'OTHER', 'PAIL', 'PALLET', 'PIECE', 'REEL', 'ROLL', 'SKID', 'TANK', 'TUBE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PhysicalPackagingType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.SequenceNumber is not None or
            self.GroupNumber is not None or
            self.GroupPackageCount is not None or
            self.VariableHandlingChargeDetail is not None or
            self.InsuredValue is not None or
            self.Weight is not None or
            self.Dimensions is not None or
            self.PhysicalPackaging is not None or
            self.AssociatedFreightLineItems or
            self.ItemDescription is not None or
            self.ItemDescriptionForClearance is not None or
            self.CustomerReferences or
            self.SpecialServicesRequested is not None or
            self.ContentRecords or
            self.ConveyanceDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RequestedPackageLineItem', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestedPackageLineItem')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RequestedPackageLineItem':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RequestedPackageLineItem')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RequestedPackageLineItem', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RequestedPackageLineItem'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RequestedPackageLineItem', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SequenceNumber is not None:
            namespaceprefix_ = self.SequenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.SequenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSequenceNumber>%s</%sSequenceNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.SequenceNumber, input_name='SequenceNumber'), namespaceprefix_ , eol_))
        if self.GroupNumber is not None:
            namespaceprefix_ = self.GroupNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.GroupNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroupNumber>%s</%sGroupNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.GroupNumber, input_name='GroupNumber'), namespaceprefix_ , eol_))
        if self.GroupPackageCount is not None:
            namespaceprefix_ = self.GroupPackageCount_nsprefix_ + ':' if (UseCapturedNS_ and self.GroupPackageCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroupPackageCount>%s</%sGroupPackageCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.GroupPackageCount, input_name='GroupPackageCount'), namespaceprefix_ , eol_))
        if self.VariableHandlingChargeDetail is not None:
            namespaceprefix_ = self.VariableHandlingChargeDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.VariableHandlingChargeDetail_nsprefix_) else ''
            self.VariableHandlingChargeDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='VariableHandlingChargeDetail', pretty_print=pretty_print)
        if self.InsuredValue is not None:
            namespaceprefix_ = self.InsuredValue_nsprefix_ + ':' if (UseCapturedNS_ and self.InsuredValue_nsprefix_) else ''
            self.InsuredValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InsuredValue', pretty_print=pretty_print)
        if self.Weight is not None:
            namespaceprefix_ = self.Weight_nsprefix_ + ':' if (UseCapturedNS_ and self.Weight_nsprefix_) else ''
            self.Weight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Weight', pretty_print=pretty_print)
        if self.Dimensions is not None:
            namespaceprefix_ = self.Dimensions_nsprefix_ + ':' if (UseCapturedNS_ and self.Dimensions_nsprefix_) else ''
            self.Dimensions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Dimensions', pretty_print=pretty_print)
        if self.PhysicalPackaging is not None:
            namespaceprefix_ = self.PhysicalPackaging_nsprefix_ + ':' if (UseCapturedNS_ and self.PhysicalPackaging_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhysicalPackaging>%s</%sPhysicalPackaging>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhysicalPackaging), input_name='PhysicalPackaging')), namespaceprefix_ , eol_))
        for AssociatedFreightLineItems_ in self.AssociatedFreightLineItems:
            namespaceprefix_ = self.AssociatedFreightLineItems_nsprefix_ + ':' if (UseCapturedNS_ and self.AssociatedFreightLineItems_nsprefix_) else ''
            AssociatedFreightLineItems_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AssociatedFreightLineItems', pretty_print=pretty_print)
        if self.ItemDescription is not None:
            namespaceprefix_ = self.ItemDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.ItemDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemDescription>%s</%sItemDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ItemDescription), input_name='ItemDescription')), namespaceprefix_ , eol_))
        if self.ItemDescriptionForClearance is not None:
            namespaceprefix_ = self.ItemDescriptionForClearance_nsprefix_ + ':' if (UseCapturedNS_ and self.ItemDescriptionForClearance_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemDescriptionForClearance>%s</%sItemDescriptionForClearance>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ItemDescriptionForClearance), input_name='ItemDescriptionForClearance')), namespaceprefix_ , eol_))
        for CustomerReferences_ in self.CustomerReferences:
            namespaceprefix_ = self.CustomerReferences_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerReferences_nsprefix_) else ''
            CustomerReferences_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomerReferences', pretty_print=pretty_print)
        if self.SpecialServicesRequested is not None:
            namespaceprefix_ = self.SpecialServicesRequested_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialServicesRequested_nsprefix_) else ''
            self.SpecialServicesRequested.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SpecialServicesRequested', pretty_print=pretty_print)
        for ContentRecords_ in self.ContentRecords:
            namespaceprefix_ = self.ContentRecords_nsprefix_ + ':' if (UseCapturedNS_ and self.ContentRecords_nsprefix_) else ''
            ContentRecords_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ContentRecords', pretty_print=pretty_print)
        if self.ConveyanceDetail is not None:
            namespaceprefix_ = self.ConveyanceDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ConveyanceDetail_nsprefix_) else ''
            self.ConveyanceDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ConveyanceDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SequenceNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'SequenceNumber')
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'SequenceNumber')
            self.SequenceNumber = ival_
            self.SequenceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'GroupNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'GroupNumber')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'GroupNumber')
            self.GroupNumber = ival_
            self.GroupNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'GroupPackageCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'GroupPackageCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'GroupPackageCount')
            self.GroupPackageCount = ival_
            self.GroupPackageCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'VariableHandlingChargeDetail':
            obj_ = VariableHandlingChargeDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.VariableHandlingChargeDetail = obj_
            obj_.original_tagname_ = 'VariableHandlingChargeDetail'
        elif nodeName_ == 'InsuredValue':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InsuredValue = obj_
            obj_.original_tagname_ = 'InsuredValue'
        elif nodeName_ == 'Weight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
        elif nodeName_ == 'Dimensions':
            obj_ = Dimensions.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
        elif nodeName_ == 'PhysicalPackaging':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhysicalPackaging')
            value_ = self.gds_validate_string(value_, node, 'PhysicalPackaging')
            self.PhysicalPackaging = value_
            self.PhysicalPackaging_nsprefix_ = child_.prefix
            # validate type PhysicalPackagingType
            self.validate_PhysicalPackagingType(self.PhysicalPackaging)
        elif nodeName_ == 'AssociatedFreightLineItems':
            obj_ = AssociatedFreightLineItemDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AssociatedFreightLineItems.append(obj_)
            obj_.original_tagname_ = 'AssociatedFreightLineItems'
        elif nodeName_ == 'ItemDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ItemDescription')
            value_ = self.gds_validate_string(value_, node, 'ItemDescription')
            self.ItemDescription = value_
            self.ItemDescription_nsprefix_ = child_.prefix
        elif nodeName_ == 'ItemDescriptionForClearance':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ItemDescriptionForClearance')
            value_ = self.gds_validate_string(value_, node, 'ItemDescriptionForClearance')
            self.ItemDescriptionForClearance = value_
            self.ItemDescriptionForClearance_nsprefix_ = child_.prefix
        elif nodeName_ == 'CustomerReferences':
            obj_ = CustomerReference.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomerReferences.append(obj_)
            obj_.original_tagname_ = 'CustomerReferences'
        elif nodeName_ == 'SpecialServicesRequested':
            obj_ = PackageSpecialServicesRequested.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SpecialServicesRequested = obj_
            obj_.original_tagname_ = 'SpecialServicesRequested'
        elif nodeName_ == 'ContentRecords':
            obj_ = ContentRecord.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ContentRecords.append(obj_)
            obj_.original_tagname_ = 'ContentRecords'
        elif nodeName_ == 'ConveyanceDetail':
            obj_ = ShipperConveyanceDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ConveyanceDetail = obj_
            obj_.original_tagname_ = 'ConveyanceDetail'
# end class RequestedPackageLineItem


class RequestedShipment(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ShipTimestamp=None, DropoffType=None, ServiceType=None, PackagingType=None, ManifestDetail=None, TotalWeight=None, TotalInsuredValue=None, PreferredCurrency=None, ShipmentAuthorizationDetail=None, Shipper=None, Recipient=None, RecipientLocationNumber=None, Origin=None, SoldTo=None, ShippingChargesPayment=None, SpecialServicesRequested=None, ExpressFreightDetail=None, FreightShipmentDetail=None, DeliveryInstructions=None, VariableHandlingChargeDetail=None, CustomsClearanceDetail=None, PickupDetail=None, SmartPostDetail=None, BlockInsightVisibility=None, LabelSpecification=None, ShippingDocumentSpecification=None, RateRequestTypes=None, EdtRequestType=None, MasterTrackingId=None, PackageCount=None, ConfigurationData=None, RequestedPackageLineItems=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(ShipTimestamp, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShipTimestamp, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = ShipTimestamp
        self.ShipTimestamp = initvalue_
        self.ShipTimestamp_nsprefix_ = None
        self.DropoffType = DropoffType
        self.validate_DropoffType(self.DropoffType)
        self.DropoffType_nsprefix_ = None
        self.ServiceType = ServiceType
        self.ServiceType_nsprefix_ = None
        self.PackagingType = PackagingType
        self.PackagingType_nsprefix_ = None
        self.ManifestDetail = ManifestDetail
        self.ManifestDetail_nsprefix_ = None
        self.TotalWeight = TotalWeight
        self.TotalWeight_nsprefix_ = None
        self.TotalInsuredValue = TotalInsuredValue
        self.TotalInsuredValue_nsprefix_ = None
        self.PreferredCurrency = PreferredCurrency
        self.PreferredCurrency_nsprefix_ = None
        self.ShipmentAuthorizationDetail = ShipmentAuthorizationDetail
        self.ShipmentAuthorizationDetail_nsprefix_ = None
        self.Shipper = Shipper
        self.Shipper_nsprefix_ = None
        self.Recipient = Recipient
        self.Recipient_nsprefix_ = None
        self.RecipientLocationNumber = RecipientLocationNumber
        self.RecipientLocationNumber_nsprefix_ = None
        self.Origin = Origin
        self.Origin_nsprefix_ = None
        self.SoldTo = SoldTo
        self.SoldTo_nsprefix_ = None
        self.ShippingChargesPayment = ShippingChargesPayment
        self.ShippingChargesPayment_nsprefix_ = None
        self.SpecialServicesRequested = SpecialServicesRequested
        self.SpecialServicesRequested_nsprefix_ = None
        self.ExpressFreightDetail = ExpressFreightDetail
        self.ExpressFreightDetail_nsprefix_ = None
        self.FreightShipmentDetail = FreightShipmentDetail
        self.FreightShipmentDetail_nsprefix_ = None
        self.DeliveryInstructions = DeliveryInstructions
        self.DeliveryInstructions_nsprefix_ = None
        self.VariableHandlingChargeDetail = VariableHandlingChargeDetail
        self.VariableHandlingChargeDetail_nsprefix_ = None
        self.CustomsClearanceDetail = CustomsClearanceDetail
        self.CustomsClearanceDetail_nsprefix_ = None
        self.PickupDetail = PickupDetail
        self.PickupDetail_nsprefix_ = None
        self.SmartPostDetail = SmartPostDetail
        self.SmartPostDetail_nsprefix_ = None
        self.BlockInsightVisibility = BlockInsightVisibility
        self.BlockInsightVisibility_nsprefix_ = None
        self.LabelSpecification = LabelSpecification
        self.LabelSpecification_nsprefix_ = None
        self.ShippingDocumentSpecification = ShippingDocumentSpecification
        self.ShippingDocumentSpecification_nsprefix_ = None
        if RateRequestTypes is None:
            self.RateRequestTypes = []
        else:
            self.RateRequestTypes = RateRequestTypes
        self.RateRequestTypes_nsprefix_ = None
        self.EdtRequestType = EdtRequestType
        self.validate_EdtRequestType(self.EdtRequestType)
        self.EdtRequestType_nsprefix_ = None
        self.MasterTrackingId = MasterTrackingId
        self.MasterTrackingId_nsprefix_ = None
        self.PackageCount = PackageCount
        self.PackageCount_nsprefix_ = None
        self.ConfigurationData = ConfigurationData
        self.ConfigurationData_nsprefix_ = None
        if RequestedPackageLineItems is None:
            self.RequestedPackageLineItems = []
        else:
            self.RequestedPackageLineItems = RequestedPackageLineItems
        self.RequestedPackageLineItems_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestedShipment)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestedShipment.subclass:
            return RequestedShipment.subclass(*args_, **kwargs_)
        else:
            return RequestedShipment(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ShipTimestamp(self):
        return self.ShipTimestamp
    def set_ShipTimestamp(self, ShipTimestamp):
        self.ShipTimestamp = ShipTimestamp
    def get_DropoffType(self):
        return self.DropoffType
    def set_DropoffType(self, DropoffType):
        self.DropoffType = DropoffType
    def get_ServiceType(self):
        return self.ServiceType
    def set_ServiceType(self, ServiceType):
        self.ServiceType = ServiceType
    def get_PackagingType(self):
        return self.PackagingType
    def set_PackagingType(self, PackagingType):
        self.PackagingType = PackagingType
    def get_ManifestDetail(self):
        return self.ManifestDetail
    def set_ManifestDetail(self, ManifestDetail):
        self.ManifestDetail = ManifestDetail
    def get_TotalWeight(self):
        return self.TotalWeight
    def set_TotalWeight(self, TotalWeight):
        self.TotalWeight = TotalWeight
    def get_TotalInsuredValue(self):
        return self.TotalInsuredValue
    def set_TotalInsuredValue(self, TotalInsuredValue):
        self.TotalInsuredValue = TotalInsuredValue
    def get_PreferredCurrency(self):
        return self.PreferredCurrency
    def set_PreferredCurrency(self, PreferredCurrency):
        self.PreferredCurrency = PreferredCurrency
    def get_ShipmentAuthorizationDetail(self):
        return self.ShipmentAuthorizationDetail
    def set_ShipmentAuthorizationDetail(self, ShipmentAuthorizationDetail):
        self.ShipmentAuthorizationDetail = ShipmentAuthorizationDetail
    def get_Shipper(self):
        return self.Shipper
    def set_Shipper(self, Shipper):
        self.Shipper = Shipper
    def get_Recipient(self):
        return self.Recipient
    def set_Recipient(self, Recipient):
        self.Recipient = Recipient
    def get_RecipientLocationNumber(self):
        return self.RecipientLocationNumber
    def set_RecipientLocationNumber(self, RecipientLocationNumber):
        self.RecipientLocationNumber = RecipientLocationNumber
    def get_Origin(self):
        return self.Origin
    def set_Origin(self, Origin):
        self.Origin = Origin
    def get_SoldTo(self):
        return self.SoldTo
    def set_SoldTo(self, SoldTo):
        self.SoldTo = SoldTo
    def get_ShippingChargesPayment(self):
        return self.ShippingChargesPayment
    def set_ShippingChargesPayment(self, ShippingChargesPayment):
        self.ShippingChargesPayment = ShippingChargesPayment
    def get_SpecialServicesRequested(self):
        return self.SpecialServicesRequested
    def set_SpecialServicesRequested(self, SpecialServicesRequested):
        self.SpecialServicesRequested = SpecialServicesRequested
    def get_ExpressFreightDetail(self):
        return self.ExpressFreightDetail
    def set_ExpressFreightDetail(self, ExpressFreightDetail):
        self.ExpressFreightDetail = ExpressFreightDetail
    def get_FreightShipmentDetail(self):
        return self.FreightShipmentDetail
    def set_FreightShipmentDetail(self, FreightShipmentDetail):
        self.FreightShipmentDetail = FreightShipmentDetail
    def get_DeliveryInstructions(self):
        return self.DeliveryInstructions
    def set_DeliveryInstructions(self, DeliveryInstructions):
        self.DeliveryInstructions = DeliveryInstructions
    def get_VariableHandlingChargeDetail(self):
        return self.VariableHandlingChargeDetail
    def set_VariableHandlingChargeDetail(self, VariableHandlingChargeDetail):
        self.VariableHandlingChargeDetail = VariableHandlingChargeDetail
    def get_CustomsClearanceDetail(self):
        return self.CustomsClearanceDetail
    def set_CustomsClearanceDetail(self, CustomsClearanceDetail):
        self.CustomsClearanceDetail = CustomsClearanceDetail
    def get_PickupDetail(self):
        return self.PickupDetail
    def set_PickupDetail(self, PickupDetail):
        self.PickupDetail = PickupDetail
    def get_SmartPostDetail(self):
        return self.SmartPostDetail
    def set_SmartPostDetail(self, SmartPostDetail):
        self.SmartPostDetail = SmartPostDetail
    def get_BlockInsightVisibility(self):
        return self.BlockInsightVisibility
    def set_BlockInsightVisibility(self, BlockInsightVisibility):
        self.BlockInsightVisibility = BlockInsightVisibility
    def get_LabelSpecification(self):
        return self.LabelSpecification
    def set_LabelSpecification(self, LabelSpecification):
        self.LabelSpecification = LabelSpecification
    def get_ShippingDocumentSpecification(self):
        return self.ShippingDocumentSpecification
    def set_ShippingDocumentSpecification(self, ShippingDocumentSpecification):
        self.ShippingDocumentSpecification = ShippingDocumentSpecification
    def get_RateRequestTypes(self):
        return self.RateRequestTypes
    def set_RateRequestTypes(self, RateRequestTypes):
        self.RateRequestTypes = RateRequestTypes
    def add_RateRequestTypes(self, value):
        self.RateRequestTypes.append(value)
    def insert_RateRequestTypes_at(self, index, value):
        self.RateRequestTypes.insert(index, value)
    def replace_RateRequestTypes_at(self, index, value):
        self.RateRequestTypes[index] = value
    def get_EdtRequestType(self):
        return self.EdtRequestType
    def set_EdtRequestType(self, EdtRequestType):
        self.EdtRequestType = EdtRequestType
    def get_MasterTrackingId(self):
        return self.MasterTrackingId
    def set_MasterTrackingId(self, MasterTrackingId):
        self.MasterTrackingId = MasterTrackingId
    def get_PackageCount(self):
        return self.PackageCount
    def set_PackageCount(self, PackageCount):
        self.PackageCount = PackageCount
    def get_ConfigurationData(self):
        return self.ConfigurationData
    def set_ConfigurationData(self, ConfigurationData):
        self.ConfigurationData = ConfigurationData
    def get_RequestedPackageLineItems(self):
        return self.RequestedPackageLineItems
    def set_RequestedPackageLineItems(self, RequestedPackageLineItems):
        self.RequestedPackageLineItems = RequestedPackageLineItems
    def add_RequestedPackageLineItems(self, value):
        self.RequestedPackageLineItems.append(value)
    def insert_RequestedPackageLineItems_at(self, index, value):
        self.RequestedPackageLineItems.insert(index, value)
    def replace_RequestedPackageLineItems_at(self, index, value):
        self.RequestedPackageLineItems[index] = value
    def validate_DropoffType(self, value):
        result = True
        # Validate type DropoffType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BUSINESS_SERVICE_CENTER', 'DROP_BOX', 'REGULAR_PICKUP', 'REQUEST_COURIER', 'STATION']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DropoffType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_RateRequestType(self, value):
        result = True
        # Validate type RateRequestType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['LIST', 'NONE', 'PREFERRED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RateRequestType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_EdtRequestType(self, value):
        result = True
        # Validate type EdtRequestType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ALL', 'NONE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on EdtRequestType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.ShipTimestamp is not None or
            self.DropoffType is not None or
            self.ServiceType is not None or
            self.PackagingType is not None or
            self.ManifestDetail is not None or
            self.TotalWeight is not None or
            self.TotalInsuredValue is not None or
            self.PreferredCurrency is not None or
            self.ShipmentAuthorizationDetail is not None or
            self.Shipper is not None or
            self.Recipient is not None or
            self.RecipientLocationNumber is not None or
            self.Origin is not None or
            self.SoldTo is not None or
            self.ShippingChargesPayment is not None or
            self.SpecialServicesRequested is not None or
            self.ExpressFreightDetail is not None or
            self.FreightShipmentDetail is not None or
            self.DeliveryInstructions is not None or
            self.VariableHandlingChargeDetail is not None or
            self.CustomsClearanceDetail is not None or
            self.PickupDetail is not None or
            self.SmartPostDetail is not None or
            self.BlockInsightVisibility is not None or
            self.LabelSpecification is not None or
            self.ShippingDocumentSpecification is not None or
            self.RateRequestTypes or
            self.EdtRequestType is not None or
            self.MasterTrackingId is not None or
            self.PackageCount is not None or
            self.ConfigurationData is not None or
            self.RequestedPackageLineItems
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RequestedShipment', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestedShipment')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RequestedShipment':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RequestedShipment')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RequestedShipment', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RequestedShipment'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RequestedShipment', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ShipTimestamp is not None:
            namespaceprefix_ = self.ShipTimestamp_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipTimestamp_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipTimestamp>%s</%sShipTimestamp>%s' % (namespaceprefix_ , self.gds_format_datetime(self.ShipTimestamp, input_name='ShipTimestamp'), namespaceprefix_ , eol_))
        if self.DropoffType is not None:
            namespaceprefix_ = self.DropoffType_nsprefix_ + ':' if (UseCapturedNS_ and self.DropoffType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDropoffType>%s</%sDropoffType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DropoffType), input_name='DropoffType')), namespaceprefix_ , eol_))
        if self.ServiceType is not None:
            namespaceprefix_ = self.ServiceType_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceType>%s</%sServiceType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ServiceType), input_name='ServiceType')), namespaceprefix_ , eol_))
        if self.PackagingType is not None:
            namespaceprefix_ = self.PackagingType_nsprefix_ + ':' if (UseCapturedNS_ and self.PackagingType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackagingType>%s</%sPackagingType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PackagingType), input_name='PackagingType')), namespaceprefix_ , eol_))
        if self.ManifestDetail is not None:
            namespaceprefix_ = self.ManifestDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ManifestDetail_nsprefix_) else ''
            self.ManifestDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ManifestDetail', pretty_print=pretty_print)
        if self.TotalWeight is not None:
            namespaceprefix_ = self.TotalWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalWeight_nsprefix_) else ''
            self.TotalWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalWeight', pretty_print=pretty_print)
        if self.TotalInsuredValue is not None:
            namespaceprefix_ = self.TotalInsuredValue_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalInsuredValue_nsprefix_) else ''
            self.TotalInsuredValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalInsuredValue', pretty_print=pretty_print)
        if self.PreferredCurrency is not None:
            namespaceprefix_ = self.PreferredCurrency_nsprefix_ + ':' if (UseCapturedNS_ and self.PreferredCurrency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPreferredCurrency>%s</%sPreferredCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PreferredCurrency), input_name='PreferredCurrency')), namespaceprefix_ , eol_))
        if self.ShipmentAuthorizationDetail is not None:
            namespaceprefix_ = self.ShipmentAuthorizationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentAuthorizationDetail_nsprefix_) else ''
            self.ShipmentAuthorizationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentAuthorizationDetail', pretty_print=pretty_print)
        if self.Shipper is not None:
            namespaceprefix_ = self.Shipper_nsprefix_ + ':' if (UseCapturedNS_ and self.Shipper_nsprefix_) else ''
            self.Shipper.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Shipper', pretty_print=pretty_print)
        if self.Recipient is not None:
            namespaceprefix_ = self.Recipient_nsprefix_ + ':' if (UseCapturedNS_ and self.Recipient_nsprefix_) else ''
            self.Recipient.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Recipient', pretty_print=pretty_print)
        if self.RecipientLocationNumber is not None:
            namespaceprefix_ = self.RecipientLocationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.RecipientLocationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecipientLocationNumber>%s</%sRecipientLocationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecipientLocationNumber), input_name='RecipientLocationNumber')), namespaceprefix_ , eol_))
        if self.Origin is not None:
            namespaceprefix_ = self.Origin_nsprefix_ + ':' if (UseCapturedNS_ and self.Origin_nsprefix_) else ''
            self.Origin.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Origin', pretty_print=pretty_print)
        if self.SoldTo is not None:
            namespaceprefix_ = self.SoldTo_nsprefix_ + ':' if (UseCapturedNS_ and self.SoldTo_nsprefix_) else ''
            self.SoldTo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SoldTo', pretty_print=pretty_print)
        if self.ShippingChargesPayment is not None:
            namespaceprefix_ = self.ShippingChargesPayment_nsprefix_ + ':' if (UseCapturedNS_ and self.ShippingChargesPayment_nsprefix_) else ''
            self.ShippingChargesPayment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShippingChargesPayment', pretty_print=pretty_print)
        if self.SpecialServicesRequested is not None:
            namespaceprefix_ = self.SpecialServicesRequested_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialServicesRequested_nsprefix_) else ''
            self.SpecialServicesRequested.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SpecialServicesRequested', pretty_print=pretty_print)
        if self.ExpressFreightDetail is not None:
            namespaceprefix_ = self.ExpressFreightDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ExpressFreightDetail_nsprefix_) else ''
            self.ExpressFreightDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExpressFreightDetail', pretty_print=pretty_print)
        if self.FreightShipmentDetail is not None:
            namespaceprefix_ = self.FreightShipmentDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightShipmentDetail_nsprefix_) else ''
            self.FreightShipmentDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreightShipmentDetail', pretty_print=pretty_print)
        if self.DeliveryInstructions is not None:
            namespaceprefix_ = self.DeliveryInstructions_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryInstructions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryInstructions>%s</%sDeliveryInstructions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryInstructions), input_name='DeliveryInstructions')), namespaceprefix_ , eol_))
        if self.VariableHandlingChargeDetail is not None:
            namespaceprefix_ = self.VariableHandlingChargeDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.VariableHandlingChargeDetail_nsprefix_) else ''
            self.VariableHandlingChargeDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='VariableHandlingChargeDetail', pretty_print=pretty_print)
        if self.CustomsClearanceDetail is not None:
            namespaceprefix_ = self.CustomsClearanceDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsClearanceDetail_nsprefix_) else ''
            self.CustomsClearanceDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomsClearanceDetail', pretty_print=pretty_print)
        if self.PickupDetail is not None:
            namespaceprefix_ = self.PickupDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.PickupDetail_nsprefix_) else ''
            self.PickupDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PickupDetail', pretty_print=pretty_print)
        if self.SmartPostDetail is not None:
            namespaceprefix_ = self.SmartPostDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.SmartPostDetail_nsprefix_) else ''
            self.SmartPostDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SmartPostDetail', pretty_print=pretty_print)
        if self.BlockInsightVisibility is not None:
            namespaceprefix_ = self.BlockInsightVisibility_nsprefix_ + ':' if (UseCapturedNS_ and self.BlockInsightVisibility_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBlockInsightVisibility>%s</%sBlockInsightVisibility>%s' % (namespaceprefix_ , self.gds_format_boolean(self.BlockInsightVisibility, input_name='BlockInsightVisibility'), namespaceprefix_ , eol_))
        if self.LabelSpecification is not None:
            namespaceprefix_ = self.LabelSpecification_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelSpecification_nsprefix_) else ''
            self.LabelSpecification.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LabelSpecification', pretty_print=pretty_print)
        if self.ShippingDocumentSpecification is not None:
            namespaceprefix_ = self.ShippingDocumentSpecification_nsprefix_ + ':' if (UseCapturedNS_ and self.ShippingDocumentSpecification_nsprefix_) else ''
            self.ShippingDocumentSpecification.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShippingDocumentSpecification', pretty_print=pretty_print)
        for RateRequestTypes_ in self.RateRequestTypes:
            namespaceprefix_ = self.RateRequestTypes_nsprefix_ + ':' if (UseCapturedNS_ and self.RateRequestTypes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateRequestTypes>%s</%sRateRequestTypes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(RateRequestTypes_), input_name='RateRequestTypes')), namespaceprefix_ , eol_))
        if self.EdtRequestType is not None:
            namespaceprefix_ = self.EdtRequestType_nsprefix_ + ':' if (UseCapturedNS_ and self.EdtRequestType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEdtRequestType>%s</%sEdtRequestType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EdtRequestType), input_name='EdtRequestType')), namespaceprefix_ , eol_))
        if self.MasterTrackingId is not None:
            namespaceprefix_ = self.MasterTrackingId_nsprefix_ + ':' if (UseCapturedNS_ and self.MasterTrackingId_nsprefix_) else ''
            self.MasterTrackingId.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MasterTrackingId', pretty_print=pretty_print)
        if self.PackageCount is not None:
            namespaceprefix_ = self.PackageCount_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackageCount>%s</%sPackageCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.PackageCount, input_name='PackageCount'), namespaceprefix_ , eol_))
        if self.ConfigurationData is not None:
            namespaceprefix_ = self.ConfigurationData_nsprefix_ + ':' if (UseCapturedNS_ and self.ConfigurationData_nsprefix_) else ''
            self.ConfigurationData.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ConfigurationData', pretty_print=pretty_print)
        for RequestedPackageLineItems_ in self.RequestedPackageLineItems:
            namespaceprefix_ = self.RequestedPackageLineItems_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestedPackageLineItems_nsprefix_) else ''
            RequestedPackageLineItems_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RequestedPackageLineItems', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ShipTimestamp':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.ShipTimestamp = dval_
            self.ShipTimestamp_nsprefix_ = child_.prefix
        elif nodeName_ == 'DropoffType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DropoffType')
            value_ = self.gds_validate_string(value_, node, 'DropoffType')
            self.DropoffType = value_
            self.DropoffType_nsprefix_ = child_.prefix
            # validate type DropoffType
            self.validate_DropoffType(self.DropoffType)
        elif nodeName_ == 'ServiceType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ServiceType')
            value_ = self.gds_validate_string(value_, node, 'ServiceType')
            self.ServiceType = value_
            self.ServiceType_nsprefix_ = child_.prefix
        elif nodeName_ == 'PackagingType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackagingType')
            value_ = self.gds_validate_string(value_, node, 'PackagingType')
            self.PackagingType = value_
            self.PackagingType_nsprefix_ = child_.prefix
        elif nodeName_ == 'ManifestDetail':
            obj_ = ShipmentManifestDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ManifestDetail = obj_
            obj_.original_tagname_ = 'ManifestDetail'
        elif nodeName_ == 'TotalWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalWeight = obj_
            obj_.original_tagname_ = 'TotalWeight'
        elif nodeName_ == 'TotalInsuredValue':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalInsuredValue = obj_
            obj_.original_tagname_ = 'TotalInsuredValue'
        elif nodeName_ == 'PreferredCurrency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PreferredCurrency')
            value_ = self.gds_validate_string(value_, node, 'PreferredCurrency')
            self.PreferredCurrency = value_
            self.PreferredCurrency_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShipmentAuthorizationDetail':
            obj_ = ShipmentAuthorizationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentAuthorizationDetail = obj_
            obj_.original_tagname_ = 'ShipmentAuthorizationDetail'
        elif nodeName_ == 'Shipper':
            obj_ = Party.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Shipper = obj_
            obj_.original_tagname_ = 'Shipper'
        elif nodeName_ == 'Recipient':
            obj_ = Party.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Recipient = obj_
            obj_.original_tagname_ = 'Recipient'
        elif nodeName_ == 'RecipientLocationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecipientLocationNumber')
            value_ = self.gds_validate_string(value_, node, 'RecipientLocationNumber')
            self.RecipientLocationNumber = value_
            self.RecipientLocationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Origin':
            obj_ = ContactAndAddress.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Origin = obj_
            obj_.original_tagname_ = 'Origin'
        elif nodeName_ == 'SoldTo':
            obj_ = Party.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SoldTo = obj_
            obj_.original_tagname_ = 'SoldTo'
        elif nodeName_ == 'ShippingChargesPayment':
            obj_ = Payment.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShippingChargesPayment = obj_
            obj_.original_tagname_ = 'ShippingChargesPayment'
        elif nodeName_ == 'SpecialServicesRequested':
            obj_ = ShipmentSpecialServicesRequested.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SpecialServicesRequested = obj_
            obj_.original_tagname_ = 'SpecialServicesRequested'
        elif nodeName_ == 'ExpressFreightDetail':
            obj_ = ExpressFreightDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExpressFreightDetail = obj_
            obj_.original_tagname_ = 'ExpressFreightDetail'
        elif nodeName_ == 'FreightShipmentDetail':
            obj_ = FreightShipmentDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreightShipmentDetail = obj_
            obj_.original_tagname_ = 'FreightShipmentDetail'
        elif nodeName_ == 'DeliveryInstructions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DeliveryInstructions')
            value_ = self.gds_validate_string(value_, node, 'DeliveryInstructions')
            self.DeliveryInstructions = value_
            self.DeliveryInstructions_nsprefix_ = child_.prefix
        elif nodeName_ == 'VariableHandlingChargeDetail':
            obj_ = VariableHandlingChargeDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.VariableHandlingChargeDetail = obj_
            obj_.original_tagname_ = 'VariableHandlingChargeDetail'
        elif nodeName_ == 'CustomsClearanceDetail':
            obj_ = CustomsClearanceDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomsClearanceDetail = obj_
            obj_.original_tagname_ = 'CustomsClearanceDetail'
        elif nodeName_ == 'PickupDetail':
            obj_ = PickupDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PickupDetail = obj_
            obj_.original_tagname_ = 'PickupDetail'
        elif nodeName_ == 'SmartPostDetail':
            obj_ = SmartPostShipmentDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SmartPostDetail = obj_
            obj_.original_tagname_ = 'SmartPostDetail'
        elif nodeName_ == 'BlockInsightVisibility':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'BlockInsightVisibility')
            ival_ = self.gds_validate_boolean(ival_, node, 'BlockInsightVisibility')
            self.BlockInsightVisibility = ival_
            self.BlockInsightVisibility_nsprefix_ = child_.prefix
        elif nodeName_ == 'LabelSpecification':
            obj_ = LabelSpecification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LabelSpecification = obj_
            obj_.original_tagname_ = 'LabelSpecification'
        elif nodeName_ == 'ShippingDocumentSpecification':
            obj_ = ShippingDocumentSpecification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShippingDocumentSpecification = obj_
            obj_.original_tagname_ = 'ShippingDocumentSpecification'
        elif nodeName_ == 'RateRequestTypes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RateRequestTypes')
            value_ = self.gds_validate_string(value_, node, 'RateRequestTypes')
            self.RateRequestTypes.append(value_)
            self.RateRequestTypes_nsprefix_ = child_.prefix
            # validate type RateRequestType
            self.validate_RateRequestType(self.RateRequestTypes[-1])
        elif nodeName_ == 'EdtRequestType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EdtRequestType')
            value_ = self.gds_validate_string(value_, node, 'EdtRequestType')
            self.EdtRequestType = value_
            self.EdtRequestType_nsprefix_ = child_.prefix
            # validate type EdtRequestType
            self.validate_EdtRequestType(self.EdtRequestType)
        elif nodeName_ == 'MasterTrackingId':
            obj_ = TrackingId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MasterTrackingId = obj_
            obj_.original_tagname_ = 'MasterTrackingId'
        elif nodeName_ == 'PackageCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PackageCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PackageCount')
            self.PackageCount = ival_
            self.PackageCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'ConfigurationData':
            obj_ = ShipmentConfigurationData.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ConfigurationData = obj_
            obj_.original_tagname_ = 'ConfigurationData'
        elif nodeName_ == 'RequestedPackageLineItems':
            obj_ = RequestedPackageLineItem.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RequestedPackageLineItems.append(obj_)
            obj_.original_tagname_ = 'RequestedPackageLineItems'
# end class RequestedShipment


class ReturnAssociationDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TrackingNumber=None, ShipDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TrackingNumber = TrackingNumber
        self.TrackingNumber_nsprefix_ = None
        if isinstance(ShipDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShipDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ShipDate
        self.ShipDate = initvalue_
        self.ShipDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReturnAssociationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReturnAssociationDetail.subclass:
            return ReturnAssociationDetail.subclass(*args_, **kwargs_)
        else:
            return ReturnAssociationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TrackingNumber(self):
        return self.TrackingNumber
    def set_TrackingNumber(self, TrackingNumber):
        self.TrackingNumber = TrackingNumber
    def get_ShipDate(self):
        return self.ShipDate
    def set_ShipDate(self, ShipDate):
        self.ShipDate = ShipDate
    def hasContent_(self):
        if (
            self.TrackingNumber is not None or
            self.ShipDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReturnAssociationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReturnAssociationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReturnAssociationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReturnAssociationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReturnAssociationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReturnAssociationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReturnAssociationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TrackingNumber is not None:
            namespaceprefix_ = self.TrackingNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTrackingNumber>%s</%sTrackingNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumber), input_name='TrackingNumber')), namespaceprefix_ , eol_))
        if self.ShipDate is not None:
            namespaceprefix_ = self.ShipDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipDate>%s</%sShipDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ShipDate, input_name='ShipDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TrackingNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TrackingNumber')
            value_ = self.gds_validate_string(value_, node, 'TrackingNumber')
            self.TrackingNumber = value_
            self.TrackingNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShipDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ShipDate = dval_
            self.ShipDate_nsprefix_ = child_.prefix
# end class ReturnAssociationDetail


class ReturnEMailDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MerchantPhoneNumber=None, AllowedSpecialServices=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.MerchantPhoneNumber = MerchantPhoneNumber
        self.MerchantPhoneNumber_nsprefix_ = None
        if AllowedSpecialServices is None:
            self.AllowedSpecialServices = []
        else:
            self.AllowedSpecialServices = AllowedSpecialServices
        self.AllowedSpecialServices_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReturnEMailDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReturnEMailDetail.subclass:
            return ReturnEMailDetail.subclass(*args_, **kwargs_)
        else:
            return ReturnEMailDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MerchantPhoneNumber(self):
        return self.MerchantPhoneNumber
    def set_MerchantPhoneNumber(self, MerchantPhoneNumber):
        self.MerchantPhoneNumber = MerchantPhoneNumber
    def get_AllowedSpecialServices(self):
        return self.AllowedSpecialServices
    def set_AllowedSpecialServices(self, AllowedSpecialServices):
        self.AllowedSpecialServices = AllowedSpecialServices
    def add_AllowedSpecialServices(self, value):
        self.AllowedSpecialServices.append(value)
    def insert_AllowedSpecialServices_at(self, index, value):
        self.AllowedSpecialServices.insert(index, value)
    def replace_AllowedSpecialServices_at(self, index, value):
        self.AllowedSpecialServices[index] = value
    def validate_ReturnEMailAllowedSpecialServiceType(self, value):
        result = True
        # Validate type ReturnEMailAllowedSpecialServiceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['SATURDAY_DELIVERY', 'SATURDAY_PICKUP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ReturnEMailAllowedSpecialServiceType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.MerchantPhoneNumber is not None or
            self.AllowedSpecialServices
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReturnEMailDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReturnEMailDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReturnEMailDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReturnEMailDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReturnEMailDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReturnEMailDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReturnEMailDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MerchantPhoneNumber is not None:
            namespaceprefix_ = self.MerchantPhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.MerchantPhoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMerchantPhoneNumber>%s</%sMerchantPhoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MerchantPhoneNumber), input_name='MerchantPhoneNumber')), namespaceprefix_ , eol_))
        for AllowedSpecialServices_ in self.AllowedSpecialServices:
            namespaceprefix_ = self.AllowedSpecialServices_nsprefix_ + ':' if (UseCapturedNS_ and self.AllowedSpecialServices_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowedSpecialServices>%s</%sAllowedSpecialServices>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(AllowedSpecialServices_), input_name='AllowedSpecialServices')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MerchantPhoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MerchantPhoneNumber')
            value_ = self.gds_validate_string(value_, node, 'MerchantPhoneNumber')
            self.MerchantPhoneNumber = value_
            self.MerchantPhoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'AllowedSpecialServices':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AllowedSpecialServices')
            value_ = self.gds_validate_string(value_, node, 'AllowedSpecialServices')
            self.AllowedSpecialServices.append(value_)
            self.AllowedSpecialServices_nsprefix_ = child_.prefix
            # validate type ReturnEMailAllowedSpecialServiceType
            self.validate_ReturnEMailAllowedSpecialServiceType(self.AllowedSpecialServices[-1])
# end class ReturnEMailDetail


class ReturnInstructionsDetail(GeneratedsSuper):
    """The instructions indicating how to print the return instructions( e.g.
    image type) Specifies characteristics of a shipping document to be
    produced."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Format=None, CustomText=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Format = Format
        self.Format_nsprefix_ = None
        self.CustomText = CustomText
        self.CustomText_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReturnInstructionsDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReturnInstructionsDetail.subclass:
            return ReturnInstructionsDetail.subclass(*args_, **kwargs_)
        else:
            return ReturnInstructionsDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Format(self):
        return self.Format
    def set_Format(self, Format):
        self.Format = Format
    def get_CustomText(self):
        return self.CustomText
    def set_CustomText(self, CustomText):
        self.CustomText = CustomText
    def hasContent_(self):
        if (
            self.Format is not None or
            self.CustomText is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReturnInstructionsDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReturnInstructionsDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReturnInstructionsDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReturnInstructionsDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReturnInstructionsDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReturnInstructionsDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReturnInstructionsDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Format is not None:
            namespaceprefix_ = self.Format_nsprefix_ + ':' if (UseCapturedNS_ and self.Format_nsprefix_) else ''
            self.Format.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Format', pretty_print=pretty_print)
        if self.CustomText is not None:
            namespaceprefix_ = self.CustomText_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomText_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomText>%s</%sCustomText>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomText), input_name='CustomText')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Format':
            obj_ = ShippingDocumentFormat.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Format = obj_
            obj_.original_tagname_ = 'Format'
        elif nodeName_ == 'CustomText':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomText')
            value_ = self.gds_validate_string(value_, node, 'CustomText')
            self.CustomText = value_
            self.CustomText_nsprefix_ = child_.prefix
# end class ReturnInstructionsDetail


class ReturnShipmentDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ReturnType=None, Rma=None, ReturnEMailDetail=None, ReturnAssociation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ReturnType = ReturnType
        self.validate_ReturnType(self.ReturnType)
        self.ReturnType_nsprefix_ = None
        self.Rma = Rma
        self.Rma_nsprefix_ = None
        self.ReturnEMailDetail = ReturnEMailDetail
        self.ReturnEMailDetail_nsprefix_ = None
        self.ReturnAssociation = ReturnAssociation
        self.ReturnAssociation_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReturnShipmentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReturnShipmentDetail.subclass:
            return ReturnShipmentDetail.subclass(*args_, **kwargs_)
        else:
            return ReturnShipmentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ReturnType(self):
        return self.ReturnType
    def set_ReturnType(self, ReturnType):
        self.ReturnType = ReturnType
    def get_Rma(self):
        return self.Rma
    def set_Rma(self, Rma):
        self.Rma = Rma
    def get_ReturnEMailDetail(self):
        return self.ReturnEMailDetail
    def set_ReturnEMailDetail(self, ReturnEMailDetail):
        self.ReturnEMailDetail = ReturnEMailDetail
    def get_ReturnAssociation(self):
        return self.ReturnAssociation
    def set_ReturnAssociation(self, ReturnAssociation):
        self.ReturnAssociation = ReturnAssociation
    def validate_ReturnType(self, value):
        result = True
        # Validate type ReturnType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_TAG', 'PENDING', 'PRINT_RETURN_LABEL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ReturnType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.ReturnType is not None or
            self.Rma is not None or
            self.ReturnEMailDetail is not None or
            self.ReturnAssociation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReturnShipmentDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReturnShipmentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReturnShipmentDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReturnShipmentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReturnShipmentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReturnShipmentDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReturnShipmentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReturnType is not None:
            namespaceprefix_ = self.ReturnType_nsprefix_ + ':' if (UseCapturedNS_ and self.ReturnType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReturnType>%s</%sReturnType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReturnType), input_name='ReturnType')), namespaceprefix_ , eol_))
        if self.Rma is not None:
            namespaceprefix_ = self.Rma_nsprefix_ + ':' if (UseCapturedNS_ and self.Rma_nsprefix_) else ''
            self.Rma.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Rma', pretty_print=pretty_print)
        if self.ReturnEMailDetail is not None:
            namespaceprefix_ = self.ReturnEMailDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ReturnEMailDetail_nsprefix_) else ''
            self.ReturnEMailDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReturnEMailDetail', pretty_print=pretty_print)
        if self.ReturnAssociation is not None:
            namespaceprefix_ = self.ReturnAssociation_nsprefix_ + ':' if (UseCapturedNS_ and self.ReturnAssociation_nsprefix_) else ''
            self.ReturnAssociation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReturnAssociation', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ReturnType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ReturnType')
            value_ = self.gds_validate_string(value_, node, 'ReturnType')
            self.ReturnType = value_
            self.ReturnType_nsprefix_ = child_.prefix
            # validate type ReturnType
            self.validate_ReturnType(self.ReturnType)
        elif nodeName_ == 'Rma':
            obj_ = Rma.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Rma = obj_
            obj_.original_tagname_ = 'Rma'
        elif nodeName_ == 'ReturnEMailDetail':
            obj_ = ReturnEMailDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReturnEMailDetail = obj_
            obj_.original_tagname_ = 'ReturnEMailDetail'
        elif nodeName_ == 'ReturnAssociation':
            obj_ = ReturnAssociationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReturnAssociation = obj_
            obj_.original_tagname_ = 'ReturnAssociation'
# end class ReturnShipmentDetail


class Rma(GeneratedsSuper):
    """June 2011 ITG 121203 IR-RMA number has been removed from this structure
    and added as a new customer reference type. The structure remains
    because of the reason field below."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Reason=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Reason = Reason
        self.Reason_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Rma)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Rma.subclass:
            return Rma.subclass(*args_, **kwargs_)
        else:
            return Rma(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Reason(self):
        return self.Reason
    def set_Reason(self, Reason):
        self.Reason = Reason
    def hasContent_(self):
        if (
            self.Reason is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Rma', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Rma')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Rma':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Rma')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Rma', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Rma'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Rma', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Reason is not None:
            namespaceprefix_ = self.Reason_nsprefix_ + ':' if (UseCapturedNS_ and self.Reason_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReason>%s</%sReason>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Reason), input_name='Reason')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Reason':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Reason')
            value_ = self.gds_validate_string(value_, node, 'Reason')
            self.Reason = value_
            self.Reason_nsprefix_ = child_.prefix
# end class Rma


class ServiceDescription(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ServiceType=None, Code=None, Names=None, Description=None, AstraDescription=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ServiceType = ServiceType
        self.ServiceType_nsprefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        if Names is None:
            self.Names = []
        else:
            self.Names = Names
        self.Names_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.AstraDescription = AstraDescription
        self.AstraDescription_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ServiceDescription)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ServiceDescription.subclass:
            return ServiceDescription.subclass(*args_, **kwargs_)
        else:
            return ServiceDescription(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ServiceType(self):
        return self.ServiceType
    def set_ServiceType(self, ServiceType):
        self.ServiceType = ServiceType
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Names(self):
        return self.Names
    def set_Names(self, Names):
        self.Names = Names
    def add_Names(self, value):
        self.Names.append(value)
    def insert_Names_at(self, index, value):
        self.Names.insert(index, value)
    def replace_Names_at(self, index, value):
        self.Names[index] = value
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_AstraDescription(self):
        return self.AstraDescription
    def set_AstraDescription(self, AstraDescription):
        self.AstraDescription = AstraDescription
    def hasContent_(self):
        if (
            self.ServiceType is not None or
            self.Code is not None or
            self.Names or
            self.Description is not None or
            self.AstraDescription is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ServiceDescription', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ServiceDescription')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ServiceDescription':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ServiceDescription')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ServiceDescription', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ServiceDescription'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ServiceDescription', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceType is not None:
            namespaceprefix_ = self.ServiceType_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceType>%s</%sServiceType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ServiceType), input_name='ServiceType')), namespaceprefix_ , eol_))
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        for Names_ in self.Names:
            namespaceprefix_ = self.Names_nsprefix_ + ':' if (UseCapturedNS_ and self.Names_nsprefix_) else ''
            Names_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Names', pretty_print=pretty_print)
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.AstraDescription is not None:
            namespaceprefix_ = self.AstraDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.AstraDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAstraDescription>%s</%sAstraDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AstraDescription), input_name='AstraDescription')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ServiceType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ServiceType')
            value_ = self.gds_validate_string(value_, node, 'ServiceType')
            self.ServiceType = value_
            self.ServiceType_nsprefix_ = child_.prefix
        elif nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Names':
            obj_ = ProductName.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Names.append(obj_)
            obj_.original_tagname_ = 'Names'
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'AstraDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AstraDescription')
            value_ = self.gds_validate_string(value_, node, 'AstraDescription')
            self.AstraDescription = value_
            self.AstraDescription_nsprefix_ = child_.prefix
# end class ServiceDescription


class ShipmentAdvisoryDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RegulatoryAdvisories=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if RegulatoryAdvisories is None:
            self.RegulatoryAdvisories = []
        else:
            self.RegulatoryAdvisories = RegulatoryAdvisories
        self.RegulatoryAdvisories_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentAdvisoryDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentAdvisoryDetail.subclass:
            return ShipmentAdvisoryDetail.subclass(*args_, **kwargs_)
        else:
            return ShipmentAdvisoryDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RegulatoryAdvisories(self):
        return self.RegulatoryAdvisories
    def set_RegulatoryAdvisories(self, RegulatoryAdvisories):
        self.RegulatoryAdvisories = RegulatoryAdvisories
    def add_RegulatoryAdvisories(self, value):
        self.RegulatoryAdvisories.append(value)
    def insert_RegulatoryAdvisories_at(self, index, value):
        self.RegulatoryAdvisories.insert(index, value)
    def replace_RegulatoryAdvisories_at(self, index, value):
        self.RegulatoryAdvisories[index] = value
    def hasContent_(self):
        if (
            self.RegulatoryAdvisories
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentAdvisoryDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentAdvisoryDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentAdvisoryDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentAdvisoryDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentAdvisoryDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentAdvisoryDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentAdvisoryDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RegulatoryAdvisories_ in self.RegulatoryAdvisories:
            namespaceprefix_ = self.RegulatoryAdvisories_nsprefix_ + ':' if (UseCapturedNS_ and self.RegulatoryAdvisories_nsprefix_) else ''
            RegulatoryAdvisories_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RegulatoryAdvisories', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RegulatoryAdvisories':
            obj_ = RegulatoryAdvisoryDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RegulatoryAdvisories.append(obj_)
            obj_.original_tagname_ = 'RegulatoryAdvisories'
# end class ShipmentAdvisoryDetail


class ShipmentAuthorizationDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AccountNumber = AccountNumber
        self.AccountNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentAuthorizationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentAuthorizationDetail.subclass:
            return ShipmentAuthorizationDetail.subclass(*args_, **kwargs_)
        else:
            return ShipmentAuthorizationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AccountNumber(self):
        return self.AccountNumber
    def set_AccountNumber(self, AccountNumber):
        self.AccountNumber = AccountNumber
    def hasContent_(self):
        if (
            self.AccountNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentAuthorizationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentAuthorizationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentAuthorizationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentAuthorizationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentAuthorizationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentAuthorizationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentAuthorizationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountNumber is not None:
            namespaceprefix_ = self.AccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountNumber')
            value_ = self.gds_validate_string(value_, node, 'AccountNumber')
            self.AccountNumber = value_
            self.AccountNumber_nsprefix_ = child_.prefix
# end class ShipmentAuthorizationDetail


class ShipmentConfigurationData(GeneratedsSuper):
    """Specifies data structures that may be re-used multiple times with s
    single shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DangerousGoodsPackageConfigurations=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if DangerousGoodsPackageConfigurations is None:
            self.DangerousGoodsPackageConfigurations = []
        else:
            self.DangerousGoodsPackageConfigurations = DangerousGoodsPackageConfigurations
        self.DangerousGoodsPackageConfigurations_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentConfigurationData)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentConfigurationData.subclass:
            return ShipmentConfigurationData.subclass(*args_, **kwargs_)
        else:
            return ShipmentConfigurationData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DangerousGoodsPackageConfigurations(self):
        return self.DangerousGoodsPackageConfigurations
    def set_DangerousGoodsPackageConfigurations(self, DangerousGoodsPackageConfigurations):
        self.DangerousGoodsPackageConfigurations = DangerousGoodsPackageConfigurations
    def add_DangerousGoodsPackageConfigurations(self, value):
        self.DangerousGoodsPackageConfigurations.append(value)
    def insert_DangerousGoodsPackageConfigurations_at(self, index, value):
        self.DangerousGoodsPackageConfigurations.insert(index, value)
    def replace_DangerousGoodsPackageConfigurations_at(self, index, value):
        self.DangerousGoodsPackageConfigurations[index] = value
    def hasContent_(self):
        if (
            self.DangerousGoodsPackageConfigurations
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentConfigurationData', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentConfigurationData')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentConfigurationData':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentConfigurationData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentConfigurationData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentConfigurationData'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentConfigurationData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DangerousGoodsPackageConfigurations_ in self.DangerousGoodsPackageConfigurations:
            namespaceprefix_ = self.DangerousGoodsPackageConfigurations_nsprefix_ + ':' if (UseCapturedNS_ and self.DangerousGoodsPackageConfigurations_nsprefix_) else ''
            DangerousGoodsPackageConfigurations_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DangerousGoodsPackageConfigurations', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DangerousGoodsPackageConfigurations':
            obj_ = DangerousGoodsDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DangerousGoodsPackageConfigurations.append(obj_)
            obj_.original_tagname_ = 'DangerousGoodsPackageConfigurations'
# end class ShipmentConfigurationData


class ShipmentDryIceDetail(GeneratedsSuper):
    """Shipment-level totals of dry ice data across all packages."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PackageCount=None, TotalWeight=None, ProcessingOptions=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PackageCount = PackageCount
        self.PackageCount_nsprefix_ = None
        self.TotalWeight = TotalWeight
        self.TotalWeight_nsprefix_ = None
        self.ProcessingOptions = ProcessingOptions
        self.ProcessingOptions_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentDryIceDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentDryIceDetail.subclass:
            return ShipmentDryIceDetail.subclass(*args_, **kwargs_)
        else:
            return ShipmentDryIceDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PackageCount(self):
        return self.PackageCount
    def set_PackageCount(self, PackageCount):
        self.PackageCount = PackageCount
    def get_TotalWeight(self):
        return self.TotalWeight
    def set_TotalWeight(self, TotalWeight):
        self.TotalWeight = TotalWeight
    def get_ProcessingOptions(self):
        return self.ProcessingOptions
    def set_ProcessingOptions(self, ProcessingOptions):
        self.ProcessingOptions = ProcessingOptions
    def hasContent_(self):
        if (
            self.PackageCount is not None or
            self.TotalWeight is not None or
            self.ProcessingOptions is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentDryIceDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentDryIceDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentDryIceDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentDryIceDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentDryIceDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentDryIceDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentDryIceDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackageCount is not None:
            namespaceprefix_ = self.PackageCount_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackageCount>%s</%sPackageCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.PackageCount, input_name='PackageCount'), namespaceprefix_ , eol_))
        if self.TotalWeight is not None:
            namespaceprefix_ = self.TotalWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalWeight_nsprefix_) else ''
            self.TotalWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalWeight', pretty_print=pretty_print)
        if self.ProcessingOptions is not None:
            namespaceprefix_ = self.ProcessingOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.ProcessingOptions_nsprefix_) else ''
            self.ProcessingOptions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ProcessingOptions', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PackageCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PackageCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PackageCount')
            self.PackageCount = ival_
            self.PackageCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'TotalWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalWeight = obj_
            obj_.original_tagname_ = 'TotalWeight'
        elif nodeName_ == 'ProcessingOptions':
            obj_ = ShipmentDryIceProcessingOptionsRequested.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ProcessingOptions = obj_
            obj_.original_tagname_ = 'ProcessingOptions'
# end class ShipmentDryIceDetail


class ShipmentDryIceProcessingOptionsRequested(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Options=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.Options_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentDryIceProcessingOptionsRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentDryIceProcessingOptionsRequested.subclass:
            return ShipmentDryIceProcessingOptionsRequested.subclass(*args_, **kwargs_)
        else:
            return ShipmentDryIceProcessingOptionsRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def add_Options(self, value):
        self.Options.append(value)
    def insert_Options_at(self, index, value):
        self.Options.insert(index, value)
    def replace_Options_at(self, index, value):
        self.Options[index] = value
    def validate_ShipmentDryIceProcessingOptionType(self, value):
        result = True
        # Validate type ShipmentDryIceProcessingOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['SHIPMENT_LEVEL_DRY_ICE_ONLY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShipmentDryIceProcessingOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Options
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentDryIceProcessingOptionsRequested', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentDryIceProcessingOptionsRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentDryIceProcessingOptionsRequested':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentDryIceProcessingOptionsRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentDryIceProcessingOptionsRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentDryIceProcessingOptionsRequested'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentDryIceProcessingOptionsRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Options_ in self.Options:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptions>%s</%sOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Options':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Options')
            value_ = self.gds_validate_string(value_, node, 'Options')
            self.Options.append(value_)
            self.Options_nsprefix_ = child_.prefix
            # validate type ShipmentDryIceProcessingOptionType
            self.validate_ShipmentDryIceProcessingOptionType(self.Options[-1])
# end class ShipmentDryIceProcessingOptionsRequested


class ShipmentEventNotificationDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AggregationType=None, PersonalMessage=None, EventNotifications=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AggregationType = AggregationType
        self.validate_ShipmentNotificationAggregationType(self.AggregationType)
        self.AggregationType_nsprefix_ = None
        self.PersonalMessage = PersonalMessage
        self.PersonalMessage_nsprefix_ = None
        if EventNotifications is None:
            self.EventNotifications = []
        else:
            self.EventNotifications = EventNotifications
        self.EventNotifications_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentEventNotificationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentEventNotificationDetail.subclass:
            return ShipmentEventNotificationDetail.subclass(*args_, **kwargs_)
        else:
            return ShipmentEventNotificationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AggregationType(self):
        return self.AggregationType
    def set_AggregationType(self, AggregationType):
        self.AggregationType = AggregationType
    def get_PersonalMessage(self):
        return self.PersonalMessage
    def set_PersonalMessage(self, PersonalMessage):
        self.PersonalMessage = PersonalMessage
    def get_EventNotifications(self):
        return self.EventNotifications
    def set_EventNotifications(self, EventNotifications):
        self.EventNotifications = EventNotifications
    def add_EventNotifications(self, value):
        self.EventNotifications.append(value)
    def insert_EventNotifications_at(self, index, value):
        self.EventNotifications.insert(index, value)
    def replace_EventNotifications_at(self, index, value):
        self.EventNotifications[index] = value
    def validate_ShipmentNotificationAggregationType(self, value):
        result = True
        # Validate type ShipmentNotificationAggregationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['PER_PACKAGE', 'PER_SHIPMENT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShipmentNotificationAggregationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.AggregationType is not None or
            self.PersonalMessage is not None or
            self.EventNotifications
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentEventNotificationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentEventNotificationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentEventNotificationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentEventNotificationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentEventNotificationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentEventNotificationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentEventNotificationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AggregationType is not None:
            namespaceprefix_ = self.AggregationType_nsprefix_ + ':' if (UseCapturedNS_ and self.AggregationType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAggregationType>%s</%sAggregationType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AggregationType), input_name='AggregationType')), namespaceprefix_ , eol_))
        if self.PersonalMessage is not None:
            namespaceprefix_ = self.PersonalMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.PersonalMessage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPersonalMessage>%s</%sPersonalMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PersonalMessage), input_name='PersonalMessage')), namespaceprefix_ , eol_))
        for EventNotifications_ in self.EventNotifications:
            namespaceprefix_ = self.EventNotifications_nsprefix_ + ':' if (UseCapturedNS_ and self.EventNotifications_nsprefix_) else ''
            EventNotifications_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EventNotifications', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AggregationType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AggregationType')
            value_ = self.gds_validate_string(value_, node, 'AggregationType')
            self.AggregationType = value_
            self.AggregationType_nsprefix_ = child_.prefix
            # validate type ShipmentNotificationAggregationType
            self.validate_ShipmentNotificationAggregationType(self.AggregationType)
        elif nodeName_ == 'PersonalMessage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PersonalMessage')
            value_ = self.gds_validate_string(value_, node, 'PersonalMessage')
            self.PersonalMessage = value_
            self.PersonalMessage_nsprefix_ = child_.prefix
        elif nodeName_ == 'EventNotifications':
            obj_ = ShipmentEventNotificationSpecification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EventNotifications.append(obj_)
            obj_.original_tagname_ = 'EventNotifications'
# end class ShipmentEventNotificationDetail


class ShipmentEventNotificationSpecification(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Role=None, Events=None, NotificationDetail=None, FormatSpecification=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Role = Role
        self.validate_ShipmentNotificationRoleType(self.Role)
        self.Role_nsprefix_ = None
        if Events is None:
            self.Events = []
        else:
            self.Events = Events
        self.Events_nsprefix_ = None
        self.NotificationDetail = NotificationDetail
        self.NotificationDetail_nsprefix_ = None
        self.FormatSpecification = FormatSpecification
        self.FormatSpecification_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentEventNotificationSpecification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentEventNotificationSpecification.subclass:
            return ShipmentEventNotificationSpecification.subclass(*args_, **kwargs_)
        else:
            return ShipmentEventNotificationSpecification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Role(self):
        return self.Role
    def set_Role(self, Role):
        self.Role = Role
    def get_Events(self):
        return self.Events
    def set_Events(self, Events):
        self.Events = Events
    def add_Events(self, value):
        self.Events.append(value)
    def insert_Events_at(self, index, value):
        self.Events.insert(index, value)
    def replace_Events_at(self, index, value):
        self.Events[index] = value
    def get_NotificationDetail(self):
        return self.NotificationDetail
    def set_NotificationDetail(self, NotificationDetail):
        self.NotificationDetail = NotificationDetail
    def get_FormatSpecification(self):
        return self.FormatSpecification
    def set_FormatSpecification(self, FormatSpecification):
        self.FormatSpecification = FormatSpecification
    def validate_ShipmentNotificationRoleType(self, value):
        result = True
        # Validate type ShipmentNotificationRoleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BROKER', 'OTHER', 'RECIPIENT', 'SHIPPER', 'THIRD_PARTY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShipmentNotificationRoleType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_NotificationEventType(self, value):
        result = True
        # Validate type NotificationEventType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ON_DELIVERY', 'ON_ESTIMATED_DELIVERY', 'ON_EXCEPTION', 'ON_PICKUP_DRIVER_ARRIVED', 'ON_PICKUP_DRIVER_ASSIGNED', 'ON_PICKUP_DRIVER_DEPARTED', 'ON_PICKUP_DRIVER_EN_ROUTE', 'ON_SHIPMENT', 'ON_TENDER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationEventType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Role is not None or
            self.Events or
            self.NotificationDetail is not None or
            self.FormatSpecification is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentEventNotificationSpecification', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentEventNotificationSpecification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentEventNotificationSpecification':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentEventNotificationSpecification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentEventNotificationSpecification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentEventNotificationSpecification'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentEventNotificationSpecification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Role is not None:
            namespaceprefix_ = self.Role_nsprefix_ + ':' if (UseCapturedNS_ and self.Role_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRole>%s</%sRole>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Role), input_name='Role')), namespaceprefix_ , eol_))
        for Events_ in self.Events:
            namespaceprefix_ = self.Events_nsprefix_ + ':' if (UseCapturedNS_ and self.Events_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEvents>%s</%sEvents>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Events_), input_name='Events')), namespaceprefix_ , eol_))
        if self.NotificationDetail is not None:
            namespaceprefix_ = self.NotificationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.NotificationDetail_nsprefix_) else ''
            self.NotificationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NotificationDetail', pretty_print=pretty_print)
        if self.FormatSpecification is not None:
            namespaceprefix_ = self.FormatSpecification_nsprefix_ + ':' if (UseCapturedNS_ and self.FormatSpecification_nsprefix_) else ''
            self.FormatSpecification.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FormatSpecification', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Role':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Role')
            value_ = self.gds_validate_string(value_, node, 'Role')
            self.Role = value_
            self.Role_nsprefix_ = child_.prefix
            # validate type ShipmentNotificationRoleType
            self.validate_ShipmentNotificationRoleType(self.Role)
        elif nodeName_ == 'Events':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Events')
            value_ = self.gds_validate_string(value_, node, 'Events')
            self.Events.append(value_)
            self.Events_nsprefix_ = child_.prefix
            # validate type NotificationEventType
            self.validate_NotificationEventType(self.Events[-1])
        elif nodeName_ == 'NotificationDetail':
            obj_ = NotificationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NotificationDetail = obj_
            obj_.original_tagname_ = 'NotificationDetail'
        elif nodeName_ == 'FormatSpecification':
            obj_ = ShipmentNotificationFormatSpecification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FormatSpecification = obj_
            obj_.original_tagname_ = 'FormatSpecification'
# end class ShipmentEventNotificationSpecification


class ShipmentLegRateDetail(GeneratedsSuper):
    """Data for a single leg of a shipment's total/summary rates, as calculated
    per a specific rate type."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LegDescription=None, LegOrigin=None, LegOriginLocationId=None, LegDestination=None, LegDestinationLocationId=None, RateType=None, RateScale=None, RateZone=None, PricingCode=None, RatedWeightMethod=None, MinimumChargeType=None, CurrencyExchangeRate=None, SpecialRatingApplied=None, DimDivisor=None, DimDivisorType=None, FuelSurchargePercent=None, TotalBillingWeight=None, TotalDimWeight=None, TotalBaseCharge=None, TotalFreightDiscounts=None, TotalNetFreight=None, TotalSurcharges=None, TotalNetFedExCharge=None, TotalTaxes=None, TotalNetCharge=None, TotalRebates=None, TotalDutiesAndTaxes=None, TotalNetChargeWithDutiesAndTaxes=None, FreightRateDetail=None, FreightDiscounts=None, Rebates=None, Surcharges=None, Taxes=None, DutiesAndTaxes=None, VariableHandlingCharges=None, TotalVariableHandlingCharges=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.LegDescription = LegDescription
        self.LegDescription_nsprefix_ = None
        self.LegOrigin = LegOrigin
        self.LegOrigin_nsprefix_ = None
        self.LegOriginLocationId = LegOriginLocationId
        self.LegOriginLocationId_nsprefix_ = None
        self.LegDestination = LegDestination
        self.LegDestination_nsprefix_ = None
        self.LegDestinationLocationId = LegDestinationLocationId
        self.LegDestinationLocationId_nsprefix_ = None
        self.RateType = RateType
        self.validate_ReturnedRateType(self.RateType)
        self.RateType_nsprefix_ = None
        self.RateScale = RateScale
        self.RateScale_nsprefix_ = None
        self.RateZone = RateZone
        self.RateZone_nsprefix_ = None
        self.PricingCode = PricingCode
        self.validate_PricingCodeType(self.PricingCode)
        self.PricingCode_nsprefix_ = None
        self.RatedWeightMethod = RatedWeightMethod
        self.validate_RatedWeightMethod(self.RatedWeightMethod)
        self.RatedWeightMethod_nsprefix_ = None
        self.MinimumChargeType = MinimumChargeType
        self.validate_MinimumChargeType(self.MinimumChargeType)
        self.MinimumChargeType_nsprefix_ = None
        self.CurrencyExchangeRate = CurrencyExchangeRate
        self.CurrencyExchangeRate_nsprefix_ = None
        if SpecialRatingApplied is None:
            self.SpecialRatingApplied = []
        else:
            self.SpecialRatingApplied = SpecialRatingApplied
        self.SpecialRatingApplied_nsprefix_ = None
        self.DimDivisor = DimDivisor
        self.DimDivisor_nsprefix_ = None
        self.DimDivisorType = DimDivisorType
        self.validate_RateDimensionalDivisorType(self.DimDivisorType)
        self.DimDivisorType_nsprefix_ = None
        self.FuelSurchargePercent = FuelSurchargePercent
        self.FuelSurchargePercent_nsprefix_ = None
        self.TotalBillingWeight = TotalBillingWeight
        self.TotalBillingWeight_nsprefix_ = None
        self.TotalDimWeight = TotalDimWeight
        self.TotalDimWeight_nsprefix_ = None
        self.TotalBaseCharge = TotalBaseCharge
        self.TotalBaseCharge_nsprefix_ = None
        self.TotalFreightDiscounts = TotalFreightDiscounts
        self.TotalFreightDiscounts_nsprefix_ = None
        self.TotalNetFreight = TotalNetFreight
        self.TotalNetFreight_nsprefix_ = None
        self.TotalSurcharges = TotalSurcharges
        self.TotalSurcharges_nsprefix_ = None
        self.TotalNetFedExCharge = TotalNetFedExCharge
        self.TotalNetFedExCharge_nsprefix_ = None
        self.TotalTaxes = TotalTaxes
        self.TotalTaxes_nsprefix_ = None
        self.TotalNetCharge = TotalNetCharge
        self.TotalNetCharge_nsprefix_ = None
        self.TotalRebates = TotalRebates
        self.TotalRebates_nsprefix_ = None
        self.TotalDutiesAndTaxes = TotalDutiesAndTaxes
        self.TotalDutiesAndTaxes_nsprefix_ = None
        self.TotalNetChargeWithDutiesAndTaxes = TotalNetChargeWithDutiesAndTaxes
        self.TotalNetChargeWithDutiesAndTaxes_nsprefix_ = None
        self.FreightRateDetail = FreightRateDetail
        self.FreightRateDetail_nsprefix_ = None
        if FreightDiscounts is None:
            self.FreightDiscounts = []
        else:
            self.FreightDiscounts = FreightDiscounts
        self.FreightDiscounts_nsprefix_ = None
        if Rebates is None:
            self.Rebates = []
        else:
            self.Rebates = Rebates
        self.Rebates_nsprefix_ = None
        if Surcharges is None:
            self.Surcharges = []
        else:
            self.Surcharges = Surcharges
        self.Surcharges_nsprefix_ = None
        if Taxes is None:
            self.Taxes = []
        else:
            self.Taxes = Taxes
        self.Taxes_nsprefix_ = None
        if DutiesAndTaxes is None:
            self.DutiesAndTaxes = []
        else:
            self.DutiesAndTaxes = DutiesAndTaxes
        self.DutiesAndTaxes_nsprefix_ = None
        self.VariableHandlingCharges = VariableHandlingCharges
        self.VariableHandlingCharges_nsprefix_ = None
        self.TotalVariableHandlingCharges = TotalVariableHandlingCharges
        self.TotalVariableHandlingCharges_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentLegRateDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentLegRateDetail.subclass:
            return ShipmentLegRateDetail.subclass(*args_, **kwargs_)
        else:
            return ShipmentLegRateDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LegDescription(self):
        return self.LegDescription
    def set_LegDescription(self, LegDescription):
        self.LegDescription = LegDescription
    def get_LegOrigin(self):
        return self.LegOrigin
    def set_LegOrigin(self, LegOrigin):
        self.LegOrigin = LegOrigin
    def get_LegOriginLocationId(self):
        return self.LegOriginLocationId
    def set_LegOriginLocationId(self, LegOriginLocationId):
        self.LegOriginLocationId = LegOriginLocationId
    def get_LegDestination(self):
        return self.LegDestination
    def set_LegDestination(self, LegDestination):
        self.LegDestination = LegDestination
    def get_LegDestinationLocationId(self):
        return self.LegDestinationLocationId
    def set_LegDestinationLocationId(self, LegDestinationLocationId):
        self.LegDestinationLocationId = LegDestinationLocationId
    def get_RateType(self):
        return self.RateType
    def set_RateType(self, RateType):
        self.RateType = RateType
    def get_RateScale(self):
        return self.RateScale
    def set_RateScale(self, RateScale):
        self.RateScale = RateScale
    def get_RateZone(self):
        return self.RateZone
    def set_RateZone(self, RateZone):
        self.RateZone = RateZone
    def get_PricingCode(self):
        return self.PricingCode
    def set_PricingCode(self, PricingCode):
        self.PricingCode = PricingCode
    def get_RatedWeightMethod(self):
        return self.RatedWeightMethod
    def set_RatedWeightMethod(self, RatedWeightMethod):
        self.RatedWeightMethod = RatedWeightMethod
    def get_MinimumChargeType(self):
        return self.MinimumChargeType
    def set_MinimumChargeType(self, MinimumChargeType):
        self.MinimumChargeType = MinimumChargeType
    def get_CurrencyExchangeRate(self):
        return self.CurrencyExchangeRate
    def set_CurrencyExchangeRate(self, CurrencyExchangeRate):
        self.CurrencyExchangeRate = CurrencyExchangeRate
    def get_SpecialRatingApplied(self):
        return self.SpecialRatingApplied
    def set_SpecialRatingApplied(self, SpecialRatingApplied):
        self.SpecialRatingApplied = SpecialRatingApplied
    def add_SpecialRatingApplied(self, value):
        self.SpecialRatingApplied.append(value)
    def insert_SpecialRatingApplied_at(self, index, value):
        self.SpecialRatingApplied.insert(index, value)
    def replace_SpecialRatingApplied_at(self, index, value):
        self.SpecialRatingApplied[index] = value
    def get_DimDivisor(self):
        return self.DimDivisor
    def set_DimDivisor(self, DimDivisor):
        self.DimDivisor = DimDivisor
    def get_DimDivisorType(self):
        return self.DimDivisorType
    def set_DimDivisorType(self, DimDivisorType):
        self.DimDivisorType = DimDivisorType
    def get_FuelSurchargePercent(self):
        return self.FuelSurchargePercent
    def set_FuelSurchargePercent(self, FuelSurchargePercent):
        self.FuelSurchargePercent = FuelSurchargePercent
    def get_TotalBillingWeight(self):
        return self.TotalBillingWeight
    def set_TotalBillingWeight(self, TotalBillingWeight):
        self.TotalBillingWeight = TotalBillingWeight
    def get_TotalDimWeight(self):
        return self.TotalDimWeight
    def set_TotalDimWeight(self, TotalDimWeight):
        self.TotalDimWeight = TotalDimWeight
    def get_TotalBaseCharge(self):
        return self.TotalBaseCharge
    def set_TotalBaseCharge(self, TotalBaseCharge):
        self.TotalBaseCharge = TotalBaseCharge
    def get_TotalFreightDiscounts(self):
        return self.TotalFreightDiscounts
    def set_TotalFreightDiscounts(self, TotalFreightDiscounts):
        self.TotalFreightDiscounts = TotalFreightDiscounts
    def get_TotalNetFreight(self):
        return self.TotalNetFreight
    def set_TotalNetFreight(self, TotalNetFreight):
        self.TotalNetFreight = TotalNetFreight
    def get_TotalSurcharges(self):
        return self.TotalSurcharges
    def set_TotalSurcharges(self, TotalSurcharges):
        self.TotalSurcharges = TotalSurcharges
    def get_TotalNetFedExCharge(self):
        return self.TotalNetFedExCharge
    def set_TotalNetFedExCharge(self, TotalNetFedExCharge):
        self.TotalNetFedExCharge = TotalNetFedExCharge
    def get_TotalTaxes(self):
        return self.TotalTaxes
    def set_TotalTaxes(self, TotalTaxes):
        self.TotalTaxes = TotalTaxes
    def get_TotalNetCharge(self):
        return self.TotalNetCharge
    def set_TotalNetCharge(self, TotalNetCharge):
        self.TotalNetCharge = TotalNetCharge
    def get_TotalRebates(self):
        return self.TotalRebates
    def set_TotalRebates(self, TotalRebates):
        self.TotalRebates = TotalRebates
    def get_TotalDutiesAndTaxes(self):
        return self.TotalDutiesAndTaxes
    def set_TotalDutiesAndTaxes(self, TotalDutiesAndTaxes):
        self.TotalDutiesAndTaxes = TotalDutiesAndTaxes
    def get_TotalNetChargeWithDutiesAndTaxes(self):
        return self.TotalNetChargeWithDutiesAndTaxes
    def set_TotalNetChargeWithDutiesAndTaxes(self, TotalNetChargeWithDutiesAndTaxes):
        self.TotalNetChargeWithDutiesAndTaxes = TotalNetChargeWithDutiesAndTaxes
    def get_FreightRateDetail(self):
        return self.FreightRateDetail
    def set_FreightRateDetail(self, FreightRateDetail):
        self.FreightRateDetail = FreightRateDetail
    def get_FreightDiscounts(self):
        return self.FreightDiscounts
    def set_FreightDiscounts(self, FreightDiscounts):
        self.FreightDiscounts = FreightDiscounts
    def add_FreightDiscounts(self, value):
        self.FreightDiscounts.append(value)
    def insert_FreightDiscounts_at(self, index, value):
        self.FreightDiscounts.insert(index, value)
    def replace_FreightDiscounts_at(self, index, value):
        self.FreightDiscounts[index] = value
    def get_Rebates(self):
        return self.Rebates
    def set_Rebates(self, Rebates):
        self.Rebates = Rebates
    def add_Rebates(self, value):
        self.Rebates.append(value)
    def insert_Rebates_at(self, index, value):
        self.Rebates.insert(index, value)
    def replace_Rebates_at(self, index, value):
        self.Rebates[index] = value
    def get_Surcharges(self):
        return self.Surcharges
    def set_Surcharges(self, Surcharges):
        self.Surcharges = Surcharges
    def add_Surcharges(self, value):
        self.Surcharges.append(value)
    def insert_Surcharges_at(self, index, value):
        self.Surcharges.insert(index, value)
    def replace_Surcharges_at(self, index, value):
        self.Surcharges[index] = value
    def get_Taxes(self):
        return self.Taxes
    def set_Taxes(self, Taxes):
        self.Taxes = Taxes
    def add_Taxes(self, value):
        self.Taxes.append(value)
    def insert_Taxes_at(self, index, value):
        self.Taxes.insert(index, value)
    def replace_Taxes_at(self, index, value):
        self.Taxes[index] = value
    def get_DutiesAndTaxes(self):
        return self.DutiesAndTaxes
    def set_DutiesAndTaxes(self, DutiesAndTaxes):
        self.DutiesAndTaxes = DutiesAndTaxes
    def add_DutiesAndTaxes(self, value):
        self.DutiesAndTaxes.append(value)
    def insert_DutiesAndTaxes_at(self, index, value):
        self.DutiesAndTaxes.insert(index, value)
    def replace_DutiesAndTaxes_at(self, index, value):
        self.DutiesAndTaxes[index] = value
    def get_VariableHandlingCharges(self):
        return self.VariableHandlingCharges
    def set_VariableHandlingCharges(self, VariableHandlingCharges):
        self.VariableHandlingCharges = VariableHandlingCharges
    def get_TotalVariableHandlingCharges(self):
        return self.TotalVariableHandlingCharges
    def set_TotalVariableHandlingCharges(self, TotalVariableHandlingCharges):
        self.TotalVariableHandlingCharges = TotalVariableHandlingCharges
    def validate_ReturnedRateType(self, value):
        result = True
        # Validate type ReturnedRateType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['INCENTIVE', 'NEGOTIATED', 'PAYOR_ACCOUNT_PACKAGE', 'PAYOR_ACCOUNT_SHIPMENT', 'PAYOR_LIST_PACKAGE', 'PAYOR_LIST_SHIPMENT', 'PREFERRED_ACCOUNT_PACKAGE', 'PREFERRED_ACCOUNT_SHIPMENT', 'PREFERRED_LIST_PACKAGE', 'PREFERRED_LIST_SHIPMENT', 'PREFERRED_NEGOTIATED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ReturnedRateType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_PricingCodeType(self, value):
        result = True
        # Validate type PricingCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACTUAL', 'ALTERNATE', 'BASE', 'HUNDREDWEIGHT', 'HUNDREDWEIGHT_ALTERNATE', 'INTERNATIONAL_DISTRIBUTION', 'INTERNATIONAL_ECONOMY_SERVICE', 'LTL_FREIGHT', 'PACKAGE', 'SHIPMENT', 'SHIPMENT_FIVE_POUND_OPTIONAL', 'SHIPMENT_OPTIONAL', 'SPECIAL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PricingCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_RatedWeightMethod(self, value):
        result = True
        # Validate type RatedWeightMethod, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACTUAL', 'AVERAGE_PACKAGE_WEIGHT_MINIMUM', 'BALLOON', 'DEFAULT_WEIGHT_APPLIED', 'DIM', 'FREIGHT_MINIMUM', 'MIXED', 'OVERSIZE', 'OVERSIZE_1', 'OVERSIZE_2', 'OVERSIZE_3', 'PACKAGING_MINIMUM', 'WEIGHT_BREAK']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RatedWeightMethod' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_MinimumChargeType(self, value):
        result = True
        # Validate type MinimumChargeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CUSTOMER', 'CUSTOMER_FREIGHT_WEIGHT', 'EARNED_DISCOUNT', 'MIXED', 'RATE_SCALE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on MinimumChargeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_SpecialRatingAppliedType(self, value):
        result = True
        # Validate type SpecialRatingAppliedType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_ONE_RATE', 'FIXED_FUEL_SURCHARGE', 'IMPORT_PRICING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SpecialRatingAppliedType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_RateDimensionalDivisorType(self, value):
        result = True
        # Validate type RateDimensionalDivisorType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['COUNTRY', 'CUSTOMER', 'OTHER', 'PRODUCT', 'WAIVED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RateDimensionalDivisorType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.LegDescription is not None or
            self.LegOrigin is not None or
            self.LegOriginLocationId is not None or
            self.LegDestination is not None or
            self.LegDestinationLocationId is not None or
            self.RateType is not None or
            self.RateScale is not None or
            self.RateZone is not None or
            self.PricingCode is not None or
            self.RatedWeightMethod is not None or
            self.MinimumChargeType is not None or
            self.CurrencyExchangeRate is not None or
            self.SpecialRatingApplied or
            self.DimDivisor is not None or
            self.DimDivisorType is not None or
            self.FuelSurchargePercent is not None or
            self.TotalBillingWeight is not None or
            self.TotalDimWeight is not None or
            self.TotalBaseCharge is not None or
            self.TotalFreightDiscounts is not None or
            self.TotalNetFreight is not None or
            self.TotalSurcharges is not None or
            self.TotalNetFedExCharge is not None or
            self.TotalTaxes is not None or
            self.TotalNetCharge is not None or
            self.TotalRebates is not None or
            self.TotalDutiesAndTaxes is not None or
            self.TotalNetChargeWithDutiesAndTaxes is not None or
            self.FreightRateDetail is not None or
            self.FreightDiscounts or
            self.Rebates or
            self.Surcharges or
            self.Taxes or
            self.DutiesAndTaxes or
            self.VariableHandlingCharges is not None or
            self.TotalVariableHandlingCharges is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentLegRateDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentLegRateDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentLegRateDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentLegRateDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentLegRateDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentLegRateDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentLegRateDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LegDescription is not None:
            namespaceprefix_ = self.LegDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.LegDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLegDescription>%s</%sLegDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LegDescription), input_name='LegDescription')), namespaceprefix_ , eol_))
        if self.LegOrigin is not None:
            namespaceprefix_ = self.LegOrigin_nsprefix_ + ':' if (UseCapturedNS_ and self.LegOrigin_nsprefix_) else ''
            self.LegOrigin.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LegOrigin', pretty_print=pretty_print)
        if self.LegOriginLocationId is not None:
            namespaceprefix_ = self.LegOriginLocationId_nsprefix_ + ':' if (UseCapturedNS_ and self.LegOriginLocationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLegOriginLocationId>%s</%sLegOriginLocationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LegOriginLocationId), input_name='LegOriginLocationId')), namespaceprefix_ , eol_))
        if self.LegDestination is not None:
            namespaceprefix_ = self.LegDestination_nsprefix_ + ':' if (UseCapturedNS_ and self.LegDestination_nsprefix_) else ''
            self.LegDestination.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LegDestination', pretty_print=pretty_print)
        if self.LegDestinationLocationId is not None:
            namespaceprefix_ = self.LegDestinationLocationId_nsprefix_ + ':' if (UseCapturedNS_ and self.LegDestinationLocationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLegDestinationLocationId>%s</%sLegDestinationLocationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LegDestinationLocationId), input_name='LegDestinationLocationId')), namespaceprefix_ , eol_))
        if self.RateType is not None:
            namespaceprefix_ = self.RateType_nsprefix_ + ':' if (UseCapturedNS_ and self.RateType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateType>%s</%sRateType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateType), input_name='RateType')), namespaceprefix_ , eol_))
        if self.RateScale is not None:
            namespaceprefix_ = self.RateScale_nsprefix_ + ':' if (UseCapturedNS_ and self.RateScale_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateScale>%s</%sRateScale>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateScale), input_name='RateScale')), namespaceprefix_ , eol_))
        if self.RateZone is not None:
            namespaceprefix_ = self.RateZone_nsprefix_ + ':' if (UseCapturedNS_ and self.RateZone_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateZone>%s</%sRateZone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateZone), input_name='RateZone')), namespaceprefix_ , eol_))
        if self.PricingCode is not None:
            namespaceprefix_ = self.PricingCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PricingCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPricingCode>%s</%sPricingCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PricingCode), input_name='PricingCode')), namespaceprefix_ , eol_))
        if self.RatedWeightMethod is not None:
            namespaceprefix_ = self.RatedWeightMethod_nsprefix_ + ':' if (UseCapturedNS_ and self.RatedWeightMethod_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRatedWeightMethod>%s</%sRatedWeightMethod>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RatedWeightMethod), input_name='RatedWeightMethod')), namespaceprefix_ , eol_))
        if self.MinimumChargeType is not None:
            namespaceprefix_ = self.MinimumChargeType_nsprefix_ + ':' if (UseCapturedNS_ and self.MinimumChargeType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMinimumChargeType>%s</%sMinimumChargeType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MinimumChargeType), input_name='MinimumChargeType')), namespaceprefix_ , eol_))
        if self.CurrencyExchangeRate is not None:
            namespaceprefix_ = self.CurrencyExchangeRate_nsprefix_ + ':' if (UseCapturedNS_ and self.CurrencyExchangeRate_nsprefix_) else ''
            self.CurrencyExchangeRate.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CurrencyExchangeRate', pretty_print=pretty_print)
        for SpecialRatingApplied_ in self.SpecialRatingApplied:
            namespaceprefix_ = self.SpecialRatingApplied_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialRatingApplied_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialRatingApplied>%s</%sSpecialRatingApplied>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(SpecialRatingApplied_), input_name='SpecialRatingApplied')), namespaceprefix_ , eol_))
        if self.DimDivisor is not None:
            namespaceprefix_ = self.DimDivisor_nsprefix_ + ':' if (UseCapturedNS_ and self.DimDivisor_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDimDivisor>%s</%sDimDivisor>%s' % (namespaceprefix_ , self.gds_format_integer(self.DimDivisor, input_name='DimDivisor'), namespaceprefix_ , eol_))
        if self.DimDivisorType is not None:
            namespaceprefix_ = self.DimDivisorType_nsprefix_ + ':' if (UseCapturedNS_ and self.DimDivisorType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDimDivisorType>%s</%sDimDivisorType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DimDivisorType), input_name='DimDivisorType')), namespaceprefix_ , eol_))
        if self.FuelSurchargePercent is not None:
            namespaceprefix_ = self.FuelSurchargePercent_nsprefix_ + ':' if (UseCapturedNS_ and self.FuelSurchargePercent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFuelSurchargePercent>%s</%sFuelSurchargePercent>%s' % (namespaceprefix_ , self.gds_format_decimal(self.FuelSurchargePercent, input_name='FuelSurchargePercent'), namespaceprefix_ , eol_))
        if self.TotalBillingWeight is not None:
            namespaceprefix_ = self.TotalBillingWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalBillingWeight_nsprefix_) else ''
            self.TotalBillingWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalBillingWeight', pretty_print=pretty_print)
        if self.TotalDimWeight is not None:
            namespaceprefix_ = self.TotalDimWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalDimWeight_nsprefix_) else ''
            self.TotalDimWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalDimWeight', pretty_print=pretty_print)
        if self.TotalBaseCharge is not None:
            namespaceprefix_ = self.TotalBaseCharge_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalBaseCharge_nsprefix_) else ''
            self.TotalBaseCharge.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalBaseCharge', pretty_print=pretty_print)
        if self.TotalFreightDiscounts is not None:
            namespaceprefix_ = self.TotalFreightDiscounts_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalFreightDiscounts_nsprefix_) else ''
            self.TotalFreightDiscounts.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalFreightDiscounts', pretty_print=pretty_print)
        if self.TotalNetFreight is not None:
            namespaceprefix_ = self.TotalNetFreight_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalNetFreight_nsprefix_) else ''
            self.TotalNetFreight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalNetFreight', pretty_print=pretty_print)
        if self.TotalSurcharges is not None:
            namespaceprefix_ = self.TotalSurcharges_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalSurcharges_nsprefix_) else ''
            self.TotalSurcharges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalSurcharges', pretty_print=pretty_print)
        if self.TotalNetFedExCharge is not None:
            namespaceprefix_ = self.TotalNetFedExCharge_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalNetFedExCharge_nsprefix_) else ''
            self.TotalNetFedExCharge.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalNetFedExCharge', pretty_print=pretty_print)
        if self.TotalTaxes is not None:
            namespaceprefix_ = self.TotalTaxes_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalTaxes_nsprefix_) else ''
            self.TotalTaxes.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalTaxes', pretty_print=pretty_print)
        if self.TotalNetCharge is not None:
            namespaceprefix_ = self.TotalNetCharge_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalNetCharge_nsprefix_) else ''
            self.TotalNetCharge.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalNetCharge', pretty_print=pretty_print)
        if self.TotalRebates is not None:
            namespaceprefix_ = self.TotalRebates_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalRebates_nsprefix_) else ''
            self.TotalRebates.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalRebates', pretty_print=pretty_print)
        if self.TotalDutiesAndTaxes is not None:
            namespaceprefix_ = self.TotalDutiesAndTaxes_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalDutiesAndTaxes_nsprefix_) else ''
            self.TotalDutiesAndTaxes.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalDutiesAndTaxes', pretty_print=pretty_print)
        if self.TotalNetChargeWithDutiesAndTaxes is not None:
            namespaceprefix_ = self.TotalNetChargeWithDutiesAndTaxes_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalNetChargeWithDutiesAndTaxes_nsprefix_) else ''
            self.TotalNetChargeWithDutiesAndTaxes.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalNetChargeWithDutiesAndTaxes', pretty_print=pretty_print)
        if self.FreightRateDetail is not None:
            namespaceprefix_ = self.FreightRateDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightRateDetail_nsprefix_) else ''
            self.FreightRateDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreightRateDetail', pretty_print=pretty_print)
        for FreightDiscounts_ in self.FreightDiscounts:
            namespaceprefix_ = self.FreightDiscounts_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightDiscounts_nsprefix_) else ''
            FreightDiscounts_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreightDiscounts', pretty_print=pretty_print)
        for Rebates_ in self.Rebates:
            namespaceprefix_ = self.Rebates_nsprefix_ + ':' if (UseCapturedNS_ and self.Rebates_nsprefix_) else ''
            Rebates_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Rebates', pretty_print=pretty_print)
        for Surcharges_ in self.Surcharges:
            namespaceprefix_ = self.Surcharges_nsprefix_ + ':' if (UseCapturedNS_ and self.Surcharges_nsprefix_) else ''
            Surcharges_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Surcharges', pretty_print=pretty_print)
        for Taxes_ in self.Taxes:
            namespaceprefix_ = self.Taxes_nsprefix_ + ':' if (UseCapturedNS_ and self.Taxes_nsprefix_) else ''
            Taxes_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Taxes', pretty_print=pretty_print)
        for DutiesAndTaxes_ in self.DutiesAndTaxes:
            namespaceprefix_ = self.DutiesAndTaxes_nsprefix_ + ':' if (UseCapturedNS_ and self.DutiesAndTaxes_nsprefix_) else ''
            DutiesAndTaxes_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DutiesAndTaxes', pretty_print=pretty_print)
        if self.VariableHandlingCharges is not None:
            namespaceprefix_ = self.VariableHandlingCharges_nsprefix_ + ':' if (UseCapturedNS_ and self.VariableHandlingCharges_nsprefix_) else ''
            self.VariableHandlingCharges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='VariableHandlingCharges', pretty_print=pretty_print)
        if self.TotalVariableHandlingCharges is not None:
            namespaceprefix_ = self.TotalVariableHandlingCharges_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalVariableHandlingCharges_nsprefix_) else ''
            self.TotalVariableHandlingCharges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalVariableHandlingCharges', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LegDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LegDescription')
            value_ = self.gds_validate_string(value_, node, 'LegDescription')
            self.LegDescription = value_
            self.LegDescription_nsprefix_ = child_.prefix
        elif nodeName_ == 'LegOrigin':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LegOrigin = obj_
            obj_.original_tagname_ = 'LegOrigin'
        elif nodeName_ == 'LegOriginLocationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LegOriginLocationId')
            value_ = self.gds_validate_string(value_, node, 'LegOriginLocationId')
            self.LegOriginLocationId = value_
            self.LegOriginLocationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'LegDestination':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LegDestination = obj_
            obj_.original_tagname_ = 'LegDestination'
        elif nodeName_ == 'LegDestinationLocationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LegDestinationLocationId')
            value_ = self.gds_validate_string(value_, node, 'LegDestinationLocationId')
            self.LegDestinationLocationId = value_
            self.LegDestinationLocationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'RateType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RateType')
            value_ = self.gds_validate_string(value_, node, 'RateType')
            self.RateType = value_
            self.RateType_nsprefix_ = child_.prefix
            # validate type ReturnedRateType
            self.validate_ReturnedRateType(self.RateType)
        elif nodeName_ == 'RateScale':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RateScale')
            value_ = self.gds_validate_string(value_, node, 'RateScale')
            self.RateScale = value_
            self.RateScale_nsprefix_ = child_.prefix
        elif nodeName_ == 'RateZone':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RateZone')
            value_ = self.gds_validate_string(value_, node, 'RateZone')
            self.RateZone = value_
            self.RateZone_nsprefix_ = child_.prefix
        elif nodeName_ == 'PricingCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PricingCode')
            value_ = self.gds_validate_string(value_, node, 'PricingCode')
            self.PricingCode = value_
            self.PricingCode_nsprefix_ = child_.prefix
            # validate type PricingCodeType
            self.validate_PricingCodeType(self.PricingCode)
        elif nodeName_ == 'RatedWeightMethod':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RatedWeightMethod')
            value_ = self.gds_validate_string(value_, node, 'RatedWeightMethod')
            self.RatedWeightMethod = value_
            self.RatedWeightMethod_nsprefix_ = child_.prefix
            # validate type RatedWeightMethod
            self.validate_RatedWeightMethod(self.RatedWeightMethod)
        elif nodeName_ == 'MinimumChargeType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MinimumChargeType')
            value_ = self.gds_validate_string(value_, node, 'MinimumChargeType')
            self.MinimumChargeType = value_
            self.MinimumChargeType_nsprefix_ = child_.prefix
            # validate type MinimumChargeType
            self.validate_MinimumChargeType(self.MinimumChargeType)
        elif nodeName_ == 'CurrencyExchangeRate':
            obj_ = CurrencyExchangeRate.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CurrencyExchangeRate = obj_
            obj_.original_tagname_ = 'CurrencyExchangeRate'
        elif nodeName_ == 'SpecialRatingApplied':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecialRatingApplied')
            value_ = self.gds_validate_string(value_, node, 'SpecialRatingApplied')
            self.SpecialRatingApplied.append(value_)
            self.SpecialRatingApplied_nsprefix_ = child_.prefix
            # validate type SpecialRatingAppliedType
            self.validate_SpecialRatingAppliedType(self.SpecialRatingApplied[-1])
        elif nodeName_ == 'DimDivisor' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'DimDivisor')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'DimDivisor')
            self.DimDivisor = ival_
            self.DimDivisor_nsprefix_ = child_.prefix
        elif nodeName_ == 'DimDivisorType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DimDivisorType')
            value_ = self.gds_validate_string(value_, node, 'DimDivisorType')
            self.DimDivisorType = value_
            self.DimDivisorType_nsprefix_ = child_.prefix
            # validate type RateDimensionalDivisorType
            self.validate_RateDimensionalDivisorType(self.DimDivisorType)
        elif nodeName_ == 'FuelSurchargePercent' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'FuelSurchargePercent')
            fval_ = self.gds_validate_decimal(fval_, node, 'FuelSurchargePercent')
            self.FuelSurchargePercent = fval_
            self.FuelSurchargePercent_nsprefix_ = child_.prefix
        elif nodeName_ == 'TotalBillingWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalBillingWeight = obj_
            obj_.original_tagname_ = 'TotalBillingWeight'
        elif nodeName_ == 'TotalDimWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalDimWeight = obj_
            obj_.original_tagname_ = 'TotalDimWeight'
        elif nodeName_ == 'TotalBaseCharge':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalBaseCharge = obj_
            obj_.original_tagname_ = 'TotalBaseCharge'
        elif nodeName_ == 'TotalFreightDiscounts':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalFreightDiscounts = obj_
            obj_.original_tagname_ = 'TotalFreightDiscounts'
        elif nodeName_ == 'TotalNetFreight':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalNetFreight = obj_
            obj_.original_tagname_ = 'TotalNetFreight'
        elif nodeName_ == 'TotalSurcharges':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalSurcharges = obj_
            obj_.original_tagname_ = 'TotalSurcharges'
        elif nodeName_ == 'TotalNetFedExCharge':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalNetFedExCharge = obj_
            obj_.original_tagname_ = 'TotalNetFedExCharge'
        elif nodeName_ == 'TotalTaxes':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalTaxes = obj_
            obj_.original_tagname_ = 'TotalTaxes'
        elif nodeName_ == 'TotalNetCharge':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalNetCharge = obj_
            obj_.original_tagname_ = 'TotalNetCharge'
        elif nodeName_ == 'TotalRebates':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalRebates = obj_
            obj_.original_tagname_ = 'TotalRebates'
        elif nodeName_ == 'TotalDutiesAndTaxes':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalDutiesAndTaxes = obj_
            obj_.original_tagname_ = 'TotalDutiesAndTaxes'
        elif nodeName_ == 'TotalNetChargeWithDutiesAndTaxes':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalNetChargeWithDutiesAndTaxes = obj_
            obj_.original_tagname_ = 'TotalNetChargeWithDutiesAndTaxes'
        elif nodeName_ == 'FreightRateDetail':
            obj_ = FreightRateDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreightRateDetail = obj_
            obj_.original_tagname_ = 'FreightRateDetail'
        elif nodeName_ == 'FreightDiscounts':
            obj_ = RateDiscount.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreightDiscounts.append(obj_)
            obj_.original_tagname_ = 'FreightDiscounts'
        elif nodeName_ == 'Rebates':
            obj_ = Rebate.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Rebates.append(obj_)
            obj_.original_tagname_ = 'Rebates'
        elif nodeName_ == 'Surcharges':
            obj_ = Surcharge.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Surcharges.append(obj_)
            obj_.original_tagname_ = 'Surcharges'
        elif nodeName_ == 'Taxes':
            obj_ = Tax.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Taxes.append(obj_)
            obj_.original_tagname_ = 'Taxes'
        elif nodeName_ == 'DutiesAndTaxes':
            obj_ = EdtCommodityTax.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DutiesAndTaxes.append(obj_)
            obj_.original_tagname_ = 'DutiesAndTaxes'
        elif nodeName_ == 'VariableHandlingCharges':
            obj_ = VariableHandlingCharges.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.VariableHandlingCharges = obj_
            obj_.original_tagname_ = 'VariableHandlingCharges'
        elif nodeName_ == 'TotalVariableHandlingCharges':
            obj_ = VariableHandlingCharges.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalVariableHandlingCharges = obj_
            obj_.original_tagname_ = 'TotalVariableHandlingCharges'
# end class ShipmentLegRateDetail


class ShipmentManifestDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ManifestReferenceType=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ManifestReferenceType = ManifestReferenceType
        self.validate_CustomerReferenceType(self.ManifestReferenceType)
        self.ManifestReferenceType_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentManifestDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentManifestDetail.subclass:
            return ShipmentManifestDetail.subclass(*args_, **kwargs_)
        else:
            return ShipmentManifestDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ManifestReferenceType(self):
        return self.ManifestReferenceType
    def set_ManifestReferenceType(self, ManifestReferenceType):
        self.ManifestReferenceType = ManifestReferenceType
    def validate_CustomerReferenceType(self, value):
        result = True
        # Validate type CustomerReferenceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CUSTOMER_REFERENCE', 'DEPARTMENT_NUMBER', 'INTRACOUNTRY_REGULATORY_REFERENCE', 'INVOICE_NUMBER', 'P_O_NUMBER', 'RMA_ASSOCIATION', 'SHIPMENT_INTEGRITY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomerReferenceType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.ManifestReferenceType is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentManifestDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentManifestDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentManifestDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentManifestDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentManifestDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentManifestDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentManifestDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ManifestReferenceType is not None:
            namespaceprefix_ = self.ManifestReferenceType_nsprefix_ + ':' if (UseCapturedNS_ and self.ManifestReferenceType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sManifestReferenceType>%s</%sManifestReferenceType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ManifestReferenceType), input_name='ManifestReferenceType')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ManifestReferenceType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ManifestReferenceType')
            value_ = self.gds_validate_string(value_, node, 'ManifestReferenceType')
            self.ManifestReferenceType = value_
            self.ManifestReferenceType_nsprefix_ = child_.prefix
            # validate type CustomerReferenceType
            self.validate_CustomerReferenceType(self.ManifestReferenceType)
# end class ShipmentManifestDetail


class ShipmentNotificationFormatSpecification(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_NotificationFormatType(self.Type)
        self.Type_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentNotificationFormatSpecification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentNotificationFormatSpecification.subclass:
            return ShipmentNotificationFormatSpecification.subclass(*args_, **kwargs_)
        else:
            return ShipmentNotificationFormatSpecification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def validate_NotificationFormatType(self, value):
        result = True
        # Validate type NotificationFormatType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['HTML', 'TEXT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationFormatType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentNotificationFormatSpecification', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentNotificationFormatSpecification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentNotificationFormatSpecification':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentNotificationFormatSpecification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentNotificationFormatSpecification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentNotificationFormatSpecification'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentNotificationFormatSpecification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type NotificationFormatType
            self.validate_NotificationFormatType(self.Type)
# end class ShipmentNotificationFormatSpecification


class ShipmentOperationalDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UrsaPrefixCode=None, UrsaSuffixCode=None, OriginLocationId=None, OriginLocationNumber=None, OriginServiceArea=None, DestinationLocationId=None, DestinationLocationNumber=None, DestinationServiceArea=None, DestinationLocationStateOrProvinceCode=None, DeliveryDate=None, DeliveryDay=None, PublishedDeliveryTime=None, CommitDate=None, CommitDay=None, TransitTime=None, MaximumTransitTime=None, CustomTransitTime=None, IneligibleForMoneyBackGuarantee=None, DeliveryEligibilities=None, AstraPlannedServiceLevel=None, AstraDescription=None, PostalCode=None, StateOrProvinceCode=None, CountryCode=None, AirportId=None, ServiceCode=None, PackagingCode=None, Scac=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UrsaPrefixCode = UrsaPrefixCode
        self.UrsaPrefixCode_nsprefix_ = None
        self.UrsaSuffixCode = UrsaSuffixCode
        self.UrsaSuffixCode_nsprefix_ = None
        self.OriginLocationId = OriginLocationId
        self.OriginLocationId_nsprefix_ = None
        self.OriginLocationNumber = OriginLocationNumber
        self.OriginLocationNumber_nsprefix_ = None
        self.OriginServiceArea = OriginServiceArea
        self.OriginServiceArea_nsprefix_ = None
        self.DestinationLocationId = DestinationLocationId
        self.DestinationLocationId_nsprefix_ = None
        self.DestinationLocationNumber = DestinationLocationNumber
        self.DestinationLocationNumber_nsprefix_ = None
        self.DestinationServiceArea = DestinationServiceArea
        self.DestinationServiceArea_nsprefix_ = None
        self.DestinationLocationStateOrProvinceCode = DestinationLocationStateOrProvinceCode
        self.DestinationLocationStateOrProvinceCode_nsprefix_ = None
        if isinstance(DeliveryDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DeliveryDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DeliveryDate
        self.DeliveryDate = initvalue_
        self.DeliveryDate_nsprefix_ = None
        self.DeliveryDay = DeliveryDay
        self.validate_DayOfWeekType(self.DeliveryDay)
        self.DeliveryDay_nsprefix_ = None
        if isinstance(PublishedDeliveryTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(PublishedDeliveryTime, '%H:%M:%S').time()
        else:
            initvalue_ = PublishedDeliveryTime
        self.PublishedDeliveryTime = initvalue_
        self.PublishedDeliveryTime_nsprefix_ = None
        if isinstance(CommitDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(CommitDate, '%Y-%m-%d').date()
        else:
            initvalue_ = CommitDate
        self.CommitDate = initvalue_
        self.CommitDate_nsprefix_ = None
        self.CommitDay = CommitDay
        self.validate_DayOfWeekType(self.CommitDay)
        self.CommitDay_nsprefix_ = None
        self.TransitTime = TransitTime
        self.validate_TransitTimeType(self.TransitTime)
        self.TransitTime_nsprefix_ = None
        self.MaximumTransitTime = MaximumTransitTime
        self.validate_TransitTimeType(self.MaximumTransitTime)
        self.MaximumTransitTime_nsprefix_ = None
        self.CustomTransitTime = CustomTransitTime
        self.validate_TransitTimeType(self.CustomTransitTime)
        self.CustomTransitTime_nsprefix_ = None
        self.IneligibleForMoneyBackGuarantee = IneligibleForMoneyBackGuarantee
        self.IneligibleForMoneyBackGuarantee_nsprefix_ = None
        if DeliveryEligibilities is None:
            self.DeliveryEligibilities = []
        else:
            self.DeliveryEligibilities = DeliveryEligibilities
        self.DeliveryEligibilities_nsprefix_ = None
        self.AstraPlannedServiceLevel = AstraPlannedServiceLevel
        self.AstraPlannedServiceLevel_nsprefix_ = None
        self.AstraDescription = AstraDescription
        self.AstraDescription_nsprefix_ = None
        self.PostalCode = PostalCode
        self.PostalCode_nsprefix_ = None
        self.StateOrProvinceCode = StateOrProvinceCode
        self.StateOrProvinceCode_nsprefix_ = None
        self.CountryCode = CountryCode
        self.CountryCode_nsprefix_ = None
        self.AirportId = AirportId
        self.AirportId_nsprefix_ = None
        self.ServiceCode = ServiceCode
        self.ServiceCode_nsprefix_ = None
        self.PackagingCode = PackagingCode
        self.PackagingCode_nsprefix_ = None
        self.Scac = Scac
        self.Scac_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentOperationalDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentOperationalDetail.subclass:
            return ShipmentOperationalDetail.subclass(*args_, **kwargs_)
        else:
            return ShipmentOperationalDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UrsaPrefixCode(self):
        return self.UrsaPrefixCode
    def set_UrsaPrefixCode(self, UrsaPrefixCode):
        self.UrsaPrefixCode = UrsaPrefixCode
    def get_UrsaSuffixCode(self):
        return self.UrsaSuffixCode
    def set_UrsaSuffixCode(self, UrsaSuffixCode):
        self.UrsaSuffixCode = UrsaSuffixCode
    def get_OriginLocationId(self):
        return self.OriginLocationId
    def set_OriginLocationId(self, OriginLocationId):
        self.OriginLocationId = OriginLocationId
    def get_OriginLocationNumber(self):
        return self.OriginLocationNumber
    def set_OriginLocationNumber(self, OriginLocationNumber):
        self.OriginLocationNumber = OriginLocationNumber
    def get_OriginServiceArea(self):
        return self.OriginServiceArea
    def set_OriginServiceArea(self, OriginServiceArea):
        self.OriginServiceArea = OriginServiceArea
    def get_DestinationLocationId(self):
        return self.DestinationLocationId
    def set_DestinationLocationId(self, DestinationLocationId):
        self.DestinationLocationId = DestinationLocationId
    def get_DestinationLocationNumber(self):
        return self.DestinationLocationNumber
    def set_DestinationLocationNumber(self, DestinationLocationNumber):
        self.DestinationLocationNumber = DestinationLocationNumber
    def get_DestinationServiceArea(self):
        return self.DestinationServiceArea
    def set_DestinationServiceArea(self, DestinationServiceArea):
        self.DestinationServiceArea = DestinationServiceArea
    def get_DestinationLocationStateOrProvinceCode(self):
        return self.DestinationLocationStateOrProvinceCode
    def set_DestinationLocationStateOrProvinceCode(self, DestinationLocationStateOrProvinceCode):
        self.DestinationLocationStateOrProvinceCode = DestinationLocationStateOrProvinceCode
    def get_DeliveryDate(self):
        return self.DeliveryDate
    def set_DeliveryDate(self, DeliveryDate):
        self.DeliveryDate = DeliveryDate
    def get_DeliveryDay(self):
        return self.DeliveryDay
    def set_DeliveryDay(self, DeliveryDay):
        self.DeliveryDay = DeliveryDay
    def get_PublishedDeliveryTime(self):
        return self.PublishedDeliveryTime
    def set_PublishedDeliveryTime(self, PublishedDeliveryTime):
        self.PublishedDeliveryTime = PublishedDeliveryTime
    def get_CommitDate(self):
        return self.CommitDate
    def set_CommitDate(self, CommitDate):
        self.CommitDate = CommitDate
    def get_CommitDay(self):
        return self.CommitDay
    def set_CommitDay(self, CommitDay):
        self.CommitDay = CommitDay
    def get_TransitTime(self):
        return self.TransitTime
    def set_TransitTime(self, TransitTime):
        self.TransitTime = TransitTime
    def get_MaximumTransitTime(self):
        return self.MaximumTransitTime
    def set_MaximumTransitTime(self, MaximumTransitTime):
        self.MaximumTransitTime = MaximumTransitTime
    def get_CustomTransitTime(self):
        return self.CustomTransitTime
    def set_CustomTransitTime(self, CustomTransitTime):
        self.CustomTransitTime = CustomTransitTime
    def get_IneligibleForMoneyBackGuarantee(self):
        return self.IneligibleForMoneyBackGuarantee
    def set_IneligibleForMoneyBackGuarantee(self, IneligibleForMoneyBackGuarantee):
        self.IneligibleForMoneyBackGuarantee = IneligibleForMoneyBackGuarantee
    def get_DeliveryEligibilities(self):
        return self.DeliveryEligibilities
    def set_DeliveryEligibilities(self, DeliveryEligibilities):
        self.DeliveryEligibilities = DeliveryEligibilities
    def add_DeliveryEligibilities(self, value):
        self.DeliveryEligibilities.append(value)
    def insert_DeliveryEligibilities_at(self, index, value):
        self.DeliveryEligibilities.insert(index, value)
    def replace_DeliveryEligibilities_at(self, index, value):
        self.DeliveryEligibilities[index] = value
    def get_AstraPlannedServiceLevel(self):
        return self.AstraPlannedServiceLevel
    def set_AstraPlannedServiceLevel(self, AstraPlannedServiceLevel):
        self.AstraPlannedServiceLevel = AstraPlannedServiceLevel
    def get_AstraDescription(self):
        return self.AstraDescription
    def set_AstraDescription(self, AstraDescription):
        self.AstraDescription = AstraDescription
    def get_PostalCode(self):
        return self.PostalCode
    def set_PostalCode(self, PostalCode):
        self.PostalCode = PostalCode
    def get_StateOrProvinceCode(self):
        return self.StateOrProvinceCode
    def set_StateOrProvinceCode(self, StateOrProvinceCode):
        self.StateOrProvinceCode = StateOrProvinceCode
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def get_AirportId(self):
        return self.AirportId
    def set_AirportId(self, AirportId):
        self.AirportId = AirportId
    def get_ServiceCode(self):
        return self.ServiceCode
    def set_ServiceCode(self, ServiceCode):
        self.ServiceCode = ServiceCode
    def get_PackagingCode(self):
        return self.PackagingCode
    def set_PackagingCode(self, PackagingCode):
        self.PackagingCode = PackagingCode
    def get_Scac(self):
        return self.Scac
    def set_Scac(self, Scac):
        self.Scac = Scac
    def validate_DayOfWeekType(self, value):
        result = True
        # Validate type DayOfWeekType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FRI', 'MON', 'SAT', 'SUN', 'THU', 'TUE', 'WED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DayOfWeekType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_TransitTimeType(self, value):
        result = True
        # Validate type TransitTimeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['EIGHTEEN_DAYS', 'EIGHT_DAYS', 'ELEVEN_DAYS', 'FIFTEEN_DAYS', 'FIVE_DAYS', 'FOURTEEN_DAYS', 'FOUR_DAYS', 'NINETEEN_DAYS', 'NINE_DAYS', 'ONE_DAY', 'SEVENTEEN_DAYS', 'SEVEN_DAYS', 'SIXTEEN_DAYS', 'SIX_DAYS', 'TEN_DAYS', 'THIRTEEN_DAYS', 'THREE_DAYS', 'TWELVE_DAYS', 'TWENTY_DAYS', 'TWO_DAYS', 'UNKNOWN']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TransitTimeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_GroundDeliveryEligibilityType(self, value):
        result = True
        # Validate type GroundDeliveryEligibilityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ALTERNATE_DAY_SERVICE', 'CARTAGE_AGENT_DELIVERY', 'SATURDAY_DELIVERY', 'USPS_DELIVERY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on GroundDeliveryEligibilityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.UrsaPrefixCode is not None or
            self.UrsaSuffixCode is not None or
            self.OriginLocationId is not None or
            self.OriginLocationNumber is not None or
            self.OriginServiceArea is not None or
            self.DestinationLocationId is not None or
            self.DestinationLocationNumber is not None or
            self.DestinationServiceArea is not None or
            self.DestinationLocationStateOrProvinceCode is not None or
            self.DeliveryDate is not None or
            self.DeliveryDay is not None or
            self.PublishedDeliveryTime is not None or
            self.CommitDate is not None or
            self.CommitDay is not None or
            self.TransitTime is not None or
            self.MaximumTransitTime is not None or
            self.CustomTransitTime is not None or
            self.IneligibleForMoneyBackGuarantee is not None or
            self.DeliveryEligibilities or
            self.AstraPlannedServiceLevel is not None or
            self.AstraDescription is not None or
            self.PostalCode is not None or
            self.StateOrProvinceCode is not None or
            self.CountryCode is not None or
            self.AirportId is not None or
            self.ServiceCode is not None or
            self.PackagingCode is not None or
            self.Scac is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentOperationalDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentOperationalDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentOperationalDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentOperationalDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentOperationalDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentOperationalDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentOperationalDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UrsaPrefixCode is not None:
            namespaceprefix_ = self.UrsaPrefixCode_nsprefix_ + ':' if (UseCapturedNS_ and self.UrsaPrefixCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUrsaPrefixCode>%s</%sUrsaPrefixCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UrsaPrefixCode), input_name='UrsaPrefixCode')), namespaceprefix_ , eol_))
        if self.UrsaSuffixCode is not None:
            namespaceprefix_ = self.UrsaSuffixCode_nsprefix_ + ':' if (UseCapturedNS_ and self.UrsaSuffixCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUrsaSuffixCode>%s</%sUrsaSuffixCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UrsaSuffixCode), input_name='UrsaSuffixCode')), namespaceprefix_ , eol_))
        if self.OriginLocationId is not None:
            namespaceprefix_ = self.OriginLocationId_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginLocationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginLocationId>%s</%sOriginLocationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OriginLocationId), input_name='OriginLocationId')), namespaceprefix_ , eol_))
        if self.OriginLocationNumber is not None:
            namespaceprefix_ = self.OriginLocationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginLocationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginLocationNumber>%s</%sOriginLocationNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.OriginLocationNumber, input_name='OriginLocationNumber'), namespaceprefix_ , eol_))
        if self.OriginServiceArea is not None:
            namespaceprefix_ = self.OriginServiceArea_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginServiceArea_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginServiceArea>%s</%sOriginServiceArea>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OriginServiceArea), input_name='OriginServiceArea')), namespaceprefix_ , eol_))
        if self.DestinationLocationId is not None:
            namespaceprefix_ = self.DestinationLocationId_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationLocationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDestinationLocationId>%s</%sDestinationLocationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DestinationLocationId), input_name='DestinationLocationId')), namespaceprefix_ , eol_))
        if self.DestinationLocationNumber is not None:
            namespaceprefix_ = self.DestinationLocationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationLocationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDestinationLocationNumber>%s</%sDestinationLocationNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.DestinationLocationNumber, input_name='DestinationLocationNumber'), namespaceprefix_ , eol_))
        if self.DestinationServiceArea is not None:
            namespaceprefix_ = self.DestinationServiceArea_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationServiceArea_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDestinationServiceArea>%s</%sDestinationServiceArea>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DestinationServiceArea), input_name='DestinationServiceArea')), namespaceprefix_ , eol_))
        if self.DestinationLocationStateOrProvinceCode is not None:
            namespaceprefix_ = self.DestinationLocationStateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationLocationStateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDestinationLocationStateOrProvinceCode>%s</%sDestinationLocationStateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DestinationLocationStateOrProvinceCode), input_name='DestinationLocationStateOrProvinceCode')), namespaceprefix_ , eol_))
        if self.DeliveryDate is not None:
            namespaceprefix_ = self.DeliveryDate_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryDate>%s</%sDeliveryDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DeliveryDate, input_name='DeliveryDate'), namespaceprefix_ , eol_))
        if self.DeliveryDay is not None:
            namespaceprefix_ = self.DeliveryDay_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryDay_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryDay>%s</%sDeliveryDay>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryDay), input_name='DeliveryDay')), namespaceprefix_ , eol_))
        if self.PublishedDeliveryTime is not None:
            namespaceprefix_ = self.PublishedDeliveryTime_nsprefix_ + ':' if (UseCapturedNS_ and self.PublishedDeliveryTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPublishedDeliveryTime>%s</%sPublishedDeliveryTime>%s' % (namespaceprefix_ , self.gds_format_time(self.PublishedDeliveryTime, input_name='PublishedDeliveryTime'), namespaceprefix_ , eol_))
        if self.CommitDate is not None:
            namespaceprefix_ = self.CommitDate_nsprefix_ + ':' if (UseCapturedNS_ and self.CommitDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommitDate>%s</%sCommitDate>%s' % (namespaceprefix_ , self.gds_format_date(self.CommitDate, input_name='CommitDate'), namespaceprefix_ , eol_))
        if self.CommitDay is not None:
            namespaceprefix_ = self.CommitDay_nsprefix_ + ':' if (UseCapturedNS_ and self.CommitDay_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommitDay>%s</%sCommitDay>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CommitDay), input_name='CommitDay')), namespaceprefix_ , eol_))
        if self.TransitTime is not None:
            namespaceprefix_ = self.TransitTime_nsprefix_ + ':' if (UseCapturedNS_ and self.TransitTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitTime>%s</%sTransitTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransitTime), input_name='TransitTime')), namespaceprefix_ , eol_))
        if self.MaximumTransitTime is not None:
            namespaceprefix_ = self.MaximumTransitTime_nsprefix_ + ':' if (UseCapturedNS_ and self.MaximumTransitTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaximumTransitTime>%s</%sMaximumTransitTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MaximumTransitTime), input_name='MaximumTransitTime')), namespaceprefix_ , eol_))
        if self.CustomTransitTime is not None:
            namespaceprefix_ = self.CustomTransitTime_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomTransitTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomTransitTime>%s</%sCustomTransitTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomTransitTime), input_name='CustomTransitTime')), namespaceprefix_ , eol_))
        if self.IneligibleForMoneyBackGuarantee is not None:
            namespaceprefix_ = self.IneligibleForMoneyBackGuarantee_nsprefix_ + ':' if (UseCapturedNS_ and self.IneligibleForMoneyBackGuarantee_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIneligibleForMoneyBackGuarantee>%s</%sIneligibleForMoneyBackGuarantee>%s' % (namespaceprefix_ , self.gds_format_boolean(self.IneligibleForMoneyBackGuarantee, input_name='IneligibleForMoneyBackGuarantee'), namespaceprefix_ , eol_))
        for DeliveryEligibilities_ in self.DeliveryEligibilities:
            namespaceprefix_ = self.DeliveryEligibilities_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryEligibilities_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryEligibilities>%s</%sDeliveryEligibilities>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(DeliveryEligibilities_), input_name='DeliveryEligibilities')), namespaceprefix_ , eol_))
        if self.AstraPlannedServiceLevel is not None:
            namespaceprefix_ = self.AstraPlannedServiceLevel_nsprefix_ + ':' if (UseCapturedNS_ and self.AstraPlannedServiceLevel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAstraPlannedServiceLevel>%s</%sAstraPlannedServiceLevel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AstraPlannedServiceLevel), input_name='AstraPlannedServiceLevel')), namespaceprefix_ , eol_))
        if self.AstraDescription is not None:
            namespaceprefix_ = self.AstraDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.AstraDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAstraDescription>%s</%sAstraDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AstraDescription), input_name='AstraDescription')), namespaceprefix_ , eol_))
        if self.PostalCode is not None:
            namespaceprefix_ = self.PostalCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PostalCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), namespaceprefix_ , eol_))
        if self.StateOrProvinceCode is not None:
            namespaceprefix_ = self.StateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.StateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStateOrProvinceCode>%s</%sStateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StateOrProvinceCode), input_name='StateOrProvinceCode')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
        if self.AirportId is not None:
            namespaceprefix_ = self.AirportId_nsprefix_ + ':' if (UseCapturedNS_ and self.AirportId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAirportId>%s</%sAirportId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AirportId), input_name='AirportId')), namespaceprefix_ , eol_))
        if self.ServiceCode is not None:
            namespaceprefix_ = self.ServiceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceCode>%s</%sServiceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ServiceCode), input_name='ServiceCode')), namespaceprefix_ , eol_))
        if self.PackagingCode is not None:
            namespaceprefix_ = self.PackagingCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PackagingCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackagingCode>%s</%sPackagingCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PackagingCode), input_name='PackagingCode')), namespaceprefix_ , eol_))
        if self.Scac is not None:
            namespaceprefix_ = self.Scac_nsprefix_ + ':' if (UseCapturedNS_ and self.Scac_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sScac>%s</%sScac>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Scac), input_name='Scac')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UrsaPrefixCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UrsaPrefixCode')
            value_ = self.gds_validate_string(value_, node, 'UrsaPrefixCode')
            self.UrsaPrefixCode = value_
            self.UrsaPrefixCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'UrsaSuffixCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UrsaSuffixCode')
            value_ = self.gds_validate_string(value_, node, 'UrsaSuffixCode')
            self.UrsaSuffixCode = value_
            self.UrsaSuffixCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'OriginLocationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OriginLocationId')
            value_ = self.gds_validate_string(value_, node, 'OriginLocationId')
            self.OriginLocationId = value_
            self.OriginLocationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'OriginLocationNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'OriginLocationNumber')
            ival_ = self.gds_validate_integer(ival_, node, 'OriginLocationNumber')
            self.OriginLocationNumber = ival_
            self.OriginLocationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'OriginServiceArea':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OriginServiceArea')
            value_ = self.gds_validate_string(value_, node, 'OriginServiceArea')
            self.OriginServiceArea = value_
            self.OriginServiceArea_nsprefix_ = child_.prefix
        elif nodeName_ == 'DestinationLocationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DestinationLocationId')
            value_ = self.gds_validate_string(value_, node, 'DestinationLocationId')
            self.DestinationLocationId = value_
            self.DestinationLocationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'DestinationLocationNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'DestinationLocationNumber')
            ival_ = self.gds_validate_integer(ival_, node, 'DestinationLocationNumber')
            self.DestinationLocationNumber = ival_
            self.DestinationLocationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'DestinationServiceArea':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DestinationServiceArea')
            value_ = self.gds_validate_string(value_, node, 'DestinationServiceArea')
            self.DestinationServiceArea = value_
            self.DestinationServiceArea_nsprefix_ = child_.prefix
        elif nodeName_ == 'DestinationLocationStateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DestinationLocationStateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'DestinationLocationStateOrProvinceCode')
            self.DestinationLocationStateOrProvinceCode = value_
            self.DestinationLocationStateOrProvinceCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'DeliveryDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DeliveryDate = dval_
            self.DeliveryDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'DeliveryDay':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DeliveryDay')
            value_ = self.gds_validate_string(value_, node, 'DeliveryDay')
            self.DeliveryDay = value_
            self.DeliveryDay_nsprefix_ = child_.prefix
            # validate type DayOfWeekType
            self.validate_DayOfWeekType(self.DeliveryDay)
        elif nodeName_ == 'PublishedDeliveryTime':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.PublishedDeliveryTime = dval_
            self.PublishedDeliveryTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'CommitDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.CommitDate = dval_
            self.CommitDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'CommitDay':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CommitDay')
            value_ = self.gds_validate_string(value_, node, 'CommitDay')
            self.CommitDay = value_
            self.CommitDay_nsprefix_ = child_.prefix
            # validate type DayOfWeekType
            self.validate_DayOfWeekType(self.CommitDay)
        elif nodeName_ == 'TransitTime':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TransitTime')
            value_ = self.gds_validate_string(value_, node, 'TransitTime')
            self.TransitTime = value_
            self.TransitTime_nsprefix_ = child_.prefix
            # validate type TransitTimeType
            self.validate_TransitTimeType(self.TransitTime)
        elif nodeName_ == 'MaximumTransitTime':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MaximumTransitTime')
            value_ = self.gds_validate_string(value_, node, 'MaximumTransitTime')
            self.MaximumTransitTime = value_
            self.MaximumTransitTime_nsprefix_ = child_.prefix
            # validate type TransitTimeType
            self.validate_TransitTimeType(self.MaximumTransitTime)
        elif nodeName_ == 'CustomTransitTime':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomTransitTime')
            value_ = self.gds_validate_string(value_, node, 'CustomTransitTime')
            self.CustomTransitTime = value_
            self.CustomTransitTime_nsprefix_ = child_.prefix
            # validate type TransitTimeType
            self.validate_TransitTimeType(self.CustomTransitTime)
        elif nodeName_ == 'IneligibleForMoneyBackGuarantee':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'IneligibleForMoneyBackGuarantee')
            ival_ = self.gds_validate_boolean(ival_, node, 'IneligibleForMoneyBackGuarantee')
            self.IneligibleForMoneyBackGuarantee = ival_
            self.IneligibleForMoneyBackGuarantee_nsprefix_ = child_.prefix
        elif nodeName_ == 'DeliveryEligibilities':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DeliveryEligibilities')
            value_ = self.gds_validate_string(value_, node, 'DeliveryEligibilities')
            self.DeliveryEligibilities.append(value_)
            self.DeliveryEligibilities_nsprefix_ = child_.prefix
            # validate type GroundDeliveryEligibilityType
            self.validate_GroundDeliveryEligibilityType(self.DeliveryEligibilities[-1])
        elif nodeName_ == 'AstraPlannedServiceLevel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AstraPlannedServiceLevel')
            value_ = self.gds_validate_string(value_, node, 'AstraPlannedServiceLevel')
            self.AstraPlannedServiceLevel = value_
            self.AstraPlannedServiceLevel_nsprefix_ = child_.prefix
        elif nodeName_ == 'AstraDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AstraDescription')
            value_ = self.gds_validate_string(value_, node, 'AstraDescription')
            self.AstraDescription = value_
            self.AstraDescription_nsprefix_ = child_.prefix
        elif nodeName_ == 'PostalCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PostalCode')
            value_ = self.gds_validate_string(value_, node, 'PostalCode')
            self.PostalCode = value_
            self.PostalCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'StateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'StateOrProvinceCode')
            self.StateOrProvinceCode = value_
            self.StateOrProvinceCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'AirportId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AirportId')
            value_ = self.gds_validate_string(value_, node, 'AirportId')
            self.AirportId = value_
            self.AirportId_nsprefix_ = child_.prefix
        elif nodeName_ == 'ServiceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ServiceCode')
            value_ = self.gds_validate_string(value_, node, 'ServiceCode')
            self.ServiceCode = value_
            self.ServiceCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'PackagingCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackagingCode')
            value_ = self.gds_validate_string(value_, node, 'PackagingCode')
            self.PackagingCode = value_
            self.PackagingCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'Scac':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Scac')
            value_ = self.gds_validate_string(value_, node, 'Scac')
            self.Scac = value_
            self.Scac_nsprefix_ = child_.prefix
# end class ShipmentOperationalDetail


class ShipmentRateDetail(GeneratedsSuper):
    """Data for a shipment's total/summary rates, as calculated per a specific
    rate type. The "total..." fields may differ from the sum of
    corresponding package data for Multiweight or Express MPS."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RateType=None, RateScale=None, RateZone=None, PricingCode=None, RatedWeightMethod=None, MinimumChargeType=None, CurrencyExchangeRate=None, SpecialRatingApplied=None, DimDivisor=None, DimDivisorType=None, FuelSurchargePercent=None, TotalBillingWeight=None, TotalDimWeight=None, TotalBaseCharge=None, TotalFreightDiscounts=None, TotalNetFreight=None, TotalSurcharges=None, TotalNetFedExCharge=None, TotalTaxes=None, TotalNetCharge=None, TotalRebates=None, TotalDutiesAndTaxes=None, TotalAncillaryFeesAndTaxes=None, TotalDutiesTaxesAndFees=None, TotalNetChargeWithDutiesAndTaxes=None, ShipmentLegRateDetails=None, FreightRateDetail=None, FreightDiscounts=None, Rebates=None, Surcharges=None, Taxes=None, DutiesAndTaxes=None, AncillaryFeesAndTaxes=None, VariableHandlingCharges=None, TotalVariableHandlingCharges=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RateType = RateType
        self.validate_ReturnedRateType(self.RateType)
        self.RateType_nsprefix_ = None
        self.RateScale = RateScale
        self.RateScale_nsprefix_ = None
        self.RateZone = RateZone
        self.RateZone_nsprefix_ = None
        self.PricingCode = PricingCode
        self.validate_PricingCodeType(self.PricingCode)
        self.PricingCode_nsprefix_ = None
        self.RatedWeightMethod = RatedWeightMethod
        self.validate_RatedWeightMethod(self.RatedWeightMethod)
        self.RatedWeightMethod_nsprefix_ = None
        self.MinimumChargeType = MinimumChargeType
        self.validate_MinimumChargeType(self.MinimumChargeType)
        self.MinimumChargeType_nsprefix_ = None
        self.CurrencyExchangeRate = CurrencyExchangeRate
        self.CurrencyExchangeRate_nsprefix_ = None
        if SpecialRatingApplied is None:
            self.SpecialRatingApplied = []
        else:
            self.SpecialRatingApplied = SpecialRatingApplied
        self.SpecialRatingApplied_nsprefix_ = None
        self.DimDivisor = DimDivisor
        self.DimDivisor_nsprefix_ = None
        self.DimDivisorType = DimDivisorType
        self.validate_RateDimensionalDivisorType(self.DimDivisorType)
        self.DimDivisorType_nsprefix_ = None
        self.FuelSurchargePercent = FuelSurchargePercent
        self.FuelSurchargePercent_nsprefix_ = None
        self.TotalBillingWeight = TotalBillingWeight
        self.TotalBillingWeight_nsprefix_ = None
        self.TotalDimWeight = TotalDimWeight
        self.TotalDimWeight_nsprefix_ = None
        self.TotalBaseCharge = TotalBaseCharge
        self.TotalBaseCharge_nsprefix_ = None
        self.TotalFreightDiscounts = TotalFreightDiscounts
        self.TotalFreightDiscounts_nsprefix_ = None
        self.TotalNetFreight = TotalNetFreight
        self.TotalNetFreight_nsprefix_ = None
        self.TotalSurcharges = TotalSurcharges
        self.TotalSurcharges_nsprefix_ = None
        self.TotalNetFedExCharge = TotalNetFedExCharge
        self.TotalNetFedExCharge_nsprefix_ = None
        self.TotalTaxes = TotalTaxes
        self.TotalTaxes_nsprefix_ = None
        self.TotalNetCharge = TotalNetCharge
        self.TotalNetCharge_nsprefix_ = None
        self.TotalRebates = TotalRebates
        self.TotalRebates_nsprefix_ = None
        self.TotalDutiesAndTaxes = TotalDutiesAndTaxes
        self.TotalDutiesAndTaxes_nsprefix_ = None
        self.TotalAncillaryFeesAndTaxes = TotalAncillaryFeesAndTaxes
        self.TotalAncillaryFeesAndTaxes_nsprefix_ = None
        self.TotalDutiesTaxesAndFees = TotalDutiesTaxesAndFees
        self.TotalDutiesTaxesAndFees_nsprefix_ = None
        self.TotalNetChargeWithDutiesAndTaxes = TotalNetChargeWithDutiesAndTaxes
        self.TotalNetChargeWithDutiesAndTaxes_nsprefix_ = None
        if ShipmentLegRateDetails is None:
            self.ShipmentLegRateDetails = []
        else:
            self.ShipmentLegRateDetails = ShipmentLegRateDetails
        self.ShipmentLegRateDetails_nsprefix_ = None
        self.FreightRateDetail = FreightRateDetail
        self.FreightRateDetail_nsprefix_ = None
        if FreightDiscounts is None:
            self.FreightDiscounts = []
        else:
            self.FreightDiscounts = FreightDiscounts
        self.FreightDiscounts_nsprefix_ = None
        if Rebates is None:
            self.Rebates = []
        else:
            self.Rebates = Rebates
        self.Rebates_nsprefix_ = None
        if Surcharges is None:
            self.Surcharges = []
        else:
            self.Surcharges = Surcharges
        self.Surcharges_nsprefix_ = None
        if Taxes is None:
            self.Taxes = []
        else:
            self.Taxes = Taxes
        self.Taxes_nsprefix_ = None
        if DutiesAndTaxes is None:
            self.DutiesAndTaxes = []
        else:
            self.DutiesAndTaxes = DutiesAndTaxes
        self.DutiesAndTaxes_nsprefix_ = None
        if AncillaryFeesAndTaxes is None:
            self.AncillaryFeesAndTaxes = []
        else:
            self.AncillaryFeesAndTaxes = AncillaryFeesAndTaxes
        self.AncillaryFeesAndTaxes_nsprefix_ = None
        self.VariableHandlingCharges = VariableHandlingCharges
        self.VariableHandlingCharges_nsprefix_ = None
        self.TotalVariableHandlingCharges = TotalVariableHandlingCharges
        self.TotalVariableHandlingCharges_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentRateDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentRateDetail.subclass:
            return ShipmentRateDetail.subclass(*args_, **kwargs_)
        else:
            return ShipmentRateDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RateType(self):
        return self.RateType
    def set_RateType(self, RateType):
        self.RateType = RateType
    def get_RateScale(self):
        return self.RateScale
    def set_RateScale(self, RateScale):
        self.RateScale = RateScale
    def get_RateZone(self):
        return self.RateZone
    def set_RateZone(self, RateZone):
        self.RateZone = RateZone
    def get_PricingCode(self):
        return self.PricingCode
    def set_PricingCode(self, PricingCode):
        self.PricingCode = PricingCode
    def get_RatedWeightMethod(self):
        return self.RatedWeightMethod
    def set_RatedWeightMethod(self, RatedWeightMethod):
        self.RatedWeightMethod = RatedWeightMethod
    def get_MinimumChargeType(self):
        return self.MinimumChargeType
    def set_MinimumChargeType(self, MinimumChargeType):
        self.MinimumChargeType = MinimumChargeType
    def get_CurrencyExchangeRate(self):
        return self.CurrencyExchangeRate
    def set_CurrencyExchangeRate(self, CurrencyExchangeRate):
        self.CurrencyExchangeRate = CurrencyExchangeRate
    def get_SpecialRatingApplied(self):
        return self.SpecialRatingApplied
    def set_SpecialRatingApplied(self, SpecialRatingApplied):
        self.SpecialRatingApplied = SpecialRatingApplied
    def add_SpecialRatingApplied(self, value):
        self.SpecialRatingApplied.append(value)
    def insert_SpecialRatingApplied_at(self, index, value):
        self.SpecialRatingApplied.insert(index, value)
    def replace_SpecialRatingApplied_at(self, index, value):
        self.SpecialRatingApplied[index] = value
    def get_DimDivisor(self):
        return self.DimDivisor
    def set_DimDivisor(self, DimDivisor):
        self.DimDivisor = DimDivisor
    def get_DimDivisorType(self):
        return self.DimDivisorType
    def set_DimDivisorType(self, DimDivisorType):
        self.DimDivisorType = DimDivisorType
    def get_FuelSurchargePercent(self):
        return self.FuelSurchargePercent
    def set_FuelSurchargePercent(self, FuelSurchargePercent):
        self.FuelSurchargePercent = FuelSurchargePercent
    def get_TotalBillingWeight(self):
        return self.TotalBillingWeight
    def set_TotalBillingWeight(self, TotalBillingWeight):
        self.TotalBillingWeight = TotalBillingWeight
    def get_TotalDimWeight(self):
        return self.TotalDimWeight
    def set_TotalDimWeight(self, TotalDimWeight):
        self.TotalDimWeight = TotalDimWeight
    def get_TotalBaseCharge(self):
        return self.TotalBaseCharge
    def set_TotalBaseCharge(self, TotalBaseCharge):
        self.TotalBaseCharge = TotalBaseCharge
    def get_TotalFreightDiscounts(self):
        return self.TotalFreightDiscounts
    def set_TotalFreightDiscounts(self, TotalFreightDiscounts):
        self.TotalFreightDiscounts = TotalFreightDiscounts
    def get_TotalNetFreight(self):
        return self.TotalNetFreight
    def set_TotalNetFreight(self, TotalNetFreight):
        self.TotalNetFreight = TotalNetFreight
    def get_TotalSurcharges(self):
        return self.TotalSurcharges
    def set_TotalSurcharges(self, TotalSurcharges):
        self.TotalSurcharges = TotalSurcharges
    def get_TotalNetFedExCharge(self):
        return self.TotalNetFedExCharge
    def set_TotalNetFedExCharge(self, TotalNetFedExCharge):
        self.TotalNetFedExCharge = TotalNetFedExCharge
    def get_TotalTaxes(self):
        return self.TotalTaxes
    def set_TotalTaxes(self, TotalTaxes):
        self.TotalTaxes = TotalTaxes
    def get_TotalNetCharge(self):
        return self.TotalNetCharge
    def set_TotalNetCharge(self, TotalNetCharge):
        self.TotalNetCharge = TotalNetCharge
    def get_TotalRebates(self):
        return self.TotalRebates
    def set_TotalRebates(self, TotalRebates):
        self.TotalRebates = TotalRebates
    def get_TotalDutiesAndTaxes(self):
        return self.TotalDutiesAndTaxes
    def set_TotalDutiesAndTaxes(self, TotalDutiesAndTaxes):
        self.TotalDutiesAndTaxes = TotalDutiesAndTaxes
    def get_TotalAncillaryFeesAndTaxes(self):
        return self.TotalAncillaryFeesAndTaxes
    def set_TotalAncillaryFeesAndTaxes(self, TotalAncillaryFeesAndTaxes):
        self.TotalAncillaryFeesAndTaxes = TotalAncillaryFeesAndTaxes
    def get_TotalDutiesTaxesAndFees(self):
        return self.TotalDutiesTaxesAndFees
    def set_TotalDutiesTaxesAndFees(self, TotalDutiesTaxesAndFees):
        self.TotalDutiesTaxesAndFees = TotalDutiesTaxesAndFees
    def get_TotalNetChargeWithDutiesAndTaxes(self):
        return self.TotalNetChargeWithDutiesAndTaxes
    def set_TotalNetChargeWithDutiesAndTaxes(self, TotalNetChargeWithDutiesAndTaxes):
        self.TotalNetChargeWithDutiesAndTaxes = TotalNetChargeWithDutiesAndTaxes
    def get_ShipmentLegRateDetails(self):
        return self.ShipmentLegRateDetails
    def set_ShipmentLegRateDetails(self, ShipmentLegRateDetails):
        self.ShipmentLegRateDetails = ShipmentLegRateDetails
    def add_ShipmentLegRateDetails(self, value):
        self.ShipmentLegRateDetails.append(value)
    def insert_ShipmentLegRateDetails_at(self, index, value):
        self.ShipmentLegRateDetails.insert(index, value)
    def replace_ShipmentLegRateDetails_at(self, index, value):
        self.ShipmentLegRateDetails[index] = value
    def get_FreightRateDetail(self):
        return self.FreightRateDetail
    def set_FreightRateDetail(self, FreightRateDetail):
        self.FreightRateDetail = FreightRateDetail
    def get_FreightDiscounts(self):
        return self.FreightDiscounts
    def set_FreightDiscounts(self, FreightDiscounts):
        self.FreightDiscounts = FreightDiscounts
    def add_FreightDiscounts(self, value):
        self.FreightDiscounts.append(value)
    def insert_FreightDiscounts_at(self, index, value):
        self.FreightDiscounts.insert(index, value)
    def replace_FreightDiscounts_at(self, index, value):
        self.FreightDiscounts[index] = value
    def get_Rebates(self):
        return self.Rebates
    def set_Rebates(self, Rebates):
        self.Rebates = Rebates
    def add_Rebates(self, value):
        self.Rebates.append(value)
    def insert_Rebates_at(self, index, value):
        self.Rebates.insert(index, value)
    def replace_Rebates_at(self, index, value):
        self.Rebates[index] = value
    def get_Surcharges(self):
        return self.Surcharges
    def set_Surcharges(self, Surcharges):
        self.Surcharges = Surcharges
    def add_Surcharges(self, value):
        self.Surcharges.append(value)
    def insert_Surcharges_at(self, index, value):
        self.Surcharges.insert(index, value)
    def replace_Surcharges_at(self, index, value):
        self.Surcharges[index] = value
    def get_Taxes(self):
        return self.Taxes
    def set_Taxes(self, Taxes):
        self.Taxes = Taxes
    def add_Taxes(self, value):
        self.Taxes.append(value)
    def insert_Taxes_at(self, index, value):
        self.Taxes.insert(index, value)
    def replace_Taxes_at(self, index, value):
        self.Taxes[index] = value
    def get_DutiesAndTaxes(self):
        return self.DutiesAndTaxes
    def set_DutiesAndTaxes(self, DutiesAndTaxes):
        self.DutiesAndTaxes = DutiesAndTaxes
    def add_DutiesAndTaxes(self, value):
        self.DutiesAndTaxes.append(value)
    def insert_DutiesAndTaxes_at(self, index, value):
        self.DutiesAndTaxes.insert(index, value)
    def replace_DutiesAndTaxes_at(self, index, value):
        self.DutiesAndTaxes[index] = value
    def get_AncillaryFeesAndTaxes(self):
        return self.AncillaryFeesAndTaxes
    def set_AncillaryFeesAndTaxes(self, AncillaryFeesAndTaxes):
        self.AncillaryFeesAndTaxes = AncillaryFeesAndTaxes
    def add_AncillaryFeesAndTaxes(self, value):
        self.AncillaryFeesAndTaxes.append(value)
    def insert_AncillaryFeesAndTaxes_at(self, index, value):
        self.AncillaryFeesAndTaxes.insert(index, value)
    def replace_AncillaryFeesAndTaxes_at(self, index, value):
        self.AncillaryFeesAndTaxes[index] = value
    def get_VariableHandlingCharges(self):
        return self.VariableHandlingCharges
    def set_VariableHandlingCharges(self, VariableHandlingCharges):
        self.VariableHandlingCharges = VariableHandlingCharges
    def get_TotalVariableHandlingCharges(self):
        return self.TotalVariableHandlingCharges
    def set_TotalVariableHandlingCharges(self, TotalVariableHandlingCharges):
        self.TotalVariableHandlingCharges = TotalVariableHandlingCharges
    def validate_ReturnedRateType(self, value):
        result = True
        # Validate type ReturnedRateType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['INCENTIVE', 'NEGOTIATED', 'PAYOR_ACCOUNT_PACKAGE', 'PAYOR_ACCOUNT_SHIPMENT', 'PAYOR_LIST_PACKAGE', 'PAYOR_LIST_SHIPMENT', 'PREFERRED_ACCOUNT_PACKAGE', 'PREFERRED_ACCOUNT_SHIPMENT', 'PREFERRED_LIST_PACKAGE', 'PREFERRED_LIST_SHIPMENT', 'PREFERRED_NEGOTIATED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ReturnedRateType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_PricingCodeType(self, value):
        result = True
        # Validate type PricingCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACTUAL', 'ALTERNATE', 'BASE', 'HUNDREDWEIGHT', 'HUNDREDWEIGHT_ALTERNATE', 'INTERNATIONAL_DISTRIBUTION', 'INTERNATIONAL_ECONOMY_SERVICE', 'LTL_FREIGHT', 'PACKAGE', 'SHIPMENT', 'SHIPMENT_FIVE_POUND_OPTIONAL', 'SHIPMENT_OPTIONAL', 'SPECIAL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PricingCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_RatedWeightMethod(self, value):
        result = True
        # Validate type RatedWeightMethod, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACTUAL', 'AVERAGE_PACKAGE_WEIGHT_MINIMUM', 'BALLOON', 'DEFAULT_WEIGHT_APPLIED', 'DIM', 'FREIGHT_MINIMUM', 'MIXED', 'OVERSIZE', 'OVERSIZE_1', 'OVERSIZE_2', 'OVERSIZE_3', 'PACKAGING_MINIMUM', 'WEIGHT_BREAK']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RatedWeightMethod' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_MinimumChargeType(self, value):
        result = True
        # Validate type MinimumChargeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CUSTOMER', 'CUSTOMER_FREIGHT_WEIGHT', 'EARNED_DISCOUNT', 'MIXED', 'RATE_SCALE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on MinimumChargeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_SpecialRatingAppliedType(self, value):
        result = True
        # Validate type SpecialRatingAppliedType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_ONE_RATE', 'FIXED_FUEL_SURCHARGE', 'IMPORT_PRICING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SpecialRatingAppliedType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_RateDimensionalDivisorType(self, value):
        result = True
        # Validate type RateDimensionalDivisorType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['COUNTRY', 'CUSTOMER', 'OTHER', 'PRODUCT', 'WAIVED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RateDimensionalDivisorType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.RateType is not None or
            self.RateScale is not None or
            self.RateZone is not None or
            self.PricingCode is not None or
            self.RatedWeightMethod is not None or
            self.MinimumChargeType is not None or
            self.CurrencyExchangeRate is not None or
            self.SpecialRatingApplied or
            self.DimDivisor is not None or
            self.DimDivisorType is not None or
            self.FuelSurchargePercent is not None or
            self.TotalBillingWeight is not None or
            self.TotalDimWeight is not None or
            self.TotalBaseCharge is not None or
            self.TotalFreightDiscounts is not None or
            self.TotalNetFreight is not None or
            self.TotalSurcharges is not None or
            self.TotalNetFedExCharge is not None or
            self.TotalTaxes is not None or
            self.TotalNetCharge is not None or
            self.TotalRebates is not None or
            self.TotalDutiesAndTaxes is not None or
            self.TotalAncillaryFeesAndTaxes is not None or
            self.TotalDutiesTaxesAndFees is not None or
            self.TotalNetChargeWithDutiesAndTaxes is not None or
            self.ShipmentLegRateDetails or
            self.FreightRateDetail is not None or
            self.FreightDiscounts or
            self.Rebates or
            self.Surcharges or
            self.Taxes or
            self.DutiesAndTaxes or
            self.AncillaryFeesAndTaxes or
            self.VariableHandlingCharges is not None or
            self.TotalVariableHandlingCharges is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentRateDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentRateDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentRateDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentRateDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentRateDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentRateDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentRateDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RateType is not None:
            namespaceprefix_ = self.RateType_nsprefix_ + ':' if (UseCapturedNS_ and self.RateType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateType>%s</%sRateType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateType), input_name='RateType')), namespaceprefix_ , eol_))
        if self.RateScale is not None:
            namespaceprefix_ = self.RateScale_nsprefix_ + ':' if (UseCapturedNS_ and self.RateScale_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateScale>%s</%sRateScale>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateScale), input_name='RateScale')), namespaceprefix_ , eol_))
        if self.RateZone is not None:
            namespaceprefix_ = self.RateZone_nsprefix_ + ':' if (UseCapturedNS_ and self.RateZone_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateZone>%s</%sRateZone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateZone), input_name='RateZone')), namespaceprefix_ , eol_))
        if self.PricingCode is not None:
            namespaceprefix_ = self.PricingCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PricingCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPricingCode>%s</%sPricingCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PricingCode), input_name='PricingCode')), namespaceprefix_ , eol_))
        if self.RatedWeightMethod is not None:
            namespaceprefix_ = self.RatedWeightMethod_nsprefix_ + ':' if (UseCapturedNS_ and self.RatedWeightMethod_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRatedWeightMethod>%s</%sRatedWeightMethod>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RatedWeightMethod), input_name='RatedWeightMethod')), namespaceprefix_ , eol_))
        if self.MinimumChargeType is not None:
            namespaceprefix_ = self.MinimumChargeType_nsprefix_ + ':' if (UseCapturedNS_ and self.MinimumChargeType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMinimumChargeType>%s</%sMinimumChargeType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MinimumChargeType), input_name='MinimumChargeType')), namespaceprefix_ , eol_))
        if self.CurrencyExchangeRate is not None:
            namespaceprefix_ = self.CurrencyExchangeRate_nsprefix_ + ':' if (UseCapturedNS_ and self.CurrencyExchangeRate_nsprefix_) else ''
            self.CurrencyExchangeRate.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CurrencyExchangeRate', pretty_print=pretty_print)
        for SpecialRatingApplied_ in self.SpecialRatingApplied:
            namespaceprefix_ = self.SpecialRatingApplied_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialRatingApplied_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialRatingApplied>%s</%sSpecialRatingApplied>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(SpecialRatingApplied_), input_name='SpecialRatingApplied')), namespaceprefix_ , eol_))
        if self.DimDivisor is not None:
            namespaceprefix_ = self.DimDivisor_nsprefix_ + ':' if (UseCapturedNS_ and self.DimDivisor_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDimDivisor>%s</%sDimDivisor>%s' % (namespaceprefix_ , self.gds_format_integer(self.DimDivisor, input_name='DimDivisor'), namespaceprefix_ , eol_))
        if self.DimDivisorType is not None:
            namespaceprefix_ = self.DimDivisorType_nsprefix_ + ':' if (UseCapturedNS_ and self.DimDivisorType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDimDivisorType>%s</%sDimDivisorType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DimDivisorType), input_name='DimDivisorType')), namespaceprefix_ , eol_))
        if self.FuelSurchargePercent is not None:
            namespaceprefix_ = self.FuelSurchargePercent_nsprefix_ + ':' if (UseCapturedNS_ and self.FuelSurchargePercent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFuelSurchargePercent>%s</%sFuelSurchargePercent>%s' % (namespaceprefix_ , self.gds_format_decimal(self.FuelSurchargePercent, input_name='FuelSurchargePercent'), namespaceprefix_ , eol_))
        if self.TotalBillingWeight is not None:
            namespaceprefix_ = self.TotalBillingWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalBillingWeight_nsprefix_) else ''
            self.TotalBillingWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalBillingWeight', pretty_print=pretty_print)
        if self.TotalDimWeight is not None:
            namespaceprefix_ = self.TotalDimWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalDimWeight_nsprefix_) else ''
            self.TotalDimWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalDimWeight', pretty_print=pretty_print)
        if self.TotalBaseCharge is not None:
            namespaceprefix_ = self.TotalBaseCharge_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalBaseCharge_nsprefix_) else ''
            self.TotalBaseCharge.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalBaseCharge', pretty_print=pretty_print)
        if self.TotalFreightDiscounts is not None:
            namespaceprefix_ = self.TotalFreightDiscounts_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalFreightDiscounts_nsprefix_) else ''
            self.TotalFreightDiscounts.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalFreightDiscounts', pretty_print=pretty_print)
        if self.TotalNetFreight is not None:
            namespaceprefix_ = self.TotalNetFreight_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalNetFreight_nsprefix_) else ''
            self.TotalNetFreight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalNetFreight', pretty_print=pretty_print)
        if self.TotalSurcharges is not None:
            namespaceprefix_ = self.TotalSurcharges_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalSurcharges_nsprefix_) else ''
            self.TotalSurcharges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalSurcharges', pretty_print=pretty_print)
        if self.TotalNetFedExCharge is not None:
            namespaceprefix_ = self.TotalNetFedExCharge_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalNetFedExCharge_nsprefix_) else ''
            self.TotalNetFedExCharge.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalNetFedExCharge', pretty_print=pretty_print)
        if self.TotalTaxes is not None:
            namespaceprefix_ = self.TotalTaxes_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalTaxes_nsprefix_) else ''
            self.TotalTaxes.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalTaxes', pretty_print=pretty_print)
        if self.TotalNetCharge is not None:
            namespaceprefix_ = self.TotalNetCharge_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalNetCharge_nsprefix_) else ''
            self.TotalNetCharge.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalNetCharge', pretty_print=pretty_print)
        if self.TotalRebates is not None:
            namespaceprefix_ = self.TotalRebates_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalRebates_nsprefix_) else ''
            self.TotalRebates.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalRebates', pretty_print=pretty_print)
        if self.TotalDutiesAndTaxes is not None:
            namespaceprefix_ = self.TotalDutiesAndTaxes_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalDutiesAndTaxes_nsprefix_) else ''
            self.TotalDutiesAndTaxes.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalDutiesAndTaxes', pretty_print=pretty_print)
        if self.TotalAncillaryFeesAndTaxes is not None:
            namespaceprefix_ = self.TotalAncillaryFeesAndTaxes_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalAncillaryFeesAndTaxes_nsprefix_) else ''
            self.TotalAncillaryFeesAndTaxes.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalAncillaryFeesAndTaxes', pretty_print=pretty_print)
        if self.TotalDutiesTaxesAndFees is not None:
            namespaceprefix_ = self.TotalDutiesTaxesAndFees_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalDutiesTaxesAndFees_nsprefix_) else ''
            self.TotalDutiesTaxesAndFees.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalDutiesTaxesAndFees', pretty_print=pretty_print)
        if self.TotalNetChargeWithDutiesAndTaxes is not None:
            namespaceprefix_ = self.TotalNetChargeWithDutiesAndTaxes_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalNetChargeWithDutiesAndTaxes_nsprefix_) else ''
            self.TotalNetChargeWithDutiesAndTaxes.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalNetChargeWithDutiesAndTaxes', pretty_print=pretty_print)
        for ShipmentLegRateDetails_ in self.ShipmentLegRateDetails:
            namespaceprefix_ = self.ShipmentLegRateDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentLegRateDetails_nsprefix_) else ''
            ShipmentLegRateDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentLegRateDetails', pretty_print=pretty_print)
        if self.FreightRateDetail is not None:
            namespaceprefix_ = self.FreightRateDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightRateDetail_nsprefix_) else ''
            self.FreightRateDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreightRateDetail', pretty_print=pretty_print)
        for FreightDiscounts_ in self.FreightDiscounts:
            namespaceprefix_ = self.FreightDiscounts_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightDiscounts_nsprefix_) else ''
            FreightDiscounts_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreightDiscounts', pretty_print=pretty_print)
        for Rebates_ in self.Rebates:
            namespaceprefix_ = self.Rebates_nsprefix_ + ':' if (UseCapturedNS_ and self.Rebates_nsprefix_) else ''
            Rebates_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Rebates', pretty_print=pretty_print)
        for Surcharges_ in self.Surcharges:
            namespaceprefix_ = self.Surcharges_nsprefix_ + ':' if (UseCapturedNS_ and self.Surcharges_nsprefix_) else ''
            Surcharges_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Surcharges', pretty_print=pretty_print)
        for Taxes_ in self.Taxes:
            namespaceprefix_ = self.Taxes_nsprefix_ + ':' if (UseCapturedNS_ and self.Taxes_nsprefix_) else ''
            Taxes_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Taxes', pretty_print=pretty_print)
        for DutiesAndTaxes_ in self.DutiesAndTaxes:
            namespaceprefix_ = self.DutiesAndTaxes_nsprefix_ + ':' if (UseCapturedNS_ and self.DutiesAndTaxes_nsprefix_) else ''
            DutiesAndTaxes_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DutiesAndTaxes', pretty_print=pretty_print)
        for AncillaryFeesAndTaxes_ in self.AncillaryFeesAndTaxes:
            namespaceprefix_ = self.AncillaryFeesAndTaxes_nsprefix_ + ':' if (UseCapturedNS_ and self.AncillaryFeesAndTaxes_nsprefix_) else ''
            AncillaryFeesAndTaxes_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AncillaryFeesAndTaxes', pretty_print=pretty_print)
        if self.VariableHandlingCharges is not None:
            namespaceprefix_ = self.VariableHandlingCharges_nsprefix_ + ':' if (UseCapturedNS_ and self.VariableHandlingCharges_nsprefix_) else ''
            self.VariableHandlingCharges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='VariableHandlingCharges', pretty_print=pretty_print)
        if self.TotalVariableHandlingCharges is not None:
            namespaceprefix_ = self.TotalVariableHandlingCharges_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalVariableHandlingCharges_nsprefix_) else ''
            self.TotalVariableHandlingCharges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalVariableHandlingCharges', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RateType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RateType')
            value_ = self.gds_validate_string(value_, node, 'RateType')
            self.RateType = value_
            self.RateType_nsprefix_ = child_.prefix
            # validate type ReturnedRateType
            self.validate_ReturnedRateType(self.RateType)
        elif nodeName_ == 'RateScale':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RateScale')
            value_ = self.gds_validate_string(value_, node, 'RateScale')
            self.RateScale = value_
            self.RateScale_nsprefix_ = child_.prefix
        elif nodeName_ == 'RateZone':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RateZone')
            value_ = self.gds_validate_string(value_, node, 'RateZone')
            self.RateZone = value_
            self.RateZone_nsprefix_ = child_.prefix
        elif nodeName_ == 'PricingCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PricingCode')
            value_ = self.gds_validate_string(value_, node, 'PricingCode')
            self.PricingCode = value_
            self.PricingCode_nsprefix_ = child_.prefix
            # validate type PricingCodeType
            self.validate_PricingCodeType(self.PricingCode)
        elif nodeName_ == 'RatedWeightMethod':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RatedWeightMethod')
            value_ = self.gds_validate_string(value_, node, 'RatedWeightMethod')
            self.RatedWeightMethod = value_
            self.RatedWeightMethod_nsprefix_ = child_.prefix
            # validate type RatedWeightMethod
            self.validate_RatedWeightMethod(self.RatedWeightMethod)
        elif nodeName_ == 'MinimumChargeType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MinimumChargeType')
            value_ = self.gds_validate_string(value_, node, 'MinimumChargeType')
            self.MinimumChargeType = value_
            self.MinimumChargeType_nsprefix_ = child_.prefix
            # validate type MinimumChargeType
            self.validate_MinimumChargeType(self.MinimumChargeType)
        elif nodeName_ == 'CurrencyExchangeRate':
            obj_ = CurrencyExchangeRate.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CurrencyExchangeRate = obj_
            obj_.original_tagname_ = 'CurrencyExchangeRate'
        elif nodeName_ == 'SpecialRatingApplied':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecialRatingApplied')
            value_ = self.gds_validate_string(value_, node, 'SpecialRatingApplied')
            self.SpecialRatingApplied.append(value_)
            self.SpecialRatingApplied_nsprefix_ = child_.prefix
            # validate type SpecialRatingAppliedType
            self.validate_SpecialRatingAppliedType(self.SpecialRatingApplied[-1])
        elif nodeName_ == 'DimDivisor' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'DimDivisor')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'DimDivisor')
            self.DimDivisor = ival_
            self.DimDivisor_nsprefix_ = child_.prefix
        elif nodeName_ == 'DimDivisorType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DimDivisorType')
            value_ = self.gds_validate_string(value_, node, 'DimDivisorType')
            self.DimDivisorType = value_
            self.DimDivisorType_nsprefix_ = child_.prefix
            # validate type RateDimensionalDivisorType
            self.validate_RateDimensionalDivisorType(self.DimDivisorType)
        elif nodeName_ == 'FuelSurchargePercent' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'FuelSurchargePercent')
            fval_ = self.gds_validate_decimal(fval_, node, 'FuelSurchargePercent')
            self.FuelSurchargePercent = fval_
            self.FuelSurchargePercent_nsprefix_ = child_.prefix
        elif nodeName_ == 'TotalBillingWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalBillingWeight = obj_
            obj_.original_tagname_ = 'TotalBillingWeight'
        elif nodeName_ == 'TotalDimWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalDimWeight = obj_
            obj_.original_tagname_ = 'TotalDimWeight'
        elif nodeName_ == 'TotalBaseCharge':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalBaseCharge = obj_
            obj_.original_tagname_ = 'TotalBaseCharge'
        elif nodeName_ == 'TotalFreightDiscounts':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalFreightDiscounts = obj_
            obj_.original_tagname_ = 'TotalFreightDiscounts'
        elif nodeName_ == 'TotalNetFreight':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalNetFreight = obj_
            obj_.original_tagname_ = 'TotalNetFreight'
        elif nodeName_ == 'TotalSurcharges':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalSurcharges = obj_
            obj_.original_tagname_ = 'TotalSurcharges'
        elif nodeName_ == 'TotalNetFedExCharge':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalNetFedExCharge = obj_
            obj_.original_tagname_ = 'TotalNetFedExCharge'
        elif nodeName_ == 'TotalTaxes':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalTaxes = obj_
            obj_.original_tagname_ = 'TotalTaxes'
        elif nodeName_ == 'TotalNetCharge':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalNetCharge = obj_
            obj_.original_tagname_ = 'TotalNetCharge'
        elif nodeName_ == 'TotalRebates':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalRebates = obj_
            obj_.original_tagname_ = 'TotalRebates'
        elif nodeName_ == 'TotalDutiesAndTaxes':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalDutiesAndTaxes = obj_
            obj_.original_tagname_ = 'TotalDutiesAndTaxes'
        elif nodeName_ == 'TotalAncillaryFeesAndTaxes':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalAncillaryFeesAndTaxes = obj_
            obj_.original_tagname_ = 'TotalAncillaryFeesAndTaxes'
        elif nodeName_ == 'TotalDutiesTaxesAndFees':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalDutiesTaxesAndFees = obj_
            obj_.original_tagname_ = 'TotalDutiesTaxesAndFees'
        elif nodeName_ == 'TotalNetChargeWithDutiesAndTaxes':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalNetChargeWithDutiesAndTaxes = obj_
            obj_.original_tagname_ = 'TotalNetChargeWithDutiesAndTaxes'
        elif nodeName_ == 'ShipmentLegRateDetails':
            obj_ = ShipmentLegRateDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentLegRateDetails.append(obj_)
            obj_.original_tagname_ = 'ShipmentLegRateDetails'
        elif nodeName_ == 'FreightRateDetail':
            obj_ = FreightRateDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreightRateDetail = obj_
            obj_.original_tagname_ = 'FreightRateDetail'
        elif nodeName_ == 'FreightDiscounts':
            obj_ = RateDiscount.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreightDiscounts.append(obj_)
            obj_.original_tagname_ = 'FreightDiscounts'
        elif nodeName_ == 'Rebates':
            obj_ = Rebate.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Rebates.append(obj_)
            obj_.original_tagname_ = 'Rebates'
        elif nodeName_ == 'Surcharges':
            obj_ = Surcharge.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Surcharges.append(obj_)
            obj_.original_tagname_ = 'Surcharges'
        elif nodeName_ == 'Taxes':
            obj_ = Tax.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Taxes.append(obj_)
            obj_.original_tagname_ = 'Taxes'
        elif nodeName_ == 'DutiesAndTaxes':
            obj_ = EdtCommodityTax.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DutiesAndTaxes.append(obj_)
            obj_.original_tagname_ = 'DutiesAndTaxes'
        elif nodeName_ == 'AncillaryFeesAndTaxes':
            obj_ = AncillaryFeeAndTax.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AncillaryFeesAndTaxes.append(obj_)
            obj_.original_tagname_ = 'AncillaryFeesAndTaxes'
        elif nodeName_ == 'VariableHandlingCharges':
            obj_ = VariableHandlingCharges.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.VariableHandlingCharges = obj_
            obj_.original_tagname_ = 'VariableHandlingCharges'
        elif nodeName_ == 'TotalVariableHandlingCharges':
            obj_ = VariableHandlingCharges.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalVariableHandlingCharges = obj_
            obj_.original_tagname_ = 'TotalVariableHandlingCharges'
# end class ShipmentRateDetail


class ShipmentRating(GeneratedsSuper):
    """This class groups together all shipment-level rate data (across all rate
    types) as part of the response to a shipping request, which groups
    shipment-level data together and groups package-level data by
    package."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ActualRateType=None, EffectiveNetDiscount=None, ShipmentRateDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ActualRateType = ActualRateType
        self.validate_ReturnedRateType(self.ActualRateType)
        self.ActualRateType_nsprefix_ = None
        self.EffectiveNetDiscount = EffectiveNetDiscount
        self.EffectiveNetDiscount_nsprefix_ = None
        if ShipmentRateDetails is None:
            self.ShipmentRateDetails = []
        else:
            self.ShipmentRateDetails = ShipmentRateDetails
        self.ShipmentRateDetails_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentRating)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentRating.subclass:
            return ShipmentRating.subclass(*args_, **kwargs_)
        else:
            return ShipmentRating(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ActualRateType(self):
        return self.ActualRateType
    def set_ActualRateType(self, ActualRateType):
        self.ActualRateType = ActualRateType
    def get_EffectiveNetDiscount(self):
        return self.EffectiveNetDiscount
    def set_EffectiveNetDiscount(self, EffectiveNetDiscount):
        self.EffectiveNetDiscount = EffectiveNetDiscount
    def get_ShipmentRateDetails(self):
        return self.ShipmentRateDetails
    def set_ShipmentRateDetails(self, ShipmentRateDetails):
        self.ShipmentRateDetails = ShipmentRateDetails
    def add_ShipmentRateDetails(self, value):
        self.ShipmentRateDetails.append(value)
    def insert_ShipmentRateDetails_at(self, index, value):
        self.ShipmentRateDetails.insert(index, value)
    def replace_ShipmentRateDetails_at(self, index, value):
        self.ShipmentRateDetails[index] = value
    def validate_ReturnedRateType(self, value):
        result = True
        # Validate type ReturnedRateType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['INCENTIVE', 'NEGOTIATED', 'PAYOR_ACCOUNT_PACKAGE', 'PAYOR_ACCOUNT_SHIPMENT', 'PAYOR_LIST_PACKAGE', 'PAYOR_LIST_SHIPMENT', 'PREFERRED_ACCOUNT_PACKAGE', 'PREFERRED_ACCOUNT_SHIPMENT', 'PREFERRED_LIST_PACKAGE', 'PREFERRED_LIST_SHIPMENT', 'PREFERRED_NEGOTIATED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ReturnedRateType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.ActualRateType is not None or
            self.EffectiveNetDiscount is not None or
            self.ShipmentRateDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentRating', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentRating')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentRating':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentRating')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentRating', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentRating'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentRating', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ActualRateType is not None:
            namespaceprefix_ = self.ActualRateType_nsprefix_ + ':' if (UseCapturedNS_ and self.ActualRateType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActualRateType>%s</%sActualRateType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ActualRateType), input_name='ActualRateType')), namespaceprefix_ , eol_))
        if self.EffectiveNetDiscount is not None:
            namespaceprefix_ = self.EffectiveNetDiscount_nsprefix_ + ':' if (UseCapturedNS_ and self.EffectiveNetDiscount_nsprefix_) else ''
            self.EffectiveNetDiscount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EffectiveNetDiscount', pretty_print=pretty_print)
        for ShipmentRateDetails_ in self.ShipmentRateDetails:
            namespaceprefix_ = self.ShipmentRateDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentRateDetails_nsprefix_) else ''
            ShipmentRateDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentRateDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ActualRateType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ActualRateType')
            value_ = self.gds_validate_string(value_, node, 'ActualRateType')
            self.ActualRateType = value_
            self.ActualRateType_nsprefix_ = child_.prefix
            # validate type ReturnedRateType
            self.validate_ReturnedRateType(self.ActualRateType)
        elif nodeName_ == 'EffectiveNetDiscount':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EffectiveNetDiscount = obj_
            obj_.original_tagname_ = 'EffectiveNetDiscount'
        elif nodeName_ == 'ShipmentRateDetails':
            obj_ = ShipmentRateDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentRateDetails.append(obj_)
            obj_.original_tagname_ = 'ShipmentRateDetails'
# end class ShipmentRating


class ShipmentReply(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, AdvisoryDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HighestSeverity = HighestSeverity
        self.validate_NotificationSeverityType(self.HighestSeverity)
        self.HighestSeverity_nsprefix_ = None
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.Notifications_nsprefix_ = None
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = None
        self.Version = Version
        self.Version_nsprefix_ = None
        self.AdvisoryDetail = AdvisoryDetail
        self.AdvisoryDetail_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentReply)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentReply.subclass:
            return ShipmentReply.subclass(*args_, **kwargs_)
        else:
            return ShipmentReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HighestSeverity(self):
        return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity):
        self.HighestSeverity = HighestSeverity
    def get_Notifications(self):
        return self.Notifications
    def set_Notifications(self, Notifications):
        self.Notifications = Notifications
    def add_Notifications(self, value):
        self.Notifications.append(value)
    def insert_Notifications_at(self, index, value):
        self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value):
        self.Notifications[index] = value
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_AdvisoryDetail(self):
        return self.AdvisoryDetail
    def set_AdvisoryDetail(self, AdvisoryDetail):
        self.AdvisoryDetail = AdvisoryDetail
    def validate_NotificationSeverityType(self, value):
        result = True
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.AdvisoryDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentReply', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentReply')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentReply':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentReply')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentReply', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentReply'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentReply', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HighestSeverity is not None:
            namespaceprefix_ = self.HighestSeverity_nsprefix_ + ':' if (UseCapturedNS_ and self.HighestSeverity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HighestSeverity), input_name='HighestSeverity')), namespaceprefix_ , eol_))
        for Notifications_ in self.Notifications:
            namespaceprefix_ = self.Notifications_nsprefix_ + ':' if (UseCapturedNS_ and self.Notifications_nsprefix_) else ''
            Notifications_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Notifications', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        if self.AdvisoryDetail is not None:
            namespaceprefix_ = self.AdvisoryDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.AdvisoryDetail_nsprefix_) else ''
            self.AdvisoryDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AdvisoryDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HighestSeverity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HighestSeverity')
            value_ = self.gds_validate_string(value_, node, 'HighestSeverity')
            self.HighestSeverity = value_
            self.HighestSeverity_nsprefix_ = child_.prefix
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.HighestSeverity)
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'AdvisoryDetail':
            obj_ = ShipmentAdvisoryDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AdvisoryDetail = obj_
            obj_.original_tagname_ = 'AdvisoryDetail'
# end class ShipmentReply


class ShipmentSpecialServicesRequested(GeneratedsSuper):
    """These special services are available at the shipment level for some or
    all service types. If the shipper is requesting a special service which
    requires additional data (such as the COD amount), the shipment special
    service type must be present in the specialServiceTypes collection, and
    the supporting detail must be provided in the appropriate sub-object
    below."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SpecialServiceTypes=None, CodDetail=None, DeliveryOnInvoiceAcceptanceDetail=None, HoldAtLocationDetail=None, EventNotificationDetail=None, ReturnShipmentDetail=None, PendingShipmentDetail=None, InternationalControlledExportDetail=None, InternationalTrafficInArmsRegulationsDetail=None, ShipmentDryIceDetail=None, HomeDeliveryPremiumDetail=None, FreightGuaranteeDetail=None, EtdDetail=None, CustomDeliveryWindowDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if SpecialServiceTypes is None:
            self.SpecialServiceTypes = []
        else:
            self.SpecialServiceTypes = SpecialServiceTypes
        self.SpecialServiceTypes_nsprefix_ = None
        self.CodDetail = CodDetail
        self.CodDetail_nsprefix_ = None
        self.DeliveryOnInvoiceAcceptanceDetail = DeliveryOnInvoiceAcceptanceDetail
        self.DeliveryOnInvoiceAcceptanceDetail_nsprefix_ = None
        self.HoldAtLocationDetail = HoldAtLocationDetail
        self.HoldAtLocationDetail_nsprefix_ = None
        self.EventNotificationDetail = EventNotificationDetail
        self.EventNotificationDetail_nsprefix_ = None
        self.ReturnShipmentDetail = ReturnShipmentDetail
        self.ReturnShipmentDetail_nsprefix_ = None
        self.PendingShipmentDetail = PendingShipmentDetail
        self.PendingShipmentDetail_nsprefix_ = None
        self.InternationalControlledExportDetail = InternationalControlledExportDetail
        self.InternationalControlledExportDetail_nsprefix_ = None
        self.InternationalTrafficInArmsRegulationsDetail = InternationalTrafficInArmsRegulationsDetail
        self.InternationalTrafficInArmsRegulationsDetail_nsprefix_ = None
        self.ShipmentDryIceDetail = ShipmentDryIceDetail
        self.ShipmentDryIceDetail_nsprefix_ = None
        self.HomeDeliveryPremiumDetail = HomeDeliveryPremiumDetail
        self.HomeDeliveryPremiumDetail_nsprefix_ = None
        self.FreightGuaranteeDetail = FreightGuaranteeDetail
        self.FreightGuaranteeDetail_nsprefix_ = None
        self.EtdDetail = EtdDetail
        self.EtdDetail_nsprefix_ = None
        self.CustomDeliveryWindowDetail = CustomDeliveryWindowDetail
        self.CustomDeliveryWindowDetail_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentSpecialServicesRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentSpecialServicesRequested.subclass:
            return ShipmentSpecialServicesRequested.subclass(*args_, **kwargs_)
        else:
            return ShipmentSpecialServicesRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SpecialServiceTypes(self):
        return self.SpecialServiceTypes
    def set_SpecialServiceTypes(self, SpecialServiceTypes):
        self.SpecialServiceTypes = SpecialServiceTypes
    def add_SpecialServiceTypes(self, value):
        self.SpecialServiceTypes.append(value)
    def insert_SpecialServiceTypes_at(self, index, value):
        self.SpecialServiceTypes.insert(index, value)
    def replace_SpecialServiceTypes_at(self, index, value):
        self.SpecialServiceTypes[index] = value
    def get_CodDetail(self):
        return self.CodDetail
    def set_CodDetail(self, CodDetail):
        self.CodDetail = CodDetail
    def get_DeliveryOnInvoiceAcceptanceDetail(self):
        return self.DeliveryOnInvoiceAcceptanceDetail
    def set_DeliveryOnInvoiceAcceptanceDetail(self, DeliveryOnInvoiceAcceptanceDetail):
        self.DeliveryOnInvoiceAcceptanceDetail = DeliveryOnInvoiceAcceptanceDetail
    def get_HoldAtLocationDetail(self):
        return self.HoldAtLocationDetail
    def set_HoldAtLocationDetail(self, HoldAtLocationDetail):
        self.HoldAtLocationDetail = HoldAtLocationDetail
    def get_EventNotificationDetail(self):
        return self.EventNotificationDetail
    def set_EventNotificationDetail(self, EventNotificationDetail):
        self.EventNotificationDetail = EventNotificationDetail
    def get_ReturnShipmentDetail(self):
        return self.ReturnShipmentDetail
    def set_ReturnShipmentDetail(self, ReturnShipmentDetail):
        self.ReturnShipmentDetail = ReturnShipmentDetail
    def get_PendingShipmentDetail(self):
        return self.PendingShipmentDetail
    def set_PendingShipmentDetail(self, PendingShipmentDetail):
        self.PendingShipmentDetail = PendingShipmentDetail
    def get_InternationalControlledExportDetail(self):
        return self.InternationalControlledExportDetail
    def set_InternationalControlledExportDetail(self, InternationalControlledExportDetail):
        self.InternationalControlledExportDetail = InternationalControlledExportDetail
    def get_InternationalTrafficInArmsRegulationsDetail(self):
        return self.InternationalTrafficInArmsRegulationsDetail
    def set_InternationalTrafficInArmsRegulationsDetail(self, InternationalTrafficInArmsRegulationsDetail):
        self.InternationalTrafficInArmsRegulationsDetail = InternationalTrafficInArmsRegulationsDetail
    def get_ShipmentDryIceDetail(self):
        return self.ShipmentDryIceDetail
    def set_ShipmentDryIceDetail(self, ShipmentDryIceDetail):
        self.ShipmentDryIceDetail = ShipmentDryIceDetail
    def get_HomeDeliveryPremiumDetail(self):
        return self.HomeDeliveryPremiumDetail
    def set_HomeDeliveryPremiumDetail(self, HomeDeliveryPremiumDetail):
        self.HomeDeliveryPremiumDetail = HomeDeliveryPremiumDetail
    def get_FreightGuaranteeDetail(self):
        return self.FreightGuaranteeDetail
    def set_FreightGuaranteeDetail(self, FreightGuaranteeDetail):
        self.FreightGuaranteeDetail = FreightGuaranteeDetail
    def get_EtdDetail(self):
        return self.EtdDetail
    def set_EtdDetail(self, EtdDetail):
        self.EtdDetail = EtdDetail
    def get_CustomDeliveryWindowDetail(self):
        return self.CustomDeliveryWindowDetail
    def set_CustomDeliveryWindowDetail(self, CustomDeliveryWindowDetail):
        self.CustomDeliveryWindowDetail = CustomDeliveryWindowDetail
    def hasContent_(self):
        if (
            self.SpecialServiceTypes or
            self.CodDetail is not None or
            self.DeliveryOnInvoiceAcceptanceDetail is not None or
            self.HoldAtLocationDetail is not None or
            self.EventNotificationDetail is not None or
            self.ReturnShipmentDetail is not None or
            self.PendingShipmentDetail is not None or
            self.InternationalControlledExportDetail is not None or
            self.InternationalTrafficInArmsRegulationsDetail is not None or
            self.ShipmentDryIceDetail is not None or
            self.HomeDeliveryPremiumDetail is not None or
            self.FreightGuaranteeDetail is not None or
            self.EtdDetail is not None or
            self.CustomDeliveryWindowDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentSpecialServicesRequested', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentSpecialServicesRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentSpecialServicesRequested':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentSpecialServicesRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentSpecialServicesRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentSpecialServicesRequested'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentSpecialServicesRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SpecialServiceTypes_ in self.SpecialServiceTypes:
            namespaceprefix_ = self.SpecialServiceTypes_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialServiceTypes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialServiceTypes>%s</%sSpecialServiceTypes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(SpecialServiceTypes_), input_name='SpecialServiceTypes')), namespaceprefix_ , eol_))
        if self.CodDetail is not None:
            namespaceprefix_ = self.CodDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CodDetail_nsprefix_) else ''
            self.CodDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CodDetail', pretty_print=pretty_print)
        if self.DeliveryOnInvoiceAcceptanceDetail is not None:
            namespaceprefix_ = self.DeliveryOnInvoiceAcceptanceDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryOnInvoiceAcceptanceDetail_nsprefix_) else ''
            self.DeliveryOnInvoiceAcceptanceDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DeliveryOnInvoiceAcceptanceDetail', pretty_print=pretty_print)
        if self.HoldAtLocationDetail is not None:
            namespaceprefix_ = self.HoldAtLocationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.HoldAtLocationDetail_nsprefix_) else ''
            self.HoldAtLocationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HoldAtLocationDetail', pretty_print=pretty_print)
        if self.EventNotificationDetail is not None:
            namespaceprefix_ = self.EventNotificationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.EventNotificationDetail_nsprefix_) else ''
            self.EventNotificationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EventNotificationDetail', pretty_print=pretty_print)
        if self.ReturnShipmentDetail is not None:
            namespaceprefix_ = self.ReturnShipmentDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ReturnShipmentDetail_nsprefix_) else ''
            self.ReturnShipmentDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReturnShipmentDetail', pretty_print=pretty_print)
        if self.PendingShipmentDetail is not None:
            namespaceprefix_ = self.PendingShipmentDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.PendingShipmentDetail_nsprefix_) else ''
            self.PendingShipmentDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PendingShipmentDetail', pretty_print=pretty_print)
        if self.InternationalControlledExportDetail is not None:
            namespaceprefix_ = self.InternationalControlledExportDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.InternationalControlledExportDetail_nsprefix_) else ''
            self.InternationalControlledExportDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InternationalControlledExportDetail', pretty_print=pretty_print)
        if self.InternationalTrafficInArmsRegulationsDetail is not None:
            namespaceprefix_ = self.InternationalTrafficInArmsRegulationsDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.InternationalTrafficInArmsRegulationsDetail_nsprefix_) else ''
            self.InternationalTrafficInArmsRegulationsDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InternationalTrafficInArmsRegulationsDetail', pretty_print=pretty_print)
        if self.ShipmentDryIceDetail is not None:
            namespaceprefix_ = self.ShipmentDryIceDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentDryIceDetail_nsprefix_) else ''
            self.ShipmentDryIceDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentDryIceDetail', pretty_print=pretty_print)
        if self.HomeDeliveryPremiumDetail is not None:
            namespaceprefix_ = self.HomeDeliveryPremiumDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.HomeDeliveryPremiumDetail_nsprefix_) else ''
            self.HomeDeliveryPremiumDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HomeDeliveryPremiumDetail', pretty_print=pretty_print)
        if self.FreightGuaranteeDetail is not None:
            namespaceprefix_ = self.FreightGuaranteeDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightGuaranteeDetail_nsprefix_) else ''
            self.FreightGuaranteeDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreightGuaranteeDetail', pretty_print=pretty_print)
        if self.EtdDetail is not None:
            namespaceprefix_ = self.EtdDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.EtdDetail_nsprefix_) else ''
            self.EtdDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EtdDetail', pretty_print=pretty_print)
        if self.CustomDeliveryWindowDetail is not None:
            namespaceprefix_ = self.CustomDeliveryWindowDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomDeliveryWindowDetail_nsprefix_) else ''
            self.CustomDeliveryWindowDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomDeliveryWindowDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SpecialServiceTypes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecialServiceTypes')
            value_ = self.gds_validate_string(value_, node, 'SpecialServiceTypes')
            self.SpecialServiceTypes.append(value_)
            self.SpecialServiceTypes_nsprefix_ = child_.prefix
        elif nodeName_ == 'CodDetail':
            obj_ = CodDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CodDetail = obj_
            obj_.original_tagname_ = 'CodDetail'
        elif nodeName_ == 'DeliveryOnInvoiceAcceptanceDetail':
            obj_ = DeliveryOnInvoiceAcceptanceDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DeliveryOnInvoiceAcceptanceDetail = obj_
            obj_.original_tagname_ = 'DeliveryOnInvoiceAcceptanceDetail'
        elif nodeName_ == 'HoldAtLocationDetail':
            obj_ = HoldAtLocationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HoldAtLocationDetail = obj_
            obj_.original_tagname_ = 'HoldAtLocationDetail'
        elif nodeName_ == 'EventNotificationDetail':
            obj_ = ShipmentEventNotificationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EventNotificationDetail = obj_
            obj_.original_tagname_ = 'EventNotificationDetail'
        elif nodeName_ == 'ReturnShipmentDetail':
            obj_ = ReturnShipmentDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReturnShipmentDetail = obj_
            obj_.original_tagname_ = 'ReturnShipmentDetail'
        elif nodeName_ == 'PendingShipmentDetail':
            obj_ = PendingShipmentDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PendingShipmentDetail = obj_
            obj_.original_tagname_ = 'PendingShipmentDetail'
        elif nodeName_ == 'InternationalControlledExportDetail':
            obj_ = InternationalControlledExportDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InternationalControlledExportDetail = obj_
            obj_.original_tagname_ = 'InternationalControlledExportDetail'
        elif nodeName_ == 'InternationalTrafficInArmsRegulationsDetail':
            obj_ = InternationalTrafficInArmsRegulationsDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InternationalTrafficInArmsRegulationsDetail = obj_
            obj_.original_tagname_ = 'InternationalTrafficInArmsRegulationsDetail'
        elif nodeName_ == 'ShipmentDryIceDetail':
            obj_ = ShipmentDryIceDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentDryIceDetail = obj_
            obj_.original_tagname_ = 'ShipmentDryIceDetail'
        elif nodeName_ == 'HomeDeliveryPremiumDetail':
            obj_ = HomeDeliveryPremiumDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HomeDeliveryPremiumDetail = obj_
            obj_.original_tagname_ = 'HomeDeliveryPremiumDetail'
        elif nodeName_ == 'FreightGuaranteeDetail':
            obj_ = FreightGuaranteeDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreightGuaranteeDetail = obj_
            obj_.original_tagname_ = 'FreightGuaranteeDetail'
        elif nodeName_ == 'EtdDetail':
            obj_ = EtdDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EtdDetail = obj_
            obj_.original_tagname_ = 'EtdDetail'
        elif nodeName_ == 'CustomDeliveryWindowDetail':
            obj_ = CustomDeliveryWindowDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomDeliveryWindowDetail = obj_
            obj_.original_tagname_ = 'CustomDeliveryWindowDetail'
# end class ShipmentSpecialServicesRequested


class ShipperConveyanceDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Id = Id
        self.Id_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipperConveyanceDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipperConveyanceDetail.subclass:
            return ShipperConveyanceDetail.subclass(*args_, **kwargs_)
        else:
            return ShipperConveyanceDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def hasContent_(self):
        if (
            self.Id is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipperConveyanceDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipperConveyanceDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipperConveyanceDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipperConveyanceDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipperConveyanceDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipperConveyanceDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipperConveyanceDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Id is not None:
            namespaceprefix_ = self.Id_nsprefix_ + ':' if (UseCapturedNS_ and self.Id_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sId>%s</%sId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Id':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Id')
            value_ = self.gds_validate_string(value_, node, 'Id')
            self.Id = value_
            self.Id_nsprefix_ = child_.prefix
# end class ShipperConveyanceDetail


class ShippingDocument(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Localizations=None, Grouping=None, ShippingDocumentDisposition=None, AccessReference=None, ImageType=None, Resolution=None, CopiesToPrint=None, Parts=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_ReturnedShippingDocumentType(self.Type)
        self.Type_nsprefix_ = None
        if Localizations is None:
            self.Localizations = []
        else:
            self.Localizations = Localizations
        self.Localizations_nsprefix_ = None
        self.Grouping = Grouping
        self.validate_ShippingDocumentGroupingType(self.Grouping)
        self.Grouping_nsprefix_ = None
        self.ShippingDocumentDisposition = ShippingDocumentDisposition
        self.validate_ShippingDocumentDispositionType(self.ShippingDocumentDisposition)
        self.ShippingDocumentDisposition_nsprefix_ = None
        self.AccessReference = AccessReference
        self.AccessReference_nsprefix_ = None
        self.ImageType = ImageType
        self.validate_ShippingDocumentImageType(self.ImageType)
        self.ImageType_nsprefix_ = None
        self.Resolution = Resolution
        self.Resolution_nsprefix_ = None
        self.CopiesToPrint = CopiesToPrint
        self.CopiesToPrint_nsprefix_ = None
        if Parts is None:
            self.Parts = []
        else:
            self.Parts = Parts
        self.Parts_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShippingDocument)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShippingDocument.subclass:
            return ShippingDocument.subclass(*args_, **kwargs_)
        else:
            return ShippingDocument(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Localizations(self):
        return self.Localizations
    def set_Localizations(self, Localizations):
        self.Localizations = Localizations
    def add_Localizations(self, value):
        self.Localizations.append(value)
    def insert_Localizations_at(self, index, value):
        self.Localizations.insert(index, value)
    def replace_Localizations_at(self, index, value):
        self.Localizations[index] = value
    def get_Grouping(self):
        return self.Grouping
    def set_Grouping(self, Grouping):
        self.Grouping = Grouping
    def get_ShippingDocumentDisposition(self):
        return self.ShippingDocumentDisposition
    def set_ShippingDocumentDisposition(self, ShippingDocumentDisposition):
        self.ShippingDocumentDisposition = ShippingDocumentDisposition
    def get_AccessReference(self):
        return self.AccessReference
    def set_AccessReference(self, AccessReference):
        self.AccessReference = AccessReference
    def get_ImageType(self):
        return self.ImageType
    def set_ImageType(self, ImageType):
        self.ImageType = ImageType
    def get_Resolution(self):
        return self.Resolution
    def set_Resolution(self, Resolution):
        self.Resolution = Resolution
    def get_CopiesToPrint(self):
        return self.CopiesToPrint
    def set_CopiesToPrint(self, CopiesToPrint):
        self.CopiesToPrint = CopiesToPrint
    def get_Parts(self):
        return self.Parts
    def set_Parts(self, Parts):
        self.Parts = Parts
    def add_Parts(self, value):
        self.Parts.append(value)
    def insert_Parts_at(self, index, value):
        self.Parts.insert(index, value)
    def replace_Parts_at(self, index, value):
        self.Parts[index] = value
    def validate_ReturnedShippingDocumentType(self, value):
        result = True
        # Validate type ReturnedShippingDocumentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AUXILIARY_LABEL', 'CERTIFICATE_OF_ORIGIN', 'COD_AND_DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN_2_D_BARCODE', 'COD_AND_DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN_LABEL', 'COD_RETURN_2_D_BARCODE', 'COD_RETURN_LABEL', 'COMMERCIAL_INVOICE', 'CUSTOM_PACKAGE_DOCUMENT', 'CUSTOM_SHIPMENT_DOCUMENT', 'DANGEROUS_GOODS_SHIPPERS_DECLARATION', 'DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN_2_D_BARCODE', 'DELIVERY_ON_INVOICE_ACCEPTANCE_RETURN_LABEL', 'ETD_LABEL', 'EXPORT_DECLARATION', 'FEDEX_FREIGHT_STRAIGHT_BILL_OF_LADING', 'FREIGHT_ADDRESS_LABEL', 'GENERAL_AGENCY_AGREEMENT', 'GROUND_BARCODE', 'NAFTA_CERTIFICATE_OF_ORIGIN', 'OP_900', 'OUTBOUND_2_D_BARCODE', 'OUTBOUND_LABEL', 'PRO_FORMA_INVOICE', 'RECIPIENT_ADDRESS_BARCODE', 'RECIPIENT_POSTAL_BARCODE', 'RETURN_INSTRUCTIONS', 'TERMS_AND_CONDITIONS', 'USPS_BARCODE', 'VICS_BILL_OF_LADING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ReturnedShippingDocumentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ShippingDocumentGroupingType(self, value):
        result = True
        # Validate type ShippingDocumentGroupingType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CONSOLIDATED_BY_DOCUMENT_TYPE', 'INDIVIDUAL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShippingDocumentGroupingType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ShippingDocumentDispositionType(self, value):
        result = True
        # Validate type ShippingDocumentDispositionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DEFERRED_STORED', 'EMAILED', 'QUEUED', 'RETURNED', 'STORED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShippingDocumentDispositionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ShippingDocumentImageType(self, value):
        result = True
        # Validate type ShippingDocumentImageType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DOC', 'EPL2', 'PDF', 'PNG', 'RTF', 'TEXT', 'ZPLII']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShippingDocumentImageType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Localizations or
            self.Grouping is not None or
            self.ShippingDocumentDisposition is not None or
            self.AccessReference is not None or
            self.ImageType is not None or
            self.Resolution is not None or
            self.CopiesToPrint is not None or
            self.Parts
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocument', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShippingDocument')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShippingDocument':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShippingDocument')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShippingDocument', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShippingDocument'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocument', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        for Localizations_ in self.Localizations:
            namespaceprefix_ = self.Localizations_nsprefix_ + ':' if (UseCapturedNS_ and self.Localizations_nsprefix_) else ''
            Localizations_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Localizations', pretty_print=pretty_print)
        if self.Grouping is not None:
            namespaceprefix_ = self.Grouping_nsprefix_ + ':' if (UseCapturedNS_ and self.Grouping_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGrouping>%s</%sGrouping>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Grouping), input_name='Grouping')), namespaceprefix_ , eol_))
        if self.ShippingDocumentDisposition is not None:
            namespaceprefix_ = self.ShippingDocumentDisposition_nsprefix_ + ':' if (UseCapturedNS_ and self.ShippingDocumentDisposition_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShippingDocumentDisposition>%s</%sShippingDocumentDisposition>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShippingDocumentDisposition), input_name='ShippingDocumentDisposition')), namespaceprefix_ , eol_))
        if self.AccessReference is not None:
            namespaceprefix_ = self.AccessReference_nsprefix_ + ':' if (UseCapturedNS_ and self.AccessReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccessReference>%s</%sAccessReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccessReference), input_name='AccessReference')), namespaceprefix_ , eol_))
        if self.ImageType is not None:
            namespaceprefix_ = self.ImageType_nsprefix_ + ':' if (UseCapturedNS_ and self.ImageType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sImageType>%s</%sImageType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ImageType), input_name='ImageType')), namespaceprefix_ , eol_))
        if self.Resolution is not None:
            namespaceprefix_ = self.Resolution_nsprefix_ + ':' if (UseCapturedNS_ and self.Resolution_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sResolution>%s</%sResolution>%s' % (namespaceprefix_ , self.gds_format_integer(self.Resolution, input_name='Resolution'), namespaceprefix_ , eol_))
        if self.CopiesToPrint is not None:
            namespaceprefix_ = self.CopiesToPrint_nsprefix_ + ':' if (UseCapturedNS_ and self.CopiesToPrint_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCopiesToPrint>%s</%sCopiesToPrint>%s' % (namespaceprefix_ , self.gds_format_integer(self.CopiesToPrint, input_name='CopiesToPrint'), namespaceprefix_ , eol_))
        for Parts_ in self.Parts:
            namespaceprefix_ = self.Parts_nsprefix_ + ':' if (UseCapturedNS_ and self.Parts_nsprefix_) else ''
            Parts_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Parts', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type ReturnedShippingDocumentType
            self.validate_ReturnedShippingDocumentType(self.Type)
        elif nodeName_ == 'Localizations':
            obj_ = Localization.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Localizations.append(obj_)
            obj_.original_tagname_ = 'Localizations'
        elif nodeName_ == 'Grouping':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Grouping')
            value_ = self.gds_validate_string(value_, node, 'Grouping')
            self.Grouping = value_
            self.Grouping_nsprefix_ = child_.prefix
            # validate type ShippingDocumentGroupingType
            self.validate_ShippingDocumentGroupingType(self.Grouping)
        elif nodeName_ == 'ShippingDocumentDisposition':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShippingDocumentDisposition')
            value_ = self.gds_validate_string(value_, node, 'ShippingDocumentDisposition')
            self.ShippingDocumentDisposition = value_
            self.ShippingDocumentDisposition_nsprefix_ = child_.prefix
            # validate type ShippingDocumentDispositionType
            self.validate_ShippingDocumentDispositionType(self.ShippingDocumentDisposition)
        elif nodeName_ == 'AccessReference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccessReference')
            value_ = self.gds_validate_string(value_, node, 'AccessReference')
            self.AccessReference = value_
            self.AccessReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'ImageType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ImageType')
            value_ = self.gds_validate_string(value_, node, 'ImageType')
            self.ImageType = value_
            self.ImageType_nsprefix_ = child_.prefix
            # validate type ShippingDocumentImageType
            self.validate_ShippingDocumentImageType(self.ImageType)
        elif nodeName_ == 'Resolution' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Resolution')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Resolution')
            self.Resolution = ival_
            self.Resolution_nsprefix_ = child_.prefix
        elif nodeName_ == 'CopiesToPrint' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'CopiesToPrint')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'CopiesToPrint')
            self.CopiesToPrint = ival_
            self.CopiesToPrint_nsprefix_ = child_.prefix
        elif nodeName_ == 'Parts':
            obj_ = ShippingDocumentPart.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Parts.append(obj_)
            obj_.original_tagname_ = 'Parts'
# end class ShippingDocument


class ShippingDocumentDispositionDetail(GeneratedsSuper):
    """Each occurrence of this class specifies a particular way in which a kind
    of shipping document is to be produced and provided."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DispositionType=None, Grouping=None, StorageDetail=None, EMailDetail=None, PrintDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DispositionType = DispositionType
        self.validate_ShippingDocumentDispositionType(self.DispositionType)
        self.DispositionType_nsprefix_ = None
        self.Grouping = Grouping
        self.validate_ShippingDocumentGroupingType(self.Grouping)
        self.Grouping_nsprefix_ = None
        self.StorageDetail = StorageDetail
        self.StorageDetail_nsprefix_ = None
        self.EMailDetail = EMailDetail
        self.EMailDetail_nsprefix_ = None
        self.PrintDetail = PrintDetail
        self.PrintDetail_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShippingDocumentDispositionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShippingDocumentDispositionDetail.subclass:
            return ShippingDocumentDispositionDetail.subclass(*args_, **kwargs_)
        else:
            return ShippingDocumentDispositionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DispositionType(self):
        return self.DispositionType
    def set_DispositionType(self, DispositionType):
        self.DispositionType = DispositionType
    def get_Grouping(self):
        return self.Grouping
    def set_Grouping(self, Grouping):
        self.Grouping = Grouping
    def get_StorageDetail(self):
        return self.StorageDetail
    def set_StorageDetail(self, StorageDetail):
        self.StorageDetail = StorageDetail
    def get_EMailDetail(self):
        return self.EMailDetail
    def set_EMailDetail(self, EMailDetail):
        self.EMailDetail = EMailDetail
    def get_PrintDetail(self):
        return self.PrintDetail
    def set_PrintDetail(self, PrintDetail):
        self.PrintDetail = PrintDetail
    def validate_ShippingDocumentDispositionType(self, value):
        result = True
        # Validate type ShippingDocumentDispositionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DEFERRED_STORED', 'EMAILED', 'QUEUED', 'RETURNED', 'STORED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShippingDocumentDispositionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ShippingDocumentGroupingType(self, value):
        result = True
        # Validate type ShippingDocumentGroupingType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CONSOLIDATED_BY_DOCUMENT_TYPE', 'INDIVIDUAL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShippingDocumentGroupingType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.DispositionType is not None or
            self.Grouping is not None or
            self.StorageDetail is not None or
            self.EMailDetail is not None or
            self.PrintDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentDispositionDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShippingDocumentDispositionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShippingDocumentDispositionDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShippingDocumentDispositionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShippingDocumentDispositionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShippingDocumentDispositionDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentDispositionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DispositionType is not None:
            namespaceprefix_ = self.DispositionType_nsprefix_ + ':' if (UseCapturedNS_ and self.DispositionType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDispositionType>%s</%sDispositionType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DispositionType), input_name='DispositionType')), namespaceprefix_ , eol_))
        if self.Grouping is not None:
            namespaceprefix_ = self.Grouping_nsprefix_ + ':' if (UseCapturedNS_ and self.Grouping_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGrouping>%s</%sGrouping>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Grouping), input_name='Grouping')), namespaceprefix_ , eol_))
        if self.StorageDetail is not None:
            namespaceprefix_ = self.StorageDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.StorageDetail_nsprefix_) else ''
            self.StorageDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='StorageDetail', pretty_print=pretty_print)
        if self.EMailDetail is not None:
            namespaceprefix_ = self.EMailDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailDetail_nsprefix_) else ''
            self.EMailDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EMailDetail', pretty_print=pretty_print)
        if self.PrintDetail is not None:
            namespaceprefix_ = self.PrintDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.PrintDetail_nsprefix_) else ''
            self.PrintDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PrintDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DispositionType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DispositionType')
            value_ = self.gds_validate_string(value_, node, 'DispositionType')
            self.DispositionType = value_
            self.DispositionType_nsprefix_ = child_.prefix
            # validate type ShippingDocumentDispositionType
            self.validate_ShippingDocumentDispositionType(self.DispositionType)
        elif nodeName_ == 'Grouping':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Grouping')
            value_ = self.gds_validate_string(value_, node, 'Grouping')
            self.Grouping = value_
            self.Grouping_nsprefix_ = child_.prefix
            # validate type ShippingDocumentGroupingType
            self.validate_ShippingDocumentGroupingType(self.Grouping)
        elif nodeName_ == 'StorageDetail':
            obj_ = ShippingDocumentStorageDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.StorageDetail = obj_
            obj_.original_tagname_ = 'StorageDetail'
        elif nodeName_ == 'EMailDetail':
            obj_ = ShippingDocumentEMailDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EMailDetail = obj_
            obj_.original_tagname_ = 'EMailDetail'
        elif nodeName_ == 'PrintDetail':
            obj_ = ShippingDocumentPrintDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PrintDetail = obj_
            obj_.original_tagname_ = 'PrintDetail'
# end class ShippingDocumentDispositionDetail


class ShippingDocumentEMailDetail(GeneratedsSuper):
    """Specifies how to e-mail shipping documents."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EMailRecipients=None, Grouping=None, Localization=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if EMailRecipients is None:
            self.EMailRecipients = []
        else:
            self.EMailRecipients = EMailRecipients
        self.EMailRecipients_nsprefix_ = None
        self.Grouping = Grouping
        self.validate_ShippingDocumentEMailGroupingType(self.Grouping)
        self.Grouping_nsprefix_ = None
        self.Localization = Localization
        self.Localization_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShippingDocumentEMailDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShippingDocumentEMailDetail.subclass:
            return ShippingDocumentEMailDetail.subclass(*args_, **kwargs_)
        else:
            return ShippingDocumentEMailDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EMailRecipients(self):
        return self.EMailRecipients
    def set_EMailRecipients(self, EMailRecipients):
        self.EMailRecipients = EMailRecipients
    def add_EMailRecipients(self, value):
        self.EMailRecipients.append(value)
    def insert_EMailRecipients_at(self, index, value):
        self.EMailRecipients.insert(index, value)
    def replace_EMailRecipients_at(self, index, value):
        self.EMailRecipients[index] = value
    def get_Grouping(self):
        return self.Grouping
    def set_Grouping(self, Grouping):
        self.Grouping = Grouping
    def get_Localization(self):
        return self.Localization
    def set_Localization(self, Localization):
        self.Localization = Localization
    def validate_ShippingDocumentEMailGroupingType(self, value):
        result = True
        # Validate type ShippingDocumentEMailGroupingType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BY_RECIPIENT', 'NONE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShippingDocumentEMailGroupingType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.EMailRecipients or
            self.Grouping is not None or
            self.Localization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentEMailDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShippingDocumentEMailDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShippingDocumentEMailDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShippingDocumentEMailDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShippingDocumentEMailDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShippingDocumentEMailDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentEMailDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for EMailRecipients_ in self.EMailRecipients:
            namespaceprefix_ = self.EMailRecipients_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailRecipients_nsprefix_) else ''
            EMailRecipients_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EMailRecipients', pretty_print=pretty_print)
        if self.Grouping is not None:
            namespaceprefix_ = self.Grouping_nsprefix_ + ':' if (UseCapturedNS_ and self.Grouping_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGrouping>%s</%sGrouping>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Grouping), input_name='Grouping')), namespaceprefix_ , eol_))
        if self.Localization is not None:
            namespaceprefix_ = self.Localization_nsprefix_ + ':' if (UseCapturedNS_ and self.Localization_nsprefix_) else ''
            self.Localization.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Localization', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EMailRecipients':
            obj_ = ShippingDocumentEMailRecipient.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EMailRecipients.append(obj_)
            obj_.original_tagname_ = 'EMailRecipients'
        elif nodeName_ == 'Grouping':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Grouping')
            value_ = self.gds_validate_string(value_, node, 'Grouping')
            self.Grouping = value_
            self.Grouping_nsprefix_ = child_.prefix
            # validate type ShippingDocumentEMailGroupingType
            self.validate_ShippingDocumentEMailGroupingType(self.Grouping)
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
# end class ShippingDocumentEMailDetail


class ShippingDocumentEMailRecipient(GeneratedsSuper):
    """Specifies an individual recipient of e-mailed shipping document(s)."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecipientType=None, Address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RecipientType = RecipientType
        self.validate_EMailNotificationRecipientType(self.RecipientType)
        self.RecipientType_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShippingDocumentEMailRecipient)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShippingDocumentEMailRecipient.subclass:
            return ShippingDocumentEMailRecipient.subclass(*args_, **kwargs_)
        else:
            return ShippingDocumentEMailRecipient(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecipientType(self):
        return self.RecipientType
    def set_RecipientType(self, RecipientType):
        self.RecipientType = RecipientType
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def validate_EMailNotificationRecipientType(self, value):
        result = True
        # Validate type EMailNotificationRecipientType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BROKER', 'OTHER', 'RECIPIENT', 'SHIPPER', 'THIRD_PARTY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on EMailNotificationRecipientType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.RecipientType is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentEMailRecipient', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShippingDocumentEMailRecipient')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShippingDocumentEMailRecipient':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShippingDocumentEMailRecipient')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShippingDocumentEMailRecipient', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShippingDocumentEMailRecipient'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentEMailRecipient', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RecipientType is not None:
            namespaceprefix_ = self.RecipientType_nsprefix_ + ':' if (UseCapturedNS_ and self.RecipientType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecipientType>%s</%sRecipientType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecipientType), input_name='RecipientType')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddress>%s</%sAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Address), input_name='Address')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecipientType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RecipientType')
            value_ = self.gds_validate_string(value_, node, 'RecipientType')
            self.RecipientType = value_
            self.RecipientType_nsprefix_ = child_.prefix
            # validate type EMailNotificationRecipientType
            self.validate_EMailNotificationRecipientType(self.RecipientType)
        elif nodeName_ == 'Address':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Address')
            value_ = self.gds_validate_string(value_, node, 'Address')
            self.Address = value_
            self.Address_nsprefix_ = child_.prefix
# end class ShippingDocumentEMailRecipient


class ShippingDocumentFormat(GeneratedsSuper):
    """Specifies characteristics of a shipping document to be produced."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Dispositions=None, TopOfPageOffset=None, ImageType=None, StockType=None, ProvideInstructions=None, OptionsRequested=None, Localization=None, CustomDocumentIdentifier=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Dispositions is None:
            self.Dispositions = []
        else:
            self.Dispositions = Dispositions
        self.Dispositions_nsprefix_ = None
        self.TopOfPageOffset = TopOfPageOffset
        self.TopOfPageOffset_nsprefix_ = None
        self.ImageType = ImageType
        self.validate_ShippingDocumentImageType(self.ImageType)
        self.ImageType_nsprefix_ = None
        self.StockType = StockType
        self.validate_ShippingDocumentStockType(self.StockType)
        self.StockType_nsprefix_ = None
        self.ProvideInstructions = ProvideInstructions
        self.ProvideInstructions_nsprefix_ = None
        self.OptionsRequested = OptionsRequested
        self.OptionsRequested_nsprefix_ = None
        self.Localization = Localization
        self.Localization_nsprefix_ = None
        self.CustomDocumentIdentifier = CustomDocumentIdentifier
        self.CustomDocumentIdentifier_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShippingDocumentFormat)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShippingDocumentFormat.subclass:
            return ShippingDocumentFormat.subclass(*args_, **kwargs_)
        else:
            return ShippingDocumentFormat(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Dispositions(self):
        return self.Dispositions
    def set_Dispositions(self, Dispositions):
        self.Dispositions = Dispositions
    def add_Dispositions(self, value):
        self.Dispositions.append(value)
    def insert_Dispositions_at(self, index, value):
        self.Dispositions.insert(index, value)
    def replace_Dispositions_at(self, index, value):
        self.Dispositions[index] = value
    def get_TopOfPageOffset(self):
        return self.TopOfPageOffset
    def set_TopOfPageOffset(self, TopOfPageOffset):
        self.TopOfPageOffset = TopOfPageOffset
    def get_ImageType(self):
        return self.ImageType
    def set_ImageType(self, ImageType):
        self.ImageType = ImageType
    def get_StockType(self):
        return self.StockType
    def set_StockType(self, StockType):
        self.StockType = StockType
    def get_ProvideInstructions(self):
        return self.ProvideInstructions
    def set_ProvideInstructions(self, ProvideInstructions):
        self.ProvideInstructions = ProvideInstructions
    def get_OptionsRequested(self):
        return self.OptionsRequested
    def set_OptionsRequested(self, OptionsRequested):
        self.OptionsRequested = OptionsRequested
    def get_Localization(self):
        return self.Localization
    def set_Localization(self, Localization):
        self.Localization = Localization
    def get_CustomDocumentIdentifier(self):
        return self.CustomDocumentIdentifier
    def set_CustomDocumentIdentifier(self, CustomDocumentIdentifier):
        self.CustomDocumentIdentifier = CustomDocumentIdentifier
    def validate_ShippingDocumentImageType(self, value):
        result = True
        # Validate type ShippingDocumentImageType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DOC', 'EPL2', 'PDF', 'PNG', 'RTF', 'TEXT', 'ZPLII']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShippingDocumentImageType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ShippingDocumentStockType(self, value):
        result = True
        # Validate type ShippingDocumentStockType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['OP_900_LG_B', 'OP_900_LL_B', 'OP_950', 'PAPER_4X6', 'PAPER_4_PER_PAGE_PORTRAIT', 'PAPER_LETTER', 'STOCK_4X6', 'STOCK_4X6.75_LEADING_DOC_TAB', 'STOCK_4X6.75_TRAILING_DOC_TAB', 'STOCK_4X8', 'STOCK_4X9_LEADING_DOC_TAB', 'STOCK_4X9_TRAILING_DOC_TAB']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShippingDocumentStockType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Dispositions or
            self.TopOfPageOffset is not None or
            self.ImageType is not None or
            self.StockType is not None or
            self.ProvideInstructions is not None or
            self.OptionsRequested is not None or
            self.Localization is not None or
            self.CustomDocumentIdentifier is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentFormat', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShippingDocumentFormat')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShippingDocumentFormat':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShippingDocumentFormat')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShippingDocumentFormat', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShippingDocumentFormat'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentFormat', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Dispositions_ in self.Dispositions:
            namespaceprefix_ = self.Dispositions_nsprefix_ + ':' if (UseCapturedNS_ and self.Dispositions_nsprefix_) else ''
            Dispositions_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Dispositions', pretty_print=pretty_print)
        if self.TopOfPageOffset is not None:
            namespaceprefix_ = self.TopOfPageOffset_nsprefix_ + ':' if (UseCapturedNS_ and self.TopOfPageOffset_nsprefix_) else ''
            self.TopOfPageOffset.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TopOfPageOffset', pretty_print=pretty_print)
        if self.ImageType is not None:
            namespaceprefix_ = self.ImageType_nsprefix_ + ':' if (UseCapturedNS_ and self.ImageType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sImageType>%s</%sImageType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ImageType), input_name='ImageType')), namespaceprefix_ , eol_))
        if self.StockType is not None:
            namespaceprefix_ = self.StockType_nsprefix_ + ':' if (UseCapturedNS_ and self.StockType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStockType>%s</%sStockType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StockType), input_name='StockType')), namespaceprefix_ , eol_))
        if self.ProvideInstructions is not None:
            namespaceprefix_ = self.ProvideInstructions_nsprefix_ + ':' if (UseCapturedNS_ and self.ProvideInstructions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProvideInstructions>%s</%sProvideInstructions>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ProvideInstructions, input_name='ProvideInstructions'), namespaceprefix_ , eol_))
        if self.OptionsRequested is not None:
            namespaceprefix_ = self.OptionsRequested_nsprefix_ + ':' if (UseCapturedNS_ and self.OptionsRequested_nsprefix_) else ''
            self.OptionsRequested.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OptionsRequested', pretty_print=pretty_print)
        if self.Localization is not None:
            namespaceprefix_ = self.Localization_nsprefix_ + ':' if (UseCapturedNS_ and self.Localization_nsprefix_) else ''
            self.Localization.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Localization', pretty_print=pretty_print)
        if self.CustomDocumentIdentifier is not None:
            namespaceprefix_ = self.CustomDocumentIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomDocumentIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomDocumentIdentifier>%s</%sCustomDocumentIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomDocumentIdentifier), input_name='CustomDocumentIdentifier')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Dispositions':
            obj_ = ShippingDocumentDispositionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Dispositions.append(obj_)
            obj_.original_tagname_ = 'Dispositions'
        elif nodeName_ == 'TopOfPageOffset':
            obj_ = LinearMeasure.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TopOfPageOffset = obj_
            obj_.original_tagname_ = 'TopOfPageOffset'
        elif nodeName_ == 'ImageType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ImageType')
            value_ = self.gds_validate_string(value_, node, 'ImageType')
            self.ImageType = value_
            self.ImageType_nsprefix_ = child_.prefix
            # validate type ShippingDocumentImageType
            self.validate_ShippingDocumentImageType(self.ImageType)
        elif nodeName_ == 'StockType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StockType')
            value_ = self.gds_validate_string(value_, node, 'StockType')
            self.StockType = value_
            self.StockType_nsprefix_ = child_.prefix
            # validate type ShippingDocumentStockType
            self.validate_ShippingDocumentStockType(self.StockType)
        elif nodeName_ == 'ProvideInstructions':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ProvideInstructions')
            ival_ = self.gds_validate_boolean(ival_, node, 'ProvideInstructions')
            self.ProvideInstructions = ival_
            self.ProvideInstructions_nsprefix_ = child_.prefix
        elif nodeName_ == 'OptionsRequested':
            obj_ = DocumentFormatOptionsRequested.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OptionsRequested = obj_
            obj_.original_tagname_ = 'OptionsRequested'
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
        elif nodeName_ == 'CustomDocumentIdentifier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomDocumentIdentifier')
            value_ = self.gds_validate_string(value_, node, 'CustomDocumentIdentifier')
            self.CustomDocumentIdentifier = value_
            self.CustomDocumentIdentifier_nsprefix_ = child_.prefix
# end class ShippingDocumentFormat


class ShippingDocumentPart(GeneratedsSuper):
    """A single part of a shipping document, such as one page of a multiple-
    page document whose format requires a separate image per page."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DocumentPartSequenceNumber=None, Image=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DocumentPartSequenceNumber = DocumentPartSequenceNumber
        self.DocumentPartSequenceNumber_nsprefix_ = None
        self.Image = Image
        self.Image_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShippingDocumentPart)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShippingDocumentPart.subclass:
            return ShippingDocumentPart.subclass(*args_, **kwargs_)
        else:
            return ShippingDocumentPart(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocumentPartSequenceNumber(self):
        return self.DocumentPartSequenceNumber
    def set_DocumentPartSequenceNumber(self, DocumentPartSequenceNumber):
        self.DocumentPartSequenceNumber = DocumentPartSequenceNumber
    def get_Image(self):
        return self.Image
    def set_Image(self, Image):
        self.Image = Image
    def hasContent_(self):
        if (
            self.DocumentPartSequenceNumber is not None or
            self.Image is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentPart', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShippingDocumentPart')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShippingDocumentPart':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShippingDocumentPart')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShippingDocumentPart', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShippingDocumentPart'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentPart', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocumentPartSequenceNumber is not None:
            namespaceprefix_ = self.DocumentPartSequenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentPartSequenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentPartSequenceNumber>%s</%sDocumentPartSequenceNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.DocumentPartSequenceNumber, input_name='DocumentPartSequenceNumber'), namespaceprefix_ , eol_))
        if self.Image is not None:
            namespaceprefix_ = self.Image_nsprefix_ + ':' if (UseCapturedNS_ and self.Image_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sImage>%s</%sImage>%s' % (namespaceprefix_ , self.gds_format_base64(self.Image, input_name='Image'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocumentPartSequenceNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'DocumentPartSequenceNumber')
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'DocumentPartSequenceNumber')
            self.DocumentPartSequenceNumber = ival_
            self.DocumentPartSequenceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Image':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Image')
            else:
                bval_ = None
            self.Image = bval_
            self.Image_nsprefix_ = child_.prefix
# end class ShippingDocumentPart


class ShippingDocumentPrintDetail(GeneratedsSuper):
    """Specifies printing options for a shipping document."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PrinterId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PrinterId = PrinterId
        self.PrinterId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShippingDocumentPrintDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShippingDocumentPrintDetail.subclass:
            return ShippingDocumentPrintDetail.subclass(*args_, **kwargs_)
        else:
            return ShippingDocumentPrintDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PrinterId(self):
        return self.PrinterId
    def set_PrinterId(self, PrinterId):
        self.PrinterId = PrinterId
    def hasContent_(self):
        if (
            self.PrinterId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentPrintDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShippingDocumentPrintDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShippingDocumentPrintDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShippingDocumentPrintDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShippingDocumentPrintDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShippingDocumentPrintDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentPrintDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PrinterId is not None:
            namespaceprefix_ = self.PrinterId_nsprefix_ + ':' if (UseCapturedNS_ and self.PrinterId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrinterId>%s</%sPrinterId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrinterId), input_name='PrinterId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PrinterId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PrinterId')
            value_ = self.gds_validate_string(value_, node, 'PrinterId')
            self.PrinterId = value_
            self.PrinterId_nsprefix_ = child_.prefix
# end class ShippingDocumentPrintDetail


class ShippingDocumentSpecification(GeneratedsSuper):
    """Contains all data required for additional (non-label) shipping documents
    to be produced in conjunction with a specific shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ShippingDocumentTypes=None, CertificateOfOrigin=None, CommercialInvoiceDetail=None, CustomPackageDocumentDetail=None, CustomShipmentDocumentDetail=None, ExportDeclarationDetail=None, GeneralAgencyAgreementDetail=None, NaftaCertificateOfOriginDetail=None, Op900Detail=None, DangerousGoodsShippersDeclarationDetail=None, FreightAddressLabelDetail=None, FreightBillOfLadingDetail=None, ReturnInstructionsDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if ShippingDocumentTypes is None:
            self.ShippingDocumentTypes = []
        else:
            self.ShippingDocumentTypes = ShippingDocumentTypes
        self.ShippingDocumentTypes_nsprefix_ = None
        self.CertificateOfOrigin = CertificateOfOrigin
        self.CertificateOfOrigin_nsprefix_ = None
        self.CommercialInvoiceDetail = CommercialInvoiceDetail
        self.CommercialInvoiceDetail_nsprefix_ = None
        if CustomPackageDocumentDetail is None:
            self.CustomPackageDocumentDetail = []
        else:
            self.CustomPackageDocumentDetail = CustomPackageDocumentDetail
        self.CustomPackageDocumentDetail_nsprefix_ = None
        if CustomShipmentDocumentDetail is None:
            self.CustomShipmentDocumentDetail = []
        else:
            self.CustomShipmentDocumentDetail = CustomShipmentDocumentDetail
        self.CustomShipmentDocumentDetail_nsprefix_ = None
        self.ExportDeclarationDetail = ExportDeclarationDetail
        self.ExportDeclarationDetail_nsprefix_ = None
        self.GeneralAgencyAgreementDetail = GeneralAgencyAgreementDetail
        self.GeneralAgencyAgreementDetail_nsprefix_ = None
        self.NaftaCertificateOfOriginDetail = NaftaCertificateOfOriginDetail
        self.NaftaCertificateOfOriginDetail_nsprefix_ = None
        self.Op900Detail = Op900Detail
        self.Op900Detail_nsprefix_ = None
        self.DangerousGoodsShippersDeclarationDetail = DangerousGoodsShippersDeclarationDetail
        self.DangerousGoodsShippersDeclarationDetail_nsprefix_ = None
        self.FreightAddressLabelDetail = FreightAddressLabelDetail
        self.FreightAddressLabelDetail_nsprefix_ = None
        self.FreightBillOfLadingDetail = FreightBillOfLadingDetail
        self.FreightBillOfLadingDetail_nsprefix_ = None
        self.ReturnInstructionsDetail = ReturnInstructionsDetail
        self.ReturnInstructionsDetail_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShippingDocumentSpecification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShippingDocumentSpecification.subclass:
            return ShippingDocumentSpecification.subclass(*args_, **kwargs_)
        else:
            return ShippingDocumentSpecification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ShippingDocumentTypes(self):
        return self.ShippingDocumentTypes
    def set_ShippingDocumentTypes(self, ShippingDocumentTypes):
        self.ShippingDocumentTypes = ShippingDocumentTypes
    def add_ShippingDocumentTypes(self, value):
        self.ShippingDocumentTypes.append(value)
    def insert_ShippingDocumentTypes_at(self, index, value):
        self.ShippingDocumentTypes.insert(index, value)
    def replace_ShippingDocumentTypes_at(self, index, value):
        self.ShippingDocumentTypes[index] = value
    def get_CertificateOfOrigin(self):
        return self.CertificateOfOrigin
    def set_CertificateOfOrigin(self, CertificateOfOrigin):
        self.CertificateOfOrigin = CertificateOfOrigin
    def get_CommercialInvoiceDetail(self):
        return self.CommercialInvoiceDetail
    def set_CommercialInvoiceDetail(self, CommercialInvoiceDetail):
        self.CommercialInvoiceDetail = CommercialInvoiceDetail
    def get_CustomPackageDocumentDetail(self):
        return self.CustomPackageDocumentDetail
    def set_CustomPackageDocumentDetail(self, CustomPackageDocumentDetail):
        self.CustomPackageDocumentDetail = CustomPackageDocumentDetail
    def add_CustomPackageDocumentDetail(self, value):
        self.CustomPackageDocumentDetail.append(value)
    def insert_CustomPackageDocumentDetail_at(self, index, value):
        self.CustomPackageDocumentDetail.insert(index, value)
    def replace_CustomPackageDocumentDetail_at(self, index, value):
        self.CustomPackageDocumentDetail[index] = value
    def get_CustomShipmentDocumentDetail(self):
        return self.CustomShipmentDocumentDetail
    def set_CustomShipmentDocumentDetail(self, CustomShipmentDocumentDetail):
        self.CustomShipmentDocumentDetail = CustomShipmentDocumentDetail
    def add_CustomShipmentDocumentDetail(self, value):
        self.CustomShipmentDocumentDetail.append(value)
    def insert_CustomShipmentDocumentDetail_at(self, index, value):
        self.CustomShipmentDocumentDetail.insert(index, value)
    def replace_CustomShipmentDocumentDetail_at(self, index, value):
        self.CustomShipmentDocumentDetail[index] = value
    def get_ExportDeclarationDetail(self):
        return self.ExportDeclarationDetail
    def set_ExportDeclarationDetail(self, ExportDeclarationDetail):
        self.ExportDeclarationDetail = ExportDeclarationDetail
    def get_GeneralAgencyAgreementDetail(self):
        return self.GeneralAgencyAgreementDetail
    def set_GeneralAgencyAgreementDetail(self, GeneralAgencyAgreementDetail):
        self.GeneralAgencyAgreementDetail = GeneralAgencyAgreementDetail
    def get_NaftaCertificateOfOriginDetail(self):
        return self.NaftaCertificateOfOriginDetail
    def set_NaftaCertificateOfOriginDetail(self, NaftaCertificateOfOriginDetail):
        self.NaftaCertificateOfOriginDetail = NaftaCertificateOfOriginDetail
    def get_Op900Detail(self):
        return self.Op900Detail
    def set_Op900Detail(self, Op900Detail):
        self.Op900Detail = Op900Detail
    def get_DangerousGoodsShippersDeclarationDetail(self):
        return self.DangerousGoodsShippersDeclarationDetail
    def set_DangerousGoodsShippersDeclarationDetail(self, DangerousGoodsShippersDeclarationDetail):
        self.DangerousGoodsShippersDeclarationDetail = DangerousGoodsShippersDeclarationDetail
    def get_FreightAddressLabelDetail(self):
        return self.FreightAddressLabelDetail
    def set_FreightAddressLabelDetail(self, FreightAddressLabelDetail):
        self.FreightAddressLabelDetail = FreightAddressLabelDetail
    def get_FreightBillOfLadingDetail(self):
        return self.FreightBillOfLadingDetail
    def set_FreightBillOfLadingDetail(self, FreightBillOfLadingDetail):
        self.FreightBillOfLadingDetail = FreightBillOfLadingDetail
    def get_ReturnInstructionsDetail(self):
        return self.ReturnInstructionsDetail
    def set_ReturnInstructionsDetail(self, ReturnInstructionsDetail):
        self.ReturnInstructionsDetail = ReturnInstructionsDetail
    def validate_RequestedShippingDocumentType(self, value):
        result = True
        # Validate type RequestedShippingDocumentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CERTIFICATE_OF_ORIGIN', 'COMMERCIAL_INVOICE', 'CUSTOMER_SPECIFIED_LABELS', 'CUSTOM_PACKAGE_DOCUMENT', 'CUSTOM_SHIPMENT_DOCUMENT', 'DANGEROUS_GOODS_SHIPPERS_DECLARATION', 'EXPORT_DECLARATION', 'FEDEX_FREIGHT_STRAIGHT_BILL_OF_LADING', 'GENERAL_AGENCY_AGREEMENT', 'LABEL', 'NAFTA_CERTIFICATE_OF_ORIGIN', 'OP_900', 'PRO_FORMA_INVOICE', 'RETURN_INSTRUCTIONS', 'VICS_BILL_OF_LADING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RequestedShippingDocumentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.ShippingDocumentTypes or
            self.CertificateOfOrigin is not None or
            self.CommercialInvoiceDetail is not None or
            self.CustomPackageDocumentDetail or
            self.CustomShipmentDocumentDetail or
            self.ExportDeclarationDetail is not None or
            self.GeneralAgencyAgreementDetail is not None or
            self.NaftaCertificateOfOriginDetail is not None or
            self.Op900Detail is not None or
            self.DangerousGoodsShippersDeclarationDetail is not None or
            self.FreightAddressLabelDetail is not None or
            self.FreightBillOfLadingDetail is not None or
            self.ReturnInstructionsDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentSpecification', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShippingDocumentSpecification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShippingDocumentSpecification':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShippingDocumentSpecification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShippingDocumentSpecification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShippingDocumentSpecification'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentSpecification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ShippingDocumentTypes_ in self.ShippingDocumentTypes:
            namespaceprefix_ = self.ShippingDocumentTypes_nsprefix_ + ':' if (UseCapturedNS_ and self.ShippingDocumentTypes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShippingDocumentTypes>%s</%sShippingDocumentTypes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(ShippingDocumentTypes_), input_name='ShippingDocumentTypes')), namespaceprefix_ , eol_))
        if self.CertificateOfOrigin is not None:
            namespaceprefix_ = self.CertificateOfOrigin_nsprefix_ + ':' if (UseCapturedNS_ and self.CertificateOfOrigin_nsprefix_) else ''
            self.CertificateOfOrigin.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CertificateOfOrigin', pretty_print=pretty_print)
        if self.CommercialInvoiceDetail is not None:
            namespaceprefix_ = self.CommercialInvoiceDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CommercialInvoiceDetail_nsprefix_) else ''
            self.CommercialInvoiceDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CommercialInvoiceDetail', pretty_print=pretty_print)
        for CustomPackageDocumentDetail_ in self.CustomPackageDocumentDetail:
            namespaceprefix_ = self.CustomPackageDocumentDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomPackageDocumentDetail_nsprefix_) else ''
            CustomPackageDocumentDetail_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomPackageDocumentDetail', pretty_print=pretty_print)
        for CustomShipmentDocumentDetail_ in self.CustomShipmentDocumentDetail:
            namespaceprefix_ = self.CustomShipmentDocumentDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomShipmentDocumentDetail_nsprefix_) else ''
            CustomShipmentDocumentDetail_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomShipmentDocumentDetail', pretty_print=pretty_print)
        if self.ExportDeclarationDetail is not None:
            namespaceprefix_ = self.ExportDeclarationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ExportDeclarationDetail_nsprefix_) else ''
            self.ExportDeclarationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExportDeclarationDetail', pretty_print=pretty_print)
        if self.GeneralAgencyAgreementDetail is not None:
            namespaceprefix_ = self.GeneralAgencyAgreementDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.GeneralAgencyAgreementDetail_nsprefix_) else ''
            self.GeneralAgencyAgreementDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GeneralAgencyAgreementDetail', pretty_print=pretty_print)
        if self.NaftaCertificateOfOriginDetail is not None:
            namespaceprefix_ = self.NaftaCertificateOfOriginDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.NaftaCertificateOfOriginDetail_nsprefix_) else ''
            self.NaftaCertificateOfOriginDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NaftaCertificateOfOriginDetail', pretty_print=pretty_print)
        if self.Op900Detail is not None:
            namespaceprefix_ = self.Op900Detail_nsprefix_ + ':' if (UseCapturedNS_ and self.Op900Detail_nsprefix_) else ''
            self.Op900Detail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Op900Detail', pretty_print=pretty_print)
        if self.DangerousGoodsShippersDeclarationDetail is not None:
            namespaceprefix_ = self.DangerousGoodsShippersDeclarationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.DangerousGoodsShippersDeclarationDetail_nsprefix_) else ''
            self.DangerousGoodsShippersDeclarationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DangerousGoodsShippersDeclarationDetail', pretty_print=pretty_print)
        if self.FreightAddressLabelDetail is not None:
            namespaceprefix_ = self.FreightAddressLabelDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightAddressLabelDetail_nsprefix_) else ''
            self.FreightAddressLabelDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreightAddressLabelDetail', pretty_print=pretty_print)
        if self.FreightBillOfLadingDetail is not None:
            namespaceprefix_ = self.FreightBillOfLadingDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightBillOfLadingDetail_nsprefix_) else ''
            self.FreightBillOfLadingDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreightBillOfLadingDetail', pretty_print=pretty_print)
        if self.ReturnInstructionsDetail is not None:
            namespaceprefix_ = self.ReturnInstructionsDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ReturnInstructionsDetail_nsprefix_) else ''
            self.ReturnInstructionsDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReturnInstructionsDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ShippingDocumentTypes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShippingDocumentTypes')
            value_ = self.gds_validate_string(value_, node, 'ShippingDocumentTypes')
            self.ShippingDocumentTypes.append(value_)
            self.ShippingDocumentTypes_nsprefix_ = child_.prefix
            # validate type RequestedShippingDocumentType
            self.validate_RequestedShippingDocumentType(self.ShippingDocumentTypes[-1])
        elif nodeName_ == 'CertificateOfOrigin':
            obj_ = CertificateOfOriginDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CertificateOfOrigin = obj_
            obj_.original_tagname_ = 'CertificateOfOrigin'
        elif nodeName_ == 'CommercialInvoiceDetail':
            obj_ = CommercialInvoiceDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CommercialInvoiceDetail = obj_
            obj_.original_tagname_ = 'CommercialInvoiceDetail'
        elif nodeName_ == 'CustomPackageDocumentDetail':
            obj_ = CustomDocumentDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomPackageDocumentDetail.append(obj_)
            obj_.original_tagname_ = 'CustomPackageDocumentDetail'
        elif nodeName_ == 'CustomShipmentDocumentDetail':
            obj_ = CustomDocumentDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomShipmentDocumentDetail.append(obj_)
            obj_.original_tagname_ = 'CustomShipmentDocumentDetail'
        elif nodeName_ == 'ExportDeclarationDetail':
            obj_ = ExportDeclarationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExportDeclarationDetail = obj_
            obj_.original_tagname_ = 'ExportDeclarationDetail'
        elif nodeName_ == 'GeneralAgencyAgreementDetail':
            obj_ = GeneralAgencyAgreementDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GeneralAgencyAgreementDetail = obj_
            obj_.original_tagname_ = 'GeneralAgencyAgreementDetail'
        elif nodeName_ == 'NaftaCertificateOfOriginDetail':
            obj_ = NaftaCertificateOfOriginDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NaftaCertificateOfOriginDetail = obj_
            obj_.original_tagname_ = 'NaftaCertificateOfOriginDetail'
        elif nodeName_ == 'Op900Detail':
            obj_ = Op900Detail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Op900Detail = obj_
            obj_.original_tagname_ = 'Op900Detail'
        elif nodeName_ == 'DangerousGoodsShippersDeclarationDetail':
            obj_ = DangerousGoodsShippersDeclarationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DangerousGoodsShippersDeclarationDetail = obj_
            obj_.original_tagname_ = 'DangerousGoodsShippersDeclarationDetail'
        elif nodeName_ == 'FreightAddressLabelDetail':
            obj_ = FreightAddressLabelDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreightAddressLabelDetail = obj_
            obj_.original_tagname_ = 'FreightAddressLabelDetail'
        elif nodeName_ == 'FreightBillOfLadingDetail':
            obj_ = FreightBillOfLadingDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreightBillOfLadingDetail = obj_
            obj_.original_tagname_ = 'FreightBillOfLadingDetail'
        elif nodeName_ == 'ReturnInstructionsDetail':
            obj_ = ReturnInstructionsDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReturnInstructionsDetail = obj_
            obj_.original_tagname_ = 'ReturnInstructionsDetail'
# end class ShippingDocumentSpecification


class ShippingDocumentStorageDetail(GeneratedsSuper):
    """Specifies how to store shipping documents."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, FilePath=None, FileNaming=None, FileSuffix=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_ShippingDocumentStorageDetailType(self.Type)
        self.Type_nsprefix_ = None
        self.FilePath = FilePath
        self.FilePath_nsprefix_ = None
        self.FileNaming = FileNaming
        self.validate_ShippingDocumentNamingType(self.FileNaming)
        self.FileNaming_nsprefix_ = None
        self.FileSuffix = FileSuffix
        self.FileSuffix_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShippingDocumentStorageDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShippingDocumentStorageDetail.subclass:
            return ShippingDocumentStorageDetail.subclass(*args_, **kwargs_)
        else:
            return ShippingDocumentStorageDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_FilePath(self):
        return self.FilePath
    def set_FilePath(self, FilePath):
        self.FilePath = FilePath
    def get_FileNaming(self):
        return self.FileNaming
    def set_FileNaming(self, FileNaming):
        self.FileNaming = FileNaming
    def get_FileSuffix(self):
        return self.FileSuffix
    def set_FileSuffix(self, FileSuffix):
        self.FileSuffix = FileSuffix
    def validate_ShippingDocumentStorageDetailType(self, value):
        result = True
        # Validate type ShippingDocumentStorageDetailType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ASYNC_SERVICE', 'LOCAL_FILE_SYSTEM']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShippingDocumentStorageDetailType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ShippingDocumentNamingType(self, value):
        result = True
        # Validate type ShippingDocumentNamingType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FAST', 'LEGACY_FXRS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShippingDocumentNamingType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.FilePath is not None or
            self.FileNaming is not None or
            self.FileSuffix is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentStorageDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShippingDocumentStorageDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShippingDocumentStorageDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShippingDocumentStorageDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShippingDocumentStorageDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShippingDocumentStorageDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShippingDocumentStorageDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.FilePath is not None:
            namespaceprefix_ = self.FilePath_nsprefix_ + ':' if (UseCapturedNS_ and self.FilePath_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFilePath>%s</%sFilePath>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FilePath), input_name='FilePath')), namespaceprefix_ , eol_))
        if self.FileNaming is not None:
            namespaceprefix_ = self.FileNaming_nsprefix_ + ':' if (UseCapturedNS_ and self.FileNaming_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFileNaming>%s</%sFileNaming>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FileNaming), input_name='FileNaming')), namespaceprefix_ , eol_))
        if self.FileSuffix is not None:
            namespaceprefix_ = self.FileSuffix_nsprefix_ + ':' if (UseCapturedNS_ and self.FileSuffix_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFileSuffix>%s</%sFileSuffix>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FileSuffix), input_name='FileSuffix')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type ShippingDocumentStorageDetailType
            self.validate_ShippingDocumentStorageDetailType(self.Type)
        elif nodeName_ == 'FilePath':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FilePath')
            value_ = self.gds_validate_string(value_, node, 'FilePath')
            self.FilePath = value_
            self.FilePath_nsprefix_ = child_.prefix
        elif nodeName_ == 'FileNaming':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FileNaming')
            value_ = self.gds_validate_string(value_, node, 'FileNaming')
            self.FileNaming = value_
            self.FileNaming_nsprefix_ = child_.prefix
            # validate type ShippingDocumentNamingType
            self.validate_ShippingDocumentNamingType(self.FileNaming)
        elif nodeName_ == 'FileSuffix':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FileSuffix')
            value_ = self.gds_validate_string(value_, node, 'FileSuffix')
            self.FileSuffix = value_
            self.FileSuffix_nsprefix_ = child_.prefix
# end class ShippingDocumentStorageDetail


class SignatureOptionDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, OptionType=None, SignatureReleaseNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.OptionType = OptionType
        self.validate_SignatureOptionType(self.OptionType)
        self.OptionType_nsprefix_ = None
        self.SignatureReleaseNumber = SignatureReleaseNumber
        self.SignatureReleaseNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignatureOptionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignatureOptionDetail.subclass:
            return SignatureOptionDetail.subclass(*args_, **kwargs_)
        else:
            return SignatureOptionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_OptionType(self):
        return self.OptionType
    def set_OptionType(self, OptionType):
        self.OptionType = OptionType
    def get_SignatureReleaseNumber(self):
        return self.SignatureReleaseNumber
    def set_SignatureReleaseNumber(self, SignatureReleaseNumber):
        self.SignatureReleaseNumber = SignatureReleaseNumber
    def validate_SignatureOptionType(self, value):
        result = True
        # Validate type SignatureOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ADULT', 'DIRECT', 'INDIRECT', 'NO_SIGNATURE_REQUIRED', 'SERVICE_DEFAULT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SignatureOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.OptionType is not None or
            self.SignatureReleaseNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SignatureOptionDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignatureOptionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SignatureOptionDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignatureOptionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SignatureOptionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SignatureOptionDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SignatureOptionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OptionType is not None:
            namespaceprefix_ = self.OptionType_nsprefix_ + ':' if (UseCapturedNS_ and self.OptionType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptionType>%s</%sOptionType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OptionType), input_name='OptionType')), namespaceprefix_ , eol_))
        if self.SignatureReleaseNumber is not None:
            namespaceprefix_ = self.SignatureReleaseNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.SignatureReleaseNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSignatureReleaseNumber>%s</%sSignatureReleaseNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SignatureReleaseNumber), input_name='SignatureReleaseNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'OptionType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OptionType')
            value_ = self.gds_validate_string(value_, node, 'OptionType')
            self.OptionType = value_
            self.OptionType_nsprefix_ = child_.prefix
            # validate type SignatureOptionType
            self.validate_SignatureOptionType(self.OptionType)
        elif nodeName_ == 'SignatureReleaseNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SignatureReleaseNumber')
            value_ = self.gds_validate_string(value_, node, 'SignatureReleaseNumber')
            self.SignatureReleaseNumber = value_
            self.SignatureReleaseNumber_nsprefix_ = child_.prefix
# end class SignatureOptionDetail


class SmartPostShipmentDetail(GeneratedsSuper):
    """Data required for shipments handled under the SMART_POST and
    GROUND_SMART_POST service types."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ProcessingOptionsRequested=None, Indicia=None, AncillaryEndorsement=None, HubId=None, CustomerManifestId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ProcessingOptionsRequested = ProcessingOptionsRequested
        self.ProcessingOptionsRequested_nsprefix_ = None
        self.Indicia = Indicia
        self.validate_SmartPostIndiciaType(self.Indicia)
        self.Indicia_nsprefix_ = None
        self.AncillaryEndorsement = AncillaryEndorsement
        self.validate_SmartPostAncillaryEndorsementType(self.AncillaryEndorsement)
        self.AncillaryEndorsement_nsprefix_ = None
        self.HubId = HubId
        self.HubId_nsprefix_ = None
        self.CustomerManifestId = CustomerManifestId
        self.CustomerManifestId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SmartPostShipmentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SmartPostShipmentDetail.subclass:
            return SmartPostShipmentDetail.subclass(*args_, **kwargs_)
        else:
            return SmartPostShipmentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ProcessingOptionsRequested(self):
        return self.ProcessingOptionsRequested
    def set_ProcessingOptionsRequested(self, ProcessingOptionsRequested):
        self.ProcessingOptionsRequested = ProcessingOptionsRequested
    def get_Indicia(self):
        return self.Indicia
    def set_Indicia(self, Indicia):
        self.Indicia = Indicia
    def get_AncillaryEndorsement(self):
        return self.AncillaryEndorsement
    def set_AncillaryEndorsement(self, AncillaryEndorsement):
        self.AncillaryEndorsement = AncillaryEndorsement
    def get_HubId(self):
        return self.HubId
    def set_HubId(self, HubId):
        self.HubId = HubId
    def get_CustomerManifestId(self):
        return self.CustomerManifestId
    def set_CustomerManifestId(self, CustomerManifestId):
        self.CustomerManifestId = CustomerManifestId
    def validate_SmartPostIndiciaType(self, value):
        result = True
        # Validate type SmartPostIndiciaType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['MEDIA_MAIL', 'PARCEL_RETURN', 'PARCEL_SELECT', 'PRESORTED_BOUND_PRINTED_MATTER', 'PRESORTED_STANDARD']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SmartPostIndiciaType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_SmartPostAncillaryEndorsementType(self, value):
        result = True
        # Validate type SmartPostAncillaryEndorsementType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ADDRESS_CORRECTION', 'CARRIER_LEAVE_IF_NO_RESPONSE', 'CHANGE_SERVICE', 'FORWARDING_SERVICE', 'RETURN_SERVICE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SmartPostAncillaryEndorsementType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.ProcessingOptionsRequested is not None or
            self.Indicia is not None or
            self.AncillaryEndorsement is not None or
            self.HubId is not None or
            self.CustomerManifestId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SmartPostShipmentDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SmartPostShipmentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SmartPostShipmentDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SmartPostShipmentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SmartPostShipmentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SmartPostShipmentDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SmartPostShipmentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ProcessingOptionsRequested is not None:
            namespaceprefix_ = self.ProcessingOptionsRequested_nsprefix_ + ':' if (UseCapturedNS_ and self.ProcessingOptionsRequested_nsprefix_) else ''
            self.ProcessingOptionsRequested.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ProcessingOptionsRequested', pretty_print=pretty_print)
        if self.Indicia is not None:
            namespaceprefix_ = self.Indicia_nsprefix_ + ':' if (UseCapturedNS_ and self.Indicia_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndicia>%s</%sIndicia>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Indicia), input_name='Indicia')), namespaceprefix_ , eol_))
        if self.AncillaryEndorsement is not None:
            namespaceprefix_ = self.AncillaryEndorsement_nsprefix_ + ':' if (UseCapturedNS_ and self.AncillaryEndorsement_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAncillaryEndorsement>%s</%sAncillaryEndorsement>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AncillaryEndorsement), input_name='AncillaryEndorsement')), namespaceprefix_ , eol_))
        if self.HubId is not None:
            namespaceprefix_ = self.HubId_nsprefix_ + ':' if (UseCapturedNS_ and self.HubId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHubId>%s</%sHubId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HubId), input_name='HubId')), namespaceprefix_ , eol_))
        if self.CustomerManifestId is not None:
            namespaceprefix_ = self.CustomerManifestId_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerManifestId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomerManifestId>%s</%sCustomerManifestId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomerManifestId), input_name='CustomerManifestId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ProcessingOptionsRequested':
            obj_ = SmartPostShipmentProcessingOptionsRequested.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ProcessingOptionsRequested = obj_
            obj_.original_tagname_ = 'ProcessingOptionsRequested'
        elif nodeName_ == 'Indicia':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Indicia')
            value_ = self.gds_validate_string(value_, node, 'Indicia')
            self.Indicia = value_
            self.Indicia_nsprefix_ = child_.prefix
            # validate type SmartPostIndiciaType
            self.validate_SmartPostIndiciaType(self.Indicia)
        elif nodeName_ == 'AncillaryEndorsement':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AncillaryEndorsement')
            value_ = self.gds_validate_string(value_, node, 'AncillaryEndorsement')
            self.AncillaryEndorsement = value_
            self.AncillaryEndorsement_nsprefix_ = child_.prefix
            # validate type SmartPostAncillaryEndorsementType
            self.validate_SmartPostAncillaryEndorsementType(self.AncillaryEndorsement)
        elif nodeName_ == 'HubId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HubId')
            value_ = self.gds_validate_string(value_, node, 'HubId')
            self.HubId = value_
            self.HubId_nsprefix_ = child_.prefix
        elif nodeName_ == 'CustomerManifestId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomerManifestId')
            value_ = self.gds_validate_string(value_, node, 'CustomerManifestId')
            self.CustomerManifestId = value_
            self.CustomerManifestId_nsprefix_ = child_.prefix
# end class SmartPostShipmentDetail


class SmartPostShipmentProcessingOptionsRequested(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Options=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.Options_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SmartPostShipmentProcessingOptionsRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SmartPostShipmentProcessingOptionsRequested.subclass:
            return SmartPostShipmentProcessingOptionsRequested.subclass(*args_, **kwargs_)
        else:
            return SmartPostShipmentProcessingOptionsRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def add_Options(self, value):
        self.Options.append(value)
    def insert_Options_at(self, index, value):
        self.Options.insert(index, value)
    def replace_Options_at(self, index, value):
        self.Options[index] = value
    def validate_SmartPostShipmentProcessingOptionType(self, value):
        result = True
        # Validate type SmartPostShipmentProcessingOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['GROUND_TRACKING_NUMBER_REQUESTED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SmartPostShipmentProcessingOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Options
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SmartPostShipmentProcessingOptionsRequested', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SmartPostShipmentProcessingOptionsRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SmartPostShipmentProcessingOptionsRequested':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SmartPostShipmentProcessingOptionsRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SmartPostShipmentProcessingOptionsRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SmartPostShipmentProcessingOptionsRequested'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SmartPostShipmentProcessingOptionsRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Options_ in self.Options:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptions>%s</%sOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Options':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Options')
            value_ = self.gds_validate_string(value_, node, 'Options')
            self.Options.append(value_)
            self.Options_nsprefix_ = child_.prefix
            # validate type SmartPostShipmentProcessingOptionType
            self.validate_SmartPostShipmentProcessingOptionType(self.Options[-1])
# end class SmartPostShipmentProcessingOptionsRequested


class SpecialServiceDescription(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identifier=None, Names=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identifier = Identifier
        self.Identifier_nsprefix_ = None
        if Names is None:
            self.Names = []
        else:
            self.Names = Names
        self.Names_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SpecialServiceDescription)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SpecialServiceDescription.subclass:
            return SpecialServiceDescription.subclass(*args_, **kwargs_)
        else:
            return SpecialServiceDescription(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identifier(self):
        return self.Identifier
    def set_Identifier(self, Identifier):
        self.Identifier = Identifier
    def get_Names(self):
        return self.Names
    def set_Names(self, Names):
        self.Names = Names
    def add_Names(self, value):
        self.Names.append(value)
    def insert_Names_at(self, index, value):
        self.Names.insert(index, value)
    def replace_Names_at(self, index, value):
        self.Names[index] = value
    def hasContent_(self):
        if (
            self.Identifier is not None or
            self.Names
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SpecialServiceDescription', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SpecialServiceDescription')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SpecialServiceDescription':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SpecialServiceDescription')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SpecialServiceDescription', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SpecialServiceDescription'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SpecialServiceDescription', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identifier is not None:
            namespaceprefix_ = self.Identifier_nsprefix_ + ':' if (UseCapturedNS_ and self.Identifier_nsprefix_) else ''
            self.Identifier.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Identifier', pretty_print=pretty_print)
        for Names_ in self.Names:
            namespaceprefix_ = self.Names_nsprefix_ + ':' if (UseCapturedNS_ and self.Names_nsprefix_) else ''
            Names_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Names', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identifier':
            obj_ = OfferingIdentifierDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Identifier = obj_
            obj_.original_tagname_ = 'Identifier'
        elif nodeName_ == 'Names':
            obj_ = ProductName.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Names.append(obj_)
            obj_.original_tagname_ = 'Names'
# end class SpecialServiceDescription


class StringBarcode(GeneratedsSuper):
    """Each instance of this data type represents a barcode whose content must
    be represented as ASCII text (i.e. not binary data)."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_StringBarcodeType(self.Type)
        self.Type_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StringBarcode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StringBarcode.subclass:
            return StringBarcode.subclass(*args_, **kwargs_)
        else:
            return StringBarcode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def validate_StringBarcodeType(self, value):
        result = True
        # Validate type StringBarcodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ADDRESS', 'ASTRA', 'FEDEX_1D', 'GROUND', 'POSTAL', 'USPS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on StringBarcodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='StringBarcode', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StringBarcode')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'StringBarcode':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='StringBarcode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='StringBarcode', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='StringBarcode'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='StringBarcode', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type StringBarcodeType
            self.validate_StringBarcodeType(self.Type)
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
# end class StringBarcode


class Surcharge(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SurchargeType=None, Level=None, Description=None, Amount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.SurchargeType = SurchargeType
        self.validate_SurchargeType(self.SurchargeType)
        self.SurchargeType_nsprefix_ = None
        self.Level = Level
        self.validate_SurchargeLevelType(self.Level)
        self.Level_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.Amount = Amount
        self.Amount_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Surcharge)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Surcharge.subclass:
            return Surcharge.subclass(*args_, **kwargs_)
        else:
            return Surcharge(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SurchargeType(self):
        return self.SurchargeType
    def set_SurchargeType(self, SurchargeType):
        self.SurchargeType = SurchargeType
    def get_Level(self):
        return self.Level
    def set_Level(self, Level):
        self.Level = Level
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_Amount(self):
        return self.Amount
    def set_Amount(self, Amount):
        self.Amount = Amount
    def validate_SurchargeType(self, value):
        result = True
        # Validate type SurchargeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACCOUNT_NUMBER_PROCESSING_FEE', 'ADDITIONAL_HANDLING', 'ADDRESS_CORRECTION', 'ANCILLARY_FEE', 'APPOINTMENT_DELIVERY', 'BROKER_SELECT_OPTION', 'CANADIAN_DESTINATION', 'CLEARANCE_ENTRY_FEE', 'COD', 'CUT_FLOWERS', 'DANGEROUS_GOODS', 'DELIVERY_AREA', 'DELIVERY_CONFIRMATION', 'DELIVERY_ON_INVOICE_ACCEPTANCE', 'DOCUMENTATION_FEE', 'DRY_ICE', 'EMAIL_LABEL', 'EUROPE_FIRST', 'EXCESS_VALUE', 'EXHIBITION', 'EXPORT', 'EXTRA_SURFACE_HANDLING_CHARGE', 'EXTREME_LENGTH', 'FEDEX_INTRACOUNTRY_FEES', 'FEDEX_TAG', 'FICE', 'FLATBED', 'FREIGHT_GUARANTEE', 'FREIGHT_ON_VALUE', 'FREIGHT_TO_COLLECT', 'FUEL', 'HOLD_AT_LOCATION', 'HOME_DELIVERY_APPOINTMENT', 'HOME_DELIVERY_DATE_CERTAIN', 'HOME_DELIVERY_EVENING', 'INSIDE_DELIVERY', 'INSIDE_PICKUP', 'INSURED_VALUE', 'INTERHAWAII', 'LIFTGATE_DELIVERY', 'LIFTGATE_PICKUP', 'LIMITED_ACCESS_DELIVERY', 'LIMITED_ACCESS_PICKUP', 'METRO_DELIVERY', 'METRO_PICKUP', 'NON_MACHINABLE', 'OFFSHORE', 'ON_CALL_PICKUP', 'ON_DEMAND_CARE', 'OTHER', 'OUT_OF_DELIVERY_AREA', 'OUT_OF_PICKUP_AREA', 'OVERSIZE', 'OVER_DIMENSION', 'OVER_LENGTH', 'PEAK', 'PEAK_ADDITIONAL_HANDLING', 'PEAK_OVERSIZE', 'PEAK_RESIDENTIAL_DELIVERY', 'PIECE_COUNT_VERIFICATION', 'PRE_DELIVERY_NOTIFICATION', 'PRIORITY_ALERT', 'PROTECTION_FROM_FREEZING', 'REGIONAL_MALL_DELIVERY', 'REGIONAL_MALL_PICKUP', 'REROUTE', 'RESCHEDULE', 'RESIDENTIAL_DELIVERY', 'RESIDENTIAL_PICKUP', 'RETURN_LABEL', 'SATURDAY_DELIVERY', 'SATURDAY_PICKUP', 'SIGNATURE_OPTION', 'TARP', 'THIRD_PARTY_CONSIGNEE', 'TRANSMART_SERVICE_FEE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SurchargeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_SurchargeLevelType(self, value):
        result = True
        # Validate type SurchargeLevelType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['PACKAGE', 'SHIPMENT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SurchargeLevelType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.SurchargeType is not None or
            self.Level is not None or
            self.Description is not None or
            self.Amount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Surcharge', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Surcharge')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Surcharge':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Surcharge')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Surcharge', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Surcharge'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Surcharge', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SurchargeType is not None:
            namespaceprefix_ = self.SurchargeType_nsprefix_ + ':' if (UseCapturedNS_ and self.SurchargeType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSurchargeType>%s</%sSurchargeType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SurchargeType), input_name='SurchargeType')), namespaceprefix_ , eol_))
        if self.Level is not None:
            namespaceprefix_ = self.Level_nsprefix_ + ':' if (UseCapturedNS_ and self.Level_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLevel>%s</%sLevel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Level), input_name='Level')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.Amount is not None:
            namespaceprefix_ = self.Amount_nsprefix_ + ':' if (UseCapturedNS_ and self.Amount_nsprefix_) else ''
            self.Amount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Amount', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SurchargeType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SurchargeType')
            value_ = self.gds_validate_string(value_, node, 'SurchargeType')
            self.SurchargeType = value_
            self.SurchargeType_nsprefix_ = child_.prefix
            # validate type SurchargeType
            self.validate_SurchargeType(self.SurchargeType)
        elif nodeName_ == 'Level':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Level')
            value_ = self.gds_validate_string(value_, node, 'Level')
            self.Level = value_
            self.Level_nsprefix_ = child_.prefix
            # validate type SurchargeLevelType
            self.validate_SurchargeLevelType(self.Level)
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'Amount':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Amount = obj_
            obj_.original_tagname_ = 'Amount'
# end class Surcharge


class Tax(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TaxType=None, Description=None, Amount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TaxType = TaxType
        self.validate_TaxType(self.TaxType)
        self.TaxType_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.Amount = Amount
        self.Amount_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Tax)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Tax.subclass:
            return Tax.subclass(*args_, **kwargs_)
        else:
            return Tax(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TaxType(self):
        return self.TaxType
    def set_TaxType(self, TaxType):
        self.TaxType = TaxType
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_Amount(self):
        return self.Amount
    def set_Amount(self, Amount):
        self.Amount = Amount
    def validate_TaxType(self, value):
        result = True
        # Validate type TaxType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['EXPORT', 'GST', 'HST', 'INTRACOUNTRY', 'OTHER', 'PST', 'VAT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TaxType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.TaxType is not None or
            self.Description is not None or
            self.Amount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Tax', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Tax')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Tax':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Tax')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Tax', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Tax'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Tax', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TaxType is not None:
            namespaceprefix_ = self.TaxType_nsprefix_ + ':' if (UseCapturedNS_ and self.TaxType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxType>%s</%sTaxType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TaxType), input_name='TaxType')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.Amount is not None:
            namespaceprefix_ = self.Amount_nsprefix_ + ':' if (UseCapturedNS_ and self.Amount_nsprefix_) else ''
            self.Amount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Amount', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TaxType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TaxType')
            value_ = self.gds_validate_string(value_, node, 'TaxType')
            self.TaxType = value_
            self.TaxType_nsprefix_ = child_.prefix
            # validate type TaxType
            self.validate_TaxType(self.TaxType)
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'Amount':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Amount = obj_
            obj_.original_tagname_ = 'Amount'
# end class Tax


class TaxpayerIdentification(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TinType=None, Number=None, Usage=None, EffectiveDate=None, ExpirationDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TinType = TinType
        self.validate_TinType(self.TinType)
        self.TinType_nsprefix_ = None
        self.Number = Number
        self.Number_nsprefix_ = None
        self.Usage = Usage
        self.Usage_nsprefix_ = None
        if isinstance(EffectiveDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EffectiveDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = EffectiveDate
        self.EffectiveDate = initvalue_
        self.EffectiveDate_nsprefix_ = None
        if isinstance(ExpirationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ExpirationDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = ExpirationDate
        self.ExpirationDate = initvalue_
        self.ExpirationDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxpayerIdentification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxpayerIdentification.subclass:
            return TaxpayerIdentification.subclass(*args_, **kwargs_)
        else:
            return TaxpayerIdentification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TinType(self):
        return self.TinType
    def set_TinType(self, TinType):
        self.TinType = TinType
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_Usage(self):
        return self.Usage
    def set_Usage(self, Usage):
        self.Usage = Usage
    def get_EffectiveDate(self):
        return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate):
        self.EffectiveDate = EffectiveDate
    def get_ExpirationDate(self):
        return self.ExpirationDate
    def set_ExpirationDate(self, ExpirationDate):
        self.ExpirationDate = ExpirationDate
    def validate_TinType(self, value):
        result = True
        # Validate type TinType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BUSINESS_NATIONAL', 'BUSINESS_STATE', 'BUSINESS_UNION', 'PERSONAL_NATIONAL', 'PERSONAL_STATE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TinType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.TinType is not None or
            self.Number is not None or
            self.Usage is not None or
            self.EffectiveDate is not None or
            self.ExpirationDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TaxpayerIdentification', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TaxpayerIdentification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TaxpayerIdentification':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TaxpayerIdentification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TaxpayerIdentification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TaxpayerIdentification'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TaxpayerIdentification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TinType is not None:
            namespaceprefix_ = self.TinType_nsprefix_ + ':' if (UseCapturedNS_ and self.TinType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTinType>%s</%sTinType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TinType), input_name='TinType')), namespaceprefix_ , eol_))
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
        if self.Usage is not None:
            namespaceprefix_ = self.Usage_nsprefix_ + ':' if (UseCapturedNS_ and self.Usage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUsage>%s</%sUsage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Usage), input_name='Usage')), namespaceprefix_ , eol_))
        if self.EffectiveDate is not None:
            namespaceprefix_ = self.EffectiveDate_nsprefix_ + ':' if (UseCapturedNS_ and self.EffectiveDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEffectiveDate>%s</%sEffectiveDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.EffectiveDate, input_name='EffectiveDate'), namespaceprefix_ , eol_))
        if self.ExpirationDate is not None:
            namespaceprefix_ = self.ExpirationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ExpirationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExpirationDate>%s</%sExpirationDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.ExpirationDate, input_name='ExpirationDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TinType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TinType')
            value_ = self.gds_validate_string(value_, node, 'TinType')
            self.TinType = value_
            self.TinType_nsprefix_ = child_.prefix
            # validate type TinType
            self.validate_TinType(self.TinType)
        elif nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
        elif nodeName_ == 'Usage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Usage')
            value_ = self.gds_validate_string(value_, node, 'Usage')
            self.Usage = value_
            self.Usage_nsprefix_ = child_.prefix
        elif nodeName_ == 'EffectiveDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.EffectiveDate = dval_
            self.EffectiveDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'ExpirationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.ExpirationDate = dval_
            self.ExpirationDate_nsprefix_ = child_.prefix
# end class TaxpayerIdentification


class TrackingId(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TrackingIdType=None, FormId=None, UspsApplicationId=None, TrackingNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TrackingIdType = TrackingIdType
        self.validate_TrackingIdType(self.TrackingIdType)
        self.TrackingIdType_nsprefix_ = None
        self.FormId = FormId
        self.FormId_nsprefix_ = None
        self.UspsApplicationId = UspsApplicationId
        self.UspsApplicationId_nsprefix_ = None
        self.TrackingNumber = TrackingNumber
        self.TrackingNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackingId)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackingId.subclass:
            return TrackingId.subclass(*args_, **kwargs_)
        else:
            return TrackingId(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TrackingIdType(self):
        return self.TrackingIdType
    def set_TrackingIdType(self, TrackingIdType):
        self.TrackingIdType = TrackingIdType
    def get_FormId(self):
        return self.FormId
    def set_FormId(self, FormId):
        self.FormId = FormId
    def get_UspsApplicationId(self):
        return self.UspsApplicationId
    def set_UspsApplicationId(self, UspsApplicationId):
        self.UspsApplicationId = UspsApplicationId
    def get_TrackingNumber(self):
        return self.TrackingNumber
    def set_TrackingNumber(self, TrackingNumber):
        self.TrackingNumber = TrackingNumber
    def validate_TrackingIdType(self, value):
        result = True
        # Validate type TrackingIdType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['EXPRESS', 'FEDEX', 'FREIGHT', 'GROUND', 'USPS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TrackingIdType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.TrackingIdType is not None or
            self.FormId is not None or
            self.UspsApplicationId is not None or
            self.TrackingNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackingId', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackingId')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackingId':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackingId')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackingId', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackingId'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackingId', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TrackingIdType is not None:
            namespaceprefix_ = self.TrackingIdType_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingIdType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTrackingIdType>%s</%sTrackingIdType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TrackingIdType), input_name='TrackingIdType')), namespaceprefix_ , eol_))
        if self.FormId is not None:
            namespaceprefix_ = self.FormId_nsprefix_ + ':' if (UseCapturedNS_ and self.FormId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormId>%s</%sFormId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FormId), input_name='FormId')), namespaceprefix_ , eol_))
        if self.UspsApplicationId is not None:
            namespaceprefix_ = self.UspsApplicationId_nsprefix_ + ':' if (UseCapturedNS_ and self.UspsApplicationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUspsApplicationId>%s</%sUspsApplicationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UspsApplicationId), input_name='UspsApplicationId')), namespaceprefix_ , eol_))
        if self.TrackingNumber is not None:
            namespaceprefix_ = self.TrackingNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTrackingNumber>%s</%sTrackingNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumber), input_name='TrackingNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TrackingIdType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TrackingIdType')
            value_ = self.gds_validate_string(value_, node, 'TrackingIdType')
            self.TrackingIdType = value_
            self.TrackingIdType_nsprefix_ = child_.prefix
            # validate type TrackingIdType
            self.validate_TrackingIdType(self.TrackingIdType)
        elif nodeName_ == 'FormId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FormId')
            value_ = self.gds_validate_string(value_, node, 'FormId')
            self.FormId = value_
            self.FormId_nsprefix_ = child_.prefix
        elif nodeName_ == 'UspsApplicationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UspsApplicationId')
            value_ = self.gds_validate_string(value_, node, 'UspsApplicationId')
            self.UspsApplicationId = value_
            self.UspsApplicationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'TrackingNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TrackingNumber')
            value_ = self.gds_validate_string(value_, node, 'TrackingNumber')
            self.TrackingNumber = value_
            self.TrackingNumber_nsprefix_ = child_.prefix
# end class TrackingId


class TransactionDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CustomerTransactionId=None, Localization=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CustomerTransactionId = CustomerTransactionId
        self.CustomerTransactionId_nsprefix_ = None
        self.Localization = Localization
        self.Localization_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransactionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransactionDetail.subclass:
            return TransactionDetail.subclass(*args_, **kwargs_)
        else:
            return TransactionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CustomerTransactionId(self):
        return self.CustomerTransactionId
    def set_CustomerTransactionId(self, CustomerTransactionId):
        self.CustomerTransactionId = CustomerTransactionId
    def get_Localization(self):
        return self.Localization
    def set_Localization(self, Localization):
        self.Localization = Localization
    def hasContent_(self):
        if (
            self.CustomerTransactionId is not None or
            self.Localization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TransactionDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransactionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransactionDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransactionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransactionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TransactionDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TransactionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomerTransactionId is not None:
            namespaceprefix_ = self.CustomerTransactionId_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerTransactionId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomerTransactionId>%s</%sCustomerTransactionId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomerTransactionId), input_name='CustomerTransactionId')), namespaceprefix_ , eol_))
        if self.Localization is not None:
            namespaceprefix_ = self.Localization_nsprefix_ + ':' if (UseCapturedNS_ and self.Localization_nsprefix_) else ''
            self.Localization.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Localization', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CustomerTransactionId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomerTransactionId')
            value_ = self.gds_validate_string(value_, node, 'CustomerTransactionId')
            self.CustomerTransactionId = value_
            self.CustomerTransactionId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
# end class TransactionDetail


class UploadDocumentReferenceDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LineNumber=None, CustomerReference=None, Description=None, DocumentProducer=None, DocumentType=None, DocumentId=None, DocumentIdProducer=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.LineNumber = LineNumber
        self.LineNumber_nsprefix_ = None
        self.CustomerReference = CustomerReference
        self.CustomerReference_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.DocumentProducer = DocumentProducer
        self.validate_UploadDocumentProducerType(self.DocumentProducer)
        self.DocumentProducer_nsprefix_ = None
        self.DocumentType = DocumentType
        self.validate_UploadDocumentType(self.DocumentType)
        self.DocumentType_nsprefix_ = None
        self.DocumentId = DocumentId
        self.DocumentId_nsprefix_ = None
        self.DocumentIdProducer = DocumentIdProducer
        self.validate_UploadDocumentIdProducer(self.DocumentIdProducer)
        self.DocumentIdProducer_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UploadDocumentReferenceDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UploadDocumentReferenceDetail.subclass:
            return UploadDocumentReferenceDetail.subclass(*args_, **kwargs_)
        else:
            return UploadDocumentReferenceDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LineNumber(self):
        return self.LineNumber
    def set_LineNumber(self, LineNumber):
        self.LineNumber = LineNumber
    def get_CustomerReference(self):
        return self.CustomerReference
    def set_CustomerReference(self, CustomerReference):
        self.CustomerReference = CustomerReference
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_DocumentProducer(self):
        return self.DocumentProducer
    def set_DocumentProducer(self, DocumentProducer):
        self.DocumentProducer = DocumentProducer
    def get_DocumentType(self):
        return self.DocumentType
    def set_DocumentType(self, DocumentType):
        self.DocumentType = DocumentType
    def get_DocumentId(self):
        return self.DocumentId
    def set_DocumentId(self, DocumentId):
        self.DocumentId = DocumentId
    def get_DocumentIdProducer(self):
        return self.DocumentIdProducer
    def set_DocumentIdProducer(self, DocumentIdProducer):
        self.DocumentIdProducer = DocumentIdProducer
    def validate_UploadDocumentProducerType(self, value):
        result = True
        # Validate type UploadDocumentProducerType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CUSTOMER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on UploadDocumentProducerType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_UploadDocumentType(self, value):
        result = True
        # Validate type UploadDocumentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CERTIFICATE_OF_ORIGIN', 'COMMERCIAL_INVOICE', 'ETD_LABEL', 'NAFTA_CERTIFICATE_OF_ORIGIN', 'NET_RATE_SHEET', 'OTHER', 'PRO_FORMA_INVOICE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on UploadDocumentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_UploadDocumentIdProducer(self, value):
        result = True
        # Validate type UploadDocumentIdProducer, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CUSTOMER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on UploadDocumentIdProducer' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.LineNumber is not None or
            self.CustomerReference is not None or
            self.Description is not None or
            self.DocumentProducer is not None or
            self.DocumentType is not None or
            self.DocumentId is not None or
            self.DocumentIdProducer is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='UploadDocumentReferenceDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UploadDocumentReferenceDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UploadDocumentReferenceDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UploadDocumentReferenceDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UploadDocumentReferenceDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='UploadDocumentReferenceDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='UploadDocumentReferenceDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineNumber is not None:
            namespaceprefix_ = self.LineNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.LineNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLineNumber>%s</%sLineNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.LineNumber, input_name='LineNumber'), namespaceprefix_ , eol_))
        if self.CustomerReference is not None:
            namespaceprefix_ = self.CustomerReference_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomerReference>%s</%sCustomerReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomerReference), input_name='CustomerReference')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.DocumentProducer is not None:
            namespaceprefix_ = self.DocumentProducer_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentProducer_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentProducer>%s</%sDocumentProducer>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentProducer), input_name='DocumentProducer')), namespaceprefix_ , eol_))
        if self.DocumentType is not None:
            namespaceprefix_ = self.DocumentType_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentType>%s</%sDocumentType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentType), input_name='DocumentType')), namespaceprefix_ , eol_))
        if self.DocumentId is not None:
            namespaceprefix_ = self.DocumentId_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentId>%s</%sDocumentId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentId), input_name='DocumentId')), namespaceprefix_ , eol_))
        if self.DocumentIdProducer is not None:
            namespaceprefix_ = self.DocumentIdProducer_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentIdProducer_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentIdProducer>%s</%sDocumentIdProducer>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentIdProducer), input_name='DocumentIdProducer')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LineNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'LineNumber')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'LineNumber')
            self.LineNumber = ival_
            self.LineNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'CustomerReference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomerReference')
            value_ = self.gds_validate_string(value_, node, 'CustomerReference')
            self.CustomerReference = value_
            self.CustomerReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'DocumentProducer':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocumentProducer')
            value_ = self.gds_validate_string(value_, node, 'DocumentProducer')
            self.DocumentProducer = value_
            self.DocumentProducer_nsprefix_ = child_.prefix
            # validate type UploadDocumentProducerType
            self.validate_UploadDocumentProducerType(self.DocumentProducer)
        elif nodeName_ == 'DocumentType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocumentType')
            value_ = self.gds_validate_string(value_, node, 'DocumentType')
            self.DocumentType = value_
            self.DocumentType_nsprefix_ = child_.prefix
            # validate type UploadDocumentType
            self.validate_UploadDocumentType(self.DocumentType)
        elif nodeName_ == 'DocumentId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocumentId')
            value_ = self.gds_validate_string(value_, node, 'DocumentId')
            self.DocumentId = value_
            self.DocumentId_nsprefix_ = child_.prefix
        elif nodeName_ == 'DocumentIdProducer':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocumentIdProducer')
            value_ = self.gds_validate_string(value_, node, 'DocumentIdProducer')
            self.DocumentIdProducer = value_
            self.DocumentIdProducer_nsprefix_ = child_.prefix
            # validate type UploadDocumentIdProducer
            self.validate_UploadDocumentIdProducer(self.DocumentIdProducer)
# end class UploadDocumentReferenceDetail


class ValidateShipmentRequest(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, RequestedShipment=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.WebAuthenticationDetail_nsprefix_ = None
        self.ClientDetail = ClientDetail
        self.ClientDetail_nsprefix_ = None
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = None
        self.Version = Version
        self.Version_nsprefix_ = None
        self.RequestedShipment = RequestedShipment
        self.RequestedShipment_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ValidateShipmentRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ValidateShipmentRequest.subclass:
            return ValidateShipmentRequest.subclass(*args_, **kwargs_)
        else:
            return ValidateShipmentRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_WebAuthenticationDetail(self):
        return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail):
        self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self):
        return self.ClientDetail
    def set_ClientDetail(self, ClientDetail):
        self.ClientDetail = ClientDetail
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_RequestedShipment(self):
        return self.RequestedShipment
    def set_RequestedShipment(self, RequestedShipment):
        self.RequestedShipment = RequestedShipment
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.RequestedShipment is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ValidateShipmentRequest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ValidateShipmentRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ValidateShipmentRequest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ValidateShipmentRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ValidateShipmentRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ValidateShipmentRequest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ValidateShipmentRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WebAuthenticationDetail is not None:
            namespaceprefix_ = self.WebAuthenticationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.WebAuthenticationDetail_nsprefix_) else ''
            self.WebAuthenticationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WebAuthenticationDetail', pretty_print=pretty_print)
        if self.ClientDetail is not None:
            namespaceprefix_ = self.ClientDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientDetail_nsprefix_) else ''
            self.ClientDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClientDetail', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        if self.RequestedShipment is not None:
            namespaceprefix_ = self.RequestedShipment_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestedShipment_nsprefix_) else ''
            self.RequestedShipment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RequestedShipment', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WebAuthenticationDetail = obj_
            obj_.original_tagname_ = 'WebAuthenticationDetail'
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClientDetail = obj_
            obj_.original_tagname_ = 'ClientDetail'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'RequestedShipment':
            obj_ = RequestedShipment.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RequestedShipment = obj_
            obj_.original_tagname_ = 'RequestedShipment'
# end class ValidateShipmentRequest


class ValidatedHazardousCommodityContent(GeneratedsSuper):
    """Documents the kind and quantity of an individual hazardous commodity in
    a package."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Description=None, Quantity=None, MassPoints=None, Options=None, NetExplosiveDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.Quantity = Quantity
        self.Quantity_nsprefix_ = None
        self.MassPoints = MassPoints
        self.MassPoints_nsprefix_ = None
        self.Options = Options
        self.Options_nsprefix_ = None
        self.NetExplosiveDetail = NetExplosiveDetail
        self.NetExplosiveDetail_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ValidatedHazardousCommodityContent)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ValidatedHazardousCommodityContent.subclass:
            return ValidatedHazardousCommodityContent.subclass(*args_, **kwargs_)
        else:
            return ValidatedHazardousCommodityContent(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_MassPoints(self):
        return self.MassPoints
    def set_MassPoints(self, MassPoints):
        self.MassPoints = MassPoints
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def get_NetExplosiveDetail(self):
        return self.NetExplosiveDetail
    def set_NetExplosiveDetail(self, NetExplosiveDetail):
        self.NetExplosiveDetail = NetExplosiveDetail
    def hasContent_(self):
        if (
            self.Description is not None or
            self.Quantity is not None or
            self.MassPoints is not None or
            self.Options is not None or
            self.NetExplosiveDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ValidatedHazardousCommodityContent', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ValidatedHazardousCommodityContent')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ValidatedHazardousCommodityContent':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ValidatedHazardousCommodityContent')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ValidatedHazardousCommodityContent', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ValidatedHazardousCommodityContent'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ValidatedHazardousCommodityContent', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            self.Description.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Description', pretty_print=pretty_print)
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            self.Quantity.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Quantity', pretty_print=pretty_print)
        if self.MassPoints is not None:
            namespaceprefix_ = self.MassPoints_nsprefix_ + ':' if (UseCapturedNS_ and self.MassPoints_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMassPoints>%s</%sMassPoints>%s' % (namespaceprefix_ , self.gds_format_decimal(self.MassPoints, input_name='MassPoints'), namespaceprefix_ , eol_))
        if self.Options is not None:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            self.Options.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Options', pretty_print=pretty_print)
        if self.NetExplosiveDetail is not None:
            namespaceprefix_ = self.NetExplosiveDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.NetExplosiveDetail_nsprefix_) else ''
            self.NetExplosiveDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NetExplosiveDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Description':
            obj_ = ValidatedHazardousCommodityDescription.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Description = obj_
            obj_.original_tagname_ = 'Description'
        elif nodeName_ == 'Quantity':
            obj_ = HazardousCommodityQuantityDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Quantity = obj_
            obj_.original_tagname_ = 'Quantity'
        elif nodeName_ == 'MassPoints' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'MassPoints')
            fval_ = self.gds_validate_decimal(fval_, node, 'MassPoints')
            self.MassPoints = fval_
            self.MassPoints_nsprefix_ = child_.prefix
        elif nodeName_ == 'Options':
            obj_ = HazardousCommodityOptionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Options = obj_
            obj_.original_tagname_ = 'Options'
        elif nodeName_ == 'NetExplosiveDetail':
            obj_ = NetExplosiveDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NetExplosiveDetail = obj_
            obj_.original_tagname_ = 'NetExplosiveDetail'
# end class ValidatedHazardousCommodityContent


class ValidatedHazardousCommodityDescription(GeneratedsSuper):
    """Identifies and describes an individual hazardous commodity. For 201001
    load, this is based on data from the FedEx Ground Hazardous Materials
    Shipping Guide."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, SequenceNumber=None, PackingGroup=None, PackingInstructions=None, ProperShippingName=None, ProperShippingNameAndDescription=None, TechnicalName=None, HazardClass=None, SubsidiaryClasses=None, Symbols=None, TunnelRestrictionCode=None, SpecialProvisions=None, Attributes=None, Authorization=None, LabelText=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Id = Id
        self.Id_nsprefix_ = None
        self.SequenceNumber = SequenceNumber
        self.SequenceNumber_nsprefix_ = None
        self.PackingGroup = PackingGroup
        self.validate_HazardousCommodityPackingGroupType(self.PackingGroup)
        self.PackingGroup_nsprefix_ = None
        self.PackingInstructions = PackingInstructions
        self.PackingInstructions_nsprefix_ = None
        self.ProperShippingName = ProperShippingName
        self.ProperShippingName_nsprefix_ = None
        self.ProperShippingNameAndDescription = ProperShippingNameAndDescription
        self.ProperShippingNameAndDescription_nsprefix_ = None
        self.TechnicalName = TechnicalName
        self.TechnicalName_nsprefix_ = None
        self.HazardClass = HazardClass
        self.HazardClass_nsprefix_ = None
        if SubsidiaryClasses is None:
            self.SubsidiaryClasses = []
        else:
            self.SubsidiaryClasses = SubsidiaryClasses
        self.SubsidiaryClasses_nsprefix_ = None
        self.Symbols = Symbols
        self.Symbols_nsprefix_ = None
        self.TunnelRestrictionCode = TunnelRestrictionCode
        self.TunnelRestrictionCode_nsprefix_ = None
        self.SpecialProvisions = SpecialProvisions
        self.SpecialProvisions_nsprefix_ = None
        if Attributes is None:
            self.Attributes = []
        else:
            self.Attributes = Attributes
        self.Attributes_nsprefix_ = None
        self.Authorization = Authorization
        self.Authorization_nsprefix_ = None
        self.LabelText = LabelText
        self.LabelText_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ValidatedHazardousCommodityDescription)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ValidatedHazardousCommodityDescription.subclass:
            return ValidatedHazardousCommodityDescription.subclass(*args_, **kwargs_)
        else:
            return ValidatedHazardousCommodityDescription(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_SequenceNumber(self):
        return self.SequenceNumber
    def set_SequenceNumber(self, SequenceNumber):
        self.SequenceNumber = SequenceNumber
    def get_PackingGroup(self):
        return self.PackingGroup
    def set_PackingGroup(self, PackingGroup):
        self.PackingGroup = PackingGroup
    def get_PackingInstructions(self):
        return self.PackingInstructions
    def set_PackingInstructions(self, PackingInstructions):
        self.PackingInstructions = PackingInstructions
    def get_ProperShippingName(self):
        return self.ProperShippingName
    def set_ProperShippingName(self, ProperShippingName):
        self.ProperShippingName = ProperShippingName
    def get_ProperShippingNameAndDescription(self):
        return self.ProperShippingNameAndDescription
    def set_ProperShippingNameAndDescription(self, ProperShippingNameAndDescription):
        self.ProperShippingNameAndDescription = ProperShippingNameAndDescription
    def get_TechnicalName(self):
        return self.TechnicalName
    def set_TechnicalName(self, TechnicalName):
        self.TechnicalName = TechnicalName
    def get_HazardClass(self):
        return self.HazardClass
    def set_HazardClass(self, HazardClass):
        self.HazardClass = HazardClass
    def get_SubsidiaryClasses(self):
        return self.SubsidiaryClasses
    def set_SubsidiaryClasses(self, SubsidiaryClasses):
        self.SubsidiaryClasses = SubsidiaryClasses
    def add_SubsidiaryClasses(self, value):
        self.SubsidiaryClasses.append(value)
    def insert_SubsidiaryClasses_at(self, index, value):
        self.SubsidiaryClasses.insert(index, value)
    def replace_SubsidiaryClasses_at(self, index, value):
        self.SubsidiaryClasses[index] = value
    def get_Symbols(self):
        return self.Symbols
    def set_Symbols(self, Symbols):
        self.Symbols = Symbols
    def get_TunnelRestrictionCode(self):
        return self.TunnelRestrictionCode
    def set_TunnelRestrictionCode(self, TunnelRestrictionCode):
        self.TunnelRestrictionCode = TunnelRestrictionCode
    def get_SpecialProvisions(self):
        return self.SpecialProvisions
    def set_SpecialProvisions(self, SpecialProvisions):
        self.SpecialProvisions = SpecialProvisions
    def get_Attributes(self):
        return self.Attributes
    def set_Attributes(self, Attributes):
        self.Attributes = Attributes
    def add_Attributes(self, value):
        self.Attributes.append(value)
    def insert_Attributes_at(self, index, value):
        self.Attributes.insert(index, value)
    def replace_Attributes_at(self, index, value):
        self.Attributes[index] = value
    def get_Authorization(self):
        return self.Authorization
    def set_Authorization(self, Authorization):
        self.Authorization = Authorization
    def get_LabelText(self):
        return self.LabelText
    def set_LabelText(self, LabelText):
        self.LabelText = LabelText
    def validate_HazardousCommodityPackingGroupType(self, value):
        result = True
        # Validate type HazardousCommodityPackingGroupType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DEFAULT', 'I', 'II', 'III']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on HazardousCommodityPackingGroupType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_HazardousCommodityAttributeType(self, value):
        result = True
        # Validate type HazardousCommodityAttributeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['NOT_SUBJECT_TO_REGULATIONS', 'PLACARDED_VEHICLE_REQUIRED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on HazardousCommodityAttributeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Id is not None or
            self.SequenceNumber is not None or
            self.PackingGroup is not None or
            self.PackingInstructions is not None or
            self.ProperShippingName is not None or
            self.ProperShippingNameAndDescription is not None or
            self.TechnicalName is not None or
            self.HazardClass is not None or
            self.SubsidiaryClasses or
            self.Symbols is not None or
            self.TunnelRestrictionCode is not None or
            self.SpecialProvisions is not None or
            self.Attributes or
            self.Authorization is not None or
            self.LabelText is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ValidatedHazardousCommodityDescription', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ValidatedHazardousCommodityDescription')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ValidatedHazardousCommodityDescription':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ValidatedHazardousCommodityDescription')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ValidatedHazardousCommodityDescription', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ValidatedHazardousCommodityDescription'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ValidatedHazardousCommodityDescription', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Id is not None:
            namespaceprefix_ = self.Id_nsprefix_ + ':' if (UseCapturedNS_ and self.Id_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sId>%s</%sId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), namespaceprefix_ , eol_))
        if self.SequenceNumber is not None:
            namespaceprefix_ = self.SequenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.SequenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSequenceNumber>%s</%sSequenceNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.SequenceNumber, input_name='SequenceNumber'), namespaceprefix_ , eol_))
        if self.PackingGroup is not None:
            namespaceprefix_ = self.PackingGroup_nsprefix_ + ':' if (UseCapturedNS_ and self.PackingGroup_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingGroup>%s</%sPackingGroup>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PackingGroup), input_name='PackingGroup')), namespaceprefix_ , eol_))
        if self.PackingInstructions is not None:
            namespaceprefix_ = self.PackingInstructions_nsprefix_ + ':' if (UseCapturedNS_ and self.PackingInstructions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackingInstructions>%s</%sPackingInstructions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PackingInstructions), input_name='PackingInstructions')), namespaceprefix_ , eol_))
        if self.ProperShippingName is not None:
            namespaceprefix_ = self.ProperShippingName_nsprefix_ + ':' if (UseCapturedNS_ and self.ProperShippingName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProperShippingName>%s</%sProperShippingName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProperShippingName), input_name='ProperShippingName')), namespaceprefix_ , eol_))
        if self.ProperShippingNameAndDescription is not None:
            namespaceprefix_ = self.ProperShippingNameAndDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.ProperShippingNameAndDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProperShippingNameAndDescription>%s</%sProperShippingNameAndDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProperShippingNameAndDescription), input_name='ProperShippingNameAndDescription')), namespaceprefix_ , eol_))
        if self.TechnicalName is not None:
            namespaceprefix_ = self.TechnicalName_nsprefix_ + ':' if (UseCapturedNS_ and self.TechnicalName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTechnicalName>%s</%sTechnicalName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TechnicalName), input_name='TechnicalName')), namespaceprefix_ , eol_))
        if self.HazardClass is not None:
            namespaceprefix_ = self.HazardClass_nsprefix_ + ':' if (UseCapturedNS_ and self.HazardClass_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHazardClass>%s</%sHazardClass>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HazardClass), input_name='HazardClass')), namespaceprefix_ , eol_))
        for SubsidiaryClasses_ in self.SubsidiaryClasses:
            namespaceprefix_ = self.SubsidiaryClasses_nsprefix_ + ':' if (UseCapturedNS_ and self.SubsidiaryClasses_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSubsidiaryClasses>%s</%sSubsidiaryClasses>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(SubsidiaryClasses_), input_name='SubsidiaryClasses')), namespaceprefix_ , eol_))
        if self.Symbols is not None:
            namespaceprefix_ = self.Symbols_nsprefix_ + ':' if (UseCapturedNS_ and self.Symbols_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSymbols>%s</%sSymbols>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Symbols), input_name='Symbols')), namespaceprefix_ , eol_))
        if self.TunnelRestrictionCode is not None:
            namespaceprefix_ = self.TunnelRestrictionCode_nsprefix_ + ':' if (UseCapturedNS_ and self.TunnelRestrictionCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTunnelRestrictionCode>%s</%sTunnelRestrictionCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TunnelRestrictionCode), input_name='TunnelRestrictionCode')), namespaceprefix_ , eol_))
        if self.SpecialProvisions is not None:
            namespaceprefix_ = self.SpecialProvisions_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialProvisions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialProvisions>%s</%sSpecialProvisions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SpecialProvisions), input_name='SpecialProvisions')), namespaceprefix_ , eol_))
        for Attributes_ in self.Attributes:
            namespaceprefix_ = self.Attributes_nsprefix_ + ':' if (UseCapturedNS_ and self.Attributes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttributes>%s</%sAttributes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Attributes_), input_name='Attributes')), namespaceprefix_ , eol_))
        if self.Authorization is not None:
            namespaceprefix_ = self.Authorization_nsprefix_ + ':' if (UseCapturedNS_ and self.Authorization_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthorization>%s</%sAuthorization>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Authorization), input_name='Authorization')), namespaceprefix_ , eol_))
        if self.LabelText is not None:
            namespaceprefix_ = self.LabelText_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelText_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelText>%s</%sLabelText>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LabelText), input_name='LabelText')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Id':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Id')
            value_ = self.gds_validate_string(value_, node, 'Id')
            self.Id = value_
            self.Id_nsprefix_ = child_.prefix
        elif nodeName_ == 'SequenceNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'SequenceNumber')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'SequenceNumber')
            self.SequenceNumber = ival_
            self.SequenceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'PackingGroup':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackingGroup')
            value_ = self.gds_validate_string(value_, node, 'PackingGroup')
            self.PackingGroup = value_
            self.PackingGroup_nsprefix_ = child_.prefix
            # validate type HazardousCommodityPackingGroupType
            self.validate_HazardousCommodityPackingGroupType(self.PackingGroup)
        elif nodeName_ == 'PackingInstructions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackingInstructions')
            value_ = self.gds_validate_string(value_, node, 'PackingInstructions')
            self.PackingInstructions = value_
            self.PackingInstructions_nsprefix_ = child_.prefix
        elif nodeName_ == 'ProperShippingName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProperShippingName')
            value_ = self.gds_validate_string(value_, node, 'ProperShippingName')
            self.ProperShippingName = value_
            self.ProperShippingName_nsprefix_ = child_.prefix
        elif nodeName_ == 'ProperShippingNameAndDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProperShippingNameAndDescription')
            value_ = self.gds_validate_string(value_, node, 'ProperShippingNameAndDescription')
            self.ProperShippingNameAndDescription = value_
            self.ProperShippingNameAndDescription_nsprefix_ = child_.prefix
        elif nodeName_ == 'TechnicalName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TechnicalName')
            value_ = self.gds_validate_string(value_, node, 'TechnicalName')
            self.TechnicalName = value_
            self.TechnicalName_nsprefix_ = child_.prefix
        elif nodeName_ == 'HazardClass':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HazardClass')
            value_ = self.gds_validate_string(value_, node, 'HazardClass')
            self.HazardClass = value_
            self.HazardClass_nsprefix_ = child_.prefix
        elif nodeName_ == 'SubsidiaryClasses':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SubsidiaryClasses')
            value_ = self.gds_validate_string(value_, node, 'SubsidiaryClasses')
            self.SubsidiaryClasses.append(value_)
            self.SubsidiaryClasses_nsprefix_ = child_.prefix
        elif nodeName_ == 'Symbols':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Symbols')
            value_ = self.gds_validate_string(value_, node, 'Symbols')
            self.Symbols = value_
            self.Symbols_nsprefix_ = child_.prefix
        elif nodeName_ == 'TunnelRestrictionCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TunnelRestrictionCode')
            value_ = self.gds_validate_string(value_, node, 'TunnelRestrictionCode')
            self.TunnelRestrictionCode = value_
            self.TunnelRestrictionCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'SpecialProvisions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecialProvisions')
            value_ = self.gds_validate_string(value_, node, 'SpecialProvisions')
            self.SpecialProvisions = value_
            self.SpecialProvisions_nsprefix_ = child_.prefix
        elif nodeName_ == 'Attributes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Attributes')
            value_ = self.gds_validate_string(value_, node, 'Attributes')
            self.Attributes.append(value_)
            self.Attributes_nsprefix_ = child_.prefix
            # validate type HazardousCommodityAttributeType
            self.validate_HazardousCommodityAttributeType(self.Attributes[-1])
        elif nodeName_ == 'Authorization':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Authorization')
            value_ = self.gds_validate_string(value_, node, 'Authorization')
            self.Authorization = value_
            self.Authorization_nsprefix_ = child_.prefix
        elif nodeName_ == 'LabelText':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelText')
            value_ = self.gds_validate_string(value_, node, 'LabelText')
            self.LabelText = value_
            self.LabelText_nsprefix_ = child_.prefix
# end class ValidatedHazardousCommodityDescription


class ValidatedHazardousContainer(GeneratedsSuper):
    """Specifies the concept of a container used to package dangerous goods
    commodities."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, QValue=None, HazardousCommodities=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.QValue = QValue
        self.QValue_nsprefix_ = None
        if HazardousCommodities is None:
            self.HazardousCommodities = []
        else:
            self.HazardousCommodities = HazardousCommodities
        self.HazardousCommodities_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ValidatedHazardousContainer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ValidatedHazardousContainer.subclass:
            return ValidatedHazardousContainer.subclass(*args_, **kwargs_)
        else:
            return ValidatedHazardousContainer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_QValue(self):
        return self.QValue
    def set_QValue(self, QValue):
        self.QValue = QValue
    def get_HazardousCommodities(self):
        return self.HazardousCommodities
    def set_HazardousCommodities(self, HazardousCommodities):
        self.HazardousCommodities = HazardousCommodities
    def add_HazardousCommodities(self, value):
        self.HazardousCommodities.append(value)
    def insert_HazardousCommodities_at(self, index, value):
        self.HazardousCommodities.insert(index, value)
    def replace_HazardousCommodities_at(self, index, value):
        self.HazardousCommodities[index] = value
    def hasContent_(self):
        if (
            self.QValue is not None or
            self.HazardousCommodities
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ValidatedHazardousContainer', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ValidatedHazardousContainer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ValidatedHazardousContainer':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ValidatedHazardousContainer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ValidatedHazardousContainer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ValidatedHazardousContainer'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ValidatedHazardousContainer', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.QValue is not None:
            namespaceprefix_ = self.QValue_nsprefix_ + ':' if (UseCapturedNS_ and self.QValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQValue>%s</%sQValue>%s' % (namespaceprefix_ , self.gds_format_decimal(self.QValue, input_name='QValue'), namespaceprefix_ , eol_))
        for HazardousCommodities_ in self.HazardousCommodities:
            namespaceprefix_ = self.HazardousCommodities_nsprefix_ + ':' if (UseCapturedNS_ and self.HazardousCommodities_nsprefix_) else ''
            HazardousCommodities_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HazardousCommodities', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'QValue' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'QValue')
            fval_ = self.gds_validate_decimal(fval_, node, 'QValue')
            self.QValue = fval_
            self.QValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'HazardousCommodities':
            obj_ = ValidatedHazardousCommodityContent.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HazardousCommodities.append(obj_)
            obj_.original_tagname_ = 'HazardousCommodities'
# end class ValidatedHazardousContainer


class VariableHandlingChargeDetail(GeneratedsSuper):
    """This definition of variable handling charge detail is intended for use
    in Jan 2011 corp load."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FixedValue=None, PercentValue=None, RateElementBasis=None, RateTypeBasis=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.FixedValue = FixedValue
        self.FixedValue_nsprefix_ = None
        self.PercentValue = PercentValue
        self.PercentValue_nsprefix_ = None
        self.RateElementBasis = RateElementBasis
        self.validate_RateElementBasisType(self.RateElementBasis)
        self.RateElementBasis_nsprefix_ = None
        self.RateTypeBasis = RateTypeBasis
        self.validate_RateTypeBasisType(self.RateTypeBasis)
        self.RateTypeBasis_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VariableHandlingChargeDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VariableHandlingChargeDetail.subclass:
            return VariableHandlingChargeDetail.subclass(*args_, **kwargs_)
        else:
            return VariableHandlingChargeDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FixedValue(self):
        return self.FixedValue
    def set_FixedValue(self, FixedValue):
        self.FixedValue = FixedValue
    def get_PercentValue(self):
        return self.PercentValue
    def set_PercentValue(self, PercentValue):
        self.PercentValue = PercentValue
    def get_RateElementBasis(self):
        return self.RateElementBasis
    def set_RateElementBasis(self, RateElementBasis):
        self.RateElementBasis = RateElementBasis
    def get_RateTypeBasis(self):
        return self.RateTypeBasis
    def set_RateTypeBasis(self, RateTypeBasis):
        self.RateTypeBasis = RateTypeBasis
    def validate_RateElementBasisType(self, value):
        result = True
        # Validate type RateElementBasisType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BASE_CHARGE', 'NET_CHARGE', 'NET_CHARGE_EXCLUDING_TAXES', 'NET_FREIGHT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RateElementBasisType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_RateTypeBasisType(self, value):
        result = True
        # Validate type RateTypeBasisType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACCOUNT', 'LIST']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RateTypeBasisType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.FixedValue is not None or
            self.PercentValue is not None or
            self.RateElementBasis is not None or
            self.RateTypeBasis is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='VariableHandlingChargeDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VariableHandlingChargeDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'VariableHandlingChargeDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='VariableHandlingChargeDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='VariableHandlingChargeDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='VariableHandlingChargeDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='VariableHandlingChargeDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FixedValue is not None:
            namespaceprefix_ = self.FixedValue_nsprefix_ + ':' if (UseCapturedNS_ and self.FixedValue_nsprefix_) else ''
            self.FixedValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FixedValue', pretty_print=pretty_print)
        if self.PercentValue is not None:
            namespaceprefix_ = self.PercentValue_nsprefix_ + ':' if (UseCapturedNS_ and self.PercentValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPercentValue>%s</%sPercentValue>%s' % (namespaceprefix_ , self.gds_format_decimal(self.PercentValue, input_name='PercentValue'), namespaceprefix_ , eol_))
        if self.RateElementBasis is not None:
            namespaceprefix_ = self.RateElementBasis_nsprefix_ + ':' if (UseCapturedNS_ and self.RateElementBasis_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateElementBasis>%s</%sRateElementBasis>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateElementBasis), input_name='RateElementBasis')), namespaceprefix_ , eol_))
        if self.RateTypeBasis is not None:
            namespaceprefix_ = self.RateTypeBasis_nsprefix_ + ':' if (UseCapturedNS_ and self.RateTypeBasis_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateTypeBasis>%s</%sRateTypeBasis>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateTypeBasis), input_name='RateTypeBasis')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FixedValue':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FixedValue = obj_
            obj_.original_tagname_ = 'FixedValue'
        elif nodeName_ == 'PercentValue' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'PercentValue')
            fval_ = self.gds_validate_decimal(fval_, node, 'PercentValue')
            self.PercentValue = fval_
            self.PercentValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'RateElementBasis':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RateElementBasis')
            value_ = self.gds_validate_string(value_, node, 'RateElementBasis')
            self.RateElementBasis = value_
            self.RateElementBasis_nsprefix_ = child_.prefix
            # validate type RateElementBasisType
            self.validate_RateElementBasisType(self.RateElementBasis)
        elif nodeName_ == 'RateTypeBasis':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RateTypeBasis')
            value_ = self.gds_validate_string(value_, node, 'RateTypeBasis')
            self.RateTypeBasis = value_
            self.RateTypeBasis_nsprefix_ = child_.prefix
            # validate type RateTypeBasisType
            self.validate_RateTypeBasisType(self.RateTypeBasis)
# end class VariableHandlingChargeDetail


class VariableHandlingCharges(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, VariableHandlingCharge=None, FixedVariableHandlingCharge=None, PercentVariableHandlingCharge=None, TotalCustomerCharge=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.VariableHandlingCharge = VariableHandlingCharge
        self.VariableHandlingCharge_nsprefix_ = None
        self.FixedVariableHandlingCharge = FixedVariableHandlingCharge
        self.FixedVariableHandlingCharge_nsprefix_ = None
        self.PercentVariableHandlingCharge = PercentVariableHandlingCharge
        self.PercentVariableHandlingCharge_nsprefix_ = None
        self.TotalCustomerCharge = TotalCustomerCharge
        self.TotalCustomerCharge_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VariableHandlingCharges)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VariableHandlingCharges.subclass:
            return VariableHandlingCharges.subclass(*args_, **kwargs_)
        else:
            return VariableHandlingCharges(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_VariableHandlingCharge(self):
        return self.VariableHandlingCharge
    def set_VariableHandlingCharge(self, VariableHandlingCharge):
        self.VariableHandlingCharge = VariableHandlingCharge
    def get_FixedVariableHandlingCharge(self):
        return self.FixedVariableHandlingCharge
    def set_FixedVariableHandlingCharge(self, FixedVariableHandlingCharge):
        self.FixedVariableHandlingCharge = FixedVariableHandlingCharge
    def get_PercentVariableHandlingCharge(self):
        return self.PercentVariableHandlingCharge
    def set_PercentVariableHandlingCharge(self, PercentVariableHandlingCharge):
        self.PercentVariableHandlingCharge = PercentVariableHandlingCharge
    def get_TotalCustomerCharge(self):
        return self.TotalCustomerCharge
    def set_TotalCustomerCharge(self, TotalCustomerCharge):
        self.TotalCustomerCharge = TotalCustomerCharge
    def hasContent_(self):
        if (
            self.VariableHandlingCharge is not None or
            self.FixedVariableHandlingCharge is not None or
            self.PercentVariableHandlingCharge is not None or
            self.TotalCustomerCharge is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='VariableHandlingCharges', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VariableHandlingCharges')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'VariableHandlingCharges':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='VariableHandlingCharges')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='VariableHandlingCharges', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='VariableHandlingCharges'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='VariableHandlingCharges', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.VariableHandlingCharge is not None:
            namespaceprefix_ = self.VariableHandlingCharge_nsprefix_ + ':' if (UseCapturedNS_ and self.VariableHandlingCharge_nsprefix_) else ''
            self.VariableHandlingCharge.export(outfile, level, namespaceprefix_, namespacedef_='', name_='VariableHandlingCharge', pretty_print=pretty_print)
        if self.FixedVariableHandlingCharge is not None:
            namespaceprefix_ = self.FixedVariableHandlingCharge_nsprefix_ + ':' if (UseCapturedNS_ and self.FixedVariableHandlingCharge_nsprefix_) else ''
            self.FixedVariableHandlingCharge.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FixedVariableHandlingCharge', pretty_print=pretty_print)
        if self.PercentVariableHandlingCharge is not None:
            namespaceprefix_ = self.PercentVariableHandlingCharge_nsprefix_ + ':' if (UseCapturedNS_ and self.PercentVariableHandlingCharge_nsprefix_) else ''
            self.PercentVariableHandlingCharge.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PercentVariableHandlingCharge', pretty_print=pretty_print)
        if self.TotalCustomerCharge is not None:
            namespaceprefix_ = self.TotalCustomerCharge_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalCustomerCharge_nsprefix_) else ''
            self.TotalCustomerCharge.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalCustomerCharge', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'VariableHandlingCharge':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.VariableHandlingCharge = obj_
            obj_.original_tagname_ = 'VariableHandlingCharge'
        elif nodeName_ == 'FixedVariableHandlingCharge':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FixedVariableHandlingCharge = obj_
            obj_.original_tagname_ = 'FixedVariableHandlingCharge'
        elif nodeName_ == 'PercentVariableHandlingCharge':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PercentVariableHandlingCharge = obj_
            obj_.original_tagname_ = 'PercentVariableHandlingCharge'
        elif nodeName_ == 'TotalCustomerCharge':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalCustomerCharge = obj_
            obj_.original_tagname_ = 'TotalCustomerCharge'
# end class VariableHandlingCharges


class Volume(GeneratedsSuper):
    """Three-dimensional volume/cubic measurement."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Units=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Units = Units
        self.validate_VolumeUnits(self.Units)
        self.Units_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Volume)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Volume.subclass:
            return Volume.subclass(*args_, **kwargs_)
        else:
            return Volume(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Units(self):
        return self.Units
    def set_Units(self, Units):
        self.Units = Units
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def validate_VolumeUnits(self, value):
        result = True
        # Validate type VolumeUnits, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CUBIC_FT', 'CUBIC_M']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on VolumeUnits' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Units is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Volume', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Volume')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Volume':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Volume')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Volume', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Volume'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Volume', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Units is not None:
            namespaceprefix_ = self.Units_nsprefix_ + ':' if (UseCapturedNS_ and self.Units_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnits>%s</%sUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Value, input_name='Value'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Units':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Units')
            value_ = self.gds_validate_string(value_, node, 'Units')
            self.Units = value_
            self.Units_nsprefix_ = child_.prefix
            # validate type VolumeUnits
            self.validate_VolumeUnits(self.Units)
        elif nodeName_ == 'Value' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Value')
            fval_ = self.gds_validate_decimal(fval_, node, 'Value')
            self.Value = fval_
            self.Value_nsprefix_ = child_.prefix
# end class Volume


class Weight(GeneratedsSuper):
    """The descriptive data for the heaviness of an object."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Units=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Units = Units
        self.validate_WeightUnits(self.Units)
        self.Units_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Weight)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Weight.subclass:
            return Weight.subclass(*args_, **kwargs_)
        else:
            return Weight(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Units(self):
        return self.Units
    def set_Units(self, Units):
        self.Units = Units
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def validate_WeightUnits(self, value):
        result = True
        # Validate type WeightUnits, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['KG', 'LB']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on WeightUnits' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Units is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Weight', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Weight')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Weight':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Weight')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Weight', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Weight'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Weight', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Units is not None:
            namespaceprefix_ = self.Units_nsprefix_ + ':' if (UseCapturedNS_ and self.Units_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnits>%s</%sUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Value, input_name='Value'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Units':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Units')
            value_ = self.gds_validate_string(value_, node, 'Units')
            self.Units = value_
            self.Units_nsprefix_ = child_.prefix
            # validate type WeightUnits
            self.validate_WeightUnits(self.Units)
        elif nodeName_ == 'Value' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Value')
            fval_ = self.gds_validate_decimal(fval_, node, 'Value')
            self.Value = fval_
            self.Value_nsprefix_ = child_.prefix
# end class Weight


class WebAuthenticationDetail(GeneratedsSuper):
    """Used in authentication of the sender's identity."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ParentCredential=None, UserCredential=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ParentCredential = ParentCredential
        self.ParentCredential_nsprefix_ = None
        self.UserCredential = UserCredential
        self.UserCredential_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WebAuthenticationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WebAuthenticationDetail.subclass:
            return WebAuthenticationDetail.subclass(*args_, **kwargs_)
        else:
            return WebAuthenticationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ParentCredential(self):
        return self.ParentCredential
    def set_ParentCredential(self, ParentCredential):
        self.ParentCredential = ParentCredential
    def get_UserCredential(self):
        return self.UserCredential
    def set_UserCredential(self, UserCredential):
        self.UserCredential = UserCredential
    def hasContent_(self):
        if (
            self.ParentCredential is not None or
            self.UserCredential is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WebAuthenticationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WebAuthenticationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'WebAuthenticationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='WebAuthenticationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='WebAuthenticationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='WebAuthenticationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WebAuthenticationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ParentCredential is not None:
            namespaceprefix_ = self.ParentCredential_nsprefix_ + ':' if (UseCapturedNS_ and self.ParentCredential_nsprefix_) else ''
            self.ParentCredential.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ParentCredential', pretty_print=pretty_print)
        if self.UserCredential is not None:
            namespaceprefix_ = self.UserCredential_nsprefix_ + ':' if (UseCapturedNS_ and self.UserCredential_nsprefix_) else ''
            self.UserCredential.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UserCredential', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ParentCredential':
            obj_ = WebAuthenticationCredential.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ParentCredential = obj_
            obj_.original_tagname_ = 'ParentCredential'
        elif nodeName_ == 'UserCredential':
            obj_ = WebAuthenticationCredential.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UserCredential = obj_
            obj_.original_tagname_ = 'UserCredential'
# end class WebAuthenticationDetail


class WebAuthenticationCredential(GeneratedsSuper):
    """Two part authentication string used for the sender's identity"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Key=None, Password=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Key = Key
        self.Key_nsprefix_ = None
        self.Password = Password
        self.Password_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WebAuthenticationCredential)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WebAuthenticationCredential.subclass:
            return WebAuthenticationCredential.subclass(*args_, **kwargs_)
        else:
            return WebAuthenticationCredential(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Key(self):
        return self.Key
    def set_Key(self, Key):
        self.Key = Key
    def get_Password(self):
        return self.Password
    def set_Password(self, Password):
        self.Password = Password
    def hasContent_(self):
        if (
            self.Key is not None or
            self.Password is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WebAuthenticationCredential', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WebAuthenticationCredential')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'WebAuthenticationCredential':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='WebAuthenticationCredential')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='WebAuthenticationCredential', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='WebAuthenticationCredential'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WebAuthenticationCredential', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Key is not None:
            namespaceprefix_ = self.Key_nsprefix_ + ':' if (UseCapturedNS_ and self.Key_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sKey>%s</%sKey>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Key), input_name='Key')), namespaceprefix_ , eol_))
        if self.Password is not None:
            namespaceprefix_ = self.Password_nsprefix_ + ':' if (UseCapturedNS_ and self.Password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPassword>%s</%sPassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Password), input_name='Password')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Key':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Key')
            value_ = self.gds_validate_string(value_, node, 'Key')
            self.Key = value_
            self.Key_nsprefix_ = child_.prefix
        elif nodeName_ == 'Password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Password')
            value_ = self.gds_validate_string(value_, node, 'Password')
            self.Password = value_
            self.Password_nsprefix_ = child_.prefix
# end class WebAuthenticationCredential


class VersionId(GeneratedsSuper):
    """Identifies the version/level of a service operation expected by a caller
    (in each request) and performed by the callee (in each reply)."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ServiceId=None, Major=None, Intermediate=None, Minor=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ServiceId = ServiceId
        self.ServiceId_nsprefix_ = None
        self.Major = Major
        self.Major_nsprefix_ = None
        self.Intermediate = Intermediate
        self.Intermediate_nsprefix_ = None
        self.Minor = Minor
        self.Minor_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VersionId)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VersionId.subclass:
            return VersionId.subclass(*args_, **kwargs_)
        else:
            return VersionId(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ServiceId(self):
        return self.ServiceId
    def set_ServiceId(self, ServiceId):
        self.ServiceId = ServiceId
    def get_Major(self):
        return self.Major
    def set_Major(self, Major):
        self.Major = Major
    def get_Intermediate(self):
        return self.Intermediate
    def set_Intermediate(self, Intermediate):
        self.Intermediate = Intermediate
    def get_Minor(self):
        return self.Minor
    def set_Minor(self, Minor):
        self.Minor = Minor
    def hasContent_(self):
        if (
            self.ServiceId is not None or
            self.Major is not None or
            self.Intermediate is not None or
            self.Minor is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='VersionId', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VersionId')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'VersionId':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='VersionId')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='VersionId', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='VersionId'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='VersionId', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceId is not None:
            namespaceprefix_ = self.ServiceId_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceId>%s</%sServiceId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ServiceId), input_name='ServiceId')), namespaceprefix_ , eol_))
        if self.Major is not None:
            namespaceprefix_ = self.Major_nsprefix_ + ':' if (UseCapturedNS_ and self.Major_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMajor>%s</%sMajor>%s' % (namespaceprefix_ , self.gds_format_integer(self.Major, input_name='Major'), namespaceprefix_ , eol_))
        if self.Intermediate is not None:
            namespaceprefix_ = self.Intermediate_nsprefix_ + ':' if (UseCapturedNS_ and self.Intermediate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIntermediate>%s</%sIntermediate>%s' % (namespaceprefix_ , self.gds_format_integer(self.Intermediate, input_name='Intermediate'), namespaceprefix_ , eol_))
        if self.Minor is not None:
            namespaceprefix_ = self.Minor_nsprefix_ + ':' if (UseCapturedNS_ and self.Minor_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMinor>%s</%sMinor>%s' % (namespaceprefix_ , self.gds_format_integer(self.Minor, input_name='Minor'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ServiceId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ServiceId')
            value_ = self.gds_validate_string(value_, node, 'ServiceId')
            self.ServiceId = value_
            self.ServiceId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Major' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Major')
            ival_ = self.gds_validate_integer(ival_, node, 'Major')
            self.Major = ival_
            self.Major_nsprefix_ = child_.prefix
        elif nodeName_ == 'Intermediate' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Intermediate')
            ival_ = self.gds_validate_integer(ival_, node, 'Intermediate')
            self.Intermediate = ival_
            self.Intermediate_nsprefix_ = child_.prefix
        elif nodeName_ == 'Minor' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Minor')
            ival_ = self.gds_validate_integer(ival_, node, 'Minor')
            self.Minor = ival_
            self.Minor_nsprefix_ = child_.prefix
# end class VersionId


GDSClassesMapping = {
    'DeleteShipmentRequest': DeleteShipmentRequest,
    'DeleteTagRequest': DeleteTagRequest,
    'ProcessShipmentReply': ProcessShipmentReply,
    'ProcessShipmentRequest': ProcessShipmentRequest,
    'ProcessTagReply': ProcessTagReply,
    'ProcessTagRequest': ProcessTagRequest,
    'ShipmentReply': ShipmentReply,
    'ValidateShipmentRequest': ValidateShipmentRequest,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def get_required_ns_prefix_defs(rootNode):
    '''Get all name space prefix definitions required in this XML doc.
    Return a dictionary of definitions and a char string of definitions.
    '''
    nsmap = {
        prefix: uri
        for node in rootNode.iter()
        for (prefix, uri) in node.nsmap.items()
        if prefix is not None
    }
    namespacedefs = ' '.join([
        'xmlns:{}="{}"'.format(prefix, uri)
        for prefix, uri in nsmap.items()
    ])
    return nsmap, namespacedefs


def parse(inFileName, silence=False, print_warnings=True):
    global CapturedNsmap_
    gds_collector = GdsCollector_()
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DeleteShipmentRequest'
        rootClass = DeleteShipmentRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    CapturedNsmap_, namespacedefs = get_required_ns_prefix_defs(rootNode)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_=namespacedefs,
            pretty_print=True)
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseEtree(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DeleteShipmentRequest'
        rootClass = DeleteShipmentRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(str(content))
        sys.stdout.write('\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False, print_warnings=True):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    gds_collector = GdsCollector_()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DeleteShipmentRequest'
        rootClass = DeleteShipmentRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if not SaveElementTreeNode:
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:ns="http://fedex.com/ws/ship/v25"')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseLiteral(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DeleteShipmentRequest'
        rootClass = DeleteShipmentRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('#from ship_service_v25 import *\n\n')
        sys.stdout.write('import ship_service_v25 as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

RenameMappings_ = {
}

__all__ = [
    "AdditionalLabelsDetail",
    "Address",
    "AdrLicenseDetail",
    "AlcoholDetail",
    "AncillaryFeeAndTax",
    "AssociatedFreightLineItemDetail",
    "AssociatedShipmentDetail",
    "BatteryClassificationDetail",
    "BinaryBarcode",
    "BrokerDetail",
    "CertificateOfOriginDetail",
    "ClientDetail",
    "CodAddTransportationChargesDetail",
    "CodDetail",
    "CodReturnPackageDetail",
    "CommercialInvoice",
    "CommercialInvoiceDetail",
    "Commodity",
    "CompletedCodDetail",
    "CompletedEtdDetail",
    "CompletedHazardousPackageDetail",
    "CompletedHazardousShipmentDetail",
    "CompletedHazardousSummaryDetail",
    "CompletedHoldAtLocationDetail",
    "CompletedPackageDetail",
    "CompletedShipmentDetail",
    "CompletedSmartPostDetail",
    "CompletedTagDetail",
    "ConfigurableLabelReferenceEntry",
    "Contact",
    "ContactAndAddress",
    "ContentRecord",
    "CurrencyExchangeRate",
    "CustomDeliveryWindowDetail",
    "CustomDocumentDetail",
    "CustomLabelBarcodeEntry",
    "CustomLabelBoxEntry",
    "CustomLabelDetail",
    "CustomLabelGraphicEntry",
    "CustomLabelPosition",
    "CustomLabelTextBoxEntry",
    "CustomLabelTextEntry",
    "CustomerImageUsage",
    "CustomerReference",
    "CustomerSpecifiedLabelDetail",
    "CustomsClearanceDetail",
    "CustomsDeclarationStatementDetail",
    "CustomsOptionDetail",
    "DangerousGoodsContainer",
    "DangerousGoodsDetail",
    "DangerousGoodsShippersDeclarationDetail",
    "DangerousGoodsSignatory",
    "DateRange",
    "DeleteShipmentRequest",
    "DeleteTagRequest",
    "DeliveryOnInvoiceAcceptanceDetail",
    "DestinationControlDetail",
    "Dimensions",
    "DocTabContent",
    "DocTabContentBarcoded",
    "DocTabContentZone001",
    "DocTabZoneSpecification",
    "DocumentFormatOptionsRequested",
    "DocumentGenerationDetail",
    "DocumentRequirementsDetail",
    "EMailDetail",
    "EMailLabelDetail",
    "EMailRecipient",
    "EdtCommodityTax",
    "EdtExciseCondition",
    "EdtTaxDetail",
    "EmailOptionsRequested",
    "EtdDetail",
    "ExportDeclarationDetail",
    "ExportDetail",
    "ExpressFreightDetail",
    "FreightAddressLabelDetail",
    "FreightBaseCharge",
    "FreightBillOfLadingDetail",
    "FreightGuaranteeDetail",
    "FreightRateDetail",
    "FreightRateNotation",
    "FreightShipmentDetail",
    "FreightShipmentLineItem",
    "FreightSpecialServicePayment",
    "GeneralAgencyAgreementDetail",
    "HazardousCommodityContent",
    "HazardousCommodityDescription",
    "HazardousCommodityInnerReceptacleDetail",
    "HazardousCommodityOptionDetail",
    "HazardousCommodityPackagingDetail",
    "HazardousCommodityPackingDetail",
    "HazardousCommodityQuantityDetail",
    "HoldAtLocationDetail",
    "HomeDeliveryPremiumDetail",
    "InternationalControlledExportDetail",
    "InternationalTrafficInArmsRegulationsDetail",
    "LabelSpecification",
    "LiabilityCoverageDetail",
    "LicenseOrPermitDetail",
    "LinearMeasure",
    "Localization",
    "Measure",
    "Message",
    "MessageParameter",
    "Money",
    "NaftaCertificateOfOriginDetail",
    "NaftaCommodityDetail",
    "NaftaLowValueStatementDetail",
    "NaftaProducer",
    "NetExplosiveDetail",
    "Notification",
    "NotificationDetail",
    "NotificationParameter",
    "OfferingIdentifierDetail",
    "Op900Detail",
    "OperationalInstruction",
    "PackageBarcodes",
    "PackageOperationalDetail",
    "PackageRateDetail",
    "PackageRating",
    "PackageSpecialServicesRequested",
    "PackagingDescription",
    "Party",
    "Payment",
    "Payor",
    "PendingShipmentAccessDetail",
    "PendingShipmentAccessorDetail",
    "PendingShipmentDetail",
    "PendingShipmentProcessingOptionsRequested",
    "PickupDetail",
    "PrintedReference",
    "PriorityAlertDetail",
    "ProcessShipmentReply",
    "ProcessShipmentRequest",
    "ProcessTagReply",
    "ProcessTagRequest",
    "ProductName",
    "RadioactivityDetail",
    "RadionuclideActivity",
    "RadionuclideDetail",
    "RateDiscount",
    "Rebate",
    "RecipientCustomsId",
    "RecommendedDocumentSpecification",
    "RegulatoryAdvisoryDetail",
    "RegulatoryLabelContentDetail",
    "RequestedPackageLineItem",
    "RequestedShipment",
    "ReturnAssociationDetail",
    "ReturnEMailDetail",
    "ReturnInstructionsDetail",
    "ReturnShipmentDetail",
    "Rma",
    "ServiceDescription",
    "ShipmentAdvisoryDetail",
    "ShipmentAuthorizationDetail",
    "ShipmentConfigurationData",
    "ShipmentDryIceDetail",
    "ShipmentDryIceProcessingOptionsRequested",
    "ShipmentEventNotificationDetail",
    "ShipmentEventNotificationSpecification",
    "ShipmentLegRateDetail",
    "ShipmentManifestDetail",
    "ShipmentNotificationFormatSpecification",
    "ShipmentOperationalDetail",
    "ShipmentRateDetail",
    "ShipmentRating",
    "ShipmentReply",
    "ShipmentSpecialServicesRequested",
    "ShipperConveyanceDetail",
    "ShippingDocument",
    "ShippingDocumentDispositionDetail",
    "ShippingDocumentEMailDetail",
    "ShippingDocumentEMailRecipient",
    "ShippingDocumentFormat",
    "ShippingDocumentPart",
    "ShippingDocumentPrintDetail",
    "ShippingDocumentSpecification",
    "ShippingDocumentStorageDetail",
    "SignatureOptionDetail",
    "SmartPostShipmentDetail",
    "SmartPostShipmentProcessingOptionsRequested",
    "SpecialServiceDescription",
    "StringBarcode",
    "Surcharge",
    "Tax",
    "TaxpayerIdentification",
    "TrackingId",
    "TransactionDetail",
    "UploadDocumentReferenceDetail",
    "ValidateShipmentRequest",
    "ValidatedHazardousCommodityContent",
    "ValidatedHazardousCommodityDescription",
    "ValidatedHazardousContainer",
    "VariableHandlingChargeDetail",
    "VariableHandlingCharges",
    "VersionId",
    "Volume",
    "WebAuthenticationCredential",
    "WebAuthenticationDetail",
    "Weight"
]
