#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Fri Mar  6 15:54:38 2020 by generateDS.py version 2.35.15.
# Python 3.8.1 (v3.8.1:1b293b6006, Dec 18 2019, 14:08:53)  [Clang 6.0 (clang-600.0.57)]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('-o', './python/pickup_service_v20.py')
#
# Command line arguments:
#   ./schemas/PickupService_v20.xsd
#
# Command line:
#   /Users/danielkobina/Documents/Open/.sandbox/bin/generateDS --no-namespace-defs -o "./python/pickup_service_v20.py" ./schemas/PickupService_v20.xsd
#
# Current working directory (os.getcwd()):
#   2020-02
#

from six.moves import zip_longest
import os
import sys
import re as re_
import base64
import datetime as datetime_
import decimal as decimal_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
SaveElementTreeNode = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ImportError:
    GenerateDSNamespaceTypePrefixes_ = {}

#
# You can replace the following class definition by defining an
# importable module named "generatedscollector" containing a class
# named "GdsCollector".  See the default class definition below for
# clues about the possible content of that class.
#
try:
    from generatedscollector import GdsCollector as GdsCollector_
except ImportError:

    class GdsCollector_(object):

        def __init__(self, messages=None):
            if messages is None:
                self.messages = []
            else:
                self.messages = messages

        def add_message(self, msg):
            self.messages.append(msg)

        def get_messages(self):
            return self.messages

        def clear_messages(self):
            self.messages = []

        def print_messages(self):
            for msg in self.messages:
                print("Warning: {}".format(msg))

        def write_messages(self, outstream):
            for msg in self.messages:
                outstream.write("Warning: {}\n".format(msg))


#
# The super-class for enum types
#

try:
    from enum import Enum
except ImportError:
    Enum = object

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        __hash__ = object.__hash__
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_parse_string(self, input_data, node=None, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_parse_integer(self, input_data, node=None, input_name=''):
            try:
                ival = int(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires integer value: %s' % exp)
            return ival
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            try:
                value = int(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires integer value')
            return value
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integer valuess')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_parse_float(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires float or double value: %s' % exp)
            return fval_
        def gds_validate_float(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires float value')
            return value
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of float values')
            return values
        def gds_format_decimal(self, input_data, input_name=''):
            return ('%s' % input_data).rstrip('0')
        def gds_parse_decimal(self, input_data, node=None, input_name=''):
            try:
                decimal_value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return decimal_value
        def gds_validate_decimal(self, input_data, node=None, input_name=''):
            try:
                value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return value
        def gds_format_decimal_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_decimal_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    decimal_.Decimal(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of decimal values')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_parse_double(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires double or float value: %s' % exp)
            return fval_
        def gds_validate_double(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires double or float value')
            return value
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(
                        node, 'Requires sequence of double or float values')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_parse_boolean(self, input_data, node=None, input_name=''):
            if input_data in ('true', '1'):
                bval = True
            elif input_data in ('false', '0'):
                bval = False
            else:
                raise_parse_error(node, 'Requires boolean value')
            return bval
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            if input_data not in (True, 1, False, 0, ):
                raise_parse_error(
                    node,
                    'Requires boolean value '
                    '(one of True, 1, False, 0)')
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in (True, 1, False, 0, ):
                    raise_parse_error(
                        node,
                        'Requires sequence of boolean values '
                        '(one of True, 1, False, 0)')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_check_cardinality_(
                self, value, input_name,
                min_occurs=0, max_occurs=1, required=None):
            if value is None:
                length = 0
            elif isinstance(value, list):
                length = len(value)
            else:
                length = 1
            if required is not None :
                if required and length < 1:
                    self.gds_collector_.add_message(
                        "Required value {}{} is missing".format(
                            input_name, self.gds_get_node_lineno_()))
            if length < min_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is below "
                    "the minimum allowed, "
                    "expected at least {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        min_occurs, length))
            elif length > max_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is above "
                    "the maximum allowed, "
                    "expected at most {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        max_occurs, length))
        def gds_validate_builtin_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value, input_name=input_name)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_validate_defined_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            # provide default value in case option --disable-xml is used.
            content = ""
            content = etree_.tostring(node, encoding="unicode")
            return content
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            def excl_select_objs_(obj):
                return (obj[0] != 'parent_object_' and
                        obj[0] != 'gds_collector_')
            if type(self) != type(other):
                return False
            return all(x == y for x, y in zip_longest(
                filter(excl_select_objs_, self.__dict__.items()),
                filter(excl_select_objs_, other.__dict__.items())))
        def __ne__(self, other):
            return not self.__eq__(other)
        # Django ETL transform hooks.
        def gds_djo_etl_transform(self):
            pass
        def gds_djo_etl_transform_db_obj(self, dbobj):
            pass
        # SQLAlchemy ETL transform hooks.
        def gds_sqa_etl_transform(self):
            return 0, None
        def gds_sqa_etl_transform_db_obj(self, dbobj):
            pass
        def gds_get_node_lineno_(self):
            if (hasattr(self, "gds_elementtree_node_") and
                    self.gds_elementtree_node_ is not None):
                return ' near line {}'.format(
                    self.gds_elementtree_node_.sourceline)
            else:
                return ""
    
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
# Set this to false in order to deactivate during export, the use of
# name space prefixes captured from the input document.
UseCapturedNS_ = True
CapturedNsmap_ = {}
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


def encode_str_2_3(instr):
    return instr


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if node is not None:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class AccessorRoleType(Enum):
    """Specifies the role that identifies the permissions the accessor of the
    pending shipment."""
    SHIPMENT_COMPLETOR='SHIPMENT_COMPLETOR'
    SHIPMENT_INITIATOR='SHIPMENT_INITIATOR'


class AssociatedAccountNumberType(Enum):
    """This enumeration represents a kind of "legacy" account number from a
    FedEx operating entity."""
    FEDEX_EXPRESS='FEDEX_EXPRESS'
    FEDEX_FREIGHT='FEDEX_FREIGHT'
    FEDEX_GROUND='FEDEX_GROUND'
    FEDEX_OFFICE='FEDEX_OFFICE'


class BuildingPartCode(Enum):
    APARTMENT='APARTMENT'
    BUILDING='BUILDING'
    DEPARTMENT='DEPARTMENT'
    FLOOR='FLOOR'
    ROOM='ROOM'
    SUITE='SUITE'


class CarrierCodeType(Enum):
    """Identification of a FedEx operating company (transportation)."""
    FDXC='FDXC'
    FDXE='FDXE'
    FDXG='FDXG'
    FXCC='FXCC'
    FXFR='FXFR'
    FXSP='FXSP'


class ChargeBasisLevelType(Enum):
    CURRENT_PACKAGE='CURRENT_PACKAGE'
    SUM_OF_PACKAGES='SUM_OF_PACKAGES'


class CloseTimeType(Enum):
    CUSTOMER_SPECIFIED='CUSTOMER_SPECIFIED'
    DEFAULT='DEFAULT'


class CodAddTransportationChargeBasisType(Enum):
    COD_SURCHARGE='COD_SURCHARGE'
    NET_CHARGE='NET_CHARGE'
    NET_FREIGHT='NET_FREIGHT'
    TOTAL_CUSTOMER_CHARGE='TOTAL_CUSTOMER_CHARGE'


class CodCollectionType(Enum):
    """Identifies the type of funds FedEx should collect upon shipment
    delivery."""
    ANY='ANY'
    CASH='CASH'
    COMPANY_CHECK='COMPANY_CHECK'
    GUARANTEED_FUNDS='GUARANTEED_FUNDS'
    PERSONAL_CHECK='PERSONAL_CHECK'


class CodReturnReferenceIndicatorType(Enum):
    INVOICE='INVOICE'
    PO='PO'
    REFERENCE='REFERENCE'
    TRACKING='TRACKING'


class CountryRelationshipType(Enum):
    """Describes relationship between origin and destination countries."""
    DOMESTIC='DOMESTIC'
    INTERNATIONAL='INTERNATIONAL'


class CustomDeliveryWindowType(Enum):
    AFTER='AFTER'
    BEFORE='BEFORE'
    BETWEEN='BETWEEN'
    ON='ON'


class DangerousGoodsAccessibilityType(Enum):
    ACCESSIBLE='ACCESSIBLE'
    INACCESSIBLE='INACCESSIBLE'


class DayOfWeekType(Enum):
    FRI='FRI'
    MON='MON'
    SAT='SAT'
    SUN='SUN'
    THU='THU'
    TUE='TUE'
    WED='WED'


class DistanceUnits(Enum):
    KM='KM'
    MI='MI'


class EmailOptionType(Enum):
    PRODUCE_PAPERLESS_SHIPPING_FORMAT='PRODUCE_PAPERLESS_SHIPPING_FORMAT'
    SUPPRESS_ACCESS_EMAILS='SUPPRESS_ACCESS_EMAILS'
    SUPPRESS_ADDITIONAL_LANGUAGES='SUPPRESS_ADDITIONAL_LANGUAGES'


class EtdAttributeType(Enum):
    POST_SHIPMENT_UPLOAD_REQUESTED='POST_SHIPMENT_UPLOAD_REQUESTED'


class EtdConfirmationType(Enum):
    """Specifies whether to confirm documents prior to processing a shipment
    with the ELECTRONIC_TRADE_DOCUMENTS special service."""
    CONFIRMED='CONFIRMED'
    DEFERRED='DEFERRED'


class ExpressRegionCode(Enum):
    """Indicates a FedEx Express operating region."""
    APAC='APAC'
    CA='CA'
    EMEA='EMEA'
    LAC='LAC'
    US='US'


class FedExLocationType(Enum):
    """Identifies a kind of FedEx facility."""
    FEDEX_AUTHORIZED_SHIP_CENTER='FEDEX_AUTHORIZED_SHIP_CENTER'
    FEDEX_EXPRESS_STATION='FEDEX_EXPRESS_STATION'
    FEDEX_FACILITY='FEDEX_FACILITY'
    FEDEX_FREIGHT_SERVICE_CENTER='FEDEX_FREIGHT_SERVICE_CENTER'
    FEDEX_GROUND_TERMINAL='FEDEX_GROUND_TERMINAL'
    FEDEX_HOME_DELIVERY_STATION='FEDEX_HOME_DELIVERY_STATION'
    FEDEX_OFFICE='FEDEX_OFFICE'
    FEDEX_SELF_SERVICE_LOCATION='FEDEX_SELF_SERVICE_LOCATION'
    FEDEX_SHIPSITE='FEDEX_SHIPSITE'
    FEDEX_SMART_POST_HUB='FEDEX_SMART_POST_HUB'


class FlatbedTrailerOption(Enum):
    OVER_DIMENSION='OVER_DIMENSION'
    TARP='TARP'


class FreightGuaranteeType(Enum):
    GUARANTEED_DATE='GUARANTEED_DATE'
    GUARANTEED_MORNING='GUARANTEED_MORNING'
    GUARANTEED_TIME='GUARANTEED_TIME'


class FreightServiceSchedulingType(Enum):
    """Specifies the type of service scheduling offered from a Freight or
    National Freight Service Center to a customer-supplied address."""
    LIMITED='LIMITED'
    STANDARD='STANDARD'
    WILL_CALL='WILL_CALL'


class FreightShipmentRoleType(Enum):
    """Indicates the role of the party submitting the transaction."""
    CONSIGNEE='CONSIGNEE'
    SHIPPER='SHIPPER'


class HazardousCommodityOptionType(Enum):
    """Indicates which kind of hazardous content is being reported."""
    BATTERY='BATTERY'
    HAZARDOUS_MATERIALS='HAZARDOUS_MATERIALS'
    LIMITED_QUANTITIES_COMMODITIES='LIMITED_QUANTITIES_COMMODITIES'
    ORM_D='ORM_D'
    REPORTABLE_QUANTITIES='REPORTABLE_QUANTITIES'
    SMALL_QUANTITY_EXCEPTION='SMALL_QUANTITY_EXCEPTION'


class HazardousCommodityRegulationType(Enum):
    """Identifies the source of regulation for hazardous commodity data."""
    ADR='ADR'
    DOT='DOT'
    IATA='IATA'
    ORMD='ORMD'


class HomeDeliveryPremiumType(Enum):
    APPOINTMENT='APPOINTMENT'
    DATE_CERTAIN='DATE_CERTAIN'
    EVENING='EVENING'


class InternationalControlledExportType(Enum):
    DEA__036='DEA_036'
    DEA__236='DEA_236'
    DEA__486='DEA_486'
    DSP__05='DSP_05'
    DSP__61='DSP_61'
    DSP__73='DSP_73'
    DSP__85='DSP_85'
    DSP__94='DSP_94'
    DSP_LICENSE_AGREEMENT='DSP_LICENSE_AGREEMENT'
    FROM_FOREIGN_TRADE_ZONE='FROM_FOREIGN_TRADE_ZONE'
    WAREHOUSE_WITHDRAWAL='WAREHOUSE_WITHDRAWAL'


class LinearUnits(Enum):
    CM='CM'
    IN='IN'


class NotificationEventType(Enum):
    ON_DELIVERY='ON_DELIVERY'
    ON_ESTIMATED_DELIVERY='ON_ESTIMATED_DELIVERY'
    ON_EXCEPTION='ON_EXCEPTION'
    ON_PICKUP_DRIVER_ARRIVED='ON_PICKUP_DRIVER_ARRIVED'
    ON_PICKUP_DRIVER_ASSIGNED='ON_PICKUP_DRIVER_ASSIGNED'
    ON_PICKUP_DRIVER_DEPARTED='ON_PICKUP_DRIVER_DEPARTED'
    ON_PICKUP_DRIVER_EN_ROUTE='ON_PICKUP_DRIVER_EN_ROUTE'
    ON_SHIPMENT='ON_SHIPMENT'
    ON_TENDER='ON_TENDER'


class NotificationFormatType(Enum):
    HTML='HTML'
    TEXT='TEXT'


class NotificationSeverityType(Enum):
    ERROR='ERROR'
    FAILURE='FAILURE'
    NOTE='NOTE'
    SUCCESS='SUCCESS'
    WARNING='WARNING'


class NotificationType(Enum):
    EMAIL='EMAIL'
    FAX='FAX'
    SMS_TEXT_MESSAGE='SMS_TEXT_MESSAGE'


class PaymentType(Enum):
    ACCOUNT='ACCOUNT'
    CASH='CASH'
    COLLECT='COLLECT'
    CREDIT_CARD='CREDIT_CARD'
    RECIPIENT='RECIPIENT'
    SENDER='SENDER'
    THIRD_PARTY='THIRD_PARTY'


class PendingShipmentProcessingOptionType(Enum):
    ALLOW_MODIFICATIONS='ALLOW_MODIFICATIONS'


class PendingShipmentType(Enum):
    EMAIL='EMAIL'


class PhysicalPackagingType(Enum):
    """This enumeration rationalizes the former FedEx Express international
    "admissibility package" types (based on ANSI X.12) and the FedEx
    Freight packaging types. The values represented are those common to
    both carriers."""
    BAG='BAG'
    BARREL='BARREL'
    BASKET='BASKET'
    BOX='BOX'
    BUCKET='BUCKET'
    BUNDLE='BUNDLE'
    CAGE='CAGE'
    CARTON='CARTON'
    CASE='CASE'
    CHEST='CHEST'
    CONTAINER='CONTAINER'
    CRATE='CRATE'
    CYLINDER='CYLINDER'
    DRUM='DRUM'
    ENVELOPE='ENVELOPE'
    HAMPER='HAMPER'
    OTHER='OTHER'
    PACKAGE='PACKAGE'
    PAIL='PAIL'
    PALLET='PALLET'
    PARCEL='PARCEL'
    PIECE='PIECE'
    REEL='REEL'
    ROLL='ROLL'
    SACK='SACK'
    SHRINK_WRAPPED='SHRINK_WRAPPED'
    SKID='SKID'
    TANK='TANK'
    TOTE_BIN='TOTE_BIN'
    TUBE='TUBE'
    UNIT='UNIT'


class PickupBuildingLocationType(Enum):
    FRONT='FRONT'
    NONE='NONE'
    REAR='REAR'
    SIDE='SIDE'


class PickupEventType(Enum):
    ASSIGNED_TO_DRIVER='ASSIGNED_TO_DRIVER'
    CANCELED='CANCELED'
    DRIVER_ARRIVED='DRIVER_ARRIVED'
    DRIVER_DEPARTED='DRIVER_DEPARTED'
    DRIVER_EN_ROUTE='DRIVER_EN_ROUTE'
    EXCEPTION='EXCEPTION'
    PICKED_UP='PICKED_UP'
    SCHEDULED='SCHEDULED'


class PickupRequestType(Enum):
    FUTURE_DAY='FUTURE_DAY'
    SAME_DAY='SAME_DAY'


class PickupServiceCategoryType(Enum):
    """Specifies the service category for the pick up being scheduled."""
    FEDEX_DISTANCE_DEFERRED='FEDEX_DISTANCE_DEFERRED'
    FEDEX_NEXT_DAY_AFTERNOON='FEDEX_NEXT_DAY_AFTERNOON'
    FEDEX_NEXT_DAY_EARLY_MORNING='FEDEX_NEXT_DAY_EARLY_MORNING'
    FEDEX_NEXT_DAY_END_OF_DAY='FEDEX_NEXT_DAY_END_OF_DAY'
    FEDEX_NEXT_DAY_FREIGHT='FEDEX_NEXT_DAY_FREIGHT'
    FEDEX_NEXT_DAY_MID_MORNING='FEDEX_NEXT_DAY_MID_MORNING'
    SAME_DAY='SAME_DAY'
    SAME_DAY_CITY='SAME_DAY_CITY'


class PickupType(Enum):
    """These values indicate the type of pickup being requested."""
    ON_CALL='ON_CALL'
    TAG='TAG'


class PriorityAlertEnhancementType(Enum):
    PRIORITY_ALERT_PLUS='PRIORITY_ALERT_PLUS'


class RateLevelBasisType(Enum):
    BUNDLED_RATE='BUNDLED_RATE'
    INDIVIDUAL_PACKAGE_RATE='INDIVIDUAL_PACKAGE_RATE'


class RateTypeBasisType(Enum):
    """Select the type of rate from which the element is to be selected."""
    ACCOUNT='ACCOUNT'
    ACTUAL='ACTUAL'
    CURRENT='CURRENT'
    CUSTOM='CUSTOM'
    LIST='LIST'


class RecommendedDocumentType(Enum):
    """Type of documents that are recommended to be included with the
    shipment."""
    ANTIQUE_STATEMENT_EUROPEAN_UNION='ANTIQUE_STATEMENT_EUROPEAN_UNION'
    ANTIQUE_STATEMENT_UNITED_STATES='ANTIQUE_STATEMENT_UNITED_STATES'
    ASSEMBLER_DECLARATION='ASSEMBLER_DECLARATION'
    BEARING_WORKSHEET='BEARING_WORKSHEET'
    CERTIFICATE_OF_SHIPMENTS_TO_SYRIA='CERTIFICATE_OF_SHIPMENTS_TO_SYRIA'
    COMMERCIAL_INVOICE_FOR_THE_CARIBBEAN_COMMON_MARKET='COMMERCIAL_INVOICE_FOR_THE_CARIBBEAN_COMMON_MARKET'
    CONIFEROUS_SOLID_WOOD_PACKAGING_MATERIAL_TO_THE_PEOPLES_REPUBLIC_OF_CHINA='CONIFEROUS_SOLID_WOOD_PACKAGING_MATERIAL_TO_THE_PEOPLES_REPUBLIC_OF_CHINA'
    DECLARATION_FOR_FREE_ENTRY_OF_RETURNED_AMERICAN_PRODUCTS='DECLARATION_FOR_FREE_ENTRY_OF_RETURNED_AMERICAN_PRODUCTS'
    DECLARATION_OF_BIOLOGICAL_STANDARDS='DECLARATION_OF_BIOLOGICAL_STANDARDS'
    DECLARATION_OF_IMPORTED_ELECTRONIC_PRODUCTS_SUBJECT_TO_RADIATION_CONTROL_STANDARD='DECLARATION_OF_IMPORTED_ELECTRONIC_PRODUCTS_SUBJECT_TO_RADIATION_CONTROL_STANDARD'
    ELECTRONIC_INTEGRATED_CIRCUIT_WORKSHEET='ELECTRONIC_INTEGRATED_CIRCUIT_WORKSHEET'
    FILM_AND_VIDEO_CERTIFICATE='FILM_AND_VIDEO_CERTIFICATE'
    INTERIM_FOOTWEAR_INVOICE='INTERIM_FOOTWEAR_INVOICE'
    NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_ENGLISH='NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_ENGLISH'
    NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_FRENCH='NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_FRENCH'
    NAFTA_CERTIFICATE_OF_ORIGIN_SPANISH='NAFTA_CERTIFICATE_OF_ORIGIN_SPANISH'
    NAFTA_CERTIFICATE_OF_ORIGIN_UNITED_STATES='NAFTA_CERTIFICATE_OF_ORIGIN_UNITED_STATES'
    PACKING_LIST='PACKING_LIST'
    PRINTED_CIRCUIT_BOARD_WORKSHEET='PRINTED_CIRCUIT_BOARD_WORKSHEET'
    REPAIRED_WATCH_BREAKOUT_WORKSHEET='REPAIRED_WATCH_BREAKOUT_WORKSHEET'
    STATEMENT_REGARDING_THE_IMPORT_OF_RADIO_FREQUENCY_DEVICES='STATEMENT_REGARDING_THE_IMPORT_OF_RADIO_FREQUENCY_DEVICES'
    TOXIC_SUBSTANCES_CONTROL_ACT='TOXIC_SUBSTANCES_CONTROL_ACT'
    UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_NON_TEXTILES='UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_NON_TEXTILES'
    UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_TEXTILES='UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_TEXTILES'
    UNITED_STATES_NEW_WATCH_WORKSHEET='UNITED_STATES_NEW_WATCH_WORKSHEET'
    UNITED_STATES_WATCH_REPAIR_DECLARATION='UNITED_STATES_WATCH_REPAIR_DECLARATION'


class RequestedShippingDocumentType(Enum):
    CERTIFICATE_OF_ORIGIN='CERTIFICATE_OF_ORIGIN'
    COMMERCIAL_INVOICE='COMMERCIAL_INVOICE'
    CUSTOMER_SPECIFIED_LABELS='CUSTOMER_SPECIFIED_LABELS'
    CUSTOM_PACKAGE_DOCUMENT='CUSTOM_PACKAGE_DOCUMENT'
    CUSTOM_SHIPMENT_DOCUMENT='CUSTOM_SHIPMENT_DOCUMENT'
    DANGEROUS_GOODS_SHIPPERS_DECLARATION='DANGEROUS_GOODS_SHIPPERS_DECLARATION'
    EXPORT_DECLARATION='EXPORT_DECLARATION'
    FREIGHT_ADDRESS_LABEL='FREIGHT_ADDRESS_LABEL'
    GENERAL_AGENCY_AGREEMENT='GENERAL_AGENCY_AGREEMENT'
    LABEL='LABEL'
    NAFTA_CERTIFICATE_OF_ORIGIN='NAFTA_CERTIFICATE_OF_ORIGIN'
    OP__900='OP_900'
    PENDING_SHIPMENT_EMAIL_NOTIFICATION='PENDING_SHIPMENT_EMAIL_NOTIFICATION'
    PRO_FORMA_INVOICE='PRO_FORMA_INVOICE'
    RETURN_INSTRUCTIONS='RETURN_INSTRUCTIONS'


class ReturnEMailAllowedSpecialServiceType(Enum):
    """These values are used to control the availability of certain special
    services at the time when a customer uses the e-mail label link to
    create a return shipment."""
    SATURDAY_DELIVERY='SATURDAY_DELIVERY'
    SATURDAY_PICKUP='SATURDAY_PICKUP'


class ReturnType(Enum):
    FEDEX_TAG='FEDEX_TAG'
    NET_RETURN='NET_RETURN'
    PENDING='PENDING'
    PRINT_RETURN_LABEL='PRINT_RETURN_LABEL'
    VOICE_CALL_TAG='VOICE_CALL_TAG'


class ShipmentDryIceProcessingOptionType(Enum):
    SHIPMENT_LEVEL_DRY_ICE_ONLY='SHIPMENT_LEVEL_DRY_ICE_ONLY'


class ShipmentNotificationAggregationType(Enum):
    PER_PACKAGE='PER_PACKAGE'
    PER_SHIPMENT='PER_SHIPMENT'


class ShipmentNotificationRoleType(Enum):
    BROKER='BROKER'
    OTHER='OTHER'
    RECIPIENT='RECIPIENT'
    SHIPPER='SHIPPER'
    THIRD_PARTY='THIRD_PARTY'


class SpecialEquipmentType(Enum):
    """Identifies types of special equipment used in loading/unloading Freight
    shipments"""
    FORK_LIFT='FORK_LIFT'


class TinType(Enum):
    BUSINESS_NATIONAL='BUSINESS_NATIONAL'
    BUSINESS_STATE='BUSINESS_STATE'
    BUSINESS_UNION='BUSINESS_UNION'
    PERSONAL_NATIONAL='PERSONAL_NATIONAL'
    PERSONAL_STATE='PERSONAL_STATE'


class TrackingIdType(Enum):
    EXPRESS='EXPRESS'
    FEDEX='FEDEX'
    FREIGHT='FREIGHT'
    GROUND='GROUND'
    USPS='USPS'


class TrailerSizeType(Enum):
    TRAILER__28_FT='TRAILER_28_FT'
    TRAILER__48_FT='TRAILER_48_FT'
    TRAILER__53_FT='TRAILER_53_FT'


class TruckType(Enum):
    DROP_TRAILER_AGREEMENT='DROP_TRAILER_AGREEMENT'
    LIFTGATE='LIFTGATE'
    TRACTOR_TRAILER_ACCESS='TRACTOR_TRAILER_ACCESS'


class UploadDocumentIdProducer(Enum):
    """Specifies the application that is responsible for managing the document
    id."""
    CUSTOMER='CUSTOMER'
    FEDEX_CAFE='FEDEX_CAFE'
    FEDEX_CSHP='FEDEX_CSHP'
    FEDEX_FXRS='FEDEX_FXRS'
    FEDEX_GSMW='FEDEX_GSMW'
    FEDEX_GTM='FEDEX_GTM'
    FEDEX_INET='FEDEX_INET'


class UploadDocumentProducerType(Enum):
    CUSTOMER='CUSTOMER'
    FEDEX_CAFE='FEDEX_CAFE'
    FEDEX_CLS='FEDEX_CLS'
    FEDEX_FIDT='FEDEX_FIDT'
    FEDEX_FXRS='FEDEX_FXRS'
    FEDEX_GSMW='FEDEX_GSMW'
    FEDEX_GTM='FEDEX_GTM'
    OTHER='OTHER'


class UploadDocumentType(Enum):
    CERTIFICATE_OF_ORIGIN='CERTIFICATE_OF_ORIGIN'
    COMMERCIAL_INVOICE='COMMERCIAL_INVOICE'
    ETD_LABEL='ETD_LABEL'
    NAFTA_CERTIFICATE_OF_ORIGIN='NAFTA_CERTIFICATE_OF_ORIGIN'
    NET_RATE_SHEET='NET_RATE_SHEET'
    OTHER='OTHER'
    PRO_FORMA_INVOICE='PRO_FORMA_INVOICE'


class WeighingScaleType(Enum):
    """Identifies types of scales used in weighing Freight shipments"""
    FEDEX_SCALE='FEDEX_SCALE'
    PUBLIC_SCALE='PUBLIC_SCALE'


class WeightUnits(Enum):
    KG='KG'
    LB='LB'


class Address(GeneratedsSuper):
    """Descriptive data for a physical location. May be used as an actual
    physical address (place to which one could go), or as a container of
    "address parts" which should be handled as a unit (such as a city-
    state-ZIP combination within the US)."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, StreetLines=None, City=None, StateOrProvinceCode=None, PostalCode=None, UrbanizationCode=None, CountryCode=None, CountryName=None, Residential=None, GeographicCoordinates=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if StreetLines is None:
            self.StreetLines = []
        else:
            self.StreetLines = StreetLines
        self.StreetLines_nsprefix_ = None
        self.City = City
        self.City_nsprefix_ = None
        self.StateOrProvinceCode = StateOrProvinceCode
        self.StateOrProvinceCode_nsprefix_ = None
        self.PostalCode = PostalCode
        self.PostalCode_nsprefix_ = None
        self.UrbanizationCode = UrbanizationCode
        self.UrbanizationCode_nsprefix_ = None
        self.CountryCode = CountryCode
        self.CountryCode_nsprefix_ = None
        self.CountryName = CountryName
        self.CountryName_nsprefix_ = None
        self.Residential = Residential
        self.Residential_nsprefix_ = None
        self.GeographicCoordinates = GeographicCoordinates
        self.GeographicCoordinates_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Address)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Address.subclass:
            return Address.subclass(*args_, **kwargs_)
        else:
            return Address(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_StreetLines(self):
        return self.StreetLines
    def set_StreetLines(self, StreetLines):
        self.StreetLines = StreetLines
    def add_StreetLines(self, value):
        self.StreetLines.append(value)
    def insert_StreetLines_at(self, index, value):
        self.StreetLines.insert(index, value)
    def replace_StreetLines_at(self, index, value):
        self.StreetLines[index] = value
    def get_City(self):
        return self.City
    def set_City(self, City):
        self.City = City
    def get_StateOrProvinceCode(self):
        return self.StateOrProvinceCode
    def set_StateOrProvinceCode(self, StateOrProvinceCode):
        self.StateOrProvinceCode = StateOrProvinceCode
    def get_PostalCode(self):
        return self.PostalCode
    def set_PostalCode(self, PostalCode):
        self.PostalCode = PostalCode
    def get_UrbanizationCode(self):
        return self.UrbanizationCode
    def set_UrbanizationCode(self, UrbanizationCode):
        self.UrbanizationCode = UrbanizationCode
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def get_CountryName(self):
        return self.CountryName
    def set_CountryName(self, CountryName):
        self.CountryName = CountryName
    def get_Residential(self):
        return self.Residential
    def set_Residential(self, Residential):
        self.Residential = Residential
    def get_GeographicCoordinates(self):
        return self.GeographicCoordinates
    def set_GeographicCoordinates(self, GeographicCoordinates):
        self.GeographicCoordinates = GeographicCoordinates
    def hasContent_(self):
        if (
            self.StreetLines or
            self.City is not None or
            self.StateOrProvinceCode is not None or
            self.PostalCode is not None or
            self.UrbanizationCode is not None or
            self.CountryCode is not None or
            self.CountryName is not None or
            self.Residential is not None or
            self.GeographicCoordinates is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Address', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Address')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Address':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Address')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Address', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Address'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Address', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for StreetLines_ in self.StreetLines:
            namespaceprefix_ = self.StreetLines_nsprefix_ + ':' if (UseCapturedNS_ and self.StreetLines_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStreetLines>%s</%sStreetLines>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(StreetLines_), input_name='StreetLines')), namespaceprefix_ , eol_))
        if self.City is not None:
            namespaceprefix_ = self.City_nsprefix_ + ':' if (UseCapturedNS_ and self.City_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCity>%s</%sCity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), namespaceprefix_ , eol_))
        if self.StateOrProvinceCode is not None:
            namespaceprefix_ = self.StateOrProvinceCode_nsprefix_ + ':' if (UseCapturedNS_ and self.StateOrProvinceCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStateOrProvinceCode>%s</%sStateOrProvinceCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StateOrProvinceCode), input_name='StateOrProvinceCode')), namespaceprefix_ , eol_))
        if self.PostalCode is not None:
            namespaceprefix_ = self.PostalCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PostalCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), namespaceprefix_ , eol_))
        if self.UrbanizationCode is not None:
            namespaceprefix_ = self.UrbanizationCode_nsprefix_ + ':' if (UseCapturedNS_ and self.UrbanizationCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUrbanizationCode>%s</%sUrbanizationCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UrbanizationCode), input_name='UrbanizationCode')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
        if self.CountryName is not None:
            namespaceprefix_ = self.CountryName_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryName>%s</%sCountryName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryName), input_name='CountryName')), namespaceprefix_ , eol_))
        if self.Residential is not None:
            namespaceprefix_ = self.Residential_nsprefix_ + ':' if (UseCapturedNS_ and self.Residential_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sResidential>%s</%sResidential>%s' % (namespaceprefix_ , self.gds_format_boolean(self.Residential, input_name='Residential'), namespaceprefix_ , eol_))
        if self.GeographicCoordinates is not None:
            namespaceprefix_ = self.GeographicCoordinates_nsprefix_ + ':' if (UseCapturedNS_ and self.GeographicCoordinates_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGeographicCoordinates>%s</%sGeographicCoordinates>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GeographicCoordinates), input_name='GeographicCoordinates')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'StreetLines':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StreetLines')
            value_ = self.gds_validate_string(value_, node, 'StreetLines')
            self.StreetLines.append(value_)
            self.StreetLines_nsprefix_ = child_.prefix
        elif nodeName_ == 'City':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'City')
            value_ = self.gds_validate_string(value_, node, 'City')
            self.City = value_
            self.City_nsprefix_ = child_.prefix
        elif nodeName_ == 'StateOrProvinceCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StateOrProvinceCode')
            value_ = self.gds_validate_string(value_, node, 'StateOrProvinceCode')
            self.StateOrProvinceCode = value_
            self.StateOrProvinceCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'PostalCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PostalCode')
            value_ = self.gds_validate_string(value_, node, 'PostalCode')
            self.PostalCode = value_
            self.PostalCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'UrbanizationCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UrbanizationCode')
            value_ = self.gds_validate_string(value_, node, 'UrbanizationCode')
            self.UrbanizationCode = value_
            self.UrbanizationCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'CountryName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryName')
            value_ = self.gds_validate_string(value_, node, 'CountryName')
            self.CountryName = value_
            self.CountryName_nsprefix_ = child_.prefix
        elif nodeName_ == 'Residential':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'Residential')
            ival_ = self.gds_validate_boolean(ival_, node, 'Residential')
            self.Residential = ival_
            self.Residential_nsprefix_ = child_.prefix
        elif nodeName_ == 'GeographicCoordinates':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GeographicCoordinates')
            value_ = self.gds_validate_string(value_, node, 'GeographicCoordinates')
            self.GeographicCoordinates = value_
            self.GeographicCoordinates_nsprefix_ = child_.prefix
# end class Address


class AssociatedAccount(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, AccountNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_AssociatedAccountNumberType(self.Type)
        self.Type_nsprefix_ = None
        self.AccountNumber = AccountNumber
        self.AccountNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AssociatedAccount)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AssociatedAccount.subclass:
            return AssociatedAccount.subclass(*args_, **kwargs_)
        else:
            return AssociatedAccount(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_AccountNumber(self):
        return self.AccountNumber
    def set_AccountNumber(self, AccountNumber):
        self.AccountNumber = AccountNumber
    def validate_AssociatedAccountNumberType(self, value):
        result = True
        # Validate type AssociatedAccountNumberType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_EXPRESS', 'FEDEX_FREIGHT', 'FEDEX_GROUND', 'FEDEX_OFFICE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on AssociatedAccountNumberType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.AccountNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AssociatedAccount', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AssociatedAccount')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AssociatedAccount':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AssociatedAccount')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AssociatedAccount', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AssociatedAccount'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='AssociatedAccount', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.AccountNumber is not None:
            namespaceprefix_ = self.AccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type AssociatedAccountNumberType
            self.validate_AssociatedAccountNumberType(self.Type)
        elif nodeName_ == 'AccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountNumber')
            value_ = self.gds_validate_string(value_, node, 'AccountNumber')
            self.AccountNumber = value_
            self.AccountNumber_nsprefix_ = child_.prefix
# end class AssociatedAccount


class CancelPickupReply(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, Message=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HighestSeverity = HighestSeverity
        self.validate_NotificationSeverityType(self.HighestSeverity)
        self.HighestSeverity_nsprefix_ = None
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.Notifications_nsprefix_ = None
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = None
        self.Version = Version
        self.Version_nsprefix_ = None
        self.Message = Message
        self.Message_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CancelPickupReply)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CancelPickupReply.subclass:
            return CancelPickupReply.subclass(*args_, **kwargs_)
        else:
            return CancelPickupReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HighestSeverity(self):
        return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity):
        self.HighestSeverity = HighestSeverity
    def get_Notifications(self):
        return self.Notifications
    def set_Notifications(self, Notifications):
        self.Notifications = Notifications
    def add_Notifications(self, value):
        self.Notifications.append(value)
    def insert_Notifications_at(self, index, value):
        self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value):
        self.Notifications[index] = value
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_Message(self):
        return self.Message
    def set_Message(self, Message):
        self.Message = Message
    def validate_NotificationSeverityType(self, value):
        result = True
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.Message is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CancelPickupReply', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CancelPickupReply')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CancelPickupReply':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CancelPickupReply')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CancelPickupReply', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CancelPickupReply'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CancelPickupReply', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HighestSeverity is not None:
            namespaceprefix_ = self.HighestSeverity_nsprefix_ + ':' if (UseCapturedNS_ and self.HighestSeverity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HighestSeverity), input_name='HighestSeverity')), namespaceprefix_ , eol_))
        for Notifications_ in self.Notifications:
            namespaceprefix_ = self.Notifications_nsprefix_ + ':' if (UseCapturedNS_ and self.Notifications_nsprefix_) else ''
            Notifications_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Notifications', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        if self.Message is not None:
            namespaceprefix_ = self.Message_nsprefix_ + ':' if (UseCapturedNS_ and self.Message_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMessage>%s</%sMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Message), input_name='Message')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HighestSeverity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HighestSeverity')
            value_ = self.gds_validate_string(value_, node, 'HighestSeverity')
            self.HighestSeverity = value_
            self.HighestSeverity_nsprefix_ = child_.prefix
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.HighestSeverity)
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'Message':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Message')
            value_ = self.gds_validate_string(value_, node, 'Message')
            self.Message = value_
            self.Message_nsprefix_ = child_.prefix
# end class CancelPickupReply


class CancelPickupRequest(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, CarrierCode=None, PickupConfirmationNumber=None, ScheduledDate=None, EndDate=None, Location=None, Remarks=None, ShippingChargesPayment=None, Reason=None, ContactName=None, PhoneNumber=None, PhoneExtension=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.WebAuthenticationDetail_nsprefix_ = None
        self.ClientDetail = ClientDetail
        self.ClientDetail_nsprefix_ = None
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = None
        self.Version = Version
        self.Version_nsprefix_ = None
        self.CarrierCode = CarrierCode
        self.validate_CarrierCodeType(self.CarrierCode)
        self.CarrierCode_nsprefix_ = None
        self.PickupConfirmationNumber = PickupConfirmationNumber
        self.PickupConfirmationNumber_nsprefix_ = None
        if isinstance(ScheduledDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ScheduledDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ScheduledDate
        self.ScheduledDate = initvalue_
        self.ScheduledDate_nsprefix_ = None
        if isinstance(EndDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EndDate, '%Y-%m-%d').date()
        else:
            initvalue_ = EndDate
        self.EndDate = initvalue_
        self.EndDate_nsprefix_ = None
        self.Location = Location
        self.Location_nsprefix_ = None
        self.Remarks = Remarks
        self.Remarks_nsprefix_ = None
        self.ShippingChargesPayment = ShippingChargesPayment
        self.ShippingChargesPayment_nsprefix_ = None
        self.Reason = Reason
        self.Reason_nsprefix_ = None
        self.ContactName = ContactName
        self.ContactName_nsprefix_ = None
        self.PhoneNumber = PhoneNumber
        self.PhoneNumber_nsprefix_ = None
        self.PhoneExtension = PhoneExtension
        self.PhoneExtension_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CancelPickupRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CancelPickupRequest.subclass:
            return CancelPickupRequest.subclass(*args_, **kwargs_)
        else:
            return CancelPickupRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_WebAuthenticationDetail(self):
        return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail):
        self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self):
        return self.ClientDetail
    def set_ClientDetail(self, ClientDetail):
        self.ClientDetail = ClientDetail
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_CarrierCode(self):
        return self.CarrierCode
    def set_CarrierCode(self, CarrierCode):
        self.CarrierCode = CarrierCode
    def get_PickupConfirmationNumber(self):
        return self.PickupConfirmationNumber
    def set_PickupConfirmationNumber(self, PickupConfirmationNumber):
        self.PickupConfirmationNumber = PickupConfirmationNumber
    def get_ScheduledDate(self):
        return self.ScheduledDate
    def set_ScheduledDate(self, ScheduledDate):
        self.ScheduledDate = ScheduledDate
    def get_EndDate(self):
        return self.EndDate
    def set_EndDate(self, EndDate):
        self.EndDate = EndDate
    def get_Location(self):
        return self.Location
    def set_Location(self, Location):
        self.Location = Location
    def get_Remarks(self):
        return self.Remarks
    def set_Remarks(self, Remarks):
        self.Remarks = Remarks
    def get_ShippingChargesPayment(self):
        return self.ShippingChargesPayment
    def set_ShippingChargesPayment(self, ShippingChargesPayment):
        self.ShippingChargesPayment = ShippingChargesPayment
    def get_Reason(self):
        return self.Reason
    def set_Reason(self, Reason):
        self.Reason = Reason
    def get_ContactName(self):
        return self.ContactName
    def set_ContactName(self, ContactName):
        self.ContactName = ContactName
    def get_PhoneNumber(self):
        return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber):
        self.PhoneNumber = PhoneNumber
    def get_PhoneExtension(self):
        return self.PhoneExtension
    def set_PhoneExtension(self, PhoneExtension):
        self.PhoneExtension = PhoneExtension
    def validate_CarrierCodeType(self, value):
        result = True
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FXCC', 'FXFR', 'FXSP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CarrierCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.CarrierCode is not None or
            self.PickupConfirmationNumber is not None or
            self.ScheduledDate is not None or
            self.EndDate is not None or
            self.Location is not None or
            self.Remarks is not None or
            self.ShippingChargesPayment is not None or
            self.Reason is not None or
            self.ContactName is not None or
            self.PhoneNumber is not None or
            self.PhoneExtension is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CancelPickupRequest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CancelPickupRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CancelPickupRequest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CancelPickupRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CancelPickupRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CancelPickupRequest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CancelPickupRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WebAuthenticationDetail is not None:
            namespaceprefix_ = self.WebAuthenticationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.WebAuthenticationDetail_nsprefix_) else ''
            self.WebAuthenticationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WebAuthenticationDetail', pretty_print=pretty_print)
        if self.ClientDetail is not None:
            namespaceprefix_ = self.ClientDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientDetail_nsprefix_) else ''
            self.ClientDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClientDetail', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        if self.CarrierCode is not None:
            namespaceprefix_ = self.CarrierCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CarrierCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierCode>%s</%sCarrierCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CarrierCode), input_name='CarrierCode')), namespaceprefix_ , eol_))
        if self.PickupConfirmationNumber is not None:
            namespaceprefix_ = self.PickupConfirmationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PickupConfirmationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPickupConfirmationNumber>%s</%sPickupConfirmationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PickupConfirmationNumber), input_name='PickupConfirmationNumber')), namespaceprefix_ , eol_))
        if self.ScheduledDate is not None:
            namespaceprefix_ = self.ScheduledDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ScheduledDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sScheduledDate>%s</%sScheduledDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ScheduledDate, input_name='ScheduledDate'), namespaceprefix_ , eol_))
        if self.EndDate is not None:
            namespaceprefix_ = self.EndDate_nsprefix_ + ':' if (UseCapturedNS_ and self.EndDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEndDate>%s</%sEndDate>%s' % (namespaceprefix_ , self.gds_format_date(self.EndDate, input_name='EndDate'), namespaceprefix_ , eol_))
        if self.Location is not None:
            namespaceprefix_ = self.Location_nsprefix_ + ':' if (UseCapturedNS_ and self.Location_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocation>%s</%sLocation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Location), input_name='Location')), namespaceprefix_ , eol_))
        if self.Remarks is not None:
            namespaceprefix_ = self.Remarks_nsprefix_ + ':' if (UseCapturedNS_ and self.Remarks_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRemarks>%s</%sRemarks>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Remarks), input_name='Remarks')), namespaceprefix_ , eol_))
        if self.ShippingChargesPayment is not None:
            namespaceprefix_ = self.ShippingChargesPayment_nsprefix_ + ':' if (UseCapturedNS_ and self.ShippingChargesPayment_nsprefix_) else ''
            self.ShippingChargesPayment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShippingChargesPayment', pretty_print=pretty_print)
        if self.Reason is not None:
            namespaceprefix_ = self.Reason_nsprefix_ + ':' if (UseCapturedNS_ and self.Reason_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReason>%s</%sReason>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Reason), input_name='Reason')), namespaceprefix_ , eol_))
        if self.ContactName is not None:
            namespaceprefix_ = self.ContactName_nsprefix_ + ':' if (UseCapturedNS_ and self.ContactName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactName>%s</%sContactName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ContactName), input_name='ContactName')), namespaceprefix_ , eol_))
        if self.PhoneNumber is not None:
            namespaceprefix_ = self.PhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhoneNumber>%s</%sPhoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), namespaceprefix_ , eol_))
        if self.PhoneExtension is not None:
            namespaceprefix_ = self.PhoneExtension_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneExtension_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhoneExtension>%s</%sPhoneExtension>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhoneExtension), input_name='PhoneExtension')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WebAuthenticationDetail = obj_
            obj_.original_tagname_ = 'WebAuthenticationDetail'
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClientDetail = obj_
            obj_.original_tagname_ = 'ClientDetail'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'CarrierCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CarrierCode')
            value_ = self.gds_validate_string(value_, node, 'CarrierCode')
            self.CarrierCode = value_
            self.CarrierCode_nsprefix_ = child_.prefix
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.CarrierCode)
        elif nodeName_ == 'PickupConfirmationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PickupConfirmationNumber')
            value_ = self.gds_validate_string(value_, node, 'PickupConfirmationNumber')
            self.PickupConfirmationNumber = value_
            self.PickupConfirmationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ScheduledDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ScheduledDate = dval_
            self.ScheduledDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'EndDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.EndDate = dval_
            self.EndDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'Location':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Location')
            value_ = self.gds_validate_string(value_, node, 'Location')
            self.Location = value_
            self.Location_nsprefix_ = child_.prefix
        elif nodeName_ == 'Remarks':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Remarks')
            value_ = self.gds_validate_string(value_, node, 'Remarks')
            self.Remarks = value_
            self.Remarks_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShippingChargesPayment':
            obj_ = Payment.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShippingChargesPayment = obj_
            obj_.original_tagname_ = 'ShippingChargesPayment'
        elif nodeName_ == 'Reason':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Reason')
            value_ = self.gds_validate_string(value_, node, 'Reason')
            self.Reason = value_
            self.Reason_nsprefix_ = child_.prefix
        elif nodeName_ == 'ContactName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ContactName')
            value_ = self.gds_validate_string(value_, node, 'ContactName')
            self.ContactName = value_
            self.ContactName_nsprefix_ = child_.prefix
        elif nodeName_ == 'PhoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhoneNumber')
            value_ = self.gds_validate_string(value_, node, 'PhoneNumber')
            self.PhoneNumber = value_
            self.PhoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'PhoneExtension':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhoneExtension')
            value_ = self.gds_validate_string(value_, node, 'PhoneExtension')
            self.PhoneExtension = value_
            self.PhoneExtension_nsprefix_ = child_.prefix
# end class CancelPickupRequest


class ClientDetail(GeneratedsSuper):
    """Descriptive data for the client submitting a transaction."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, MeterNumber=None, MeterInstance=None, IntegratorId=None, Region=None, Localization=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AccountNumber = AccountNumber
        self.AccountNumber_nsprefix_ = None
        self.MeterNumber = MeterNumber
        self.MeterNumber_nsprefix_ = None
        self.MeterInstance = MeterInstance
        self.MeterInstance_nsprefix_ = None
        self.IntegratorId = IntegratorId
        self.IntegratorId_nsprefix_ = None
        self.Region = Region
        self.validate_ExpressRegionCode(self.Region)
        self.Region_nsprefix_ = None
        self.Localization = Localization
        self.Localization_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClientDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClientDetail.subclass:
            return ClientDetail.subclass(*args_, **kwargs_)
        else:
            return ClientDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AccountNumber(self):
        return self.AccountNumber
    def set_AccountNumber(self, AccountNumber):
        self.AccountNumber = AccountNumber
    def get_MeterNumber(self):
        return self.MeterNumber
    def set_MeterNumber(self, MeterNumber):
        self.MeterNumber = MeterNumber
    def get_MeterInstance(self):
        return self.MeterInstance
    def set_MeterInstance(self, MeterInstance):
        self.MeterInstance = MeterInstance
    def get_IntegratorId(self):
        return self.IntegratorId
    def set_IntegratorId(self, IntegratorId):
        self.IntegratorId = IntegratorId
    def get_Region(self):
        return self.Region
    def set_Region(self, Region):
        self.Region = Region
    def get_Localization(self):
        return self.Localization
    def set_Localization(self, Localization):
        self.Localization = Localization
    def validate_ExpressRegionCode(self, value):
        result = True
        # Validate type ExpressRegionCode, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['APAC', 'CA', 'EMEA', 'LAC', 'US']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ExpressRegionCode' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.MeterNumber is not None or
            self.MeterInstance is not None or
            self.IntegratorId is not None or
            self.Region is not None or
            self.Localization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ClientDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClientDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ClientDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ClientDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ClientDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ClientDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ClientDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountNumber is not None:
            namespaceprefix_ = self.AccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), namespaceprefix_ , eol_))
        if self.MeterNumber is not None:
            namespaceprefix_ = self.MeterNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.MeterNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeterNumber>%s</%sMeterNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MeterNumber), input_name='MeterNumber')), namespaceprefix_ , eol_))
        if self.MeterInstance is not None:
            namespaceprefix_ = self.MeterInstance_nsprefix_ + ':' if (UseCapturedNS_ and self.MeterInstance_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeterInstance>%s</%sMeterInstance>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MeterInstance), input_name='MeterInstance')), namespaceprefix_ , eol_))
        if self.IntegratorId is not None:
            namespaceprefix_ = self.IntegratorId_nsprefix_ + ':' if (UseCapturedNS_ and self.IntegratorId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIntegratorId>%s</%sIntegratorId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IntegratorId), input_name='IntegratorId')), namespaceprefix_ , eol_))
        if self.Region is not None:
            namespaceprefix_ = self.Region_nsprefix_ + ':' if (UseCapturedNS_ and self.Region_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegion>%s</%sRegion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Region), input_name='Region')), namespaceprefix_ , eol_))
        if self.Localization is not None:
            namespaceprefix_ = self.Localization_nsprefix_ + ':' if (UseCapturedNS_ and self.Localization_nsprefix_) else ''
            self.Localization.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Localization', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountNumber')
            value_ = self.gds_validate_string(value_, node, 'AccountNumber')
            self.AccountNumber = value_
            self.AccountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'MeterNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MeterNumber')
            value_ = self.gds_validate_string(value_, node, 'MeterNumber')
            self.MeterNumber = value_
            self.MeterNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'MeterInstance':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MeterInstance')
            value_ = self.gds_validate_string(value_, node, 'MeterInstance')
            self.MeterInstance = value_
            self.MeterInstance_nsprefix_ = child_.prefix
        elif nodeName_ == 'IntegratorId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'IntegratorId')
            value_ = self.gds_validate_string(value_, node, 'IntegratorId')
            self.IntegratorId = value_
            self.IntegratorId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Region':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Region')
            value_ = self.gds_validate_string(value_, node, 'Region')
            self.Region = value_
            self.Region_nsprefix_ = child_.prefix
            # validate type ExpressRegionCode
            self.validate_ExpressRegionCode(self.Region)
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
# end class ClientDetail


class CodAddTransportationChargesDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RateTypeBasis=None, ChargeBasis=None, ChargeBasisLevel=None, RateLevelBasis=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RateTypeBasis = RateTypeBasis
        self.validate_RateTypeBasisType(self.RateTypeBasis)
        self.RateTypeBasis_nsprefix_ = None
        self.ChargeBasis = ChargeBasis
        self.validate_CodAddTransportationChargeBasisType(self.ChargeBasis)
        self.ChargeBasis_nsprefix_ = None
        self.ChargeBasisLevel = ChargeBasisLevel
        self.validate_ChargeBasisLevelType(self.ChargeBasisLevel)
        self.ChargeBasisLevel_nsprefix_ = None
        self.RateLevelBasis = RateLevelBasis
        self.validate_RateLevelBasisType(self.RateLevelBasis)
        self.RateLevelBasis_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CodAddTransportationChargesDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CodAddTransportationChargesDetail.subclass:
            return CodAddTransportationChargesDetail.subclass(*args_, **kwargs_)
        else:
            return CodAddTransportationChargesDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RateTypeBasis(self):
        return self.RateTypeBasis
    def set_RateTypeBasis(self, RateTypeBasis):
        self.RateTypeBasis = RateTypeBasis
    def get_ChargeBasis(self):
        return self.ChargeBasis
    def set_ChargeBasis(self, ChargeBasis):
        self.ChargeBasis = ChargeBasis
    def get_ChargeBasisLevel(self):
        return self.ChargeBasisLevel
    def set_ChargeBasisLevel(self, ChargeBasisLevel):
        self.ChargeBasisLevel = ChargeBasisLevel
    def get_RateLevelBasis(self):
        return self.RateLevelBasis
    def set_RateLevelBasis(self, RateLevelBasis):
        self.RateLevelBasis = RateLevelBasis
    def validate_RateTypeBasisType(self, value):
        result = True
        # Validate type RateTypeBasisType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACCOUNT', 'ACTUAL', 'CURRENT', 'CUSTOM', 'LIST']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RateTypeBasisType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CodAddTransportationChargeBasisType(self, value):
        result = True
        # Validate type CodAddTransportationChargeBasisType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['COD_SURCHARGE', 'NET_CHARGE', 'NET_FREIGHT', 'TOTAL_CUSTOMER_CHARGE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CodAddTransportationChargeBasisType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_ChargeBasisLevelType(self, value):
        result = True
        # Validate type ChargeBasisLevelType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CURRENT_PACKAGE', 'SUM_OF_PACKAGES']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ChargeBasisLevelType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_RateLevelBasisType(self, value):
        result = True
        # Validate type RateLevelBasisType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BUNDLED_RATE', 'INDIVIDUAL_PACKAGE_RATE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RateLevelBasisType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.RateTypeBasis is not None or
            self.ChargeBasis is not None or
            self.ChargeBasisLevel is not None or
            self.RateLevelBasis is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CodAddTransportationChargesDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CodAddTransportationChargesDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CodAddTransportationChargesDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CodAddTransportationChargesDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CodAddTransportationChargesDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CodAddTransportationChargesDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CodAddTransportationChargesDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RateTypeBasis is not None:
            namespaceprefix_ = self.RateTypeBasis_nsprefix_ + ':' if (UseCapturedNS_ and self.RateTypeBasis_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateTypeBasis>%s</%sRateTypeBasis>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateTypeBasis), input_name='RateTypeBasis')), namespaceprefix_ , eol_))
        if self.ChargeBasis is not None:
            namespaceprefix_ = self.ChargeBasis_nsprefix_ + ':' if (UseCapturedNS_ and self.ChargeBasis_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChargeBasis>%s</%sChargeBasis>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ChargeBasis), input_name='ChargeBasis')), namespaceprefix_ , eol_))
        if self.ChargeBasisLevel is not None:
            namespaceprefix_ = self.ChargeBasisLevel_nsprefix_ + ':' if (UseCapturedNS_ and self.ChargeBasisLevel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChargeBasisLevel>%s</%sChargeBasisLevel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ChargeBasisLevel), input_name='ChargeBasisLevel')), namespaceprefix_ , eol_))
        if self.RateLevelBasis is not None:
            namespaceprefix_ = self.RateLevelBasis_nsprefix_ + ':' if (UseCapturedNS_ and self.RateLevelBasis_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateLevelBasis>%s</%sRateLevelBasis>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateLevelBasis), input_name='RateLevelBasis')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RateTypeBasis':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RateTypeBasis')
            value_ = self.gds_validate_string(value_, node, 'RateTypeBasis')
            self.RateTypeBasis = value_
            self.RateTypeBasis_nsprefix_ = child_.prefix
            # validate type RateTypeBasisType
            self.validate_RateTypeBasisType(self.RateTypeBasis)
        elif nodeName_ == 'ChargeBasis':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ChargeBasis')
            value_ = self.gds_validate_string(value_, node, 'ChargeBasis')
            self.ChargeBasis = value_
            self.ChargeBasis_nsprefix_ = child_.prefix
            # validate type CodAddTransportationChargeBasisType
            self.validate_CodAddTransportationChargeBasisType(self.ChargeBasis)
        elif nodeName_ == 'ChargeBasisLevel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ChargeBasisLevel')
            value_ = self.gds_validate_string(value_, node, 'ChargeBasisLevel')
            self.ChargeBasisLevel = value_
            self.ChargeBasisLevel_nsprefix_ = child_.prefix
            # validate type ChargeBasisLevelType
            self.validate_ChargeBasisLevelType(self.ChargeBasisLevel)
        elif nodeName_ == 'RateLevelBasis':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RateLevelBasis')
            value_ = self.gds_validate_string(value_, node, 'RateLevelBasis')
            self.RateLevelBasis = value_
            self.RateLevelBasis_nsprefix_ = child_.prefix
            # validate type RateLevelBasisType
            self.validate_RateLevelBasisType(self.RateLevelBasis)
# end class CodAddTransportationChargesDetail


class CodDetail(GeneratedsSuper):
    """Descriptive data required for a FedEx COD (Collect-On-Delivery)
    shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CodCollectionAmount=None, AddTransportationChargesDetail=None, CollectionType=None, CodRecipient=None, FinancialInstitutionContactAndAddress=None, RemitToName=None, ReferenceIndicator=None, ReturnTrackingId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CodCollectionAmount = CodCollectionAmount
        self.CodCollectionAmount_nsprefix_ = None
        self.AddTransportationChargesDetail = AddTransportationChargesDetail
        self.AddTransportationChargesDetail_nsprefix_ = None
        self.CollectionType = CollectionType
        self.validate_CodCollectionType(self.CollectionType)
        self.CollectionType_nsprefix_ = None
        self.CodRecipient = CodRecipient
        self.CodRecipient_nsprefix_ = None
        self.FinancialInstitutionContactAndAddress = FinancialInstitutionContactAndAddress
        self.FinancialInstitutionContactAndAddress_nsprefix_ = None
        self.RemitToName = RemitToName
        self.RemitToName_nsprefix_ = None
        self.ReferenceIndicator = ReferenceIndicator
        self.validate_CodReturnReferenceIndicatorType(self.ReferenceIndicator)
        self.ReferenceIndicator_nsprefix_ = None
        self.ReturnTrackingId = ReturnTrackingId
        self.ReturnTrackingId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CodDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CodDetail.subclass:
            return CodDetail.subclass(*args_, **kwargs_)
        else:
            return CodDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CodCollectionAmount(self):
        return self.CodCollectionAmount
    def set_CodCollectionAmount(self, CodCollectionAmount):
        self.CodCollectionAmount = CodCollectionAmount
    def get_AddTransportationChargesDetail(self):
        return self.AddTransportationChargesDetail
    def set_AddTransportationChargesDetail(self, AddTransportationChargesDetail):
        self.AddTransportationChargesDetail = AddTransportationChargesDetail
    def get_CollectionType(self):
        return self.CollectionType
    def set_CollectionType(self, CollectionType):
        self.CollectionType = CollectionType
    def get_CodRecipient(self):
        return self.CodRecipient
    def set_CodRecipient(self, CodRecipient):
        self.CodRecipient = CodRecipient
    def get_FinancialInstitutionContactAndAddress(self):
        return self.FinancialInstitutionContactAndAddress
    def set_FinancialInstitutionContactAndAddress(self, FinancialInstitutionContactAndAddress):
        self.FinancialInstitutionContactAndAddress = FinancialInstitutionContactAndAddress
    def get_RemitToName(self):
        return self.RemitToName
    def set_RemitToName(self, RemitToName):
        self.RemitToName = RemitToName
    def get_ReferenceIndicator(self):
        return self.ReferenceIndicator
    def set_ReferenceIndicator(self, ReferenceIndicator):
        self.ReferenceIndicator = ReferenceIndicator
    def get_ReturnTrackingId(self):
        return self.ReturnTrackingId
    def set_ReturnTrackingId(self, ReturnTrackingId):
        self.ReturnTrackingId = ReturnTrackingId
    def validate_CodCollectionType(self, value):
        result = True
        # Validate type CodCollectionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ANY', 'CASH', 'COMPANY_CHECK', 'GUARANTEED_FUNDS', 'PERSONAL_CHECK']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CodCollectionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CodReturnReferenceIndicatorType(self, value):
        result = True
        # Validate type CodReturnReferenceIndicatorType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['INVOICE', 'PO', 'REFERENCE', 'TRACKING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CodReturnReferenceIndicatorType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.CodCollectionAmount is not None or
            self.AddTransportationChargesDetail is not None or
            self.CollectionType is not None or
            self.CodRecipient is not None or
            self.FinancialInstitutionContactAndAddress is not None or
            self.RemitToName is not None or
            self.ReferenceIndicator is not None or
            self.ReturnTrackingId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CodDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CodDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CodDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CodDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CodDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CodDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CodDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CodCollectionAmount is not None:
            namespaceprefix_ = self.CodCollectionAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.CodCollectionAmount_nsprefix_) else ''
            self.CodCollectionAmount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CodCollectionAmount', pretty_print=pretty_print)
        if self.AddTransportationChargesDetail is not None:
            namespaceprefix_ = self.AddTransportationChargesDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.AddTransportationChargesDetail_nsprefix_) else ''
            self.AddTransportationChargesDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AddTransportationChargesDetail', pretty_print=pretty_print)
        if self.CollectionType is not None:
            namespaceprefix_ = self.CollectionType_nsprefix_ + ':' if (UseCapturedNS_ and self.CollectionType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCollectionType>%s</%sCollectionType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CollectionType), input_name='CollectionType')), namespaceprefix_ , eol_))
        if self.CodRecipient is not None:
            namespaceprefix_ = self.CodRecipient_nsprefix_ + ':' if (UseCapturedNS_ and self.CodRecipient_nsprefix_) else ''
            self.CodRecipient.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CodRecipient', pretty_print=pretty_print)
        if self.FinancialInstitutionContactAndAddress is not None:
            namespaceprefix_ = self.FinancialInstitutionContactAndAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.FinancialInstitutionContactAndAddress_nsprefix_) else ''
            self.FinancialInstitutionContactAndAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FinancialInstitutionContactAndAddress', pretty_print=pretty_print)
        if self.RemitToName is not None:
            namespaceprefix_ = self.RemitToName_nsprefix_ + ':' if (UseCapturedNS_ and self.RemitToName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRemitToName>%s</%sRemitToName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RemitToName), input_name='RemitToName')), namespaceprefix_ , eol_))
        if self.ReferenceIndicator is not None:
            namespaceprefix_ = self.ReferenceIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.ReferenceIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceIndicator>%s</%sReferenceIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceIndicator), input_name='ReferenceIndicator')), namespaceprefix_ , eol_))
        if self.ReturnTrackingId is not None:
            namespaceprefix_ = self.ReturnTrackingId_nsprefix_ + ':' if (UseCapturedNS_ and self.ReturnTrackingId_nsprefix_) else ''
            self.ReturnTrackingId.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReturnTrackingId', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CodCollectionAmount':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CodCollectionAmount = obj_
            obj_.original_tagname_ = 'CodCollectionAmount'
        elif nodeName_ == 'AddTransportationChargesDetail':
            obj_ = CodAddTransportationChargesDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AddTransportationChargesDetail = obj_
            obj_.original_tagname_ = 'AddTransportationChargesDetail'
        elif nodeName_ == 'CollectionType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CollectionType')
            value_ = self.gds_validate_string(value_, node, 'CollectionType')
            self.CollectionType = value_
            self.CollectionType_nsprefix_ = child_.prefix
            # validate type CodCollectionType
            self.validate_CodCollectionType(self.CollectionType)
        elif nodeName_ == 'CodRecipient':
            obj_ = Party.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CodRecipient = obj_
            obj_.original_tagname_ = 'CodRecipient'
        elif nodeName_ == 'FinancialInstitutionContactAndAddress':
            obj_ = ContactAndAddress.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FinancialInstitutionContactAndAddress = obj_
            obj_.original_tagname_ = 'FinancialInstitutionContactAndAddress'
        elif nodeName_ == 'RemitToName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RemitToName')
            value_ = self.gds_validate_string(value_, node, 'RemitToName')
            self.RemitToName = value_
            self.RemitToName_nsprefix_ = child_.prefix
        elif nodeName_ == 'ReferenceIndicator':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ReferenceIndicator')
            value_ = self.gds_validate_string(value_, node, 'ReferenceIndicator')
            self.ReferenceIndicator = value_
            self.ReferenceIndicator_nsprefix_ = child_.prefix
            # validate type CodReturnReferenceIndicatorType
            self.validate_CodReturnReferenceIndicatorType(self.ReferenceIndicator)
        elif nodeName_ == 'ReturnTrackingId':
            obj_ = TrackingId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReturnTrackingId = obj_
            obj_.original_tagname_ = 'ReturnTrackingId'
# end class CodDetail


class CompletedFreightPickupDetail(GeneratedsSuper):
    """Data resulting from the processing of an LTL Freight pickup request."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Origin=None, LineItems=None, TotalPieces=None, TotalWeight=None, TotalHandlingUnits=None, Status=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Origin = Origin
        self.Origin_nsprefix_ = None
        if LineItems is None:
            self.LineItems = []
        else:
            self.LineItems = LineItems
        self.LineItems_nsprefix_ = None
        self.TotalPieces = TotalPieces
        self.TotalPieces_nsprefix_ = None
        self.TotalWeight = TotalWeight
        self.TotalWeight_nsprefix_ = None
        self.TotalHandlingUnits = TotalHandlingUnits
        self.TotalHandlingUnits_nsprefix_ = None
        self.Status = Status
        self.validate_PickupEventType(self.Status)
        self.Status_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CompletedFreightPickupDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CompletedFreightPickupDetail.subclass:
            return CompletedFreightPickupDetail.subclass(*args_, **kwargs_)
        else:
            return CompletedFreightPickupDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Origin(self):
        return self.Origin
    def set_Origin(self, Origin):
        self.Origin = Origin
    def get_LineItems(self):
        return self.LineItems
    def set_LineItems(self, LineItems):
        self.LineItems = LineItems
    def add_LineItems(self, value):
        self.LineItems.append(value)
    def insert_LineItems_at(self, index, value):
        self.LineItems.insert(index, value)
    def replace_LineItems_at(self, index, value):
        self.LineItems[index] = value
    def get_TotalPieces(self):
        return self.TotalPieces
    def set_TotalPieces(self, TotalPieces):
        self.TotalPieces = TotalPieces
    def get_TotalWeight(self):
        return self.TotalWeight
    def set_TotalWeight(self, TotalWeight):
        self.TotalWeight = TotalWeight
    def get_TotalHandlingUnits(self):
        return self.TotalHandlingUnits
    def set_TotalHandlingUnits(self, TotalHandlingUnits):
        self.TotalHandlingUnits = TotalHandlingUnits
    def get_Status(self):
        return self.Status
    def set_Status(self, Status):
        self.Status = Status
    def validate_PickupEventType(self, value):
        result = True
        # Validate type PickupEventType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ASSIGNED_TO_DRIVER', 'CANCELED', 'DRIVER_ARRIVED', 'DRIVER_DEPARTED', 'DRIVER_EN_ROUTE', 'EXCEPTION', 'PICKED_UP', 'SCHEDULED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PickupEventType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Origin is not None or
            self.LineItems or
            self.TotalPieces is not None or
            self.TotalWeight is not None or
            self.TotalHandlingUnits is not None or
            self.Status is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompletedFreightPickupDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CompletedFreightPickupDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CompletedFreightPickupDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CompletedFreightPickupDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CompletedFreightPickupDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CompletedFreightPickupDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompletedFreightPickupDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Origin is not None:
            namespaceprefix_ = self.Origin_nsprefix_ + ':' if (UseCapturedNS_ and self.Origin_nsprefix_) else ''
            self.Origin.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Origin', pretty_print=pretty_print)
        for LineItems_ in self.LineItems:
            namespaceprefix_ = self.LineItems_nsprefix_ + ':' if (UseCapturedNS_ and self.LineItems_nsprefix_) else ''
            LineItems_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LineItems', pretty_print=pretty_print)
        if self.TotalPieces is not None:
            namespaceprefix_ = self.TotalPieces_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalPieces_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalPieces>%s</%sTotalPieces>%s' % (namespaceprefix_ , self.gds_format_integer(self.TotalPieces, input_name='TotalPieces'), namespaceprefix_ , eol_))
        if self.TotalWeight is not None:
            namespaceprefix_ = self.TotalWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalWeight_nsprefix_) else ''
            self.TotalWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalWeight', pretty_print=pretty_print)
        if self.TotalHandlingUnits is not None:
            namespaceprefix_ = self.TotalHandlingUnits_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalHandlingUnits_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalHandlingUnits>%s</%sTotalHandlingUnits>%s' % (namespaceprefix_ , self.gds_format_integer(self.TotalHandlingUnits, input_name='TotalHandlingUnits'), namespaceprefix_ , eol_))
        if self.Status is not None:
            namespaceprefix_ = self.Status_nsprefix_ + ':' if (UseCapturedNS_ and self.Status_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatus>%s</%sStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Status), input_name='Status')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Origin':
            obj_ = FreightServiceCenterDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Origin = obj_
            obj_.original_tagname_ = 'Origin'
        elif nodeName_ == 'LineItems':
            obj_ = CompletedFreightPickupLineItem.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LineItems.append(obj_)
            obj_.original_tagname_ = 'LineItems'
        elif nodeName_ == 'TotalPieces' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'TotalPieces')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'TotalPieces')
            self.TotalPieces = ival_
            self.TotalPieces_nsprefix_ = child_.prefix
        elif nodeName_ == 'TotalWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalWeight = obj_
            obj_.original_tagname_ = 'TotalWeight'
        elif nodeName_ == 'TotalHandlingUnits' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'TotalHandlingUnits')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'TotalHandlingUnits')
            self.TotalHandlingUnits = ival_
            self.TotalHandlingUnits_nsprefix_ = child_.prefix
        elif nodeName_ == 'Status':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Status')
            value_ = self.gds_validate_string(value_, node, 'Status')
            self.Status = value_
            self.Status_nsprefix_ = child_.prefix
            # validate type PickupEventType
            self.validate_PickupEventType(self.Status)
# end class CompletedFreightPickupDetail


class CompletedFreightPickupLineItem(GeneratedsSuper):
    """Data resulting from the processing of an individual line item in a LTL
    Freight pickup request."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SequenceNumber=None, Destination=None, TotalTravelTime=None, EtaDeliveryTimestamp=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.SequenceNumber = SequenceNumber
        self.SequenceNumber_nsprefix_ = None
        self.Destination = Destination
        self.Destination_nsprefix_ = None
        self.TotalTravelTime = TotalTravelTime
        self.TotalTravelTime_nsprefix_ = None
        if isinstance(EtaDeliveryTimestamp, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EtaDeliveryTimestamp, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = EtaDeliveryTimestamp
        self.EtaDeliveryTimestamp = initvalue_
        self.EtaDeliveryTimestamp_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CompletedFreightPickupLineItem)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CompletedFreightPickupLineItem.subclass:
            return CompletedFreightPickupLineItem.subclass(*args_, **kwargs_)
        else:
            return CompletedFreightPickupLineItem(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SequenceNumber(self):
        return self.SequenceNumber
    def set_SequenceNumber(self, SequenceNumber):
        self.SequenceNumber = SequenceNumber
    def get_Destination(self):
        return self.Destination
    def set_Destination(self, Destination):
        self.Destination = Destination
    def get_TotalTravelTime(self):
        return self.TotalTravelTime
    def set_TotalTravelTime(self, TotalTravelTime):
        self.TotalTravelTime = TotalTravelTime
    def get_EtaDeliveryTimestamp(self):
        return self.EtaDeliveryTimestamp
    def set_EtaDeliveryTimestamp(self, EtaDeliveryTimestamp):
        self.EtaDeliveryTimestamp = EtaDeliveryTimestamp
    def hasContent_(self):
        if (
            self.SequenceNumber is not None or
            self.Destination is not None or
            self.TotalTravelTime is not None or
            self.EtaDeliveryTimestamp is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompletedFreightPickupLineItem', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CompletedFreightPickupLineItem')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CompletedFreightPickupLineItem':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CompletedFreightPickupLineItem')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CompletedFreightPickupLineItem', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CompletedFreightPickupLineItem'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CompletedFreightPickupLineItem', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SequenceNumber is not None:
            namespaceprefix_ = self.SequenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.SequenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSequenceNumber>%s</%sSequenceNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.SequenceNumber, input_name='SequenceNumber'), namespaceprefix_ , eol_))
        if self.Destination is not None:
            namespaceprefix_ = self.Destination_nsprefix_ + ':' if (UseCapturedNS_ and self.Destination_nsprefix_) else ''
            self.Destination.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Destination', pretty_print=pretty_print)
        if self.TotalTravelTime is not None:
            namespaceprefix_ = self.TotalTravelTime_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalTravelTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalTravelTime>%s</%sTotalTravelTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TotalTravelTime), input_name='TotalTravelTime')), namespaceprefix_ , eol_))
        if self.EtaDeliveryTimestamp is not None:
            namespaceprefix_ = self.EtaDeliveryTimestamp_nsprefix_ + ':' if (UseCapturedNS_ and self.EtaDeliveryTimestamp_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEtaDeliveryTimestamp>%s</%sEtaDeliveryTimestamp>%s' % (namespaceprefix_ , self.gds_format_datetime(self.EtaDeliveryTimestamp, input_name='EtaDeliveryTimestamp'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SequenceNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'SequenceNumber')
            ival_ = self.gds_validate_integer(ival_, node, 'SequenceNumber')
            self.SequenceNumber = ival_
            self.SequenceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Destination':
            obj_ = FreightServiceCenterDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Destination = obj_
            obj_.original_tagname_ = 'Destination'
        elif nodeName_ == 'TotalTravelTime':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TotalTravelTime')
            value_ = self.gds_validate_string(value_, node, 'TotalTravelTime')
            self.TotalTravelTime = value_
            self.TotalTravelTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'EtaDeliveryTimestamp':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.EtaDeliveryTimestamp = dval_
            self.EtaDeliveryTimestamp_nsprefix_ = child_.prefix
# end class CompletedFreightPickupLineItem


class Contact(GeneratedsSuper):
    """The descriptive data for a point-of-contact person."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ContactId=None, PersonName=None, Title=None, CompanyName=None, PhoneNumber=None, PhoneExtension=None, TollFreePhoneNumber=None, PagerNumber=None, FaxNumber=None, EMailAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ContactId = ContactId
        self.ContactId_nsprefix_ = None
        self.PersonName = PersonName
        self.PersonName_nsprefix_ = None
        self.Title = Title
        self.Title_nsprefix_ = None
        self.CompanyName = CompanyName
        self.CompanyName_nsprefix_ = None
        self.PhoneNumber = PhoneNumber
        self.PhoneNumber_nsprefix_ = None
        self.PhoneExtension = PhoneExtension
        self.PhoneExtension_nsprefix_ = None
        self.TollFreePhoneNumber = TollFreePhoneNumber
        self.TollFreePhoneNumber_nsprefix_ = None
        self.PagerNumber = PagerNumber
        self.PagerNumber_nsprefix_ = None
        self.FaxNumber = FaxNumber
        self.FaxNumber_nsprefix_ = None
        self.EMailAddress = EMailAddress
        self.EMailAddress_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Contact)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Contact.subclass:
            return Contact.subclass(*args_, **kwargs_)
        else:
            return Contact(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ContactId(self):
        return self.ContactId
    def set_ContactId(self, ContactId):
        self.ContactId = ContactId
    def get_PersonName(self):
        return self.PersonName
    def set_PersonName(self, PersonName):
        self.PersonName = PersonName
    def get_Title(self):
        return self.Title
    def set_Title(self, Title):
        self.Title = Title
    def get_CompanyName(self):
        return self.CompanyName
    def set_CompanyName(self, CompanyName):
        self.CompanyName = CompanyName
    def get_PhoneNumber(self):
        return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber):
        self.PhoneNumber = PhoneNumber
    def get_PhoneExtension(self):
        return self.PhoneExtension
    def set_PhoneExtension(self, PhoneExtension):
        self.PhoneExtension = PhoneExtension
    def get_TollFreePhoneNumber(self):
        return self.TollFreePhoneNumber
    def set_TollFreePhoneNumber(self, TollFreePhoneNumber):
        self.TollFreePhoneNumber = TollFreePhoneNumber
    def get_PagerNumber(self):
        return self.PagerNumber
    def set_PagerNumber(self, PagerNumber):
        self.PagerNumber = PagerNumber
    def get_FaxNumber(self):
        return self.FaxNumber
    def set_FaxNumber(self, FaxNumber):
        self.FaxNumber = FaxNumber
    def get_EMailAddress(self):
        return self.EMailAddress
    def set_EMailAddress(self, EMailAddress):
        self.EMailAddress = EMailAddress
    def hasContent_(self):
        if (
            self.ContactId is not None or
            self.PersonName is not None or
            self.Title is not None or
            self.CompanyName is not None or
            self.PhoneNumber is not None or
            self.PhoneExtension is not None or
            self.TollFreePhoneNumber is not None or
            self.PagerNumber is not None or
            self.FaxNumber is not None or
            self.EMailAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Contact', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Contact')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Contact':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Contact')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Contact', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Contact'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Contact', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactId is not None:
            namespaceprefix_ = self.ContactId_nsprefix_ + ':' if (UseCapturedNS_ and self.ContactId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactId>%s</%sContactId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ContactId), input_name='ContactId')), namespaceprefix_ , eol_))
        if self.PersonName is not None:
            namespaceprefix_ = self.PersonName_nsprefix_ + ':' if (UseCapturedNS_ and self.PersonName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPersonName>%s</%sPersonName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PersonName), input_name='PersonName')), namespaceprefix_ , eol_))
        if self.Title is not None:
            namespaceprefix_ = self.Title_nsprefix_ + ':' if (UseCapturedNS_ and self.Title_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTitle>%s</%sTitle>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Title), input_name='Title')), namespaceprefix_ , eol_))
        if self.CompanyName is not None:
            namespaceprefix_ = self.CompanyName_nsprefix_ + ':' if (UseCapturedNS_ and self.CompanyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompanyName>%s</%sCompanyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CompanyName), input_name='CompanyName')), namespaceprefix_ , eol_))
        if self.PhoneNumber is not None:
            namespaceprefix_ = self.PhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhoneNumber>%s</%sPhoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), namespaceprefix_ , eol_))
        if self.PhoneExtension is not None:
            namespaceprefix_ = self.PhoneExtension_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneExtension_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhoneExtension>%s</%sPhoneExtension>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhoneExtension), input_name='PhoneExtension')), namespaceprefix_ , eol_))
        if self.TollFreePhoneNumber is not None:
            namespaceprefix_ = self.TollFreePhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TollFreePhoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTollFreePhoneNumber>%s</%sTollFreePhoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TollFreePhoneNumber), input_name='TollFreePhoneNumber')), namespaceprefix_ , eol_))
        if self.PagerNumber is not None:
            namespaceprefix_ = self.PagerNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PagerNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPagerNumber>%s</%sPagerNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PagerNumber), input_name='PagerNumber')), namespaceprefix_ , eol_))
        if self.FaxNumber is not None:
            namespaceprefix_ = self.FaxNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.FaxNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFaxNumber>%s</%sFaxNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FaxNumber), input_name='FaxNumber')), namespaceprefix_ , eol_))
        if self.EMailAddress is not None:
            namespaceprefix_ = self.EMailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EMailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EMailAddress), input_name='EMailAddress')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ContactId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ContactId')
            value_ = self.gds_validate_string(value_, node, 'ContactId')
            self.ContactId = value_
            self.ContactId_nsprefix_ = child_.prefix
        elif nodeName_ == 'PersonName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PersonName')
            value_ = self.gds_validate_string(value_, node, 'PersonName')
            self.PersonName = value_
            self.PersonName_nsprefix_ = child_.prefix
        elif nodeName_ == 'Title':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Title')
            value_ = self.gds_validate_string(value_, node, 'Title')
            self.Title = value_
            self.Title_nsprefix_ = child_.prefix
        elif nodeName_ == 'CompanyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CompanyName')
            value_ = self.gds_validate_string(value_, node, 'CompanyName')
            self.CompanyName = value_
            self.CompanyName_nsprefix_ = child_.prefix
        elif nodeName_ == 'PhoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhoneNumber')
            value_ = self.gds_validate_string(value_, node, 'PhoneNumber')
            self.PhoneNumber = value_
            self.PhoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'PhoneExtension':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhoneExtension')
            value_ = self.gds_validate_string(value_, node, 'PhoneExtension')
            self.PhoneExtension = value_
            self.PhoneExtension_nsprefix_ = child_.prefix
        elif nodeName_ == 'TollFreePhoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TollFreePhoneNumber')
            value_ = self.gds_validate_string(value_, node, 'TollFreePhoneNumber')
            self.TollFreePhoneNumber = value_
            self.TollFreePhoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'PagerNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PagerNumber')
            value_ = self.gds_validate_string(value_, node, 'PagerNumber')
            self.PagerNumber = value_
            self.PagerNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'FaxNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FaxNumber')
            value_ = self.gds_validate_string(value_, node, 'FaxNumber')
            self.FaxNumber = value_
            self.FaxNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'EMailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EMailAddress')
            value_ = self.gds_validate_string(value_, node, 'EMailAddress')
            self.EMailAddress = value_
            self.EMailAddress_nsprefix_ = child_.prefix
# end class Contact


class ContactAndAddress(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Contact=None, Address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Contact = Contact
        self.Contact_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactAndAddress)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactAndAddress.subclass:
            return ContactAndAddress.subclass(*args_, **kwargs_)
        else:
            return ContactAndAddress(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Contact(self):
        return self.Contact
    def set_Contact(self, Contact):
        self.Contact = Contact
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def hasContent_(self):
        if (
            self.Contact is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ContactAndAddress', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContactAndAddress')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContactAndAddress':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContactAndAddress')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContactAndAddress', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContactAndAddress'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ContactAndAddress', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Contact is not None:
            namespaceprefix_ = self.Contact_nsprefix_ + ':' if (UseCapturedNS_ and self.Contact_nsprefix_) else ''
            self.Contact.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Contact', pretty_print=pretty_print)
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Contact':
            obj_ = Contact.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Address':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class ContactAndAddress


class CreatePickupReply(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, PickupConfirmationNumber=None, Location=None, MessageCode=None, Message=None, PRPControlNumber=None, LastAccessTime=None, CompletedFreightPickupDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HighestSeverity = HighestSeverity
        self.validate_NotificationSeverityType(self.HighestSeverity)
        self.HighestSeverity_nsprefix_ = None
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.Notifications_nsprefix_ = None
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = None
        self.Version = Version
        self.Version_nsprefix_ = None
        self.PickupConfirmationNumber = PickupConfirmationNumber
        self.PickupConfirmationNumber_nsprefix_ = None
        self.Location = Location
        self.Location_nsprefix_ = None
        self.MessageCode = MessageCode
        self.MessageCode_nsprefix_ = None
        self.Message = Message
        self.Message_nsprefix_ = None
        self.PRPControlNumber = PRPControlNumber
        self.PRPControlNumber_nsprefix_ = None
        if isinstance(LastAccessTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LastAccessTime, '%H:%M:%S').time()
        else:
            initvalue_ = LastAccessTime
        self.LastAccessTime = initvalue_
        self.LastAccessTime_nsprefix_ = None
        self.CompletedFreightPickupDetail = CompletedFreightPickupDetail
        self.CompletedFreightPickupDetail_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CreatePickupReply)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CreatePickupReply.subclass:
            return CreatePickupReply.subclass(*args_, **kwargs_)
        else:
            return CreatePickupReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HighestSeverity(self):
        return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity):
        self.HighestSeverity = HighestSeverity
    def get_Notifications(self):
        return self.Notifications
    def set_Notifications(self, Notifications):
        self.Notifications = Notifications
    def add_Notifications(self, value):
        self.Notifications.append(value)
    def insert_Notifications_at(self, index, value):
        self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value):
        self.Notifications[index] = value
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_PickupConfirmationNumber(self):
        return self.PickupConfirmationNumber
    def set_PickupConfirmationNumber(self, PickupConfirmationNumber):
        self.PickupConfirmationNumber = PickupConfirmationNumber
    def get_Location(self):
        return self.Location
    def set_Location(self, Location):
        self.Location = Location
    def get_MessageCode(self):
        return self.MessageCode
    def set_MessageCode(self, MessageCode):
        self.MessageCode = MessageCode
    def get_Message(self):
        return self.Message
    def set_Message(self, Message):
        self.Message = Message
    def get_PRPControlNumber(self):
        return self.PRPControlNumber
    def set_PRPControlNumber(self, PRPControlNumber):
        self.PRPControlNumber = PRPControlNumber
    def get_LastAccessTime(self):
        return self.LastAccessTime
    def set_LastAccessTime(self, LastAccessTime):
        self.LastAccessTime = LastAccessTime
    def get_CompletedFreightPickupDetail(self):
        return self.CompletedFreightPickupDetail
    def set_CompletedFreightPickupDetail(self, CompletedFreightPickupDetail):
        self.CompletedFreightPickupDetail = CompletedFreightPickupDetail
    def validate_NotificationSeverityType(self, value):
        result = True
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.PickupConfirmationNumber is not None or
            self.Location is not None or
            self.MessageCode is not None or
            self.Message is not None or
            self.PRPControlNumber is not None or
            self.LastAccessTime is not None or
            self.CompletedFreightPickupDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CreatePickupReply', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CreatePickupReply')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CreatePickupReply':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CreatePickupReply')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CreatePickupReply', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CreatePickupReply'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CreatePickupReply', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HighestSeverity is not None:
            namespaceprefix_ = self.HighestSeverity_nsprefix_ + ':' if (UseCapturedNS_ and self.HighestSeverity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HighestSeverity), input_name='HighestSeverity')), namespaceprefix_ , eol_))
        for Notifications_ in self.Notifications:
            namespaceprefix_ = self.Notifications_nsprefix_ + ':' if (UseCapturedNS_ and self.Notifications_nsprefix_) else ''
            Notifications_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Notifications', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        if self.PickupConfirmationNumber is not None:
            namespaceprefix_ = self.PickupConfirmationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PickupConfirmationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPickupConfirmationNumber>%s</%sPickupConfirmationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PickupConfirmationNumber), input_name='PickupConfirmationNumber')), namespaceprefix_ , eol_))
        if self.Location is not None:
            namespaceprefix_ = self.Location_nsprefix_ + ':' if (UseCapturedNS_ and self.Location_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocation>%s</%sLocation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Location), input_name='Location')), namespaceprefix_ , eol_))
        if self.MessageCode is not None:
            namespaceprefix_ = self.MessageCode_nsprefix_ + ':' if (UseCapturedNS_ and self.MessageCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMessageCode>%s</%sMessageCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MessageCode), input_name='MessageCode')), namespaceprefix_ , eol_))
        if self.Message is not None:
            namespaceprefix_ = self.Message_nsprefix_ + ':' if (UseCapturedNS_ and self.Message_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMessage>%s</%sMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Message), input_name='Message')), namespaceprefix_ , eol_))
        if self.PRPControlNumber is not None:
            namespaceprefix_ = self.PRPControlNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PRPControlNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPRPControlNumber>%s</%sPRPControlNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PRPControlNumber), input_name='PRPControlNumber')), namespaceprefix_ , eol_))
        if self.LastAccessTime is not None:
            namespaceprefix_ = self.LastAccessTime_nsprefix_ + ':' if (UseCapturedNS_ and self.LastAccessTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLastAccessTime>%s</%sLastAccessTime>%s' % (namespaceprefix_ , self.gds_format_time(self.LastAccessTime, input_name='LastAccessTime'), namespaceprefix_ , eol_))
        if self.CompletedFreightPickupDetail is not None:
            namespaceprefix_ = self.CompletedFreightPickupDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CompletedFreightPickupDetail_nsprefix_) else ''
            self.CompletedFreightPickupDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CompletedFreightPickupDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HighestSeverity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HighestSeverity')
            value_ = self.gds_validate_string(value_, node, 'HighestSeverity')
            self.HighestSeverity = value_
            self.HighestSeverity_nsprefix_ = child_.prefix
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.HighestSeverity)
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'PickupConfirmationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PickupConfirmationNumber')
            value_ = self.gds_validate_string(value_, node, 'PickupConfirmationNumber')
            self.PickupConfirmationNumber = value_
            self.PickupConfirmationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Location':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Location')
            value_ = self.gds_validate_string(value_, node, 'Location')
            self.Location = value_
            self.Location_nsprefix_ = child_.prefix
        elif nodeName_ == 'MessageCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MessageCode')
            value_ = self.gds_validate_string(value_, node, 'MessageCode')
            self.MessageCode = value_
            self.MessageCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'Message':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Message')
            value_ = self.gds_validate_string(value_, node, 'Message')
            self.Message = value_
            self.Message_nsprefix_ = child_.prefix
        elif nodeName_ == 'PRPControlNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PRPControlNumber')
            value_ = self.gds_validate_string(value_, node, 'PRPControlNumber')
            self.PRPControlNumber = value_
            self.PRPControlNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'LastAccessTime':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.LastAccessTime = dval_
            self.LastAccessTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'CompletedFreightPickupDetail':
            obj_ = CompletedFreightPickupDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CompletedFreightPickupDetail = obj_
            obj_.original_tagname_ = 'CompletedFreightPickupDetail'
# end class CreatePickupReply


class CreatePickupRequest(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, AssociatedAccountNumber=None, TrackingNumber=None, OriginDetail=None, PickupServiceCategory=None, FreightPickupDetail=None, ExpressFreightDetail=None, PackageCount=None, TotalWeight=None, CarrierCode=None, OversizePackageCount=None, Remarks=None, CommodityDescription=None, CountryRelationship=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.WebAuthenticationDetail_nsprefix_ = None
        self.ClientDetail = ClientDetail
        self.ClientDetail_nsprefix_ = None
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = None
        self.Version = Version
        self.Version_nsprefix_ = None
        self.AssociatedAccountNumber = AssociatedAccountNumber
        self.AssociatedAccountNumber_nsprefix_ = None
        self.TrackingNumber = TrackingNumber
        self.TrackingNumber_nsprefix_ = None
        self.OriginDetail = OriginDetail
        self.OriginDetail_nsprefix_ = None
        self.PickupServiceCategory = PickupServiceCategory
        self.validate_PickupServiceCategoryType(self.PickupServiceCategory)
        self.PickupServiceCategory_nsprefix_ = None
        self.FreightPickupDetail = FreightPickupDetail
        self.FreightPickupDetail_nsprefix_ = None
        self.ExpressFreightDetail = ExpressFreightDetail
        self.ExpressFreightDetail_nsprefix_ = None
        self.PackageCount = PackageCount
        self.PackageCount_nsprefix_ = None
        self.TotalWeight = TotalWeight
        self.TotalWeight_nsprefix_ = None
        self.CarrierCode = CarrierCode
        self.validate_CarrierCodeType(self.CarrierCode)
        self.CarrierCode_nsprefix_ = None
        self.OversizePackageCount = OversizePackageCount
        self.OversizePackageCount_nsprefix_ = None
        self.Remarks = Remarks
        self.Remarks_nsprefix_ = None
        self.CommodityDescription = CommodityDescription
        self.CommodityDescription_nsprefix_ = None
        self.CountryRelationship = CountryRelationship
        self.validate_CountryRelationshipType(self.CountryRelationship)
        self.CountryRelationship_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CreatePickupRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CreatePickupRequest.subclass:
            return CreatePickupRequest.subclass(*args_, **kwargs_)
        else:
            return CreatePickupRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_WebAuthenticationDetail(self):
        return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail):
        self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self):
        return self.ClientDetail
    def set_ClientDetail(self, ClientDetail):
        self.ClientDetail = ClientDetail
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_AssociatedAccountNumber(self):
        return self.AssociatedAccountNumber
    def set_AssociatedAccountNumber(self, AssociatedAccountNumber):
        self.AssociatedAccountNumber = AssociatedAccountNumber
    def get_TrackingNumber(self):
        return self.TrackingNumber
    def set_TrackingNumber(self, TrackingNumber):
        self.TrackingNumber = TrackingNumber
    def get_OriginDetail(self):
        return self.OriginDetail
    def set_OriginDetail(self, OriginDetail):
        self.OriginDetail = OriginDetail
    def get_PickupServiceCategory(self):
        return self.PickupServiceCategory
    def set_PickupServiceCategory(self, PickupServiceCategory):
        self.PickupServiceCategory = PickupServiceCategory
    def get_FreightPickupDetail(self):
        return self.FreightPickupDetail
    def set_FreightPickupDetail(self, FreightPickupDetail):
        self.FreightPickupDetail = FreightPickupDetail
    def get_ExpressFreightDetail(self):
        return self.ExpressFreightDetail
    def set_ExpressFreightDetail(self, ExpressFreightDetail):
        self.ExpressFreightDetail = ExpressFreightDetail
    def get_PackageCount(self):
        return self.PackageCount
    def set_PackageCount(self, PackageCount):
        self.PackageCount = PackageCount
    def get_TotalWeight(self):
        return self.TotalWeight
    def set_TotalWeight(self, TotalWeight):
        self.TotalWeight = TotalWeight
    def get_CarrierCode(self):
        return self.CarrierCode
    def set_CarrierCode(self, CarrierCode):
        self.CarrierCode = CarrierCode
    def get_OversizePackageCount(self):
        return self.OversizePackageCount
    def set_OversizePackageCount(self, OversizePackageCount):
        self.OversizePackageCount = OversizePackageCount
    def get_Remarks(self):
        return self.Remarks
    def set_Remarks(self, Remarks):
        self.Remarks = Remarks
    def get_CommodityDescription(self):
        return self.CommodityDescription
    def set_CommodityDescription(self, CommodityDescription):
        self.CommodityDescription = CommodityDescription
    def get_CountryRelationship(self):
        return self.CountryRelationship
    def set_CountryRelationship(self, CountryRelationship):
        self.CountryRelationship = CountryRelationship
    def validate_PickupServiceCategoryType(self, value):
        result = True
        # Validate type PickupServiceCategoryType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_DISTANCE_DEFERRED', 'FEDEX_NEXT_DAY_AFTERNOON', 'FEDEX_NEXT_DAY_EARLY_MORNING', 'FEDEX_NEXT_DAY_END_OF_DAY', 'FEDEX_NEXT_DAY_FREIGHT', 'FEDEX_NEXT_DAY_MID_MORNING', 'SAME_DAY', 'SAME_DAY_CITY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PickupServiceCategoryType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CarrierCodeType(self, value):
        result = True
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FXCC', 'FXFR', 'FXSP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CarrierCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CountryRelationshipType(self, value):
        result = True
        # Validate type CountryRelationshipType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DOMESTIC', 'INTERNATIONAL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CountryRelationshipType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.AssociatedAccountNumber is not None or
            self.TrackingNumber is not None or
            self.OriginDetail is not None or
            self.PickupServiceCategory is not None or
            self.FreightPickupDetail is not None or
            self.ExpressFreightDetail is not None or
            self.PackageCount is not None or
            self.TotalWeight is not None or
            self.CarrierCode is not None or
            self.OversizePackageCount is not None or
            self.Remarks is not None or
            self.CommodityDescription is not None or
            self.CountryRelationship is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CreatePickupRequest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CreatePickupRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CreatePickupRequest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CreatePickupRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CreatePickupRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CreatePickupRequest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CreatePickupRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WebAuthenticationDetail is not None:
            namespaceprefix_ = self.WebAuthenticationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.WebAuthenticationDetail_nsprefix_) else ''
            self.WebAuthenticationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WebAuthenticationDetail', pretty_print=pretty_print)
        if self.ClientDetail is not None:
            namespaceprefix_ = self.ClientDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientDetail_nsprefix_) else ''
            self.ClientDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClientDetail', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        if self.AssociatedAccountNumber is not None:
            namespaceprefix_ = self.AssociatedAccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.AssociatedAccountNumber_nsprefix_) else ''
            self.AssociatedAccountNumber.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AssociatedAccountNumber', pretty_print=pretty_print)
        if self.TrackingNumber is not None:
            namespaceprefix_ = self.TrackingNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTrackingNumber>%s</%sTrackingNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumber), input_name='TrackingNumber')), namespaceprefix_ , eol_))
        if self.OriginDetail is not None:
            namespaceprefix_ = self.OriginDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginDetail_nsprefix_) else ''
            self.OriginDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OriginDetail', pretty_print=pretty_print)
        if self.PickupServiceCategory is not None:
            namespaceprefix_ = self.PickupServiceCategory_nsprefix_ + ':' if (UseCapturedNS_ and self.PickupServiceCategory_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPickupServiceCategory>%s</%sPickupServiceCategory>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PickupServiceCategory), input_name='PickupServiceCategory')), namespaceprefix_ , eol_))
        if self.FreightPickupDetail is not None:
            namespaceprefix_ = self.FreightPickupDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightPickupDetail_nsprefix_) else ''
            self.FreightPickupDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreightPickupDetail', pretty_print=pretty_print)
        if self.ExpressFreightDetail is not None:
            namespaceprefix_ = self.ExpressFreightDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ExpressFreightDetail_nsprefix_) else ''
            self.ExpressFreightDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExpressFreightDetail', pretty_print=pretty_print)
        if self.PackageCount is not None:
            namespaceprefix_ = self.PackageCount_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackageCount>%s</%sPackageCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.PackageCount, input_name='PackageCount'), namespaceprefix_ , eol_))
        if self.TotalWeight is not None:
            namespaceprefix_ = self.TotalWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalWeight_nsprefix_) else ''
            self.TotalWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalWeight', pretty_print=pretty_print)
        if self.CarrierCode is not None:
            namespaceprefix_ = self.CarrierCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CarrierCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrierCode>%s</%sCarrierCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CarrierCode), input_name='CarrierCode')), namespaceprefix_ , eol_))
        if self.OversizePackageCount is not None:
            namespaceprefix_ = self.OversizePackageCount_nsprefix_ + ':' if (UseCapturedNS_ and self.OversizePackageCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOversizePackageCount>%s</%sOversizePackageCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.OversizePackageCount, input_name='OversizePackageCount'), namespaceprefix_ , eol_))
        if self.Remarks is not None:
            namespaceprefix_ = self.Remarks_nsprefix_ + ':' if (UseCapturedNS_ and self.Remarks_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRemarks>%s</%sRemarks>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Remarks), input_name='Remarks')), namespaceprefix_ , eol_))
        if self.CommodityDescription is not None:
            namespaceprefix_ = self.CommodityDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.CommodityDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommodityDescription>%s</%sCommodityDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CommodityDescription), input_name='CommodityDescription')), namespaceprefix_ , eol_))
        if self.CountryRelationship is not None:
            namespaceprefix_ = self.CountryRelationship_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryRelationship_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryRelationship>%s</%sCountryRelationship>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryRelationship), input_name='CountryRelationship')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WebAuthenticationDetail = obj_
            obj_.original_tagname_ = 'WebAuthenticationDetail'
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClientDetail = obj_
            obj_.original_tagname_ = 'ClientDetail'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'AssociatedAccountNumber':
            obj_ = AssociatedAccount.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AssociatedAccountNumber = obj_
            obj_.original_tagname_ = 'AssociatedAccountNumber'
        elif nodeName_ == 'TrackingNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TrackingNumber')
            value_ = self.gds_validate_string(value_, node, 'TrackingNumber')
            self.TrackingNumber = value_
            self.TrackingNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'OriginDetail':
            obj_ = PickupOriginDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OriginDetail = obj_
            obj_.original_tagname_ = 'OriginDetail'
        elif nodeName_ == 'PickupServiceCategory':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PickupServiceCategory')
            value_ = self.gds_validate_string(value_, node, 'PickupServiceCategory')
            self.PickupServiceCategory = value_
            self.PickupServiceCategory_nsprefix_ = child_.prefix
            # validate type PickupServiceCategoryType
            self.validate_PickupServiceCategoryType(self.PickupServiceCategory)
        elif nodeName_ == 'FreightPickupDetail':
            obj_ = FreightPickupDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreightPickupDetail = obj_
            obj_.original_tagname_ = 'FreightPickupDetail'
        elif nodeName_ == 'ExpressFreightDetail':
            obj_ = ExpressFreightPickupDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExpressFreightDetail = obj_
            obj_.original_tagname_ = 'ExpressFreightDetail'
        elif nodeName_ == 'PackageCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PackageCount')
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PackageCount')
            self.PackageCount = ival_
            self.PackageCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'TotalWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalWeight = obj_
            obj_.original_tagname_ = 'TotalWeight'
        elif nodeName_ == 'CarrierCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CarrierCode')
            value_ = self.gds_validate_string(value_, node, 'CarrierCode')
            self.CarrierCode = value_
            self.CarrierCode_nsprefix_ = child_.prefix
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.CarrierCode)
        elif nodeName_ == 'OversizePackageCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'OversizePackageCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'OversizePackageCount')
            self.OversizePackageCount = ival_
            self.OversizePackageCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'Remarks':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Remarks')
            value_ = self.gds_validate_string(value_, node, 'Remarks')
            self.Remarks = value_
            self.Remarks_nsprefix_ = child_.prefix
        elif nodeName_ == 'CommodityDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CommodityDescription')
            value_ = self.gds_validate_string(value_, node, 'CommodityDescription')
            self.CommodityDescription = value_
            self.CommodityDescription_nsprefix_ = child_.prefix
        elif nodeName_ == 'CountryRelationship':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryRelationship')
            value_ = self.gds_validate_string(value_, node, 'CountryRelationship')
            self.CountryRelationship = value_
            self.CountryRelationship_nsprefix_ = child_.prefix
            # validate type CountryRelationshipType
            self.validate_CountryRelationshipType(self.CountryRelationship)
# end class CreatePickupRequest


class CustomDeliveryWindowDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, RequestTime=None, RequestRange=None, RequestDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_CustomDeliveryWindowType(self.Type)
        self.Type_nsprefix_ = None
        if isinstance(RequestTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RequestTime, '%H:%M:%S').time()
        else:
            initvalue_ = RequestTime
        self.RequestTime = initvalue_
        self.RequestTime_nsprefix_ = None
        self.RequestRange = RequestRange
        self.RequestRange_nsprefix_ = None
        if isinstance(RequestDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RequestDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RequestDate
        self.RequestDate = initvalue_
        self.RequestDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomDeliveryWindowDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomDeliveryWindowDetail.subclass:
            return CustomDeliveryWindowDetail.subclass(*args_, **kwargs_)
        else:
            return CustomDeliveryWindowDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_RequestTime(self):
        return self.RequestTime
    def set_RequestTime(self, RequestTime):
        self.RequestTime = RequestTime
    def get_RequestRange(self):
        return self.RequestRange
    def set_RequestRange(self, RequestRange):
        self.RequestRange = RequestRange
    def get_RequestDate(self):
        return self.RequestDate
    def set_RequestDate(self, RequestDate):
        self.RequestDate = RequestDate
    def validate_CustomDeliveryWindowType(self, value):
        result = True
        # Validate type CustomDeliveryWindowType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['AFTER', 'BEFORE', 'BETWEEN', 'ON']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CustomDeliveryWindowType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.RequestTime is not None or
            self.RequestRange is not None or
            self.RequestDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomDeliveryWindowDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomDeliveryWindowDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomDeliveryWindowDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomDeliveryWindowDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomDeliveryWindowDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomDeliveryWindowDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CustomDeliveryWindowDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.RequestTime is not None:
            namespaceprefix_ = self.RequestTime_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestTime>%s</%sRequestTime>%s' % (namespaceprefix_ , self.gds_format_time(self.RequestTime, input_name='RequestTime'), namespaceprefix_ , eol_))
        if self.RequestRange is not None:
            namespaceprefix_ = self.RequestRange_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestRange_nsprefix_) else ''
            self.RequestRange.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RequestRange', pretty_print=pretty_print)
        if self.RequestDate is not None:
            namespaceprefix_ = self.RequestDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestDate>%s</%sRequestDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RequestDate, input_name='RequestDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type CustomDeliveryWindowType
            self.validate_CustomDeliveryWindowType(self.Type)
        elif nodeName_ == 'RequestTime':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.RequestTime = dval_
            self.RequestTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'RequestRange':
            obj_ = DateRange.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RequestRange = obj_
            obj_.original_tagname_ = 'RequestRange'
        elif nodeName_ == 'RequestDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RequestDate = dval_
            self.RequestDate_nsprefix_ = child_.prefix
# end class CustomDeliveryWindowDetail


class DateRange(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Begins=None, Ends=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(Begins, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Begins, '%Y-%m-%d').date()
        else:
            initvalue_ = Begins
        self.Begins = initvalue_
        self.Begins_nsprefix_ = None
        if isinstance(Ends, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Ends, '%Y-%m-%d').date()
        else:
            initvalue_ = Ends
        self.Ends = initvalue_
        self.Ends_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DateRange)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DateRange.subclass:
            return DateRange.subclass(*args_, **kwargs_)
        else:
            return DateRange(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Begins(self):
        return self.Begins
    def set_Begins(self, Begins):
        self.Begins = Begins
    def get_Ends(self):
        return self.Ends
    def set_Ends(self, Ends):
        self.Ends = Ends
    def hasContent_(self):
        if (
            self.Begins is not None or
            self.Ends is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DateRange', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DateRange')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DateRange':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DateRange')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DateRange', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DateRange'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DateRange', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Begins is not None:
            namespaceprefix_ = self.Begins_nsprefix_ + ':' if (UseCapturedNS_ and self.Begins_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBegins>%s</%sBegins>%s' % (namespaceprefix_ , self.gds_format_date(self.Begins, input_name='Begins'), namespaceprefix_ , eol_))
        if self.Ends is not None:
            namespaceprefix_ = self.Ends_nsprefix_ + ':' if (UseCapturedNS_ and self.Ends_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEnds>%s</%sEnds>%s' % (namespaceprefix_ , self.gds_format_date(self.Ends, input_name='Ends'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Begins':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Begins = dval_
            self.Begins_nsprefix_ = child_.prefix
        elif nodeName_ == 'Ends':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Ends = dval_
            self.Ends_nsprefix_ = child_.prefix
# end class DateRange


class DeliveryOnInvoiceAcceptanceDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Recipient=None, TrackingId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Recipient = Recipient
        self.Recipient_nsprefix_ = None
        self.TrackingId = TrackingId
        self.TrackingId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeliveryOnInvoiceAcceptanceDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeliveryOnInvoiceAcceptanceDetail.subclass:
            return DeliveryOnInvoiceAcceptanceDetail.subclass(*args_, **kwargs_)
        else:
            return DeliveryOnInvoiceAcceptanceDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Recipient(self):
        return self.Recipient
    def set_Recipient(self, Recipient):
        self.Recipient = Recipient
    def get_TrackingId(self):
        return self.TrackingId
    def set_TrackingId(self, TrackingId):
        self.TrackingId = TrackingId
    def hasContent_(self):
        if (
            self.Recipient is not None or
            self.TrackingId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeliveryOnInvoiceAcceptanceDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeliveryOnInvoiceAcceptanceDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DeliveryOnInvoiceAcceptanceDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DeliveryOnInvoiceAcceptanceDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DeliveryOnInvoiceAcceptanceDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DeliveryOnInvoiceAcceptanceDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DeliveryOnInvoiceAcceptanceDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Recipient is not None:
            namespaceprefix_ = self.Recipient_nsprefix_ + ':' if (UseCapturedNS_ and self.Recipient_nsprefix_) else ''
            self.Recipient.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Recipient', pretty_print=pretty_print)
        if self.TrackingId is not None:
            namespaceprefix_ = self.TrackingId_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingId_nsprefix_) else ''
            self.TrackingId.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TrackingId', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Recipient':
            obj_ = Party.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Recipient = obj_
            obj_.original_tagname_ = 'Recipient'
        elif nodeName_ == 'TrackingId':
            obj_ = TrackingId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TrackingId = obj_
            obj_.original_tagname_ = 'TrackingId'
# end class DeliveryOnInvoiceAcceptanceDetail


class DetentionDetail(GeneratedsSuper):
    """Specifications for pup/set or vehicle delayed for loading or
    unloading."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Duration=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Duration = Duration
        self.Duration_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DetentionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DetentionDetail.subclass:
            return DetentionDetail.subclass(*args_, **kwargs_)
        else:
            return DetentionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Duration(self):
        return self.Duration
    def set_Duration(self, Duration):
        self.Duration = Duration
    def hasContent_(self):
        if (
            self.Duration is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DetentionDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DetentionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DetentionDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DetentionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DetentionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DetentionDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='DetentionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Duration is not None:
            namespaceprefix_ = self.Duration_nsprefix_ + ':' if (UseCapturedNS_ and self.Duration_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDuration>%s</%sDuration>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Duration), input_name='Duration')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Duration':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Duration')
            value_ = self.gds_validate_string(value_, node, 'Duration')
            self.Duration = value_
            self.Duration_nsprefix_ = child_.prefix
# end class DetentionDetail


class Dimensions(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Length=None, Width=None, Height=None, Units=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Length = Length
        self.Length_nsprefix_ = None
        self.Width = Width
        self.Width_nsprefix_ = None
        self.Height = Height
        self.Height_nsprefix_ = None
        self.Units = Units
        self.validate_LinearUnits(self.Units)
        self.Units_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Dimensions)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Dimensions.subclass:
            return Dimensions.subclass(*args_, **kwargs_)
        else:
            return Dimensions(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Length(self):
        return self.Length
    def set_Length(self, Length):
        self.Length = Length
    def get_Width(self):
        return self.Width
    def set_Width(self, Width):
        self.Width = Width
    def get_Height(self):
        return self.Height
    def set_Height(self, Height):
        self.Height = Height
    def get_Units(self):
        return self.Units
    def set_Units(self, Units):
        self.Units = Units
    def validate_LinearUnits(self, value):
        result = True
        # Validate type LinearUnits, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CM', 'IN']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on LinearUnits' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Length is not None or
            self.Width is not None or
            self.Height is not None or
            self.Units is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Dimensions', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Dimensions')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Dimensions':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Dimensions')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Dimensions', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Dimensions'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Dimensions', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Length is not None:
            namespaceprefix_ = self.Length_nsprefix_ + ':' if (UseCapturedNS_ and self.Length_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLength>%s</%sLength>%s' % (namespaceprefix_ , self.gds_format_integer(self.Length, input_name='Length'), namespaceprefix_ , eol_))
        if self.Width is not None:
            namespaceprefix_ = self.Width_nsprefix_ + ':' if (UseCapturedNS_ and self.Width_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWidth>%s</%sWidth>%s' % (namespaceprefix_ , self.gds_format_integer(self.Width, input_name='Width'), namespaceprefix_ , eol_))
        if self.Height is not None:
            namespaceprefix_ = self.Height_nsprefix_ + ':' if (UseCapturedNS_ and self.Height_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHeight>%s</%sHeight>%s' % (namespaceprefix_ , self.gds_format_integer(self.Height, input_name='Height'), namespaceprefix_ , eol_))
        if self.Units is not None:
            namespaceprefix_ = self.Units_nsprefix_ + ':' if (UseCapturedNS_ and self.Units_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnits>%s</%sUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Length' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Length')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Length')
            self.Length = ival_
            self.Length_nsprefix_ = child_.prefix
        elif nodeName_ == 'Width' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Width')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Width')
            self.Width = ival_
            self.Width_nsprefix_ = child_.prefix
        elif nodeName_ == 'Height' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Height')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Height')
            self.Height = ival_
            self.Height_nsprefix_ = child_.prefix
        elif nodeName_ == 'Units':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Units')
            value_ = self.gds_validate_string(value_, node, 'Units')
            self.Units = value_
            self.Units_nsprefix_ = child_.prefix
            # validate type LinearUnits
            self.validate_LinearUnits(self.Units)
# end class Dimensions


class Distance(GeneratedsSuper):
    """Driving or other transportation distances, distinct from dimension
    measurements."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Value=None, Units=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
        self.Units = Units
        self.validate_DistanceUnits(self.Units)
        self.Units_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Distance)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Distance.subclass:
            return Distance.subclass(*args_, **kwargs_)
        else:
            return Distance(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def get_Units(self):
        return self.Units
    def set_Units(self, Units):
        self.Units = Units
    def validate_DistanceUnits(self, value):
        result = True
        # Validate type DistanceUnits, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['KM', 'MI']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DistanceUnits' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Value is not None or
            self.Units is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Distance', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Distance')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Distance':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Distance')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Distance', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Distance'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Distance', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Value, input_name='Value'), namespaceprefix_ , eol_))
        if self.Units is not None:
            namespaceprefix_ = self.Units_nsprefix_ + ':' if (UseCapturedNS_ and self.Units_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnits>%s</%sUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Value' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Value')
            fval_ = self.gds_validate_decimal(fval_, node, 'Value')
            self.Value = fval_
            self.Value_nsprefix_ = child_.prefix
        elif nodeName_ == 'Units':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Units')
            value_ = self.gds_validate_string(value_, node, 'Units')
            self.Units = value_
            self.Units_nsprefix_ = child_.prefix
            # validate type DistanceUnits
            self.validate_DistanceUnits(self.Units)
# end class Distance


class EMailDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EmailAddress=None, Name=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.EmailAddress = EmailAddress
        self.EmailAddress_nsprefix_ = None
        self.Name = Name
        self.Name_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EMailDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EMailDetail.subclass:
            return EMailDetail.subclass(*args_, **kwargs_)
        else:
            return EMailDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EmailAddress(self):
        return self.EmailAddress
    def set_EmailAddress(self, EmailAddress):
        self.EmailAddress = EmailAddress
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def hasContent_(self):
        if (
            self.EmailAddress is not None or
            self.Name is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMailDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EMailDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EMailDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EMailDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EMailDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EMailDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMailDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EmailAddress is not None:
            namespaceprefix_ = self.EmailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EmailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmailAddress>%s</%sEmailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EmailAddress), input_name='EmailAddress')), namespaceprefix_ , eol_))
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EmailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EmailAddress')
            value_ = self.gds_validate_string(value_, node, 'EmailAddress')
            self.EmailAddress = value_
            self.EmailAddress_nsprefix_ = child_.prefix
        elif nodeName_ == 'Name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Name')
            value_ = self.gds_validate_string(value_, node, 'Name')
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
# end class EMailDetail


class EMailLabelDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Message=None, Recipients=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Message = Message
        self.Message_nsprefix_ = None
        if Recipients is None:
            self.Recipients = []
        else:
            self.Recipients = Recipients
        self.Recipients_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EMailLabelDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EMailLabelDetail.subclass:
            return EMailLabelDetail.subclass(*args_, **kwargs_)
        else:
            return EMailLabelDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Message(self):
        return self.Message
    def set_Message(self, Message):
        self.Message = Message
    def get_Recipients(self):
        return self.Recipients
    def set_Recipients(self, Recipients):
        self.Recipients = Recipients
    def add_Recipients(self, value):
        self.Recipients.append(value)
    def insert_Recipients_at(self, index, value):
        self.Recipients.insert(index, value)
    def replace_Recipients_at(self, index, value):
        self.Recipients[index] = value
    def hasContent_(self):
        if (
            self.Message is not None or
            self.Recipients
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMailLabelDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EMailLabelDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EMailLabelDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EMailLabelDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EMailLabelDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EMailLabelDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMailLabelDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Message is not None:
            namespaceprefix_ = self.Message_nsprefix_ + ':' if (UseCapturedNS_ and self.Message_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMessage>%s</%sMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Message), input_name='Message')), namespaceprefix_ , eol_))
        for Recipients_ in self.Recipients:
            namespaceprefix_ = self.Recipients_nsprefix_ + ':' if (UseCapturedNS_ and self.Recipients_nsprefix_) else ''
            Recipients_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Recipients', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Message':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Message')
            value_ = self.gds_validate_string(value_, node, 'Message')
            self.Message = value_
            self.Message_nsprefix_ = child_.prefix
        elif nodeName_ == 'Recipients':
            obj_ = EMailRecipient.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Recipients.append(obj_)
            obj_.original_tagname_ = 'Recipients'
# end class EMailLabelDetail


class EMailRecipient(GeneratedsSuper):
    """Information describing the address of of the email recipient, role of
    the email recipient and languages that are requested to be
    supported."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EmailAddress=None, Role=None, OptionsRequested=None, Localization=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.EmailAddress = EmailAddress
        self.EmailAddress_nsprefix_ = None
        self.Role = Role
        self.validate_AccessorRoleType(self.Role)
        self.Role_nsprefix_ = None
        self.OptionsRequested = OptionsRequested
        self.OptionsRequested_nsprefix_ = None
        self.Localization = Localization
        self.Localization_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EMailRecipient)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EMailRecipient.subclass:
            return EMailRecipient.subclass(*args_, **kwargs_)
        else:
            return EMailRecipient(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EmailAddress(self):
        return self.EmailAddress
    def set_EmailAddress(self, EmailAddress):
        self.EmailAddress = EmailAddress
    def get_Role(self):
        return self.Role
    def set_Role(self, Role):
        self.Role = Role
    def get_OptionsRequested(self):
        return self.OptionsRequested
    def set_OptionsRequested(self, OptionsRequested):
        self.OptionsRequested = OptionsRequested
    def get_Localization(self):
        return self.Localization
    def set_Localization(self, Localization):
        self.Localization = Localization
    def validate_AccessorRoleType(self, value):
        result = True
        # Validate type AccessorRoleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['SHIPMENT_COMPLETOR', 'SHIPMENT_INITIATOR']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on AccessorRoleType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.EmailAddress is not None or
            self.Role is not None or
            self.OptionsRequested is not None or
            self.Localization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMailRecipient', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EMailRecipient')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EMailRecipient':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EMailRecipient')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EMailRecipient', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EMailRecipient'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EMailRecipient', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EmailAddress is not None:
            namespaceprefix_ = self.EmailAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.EmailAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmailAddress>%s</%sEmailAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EmailAddress), input_name='EmailAddress')), namespaceprefix_ , eol_))
        if self.Role is not None:
            namespaceprefix_ = self.Role_nsprefix_ + ':' if (UseCapturedNS_ and self.Role_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRole>%s</%sRole>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Role), input_name='Role')), namespaceprefix_ , eol_))
        if self.OptionsRequested is not None:
            namespaceprefix_ = self.OptionsRequested_nsprefix_ + ':' if (UseCapturedNS_ and self.OptionsRequested_nsprefix_) else ''
            self.OptionsRequested.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OptionsRequested', pretty_print=pretty_print)
        if self.Localization is not None:
            namespaceprefix_ = self.Localization_nsprefix_ + ':' if (UseCapturedNS_ and self.Localization_nsprefix_) else ''
            self.Localization.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Localization', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EmailAddress':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EmailAddress')
            value_ = self.gds_validate_string(value_, node, 'EmailAddress')
            self.EmailAddress = value_
            self.EmailAddress_nsprefix_ = child_.prefix
        elif nodeName_ == 'Role':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Role')
            value_ = self.gds_validate_string(value_, node, 'Role')
            self.Role = value_
            self.Role_nsprefix_ = child_.prefix
            # validate type AccessorRoleType
            self.validate_AccessorRoleType(self.Role)
        elif nodeName_ == 'OptionsRequested':
            obj_ = EmailOptionsRequested.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OptionsRequested = obj_
            obj_.original_tagname_ = 'OptionsRequested'
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
# end class EMailRecipient


class EmailOptionsRequested(GeneratedsSuper):
    """Specifies how to apply the localization detail to the current
    context."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Options=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.Options_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EmailOptionsRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EmailOptionsRequested.subclass:
            return EmailOptionsRequested.subclass(*args_, **kwargs_)
        else:
            return EmailOptionsRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def add_Options(self, value):
        self.Options.append(value)
    def insert_Options_at(self, index, value):
        self.Options.insert(index, value)
    def replace_Options_at(self, index, value):
        self.Options[index] = value
    def validate_EmailOptionType(self, value):
        result = True
        # Validate type EmailOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['PRODUCE_PAPERLESS_SHIPPING_FORMAT', 'SUPPRESS_ACCESS_EMAILS', 'SUPPRESS_ADDITIONAL_LANGUAGES']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on EmailOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Options
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EmailOptionsRequested', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EmailOptionsRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EmailOptionsRequested':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EmailOptionsRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EmailOptionsRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EmailOptionsRequested'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EmailOptionsRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Options_ in self.Options:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptions>%s</%sOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Options':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Options')
            value_ = self.gds_validate_string(value_, node, 'Options')
            self.Options.append(value_)
            self.Options_nsprefix_ = child_.prefix
            # validate type EmailOptionType
            self.validate_EmailOptionType(self.Options[-1])
# end class EmailOptionsRequested


class EtdDetail(GeneratedsSuper):
    """Electronic Trade document references used with the ETD special
    service."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Confirmation=None, Attributes=None, RequestedDocumentCopies=None, Documents=None, DocumentReferences=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Confirmation = Confirmation
        self.validate_EtdConfirmationType(self.Confirmation)
        self.Confirmation_nsprefix_ = None
        if Attributes is None:
            self.Attributes = []
        else:
            self.Attributes = Attributes
        self.Attributes_nsprefix_ = None
        if RequestedDocumentCopies is None:
            self.RequestedDocumentCopies = []
        else:
            self.RequestedDocumentCopies = RequestedDocumentCopies
        self.RequestedDocumentCopies_nsprefix_ = None
        if Documents is None:
            self.Documents = []
        else:
            self.Documents = Documents
        self.Documents_nsprefix_ = None
        if DocumentReferences is None:
            self.DocumentReferences = []
        else:
            self.DocumentReferences = DocumentReferences
        self.DocumentReferences_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EtdDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EtdDetail.subclass:
            return EtdDetail.subclass(*args_, **kwargs_)
        else:
            return EtdDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Confirmation(self):
        return self.Confirmation
    def set_Confirmation(self, Confirmation):
        self.Confirmation = Confirmation
    def get_Attributes(self):
        return self.Attributes
    def set_Attributes(self, Attributes):
        self.Attributes = Attributes
    def add_Attributes(self, value):
        self.Attributes.append(value)
    def insert_Attributes_at(self, index, value):
        self.Attributes.insert(index, value)
    def replace_Attributes_at(self, index, value):
        self.Attributes[index] = value
    def get_RequestedDocumentCopies(self):
        return self.RequestedDocumentCopies
    def set_RequestedDocumentCopies(self, RequestedDocumentCopies):
        self.RequestedDocumentCopies = RequestedDocumentCopies
    def add_RequestedDocumentCopies(self, value):
        self.RequestedDocumentCopies.append(value)
    def insert_RequestedDocumentCopies_at(self, index, value):
        self.RequestedDocumentCopies.insert(index, value)
    def replace_RequestedDocumentCopies_at(self, index, value):
        self.RequestedDocumentCopies[index] = value
    def get_Documents(self):
        return self.Documents
    def set_Documents(self, Documents):
        self.Documents = Documents
    def add_Documents(self, value):
        self.Documents.append(value)
    def insert_Documents_at(self, index, value):
        self.Documents.insert(index, value)
    def replace_Documents_at(self, index, value):
        self.Documents[index] = value
    def get_DocumentReferences(self):
        return self.DocumentReferences
    def set_DocumentReferences(self, DocumentReferences):
        self.DocumentReferences = DocumentReferences
    def add_DocumentReferences(self, value):
        self.DocumentReferences.append(value)
    def insert_DocumentReferences_at(self, index, value):
        self.DocumentReferences.insert(index, value)
    def replace_DocumentReferences_at(self, index, value):
        self.DocumentReferences[index] = value
    def validate_EtdConfirmationType(self, value):
        result = True
        # Validate type EtdConfirmationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CONFIRMED', 'DEFERRED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on EtdConfirmationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_EtdAttributeType(self, value):
        result = True
        # Validate type EtdAttributeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['POST_SHIPMENT_UPLOAD_REQUESTED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on EtdAttributeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_RequestedShippingDocumentType(self, value):
        result = True
        # Validate type RequestedShippingDocumentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CERTIFICATE_OF_ORIGIN', 'COMMERCIAL_INVOICE', 'CUSTOMER_SPECIFIED_LABELS', 'CUSTOM_PACKAGE_DOCUMENT', 'CUSTOM_SHIPMENT_DOCUMENT', 'DANGEROUS_GOODS_SHIPPERS_DECLARATION', 'EXPORT_DECLARATION', 'FREIGHT_ADDRESS_LABEL', 'GENERAL_AGENCY_AGREEMENT', 'LABEL', 'NAFTA_CERTIFICATE_OF_ORIGIN', 'OP_900', 'PENDING_SHIPMENT_EMAIL_NOTIFICATION', 'PRO_FORMA_INVOICE', 'RETURN_INSTRUCTIONS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RequestedShippingDocumentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Confirmation is not None or
            self.Attributes or
            self.RequestedDocumentCopies or
            self.Documents or
            self.DocumentReferences
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EtdDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EtdDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EtdDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EtdDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EtdDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EtdDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EtdDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Confirmation is not None:
            namespaceprefix_ = self.Confirmation_nsprefix_ + ':' if (UseCapturedNS_ and self.Confirmation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConfirmation>%s</%sConfirmation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Confirmation), input_name='Confirmation')), namespaceprefix_ , eol_))
        for Attributes_ in self.Attributes:
            namespaceprefix_ = self.Attributes_nsprefix_ + ':' if (UseCapturedNS_ and self.Attributes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttributes>%s</%sAttributes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Attributes_), input_name='Attributes')), namespaceprefix_ , eol_))
        for RequestedDocumentCopies_ in self.RequestedDocumentCopies:
            namespaceprefix_ = self.RequestedDocumentCopies_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestedDocumentCopies_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestedDocumentCopies>%s</%sRequestedDocumentCopies>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(RequestedDocumentCopies_), input_name='RequestedDocumentCopies')), namespaceprefix_ , eol_))
        for Documents_ in self.Documents:
            namespaceprefix_ = self.Documents_nsprefix_ + ':' if (UseCapturedNS_ and self.Documents_nsprefix_) else ''
            Documents_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Documents', pretty_print=pretty_print)
        for DocumentReferences_ in self.DocumentReferences:
            namespaceprefix_ = self.DocumentReferences_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentReferences_nsprefix_) else ''
            DocumentReferences_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocumentReferences', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Confirmation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Confirmation')
            value_ = self.gds_validate_string(value_, node, 'Confirmation')
            self.Confirmation = value_
            self.Confirmation_nsprefix_ = child_.prefix
            # validate type EtdConfirmationType
            self.validate_EtdConfirmationType(self.Confirmation)
        elif nodeName_ == 'Attributes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Attributes')
            value_ = self.gds_validate_string(value_, node, 'Attributes')
            self.Attributes.append(value_)
            self.Attributes_nsprefix_ = child_.prefix
            # validate type EtdAttributeType
            self.validate_EtdAttributeType(self.Attributes[-1])
        elif nodeName_ == 'RequestedDocumentCopies':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequestedDocumentCopies')
            value_ = self.gds_validate_string(value_, node, 'RequestedDocumentCopies')
            self.RequestedDocumentCopies.append(value_)
            self.RequestedDocumentCopies_nsprefix_ = child_.prefix
            # validate type RequestedShippingDocumentType
            self.validate_RequestedShippingDocumentType(self.RequestedDocumentCopies[-1])
        elif nodeName_ == 'Documents':
            obj_ = UploadDocumentDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Documents.append(obj_)
            obj_.original_tagname_ = 'Documents'
        elif nodeName_ == 'DocumentReferences':
            obj_ = UploadDocumentReferenceDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocumentReferences.append(obj_)
            obj_.original_tagname_ = 'DocumentReferences'
# end class EtdDetail


class ExpressFreightPickupDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Service=None, BookingNumber=None, Dimensions=None, TruckType=None, TrailerSize=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Service = Service
        self.Service_nsprefix_ = None
        self.BookingNumber = BookingNumber
        self.BookingNumber_nsprefix_ = None
        self.Dimensions = Dimensions
        self.Dimensions_nsprefix_ = None
        self.TruckType = TruckType
        self.validate_TruckType(self.TruckType)
        self.TruckType_nsprefix_ = None
        self.TrailerSize = TrailerSize
        self.validate_TrailerSizeType(self.TrailerSize)
        self.TrailerSize_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExpressFreightPickupDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExpressFreightPickupDetail.subclass:
            return ExpressFreightPickupDetail.subclass(*args_, **kwargs_)
        else:
            return ExpressFreightPickupDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Service(self):
        return self.Service
    def set_Service(self, Service):
        self.Service = Service
    def get_BookingNumber(self):
        return self.BookingNumber
    def set_BookingNumber(self, BookingNumber):
        self.BookingNumber = BookingNumber
    def get_Dimensions(self):
        return self.Dimensions
    def set_Dimensions(self, Dimensions):
        self.Dimensions = Dimensions
    def get_TruckType(self):
        return self.TruckType
    def set_TruckType(self, TruckType):
        self.TruckType = TruckType
    def get_TrailerSize(self):
        return self.TrailerSize
    def set_TrailerSize(self, TrailerSize):
        self.TrailerSize = TrailerSize
    def validate_TruckType(self, value):
        result = True
        # Validate type TruckType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DROP_TRAILER_AGREEMENT', 'LIFTGATE', 'TRACTOR_TRAILER_ACCESS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TruckType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_TrailerSizeType(self, value):
        result = True
        # Validate type TrailerSizeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['TRAILER_28_FT', 'TRAILER_48_FT', 'TRAILER_53_FT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TrailerSizeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Service is not None or
            self.BookingNumber is not None or
            self.Dimensions is not None or
            self.TruckType is not None or
            self.TrailerSize is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExpressFreightPickupDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExpressFreightPickupDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ExpressFreightPickupDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ExpressFreightPickupDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ExpressFreightPickupDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ExpressFreightPickupDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExpressFreightPickupDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Service is not None:
            namespaceprefix_ = self.Service_nsprefix_ + ':' if (UseCapturedNS_ and self.Service_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sService>%s</%sService>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Service), input_name='Service')), namespaceprefix_ , eol_))
        if self.BookingNumber is not None:
            namespaceprefix_ = self.BookingNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.BookingNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBookingNumber>%s</%sBookingNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BookingNumber), input_name='BookingNumber')), namespaceprefix_ , eol_))
        if self.Dimensions is not None:
            namespaceprefix_ = self.Dimensions_nsprefix_ + ':' if (UseCapturedNS_ and self.Dimensions_nsprefix_) else ''
            self.Dimensions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Dimensions', pretty_print=pretty_print)
        if self.TruckType is not None:
            namespaceprefix_ = self.TruckType_nsprefix_ + ':' if (UseCapturedNS_ and self.TruckType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTruckType>%s</%sTruckType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TruckType), input_name='TruckType')), namespaceprefix_ , eol_))
        if self.TrailerSize is not None:
            namespaceprefix_ = self.TrailerSize_nsprefix_ + ':' if (UseCapturedNS_ and self.TrailerSize_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTrailerSize>%s</%sTrailerSize>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TrailerSize), input_name='TrailerSize')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Service':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Service')
            value_ = self.gds_validate_string(value_, node, 'Service')
            self.Service = value_
            self.Service_nsprefix_ = child_.prefix
        elif nodeName_ == 'BookingNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BookingNumber')
            value_ = self.gds_validate_string(value_, node, 'BookingNumber')
            self.BookingNumber = value_
            self.BookingNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Dimensions':
            obj_ = Dimensions.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
        elif nodeName_ == 'TruckType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TruckType')
            value_ = self.gds_validate_string(value_, node, 'TruckType')
            self.TruckType = value_
            self.TruckType_nsprefix_ = child_.prefix
            # validate type TruckType
            self.validate_TruckType(self.TruckType)
        elif nodeName_ == 'TrailerSize':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TrailerSize')
            value_ = self.gds_validate_string(value_, node, 'TrailerSize')
            self.TrailerSize = value_
            self.TrailerSize_nsprefix_ = child_.prefix
            # validate type TrailerSizeType
            self.validate_TrailerSizeType(self.TrailerSize)
# end class ExpressFreightPickupDetail


class ExtraLaborDetail(GeneratedsSuper):
    """Specification for labor time spent handling shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Duration=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Duration = Duration
        self.Duration_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExtraLaborDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExtraLaborDetail.subclass:
            return ExtraLaborDetail.subclass(*args_, **kwargs_)
        else:
            return ExtraLaborDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Duration(self):
        return self.Duration
    def set_Duration(self, Duration):
        self.Duration = Duration
    def hasContent_(self):
        if (
            self.Duration is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExtraLaborDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExtraLaborDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ExtraLaborDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ExtraLaborDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ExtraLaborDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ExtraLaborDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ExtraLaborDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Duration is not None:
            namespaceprefix_ = self.Duration_nsprefix_ + ':' if (UseCapturedNS_ and self.Duration_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDuration>%s</%sDuration>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Duration), input_name='Duration')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Duration':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Duration')
            value_ = self.gds_validate_string(value_, node, 'Duration')
            self.Duration = value_
            self.Duration_nsprefix_ = child_.prefix
# end class ExtraLaborDetail


class FaxDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PhoneNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PhoneNumber = PhoneNumber
        self.PhoneNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FaxDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FaxDetail.subclass:
            return FaxDetail.subclass(*args_, **kwargs_)
        else:
            return FaxDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PhoneNumber(self):
        return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber):
        self.PhoneNumber = PhoneNumber
    def hasContent_(self):
        if (
            self.PhoneNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FaxDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FaxDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FaxDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FaxDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FaxDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FaxDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FaxDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PhoneNumber is not None:
            namespaceprefix_ = self.PhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhoneNumber>%s</%sPhoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PhoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhoneNumber')
            value_ = self.gds_validate_string(value_, node, 'PhoneNumber')
            self.PhoneNumber = value_
            self.PhoneNumber_nsprefix_ = child_.prefix
# end class FaxDetail


class FlatbedTrailerDetail(GeneratedsSuper):
    """Specifies the optional features/characteristics requested for a Freight
    shipment utilizing a flatbed trailer."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Options=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.Options_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FlatbedTrailerDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FlatbedTrailerDetail.subclass:
            return FlatbedTrailerDetail.subclass(*args_, **kwargs_)
        else:
            return FlatbedTrailerDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def add_Options(self, value):
        self.Options.append(value)
    def insert_Options_at(self, index, value):
        self.Options.insert(index, value)
    def replace_Options_at(self, index, value):
        self.Options[index] = value
    def validate_FlatbedTrailerOption(self, value):
        result = True
        # Validate type FlatbedTrailerOption, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['OVER_DIMENSION', 'TARP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FlatbedTrailerOption' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Options
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FlatbedTrailerDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FlatbedTrailerDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FlatbedTrailerDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FlatbedTrailerDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FlatbedTrailerDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FlatbedTrailerDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FlatbedTrailerDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Options_ in self.Options:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptions>%s</%sOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Options':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Options')
            value_ = self.gds_validate_string(value_, node, 'Options')
            self.Options.append(value_)
            self.Options_nsprefix_ = child_.prefix
            # validate type FlatbedTrailerOption
            self.validate_FlatbedTrailerOption(self.Options[-1])
# end class FlatbedTrailerDetail


class FreightGuaranteeDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Date=None, Time=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_FreightGuaranteeType(self.Type)
        self.Type_nsprefix_ = None
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.Date_nsprefix_ = None
        if isinstance(Time, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Time, '%H:%M:%S').time()
        else:
            initvalue_ = Time
        self.Time = initvalue_
        self.Time_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightGuaranteeDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightGuaranteeDetail.subclass:
            return FreightGuaranteeDetail.subclass(*args_, **kwargs_)
        else:
            return FreightGuaranteeDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_Time(self):
        return self.Time
    def set_Time(self, Time):
        self.Time = Time
    def validate_FreightGuaranteeType(self, value):
        result = True
        # Validate type FreightGuaranteeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['GUARANTEED_DATE', 'GUARANTEED_MORNING', 'GUARANTEED_TIME']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FreightGuaranteeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Date is not None or
            self.Time is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightGuaranteeDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightGuaranteeDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightGuaranteeDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightGuaranteeDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightGuaranteeDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightGuaranteeDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightGuaranteeDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Date is not None:
            namespaceprefix_ = self.Date_nsprefix_ + ':' if (UseCapturedNS_ and self.Date_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.Time is not None:
            namespaceprefix_ = self.Time_nsprefix_ + ':' if (UseCapturedNS_ and self.Time_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTime>%s</%sTime>%s' % (namespaceprefix_ , self.gds_format_time(self.Time, input_name='Time'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type FreightGuaranteeType
            self.validate_FreightGuaranteeType(self.Type)
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
            self.Date_nsprefix_ = child_.prefix
        elif nodeName_ == 'Time':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.Time = dval_
            self.Time_nsprefix_ = child_.prefix
# end class FreightGuaranteeDetail


class FreightPickupDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ApprovedBy=None, Payment=None, Role=None, AlternateBilling=None, SubmittedBy=None, LineItems=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ApprovedBy = ApprovedBy
        self.ApprovedBy_nsprefix_ = None
        self.Payment = Payment
        self.validate_PaymentType(self.Payment)
        self.Payment_nsprefix_ = None
        self.Role = Role
        self.validate_FreightShipmentRoleType(self.Role)
        self.Role_nsprefix_ = None
        self.AlternateBilling = AlternateBilling
        self.AlternateBilling_nsprefix_ = None
        self.SubmittedBy = SubmittedBy
        self.SubmittedBy_nsprefix_ = None
        if LineItems is None:
            self.LineItems = []
        else:
            self.LineItems = LineItems
        self.LineItems_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightPickupDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightPickupDetail.subclass:
            return FreightPickupDetail.subclass(*args_, **kwargs_)
        else:
            return FreightPickupDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ApprovedBy(self):
        return self.ApprovedBy
    def set_ApprovedBy(self, ApprovedBy):
        self.ApprovedBy = ApprovedBy
    def get_Payment(self):
        return self.Payment
    def set_Payment(self, Payment):
        self.Payment = Payment
    def get_Role(self):
        return self.Role
    def set_Role(self, Role):
        self.Role = Role
    def get_AlternateBilling(self):
        return self.AlternateBilling
    def set_AlternateBilling(self, AlternateBilling):
        self.AlternateBilling = AlternateBilling
    def get_SubmittedBy(self):
        return self.SubmittedBy
    def set_SubmittedBy(self, SubmittedBy):
        self.SubmittedBy = SubmittedBy
    def get_LineItems(self):
        return self.LineItems
    def set_LineItems(self, LineItems):
        self.LineItems = LineItems
    def add_LineItems(self, value):
        self.LineItems.append(value)
    def insert_LineItems_at(self, index, value):
        self.LineItems.insert(index, value)
    def replace_LineItems_at(self, index, value):
        self.LineItems[index] = value
    def validate_PaymentType(self, value):
        result = True
        # Validate type PaymentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACCOUNT', 'CASH', 'COLLECT', 'CREDIT_CARD', 'RECIPIENT', 'SENDER', 'THIRD_PARTY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PaymentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_FreightShipmentRoleType(self, value):
        result = True
        # Validate type FreightShipmentRoleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CONSIGNEE', 'SHIPPER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FreightShipmentRoleType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.ApprovedBy is not None or
            self.Payment is not None or
            self.Role is not None or
            self.AlternateBilling is not None or
            self.SubmittedBy is not None or
            self.LineItems
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightPickupDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightPickupDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightPickupDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightPickupDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightPickupDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightPickupDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightPickupDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ApprovedBy is not None:
            namespaceprefix_ = self.ApprovedBy_nsprefix_ + ':' if (UseCapturedNS_ and self.ApprovedBy_nsprefix_) else ''
            self.ApprovedBy.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ApprovedBy', pretty_print=pretty_print)
        if self.Payment is not None:
            namespaceprefix_ = self.Payment_nsprefix_ + ':' if (UseCapturedNS_ and self.Payment_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPayment>%s</%sPayment>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Payment), input_name='Payment')), namespaceprefix_ , eol_))
        if self.Role is not None:
            namespaceprefix_ = self.Role_nsprefix_ + ':' if (UseCapturedNS_ and self.Role_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRole>%s</%sRole>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Role), input_name='Role')), namespaceprefix_ , eol_))
        if self.AlternateBilling is not None:
            namespaceprefix_ = self.AlternateBilling_nsprefix_ + ':' if (UseCapturedNS_ and self.AlternateBilling_nsprefix_) else ''
            self.AlternateBilling.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AlternateBilling', pretty_print=pretty_print)
        if self.SubmittedBy is not None:
            namespaceprefix_ = self.SubmittedBy_nsprefix_ + ':' if (UseCapturedNS_ and self.SubmittedBy_nsprefix_) else ''
            self.SubmittedBy.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SubmittedBy', pretty_print=pretty_print)
        for LineItems_ in self.LineItems:
            namespaceprefix_ = self.LineItems_nsprefix_ + ':' if (UseCapturedNS_ and self.LineItems_nsprefix_) else ''
            LineItems_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LineItems', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ApprovedBy':
            obj_ = Contact.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ApprovedBy = obj_
            obj_.original_tagname_ = 'ApprovedBy'
        elif nodeName_ == 'Payment':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Payment')
            value_ = self.gds_validate_string(value_, node, 'Payment')
            self.Payment = value_
            self.Payment_nsprefix_ = child_.prefix
            # validate type PaymentType
            self.validate_PaymentType(self.Payment)
        elif nodeName_ == 'Role':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Role')
            value_ = self.gds_validate_string(value_, node, 'Role')
            self.Role = value_
            self.Role_nsprefix_ = child_.prefix
            # validate type FreightShipmentRoleType
            self.validate_FreightShipmentRoleType(self.Role)
        elif nodeName_ == 'AlternateBilling':
            obj_ = Party.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AlternateBilling = obj_
            obj_.original_tagname_ = 'AlternateBilling'
        elif nodeName_ == 'SubmittedBy':
            obj_ = Contact.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SubmittedBy = obj_
            obj_.original_tagname_ = 'SubmittedBy'
        elif nodeName_ == 'LineItems':
            obj_ = FreightPickupLineItem.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LineItems.append(obj_)
            obj_.original_tagname_ = 'LineItems'
# end class FreightPickupDetail


class FreightPickupLineItem(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TrackingNumber=None, Service=None, SequenceNumber=None, Destination=None, Packaging=None, Pieces=None, Weight=None, TotalHandlingUnits=None, PurchaseOrderNumber=None, JustOneMore=None, SpecialServicesRequested=None, Description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TrackingNumber = TrackingNumber
        self.TrackingNumber_nsprefix_ = None
        self.Service = Service
        self.Service_nsprefix_ = None
        self.SequenceNumber = SequenceNumber
        self.SequenceNumber_nsprefix_ = None
        self.Destination = Destination
        self.Destination_nsprefix_ = None
        self.Packaging = Packaging
        self.validate_PhysicalPackagingType(self.Packaging)
        self.Packaging_nsprefix_ = None
        self.Pieces = Pieces
        self.Pieces_nsprefix_ = None
        self.Weight = Weight
        self.Weight_nsprefix_ = None
        self.TotalHandlingUnits = TotalHandlingUnits
        self.TotalHandlingUnits_nsprefix_ = None
        self.PurchaseOrderNumber = PurchaseOrderNumber
        self.PurchaseOrderNumber_nsprefix_ = None
        self.JustOneMore = JustOneMore
        self.JustOneMore_nsprefix_ = None
        self.SpecialServicesRequested = SpecialServicesRequested
        self.SpecialServicesRequested_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightPickupLineItem)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightPickupLineItem.subclass:
            return FreightPickupLineItem.subclass(*args_, **kwargs_)
        else:
            return FreightPickupLineItem(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TrackingNumber(self):
        return self.TrackingNumber
    def set_TrackingNumber(self, TrackingNumber):
        self.TrackingNumber = TrackingNumber
    def get_Service(self):
        return self.Service
    def set_Service(self, Service):
        self.Service = Service
    def get_SequenceNumber(self):
        return self.SequenceNumber
    def set_SequenceNumber(self, SequenceNumber):
        self.SequenceNumber = SequenceNumber
    def get_Destination(self):
        return self.Destination
    def set_Destination(self, Destination):
        self.Destination = Destination
    def get_Packaging(self):
        return self.Packaging
    def set_Packaging(self, Packaging):
        self.Packaging = Packaging
    def get_Pieces(self):
        return self.Pieces
    def set_Pieces(self, Pieces):
        self.Pieces = Pieces
    def get_Weight(self):
        return self.Weight
    def set_Weight(self, Weight):
        self.Weight = Weight
    def get_TotalHandlingUnits(self):
        return self.TotalHandlingUnits
    def set_TotalHandlingUnits(self, TotalHandlingUnits):
        self.TotalHandlingUnits = TotalHandlingUnits
    def get_PurchaseOrderNumber(self):
        return self.PurchaseOrderNumber
    def set_PurchaseOrderNumber(self, PurchaseOrderNumber):
        self.PurchaseOrderNumber = PurchaseOrderNumber
    def get_JustOneMore(self):
        return self.JustOneMore
    def set_JustOneMore(self, JustOneMore):
        self.JustOneMore = JustOneMore
    def get_SpecialServicesRequested(self):
        return self.SpecialServicesRequested
    def set_SpecialServicesRequested(self, SpecialServicesRequested):
        self.SpecialServicesRequested = SpecialServicesRequested
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def validate_PhysicalPackagingType(self, value):
        result = True
        # Validate type PhysicalPackagingType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BAG', 'BARREL', 'BASKET', 'BOX', 'BUCKET', 'BUNDLE', 'CAGE', 'CARTON', 'CASE', 'CHEST', 'CONTAINER', 'CRATE', 'CYLINDER', 'DRUM', 'ENVELOPE', 'HAMPER', 'OTHER', 'PACKAGE', 'PAIL', 'PALLET', 'PARCEL', 'PIECE', 'REEL', 'ROLL', 'SACK', 'SHRINK_WRAPPED', 'SKID', 'TANK', 'TOTE_BIN', 'TUBE', 'UNIT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PhysicalPackagingType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.TrackingNumber is not None or
            self.Service is not None or
            self.SequenceNumber is not None or
            self.Destination is not None or
            self.Packaging is not None or
            self.Pieces is not None or
            self.Weight is not None or
            self.TotalHandlingUnits is not None or
            self.PurchaseOrderNumber is not None or
            self.JustOneMore is not None or
            self.SpecialServicesRequested is not None or
            self.Description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightPickupLineItem', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightPickupLineItem')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightPickupLineItem':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightPickupLineItem')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightPickupLineItem', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightPickupLineItem'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightPickupLineItem', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TrackingNumber is not None:
            namespaceprefix_ = self.TrackingNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTrackingNumber>%s</%sTrackingNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumber), input_name='TrackingNumber')), namespaceprefix_ , eol_))
        if self.Service is not None:
            namespaceprefix_ = self.Service_nsprefix_ + ':' if (UseCapturedNS_ and self.Service_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sService>%s</%sService>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Service), input_name='Service')), namespaceprefix_ , eol_))
        if self.SequenceNumber is not None:
            namespaceprefix_ = self.SequenceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.SequenceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSequenceNumber>%s</%sSequenceNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.SequenceNumber, input_name='SequenceNumber'), namespaceprefix_ , eol_))
        if self.Destination is not None:
            namespaceprefix_ = self.Destination_nsprefix_ + ':' if (UseCapturedNS_ and self.Destination_nsprefix_) else ''
            self.Destination.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Destination', pretty_print=pretty_print)
        if self.Packaging is not None:
            namespaceprefix_ = self.Packaging_nsprefix_ + ':' if (UseCapturedNS_ and self.Packaging_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackaging>%s</%sPackaging>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Packaging), input_name='Packaging')), namespaceprefix_ , eol_))
        if self.Pieces is not None:
            namespaceprefix_ = self.Pieces_nsprefix_ + ':' if (UseCapturedNS_ and self.Pieces_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPieces>%s</%sPieces>%s' % (namespaceprefix_ , self.gds_format_integer(self.Pieces, input_name='Pieces'), namespaceprefix_ , eol_))
        if self.Weight is not None:
            namespaceprefix_ = self.Weight_nsprefix_ + ':' if (UseCapturedNS_ and self.Weight_nsprefix_) else ''
            self.Weight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Weight', pretty_print=pretty_print)
        if self.TotalHandlingUnits is not None:
            namespaceprefix_ = self.TotalHandlingUnits_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalHandlingUnits_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalHandlingUnits>%s</%sTotalHandlingUnits>%s' % (namespaceprefix_ , self.gds_format_integer(self.TotalHandlingUnits, input_name='TotalHandlingUnits'), namespaceprefix_ , eol_))
        if self.PurchaseOrderNumber is not None:
            namespaceprefix_ = self.PurchaseOrderNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PurchaseOrderNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchaseOrderNumber>%s</%sPurchaseOrderNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PurchaseOrderNumber), input_name='PurchaseOrderNumber')), namespaceprefix_ , eol_))
        if self.JustOneMore is not None:
            namespaceprefix_ = self.JustOneMore_nsprefix_ + ':' if (UseCapturedNS_ and self.JustOneMore_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJustOneMore>%s</%sJustOneMore>%s' % (namespaceprefix_ , self.gds_format_boolean(self.JustOneMore, input_name='JustOneMore'), namespaceprefix_ , eol_))
        if self.SpecialServicesRequested is not None:
            namespaceprefix_ = self.SpecialServicesRequested_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialServicesRequested_nsprefix_) else ''
            self.SpecialServicesRequested.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SpecialServicesRequested', pretty_print=pretty_print)
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TrackingNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TrackingNumber')
            value_ = self.gds_validate_string(value_, node, 'TrackingNumber')
            self.TrackingNumber = value_
            self.TrackingNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Service':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Service')
            value_ = self.gds_validate_string(value_, node, 'Service')
            self.Service = value_
            self.Service_nsprefix_ = child_.prefix
        elif nodeName_ == 'SequenceNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'SequenceNumber')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'SequenceNumber')
            self.SequenceNumber = ival_
            self.SequenceNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Destination':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Destination = obj_
            obj_.original_tagname_ = 'Destination'
        elif nodeName_ == 'Packaging':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Packaging')
            value_ = self.gds_validate_string(value_, node, 'Packaging')
            self.Packaging = value_
            self.Packaging_nsprefix_ = child_.prefix
            # validate type PhysicalPackagingType
            self.validate_PhysicalPackagingType(self.Packaging)
        elif nodeName_ == 'Pieces' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Pieces')
            ival_ = self.gds_validate_integer(ival_, node, 'Pieces')
            self.Pieces = ival_
            self.Pieces_nsprefix_ = child_.prefix
        elif nodeName_ == 'Weight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
        elif nodeName_ == 'TotalHandlingUnits' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'TotalHandlingUnits')
            ival_ = self.gds_validate_integer(ival_, node, 'TotalHandlingUnits')
            self.TotalHandlingUnits = ival_
            self.TotalHandlingUnits_nsprefix_ = child_.prefix
        elif nodeName_ == 'PurchaseOrderNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PurchaseOrderNumber')
            value_ = self.gds_validate_string(value_, node, 'PurchaseOrderNumber')
            self.PurchaseOrderNumber = value_
            self.PurchaseOrderNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'JustOneMore':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'JustOneMore')
            ival_ = self.gds_validate_boolean(ival_, node, 'JustOneMore')
            self.JustOneMore = ival_
            self.JustOneMore_nsprefix_ = child_.prefix
        elif nodeName_ == 'SpecialServicesRequested':
            obj_ = ShipmentSpecialServicesRequested.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SpecialServicesRequested = obj_
            obj_.original_tagname_ = 'SpecialServicesRequested'
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
# end class FreightPickupLineItem


class FreightServiceCenterDetail(GeneratedsSuper):
    """This class describes the relationship between a customer-specified
    address and the FedEx Freight / FedEx National Freight Service Center
    that supports that address."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, InterlineCarrierCode=None, InterlineCarrierName=None, AdditionalDays=None, LocalService=None, LocalDistance=None, LocalDuration=None, LocalServiceScheduling=None, LimitedServiceDays=None, GatewayLocationId=None, Location=None, ContactAndAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.InterlineCarrierCode = InterlineCarrierCode
        self.InterlineCarrierCode_nsprefix_ = None
        self.InterlineCarrierName = InterlineCarrierName
        self.InterlineCarrierName_nsprefix_ = None
        self.AdditionalDays = AdditionalDays
        self.AdditionalDays_nsprefix_ = None
        self.LocalService = LocalService
        self.LocalService_nsprefix_ = None
        self.LocalDistance = LocalDistance
        self.LocalDistance_nsprefix_ = None
        self.LocalDuration = LocalDuration
        self.LocalDuration_nsprefix_ = None
        self.LocalServiceScheduling = LocalServiceScheduling
        self.validate_FreightServiceSchedulingType(self.LocalServiceScheduling)
        self.LocalServiceScheduling_nsprefix_ = None
        if LimitedServiceDays is None:
            self.LimitedServiceDays = []
        else:
            self.LimitedServiceDays = LimitedServiceDays
        self.LimitedServiceDays_nsprefix_ = None
        self.GatewayLocationId = GatewayLocationId
        self.GatewayLocationId_nsprefix_ = None
        self.Location = Location
        self.Location_nsprefix_ = None
        self.ContactAndAddress = ContactAndAddress
        self.ContactAndAddress_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FreightServiceCenterDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FreightServiceCenterDetail.subclass:
            return FreightServiceCenterDetail.subclass(*args_, **kwargs_)
        else:
            return FreightServiceCenterDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_InterlineCarrierCode(self):
        return self.InterlineCarrierCode
    def set_InterlineCarrierCode(self, InterlineCarrierCode):
        self.InterlineCarrierCode = InterlineCarrierCode
    def get_InterlineCarrierName(self):
        return self.InterlineCarrierName
    def set_InterlineCarrierName(self, InterlineCarrierName):
        self.InterlineCarrierName = InterlineCarrierName
    def get_AdditionalDays(self):
        return self.AdditionalDays
    def set_AdditionalDays(self, AdditionalDays):
        self.AdditionalDays = AdditionalDays
    def get_LocalService(self):
        return self.LocalService
    def set_LocalService(self, LocalService):
        self.LocalService = LocalService
    def get_LocalDistance(self):
        return self.LocalDistance
    def set_LocalDistance(self, LocalDistance):
        self.LocalDistance = LocalDistance
    def get_LocalDuration(self):
        return self.LocalDuration
    def set_LocalDuration(self, LocalDuration):
        self.LocalDuration = LocalDuration
    def get_LocalServiceScheduling(self):
        return self.LocalServiceScheduling
    def set_LocalServiceScheduling(self, LocalServiceScheduling):
        self.LocalServiceScheduling = LocalServiceScheduling
    def get_LimitedServiceDays(self):
        return self.LimitedServiceDays
    def set_LimitedServiceDays(self, LimitedServiceDays):
        self.LimitedServiceDays = LimitedServiceDays
    def add_LimitedServiceDays(self, value):
        self.LimitedServiceDays.append(value)
    def insert_LimitedServiceDays_at(self, index, value):
        self.LimitedServiceDays.insert(index, value)
    def replace_LimitedServiceDays_at(self, index, value):
        self.LimitedServiceDays[index] = value
    def get_GatewayLocationId(self):
        return self.GatewayLocationId
    def set_GatewayLocationId(self, GatewayLocationId):
        self.GatewayLocationId = GatewayLocationId
    def get_Location(self):
        return self.Location
    def set_Location(self, Location):
        self.Location = Location
    def get_ContactAndAddress(self):
        return self.ContactAndAddress
    def set_ContactAndAddress(self, ContactAndAddress):
        self.ContactAndAddress = ContactAndAddress
    def validate_FreightServiceSchedulingType(self, value):
        result = True
        # Validate type FreightServiceSchedulingType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['LIMITED', 'STANDARD', 'WILL_CALL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FreightServiceSchedulingType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_DayOfWeekType(self, value):
        result = True
        # Validate type DayOfWeekType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FRI', 'MON', 'SAT', 'SUN', 'THU', 'TUE', 'WED']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DayOfWeekType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.InterlineCarrierCode is not None or
            self.InterlineCarrierName is not None or
            self.AdditionalDays is not None or
            self.LocalService is not None or
            self.LocalDistance is not None or
            self.LocalDuration is not None or
            self.LocalServiceScheduling is not None or
            self.LimitedServiceDays or
            self.GatewayLocationId is not None or
            self.Location is not None or
            self.ContactAndAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightServiceCenterDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FreightServiceCenterDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FreightServiceCenterDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FreightServiceCenterDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FreightServiceCenterDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FreightServiceCenterDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='FreightServiceCenterDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InterlineCarrierCode is not None:
            namespaceprefix_ = self.InterlineCarrierCode_nsprefix_ + ':' if (UseCapturedNS_ and self.InterlineCarrierCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInterlineCarrierCode>%s</%sInterlineCarrierCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InterlineCarrierCode), input_name='InterlineCarrierCode')), namespaceprefix_ , eol_))
        if self.InterlineCarrierName is not None:
            namespaceprefix_ = self.InterlineCarrierName_nsprefix_ + ':' if (UseCapturedNS_ and self.InterlineCarrierName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInterlineCarrierName>%s</%sInterlineCarrierName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InterlineCarrierName), input_name='InterlineCarrierName')), namespaceprefix_ , eol_))
        if self.AdditionalDays is not None:
            namespaceprefix_ = self.AdditionalDays_nsprefix_ + ':' if (UseCapturedNS_ and self.AdditionalDays_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAdditionalDays>%s</%sAdditionalDays>%s' % (namespaceprefix_ , self.gds_format_integer(self.AdditionalDays, input_name='AdditionalDays'), namespaceprefix_ , eol_))
        if self.LocalService is not None:
            namespaceprefix_ = self.LocalService_nsprefix_ + ':' if (UseCapturedNS_ and self.LocalService_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocalService>%s</%sLocalService>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocalService), input_name='LocalService')), namespaceprefix_ , eol_))
        if self.LocalDistance is not None:
            namespaceprefix_ = self.LocalDistance_nsprefix_ + ':' if (UseCapturedNS_ and self.LocalDistance_nsprefix_) else ''
            self.LocalDistance.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LocalDistance', pretty_print=pretty_print)
        if self.LocalDuration is not None:
            namespaceprefix_ = self.LocalDuration_nsprefix_ + ':' if (UseCapturedNS_ and self.LocalDuration_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocalDuration>%s</%sLocalDuration>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocalDuration), input_name='LocalDuration')), namespaceprefix_ , eol_))
        if self.LocalServiceScheduling is not None:
            namespaceprefix_ = self.LocalServiceScheduling_nsprefix_ + ':' if (UseCapturedNS_ and self.LocalServiceScheduling_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocalServiceScheduling>%s</%sLocalServiceScheduling>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocalServiceScheduling), input_name='LocalServiceScheduling')), namespaceprefix_ , eol_))
        for LimitedServiceDays_ in self.LimitedServiceDays:
            namespaceprefix_ = self.LimitedServiceDays_nsprefix_ + ':' if (UseCapturedNS_ and self.LimitedServiceDays_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLimitedServiceDays>%s</%sLimitedServiceDays>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(LimitedServiceDays_), input_name='LimitedServiceDays')), namespaceprefix_ , eol_))
        if self.GatewayLocationId is not None:
            namespaceprefix_ = self.GatewayLocationId_nsprefix_ + ':' if (UseCapturedNS_ and self.GatewayLocationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGatewayLocationId>%s</%sGatewayLocationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GatewayLocationId), input_name='GatewayLocationId')), namespaceprefix_ , eol_))
        if self.Location is not None:
            namespaceprefix_ = self.Location_nsprefix_ + ':' if (UseCapturedNS_ and self.Location_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocation>%s</%sLocation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Location), input_name='Location')), namespaceprefix_ , eol_))
        if self.ContactAndAddress is not None:
            namespaceprefix_ = self.ContactAndAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.ContactAndAddress_nsprefix_) else ''
            self.ContactAndAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ContactAndAddress', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'InterlineCarrierCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InterlineCarrierCode')
            value_ = self.gds_validate_string(value_, node, 'InterlineCarrierCode')
            self.InterlineCarrierCode = value_
            self.InterlineCarrierCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'InterlineCarrierName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InterlineCarrierName')
            value_ = self.gds_validate_string(value_, node, 'InterlineCarrierName')
            self.InterlineCarrierName = value_
            self.InterlineCarrierName_nsprefix_ = child_.prefix
        elif nodeName_ == 'AdditionalDays' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'AdditionalDays')
            ival_ = self.gds_validate_integer(ival_, node, 'AdditionalDays')
            self.AdditionalDays = ival_
            self.AdditionalDays_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocalService':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocalService')
            value_ = self.gds_validate_string(value_, node, 'LocalService')
            self.LocalService = value_
            self.LocalService_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocalDistance':
            obj_ = Distance.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LocalDistance = obj_
            obj_.original_tagname_ = 'LocalDistance'
        elif nodeName_ == 'LocalDuration':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocalDuration')
            value_ = self.gds_validate_string(value_, node, 'LocalDuration')
            self.LocalDuration = value_
            self.LocalDuration_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocalServiceScheduling':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocalServiceScheduling')
            value_ = self.gds_validate_string(value_, node, 'LocalServiceScheduling')
            self.LocalServiceScheduling = value_
            self.LocalServiceScheduling_nsprefix_ = child_.prefix
            # validate type FreightServiceSchedulingType
            self.validate_FreightServiceSchedulingType(self.LocalServiceScheduling)
        elif nodeName_ == 'LimitedServiceDays':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LimitedServiceDays')
            value_ = self.gds_validate_string(value_, node, 'LimitedServiceDays')
            self.LimitedServiceDays.append(value_)
            self.LimitedServiceDays_nsprefix_ = child_.prefix
            # validate type DayOfWeekType
            self.validate_DayOfWeekType(self.LimitedServiceDays[-1])
        elif nodeName_ == 'GatewayLocationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GatewayLocationId')
            value_ = self.gds_validate_string(value_, node, 'GatewayLocationId')
            self.GatewayLocationId = value_
            self.GatewayLocationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Location':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Location')
            value_ = self.gds_validate_string(value_, node, 'Location')
            self.Location = value_
            self.Location_nsprefix_ = child_.prefix
        elif nodeName_ == 'ContactAndAddress':
            obj_ = ContactAndAddress.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ContactAndAddress = obj_
            obj_.original_tagname_ = 'ContactAndAddress'
# end class FreightServiceCenterDetail


class HoldAtLocationDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PhoneNumber=None, LocationContactAndAddress=None, LocationType=None, LocationId=None, LocationNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PhoneNumber = PhoneNumber
        self.PhoneNumber_nsprefix_ = None
        self.LocationContactAndAddress = LocationContactAndAddress
        self.LocationContactAndAddress_nsprefix_ = None
        self.LocationType = LocationType
        self.validate_FedExLocationType(self.LocationType)
        self.LocationType_nsprefix_ = None
        self.LocationId = LocationId
        self.LocationId_nsprefix_ = None
        self.LocationNumber = LocationNumber
        self.LocationNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HoldAtLocationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HoldAtLocationDetail.subclass:
            return HoldAtLocationDetail.subclass(*args_, **kwargs_)
        else:
            return HoldAtLocationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PhoneNumber(self):
        return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber):
        self.PhoneNumber = PhoneNumber
    def get_LocationContactAndAddress(self):
        return self.LocationContactAndAddress
    def set_LocationContactAndAddress(self, LocationContactAndAddress):
        self.LocationContactAndAddress = LocationContactAndAddress
    def get_LocationType(self):
        return self.LocationType
    def set_LocationType(self, LocationType):
        self.LocationType = LocationType
    def get_LocationId(self):
        return self.LocationId
    def set_LocationId(self, LocationId):
        self.LocationId = LocationId
    def get_LocationNumber(self):
        return self.LocationNumber
    def set_LocationNumber(self, LocationNumber):
        self.LocationNumber = LocationNumber
    def validate_FedExLocationType(self, value):
        result = True
        # Validate type FedExLocationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_AUTHORIZED_SHIP_CENTER', 'FEDEX_EXPRESS_STATION', 'FEDEX_FACILITY', 'FEDEX_FREIGHT_SERVICE_CENTER', 'FEDEX_GROUND_TERMINAL', 'FEDEX_HOME_DELIVERY_STATION', 'FEDEX_OFFICE', 'FEDEX_SELF_SERVICE_LOCATION', 'FEDEX_SHIPSITE', 'FEDEX_SMART_POST_HUB']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on FedExLocationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.PhoneNumber is not None or
            self.LocationContactAndAddress is not None or
            self.LocationType is not None or
            self.LocationId is not None or
            self.LocationNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HoldAtLocationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HoldAtLocationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HoldAtLocationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HoldAtLocationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HoldAtLocationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HoldAtLocationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HoldAtLocationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PhoneNumber is not None:
            namespaceprefix_ = self.PhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhoneNumber>%s</%sPhoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), namespaceprefix_ , eol_))
        if self.LocationContactAndAddress is not None:
            namespaceprefix_ = self.LocationContactAndAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.LocationContactAndAddress_nsprefix_) else ''
            self.LocationContactAndAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LocationContactAndAddress', pretty_print=pretty_print)
        if self.LocationType is not None:
            namespaceprefix_ = self.LocationType_nsprefix_ + ':' if (UseCapturedNS_ and self.LocationType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationType>%s</%sLocationType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocationType), input_name='LocationType')), namespaceprefix_ , eol_))
        if self.LocationId is not None:
            namespaceprefix_ = self.LocationId_nsprefix_ + ':' if (UseCapturedNS_ and self.LocationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationId>%s</%sLocationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocationId), input_name='LocationId')), namespaceprefix_ , eol_))
        if self.LocationNumber is not None:
            namespaceprefix_ = self.LocationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.LocationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationNumber>%s</%sLocationNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.LocationNumber, input_name='LocationNumber'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PhoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhoneNumber')
            value_ = self.gds_validate_string(value_, node, 'PhoneNumber')
            self.PhoneNumber = value_
            self.PhoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocationContactAndAddress':
            obj_ = ContactAndAddress.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LocationContactAndAddress = obj_
            obj_.original_tagname_ = 'LocationContactAndAddress'
        elif nodeName_ == 'LocationType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocationType')
            value_ = self.gds_validate_string(value_, node, 'LocationType')
            self.LocationType = value_
            self.LocationType_nsprefix_ = child_.prefix
            # validate type FedExLocationType
            self.validate_FedExLocationType(self.LocationType)
        elif nodeName_ == 'LocationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocationId')
            value_ = self.gds_validate_string(value_, node, 'LocationId')
            self.LocationId = value_
            self.LocationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocationNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'LocationNumber')
            ival_ = self.gds_validate_integer(ival_, node, 'LocationNumber')
            self.LocationNumber = ival_
            self.LocationNumber_nsprefix_ = child_.prefix
# end class HoldAtLocationDetail


class HomeDeliveryPremiumDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HomeDeliveryPremiumType=None, Date=None, PhoneNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HomeDeliveryPremiumType = HomeDeliveryPremiumType
        self.validate_HomeDeliveryPremiumType(self.HomeDeliveryPremiumType)
        self.HomeDeliveryPremiumType_nsprefix_ = None
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.Date_nsprefix_ = None
        self.PhoneNumber = PhoneNumber
        self.PhoneNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HomeDeliveryPremiumDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HomeDeliveryPremiumDetail.subclass:
            return HomeDeliveryPremiumDetail.subclass(*args_, **kwargs_)
        else:
            return HomeDeliveryPremiumDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HomeDeliveryPremiumType(self):
        return self.HomeDeliveryPremiumType
    def set_HomeDeliveryPremiumType(self, HomeDeliveryPremiumType):
        self.HomeDeliveryPremiumType = HomeDeliveryPremiumType
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_PhoneNumber(self):
        return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber):
        self.PhoneNumber = PhoneNumber
    def validate_HomeDeliveryPremiumType(self, value):
        result = True
        # Validate type HomeDeliveryPremiumType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['APPOINTMENT', 'DATE_CERTAIN', 'EVENING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on HomeDeliveryPremiumType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.HomeDeliveryPremiumType is not None or
            self.Date is not None or
            self.PhoneNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HomeDeliveryPremiumDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HomeDeliveryPremiumDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HomeDeliveryPremiumDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HomeDeliveryPremiumDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HomeDeliveryPremiumDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HomeDeliveryPremiumDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='HomeDeliveryPremiumDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HomeDeliveryPremiumType is not None:
            namespaceprefix_ = self.HomeDeliveryPremiumType_nsprefix_ + ':' if (UseCapturedNS_ and self.HomeDeliveryPremiumType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHomeDeliveryPremiumType>%s</%sHomeDeliveryPremiumType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HomeDeliveryPremiumType), input_name='HomeDeliveryPremiumType')), namespaceprefix_ , eol_))
        if self.Date is not None:
            namespaceprefix_ = self.Date_nsprefix_ + ':' if (UseCapturedNS_ and self.Date_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.PhoneNumber is not None:
            namespaceprefix_ = self.PhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhoneNumber>%s</%sPhoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HomeDeliveryPremiumType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HomeDeliveryPremiumType')
            value_ = self.gds_validate_string(value_, node, 'HomeDeliveryPremiumType')
            self.HomeDeliveryPremiumType = value_
            self.HomeDeliveryPremiumType_nsprefix_ = child_.prefix
            # validate type HomeDeliveryPremiumType
            self.validate_HomeDeliveryPremiumType(self.HomeDeliveryPremiumType)
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
            self.Date_nsprefix_ = child_.prefix
        elif nodeName_ == 'PhoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhoneNumber')
            value_ = self.gds_validate_string(value_, node, 'PhoneNumber')
            self.PhoneNumber = value_
            self.PhoneNumber_nsprefix_ = child_.prefix
# end class HomeDeliveryPremiumDetail


class InternationalControlledExportDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, ForeignTradeZoneCode=None, EntryNumber=None, LicenseOrPermitNumber=None, LicenseOrPermitExpirationDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_InternationalControlledExportType(self.Type)
        self.Type_nsprefix_ = None
        self.ForeignTradeZoneCode = ForeignTradeZoneCode
        self.ForeignTradeZoneCode_nsprefix_ = None
        self.EntryNumber = EntryNumber
        self.EntryNumber_nsprefix_ = None
        self.LicenseOrPermitNumber = LicenseOrPermitNumber
        self.LicenseOrPermitNumber_nsprefix_ = None
        if isinstance(LicenseOrPermitExpirationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LicenseOrPermitExpirationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = LicenseOrPermitExpirationDate
        self.LicenseOrPermitExpirationDate = initvalue_
        self.LicenseOrPermitExpirationDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InternationalControlledExportDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InternationalControlledExportDetail.subclass:
            return InternationalControlledExportDetail.subclass(*args_, **kwargs_)
        else:
            return InternationalControlledExportDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_ForeignTradeZoneCode(self):
        return self.ForeignTradeZoneCode
    def set_ForeignTradeZoneCode(self, ForeignTradeZoneCode):
        self.ForeignTradeZoneCode = ForeignTradeZoneCode
    def get_EntryNumber(self):
        return self.EntryNumber
    def set_EntryNumber(self, EntryNumber):
        self.EntryNumber = EntryNumber
    def get_LicenseOrPermitNumber(self):
        return self.LicenseOrPermitNumber
    def set_LicenseOrPermitNumber(self, LicenseOrPermitNumber):
        self.LicenseOrPermitNumber = LicenseOrPermitNumber
    def get_LicenseOrPermitExpirationDate(self):
        return self.LicenseOrPermitExpirationDate
    def set_LicenseOrPermitExpirationDate(self, LicenseOrPermitExpirationDate):
        self.LicenseOrPermitExpirationDate = LicenseOrPermitExpirationDate
    def validate_InternationalControlledExportType(self, value):
        result = True
        # Validate type InternationalControlledExportType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DEA_036', 'DEA_236', 'DEA_486', 'DSP_05', 'DSP_61', 'DSP_73', 'DSP_85', 'DSP_94', 'DSP_LICENSE_AGREEMENT', 'FROM_FOREIGN_TRADE_ZONE', 'WAREHOUSE_WITHDRAWAL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on InternationalControlledExportType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.ForeignTradeZoneCode is not None or
            self.EntryNumber is not None or
            self.LicenseOrPermitNumber is not None or
            self.LicenseOrPermitExpirationDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InternationalControlledExportDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InternationalControlledExportDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InternationalControlledExportDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InternationalControlledExportDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InternationalControlledExportDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InternationalControlledExportDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InternationalControlledExportDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.ForeignTradeZoneCode is not None:
            namespaceprefix_ = self.ForeignTradeZoneCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ForeignTradeZoneCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sForeignTradeZoneCode>%s</%sForeignTradeZoneCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ForeignTradeZoneCode), input_name='ForeignTradeZoneCode')), namespaceprefix_ , eol_))
        if self.EntryNumber is not None:
            namespaceprefix_ = self.EntryNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.EntryNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEntryNumber>%s</%sEntryNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EntryNumber), input_name='EntryNumber')), namespaceprefix_ , eol_))
        if self.LicenseOrPermitNumber is not None:
            namespaceprefix_ = self.LicenseOrPermitNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenseOrPermitNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicenseOrPermitNumber>%s</%sLicenseOrPermitNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LicenseOrPermitNumber), input_name='LicenseOrPermitNumber')), namespaceprefix_ , eol_))
        if self.LicenseOrPermitExpirationDate is not None:
            namespaceprefix_ = self.LicenseOrPermitExpirationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenseOrPermitExpirationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicenseOrPermitExpirationDate>%s</%sLicenseOrPermitExpirationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.LicenseOrPermitExpirationDate, input_name='LicenseOrPermitExpirationDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type InternationalControlledExportType
            self.validate_InternationalControlledExportType(self.Type)
        elif nodeName_ == 'ForeignTradeZoneCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ForeignTradeZoneCode')
            value_ = self.gds_validate_string(value_, node, 'ForeignTradeZoneCode')
            self.ForeignTradeZoneCode = value_
            self.ForeignTradeZoneCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'EntryNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EntryNumber')
            value_ = self.gds_validate_string(value_, node, 'EntryNumber')
            self.EntryNumber = value_
            self.EntryNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'LicenseOrPermitNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LicenseOrPermitNumber')
            value_ = self.gds_validate_string(value_, node, 'LicenseOrPermitNumber')
            self.LicenseOrPermitNumber = value_
            self.LicenseOrPermitNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'LicenseOrPermitExpirationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.LicenseOrPermitExpirationDate = dval_
            self.LicenseOrPermitExpirationDate_nsprefix_ = child_.prefix
# end class InternationalControlledExportDetail


class InternationalTrafficInArmsRegulationsDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LicenseOrExemptionNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.LicenseOrExemptionNumber = LicenseOrExemptionNumber
        self.LicenseOrExemptionNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InternationalTrafficInArmsRegulationsDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InternationalTrafficInArmsRegulationsDetail.subclass:
            return InternationalTrafficInArmsRegulationsDetail.subclass(*args_, **kwargs_)
        else:
            return InternationalTrafficInArmsRegulationsDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LicenseOrExemptionNumber(self):
        return self.LicenseOrExemptionNumber
    def set_LicenseOrExemptionNumber(self, LicenseOrExemptionNumber):
        self.LicenseOrExemptionNumber = LicenseOrExemptionNumber
    def hasContent_(self):
        if (
            self.LicenseOrExemptionNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InternationalTrafficInArmsRegulationsDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InternationalTrafficInArmsRegulationsDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InternationalTrafficInArmsRegulationsDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InternationalTrafficInArmsRegulationsDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InternationalTrafficInArmsRegulationsDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InternationalTrafficInArmsRegulationsDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='InternationalTrafficInArmsRegulationsDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LicenseOrExemptionNumber is not None:
            namespaceprefix_ = self.LicenseOrExemptionNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenseOrExemptionNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicenseOrExemptionNumber>%s</%sLicenseOrExemptionNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LicenseOrExemptionNumber), input_name='LicenseOrExemptionNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LicenseOrExemptionNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LicenseOrExemptionNumber')
            value_ = self.gds_validate_string(value_, node, 'LicenseOrExemptionNumber')
            self.LicenseOrExemptionNumber = value_
            self.LicenseOrExemptionNumber_nsprefix_ = child_.prefix
# end class InternationalTrafficInArmsRegulationsDetail


class Localization(GeneratedsSuper):
    """Identifies the representation of human-readable text."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LanguageCode=None, LocaleCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.LanguageCode = LanguageCode
        self.LanguageCode_nsprefix_ = None
        self.LocaleCode = LocaleCode
        self.LocaleCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Localization)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Localization.subclass:
            return Localization.subclass(*args_, **kwargs_)
        else:
            return Localization(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LanguageCode(self):
        return self.LanguageCode
    def set_LanguageCode(self, LanguageCode):
        self.LanguageCode = LanguageCode
    def get_LocaleCode(self):
        return self.LocaleCode
    def set_LocaleCode(self, LocaleCode):
        self.LocaleCode = LocaleCode
    def hasContent_(self):
        if (
            self.LanguageCode is not None or
            self.LocaleCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Localization', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Localization')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Localization':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Localization')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Localization', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Localization'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Localization', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LanguageCode is not None:
            namespaceprefix_ = self.LanguageCode_nsprefix_ + ':' if (UseCapturedNS_ and self.LanguageCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLanguageCode>%s</%sLanguageCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LanguageCode), input_name='LanguageCode')), namespaceprefix_ , eol_))
        if self.LocaleCode is not None:
            namespaceprefix_ = self.LocaleCode_nsprefix_ + ':' if (UseCapturedNS_ and self.LocaleCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocaleCode>%s</%sLocaleCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocaleCode), input_name='LocaleCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LanguageCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LanguageCode')
            value_ = self.gds_validate_string(value_, node, 'LanguageCode')
            self.LanguageCode = value_
            self.LanguageCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocaleCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocaleCode')
            value_ = self.gds_validate_string(value_, node, 'LocaleCode')
            self.LocaleCode = value_
            self.LocaleCode_nsprefix_ = child_.prefix
# end class Localization


class MarkingOrTaggingDetail(GeneratedsSuper):
    """Specification for marking or tagging of pieces in shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Count=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Count = Count
        self.Count_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarkingOrTaggingDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarkingOrTaggingDetail.subclass:
            return MarkingOrTaggingDetail.subclass(*args_, **kwargs_)
        else:
            return MarkingOrTaggingDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Count(self):
        return self.Count
    def set_Count(self, Count):
        self.Count = Count
    def hasContent_(self):
        if (
            self.Count is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MarkingOrTaggingDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarkingOrTaggingDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarkingOrTaggingDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarkingOrTaggingDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarkingOrTaggingDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarkingOrTaggingDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='MarkingOrTaggingDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Count is not None:
            namespaceprefix_ = self.Count_nsprefix_ + ':' if (UseCapturedNS_ and self.Count_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCount>%s</%sCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.Count, input_name='Count'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Count' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Count')
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Count')
            self.Count = ival_
            self.Count_nsprefix_ = child_.prefix
# end class MarkingOrTaggingDetail


class Money(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Currency=None, Amount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Currency = Currency
        self.Currency_nsprefix_ = None
        self.Amount = Amount
        self.Amount_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Money)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Money.subclass:
            return Money.subclass(*args_, **kwargs_)
        else:
            return Money(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Currency(self):
        return self.Currency
    def set_Currency(self, Currency):
        self.Currency = Currency
    def get_Amount(self):
        return self.Amount
    def set_Amount(self, Amount):
        self.Amount = Amount
    def hasContent_(self):
        if (
            self.Currency is not None or
            self.Amount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Money', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Money')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Money':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Money')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Money', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Money'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Money', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Currency is not None:
            namespaceprefix_ = self.Currency_nsprefix_ + ':' if (UseCapturedNS_ and self.Currency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrency>%s</%sCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Currency), input_name='Currency')), namespaceprefix_ , eol_))
        if self.Amount is not None:
            namespaceprefix_ = self.Amount_nsprefix_ + ':' if (UseCapturedNS_ and self.Amount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAmount>%s</%sAmount>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Amount, input_name='Amount'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Currency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Currency')
            value_ = self.gds_validate_string(value_, node, 'Currency')
            self.Currency = value_
            self.Currency_nsprefix_ = child_.prefix
        elif nodeName_ == 'Amount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Amount')
            fval_ = self.gds_validate_decimal(fval_, node, 'Amount')
            self.Amount = fval_
            self.Amount_nsprefix_ = child_.prefix
# end class Money


class NonBusinessTimeDetail(GeneratedsSuper):
    """Specification for services performed during non-business hours and/or
    days."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PersonDays=None, PersonHours=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PersonDays = PersonDays
        self.PersonDays_nsprefix_ = None
        self.PersonHours = PersonHours
        self.PersonHours_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NonBusinessTimeDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NonBusinessTimeDetail.subclass:
            return NonBusinessTimeDetail.subclass(*args_, **kwargs_)
        else:
            return NonBusinessTimeDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PersonDays(self):
        return self.PersonDays
    def set_PersonDays(self, PersonDays):
        self.PersonDays = PersonDays
    def get_PersonHours(self):
        return self.PersonHours
    def set_PersonHours(self, PersonHours):
        self.PersonHours = PersonHours
    def hasContent_(self):
        if (
            self.PersonDays is not None or
            self.PersonHours is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NonBusinessTimeDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NonBusinessTimeDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NonBusinessTimeDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NonBusinessTimeDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NonBusinessTimeDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NonBusinessTimeDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NonBusinessTimeDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PersonDays is not None:
            namespaceprefix_ = self.PersonDays_nsprefix_ + ':' if (UseCapturedNS_ and self.PersonDays_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPersonDays>%s</%sPersonDays>%s' % (namespaceprefix_ , self.gds_format_integer(self.PersonDays, input_name='PersonDays'), namespaceprefix_ , eol_))
        if self.PersonHours is not None:
            namespaceprefix_ = self.PersonHours_nsprefix_ + ':' if (UseCapturedNS_ and self.PersonHours_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPersonHours>%s</%sPersonHours>%s' % (namespaceprefix_ , self.gds_format_integer(self.PersonHours, input_name='PersonHours'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PersonDays' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PersonDays')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PersonDays')
            self.PersonDays = ival_
            self.PersonDays_nsprefix_ = child_.prefix
        elif nodeName_ == 'PersonHours' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PersonHours')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PersonHours')
            self.PersonHours = ival_
            self.PersonHours_nsprefix_ = child_.prefix
# end class NonBusinessTimeDetail


class Notification(GeneratedsSuper):
    """The descriptive data regarding the result of the submitted
    transaction."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Severity=None, Source=None, Code=None, Message=None, LocalizedMessage=None, MessageParameters=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Severity = Severity
        self.validate_NotificationSeverityType(self.Severity)
        self.Severity_nsprefix_ = None
        self.Source = Source
        self.Source_nsprefix_ = None
        self.Code = Code
        self.Code_nsprefix_ = None
        self.Message = Message
        self.Message_nsprefix_ = None
        self.LocalizedMessage = LocalizedMessage
        self.LocalizedMessage_nsprefix_ = None
        if MessageParameters is None:
            self.MessageParameters = []
        else:
            self.MessageParameters = MessageParameters
        self.MessageParameters_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Notification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Notification.subclass:
            return Notification.subclass(*args_, **kwargs_)
        else:
            return Notification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Severity(self):
        return self.Severity
    def set_Severity(self, Severity):
        self.Severity = Severity
    def get_Source(self):
        return self.Source
    def set_Source(self, Source):
        self.Source = Source
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_Message(self):
        return self.Message
    def set_Message(self, Message):
        self.Message = Message
    def get_LocalizedMessage(self):
        return self.LocalizedMessage
    def set_LocalizedMessage(self, LocalizedMessage):
        self.LocalizedMessage = LocalizedMessage
    def get_MessageParameters(self):
        return self.MessageParameters
    def set_MessageParameters(self, MessageParameters):
        self.MessageParameters = MessageParameters
    def add_MessageParameters(self, value):
        self.MessageParameters.append(value)
    def insert_MessageParameters_at(self, index, value):
        self.MessageParameters.insert(index, value)
    def replace_MessageParameters_at(self, index, value):
        self.MessageParameters[index] = value
    def validate_NotificationSeverityType(self, value):
        result = True
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Severity is not None or
            self.Source is not None or
            self.Code is not None or
            self.Message is not None or
            self.LocalizedMessage is not None or
            self.MessageParameters
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Notification', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Notification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Notification':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Notification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Notification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Notification'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Notification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Severity is not None:
            namespaceprefix_ = self.Severity_nsprefix_ + ':' if (UseCapturedNS_ and self.Severity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSeverity>%s</%sSeverity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Severity), input_name='Severity')), namespaceprefix_ , eol_))
        if self.Source is not None:
            namespaceprefix_ = self.Source_nsprefix_ + ':' if (UseCapturedNS_ and self.Source_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSource>%s</%sSource>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Source), input_name='Source')), namespaceprefix_ , eol_))
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.Message is not None:
            namespaceprefix_ = self.Message_nsprefix_ + ':' if (UseCapturedNS_ and self.Message_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMessage>%s</%sMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Message), input_name='Message')), namespaceprefix_ , eol_))
        if self.LocalizedMessage is not None:
            namespaceprefix_ = self.LocalizedMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.LocalizedMessage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocalizedMessage>%s</%sLocalizedMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocalizedMessage), input_name='LocalizedMessage')), namespaceprefix_ , eol_))
        for MessageParameters_ in self.MessageParameters:
            namespaceprefix_ = self.MessageParameters_nsprefix_ + ':' if (UseCapturedNS_ and self.MessageParameters_nsprefix_) else ''
            MessageParameters_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MessageParameters', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Severity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Severity')
            value_ = self.gds_validate_string(value_, node, 'Severity')
            self.Severity = value_
            self.Severity_nsprefix_ = child_.prefix
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.Severity)
        elif nodeName_ == 'Source':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Source')
            value_ = self.gds_validate_string(value_, node, 'Source')
            self.Source = value_
            self.Source_nsprefix_ = child_.prefix
        elif nodeName_ == 'Code':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
        elif nodeName_ == 'Message':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Message')
            value_ = self.gds_validate_string(value_, node, 'Message')
            self.Message = value_
            self.Message_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocalizedMessage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocalizedMessage')
            value_ = self.gds_validate_string(value_, node, 'LocalizedMessage')
            self.LocalizedMessage = value_
            self.LocalizedMessage_nsprefix_ = child_.prefix
        elif nodeName_ == 'MessageParameters':
            obj_ = NotificationParameter.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MessageParameters.append(obj_)
            obj_.original_tagname_ = 'MessageParameters'
# end class Notification


class NotificationDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, NotificationType=None, EmailDetail=None, FaxDetail=None, SmsDetail=None, Localization=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.NotificationType = NotificationType
        self.validate_NotificationType(self.NotificationType)
        self.NotificationType_nsprefix_ = None
        self.EmailDetail = EmailDetail
        self.EmailDetail_nsprefix_ = None
        self.FaxDetail = FaxDetail
        self.FaxDetail_nsprefix_ = None
        self.SmsDetail = SmsDetail
        self.SmsDetail_nsprefix_ = None
        self.Localization = Localization
        self.Localization_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotificationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotificationDetail.subclass:
            return NotificationDetail.subclass(*args_, **kwargs_)
        else:
            return NotificationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_NotificationType(self):
        return self.NotificationType
    def set_NotificationType(self, NotificationType):
        self.NotificationType = NotificationType
    def get_EmailDetail(self):
        return self.EmailDetail
    def set_EmailDetail(self, EmailDetail):
        self.EmailDetail = EmailDetail
    def get_FaxDetail(self):
        return self.FaxDetail
    def set_FaxDetail(self, FaxDetail):
        self.FaxDetail = FaxDetail
    def get_SmsDetail(self):
        return self.SmsDetail
    def set_SmsDetail(self, SmsDetail):
        self.SmsDetail = SmsDetail
    def get_Localization(self):
        return self.Localization
    def set_Localization(self, Localization):
        self.Localization = Localization
    def validate_NotificationType(self, value):
        result = True
        # Validate type NotificationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['EMAIL', 'FAX', 'SMS_TEXT_MESSAGE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.NotificationType is not None or
            self.EmailDetail is not None or
            self.FaxDetail is not None or
            self.SmsDetail is not None or
            self.Localization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NotificationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NotificationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NotificationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NotificationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NotificationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NotificationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NotificationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NotificationType is not None:
            namespaceprefix_ = self.NotificationType_nsprefix_ + ':' if (UseCapturedNS_ and self.NotificationType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNotificationType>%s</%sNotificationType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NotificationType), input_name='NotificationType')), namespaceprefix_ , eol_))
        if self.EmailDetail is not None:
            namespaceprefix_ = self.EmailDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.EmailDetail_nsprefix_) else ''
            self.EmailDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EmailDetail', pretty_print=pretty_print)
        if self.FaxDetail is not None:
            namespaceprefix_ = self.FaxDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.FaxDetail_nsprefix_) else ''
            self.FaxDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FaxDetail', pretty_print=pretty_print)
        if self.SmsDetail is not None:
            namespaceprefix_ = self.SmsDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.SmsDetail_nsprefix_) else ''
            self.SmsDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SmsDetail', pretty_print=pretty_print)
        if self.Localization is not None:
            namespaceprefix_ = self.Localization_nsprefix_ + ':' if (UseCapturedNS_ and self.Localization_nsprefix_) else ''
            self.Localization.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Localization', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'NotificationType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NotificationType')
            value_ = self.gds_validate_string(value_, node, 'NotificationType')
            self.NotificationType = value_
            self.NotificationType_nsprefix_ = child_.prefix
            # validate type NotificationType
            self.validate_NotificationType(self.NotificationType)
        elif nodeName_ == 'EmailDetail':
            obj_ = EMailDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EmailDetail = obj_
            obj_.original_tagname_ = 'EmailDetail'
        elif nodeName_ == 'FaxDetail':
            obj_ = FaxDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FaxDetail = obj_
            obj_.original_tagname_ = 'FaxDetail'
        elif nodeName_ == 'SmsDetail':
            obj_ = SmsDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SmsDetail = obj_
            obj_.original_tagname_ = 'SmsDetail'
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
# end class NotificationDetail


class NotificationParameter(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Id=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Id = Id
        self.Id_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NotificationParameter)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NotificationParameter.subclass:
            return NotificationParameter.subclass(*args_, **kwargs_)
        else:
            return NotificationParameter(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Id(self):
        return self.Id
    def set_Id(self, Id):
        self.Id = Id
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def hasContent_(self):
        if (
            self.Id is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NotificationParameter', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NotificationParameter')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NotificationParameter':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NotificationParameter')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NotificationParameter', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='NotificationParameter'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='NotificationParameter', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Id is not None:
            namespaceprefix_ = self.Id_nsprefix_ + ':' if (UseCapturedNS_ and self.Id_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sId>%s</%sId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Id), input_name='Id')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Id':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Id')
            value_ = self.gds_validate_string(value_, node, 'Id')
            self.Id = value_
            self.Id_nsprefix_ = child_.prefix
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
# end class NotificationParameter


class PalletShrinkwrapDetail(GeneratedsSuper):
    """Specifications for pallets to be shrinkwrapped as part of a Freight
    shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PalletCount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PalletCount = PalletCount
        self.PalletCount_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PalletShrinkwrapDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PalletShrinkwrapDetail.subclass:
            return PalletShrinkwrapDetail.subclass(*args_, **kwargs_)
        else:
            return PalletShrinkwrapDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PalletCount(self):
        return self.PalletCount
    def set_PalletCount(self, PalletCount):
        self.PalletCount = PalletCount
    def hasContent_(self):
        if (
            self.PalletCount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PalletShrinkwrapDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PalletShrinkwrapDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PalletShrinkwrapDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PalletShrinkwrapDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PalletShrinkwrapDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PalletShrinkwrapDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PalletShrinkwrapDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PalletCount is not None:
            namespaceprefix_ = self.PalletCount_nsprefix_ + ':' if (UseCapturedNS_ and self.PalletCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalletCount>%s</%sPalletCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.PalletCount, input_name='PalletCount'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PalletCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PalletCount')
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PalletCount')
            self.PalletCount = ival_
            self.PalletCount_nsprefix_ = child_.prefix
# end class PalletShrinkwrapDetail


class PalletsProvidedDetail(GeneratedsSuper):
    """Specifications for pallets to be provided on Freight shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PalletCount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PalletCount = PalletCount
        self.PalletCount_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PalletsProvidedDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PalletsProvidedDetail.subclass:
            return PalletsProvidedDetail.subclass(*args_, **kwargs_)
        else:
            return PalletsProvidedDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PalletCount(self):
        return self.PalletCount
    def set_PalletCount(self, PalletCount):
        self.PalletCount = PalletCount
    def hasContent_(self):
        if (
            self.PalletCount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PalletsProvidedDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PalletsProvidedDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PalletsProvidedDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PalletsProvidedDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PalletsProvidedDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PalletsProvidedDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PalletsProvidedDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PalletCount is not None:
            namespaceprefix_ = self.PalletCount_nsprefix_ + ':' if (UseCapturedNS_ and self.PalletCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalletCount>%s</%sPalletCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.PalletCount, input_name='PalletCount'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PalletCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PalletCount')
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PalletCount')
            self.PalletCount = ival_
            self.PalletCount_nsprefix_ = child_.prefix
# end class PalletsProvidedDetail


class Party(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, Tins=None, Contact=None, Address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AccountNumber = AccountNumber
        self.AccountNumber_nsprefix_ = None
        if Tins is None:
            self.Tins = []
        else:
            self.Tins = Tins
        self.Tins_nsprefix_ = None
        self.Contact = Contact
        self.Contact_nsprefix_ = None
        self.Address = Address
        self.Address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Party)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Party.subclass:
            return Party.subclass(*args_, **kwargs_)
        else:
            return Party(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AccountNumber(self):
        return self.AccountNumber
    def set_AccountNumber(self, AccountNumber):
        self.AccountNumber = AccountNumber
    def get_Tins(self):
        return self.Tins
    def set_Tins(self, Tins):
        self.Tins = Tins
    def add_Tins(self, value):
        self.Tins.append(value)
    def insert_Tins_at(self, index, value):
        self.Tins.insert(index, value)
    def replace_Tins_at(self, index, value):
        self.Tins[index] = value
    def get_Contact(self):
        return self.Contact
    def set_Contact(self, Contact):
        self.Contact = Contact
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.Tins or
            self.Contact is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Party', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Party')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Party':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Party')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Party', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Party'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Party', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountNumber is not None:
            namespaceprefix_ = self.AccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccountNumber), input_name='AccountNumber')), namespaceprefix_ , eol_))
        for Tins_ in self.Tins:
            namespaceprefix_ = self.Tins_nsprefix_ + ':' if (UseCapturedNS_ and self.Tins_nsprefix_) else ''
            Tins_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Tins', pretty_print=pretty_print)
        if self.Contact is not None:
            namespaceprefix_ = self.Contact_nsprefix_ + ':' if (UseCapturedNS_ and self.Contact_nsprefix_) else ''
            self.Contact.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Contact', pretty_print=pretty_print)
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AccountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccountNumber')
            value_ = self.gds_validate_string(value_, node, 'AccountNumber')
            self.AccountNumber = value_
            self.AccountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'Tins':
            obj_ = TaxpayerIdentification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Tins.append(obj_)
            obj_.original_tagname_ = 'Tins'
        elif nodeName_ == 'Contact':
            obj_ = Contact.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'Address':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class Party


class Payment(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PaymentType=None, Payor=None, Amount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PaymentType = PaymentType
        self.validate_PaymentType(self.PaymentType)
        self.PaymentType_nsprefix_ = None
        self.Payor = Payor
        self.Payor_nsprefix_ = None
        self.Amount = Amount
        self.Amount_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Payment)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Payment.subclass:
            return Payment.subclass(*args_, **kwargs_)
        else:
            return Payment(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PaymentType(self):
        return self.PaymentType
    def set_PaymentType(self, PaymentType):
        self.PaymentType = PaymentType
    def get_Payor(self):
        return self.Payor
    def set_Payor(self, Payor):
        self.Payor = Payor
    def get_Amount(self):
        return self.Amount
    def set_Amount(self, Amount):
        self.Amount = Amount
    def validate_PaymentType(self, value):
        result = True
        # Validate type PaymentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACCOUNT', 'CASH', 'COLLECT', 'CREDIT_CARD', 'RECIPIENT', 'SENDER', 'THIRD_PARTY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PaymentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.PaymentType is not None or
            self.Payor is not None or
            self.Amount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Payment', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Payment')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Payment':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Payment')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Payment', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Payment'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Payment', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PaymentType is not None:
            namespaceprefix_ = self.PaymentType_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentType>%s</%sPaymentType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PaymentType), input_name='PaymentType')), namespaceprefix_ , eol_))
        if self.Payor is not None:
            namespaceprefix_ = self.Payor_nsprefix_ + ':' if (UseCapturedNS_ and self.Payor_nsprefix_) else ''
            self.Payor.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Payor', pretty_print=pretty_print)
        if self.Amount is not None:
            namespaceprefix_ = self.Amount_nsprefix_ + ':' if (UseCapturedNS_ and self.Amount_nsprefix_) else ''
            self.Amount.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Amount', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PaymentType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PaymentType')
            value_ = self.gds_validate_string(value_, node, 'PaymentType')
            self.PaymentType = value_
            self.PaymentType_nsprefix_ = child_.prefix
            # validate type PaymentType
            self.validate_PaymentType(self.PaymentType)
        elif nodeName_ == 'Payor':
            obj_ = Payor.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Payor = obj_
            obj_.original_tagname_ = 'Payor'
        elif nodeName_ == 'Amount':
            obj_ = Money.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Amount = obj_
            obj_.original_tagname_ = 'Amount'
# end class Payment


class Payor(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ResponsibleParty=None, AssociatedAccounts=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ResponsibleParty = ResponsibleParty
        self.ResponsibleParty_nsprefix_ = None
        if AssociatedAccounts is None:
            self.AssociatedAccounts = []
        else:
            self.AssociatedAccounts = AssociatedAccounts
        self.AssociatedAccounts_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Payor)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Payor.subclass:
            return Payor.subclass(*args_, **kwargs_)
        else:
            return Payor(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ResponsibleParty(self):
        return self.ResponsibleParty
    def set_ResponsibleParty(self, ResponsibleParty):
        self.ResponsibleParty = ResponsibleParty
    def get_AssociatedAccounts(self):
        return self.AssociatedAccounts
    def set_AssociatedAccounts(self, AssociatedAccounts):
        self.AssociatedAccounts = AssociatedAccounts
    def add_AssociatedAccounts(self, value):
        self.AssociatedAccounts.append(value)
    def insert_AssociatedAccounts_at(self, index, value):
        self.AssociatedAccounts.insert(index, value)
    def replace_AssociatedAccounts_at(self, index, value):
        self.AssociatedAccounts[index] = value
    def hasContent_(self):
        if (
            self.ResponsibleParty is not None or
            self.AssociatedAccounts
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Payor', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Payor')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Payor':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Payor')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Payor', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Payor'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Payor', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ResponsibleParty is not None:
            namespaceprefix_ = self.ResponsibleParty_nsprefix_ + ':' if (UseCapturedNS_ and self.ResponsibleParty_nsprefix_) else ''
            self.ResponsibleParty.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ResponsibleParty', pretty_print=pretty_print)
        for AssociatedAccounts_ in self.AssociatedAccounts:
            namespaceprefix_ = self.AssociatedAccounts_nsprefix_ + ':' if (UseCapturedNS_ and self.AssociatedAccounts_nsprefix_) else ''
            AssociatedAccounts_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AssociatedAccounts', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ResponsibleParty':
            obj_ = Party.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ResponsibleParty = obj_
            obj_.original_tagname_ = 'ResponsibleParty'
        elif nodeName_ == 'AssociatedAccounts':
            obj_ = AssociatedAccount.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AssociatedAccounts.append(obj_)
            obj_.original_tagname_ = 'AssociatedAccounts'
# end class Payor


class PendingShipmentDetail(GeneratedsSuper):
    """This information describes the kind of pending shipment being
    requested."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, ExpirationDate=None, EmailLabelDetail=None, ProcessingOptions=None, RecommendedDocumentSpecification=None, DocumentReferences=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_PendingShipmentType(self.Type)
        self.Type_nsprefix_ = None
        if isinstance(ExpirationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ExpirationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ExpirationDate
        self.ExpirationDate = initvalue_
        self.ExpirationDate_nsprefix_ = None
        self.EmailLabelDetail = EmailLabelDetail
        self.EmailLabelDetail_nsprefix_ = None
        self.ProcessingOptions = ProcessingOptions
        self.ProcessingOptions_nsprefix_ = None
        self.RecommendedDocumentSpecification = RecommendedDocumentSpecification
        self.RecommendedDocumentSpecification_nsprefix_ = None
        if DocumentReferences is None:
            self.DocumentReferences = []
        else:
            self.DocumentReferences = DocumentReferences
        self.DocumentReferences_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PendingShipmentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PendingShipmentDetail.subclass:
            return PendingShipmentDetail.subclass(*args_, **kwargs_)
        else:
            return PendingShipmentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_ExpirationDate(self):
        return self.ExpirationDate
    def set_ExpirationDate(self, ExpirationDate):
        self.ExpirationDate = ExpirationDate
    def get_EmailLabelDetail(self):
        return self.EmailLabelDetail
    def set_EmailLabelDetail(self, EmailLabelDetail):
        self.EmailLabelDetail = EmailLabelDetail
    def get_ProcessingOptions(self):
        return self.ProcessingOptions
    def set_ProcessingOptions(self, ProcessingOptions):
        self.ProcessingOptions = ProcessingOptions
    def get_RecommendedDocumentSpecification(self):
        return self.RecommendedDocumentSpecification
    def set_RecommendedDocumentSpecification(self, RecommendedDocumentSpecification):
        self.RecommendedDocumentSpecification = RecommendedDocumentSpecification
    def get_DocumentReferences(self):
        return self.DocumentReferences
    def set_DocumentReferences(self, DocumentReferences):
        self.DocumentReferences = DocumentReferences
    def add_DocumentReferences(self, value):
        self.DocumentReferences.append(value)
    def insert_DocumentReferences_at(self, index, value):
        self.DocumentReferences.insert(index, value)
    def replace_DocumentReferences_at(self, index, value):
        self.DocumentReferences[index] = value
    def validate_PendingShipmentType(self, value):
        result = True
        # Validate type PendingShipmentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['EMAIL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PendingShipmentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.ExpirationDate is not None or
            self.EmailLabelDetail is not None or
            self.ProcessingOptions is not None or
            self.RecommendedDocumentSpecification is not None or
            self.DocumentReferences
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PendingShipmentDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PendingShipmentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PendingShipmentDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PendingShipmentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PendingShipmentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PendingShipmentDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PendingShipmentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.ExpirationDate is not None:
            namespaceprefix_ = self.ExpirationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ExpirationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExpirationDate>%s</%sExpirationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ExpirationDate, input_name='ExpirationDate'), namespaceprefix_ , eol_))
        if self.EmailLabelDetail is not None:
            namespaceprefix_ = self.EmailLabelDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.EmailLabelDetail_nsprefix_) else ''
            self.EmailLabelDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EmailLabelDetail', pretty_print=pretty_print)
        if self.ProcessingOptions is not None:
            namespaceprefix_ = self.ProcessingOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.ProcessingOptions_nsprefix_) else ''
            self.ProcessingOptions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ProcessingOptions', pretty_print=pretty_print)
        if self.RecommendedDocumentSpecification is not None:
            namespaceprefix_ = self.RecommendedDocumentSpecification_nsprefix_ + ':' if (UseCapturedNS_ and self.RecommendedDocumentSpecification_nsprefix_) else ''
            self.RecommendedDocumentSpecification.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RecommendedDocumentSpecification', pretty_print=pretty_print)
        for DocumentReferences_ in self.DocumentReferences:
            namespaceprefix_ = self.DocumentReferences_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentReferences_nsprefix_) else ''
            DocumentReferences_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocumentReferences', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type PendingShipmentType
            self.validate_PendingShipmentType(self.Type)
        elif nodeName_ == 'ExpirationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ExpirationDate = dval_
            self.ExpirationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'EmailLabelDetail':
            obj_ = EMailLabelDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EmailLabelDetail = obj_
            obj_.original_tagname_ = 'EmailLabelDetail'
        elif nodeName_ == 'ProcessingOptions':
            obj_ = PendingShipmentProcessingOptionsRequested.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ProcessingOptions = obj_
            obj_.original_tagname_ = 'ProcessingOptions'
        elif nodeName_ == 'RecommendedDocumentSpecification':
            obj_ = RecommendedDocumentSpecification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RecommendedDocumentSpecification = obj_
            obj_.original_tagname_ = 'RecommendedDocumentSpecification'
        elif nodeName_ == 'DocumentReferences':
            obj_ = UploadDocumentReferenceDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocumentReferences.append(obj_)
            obj_.original_tagname_ = 'DocumentReferences'
# end class PendingShipmentDetail


class PendingShipmentProcessingOptionsRequested(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Options=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.Options_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PendingShipmentProcessingOptionsRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PendingShipmentProcessingOptionsRequested.subclass:
            return PendingShipmentProcessingOptionsRequested.subclass(*args_, **kwargs_)
        else:
            return PendingShipmentProcessingOptionsRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def add_Options(self, value):
        self.Options.append(value)
    def insert_Options_at(self, index, value):
        self.Options.insert(index, value)
    def replace_Options_at(self, index, value):
        self.Options[index] = value
    def validate_PendingShipmentProcessingOptionType(self, value):
        result = True
        # Validate type PendingShipmentProcessingOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ALLOW_MODIFICATIONS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PendingShipmentProcessingOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Options
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PendingShipmentProcessingOptionsRequested', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PendingShipmentProcessingOptionsRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PendingShipmentProcessingOptionsRequested':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PendingShipmentProcessingOptionsRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PendingShipmentProcessingOptionsRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PendingShipmentProcessingOptionsRequested'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PendingShipmentProcessingOptionsRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Options_ in self.Options:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptions>%s</%sOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Options':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Options')
            value_ = self.gds_validate_string(value_, node, 'Options')
            self.Options.append(value_)
            self.Options_nsprefix_ = child_.prefix
            # validate type PendingShipmentProcessingOptionType
            self.validate_PendingShipmentProcessingOptionType(self.Options[-1])
# end class PendingShipmentProcessingOptionsRequested


class PickupAvailabilityReply(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, RequestTimestamp=None, Options=None, CloseTimeType=None, CloseTime=None, OpenTime=None, LocalTime=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.HighestSeverity = HighestSeverity
        self.validate_NotificationSeverityType(self.HighestSeverity)
        self.HighestSeverity_nsprefix_ = None
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.Notifications_nsprefix_ = None
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = None
        self.Version = Version
        self.Version_nsprefix_ = None
        if isinstance(RequestTimestamp, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RequestTimestamp, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = RequestTimestamp
        self.RequestTimestamp = initvalue_
        self.RequestTimestamp_nsprefix_ = None
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.Options_nsprefix_ = None
        self.CloseTimeType = CloseTimeType
        self.validate_CloseTimeType(self.CloseTimeType)
        self.CloseTimeType_nsprefix_ = None
        if isinstance(CloseTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(CloseTime, '%H:%M:%S').time()
        else:
            initvalue_ = CloseTime
        self.CloseTime = initvalue_
        self.CloseTime_nsprefix_ = None
        if isinstance(OpenTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(OpenTime, '%H:%M:%S').time()
        else:
            initvalue_ = OpenTime
        self.OpenTime = initvalue_
        self.OpenTime_nsprefix_ = None
        if isinstance(LocalTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LocalTime, '%H:%M:%S').time()
        else:
            initvalue_ = LocalTime
        self.LocalTime = initvalue_
        self.LocalTime_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickupAvailabilityReply)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickupAvailabilityReply.subclass:
            return PickupAvailabilityReply.subclass(*args_, **kwargs_)
        else:
            return PickupAvailabilityReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_HighestSeverity(self):
        return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity):
        self.HighestSeverity = HighestSeverity
    def get_Notifications(self):
        return self.Notifications
    def set_Notifications(self, Notifications):
        self.Notifications = Notifications
    def add_Notifications(self, value):
        self.Notifications.append(value)
    def insert_Notifications_at(self, index, value):
        self.Notifications.insert(index, value)
    def replace_Notifications_at(self, index, value):
        self.Notifications[index] = value
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_RequestTimestamp(self):
        return self.RequestTimestamp
    def set_RequestTimestamp(self, RequestTimestamp):
        self.RequestTimestamp = RequestTimestamp
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def add_Options(self, value):
        self.Options.append(value)
    def insert_Options_at(self, index, value):
        self.Options.insert(index, value)
    def replace_Options_at(self, index, value):
        self.Options[index] = value
    def get_CloseTimeType(self):
        return self.CloseTimeType
    def set_CloseTimeType(self, CloseTimeType):
        self.CloseTimeType = CloseTimeType
    def get_CloseTime(self):
        return self.CloseTime
    def set_CloseTime(self, CloseTime):
        self.CloseTime = CloseTime
    def get_OpenTime(self):
        return self.OpenTime
    def set_OpenTime(self, OpenTime):
        self.OpenTime = OpenTime
    def get_LocalTime(self):
        return self.LocalTime
    def set_LocalTime(self, LocalTime):
        self.LocalTime = LocalTime
    def validate_NotificationSeverityType(self, value):
        result = True
        # Validate type NotificationSeverityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ERROR', 'FAILURE', 'NOTE', 'SUCCESS', 'WARNING']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationSeverityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CloseTimeType(self, value):
        result = True
        # Validate type CloseTimeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CUSTOMER_SPECIFIED', 'DEFAULT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CloseTimeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.RequestTimestamp is not None or
            self.Options or
            self.CloseTimeType is not None or
            self.CloseTime is not None or
            self.OpenTime is not None or
            self.LocalTime is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PickupAvailabilityReply', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickupAvailabilityReply')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PickupAvailabilityReply':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PickupAvailabilityReply')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PickupAvailabilityReply', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PickupAvailabilityReply'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PickupAvailabilityReply', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HighestSeverity is not None:
            namespaceprefix_ = self.HighestSeverity_nsprefix_ + ':' if (UseCapturedNS_ and self.HighestSeverity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.HighestSeverity), input_name='HighestSeverity')), namespaceprefix_ , eol_))
        for Notifications_ in self.Notifications:
            namespaceprefix_ = self.Notifications_nsprefix_ + ':' if (UseCapturedNS_ and self.Notifications_nsprefix_) else ''
            Notifications_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Notifications', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        if self.RequestTimestamp is not None:
            namespaceprefix_ = self.RequestTimestamp_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestTimestamp_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestTimestamp>%s</%sRequestTimestamp>%s' % (namespaceprefix_ , self.gds_format_datetime(self.RequestTimestamp, input_name='RequestTimestamp'), namespaceprefix_ , eol_))
        for Options_ in self.Options:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            Options_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Options', pretty_print=pretty_print)
        if self.CloseTimeType is not None:
            namespaceprefix_ = self.CloseTimeType_nsprefix_ + ':' if (UseCapturedNS_ and self.CloseTimeType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCloseTimeType>%s</%sCloseTimeType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CloseTimeType), input_name='CloseTimeType')), namespaceprefix_ , eol_))
        if self.CloseTime is not None:
            namespaceprefix_ = self.CloseTime_nsprefix_ + ':' if (UseCapturedNS_ and self.CloseTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCloseTime>%s</%sCloseTime>%s' % (namespaceprefix_ , self.gds_format_time(self.CloseTime, input_name='CloseTime'), namespaceprefix_ , eol_))
        if self.OpenTime is not None:
            namespaceprefix_ = self.OpenTime_nsprefix_ + ':' if (UseCapturedNS_ and self.OpenTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOpenTime>%s</%sOpenTime>%s' % (namespaceprefix_ , self.gds_format_time(self.OpenTime, input_name='OpenTime'), namespaceprefix_ , eol_))
        if self.LocalTime is not None:
            namespaceprefix_ = self.LocalTime_nsprefix_ + ':' if (UseCapturedNS_ and self.LocalTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocalTime>%s</%sLocalTime>%s' % (namespaceprefix_ , self.gds_format_time(self.LocalTime, input_name='LocalTime'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'HighestSeverity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'HighestSeverity')
            value_ = self.gds_validate_string(value_, node, 'HighestSeverity')
            self.HighestSeverity = value_
            self.HighestSeverity_nsprefix_ = child_.prefix
            # validate type NotificationSeverityType
            self.validate_NotificationSeverityType(self.HighestSeverity)
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Notifications.append(obj_)
            obj_.original_tagname_ = 'Notifications'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'RequestTimestamp':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.RequestTimestamp = dval_
            self.RequestTimestamp_nsprefix_ = child_.prefix
        elif nodeName_ == 'Options':
            obj_ = PickupScheduleOption.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Options.append(obj_)
            obj_.original_tagname_ = 'Options'
        elif nodeName_ == 'CloseTimeType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CloseTimeType')
            value_ = self.gds_validate_string(value_, node, 'CloseTimeType')
            self.CloseTimeType = value_
            self.CloseTimeType_nsprefix_ = child_.prefix
            # validate type CloseTimeType
            self.validate_CloseTimeType(self.CloseTimeType)
        elif nodeName_ == 'CloseTime':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.CloseTime = dval_
            self.CloseTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'OpenTime':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.OpenTime = dval_
            self.OpenTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'LocalTime':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.LocalTime = dval_
            self.LocalTime_nsprefix_ = child_.prefix
# end class PickupAvailabilityReply


class PickupAvailabilityRequest(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, PickupType=None, AccountNumber=None, PickupAddress=None, PickupRequestType=None, DispatchDate=None, NumberOfBusinessDays=None, PackageReadyTime=None, CustomerCloseTime=None, Carriers=None, ShipmentAttributes=None, PackageDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.WebAuthenticationDetail_nsprefix_ = None
        self.ClientDetail = ClientDetail
        self.ClientDetail_nsprefix_ = None
        self.TransactionDetail = TransactionDetail
        self.TransactionDetail_nsprefix_ = None
        self.Version = Version
        self.Version_nsprefix_ = None
        self.PickupType = PickupType
        self.validate_PickupType(self.PickupType)
        self.PickupType_nsprefix_ = None
        self.AccountNumber = AccountNumber
        self.AccountNumber_nsprefix_ = None
        self.PickupAddress = PickupAddress
        self.PickupAddress_nsprefix_ = None
        if PickupRequestType is None:
            self.PickupRequestType = []
        else:
            self.PickupRequestType = PickupRequestType
        self.PickupRequestType_nsprefix_ = None
        if isinstance(DispatchDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DispatchDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DispatchDate
        self.DispatchDate = initvalue_
        self.DispatchDate_nsprefix_ = None
        self.NumberOfBusinessDays = NumberOfBusinessDays
        self.NumberOfBusinessDays_nsprefix_ = None
        if isinstance(PackageReadyTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(PackageReadyTime, '%H:%M:%S').time()
        else:
            initvalue_ = PackageReadyTime
        self.PackageReadyTime = initvalue_
        self.PackageReadyTime_nsprefix_ = None
        if isinstance(CustomerCloseTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(CustomerCloseTime, '%H:%M:%S').time()
        else:
            initvalue_ = CustomerCloseTime
        self.CustomerCloseTime = initvalue_
        self.CustomerCloseTime_nsprefix_ = None
        if Carriers is None:
            self.Carriers = []
        else:
            self.Carriers = Carriers
        self.Carriers_nsprefix_ = None
        self.ShipmentAttributes = ShipmentAttributes
        self.ShipmentAttributes_nsprefix_ = None
        if PackageDetails is None:
            self.PackageDetails = []
        else:
            self.PackageDetails = PackageDetails
        self.PackageDetails_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickupAvailabilityRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickupAvailabilityRequest.subclass:
            return PickupAvailabilityRequest.subclass(*args_, **kwargs_)
        else:
            return PickupAvailabilityRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_WebAuthenticationDetail(self):
        return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail):
        self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self):
        return self.ClientDetail
    def set_ClientDetail(self, ClientDetail):
        self.ClientDetail = ClientDetail
    def get_TransactionDetail(self):
        return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail):
        self.TransactionDetail = TransactionDetail
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def get_PickupType(self):
        return self.PickupType
    def set_PickupType(self, PickupType):
        self.PickupType = PickupType
    def get_AccountNumber(self):
        return self.AccountNumber
    def set_AccountNumber(self, AccountNumber):
        self.AccountNumber = AccountNumber
    def get_PickupAddress(self):
        return self.PickupAddress
    def set_PickupAddress(self, PickupAddress):
        self.PickupAddress = PickupAddress
    def get_PickupRequestType(self):
        return self.PickupRequestType
    def set_PickupRequestType(self, PickupRequestType):
        self.PickupRequestType = PickupRequestType
    def add_PickupRequestType(self, value):
        self.PickupRequestType.append(value)
    def insert_PickupRequestType_at(self, index, value):
        self.PickupRequestType.insert(index, value)
    def replace_PickupRequestType_at(self, index, value):
        self.PickupRequestType[index] = value
    def get_DispatchDate(self):
        return self.DispatchDate
    def set_DispatchDate(self, DispatchDate):
        self.DispatchDate = DispatchDate
    def get_NumberOfBusinessDays(self):
        return self.NumberOfBusinessDays
    def set_NumberOfBusinessDays(self, NumberOfBusinessDays):
        self.NumberOfBusinessDays = NumberOfBusinessDays
    def get_PackageReadyTime(self):
        return self.PackageReadyTime
    def set_PackageReadyTime(self, PackageReadyTime):
        self.PackageReadyTime = PackageReadyTime
    def get_CustomerCloseTime(self):
        return self.CustomerCloseTime
    def set_CustomerCloseTime(self, CustomerCloseTime):
        self.CustomerCloseTime = CustomerCloseTime
    def get_Carriers(self):
        return self.Carriers
    def set_Carriers(self, Carriers):
        self.Carriers = Carriers
    def add_Carriers(self, value):
        self.Carriers.append(value)
    def insert_Carriers_at(self, index, value):
        self.Carriers.insert(index, value)
    def replace_Carriers_at(self, index, value):
        self.Carriers[index] = value
    def get_ShipmentAttributes(self):
        return self.ShipmentAttributes
    def set_ShipmentAttributes(self, ShipmentAttributes):
        self.ShipmentAttributes = ShipmentAttributes
    def get_PackageDetails(self):
        return self.PackageDetails
    def set_PackageDetails(self, PackageDetails):
        self.PackageDetails = PackageDetails
    def add_PackageDetails(self, value):
        self.PackageDetails.append(value)
    def insert_PackageDetails_at(self, index, value):
        self.PackageDetails.insert(index, value)
    def replace_PackageDetails_at(self, index, value):
        self.PackageDetails[index] = value
    def validate_PickupType(self, value):
        result = True
        # Validate type PickupType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ON_CALL', 'TAG']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PickupType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_PickupRequestType(self, value):
        result = True
        # Validate type PickupRequestType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FUTURE_DAY', 'SAME_DAY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PickupRequestType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CarrierCodeType(self, value):
        result = True
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FXCC', 'FXFR', 'FXSP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CarrierCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.PickupType is not None or
            self.AccountNumber is not None or
            self.PickupAddress is not None or
            self.PickupRequestType or
            self.DispatchDate is not None or
            self.NumberOfBusinessDays is not None or
            self.PackageReadyTime is not None or
            self.CustomerCloseTime is not None or
            self.Carriers or
            self.ShipmentAttributes is not None or
            self.PackageDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PickupAvailabilityRequest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickupAvailabilityRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PickupAvailabilityRequest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PickupAvailabilityRequest')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PickupAvailabilityRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PickupAvailabilityRequest'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PickupAvailabilityRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WebAuthenticationDetail is not None:
            namespaceprefix_ = self.WebAuthenticationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.WebAuthenticationDetail_nsprefix_) else ''
            self.WebAuthenticationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WebAuthenticationDetail', pretty_print=pretty_print)
        if self.ClientDetail is not None:
            namespaceprefix_ = self.ClientDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientDetail_nsprefix_) else ''
            self.ClientDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ClientDetail', pretty_print=pretty_print)
        if self.TransactionDetail is not None:
            namespaceprefix_ = self.TransactionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.TransactionDetail_nsprefix_) else ''
            self.TransactionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransactionDetail', pretty_print=pretty_print)
        if self.Version is not None:
            namespaceprefix_ = self.Version_nsprefix_ + ':' if (UseCapturedNS_ and self.Version_nsprefix_) else ''
            self.Version.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Version', pretty_print=pretty_print)
        if self.PickupType is not None:
            namespaceprefix_ = self.PickupType_nsprefix_ + ':' if (UseCapturedNS_ and self.PickupType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPickupType>%s</%sPickupType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PickupType), input_name='PickupType')), namespaceprefix_ , eol_))
        if self.AccountNumber is not None:
            namespaceprefix_ = self.AccountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.AccountNumber_nsprefix_) else ''
            self.AccountNumber.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AccountNumber', pretty_print=pretty_print)
        if self.PickupAddress is not None:
            namespaceprefix_ = self.PickupAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.PickupAddress_nsprefix_) else ''
            self.PickupAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PickupAddress', pretty_print=pretty_print)
        for PickupRequestType_ in self.PickupRequestType:
            namespaceprefix_ = self.PickupRequestType_nsprefix_ + ':' if (UseCapturedNS_ and self.PickupRequestType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPickupRequestType>%s</%sPickupRequestType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(PickupRequestType_), input_name='PickupRequestType')), namespaceprefix_ , eol_))
        if self.DispatchDate is not None:
            namespaceprefix_ = self.DispatchDate_nsprefix_ + ':' if (UseCapturedNS_ and self.DispatchDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDispatchDate>%s</%sDispatchDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DispatchDate, input_name='DispatchDate'), namespaceprefix_ , eol_))
        if self.NumberOfBusinessDays is not None:
            namespaceprefix_ = self.NumberOfBusinessDays_nsprefix_ + ':' if (UseCapturedNS_ and self.NumberOfBusinessDays_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberOfBusinessDays>%s</%sNumberOfBusinessDays>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumberOfBusinessDays, input_name='NumberOfBusinessDays'), namespaceprefix_ , eol_))
        if self.PackageReadyTime is not None:
            namespaceprefix_ = self.PackageReadyTime_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageReadyTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackageReadyTime>%s</%sPackageReadyTime>%s' % (namespaceprefix_ , self.gds_format_time(self.PackageReadyTime, input_name='PackageReadyTime'), namespaceprefix_ , eol_))
        if self.CustomerCloseTime is not None:
            namespaceprefix_ = self.CustomerCloseTime_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerCloseTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomerCloseTime>%s</%sCustomerCloseTime>%s' % (namespaceprefix_ , self.gds_format_time(self.CustomerCloseTime, input_name='CustomerCloseTime'), namespaceprefix_ , eol_))
        for Carriers_ in self.Carriers:
            namespaceprefix_ = self.Carriers_nsprefix_ + ':' if (UseCapturedNS_ and self.Carriers_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarriers>%s</%sCarriers>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Carriers_), input_name='Carriers')), namespaceprefix_ , eol_))
        if self.ShipmentAttributes is not None:
            namespaceprefix_ = self.ShipmentAttributes_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentAttributes_nsprefix_) else ''
            self.ShipmentAttributes.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentAttributes', pretty_print=pretty_print)
        for PackageDetails_ in self.PackageDetails:
            namespaceprefix_ = self.PackageDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageDetails_nsprefix_) else ''
            PackageDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackageDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WebAuthenticationDetail = obj_
            obj_.original_tagname_ = 'WebAuthenticationDetail'
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ClientDetail = obj_
            obj_.original_tagname_ = 'ClientDetail'
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransactionDetail = obj_
            obj_.original_tagname_ = 'TransactionDetail'
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Version = obj_
            obj_.original_tagname_ = 'Version'
        elif nodeName_ == 'PickupType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PickupType')
            value_ = self.gds_validate_string(value_, node, 'PickupType')
            self.PickupType = value_
            self.PickupType_nsprefix_ = child_.prefix
            # validate type PickupType
            self.validate_PickupType(self.PickupType)
        elif nodeName_ == 'AccountNumber':
            obj_ = AssociatedAccount.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AccountNumber = obj_
            obj_.original_tagname_ = 'AccountNumber'
        elif nodeName_ == 'PickupAddress':
            obj_ = Address.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PickupAddress = obj_
            obj_.original_tagname_ = 'PickupAddress'
        elif nodeName_ == 'PickupRequestType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PickupRequestType')
            value_ = self.gds_validate_string(value_, node, 'PickupRequestType')
            self.PickupRequestType.append(value_)
            self.PickupRequestType_nsprefix_ = child_.prefix
            # validate type PickupRequestType
            self.validate_PickupRequestType(self.PickupRequestType[-1])
        elif nodeName_ == 'DispatchDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DispatchDate = dval_
            self.DispatchDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'NumberOfBusinessDays' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'NumberOfBusinessDays')
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'NumberOfBusinessDays')
            self.NumberOfBusinessDays = ival_
            self.NumberOfBusinessDays_nsprefix_ = child_.prefix
        elif nodeName_ == 'PackageReadyTime':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.PackageReadyTime = dval_
            self.PackageReadyTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'CustomerCloseTime':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.CustomerCloseTime = dval_
            self.CustomerCloseTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'Carriers':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Carriers')
            value_ = self.gds_validate_string(value_, node, 'Carriers')
            self.Carriers.append(value_)
            self.Carriers_nsprefix_ = child_.prefix
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.Carriers[-1])
        elif nodeName_ == 'ShipmentAttributes':
            obj_ = PickupShipmentAttributes.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentAttributes = obj_
            obj_.original_tagname_ = 'ShipmentAttributes'
        elif nodeName_ == 'PackageDetails':
            obj_ = RequestedPickupPackageDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackageDetails.append(obj_)
            obj_.original_tagname_ = 'PackageDetails'
# end class PickupAvailabilityRequest


class PickupDangerousGoodsDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Regulation=None, Accessibility=None, Options=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Regulation = Regulation
        self.validate_HazardousCommodityRegulationType(self.Regulation)
        self.Regulation_nsprefix_ = None
        self.Accessibility = Accessibility
        self.validate_DangerousGoodsAccessibilityType(self.Accessibility)
        self.Accessibility_nsprefix_ = None
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.Options_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickupDangerousGoodsDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickupDangerousGoodsDetail.subclass:
            return PickupDangerousGoodsDetail.subclass(*args_, **kwargs_)
        else:
            return PickupDangerousGoodsDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Regulation(self):
        return self.Regulation
    def set_Regulation(self, Regulation):
        self.Regulation = Regulation
    def get_Accessibility(self):
        return self.Accessibility
    def set_Accessibility(self, Accessibility):
        self.Accessibility = Accessibility
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def add_Options(self, value):
        self.Options.append(value)
    def insert_Options_at(self, index, value):
        self.Options.insert(index, value)
    def replace_Options_at(self, index, value):
        self.Options[index] = value
    def validate_HazardousCommodityRegulationType(self, value):
        result = True
        # Validate type HazardousCommodityRegulationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ADR', 'DOT', 'IATA', 'ORMD']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on HazardousCommodityRegulationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_DangerousGoodsAccessibilityType(self, value):
        result = True
        # Validate type DangerousGoodsAccessibilityType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ACCESSIBLE', 'INACCESSIBLE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on DangerousGoodsAccessibilityType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_HazardousCommodityOptionType(self, value):
        result = True
        # Validate type HazardousCommodityOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BATTERY', 'HAZARDOUS_MATERIALS', 'LIMITED_QUANTITIES_COMMODITIES', 'ORM_D', 'REPORTABLE_QUANTITIES', 'SMALL_QUANTITY_EXCEPTION']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on HazardousCommodityOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Regulation is not None or
            self.Accessibility is not None or
            self.Options
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PickupDangerousGoodsDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickupDangerousGoodsDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PickupDangerousGoodsDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PickupDangerousGoodsDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PickupDangerousGoodsDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PickupDangerousGoodsDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PickupDangerousGoodsDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Regulation is not None:
            namespaceprefix_ = self.Regulation_nsprefix_ + ':' if (UseCapturedNS_ and self.Regulation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegulation>%s</%sRegulation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Regulation), input_name='Regulation')), namespaceprefix_ , eol_))
        if self.Accessibility is not None:
            namespaceprefix_ = self.Accessibility_nsprefix_ + ':' if (UseCapturedNS_ and self.Accessibility_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccessibility>%s</%sAccessibility>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Accessibility), input_name='Accessibility')), namespaceprefix_ , eol_))
        for Options_ in self.Options:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptions>%s</%sOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Regulation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Regulation')
            value_ = self.gds_validate_string(value_, node, 'Regulation')
            self.Regulation = value_
            self.Regulation_nsprefix_ = child_.prefix
            # validate type HazardousCommodityRegulationType
            self.validate_HazardousCommodityRegulationType(self.Regulation)
        elif nodeName_ == 'Accessibility':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Accessibility')
            value_ = self.gds_validate_string(value_, node, 'Accessibility')
            self.Accessibility = value_
            self.Accessibility_nsprefix_ = child_.prefix
            # validate type DangerousGoodsAccessibilityType
            self.validate_DangerousGoodsAccessibilityType(self.Accessibility)
        elif nodeName_ == 'Options':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Options')
            value_ = self.gds_validate_string(value_, node, 'Options')
            self.Options.append(value_)
            self.Options_nsprefix_ = child_.prefix
            # validate type HazardousCommodityOptionType
            self.validate_HazardousCommodityOptionType(self.Options[-1])
# end class PickupDangerousGoodsDetail


class PickupOriginDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UseAccountAddress=None, AddressId=None, PickupLocation=None, PackageLocation=None, BuildingPart=None, BuildingPartDescription=None, ReadyTimestamp=None, CompanyCloseTime=None, StayLate=None, PickupDateType=None, LastAccessTime=None, GeographicalPostalCode=None, Location=None, DeleteLastUsed=None, SuppliesRequested=None, EarlyPickup=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UseAccountAddress = UseAccountAddress
        self.UseAccountAddress_nsprefix_ = None
        self.AddressId = AddressId
        self.AddressId_nsprefix_ = None
        self.PickupLocation = PickupLocation
        self.PickupLocation_nsprefix_ = None
        self.PackageLocation = PackageLocation
        self.validate_PickupBuildingLocationType(self.PackageLocation)
        self.PackageLocation_nsprefix_ = None
        self.BuildingPart = BuildingPart
        self.validate_BuildingPartCode(self.BuildingPart)
        self.BuildingPart_nsprefix_ = None
        self.BuildingPartDescription = BuildingPartDescription
        self.BuildingPartDescription_nsprefix_ = None
        if isinstance(ReadyTimestamp, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ReadyTimestamp, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = ReadyTimestamp
        self.ReadyTimestamp = initvalue_
        self.ReadyTimestamp_nsprefix_ = None
        if isinstance(CompanyCloseTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(CompanyCloseTime, '%H:%M:%S').time()
        else:
            initvalue_ = CompanyCloseTime
        self.CompanyCloseTime = initvalue_
        self.CompanyCloseTime_nsprefix_ = None
        self.StayLate = StayLate
        self.StayLate_nsprefix_ = None
        self.PickupDateType = PickupDateType
        self.validate_PickupRequestType(self.PickupDateType)
        self.PickupDateType_nsprefix_ = None
        if isinstance(LastAccessTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(LastAccessTime, '%H:%M:%S').time()
        else:
            initvalue_ = LastAccessTime
        self.LastAccessTime = initvalue_
        self.LastAccessTime_nsprefix_ = None
        self.GeographicalPostalCode = GeographicalPostalCode
        self.GeographicalPostalCode_nsprefix_ = None
        self.Location = Location
        self.Location_nsprefix_ = None
        self.DeleteLastUsed = DeleteLastUsed
        self.DeleteLastUsed_nsprefix_ = None
        self.SuppliesRequested = SuppliesRequested
        self.SuppliesRequested_nsprefix_ = None
        self.EarlyPickup = EarlyPickup
        self.EarlyPickup_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickupOriginDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickupOriginDetail.subclass:
            return PickupOriginDetail.subclass(*args_, **kwargs_)
        else:
            return PickupOriginDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UseAccountAddress(self):
        return self.UseAccountAddress
    def set_UseAccountAddress(self, UseAccountAddress):
        self.UseAccountAddress = UseAccountAddress
    def get_AddressId(self):
        return self.AddressId
    def set_AddressId(self, AddressId):
        self.AddressId = AddressId
    def get_PickupLocation(self):
        return self.PickupLocation
    def set_PickupLocation(self, PickupLocation):
        self.PickupLocation = PickupLocation
    def get_PackageLocation(self):
        return self.PackageLocation
    def set_PackageLocation(self, PackageLocation):
        self.PackageLocation = PackageLocation
    def get_BuildingPart(self):
        return self.BuildingPart
    def set_BuildingPart(self, BuildingPart):
        self.BuildingPart = BuildingPart
    def get_BuildingPartDescription(self):
        return self.BuildingPartDescription
    def set_BuildingPartDescription(self, BuildingPartDescription):
        self.BuildingPartDescription = BuildingPartDescription
    def get_ReadyTimestamp(self):
        return self.ReadyTimestamp
    def set_ReadyTimestamp(self, ReadyTimestamp):
        self.ReadyTimestamp = ReadyTimestamp
    def get_CompanyCloseTime(self):
        return self.CompanyCloseTime
    def set_CompanyCloseTime(self, CompanyCloseTime):
        self.CompanyCloseTime = CompanyCloseTime
    def get_StayLate(self):
        return self.StayLate
    def set_StayLate(self, StayLate):
        self.StayLate = StayLate
    def get_PickupDateType(self):
        return self.PickupDateType
    def set_PickupDateType(self, PickupDateType):
        self.PickupDateType = PickupDateType
    def get_LastAccessTime(self):
        return self.LastAccessTime
    def set_LastAccessTime(self, LastAccessTime):
        self.LastAccessTime = LastAccessTime
    def get_GeographicalPostalCode(self):
        return self.GeographicalPostalCode
    def set_GeographicalPostalCode(self, GeographicalPostalCode):
        self.GeographicalPostalCode = GeographicalPostalCode
    def get_Location(self):
        return self.Location
    def set_Location(self, Location):
        self.Location = Location
    def get_DeleteLastUsed(self):
        return self.DeleteLastUsed
    def set_DeleteLastUsed(self, DeleteLastUsed):
        self.DeleteLastUsed = DeleteLastUsed
    def get_SuppliesRequested(self):
        return self.SuppliesRequested
    def set_SuppliesRequested(self, SuppliesRequested):
        self.SuppliesRequested = SuppliesRequested
    def get_EarlyPickup(self):
        return self.EarlyPickup
    def set_EarlyPickup(self, EarlyPickup):
        self.EarlyPickup = EarlyPickup
    def validate_PickupBuildingLocationType(self, value):
        result = True
        # Validate type PickupBuildingLocationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FRONT', 'NONE', 'REAR', 'SIDE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PickupBuildingLocationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_BuildingPartCode(self, value):
        result = True
        # Validate type BuildingPartCode, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['APARTMENT', 'BUILDING', 'DEPARTMENT', 'FLOOR', 'ROOM', 'SUITE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on BuildingPartCode' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_PickupRequestType(self, value):
        result = True
        # Validate type PickupRequestType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FUTURE_DAY', 'SAME_DAY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PickupRequestType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.UseAccountAddress is not None or
            self.AddressId is not None or
            self.PickupLocation is not None or
            self.PackageLocation is not None or
            self.BuildingPart is not None or
            self.BuildingPartDescription is not None or
            self.ReadyTimestamp is not None or
            self.CompanyCloseTime is not None or
            self.StayLate is not None or
            self.PickupDateType is not None or
            self.LastAccessTime is not None or
            self.GeographicalPostalCode is not None or
            self.Location is not None or
            self.DeleteLastUsed is not None or
            self.SuppliesRequested is not None or
            self.EarlyPickup is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PickupOriginDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickupOriginDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PickupOriginDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PickupOriginDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PickupOriginDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PickupOriginDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PickupOriginDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UseAccountAddress is not None:
            namespaceprefix_ = self.UseAccountAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.UseAccountAddress_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUseAccountAddress>%s</%sUseAccountAddress>%s' % (namespaceprefix_ , self.gds_format_boolean(self.UseAccountAddress, input_name='UseAccountAddress'), namespaceprefix_ , eol_))
        if self.AddressId is not None:
            namespaceprefix_ = self.AddressId_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressId>%s</%sAddressId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AddressId), input_name='AddressId')), namespaceprefix_ , eol_))
        if self.PickupLocation is not None:
            namespaceprefix_ = self.PickupLocation_nsprefix_ + ':' if (UseCapturedNS_ and self.PickupLocation_nsprefix_) else ''
            self.PickupLocation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PickupLocation', pretty_print=pretty_print)
        if self.PackageLocation is not None:
            namespaceprefix_ = self.PackageLocation_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageLocation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackageLocation>%s</%sPackageLocation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PackageLocation), input_name='PackageLocation')), namespaceprefix_ , eol_))
        if self.BuildingPart is not None:
            namespaceprefix_ = self.BuildingPart_nsprefix_ + ':' if (UseCapturedNS_ and self.BuildingPart_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBuildingPart>%s</%sBuildingPart>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BuildingPart), input_name='BuildingPart')), namespaceprefix_ , eol_))
        if self.BuildingPartDescription is not None:
            namespaceprefix_ = self.BuildingPartDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.BuildingPartDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBuildingPartDescription>%s</%sBuildingPartDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BuildingPartDescription), input_name='BuildingPartDescription')), namespaceprefix_ , eol_))
        if self.ReadyTimestamp is not None:
            namespaceprefix_ = self.ReadyTimestamp_nsprefix_ + ':' if (UseCapturedNS_ and self.ReadyTimestamp_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReadyTimestamp>%s</%sReadyTimestamp>%s' % (namespaceprefix_ , self.gds_format_datetime(self.ReadyTimestamp, input_name='ReadyTimestamp'), namespaceprefix_ , eol_))
        if self.CompanyCloseTime is not None:
            namespaceprefix_ = self.CompanyCloseTime_nsprefix_ + ':' if (UseCapturedNS_ and self.CompanyCloseTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompanyCloseTime>%s</%sCompanyCloseTime>%s' % (namespaceprefix_ , self.gds_format_time(self.CompanyCloseTime, input_name='CompanyCloseTime'), namespaceprefix_ , eol_))
        if self.StayLate is not None:
            namespaceprefix_ = self.StayLate_nsprefix_ + ':' if (UseCapturedNS_ and self.StayLate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStayLate>%s</%sStayLate>%s' % (namespaceprefix_ , self.gds_format_boolean(self.StayLate, input_name='StayLate'), namespaceprefix_ , eol_))
        if self.PickupDateType is not None:
            namespaceprefix_ = self.PickupDateType_nsprefix_ + ':' if (UseCapturedNS_ and self.PickupDateType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPickupDateType>%s</%sPickupDateType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PickupDateType), input_name='PickupDateType')), namespaceprefix_ , eol_))
        if self.LastAccessTime is not None:
            namespaceprefix_ = self.LastAccessTime_nsprefix_ + ':' if (UseCapturedNS_ and self.LastAccessTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLastAccessTime>%s</%sLastAccessTime>%s' % (namespaceprefix_ , self.gds_format_time(self.LastAccessTime, input_name='LastAccessTime'), namespaceprefix_ , eol_))
        if self.GeographicalPostalCode is not None:
            namespaceprefix_ = self.GeographicalPostalCode_nsprefix_ + ':' if (UseCapturedNS_ and self.GeographicalPostalCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGeographicalPostalCode>%s</%sGeographicalPostalCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GeographicalPostalCode), input_name='GeographicalPostalCode')), namespaceprefix_ , eol_))
        if self.Location is not None:
            namespaceprefix_ = self.Location_nsprefix_ + ':' if (UseCapturedNS_ and self.Location_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocation>%s</%sLocation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Location), input_name='Location')), namespaceprefix_ , eol_))
        if self.DeleteLastUsed is not None:
            namespaceprefix_ = self.DeleteLastUsed_nsprefix_ + ':' if (UseCapturedNS_ and self.DeleteLastUsed_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeleteLastUsed>%s</%sDeleteLastUsed>%s' % (namespaceprefix_ , self.gds_format_boolean(self.DeleteLastUsed, input_name='DeleteLastUsed'), namespaceprefix_ , eol_))
        if self.SuppliesRequested is not None:
            namespaceprefix_ = self.SuppliesRequested_nsprefix_ + ':' if (UseCapturedNS_ and self.SuppliesRequested_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSuppliesRequested>%s</%sSuppliesRequested>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SuppliesRequested), input_name='SuppliesRequested')), namespaceprefix_ , eol_))
        if self.EarlyPickup is not None:
            namespaceprefix_ = self.EarlyPickup_nsprefix_ + ':' if (UseCapturedNS_ and self.EarlyPickup_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEarlyPickup>%s</%sEarlyPickup>%s' % (namespaceprefix_ , self.gds_format_boolean(self.EarlyPickup, input_name='EarlyPickup'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UseAccountAddress':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'UseAccountAddress')
            ival_ = self.gds_validate_boolean(ival_, node, 'UseAccountAddress')
            self.UseAccountAddress = ival_
            self.UseAccountAddress_nsprefix_ = child_.prefix
        elif nodeName_ == 'AddressId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AddressId')
            value_ = self.gds_validate_string(value_, node, 'AddressId')
            self.AddressId = value_
            self.AddressId_nsprefix_ = child_.prefix
        elif nodeName_ == 'PickupLocation':
            obj_ = ContactAndAddress.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PickupLocation = obj_
            obj_.original_tagname_ = 'PickupLocation'
        elif nodeName_ == 'PackageLocation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackageLocation')
            value_ = self.gds_validate_string(value_, node, 'PackageLocation')
            self.PackageLocation = value_
            self.PackageLocation_nsprefix_ = child_.prefix
            # validate type PickupBuildingLocationType
            self.validate_PickupBuildingLocationType(self.PackageLocation)
        elif nodeName_ == 'BuildingPart':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BuildingPart')
            value_ = self.gds_validate_string(value_, node, 'BuildingPart')
            self.BuildingPart = value_
            self.BuildingPart_nsprefix_ = child_.prefix
            # validate type BuildingPartCode
            self.validate_BuildingPartCode(self.BuildingPart)
        elif nodeName_ == 'BuildingPartDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BuildingPartDescription')
            value_ = self.gds_validate_string(value_, node, 'BuildingPartDescription')
            self.BuildingPartDescription = value_
            self.BuildingPartDescription_nsprefix_ = child_.prefix
        elif nodeName_ == 'ReadyTimestamp':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.ReadyTimestamp = dval_
            self.ReadyTimestamp_nsprefix_ = child_.prefix
        elif nodeName_ == 'CompanyCloseTime':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.CompanyCloseTime = dval_
            self.CompanyCloseTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'StayLate':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'StayLate')
            ival_ = self.gds_validate_boolean(ival_, node, 'StayLate')
            self.StayLate = ival_
            self.StayLate_nsprefix_ = child_.prefix
        elif nodeName_ == 'PickupDateType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PickupDateType')
            value_ = self.gds_validate_string(value_, node, 'PickupDateType')
            self.PickupDateType = value_
            self.PickupDateType_nsprefix_ = child_.prefix
            # validate type PickupRequestType
            self.validate_PickupRequestType(self.PickupDateType)
        elif nodeName_ == 'LastAccessTime':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.LastAccessTime = dval_
            self.LastAccessTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'GeographicalPostalCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GeographicalPostalCode')
            value_ = self.gds_validate_string(value_, node, 'GeographicalPostalCode')
            self.GeographicalPostalCode = value_
            self.GeographicalPostalCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'Location':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Location')
            value_ = self.gds_validate_string(value_, node, 'Location')
            self.Location = value_
            self.Location_nsprefix_ = child_.prefix
        elif nodeName_ == 'DeleteLastUsed':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'DeleteLastUsed')
            ival_ = self.gds_validate_boolean(ival_, node, 'DeleteLastUsed')
            self.DeleteLastUsed = ival_
            self.DeleteLastUsed_nsprefix_ = child_.prefix
        elif nodeName_ == 'SuppliesRequested':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SuppliesRequested')
            value_ = self.gds_validate_string(value_, node, 'SuppliesRequested')
            self.SuppliesRequested = value_
            self.SuppliesRequested_nsprefix_ = child_.prefix
        elif nodeName_ == 'EarlyPickup':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'EarlyPickup')
            ival_ = self.gds_validate_boolean(ival_, node, 'EarlyPickup')
            self.EarlyPickup = ival_
            self.EarlyPickup_nsprefix_ = child_.prefix
# end class PickupOriginDetail


class PickupPackageSpecialServicesRequested(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SpecialServiceTypes=None, DangerousGoodsDetail=None, PriorityAlertDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if SpecialServiceTypes is None:
            self.SpecialServiceTypes = []
        else:
            self.SpecialServiceTypes = SpecialServiceTypes
        self.SpecialServiceTypes_nsprefix_ = None
        self.DangerousGoodsDetail = DangerousGoodsDetail
        self.DangerousGoodsDetail_nsprefix_ = None
        self.PriorityAlertDetail = PriorityAlertDetail
        self.PriorityAlertDetail_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickupPackageSpecialServicesRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickupPackageSpecialServicesRequested.subclass:
            return PickupPackageSpecialServicesRequested.subclass(*args_, **kwargs_)
        else:
            return PickupPackageSpecialServicesRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SpecialServiceTypes(self):
        return self.SpecialServiceTypes
    def set_SpecialServiceTypes(self, SpecialServiceTypes):
        self.SpecialServiceTypes = SpecialServiceTypes
    def add_SpecialServiceTypes(self, value):
        self.SpecialServiceTypes.append(value)
    def insert_SpecialServiceTypes_at(self, index, value):
        self.SpecialServiceTypes.insert(index, value)
    def replace_SpecialServiceTypes_at(self, index, value):
        self.SpecialServiceTypes[index] = value
    def get_DangerousGoodsDetail(self):
        return self.DangerousGoodsDetail
    def set_DangerousGoodsDetail(self, DangerousGoodsDetail):
        self.DangerousGoodsDetail = DangerousGoodsDetail
    def get_PriorityAlertDetail(self):
        return self.PriorityAlertDetail
    def set_PriorityAlertDetail(self, PriorityAlertDetail):
        self.PriorityAlertDetail = PriorityAlertDetail
    def hasContent_(self):
        if (
            self.SpecialServiceTypes or
            self.DangerousGoodsDetail is not None or
            self.PriorityAlertDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PickupPackageSpecialServicesRequested', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickupPackageSpecialServicesRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PickupPackageSpecialServicesRequested':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PickupPackageSpecialServicesRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PickupPackageSpecialServicesRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PickupPackageSpecialServicesRequested'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PickupPackageSpecialServicesRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SpecialServiceTypes_ in self.SpecialServiceTypes:
            namespaceprefix_ = self.SpecialServiceTypes_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialServiceTypes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialServiceTypes>%s</%sSpecialServiceTypes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(SpecialServiceTypes_), input_name='SpecialServiceTypes')), namespaceprefix_ , eol_))
        if self.DangerousGoodsDetail is not None:
            namespaceprefix_ = self.DangerousGoodsDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.DangerousGoodsDetail_nsprefix_) else ''
            self.DangerousGoodsDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DangerousGoodsDetail', pretty_print=pretty_print)
        if self.PriorityAlertDetail is not None:
            namespaceprefix_ = self.PriorityAlertDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.PriorityAlertDetail_nsprefix_) else ''
            self.PriorityAlertDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PriorityAlertDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SpecialServiceTypes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecialServiceTypes')
            value_ = self.gds_validate_string(value_, node, 'SpecialServiceTypes')
            self.SpecialServiceTypes.append(value_)
            self.SpecialServiceTypes_nsprefix_ = child_.prefix
        elif nodeName_ == 'DangerousGoodsDetail':
            obj_ = PickupDangerousGoodsDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DangerousGoodsDetail = obj_
            obj_.original_tagname_ = 'DangerousGoodsDetail'
        elif nodeName_ == 'PriorityAlertDetail':
            obj_ = PriorityAlertDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PriorityAlertDetail = obj_
            obj_.original_tagname_ = 'PriorityAlertDetail'
# end class PickupPackageSpecialServicesRequested


class PickupScheduleOption(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Carrier=None, Description=None, ScheduleDay=None, Available=None, PickupDate=None, CutOffTime=None, AccessTime=None, ResidentialAvailable=None, CountryRelationship=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Carrier = Carrier
        self.validate_CarrierCodeType(self.Carrier)
        self.Carrier_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.ScheduleDay = ScheduleDay
        self.validate_PickupRequestType(self.ScheduleDay)
        self.ScheduleDay_nsprefix_ = None
        self.Available = Available
        self.Available_nsprefix_ = None
        if isinstance(PickupDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(PickupDate, '%Y-%m-%d').date()
        else:
            initvalue_ = PickupDate
        self.PickupDate = initvalue_
        self.PickupDate_nsprefix_ = None
        if isinstance(CutOffTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(CutOffTime, '%H:%M:%S').time()
        else:
            initvalue_ = CutOffTime
        self.CutOffTime = initvalue_
        self.CutOffTime_nsprefix_ = None
        self.AccessTime = AccessTime
        self.AccessTime_nsprefix_ = None
        self.ResidentialAvailable = ResidentialAvailable
        self.ResidentialAvailable_nsprefix_ = None
        self.CountryRelationship = CountryRelationship
        self.validate_CountryRelationshipType(self.CountryRelationship)
        self.CountryRelationship_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickupScheduleOption)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickupScheduleOption.subclass:
            return PickupScheduleOption.subclass(*args_, **kwargs_)
        else:
            return PickupScheduleOption(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Carrier(self):
        return self.Carrier
    def set_Carrier(self, Carrier):
        self.Carrier = Carrier
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_ScheduleDay(self):
        return self.ScheduleDay
    def set_ScheduleDay(self, ScheduleDay):
        self.ScheduleDay = ScheduleDay
    def get_Available(self):
        return self.Available
    def set_Available(self, Available):
        self.Available = Available
    def get_PickupDate(self):
        return self.PickupDate
    def set_PickupDate(self, PickupDate):
        self.PickupDate = PickupDate
    def get_CutOffTime(self):
        return self.CutOffTime
    def set_CutOffTime(self, CutOffTime):
        self.CutOffTime = CutOffTime
    def get_AccessTime(self):
        return self.AccessTime
    def set_AccessTime(self, AccessTime):
        self.AccessTime = AccessTime
    def get_ResidentialAvailable(self):
        return self.ResidentialAvailable
    def set_ResidentialAvailable(self, ResidentialAvailable):
        self.ResidentialAvailable = ResidentialAvailable
    def get_CountryRelationship(self):
        return self.CountryRelationship
    def set_CountryRelationship(self, CountryRelationship):
        self.CountryRelationship = CountryRelationship
    def validate_CarrierCodeType(self, value):
        result = True
        # Validate type CarrierCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FDXC', 'FDXE', 'FDXG', 'FXCC', 'FXFR', 'FXSP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CarrierCodeType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_PickupRequestType(self, value):
        result = True
        # Validate type PickupRequestType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FUTURE_DAY', 'SAME_DAY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PickupRequestType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_CountryRelationshipType(self, value):
        result = True
        # Validate type CountryRelationshipType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['DOMESTIC', 'INTERNATIONAL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on CountryRelationshipType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Carrier is not None or
            self.Description is not None or
            self.ScheduleDay is not None or
            self.Available is not None or
            self.PickupDate is not None or
            self.CutOffTime is not None or
            self.AccessTime is not None or
            self.ResidentialAvailable is not None or
            self.CountryRelationship is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PickupScheduleOption', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickupScheduleOption')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PickupScheduleOption':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PickupScheduleOption')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PickupScheduleOption', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PickupScheduleOption'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PickupScheduleOption', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Carrier is not None:
            namespaceprefix_ = self.Carrier_nsprefix_ + ':' if (UseCapturedNS_ and self.Carrier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrier>%s</%sCarrier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Carrier), input_name='Carrier')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.ScheduleDay is not None:
            namespaceprefix_ = self.ScheduleDay_nsprefix_ + ':' if (UseCapturedNS_ and self.ScheduleDay_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sScheduleDay>%s</%sScheduleDay>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ScheduleDay), input_name='ScheduleDay')), namespaceprefix_ , eol_))
        if self.Available is not None:
            namespaceprefix_ = self.Available_nsprefix_ + ':' if (UseCapturedNS_ and self.Available_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAvailable>%s</%sAvailable>%s' % (namespaceprefix_ , self.gds_format_boolean(self.Available, input_name='Available'), namespaceprefix_ , eol_))
        if self.PickupDate is not None:
            namespaceprefix_ = self.PickupDate_nsprefix_ + ':' if (UseCapturedNS_ and self.PickupDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPickupDate>%s</%sPickupDate>%s' % (namespaceprefix_ , self.gds_format_date(self.PickupDate, input_name='PickupDate'), namespaceprefix_ , eol_))
        if self.CutOffTime is not None:
            namespaceprefix_ = self.CutOffTime_nsprefix_ + ':' if (UseCapturedNS_ and self.CutOffTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCutOffTime>%s</%sCutOffTime>%s' % (namespaceprefix_ , self.gds_format_time(self.CutOffTime, input_name='CutOffTime'), namespaceprefix_ , eol_))
        if self.AccessTime is not None:
            namespaceprefix_ = self.AccessTime_nsprefix_ + ':' if (UseCapturedNS_ and self.AccessTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccessTime>%s</%sAccessTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AccessTime), input_name='AccessTime')), namespaceprefix_ , eol_))
        if self.ResidentialAvailable is not None:
            namespaceprefix_ = self.ResidentialAvailable_nsprefix_ + ':' if (UseCapturedNS_ and self.ResidentialAvailable_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sResidentialAvailable>%s</%sResidentialAvailable>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ResidentialAvailable, input_name='ResidentialAvailable'), namespaceprefix_ , eol_))
        if self.CountryRelationship is not None:
            namespaceprefix_ = self.CountryRelationship_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryRelationship_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryRelationship>%s</%sCountryRelationship>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryRelationship), input_name='CountryRelationship')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Carrier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Carrier')
            value_ = self.gds_validate_string(value_, node, 'Carrier')
            self.Carrier = value_
            self.Carrier_nsprefix_ = child_.prefix
            # validate type CarrierCodeType
            self.validate_CarrierCodeType(self.Carrier)
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'ScheduleDay':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ScheduleDay')
            value_ = self.gds_validate_string(value_, node, 'ScheduleDay')
            self.ScheduleDay = value_
            self.ScheduleDay_nsprefix_ = child_.prefix
            # validate type PickupRequestType
            self.validate_PickupRequestType(self.ScheduleDay)
        elif nodeName_ == 'Available':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'Available')
            ival_ = self.gds_validate_boolean(ival_, node, 'Available')
            self.Available = ival_
            self.Available_nsprefix_ = child_.prefix
        elif nodeName_ == 'PickupDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.PickupDate = dval_
            self.PickupDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'CutOffTime':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.CutOffTime = dval_
            self.CutOffTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'AccessTime':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AccessTime')
            value_ = self.gds_validate_string(value_, node, 'AccessTime')
            self.AccessTime = value_
            self.AccessTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'ResidentialAvailable':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ResidentialAvailable')
            ival_ = self.gds_validate_boolean(ival_, node, 'ResidentialAvailable')
            self.ResidentialAvailable = ival_
            self.ResidentialAvailable_nsprefix_ = child_.prefix
        elif nodeName_ == 'CountryRelationship':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryRelationship')
            value_ = self.gds_validate_string(value_, node, 'CountryRelationship')
            self.CountryRelationship = value_
            self.CountryRelationship_nsprefix_ = child_.prefix
            # validate type CountryRelationshipType
            self.validate_CountryRelationshipType(self.CountryRelationship)
# end class PickupScheduleOption


class PickupShipmentAttributes(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ServiceType=None, PackagingType=None, Dimensions=None, Weight=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ServiceType = ServiceType
        self.ServiceType_nsprefix_ = None
        self.PackagingType = PackagingType
        self.PackagingType_nsprefix_ = None
        self.Dimensions = Dimensions
        self.Dimensions_nsprefix_ = None
        self.Weight = Weight
        self.Weight_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PickupShipmentAttributes)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PickupShipmentAttributes.subclass:
            return PickupShipmentAttributes.subclass(*args_, **kwargs_)
        else:
            return PickupShipmentAttributes(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ServiceType(self):
        return self.ServiceType
    def set_ServiceType(self, ServiceType):
        self.ServiceType = ServiceType
    def get_PackagingType(self):
        return self.PackagingType
    def set_PackagingType(self, PackagingType):
        self.PackagingType = PackagingType
    def get_Dimensions(self):
        return self.Dimensions
    def set_Dimensions(self, Dimensions):
        self.Dimensions = Dimensions
    def get_Weight(self):
        return self.Weight
    def set_Weight(self, Weight):
        self.Weight = Weight
    def hasContent_(self):
        if (
            self.ServiceType is not None or
            self.PackagingType is not None or
            self.Dimensions is not None or
            self.Weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PickupShipmentAttributes', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PickupShipmentAttributes')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PickupShipmentAttributes':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PickupShipmentAttributes')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PickupShipmentAttributes', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PickupShipmentAttributes'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PickupShipmentAttributes', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceType is not None:
            namespaceprefix_ = self.ServiceType_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceType>%s</%sServiceType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ServiceType), input_name='ServiceType')), namespaceprefix_ , eol_))
        if self.PackagingType is not None:
            namespaceprefix_ = self.PackagingType_nsprefix_ + ':' if (UseCapturedNS_ and self.PackagingType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackagingType>%s</%sPackagingType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PackagingType), input_name='PackagingType')), namespaceprefix_ , eol_))
        if self.Dimensions is not None:
            namespaceprefix_ = self.Dimensions_nsprefix_ + ':' if (UseCapturedNS_ and self.Dimensions_nsprefix_) else ''
            self.Dimensions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Dimensions', pretty_print=pretty_print)
        if self.Weight is not None:
            namespaceprefix_ = self.Weight_nsprefix_ + ':' if (UseCapturedNS_ and self.Weight_nsprefix_) else ''
            self.Weight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Weight', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ServiceType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ServiceType')
            value_ = self.gds_validate_string(value_, node, 'ServiceType')
            self.ServiceType = value_
            self.ServiceType_nsprefix_ = child_.prefix
        elif nodeName_ == 'PackagingType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PackagingType')
            value_ = self.gds_validate_string(value_, node, 'PackagingType')
            self.PackagingType = value_
            self.PackagingType_nsprefix_ = child_.prefix
        elif nodeName_ == 'Dimensions':
            obj_ = Dimensions.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
        elif nodeName_ == 'Weight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
# end class PickupShipmentAttributes


class PriorityAlertDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, EnhancementTypes=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if EnhancementTypes is None:
            self.EnhancementTypes = []
        else:
            self.EnhancementTypes = EnhancementTypes
        self.EnhancementTypes_nsprefix_ = None
        if Content is None:
            self.Content = []
        else:
            self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PriorityAlertDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PriorityAlertDetail.subclass:
            return PriorityAlertDetail.subclass(*args_, **kwargs_)
        else:
            return PriorityAlertDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EnhancementTypes(self):
        return self.EnhancementTypes
    def set_EnhancementTypes(self, EnhancementTypes):
        self.EnhancementTypes = EnhancementTypes
    def add_EnhancementTypes(self, value):
        self.EnhancementTypes.append(value)
    def insert_EnhancementTypes_at(self, index, value):
        self.EnhancementTypes.insert(index, value)
    def replace_EnhancementTypes_at(self, index, value):
        self.EnhancementTypes[index] = value
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def add_Content(self, value):
        self.Content.append(value)
    def insert_Content_at(self, index, value):
        self.Content.insert(index, value)
    def replace_Content_at(self, index, value):
        self.Content[index] = value
    def validate_PriorityAlertEnhancementType(self, value):
        result = True
        # Validate type PriorityAlertEnhancementType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['PRIORITY_ALERT_PLUS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PriorityAlertEnhancementType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.EnhancementTypes or
            self.Content
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PriorityAlertDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PriorityAlertDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PriorityAlertDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PriorityAlertDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PriorityAlertDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PriorityAlertDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PriorityAlertDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for EnhancementTypes_ in self.EnhancementTypes:
            namespaceprefix_ = self.EnhancementTypes_nsprefix_ + ':' if (UseCapturedNS_ and self.EnhancementTypes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEnhancementTypes>%s</%sEnhancementTypes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(EnhancementTypes_), input_name='EnhancementTypes')), namespaceprefix_ , eol_))
        for Content_ in self.Content:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContent>%s</%sContent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Content_), input_name='Content')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EnhancementTypes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EnhancementTypes')
            value_ = self.gds_validate_string(value_, node, 'EnhancementTypes')
            self.EnhancementTypes.append(value_)
            self.EnhancementTypes_nsprefix_ = child_.prefix
            # validate type PriorityAlertEnhancementType
            self.validate_PriorityAlertEnhancementType(self.EnhancementTypes[-1])
        elif nodeName_ == 'Content':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Content')
            value_ = self.gds_validate_string(value_, node, 'Content')
            self.Content.append(value_)
            self.Content_nsprefix_ = child_.prefix
# end class PriorityAlertDetail


class RecommendedDocumentSpecification(GeneratedsSuper):
    """Specifies the details about documents that are recommended to be
    included with the shipment for ease of shipment processing and
    transportation."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Types=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Types is None:
            self.Types = []
        else:
            self.Types = Types
        self.Types_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RecommendedDocumentSpecification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RecommendedDocumentSpecification.subclass:
            return RecommendedDocumentSpecification.subclass(*args_, **kwargs_)
        else:
            return RecommendedDocumentSpecification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Types(self):
        return self.Types
    def set_Types(self, Types):
        self.Types = Types
    def add_Types(self, value):
        self.Types.append(value)
    def insert_Types_at(self, index, value):
        self.Types.insert(index, value)
    def replace_Types_at(self, index, value):
        self.Types[index] = value
    def validate_RecommendedDocumentType(self, value):
        result = True
        # Validate type RecommendedDocumentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ANTIQUE_STATEMENT_EUROPEAN_UNION', 'ANTIQUE_STATEMENT_UNITED_STATES', 'ASSEMBLER_DECLARATION', 'BEARING_WORKSHEET', 'CERTIFICATE_OF_SHIPMENTS_TO_SYRIA', 'COMMERCIAL_INVOICE_FOR_THE_CARIBBEAN_COMMON_MARKET', 'CONIFEROUS_SOLID_WOOD_PACKAGING_MATERIAL_TO_THE_PEOPLES_REPUBLIC_OF_CHINA', 'DECLARATION_FOR_FREE_ENTRY_OF_RETURNED_AMERICAN_PRODUCTS', 'DECLARATION_OF_BIOLOGICAL_STANDARDS', 'DECLARATION_OF_IMPORTED_ELECTRONIC_PRODUCTS_SUBJECT_TO_RADIATION_CONTROL_STANDARD', 'ELECTRONIC_INTEGRATED_CIRCUIT_WORKSHEET', 'FILM_AND_VIDEO_CERTIFICATE', 'INTERIM_FOOTWEAR_INVOICE', 'NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_ENGLISH', 'NAFTA_CERTIFICATE_OF_ORIGIN_CANADA_FRENCH', 'NAFTA_CERTIFICATE_OF_ORIGIN_SPANISH', 'NAFTA_CERTIFICATE_OF_ORIGIN_UNITED_STATES', 'PACKING_LIST', 'PRINTED_CIRCUIT_BOARD_WORKSHEET', 'REPAIRED_WATCH_BREAKOUT_WORKSHEET', 'STATEMENT_REGARDING_THE_IMPORT_OF_RADIO_FREQUENCY_DEVICES', 'TOXIC_SUBSTANCES_CONTROL_ACT', 'UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_NON_TEXTILES', 'UNITED_STATES_CARIBBEAN_BASIN_TRADE_PARTNERSHIP_ACT_CERTIFICATE_OF_ORIGIN_TEXTILES', 'UNITED_STATES_NEW_WATCH_WORKSHEET', 'UNITED_STATES_WATCH_REPAIR_DECLARATION']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on RecommendedDocumentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Types
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RecommendedDocumentSpecification', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RecommendedDocumentSpecification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RecommendedDocumentSpecification':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RecommendedDocumentSpecification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RecommendedDocumentSpecification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RecommendedDocumentSpecification'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RecommendedDocumentSpecification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Types_ in self.Types:
            namespaceprefix_ = self.Types_nsprefix_ + ':' if (UseCapturedNS_ and self.Types_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTypes>%s</%sTypes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Types_), input_name='Types')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Types':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Types')
            value_ = self.gds_validate_string(value_, node, 'Types')
            self.Types.append(value_)
            self.Types_nsprefix_ = child_.prefix
            # validate type RecommendedDocumentType
            self.validate_RecommendedDocumentType(self.Types[-1])
# end class RecommendedDocumentSpecification


class RequestedPickupPackageDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PackageSpecialServices=None, Weight=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PackageSpecialServices = PackageSpecialServices
        self.PackageSpecialServices_nsprefix_ = None
        self.Weight = Weight
        self.Weight_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestedPickupPackageDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestedPickupPackageDetail.subclass:
            return RequestedPickupPackageDetail.subclass(*args_, **kwargs_)
        else:
            return RequestedPickupPackageDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PackageSpecialServices(self):
        return self.PackageSpecialServices
    def set_PackageSpecialServices(self, PackageSpecialServices):
        self.PackageSpecialServices = PackageSpecialServices
    def get_Weight(self):
        return self.Weight
    def set_Weight(self, Weight):
        self.Weight = Weight
    def hasContent_(self):
        if (
            self.PackageSpecialServices is not None or
            self.Weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RequestedPickupPackageDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestedPickupPackageDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RequestedPickupPackageDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RequestedPickupPackageDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RequestedPickupPackageDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RequestedPickupPackageDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RequestedPickupPackageDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackageSpecialServices is not None:
            namespaceprefix_ = self.PackageSpecialServices_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageSpecialServices_nsprefix_) else ''
            self.PackageSpecialServices.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackageSpecialServices', pretty_print=pretty_print)
        if self.Weight is not None:
            namespaceprefix_ = self.Weight_nsprefix_ + ':' if (UseCapturedNS_ and self.Weight_nsprefix_) else ''
            self.Weight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Weight', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PackageSpecialServices':
            obj_ = PickupPackageSpecialServicesRequested.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackageSpecialServices = obj_
            obj_.original_tagname_ = 'PackageSpecialServices'
        elif nodeName_ == 'Weight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
# end class RequestedPickupPackageDetail


class ReturnAssociationDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TrackingNumber=None, ShipDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TrackingNumber = TrackingNumber
        self.TrackingNumber_nsprefix_ = None
        if isinstance(ShipDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShipDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ShipDate
        self.ShipDate = initvalue_
        self.ShipDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReturnAssociationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReturnAssociationDetail.subclass:
            return ReturnAssociationDetail.subclass(*args_, **kwargs_)
        else:
            return ReturnAssociationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TrackingNumber(self):
        return self.TrackingNumber
    def set_TrackingNumber(self, TrackingNumber):
        self.TrackingNumber = TrackingNumber
    def get_ShipDate(self):
        return self.ShipDate
    def set_ShipDate(self, ShipDate):
        self.ShipDate = ShipDate
    def hasContent_(self):
        if (
            self.TrackingNumber is not None or
            self.ShipDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReturnAssociationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReturnAssociationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReturnAssociationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReturnAssociationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReturnAssociationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReturnAssociationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReturnAssociationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TrackingNumber is not None:
            namespaceprefix_ = self.TrackingNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTrackingNumber>%s</%sTrackingNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumber), input_name='TrackingNumber')), namespaceprefix_ , eol_))
        if self.ShipDate is not None:
            namespaceprefix_ = self.ShipDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipDate>%s</%sShipDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ShipDate, input_name='ShipDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TrackingNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TrackingNumber')
            value_ = self.gds_validate_string(value_, node, 'TrackingNumber')
            self.TrackingNumber = value_
            self.TrackingNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ShipDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ShipDate = dval_
            self.ShipDate_nsprefix_ = child_.prefix
# end class ReturnAssociationDetail


class ReturnEMailDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MerchantPhoneNumber=None, AllowedSpecialServices=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.MerchantPhoneNumber = MerchantPhoneNumber
        self.MerchantPhoneNumber_nsprefix_ = None
        if AllowedSpecialServices is None:
            self.AllowedSpecialServices = []
        else:
            self.AllowedSpecialServices = AllowedSpecialServices
        self.AllowedSpecialServices_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReturnEMailDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReturnEMailDetail.subclass:
            return ReturnEMailDetail.subclass(*args_, **kwargs_)
        else:
            return ReturnEMailDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MerchantPhoneNumber(self):
        return self.MerchantPhoneNumber
    def set_MerchantPhoneNumber(self, MerchantPhoneNumber):
        self.MerchantPhoneNumber = MerchantPhoneNumber
    def get_AllowedSpecialServices(self):
        return self.AllowedSpecialServices
    def set_AllowedSpecialServices(self, AllowedSpecialServices):
        self.AllowedSpecialServices = AllowedSpecialServices
    def add_AllowedSpecialServices(self, value):
        self.AllowedSpecialServices.append(value)
    def insert_AllowedSpecialServices_at(self, index, value):
        self.AllowedSpecialServices.insert(index, value)
    def replace_AllowedSpecialServices_at(self, index, value):
        self.AllowedSpecialServices[index] = value
    def validate_ReturnEMailAllowedSpecialServiceType(self, value):
        result = True
        # Validate type ReturnEMailAllowedSpecialServiceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['SATURDAY_DELIVERY', 'SATURDAY_PICKUP']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ReturnEMailAllowedSpecialServiceType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.MerchantPhoneNumber is not None or
            self.AllowedSpecialServices
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReturnEMailDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReturnEMailDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReturnEMailDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReturnEMailDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReturnEMailDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReturnEMailDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReturnEMailDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MerchantPhoneNumber is not None:
            namespaceprefix_ = self.MerchantPhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.MerchantPhoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMerchantPhoneNumber>%s</%sMerchantPhoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MerchantPhoneNumber), input_name='MerchantPhoneNumber')), namespaceprefix_ , eol_))
        for AllowedSpecialServices_ in self.AllowedSpecialServices:
            namespaceprefix_ = self.AllowedSpecialServices_nsprefix_ + ':' if (UseCapturedNS_ and self.AllowedSpecialServices_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowedSpecialServices>%s</%sAllowedSpecialServices>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(AllowedSpecialServices_), input_name='AllowedSpecialServices')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MerchantPhoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MerchantPhoneNumber')
            value_ = self.gds_validate_string(value_, node, 'MerchantPhoneNumber')
            self.MerchantPhoneNumber = value_
            self.MerchantPhoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'AllowedSpecialServices':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AllowedSpecialServices')
            value_ = self.gds_validate_string(value_, node, 'AllowedSpecialServices')
            self.AllowedSpecialServices.append(value_)
            self.AllowedSpecialServices_nsprefix_ = child_.prefix
            # validate type ReturnEMailAllowedSpecialServiceType
            self.validate_ReturnEMailAllowedSpecialServiceType(self.AllowedSpecialServices[-1])
# end class ReturnEMailDetail


class ReturnShipmentDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ReturnType=None, Rma=None, ReturnEMailDetail=None, ReturnAssociation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ReturnType = ReturnType
        self.validate_ReturnType(self.ReturnType)
        self.ReturnType_nsprefix_ = None
        self.Rma = Rma
        self.Rma_nsprefix_ = None
        self.ReturnEMailDetail = ReturnEMailDetail
        self.ReturnEMailDetail_nsprefix_ = None
        self.ReturnAssociation = ReturnAssociation
        self.ReturnAssociation_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReturnShipmentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReturnShipmentDetail.subclass:
            return ReturnShipmentDetail.subclass(*args_, **kwargs_)
        else:
            return ReturnShipmentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ReturnType(self):
        return self.ReturnType
    def set_ReturnType(self, ReturnType):
        self.ReturnType = ReturnType
    def get_Rma(self):
        return self.Rma
    def set_Rma(self, Rma):
        self.Rma = Rma
    def get_ReturnEMailDetail(self):
        return self.ReturnEMailDetail
    def set_ReturnEMailDetail(self, ReturnEMailDetail):
        self.ReturnEMailDetail = ReturnEMailDetail
    def get_ReturnAssociation(self):
        return self.ReturnAssociation
    def set_ReturnAssociation(self, ReturnAssociation):
        self.ReturnAssociation = ReturnAssociation
    def validate_ReturnType(self, value):
        result = True
        # Validate type ReturnType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_TAG', 'NET_RETURN', 'PENDING', 'PRINT_RETURN_LABEL', 'VOICE_CALL_TAG']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ReturnType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.ReturnType is not None or
            self.Rma is not None or
            self.ReturnEMailDetail is not None or
            self.ReturnAssociation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReturnShipmentDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReturnShipmentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReturnShipmentDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReturnShipmentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReturnShipmentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ReturnShipmentDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ReturnShipmentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReturnType is not None:
            namespaceprefix_ = self.ReturnType_nsprefix_ + ':' if (UseCapturedNS_ and self.ReturnType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReturnType>%s</%sReturnType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReturnType), input_name='ReturnType')), namespaceprefix_ , eol_))
        if self.Rma is not None:
            namespaceprefix_ = self.Rma_nsprefix_ + ':' if (UseCapturedNS_ and self.Rma_nsprefix_) else ''
            self.Rma.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Rma', pretty_print=pretty_print)
        if self.ReturnEMailDetail is not None:
            namespaceprefix_ = self.ReturnEMailDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ReturnEMailDetail_nsprefix_) else ''
            self.ReturnEMailDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReturnEMailDetail', pretty_print=pretty_print)
        if self.ReturnAssociation is not None:
            namespaceprefix_ = self.ReturnAssociation_nsprefix_ + ':' if (UseCapturedNS_ and self.ReturnAssociation_nsprefix_) else ''
            self.ReturnAssociation.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReturnAssociation', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ReturnType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ReturnType')
            value_ = self.gds_validate_string(value_, node, 'ReturnType')
            self.ReturnType = value_
            self.ReturnType_nsprefix_ = child_.prefix
            # validate type ReturnType
            self.validate_ReturnType(self.ReturnType)
        elif nodeName_ == 'Rma':
            obj_ = Rma.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Rma = obj_
            obj_.original_tagname_ = 'Rma'
        elif nodeName_ == 'ReturnEMailDetail':
            obj_ = ReturnEMailDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReturnEMailDetail = obj_
            obj_.original_tagname_ = 'ReturnEMailDetail'
        elif nodeName_ == 'ReturnAssociation':
            obj_ = ReturnAssociationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReturnAssociation = obj_
            obj_.original_tagname_ = 'ReturnAssociation'
# end class ReturnShipmentDetail


class Rma(GeneratedsSuper):
    """June 2011 ITG 121203 IR-RMA number has been removed from this structure
    and added as a new customer reference type. The structure remains
    because of the reason field below."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Reason=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Reason = Reason
        self.Reason_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Rma)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Rma.subclass:
            return Rma.subclass(*args_, **kwargs_)
        else:
            return Rma(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Reason(self):
        return self.Reason
    def set_Reason(self, Reason):
        self.Reason = Reason
    def hasContent_(self):
        if (
            self.Reason is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Rma', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Rma')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Rma':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Rma')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Rma', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Rma'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Rma', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Reason is not None:
            namespaceprefix_ = self.Reason_nsprefix_ + ':' if (UseCapturedNS_ and self.Reason_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReason>%s</%sReason>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Reason), input_name='Reason')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Reason':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Reason')
            value_ = self.gds_validate_string(value_, node, 'Reason')
            self.Reason = value_
            self.Reason_nsprefix_ = child_.prefix
# end class Rma


class ShipmentAssemblyDetail(GeneratedsSuper):
    """Specification for assembly performed on shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PieceCount=None, Weight=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PieceCount = PieceCount
        self.PieceCount_nsprefix_ = None
        self.Weight = Weight
        self.Weight_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentAssemblyDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentAssemblyDetail.subclass:
            return ShipmentAssemblyDetail.subclass(*args_, **kwargs_)
        else:
            return ShipmentAssemblyDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PieceCount(self):
        return self.PieceCount
    def set_PieceCount(self, PieceCount):
        self.PieceCount = PieceCount
    def get_Weight(self):
        return self.Weight
    def set_Weight(self, Weight):
        self.Weight = Weight
    def hasContent_(self):
        if (
            self.PieceCount is not None or
            self.Weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentAssemblyDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentAssemblyDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentAssemblyDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentAssemblyDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentAssemblyDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentAssemblyDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentAssemblyDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PieceCount is not None:
            namespaceprefix_ = self.PieceCount_nsprefix_ + ':' if (UseCapturedNS_ and self.PieceCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPieceCount>%s</%sPieceCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.PieceCount, input_name='PieceCount'), namespaceprefix_ , eol_))
        if self.Weight is not None:
            namespaceprefix_ = self.Weight_nsprefix_ + ':' if (UseCapturedNS_ and self.Weight_nsprefix_) else ''
            self.Weight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Weight', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PieceCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PieceCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PieceCount')
            self.PieceCount = ival_
            self.PieceCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'Weight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
# end class ShipmentAssemblyDetail


class ShipmentDryIceDetail(GeneratedsSuper):
    """Shipment-level totals of dry ice data across all packages."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PackageCount=None, TotalWeight=None, ProcessingOptions=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PackageCount = PackageCount
        self.PackageCount_nsprefix_ = None
        self.TotalWeight = TotalWeight
        self.TotalWeight_nsprefix_ = None
        self.ProcessingOptions = ProcessingOptions
        self.ProcessingOptions_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentDryIceDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentDryIceDetail.subclass:
            return ShipmentDryIceDetail.subclass(*args_, **kwargs_)
        else:
            return ShipmentDryIceDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PackageCount(self):
        return self.PackageCount
    def set_PackageCount(self, PackageCount):
        self.PackageCount = PackageCount
    def get_TotalWeight(self):
        return self.TotalWeight
    def set_TotalWeight(self, TotalWeight):
        self.TotalWeight = TotalWeight
    def get_ProcessingOptions(self):
        return self.ProcessingOptions
    def set_ProcessingOptions(self, ProcessingOptions):
        self.ProcessingOptions = ProcessingOptions
    def hasContent_(self):
        if (
            self.PackageCount is not None or
            self.TotalWeight is not None or
            self.ProcessingOptions is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentDryIceDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentDryIceDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentDryIceDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentDryIceDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentDryIceDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentDryIceDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentDryIceDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PackageCount is not None:
            namespaceprefix_ = self.PackageCount_nsprefix_ + ':' if (UseCapturedNS_ and self.PackageCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPackageCount>%s</%sPackageCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.PackageCount, input_name='PackageCount'), namespaceprefix_ , eol_))
        if self.TotalWeight is not None:
            namespaceprefix_ = self.TotalWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalWeight_nsprefix_) else ''
            self.TotalWeight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalWeight', pretty_print=pretty_print)
        if self.ProcessingOptions is not None:
            namespaceprefix_ = self.ProcessingOptions_nsprefix_ + ':' if (UseCapturedNS_ and self.ProcessingOptions_nsprefix_) else ''
            self.ProcessingOptions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ProcessingOptions', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PackageCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PackageCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PackageCount')
            self.PackageCount = ival_
            self.PackageCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'TotalWeight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalWeight = obj_
            obj_.original_tagname_ = 'TotalWeight'
        elif nodeName_ == 'ProcessingOptions':
            obj_ = ShipmentDryIceProcessingOptionsRequested.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ProcessingOptions = obj_
            obj_.original_tagname_ = 'ProcessingOptions'
# end class ShipmentDryIceDetail


class ShipmentDryIceProcessingOptionsRequested(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Options=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.Options_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentDryIceProcessingOptionsRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentDryIceProcessingOptionsRequested.subclass:
            return ShipmentDryIceProcessingOptionsRequested.subclass(*args_, **kwargs_)
        else:
            return ShipmentDryIceProcessingOptionsRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Options(self):
        return self.Options
    def set_Options(self, Options):
        self.Options = Options
    def add_Options(self, value):
        self.Options.append(value)
    def insert_Options_at(self, index, value):
        self.Options.insert(index, value)
    def replace_Options_at(self, index, value):
        self.Options[index] = value
    def validate_ShipmentDryIceProcessingOptionType(self, value):
        result = True
        # Validate type ShipmentDryIceProcessingOptionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['SHIPMENT_LEVEL_DRY_ICE_ONLY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShipmentDryIceProcessingOptionType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Options
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentDryIceProcessingOptionsRequested', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentDryIceProcessingOptionsRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentDryIceProcessingOptionsRequested':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentDryIceProcessingOptionsRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentDryIceProcessingOptionsRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentDryIceProcessingOptionsRequested'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentDryIceProcessingOptionsRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Options_ in self.Options:
            namespaceprefix_ = self.Options_nsprefix_ + ':' if (UseCapturedNS_ and self.Options_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptions>%s</%sOptions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Options_), input_name='Options')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Options':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Options')
            value_ = self.gds_validate_string(value_, node, 'Options')
            self.Options.append(value_)
            self.Options_nsprefix_ = child_.prefix
            # validate type ShipmentDryIceProcessingOptionType
            self.validate_ShipmentDryIceProcessingOptionType(self.Options[-1])
# end class ShipmentDryIceProcessingOptionsRequested


class ShipmentEventNotificationDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AggregationType=None, PersonalMessage=None, EventNotifications=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AggregationType = AggregationType
        self.validate_ShipmentNotificationAggregationType(self.AggregationType)
        self.AggregationType_nsprefix_ = None
        self.PersonalMessage = PersonalMessage
        self.PersonalMessage_nsprefix_ = None
        if EventNotifications is None:
            self.EventNotifications = []
        else:
            self.EventNotifications = EventNotifications
        self.EventNotifications_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentEventNotificationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentEventNotificationDetail.subclass:
            return ShipmentEventNotificationDetail.subclass(*args_, **kwargs_)
        else:
            return ShipmentEventNotificationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AggregationType(self):
        return self.AggregationType
    def set_AggregationType(self, AggregationType):
        self.AggregationType = AggregationType
    def get_PersonalMessage(self):
        return self.PersonalMessage
    def set_PersonalMessage(self, PersonalMessage):
        self.PersonalMessage = PersonalMessage
    def get_EventNotifications(self):
        return self.EventNotifications
    def set_EventNotifications(self, EventNotifications):
        self.EventNotifications = EventNotifications
    def add_EventNotifications(self, value):
        self.EventNotifications.append(value)
    def insert_EventNotifications_at(self, index, value):
        self.EventNotifications.insert(index, value)
    def replace_EventNotifications_at(self, index, value):
        self.EventNotifications[index] = value
    def validate_ShipmentNotificationAggregationType(self, value):
        result = True
        # Validate type ShipmentNotificationAggregationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['PER_PACKAGE', 'PER_SHIPMENT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShipmentNotificationAggregationType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.AggregationType is not None or
            self.PersonalMessage is not None or
            self.EventNotifications
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentEventNotificationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentEventNotificationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentEventNotificationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentEventNotificationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentEventNotificationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentEventNotificationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentEventNotificationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AggregationType is not None:
            namespaceprefix_ = self.AggregationType_nsprefix_ + ':' if (UseCapturedNS_ and self.AggregationType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAggregationType>%s</%sAggregationType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AggregationType), input_name='AggregationType')), namespaceprefix_ , eol_))
        if self.PersonalMessage is not None:
            namespaceprefix_ = self.PersonalMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.PersonalMessage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPersonalMessage>%s</%sPersonalMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PersonalMessage), input_name='PersonalMessage')), namespaceprefix_ , eol_))
        for EventNotifications_ in self.EventNotifications:
            namespaceprefix_ = self.EventNotifications_nsprefix_ + ':' if (UseCapturedNS_ and self.EventNotifications_nsprefix_) else ''
            EventNotifications_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EventNotifications', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AggregationType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AggregationType')
            value_ = self.gds_validate_string(value_, node, 'AggregationType')
            self.AggregationType = value_
            self.AggregationType_nsprefix_ = child_.prefix
            # validate type ShipmentNotificationAggregationType
            self.validate_ShipmentNotificationAggregationType(self.AggregationType)
        elif nodeName_ == 'PersonalMessage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PersonalMessage')
            value_ = self.gds_validate_string(value_, node, 'PersonalMessage')
            self.PersonalMessage = value_
            self.PersonalMessage_nsprefix_ = child_.prefix
        elif nodeName_ == 'EventNotifications':
            obj_ = ShipmentEventNotificationSpecification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EventNotifications.append(obj_)
            obj_.original_tagname_ = 'EventNotifications'
# end class ShipmentEventNotificationDetail


class ShipmentEventNotificationSpecification(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Role=None, Events=None, NotificationDetail=None, FormatSpecification=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Role = Role
        self.validate_ShipmentNotificationRoleType(self.Role)
        self.Role_nsprefix_ = None
        if Events is None:
            self.Events = []
        else:
            self.Events = Events
        self.Events_nsprefix_ = None
        self.NotificationDetail = NotificationDetail
        self.NotificationDetail_nsprefix_ = None
        self.FormatSpecification = FormatSpecification
        self.FormatSpecification_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentEventNotificationSpecification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentEventNotificationSpecification.subclass:
            return ShipmentEventNotificationSpecification.subclass(*args_, **kwargs_)
        else:
            return ShipmentEventNotificationSpecification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Role(self):
        return self.Role
    def set_Role(self, Role):
        self.Role = Role
    def get_Events(self):
        return self.Events
    def set_Events(self, Events):
        self.Events = Events
    def add_Events(self, value):
        self.Events.append(value)
    def insert_Events_at(self, index, value):
        self.Events.insert(index, value)
    def replace_Events_at(self, index, value):
        self.Events[index] = value
    def get_NotificationDetail(self):
        return self.NotificationDetail
    def set_NotificationDetail(self, NotificationDetail):
        self.NotificationDetail = NotificationDetail
    def get_FormatSpecification(self):
        return self.FormatSpecification
    def set_FormatSpecification(self, FormatSpecification):
        self.FormatSpecification = FormatSpecification
    def validate_ShipmentNotificationRoleType(self, value):
        result = True
        # Validate type ShipmentNotificationRoleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BROKER', 'OTHER', 'RECIPIENT', 'SHIPPER', 'THIRD_PARTY']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on ShipmentNotificationRoleType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_NotificationEventType(self, value):
        result = True
        # Validate type NotificationEventType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['ON_DELIVERY', 'ON_ESTIMATED_DELIVERY', 'ON_EXCEPTION', 'ON_PICKUP_DRIVER_ARRIVED', 'ON_PICKUP_DRIVER_ASSIGNED', 'ON_PICKUP_DRIVER_DEPARTED', 'ON_PICKUP_DRIVER_EN_ROUTE', 'ON_SHIPMENT', 'ON_TENDER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationEventType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Role is not None or
            self.Events or
            self.NotificationDetail is not None or
            self.FormatSpecification is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentEventNotificationSpecification', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentEventNotificationSpecification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentEventNotificationSpecification':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentEventNotificationSpecification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentEventNotificationSpecification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentEventNotificationSpecification'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentEventNotificationSpecification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Role is not None:
            namespaceprefix_ = self.Role_nsprefix_ + ':' if (UseCapturedNS_ and self.Role_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRole>%s</%sRole>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Role), input_name='Role')), namespaceprefix_ , eol_))
        for Events_ in self.Events:
            namespaceprefix_ = self.Events_nsprefix_ + ':' if (UseCapturedNS_ and self.Events_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEvents>%s</%sEvents>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Events_), input_name='Events')), namespaceprefix_ , eol_))
        if self.NotificationDetail is not None:
            namespaceprefix_ = self.NotificationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.NotificationDetail_nsprefix_) else ''
            self.NotificationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NotificationDetail', pretty_print=pretty_print)
        if self.FormatSpecification is not None:
            namespaceprefix_ = self.FormatSpecification_nsprefix_ + ':' if (UseCapturedNS_ and self.FormatSpecification_nsprefix_) else ''
            self.FormatSpecification.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FormatSpecification', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Role':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Role')
            value_ = self.gds_validate_string(value_, node, 'Role')
            self.Role = value_
            self.Role_nsprefix_ = child_.prefix
            # validate type ShipmentNotificationRoleType
            self.validate_ShipmentNotificationRoleType(self.Role)
        elif nodeName_ == 'Events':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Events')
            value_ = self.gds_validate_string(value_, node, 'Events')
            self.Events.append(value_)
            self.Events_nsprefix_ = child_.prefix
            # validate type NotificationEventType
            self.validate_NotificationEventType(self.Events[-1])
        elif nodeName_ == 'NotificationDetail':
            obj_ = NotificationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NotificationDetail = obj_
            obj_.original_tagname_ = 'NotificationDetail'
        elif nodeName_ == 'FormatSpecification':
            obj_ = ShipmentNotificationFormatSpecification.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FormatSpecification = obj_
            obj_.original_tagname_ = 'FormatSpecification'
# end class ShipmentEventNotificationSpecification


class ShipmentNotificationFormatSpecification(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_NotificationFormatType(self.Type)
        self.Type_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentNotificationFormatSpecification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentNotificationFormatSpecification.subclass:
            return ShipmentNotificationFormatSpecification.subclass(*args_, **kwargs_)
        else:
            return ShipmentNotificationFormatSpecification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def validate_NotificationFormatType(self, value):
        result = True
        # Validate type NotificationFormatType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['HTML', 'TEXT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on NotificationFormatType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentNotificationFormatSpecification', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentNotificationFormatSpecification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentNotificationFormatSpecification':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentNotificationFormatSpecification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentNotificationFormatSpecification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentNotificationFormatSpecification'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentNotificationFormatSpecification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type NotificationFormatType
            self.validate_NotificationFormatType(self.Type)
# end class ShipmentNotificationFormatSpecification


class ShipmentSpecialServicesRequested(GeneratedsSuper):
    """These special services are available at the shipment level for some or
    all service types. If the shipper is requesting a special service which
    requires additional data (such as the COD amount), the shipment special
    service type must be present in the specialServiceTypes collection, and
    the supporting detail must be provided in the appropriate sub-object
    below."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SpecialServiceTypes=None, CodDetail=None, DeliveryOnInvoiceAcceptanceDetail=None, HoldAtLocationDetail=None, EventNotificationDetail=None, ReturnShipmentDetail=None, PendingShipmentDetail=None, InternationalControlledExportDetail=None, InternationalTrafficInArmsRegulationsDetail=None, ShipmentDryIceDetail=None, HomeDeliveryPremiumDetail=None, FlatbedTrailerDetail=None, FreightGuaranteeDetail=None, EtdDetail=None, ExtraLaborDetail=None, PalletShrinkwrapDetail=None, PalletsProvidedDetail=None, DetentionDetail=None, MarkingOrTaggingDetail=None, NonBusinessTimeDetail=None, ShipmentAssemblyDetail=None, SortAndSegregateDetail=None, SpecialEquipmentDetail=None, StorageDetail=None, WeighingDetail=None, CustomDeliveryWindowDetail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if SpecialServiceTypes is None:
            self.SpecialServiceTypes = []
        else:
            self.SpecialServiceTypes = SpecialServiceTypes
        self.SpecialServiceTypes_nsprefix_ = None
        self.CodDetail = CodDetail
        self.CodDetail_nsprefix_ = None
        self.DeliveryOnInvoiceAcceptanceDetail = DeliveryOnInvoiceAcceptanceDetail
        self.DeliveryOnInvoiceAcceptanceDetail_nsprefix_ = None
        self.HoldAtLocationDetail = HoldAtLocationDetail
        self.HoldAtLocationDetail_nsprefix_ = None
        self.EventNotificationDetail = EventNotificationDetail
        self.EventNotificationDetail_nsprefix_ = None
        self.ReturnShipmentDetail = ReturnShipmentDetail
        self.ReturnShipmentDetail_nsprefix_ = None
        self.PendingShipmentDetail = PendingShipmentDetail
        self.PendingShipmentDetail_nsprefix_ = None
        self.InternationalControlledExportDetail = InternationalControlledExportDetail
        self.InternationalControlledExportDetail_nsprefix_ = None
        self.InternationalTrafficInArmsRegulationsDetail = InternationalTrafficInArmsRegulationsDetail
        self.InternationalTrafficInArmsRegulationsDetail_nsprefix_ = None
        self.ShipmentDryIceDetail = ShipmentDryIceDetail
        self.ShipmentDryIceDetail_nsprefix_ = None
        self.HomeDeliveryPremiumDetail = HomeDeliveryPremiumDetail
        self.HomeDeliveryPremiumDetail_nsprefix_ = None
        self.FlatbedTrailerDetail = FlatbedTrailerDetail
        self.FlatbedTrailerDetail_nsprefix_ = None
        self.FreightGuaranteeDetail = FreightGuaranteeDetail
        self.FreightGuaranteeDetail_nsprefix_ = None
        self.EtdDetail = EtdDetail
        self.EtdDetail_nsprefix_ = None
        self.ExtraLaborDetail = ExtraLaborDetail
        self.ExtraLaborDetail_nsprefix_ = None
        self.PalletShrinkwrapDetail = PalletShrinkwrapDetail
        self.PalletShrinkwrapDetail_nsprefix_ = None
        self.PalletsProvidedDetail = PalletsProvidedDetail
        self.PalletsProvidedDetail_nsprefix_ = None
        self.DetentionDetail = DetentionDetail
        self.DetentionDetail_nsprefix_ = None
        self.MarkingOrTaggingDetail = MarkingOrTaggingDetail
        self.MarkingOrTaggingDetail_nsprefix_ = None
        self.NonBusinessTimeDetail = NonBusinessTimeDetail
        self.NonBusinessTimeDetail_nsprefix_ = None
        self.ShipmentAssemblyDetail = ShipmentAssemblyDetail
        self.ShipmentAssemblyDetail_nsprefix_ = None
        self.SortAndSegregateDetail = SortAndSegregateDetail
        self.SortAndSegregateDetail_nsprefix_ = None
        self.SpecialEquipmentDetail = SpecialEquipmentDetail
        self.SpecialEquipmentDetail_nsprefix_ = None
        self.StorageDetail = StorageDetail
        self.StorageDetail_nsprefix_ = None
        self.WeighingDetail = WeighingDetail
        self.WeighingDetail_nsprefix_ = None
        self.CustomDeliveryWindowDetail = CustomDeliveryWindowDetail
        self.CustomDeliveryWindowDetail_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShipmentSpecialServicesRequested)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShipmentSpecialServicesRequested.subclass:
            return ShipmentSpecialServicesRequested.subclass(*args_, **kwargs_)
        else:
            return ShipmentSpecialServicesRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SpecialServiceTypes(self):
        return self.SpecialServiceTypes
    def set_SpecialServiceTypes(self, SpecialServiceTypes):
        self.SpecialServiceTypes = SpecialServiceTypes
    def add_SpecialServiceTypes(self, value):
        self.SpecialServiceTypes.append(value)
    def insert_SpecialServiceTypes_at(self, index, value):
        self.SpecialServiceTypes.insert(index, value)
    def replace_SpecialServiceTypes_at(self, index, value):
        self.SpecialServiceTypes[index] = value
    def get_CodDetail(self):
        return self.CodDetail
    def set_CodDetail(self, CodDetail):
        self.CodDetail = CodDetail
    def get_DeliveryOnInvoiceAcceptanceDetail(self):
        return self.DeliveryOnInvoiceAcceptanceDetail
    def set_DeliveryOnInvoiceAcceptanceDetail(self, DeliveryOnInvoiceAcceptanceDetail):
        self.DeliveryOnInvoiceAcceptanceDetail = DeliveryOnInvoiceAcceptanceDetail
    def get_HoldAtLocationDetail(self):
        return self.HoldAtLocationDetail
    def set_HoldAtLocationDetail(self, HoldAtLocationDetail):
        self.HoldAtLocationDetail = HoldAtLocationDetail
    def get_EventNotificationDetail(self):
        return self.EventNotificationDetail
    def set_EventNotificationDetail(self, EventNotificationDetail):
        self.EventNotificationDetail = EventNotificationDetail
    def get_ReturnShipmentDetail(self):
        return self.ReturnShipmentDetail
    def set_ReturnShipmentDetail(self, ReturnShipmentDetail):
        self.ReturnShipmentDetail = ReturnShipmentDetail
    def get_PendingShipmentDetail(self):
        return self.PendingShipmentDetail
    def set_PendingShipmentDetail(self, PendingShipmentDetail):
        self.PendingShipmentDetail = PendingShipmentDetail
    def get_InternationalControlledExportDetail(self):
        return self.InternationalControlledExportDetail
    def set_InternationalControlledExportDetail(self, InternationalControlledExportDetail):
        self.InternationalControlledExportDetail = InternationalControlledExportDetail
    def get_InternationalTrafficInArmsRegulationsDetail(self):
        return self.InternationalTrafficInArmsRegulationsDetail
    def set_InternationalTrafficInArmsRegulationsDetail(self, InternationalTrafficInArmsRegulationsDetail):
        self.InternationalTrafficInArmsRegulationsDetail = InternationalTrafficInArmsRegulationsDetail
    def get_ShipmentDryIceDetail(self):
        return self.ShipmentDryIceDetail
    def set_ShipmentDryIceDetail(self, ShipmentDryIceDetail):
        self.ShipmentDryIceDetail = ShipmentDryIceDetail
    def get_HomeDeliveryPremiumDetail(self):
        return self.HomeDeliveryPremiumDetail
    def set_HomeDeliveryPremiumDetail(self, HomeDeliveryPremiumDetail):
        self.HomeDeliveryPremiumDetail = HomeDeliveryPremiumDetail
    def get_FlatbedTrailerDetail(self):
        return self.FlatbedTrailerDetail
    def set_FlatbedTrailerDetail(self, FlatbedTrailerDetail):
        self.FlatbedTrailerDetail = FlatbedTrailerDetail
    def get_FreightGuaranteeDetail(self):
        return self.FreightGuaranteeDetail
    def set_FreightGuaranteeDetail(self, FreightGuaranteeDetail):
        self.FreightGuaranteeDetail = FreightGuaranteeDetail
    def get_EtdDetail(self):
        return self.EtdDetail
    def set_EtdDetail(self, EtdDetail):
        self.EtdDetail = EtdDetail
    def get_ExtraLaborDetail(self):
        return self.ExtraLaborDetail
    def set_ExtraLaborDetail(self, ExtraLaborDetail):
        self.ExtraLaborDetail = ExtraLaborDetail
    def get_PalletShrinkwrapDetail(self):
        return self.PalletShrinkwrapDetail
    def set_PalletShrinkwrapDetail(self, PalletShrinkwrapDetail):
        self.PalletShrinkwrapDetail = PalletShrinkwrapDetail
    def get_PalletsProvidedDetail(self):
        return self.PalletsProvidedDetail
    def set_PalletsProvidedDetail(self, PalletsProvidedDetail):
        self.PalletsProvidedDetail = PalletsProvidedDetail
    def get_DetentionDetail(self):
        return self.DetentionDetail
    def set_DetentionDetail(self, DetentionDetail):
        self.DetentionDetail = DetentionDetail
    def get_MarkingOrTaggingDetail(self):
        return self.MarkingOrTaggingDetail
    def set_MarkingOrTaggingDetail(self, MarkingOrTaggingDetail):
        self.MarkingOrTaggingDetail = MarkingOrTaggingDetail
    def get_NonBusinessTimeDetail(self):
        return self.NonBusinessTimeDetail
    def set_NonBusinessTimeDetail(self, NonBusinessTimeDetail):
        self.NonBusinessTimeDetail = NonBusinessTimeDetail
    def get_ShipmentAssemblyDetail(self):
        return self.ShipmentAssemblyDetail
    def set_ShipmentAssemblyDetail(self, ShipmentAssemblyDetail):
        self.ShipmentAssemblyDetail = ShipmentAssemblyDetail
    def get_SortAndSegregateDetail(self):
        return self.SortAndSegregateDetail
    def set_SortAndSegregateDetail(self, SortAndSegregateDetail):
        self.SortAndSegregateDetail = SortAndSegregateDetail
    def get_SpecialEquipmentDetail(self):
        return self.SpecialEquipmentDetail
    def set_SpecialEquipmentDetail(self, SpecialEquipmentDetail):
        self.SpecialEquipmentDetail = SpecialEquipmentDetail
    def get_StorageDetail(self):
        return self.StorageDetail
    def set_StorageDetail(self, StorageDetail):
        self.StorageDetail = StorageDetail
    def get_WeighingDetail(self):
        return self.WeighingDetail
    def set_WeighingDetail(self, WeighingDetail):
        self.WeighingDetail = WeighingDetail
    def get_CustomDeliveryWindowDetail(self):
        return self.CustomDeliveryWindowDetail
    def set_CustomDeliveryWindowDetail(self, CustomDeliveryWindowDetail):
        self.CustomDeliveryWindowDetail = CustomDeliveryWindowDetail
    def hasContent_(self):
        if (
            self.SpecialServiceTypes or
            self.CodDetail is not None or
            self.DeliveryOnInvoiceAcceptanceDetail is not None or
            self.HoldAtLocationDetail is not None or
            self.EventNotificationDetail is not None or
            self.ReturnShipmentDetail is not None or
            self.PendingShipmentDetail is not None or
            self.InternationalControlledExportDetail is not None or
            self.InternationalTrafficInArmsRegulationsDetail is not None or
            self.ShipmentDryIceDetail is not None or
            self.HomeDeliveryPremiumDetail is not None or
            self.FlatbedTrailerDetail is not None or
            self.FreightGuaranteeDetail is not None or
            self.EtdDetail is not None or
            self.ExtraLaborDetail is not None or
            self.PalletShrinkwrapDetail is not None or
            self.PalletsProvidedDetail is not None or
            self.DetentionDetail is not None or
            self.MarkingOrTaggingDetail is not None or
            self.NonBusinessTimeDetail is not None or
            self.ShipmentAssemblyDetail is not None or
            self.SortAndSegregateDetail is not None or
            self.SpecialEquipmentDetail is not None or
            self.StorageDetail is not None or
            self.WeighingDetail is not None or
            self.CustomDeliveryWindowDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentSpecialServicesRequested', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShipmentSpecialServicesRequested')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShipmentSpecialServicesRequested':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShipmentSpecialServicesRequested')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShipmentSpecialServicesRequested', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ShipmentSpecialServicesRequested'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ShipmentSpecialServicesRequested', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SpecialServiceTypes_ in self.SpecialServiceTypes:
            namespaceprefix_ = self.SpecialServiceTypes_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialServiceTypes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialServiceTypes>%s</%sSpecialServiceTypes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(SpecialServiceTypes_), input_name='SpecialServiceTypes')), namespaceprefix_ , eol_))
        if self.CodDetail is not None:
            namespaceprefix_ = self.CodDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CodDetail_nsprefix_) else ''
            self.CodDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CodDetail', pretty_print=pretty_print)
        if self.DeliveryOnInvoiceAcceptanceDetail is not None:
            namespaceprefix_ = self.DeliveryOnInvoiceAcceptanceDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryOnInvoiceAcceptanceDetail_nsprefix_) else ''
            self.DeliveryOnInvoiceAcceptanceDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DeliveryOnInvoiceAcceptanceDetail', pretty_print=pretty_print)
        if self.HoldAtLocationDetail is not None:
            namespaceprefix_ = self.HoldAtLocationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.HoldAtLocationDetail_nsprefix_) else ''
            self.HoldAtLocationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HoldAtLocationDetail', pretty_print=pretty_print)
        if self.EventNotificationDetail is not None:
            namespaceprefix_ = self.EventNotificationDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.EventNotificationDetail_nsprefix_) else ''
            self.EventNotificationDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EventNotificationDetail', pretty_print=pretty_print)
        if self.ReturnShipmentDetail is not None:
            namespaceprefix_ = self.ReturnShipmentDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ReturnShipmentDetail_nsprefix_) else ''
            self.ReturnShipmentDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReturnShipmentDetail', pretty_print=pretty_print)
        if self.PendingShipmentDetail is not None:
            namespaceprefix_ = self.PendingShipmentDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.PendingShipmentDetail_nsprefix_) else ''
            self.PendingShipmentDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PendingShipmentDetail', pretty_print=pretty_print)
        if self.InternationalControlledExportDetail is not None:
            namespaceprefix_ = self.InternationalControlledExportDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.InternationalControlledExportDetail_nsprefix_) else ''
            self.InternationalControlledExportDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InternationalControlledExportDetail', pretty_print=pretty_print)
        if self.InternationalTrafficInArmsRegulationsDetail is not None:
            namespaceprefix_ = self.InternationalTrafficInArmsRegulationsDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.InternationalTrafficInArmsRegulationsDetail_nsprefix_) else ''
            self.InternationalTrafficInArmsRegulationsDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InternationalTrafficInArmsRegulationsDetail', pretty_print=pretty_print)
        if self.ShipmentDryIceDetail is not None:
            namespaceprefix_ = self.ShipmentDryIceDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentDryIceDetail_nsprefix_) else ''
            self.ShipmentDryIceDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentDryIceDetail', pretty_print=pretty_print)
        if self.HomeDeliveryPremiumDetail is not None:
            namespaceprefix_ = self.HomeDeliveryPremiumDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.HomeDeliveryPremiumDetail_nsprefix_) else ''
            self.HomeDeliveryPremiumDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HomeDeliveryPremiumDetail', pretty_print=pretty_print)
        if self.FlatbedTrailerDetail is not None:
            namespaceprefix_ = self.FlatbedTrailerDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.FlatbedTrailerDetail_nsprefix_) else ''
            self.FlatbedTrailerDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FlatbedTrailerDetail', pretty_print=pretty_print)
        if self.FreightGuaranteeDetail is not None:
            namespaceprefix_ = self.FreightGuaranteeDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.FreightGuaranteeDetail_nsprefix_) else ''
            self.FreightGuaranteeDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FreightGuaranteeDetail', pretty_print=pretty_print)
        if self.EtdDetail is not None:
            namespaceprefix_ = self.EtdDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.EtdDetail_nsprefix_) else ''
            self.EtdDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EtdDetail', pretty_print=pretty_print)
        if self.ExtraLaborDetail is not None:
            namespaceprefix_ = self.ExtraLaborDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ExtraLaborDetail_nsprefix_) else ''
            self.ExtraLaborDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExtraLaborDetail', pretty_print=pretty_print)
        if self.PalletShrinkwrapDetail is not None:
            namespaceprefix_ = self.PalletShrinkwrapDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.PalletShrinkwrapDetail_nsprefix_) else ''
            self.PalletShrinkwrapDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PalletShrinkwrapDetail', pretty_print=pretty_print)
        if self.PalletsProvidedDetail is not None:
            namespaceprefix_ = self.PalletsProvidedDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.PalletsProvidedDetail_nsprefix_) else ''
            self.PalletsProvidedDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PalletsProvidedDetail', pretty_print=pretty_print)
        if self.DetentionDetail is not None:
            namespaceprefix_ = self.DetentionDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.DetentionDetail_nsprefix_) else ''
            self.DetentionDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DetentionDetail', pretty_print=pretty_print)
        if self.MarkingOrTaggingDetail is not None:
            namespaceprefix_ = self.MarkingOrTaggingDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkingOrTaggingDetail_nsprefix_) else ''
            self.MarkingOrTaggingDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkingOrTaggingDetail', pretty_print=pretty_print)
        if self.NonBusinessTimeDetail is not None:
            namespaceprefix_ = self.NonBusinessTimeDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.NonBusinessTimeDetail_nsprefix_) else ''
            self.NonBusinessTimeDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NonBusinessTimeDetail', pretty_print=pretty_print)
        if self.ShipmentAssemblyDetail is not None:
            namespaceprefix_ = self.ShipmentAssemblyDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentAssemblyDetail_nsprefix_) else ''
            self.ShipmentAssemblyDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShipmentAssemblyDetail', pretty_print=pretty_print)
        if self.SortAndSegregateDetail is not None:
            namespaceprefix_ = self.SortAndSegregateDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.SortAndSegregateDetail_nsprefix_) else ''
            self.SortAndSegregateDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SortAndSegregateDetail', pretty_print=pretty_print)
        if self.SpecialEquipmentDetail is not None:
            namespaceprefix_ = self.SpecialEquipmentDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialEquipmentDetail_nsprefix_) else ''
            self.SpecialEquipmentDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SpecialEquipmentDetail', pretty_print=pretty_print)
        if self.StorageDetail is not None:
            namespaceprefix_ = self.StorageDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.StorageDetail_nsprefix_) else ''
            self.StorageDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='StorageDetail', pretty_print=pretty_print)
        if self.WeighingDetail is not None:
            namespaceprefix_ = self.WeighingDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.WeighingDetail_nsprefix_) else ''
            self.WeighingDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WeighingDetail', pretty_print=pretty_print)
        if self.CustomDeliveryWindowDetail is not None:
            namespaceprefix_ = self.CustomDeliveryWindowDetail_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomDeliveryWindowDetail_nsprefix_) else ''
            self.CustomDeliveryWindowDetail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomDeliveryWindowDetail', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SpecialServiceTypes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SpecialServiceTypes')
            value_ = self.gds_validate_string(value_, node, 'SpecialServiceTypes')
            self.SpecialServiceTypes.append(value_)
            self.SpecialServiceTypes_nsprefix_ = child_.prefix
        elif nodeName_ == 'CodDetail':
            obj_ = CodDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CodDetail = obj_
            obj_.original_tagname_ = 'CodDetail'
        elif nodeName_ == 'DeliveryOnInvoiceAcceptanceDetail':
            obj_ = DeliveryOnInvoiceAcceptanceDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DeliveryOnInvoiceAcceptanceDetail = obj_
            obj_.original_tagname_ = 'DeliveryOnInvoiceAcceptanceDetail'
        elif nodeName_ == 'HoldAtLocationDetail':
            obj_ = HoldAtLocationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HoldAtLocationDetail = obj_
            obj_.original_tagname_ = 'HoldAtLocationDetail'
        elif nodeName_ == 'EventNotificationDetail':
            obj_ = ShipmentEventNotificationDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EventNotificationDetail = obj_
            obj_.original_tagname_ = 'EventNotificationDetail'
        elif nodeName_ == 'ReturnShipmentDetail':
            obj_ = ReturnShipmentDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReturnShipmentDetail = obj_
            obj_.original_tagname_ = 'ReturnShipmentDetail'
        elif nodeName_ == 'PendingShipmentDetail':
            obj_ = PendingShipmentDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PendingShipmentDetail = obj_
            obj_.original_tagname_ = 'PendingShipmentDetail'
        elif nodeName_ == 'InternationalControlledExportDetail':
            obj_ = InternationalControlledExportDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InternationalControlledExportDetail = obj_
            obj_.original_tagname_ = 'InternationalControlledExportDetail'
        elif nodeName_ == 'InternationalTrafficInArmsRegulationsDetail':
            obj_ = InternationalTrafficInArmsRegulationsDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InternationalTrafficInArmsRegulationsDetail = obj_
            obj_.original_tagname_ = 'InternationalTrafficInArmsRegulationsDetail'
        elif nodeName_ == 'ShipmentDryIceDetail':
            obj_ = ShipmentDryIceDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentDryIceDetail = obj_
            obj_.original_tagname_ = 'ShipmentDryIceDetail'
        elif nodeName_ == 'HomeDeliveryPremiumDetail':
            obj_ = HomeDeliveryPremiumDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HomeDeliveryPremiumDetail = obj_
            obj_.original_tagname_ = 'HomeDeliveryPremiumDetail'
        elif nodeName_ == 'FlatbedTrailerDetail':
            obj_ = FlatbedTrailerDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FlatbedTrailerDetail = obj_
            obj_.original_tagname_ = 'FlatbedTrailerDetail'
        elif nodeName_ == 'FreightGuaranteeDetail':
            obj_ = FreightGuaranteeDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FreightGuaranteeDetail = obj_
            obj_.original_tagname_ = 'FreightGuaranteeDetail'
        elif nodeName_ == 'EtdDetail':
            obj_ = EtdDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EtdDetail = obj_
            obj_.original_tagname_ = 'EtdDetail'
        elif nodeName_ == 'ExtraLaborDetail':
            obj_ = ExtraLaborDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExtraLaborDetail = obj_
            obj_.original_tagname_ = 'ExtraLaborDetail'
        elif nodeName_ == 'PalletShrinkwrapDetail':
            obj_ = PalletShrinkwrapDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PalletShrinkwrapDetail = obj_
            obj_.original_tagname_ = 'PalletShrinkwrapDetail'
        elif nodeName_ == 'PalletsProvidedDetail':
            obj_ = PalletsProvidedDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PalletsProvidedDetail = obj_
            obj_.original_tagname_ = 'PalletsProvidedDetail'
        elif nodeName_ == 'DetentionDetail':
            obj_ = DetentionDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DetentionDetail = obj_
            obj_.original_tagname_ = 'DetentionDetail'
        elif nodeName_ == 'MarkingOrTaggingDetail':
            obj_ = MarkingOrTaggingDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkingOrTaggingDetail = obj_
            obj_.original_tagname_ = 'MarkingOrTaggingDetail'
        elif nodeName_ == 'NonBusinessTimeDetail':
            obj_ = NonBusinessTimeDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NonBusinessTimeDetail = obj_
            obj_.original_tagname_ = 'NonBusinessTimeDetail'
        elif nodeName_ == 'ShipmentAssemblyDetail':
            obj_ = ShipmentAssemblyDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShipmentAssemblyDetail = obj_
            obj_.original_tagname_ = 'ShipmentAssemblyDetail'
        elif nodeName_ == 'SortAndSegregateDetail':
            obj_ = SortAndSegregateDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SortAndSegregateDetail = obj_
            obj_.original_tagname_ = 'SortAndSegregateDetail'
        elif nodeName_ == 'SpecialEquipmentDetail':
            obj_ = SpecialEquipmentDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SpecialEquipmentDetail = obj_
            obj_.original_tagname_ = 'SpecialEquipmentDetail'
        elif nodeName_ == 'StorageDetail':
            obj_ = StorageDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.StorageDetail = obj_
            obj_.original_tagname_ = 'StorageDetail'
        elif nodeName_ == 'WeighingDetail':
            obj_ = WeighingDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WeighingDetail = obj_
            obj_.original_tagname_ = 'WeighingDetail'
        elif nodeName_ == 'CustomDeliveryWindowDetail':
            obj_ = CustomDeliveryWindowDetail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomDeliveryWindowDetail = obj_
            obj_.original_tagname_ = 'CustomDeliveryWindowDetail'
# end class ShipmentSpecialServicesRequested


class SmsDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PhoneNumber=None, PhoneNumberCountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PhoneNumber = PhoneNumber
        self.PhoneNumber_nsprefix_ = None
        self.PhoneNumberCountryCode = PhoneNumberCountryCode
        self.PhoneNumberCountryCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SmsDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SmsDetail.subclass:
            return SmsDetail.subclass(*args_, **kwargs_)
        else:
            return SmsDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PhoneNumber(self):
        return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber):
        self.PhoneNumber = PhoneNumber
    def get_PhoneNumberCountryCode(self):
        return self.PhoneNumberCountryCode
    def set_PhoneNumberCountryCode(self, PhoneNumberCountryCode):
        self.PhoneNumberCountryCode = PhoneNumberCountryCode
    def hasContent_(self):
        if (
            self.PhoneNumber is not None or
            self.PhoneNumberCountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SmsDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SmsDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SmsDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SmsDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SmsDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SmsDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SmsDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PhoneNumber is not None:
            namespaceprefix_ = self.PhoneNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhoneNumber>%s</%sPhoneNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumber), input_name='PhoneNumber')), namespaceprefix_ , eol_))
        if self.PhoneNumberCountryCode is not None:
            namespaceprefix_ = self.PhoneNumberCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PhoneNumberCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhoneNumberCountryCode>%s</%sPhoneNumberCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PhoneNumberCountryCode), input_name='PhoneNumberCountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PhoneNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhoneNumber')
            value_ = self.gds_validate_string(value_, node, 'PhoneNumber')
            self.PhoneNumber = value_
            self.PhoneNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'PhoneNumberCountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PhoneNumberCountryCode')
            value_ = self.gds_validate_string(value_, node, 'PhoneNumberCountryCode')
            self.PhoneNumberCountryCode = value_
            self.PhoneNumberCountryCode_nsprefix_ = child_.prefix
# end class SmsDetail


class SortAndSegregateDetail(GeneratedsSuper):
    """Specification for sorting and/or segregating performed on shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PieceCount=None, Weight=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.PieceCount = PieceCount
        self.PieceCount_nsprefix_ = None
        self.Weight = Weight
        self.Weight_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SortAndSegregateDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SortAndSegregateDetail.subclass:
            return SortAndSegregateDetail.subclass(*args_, **kwargs_)
        else:
            return SortAndSegregateDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PieceCount(self):
        return self.PieceCount
    def set_PieceCount(self, PieceCount):
        self.PieceCount = PieceCount
    def get_Weight(self):
        return self.Weight
    def set_Weight(self, Weight):
        self.Weight = Weight
    def hasContent_(self):
        if (
            self.PieceCount is not None or
            self.Weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SortAndSegregateDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SortAndSegregateDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SortAndSegregateDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SortAndSegregateDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SortAndSegregateDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SortAndSegregateDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SortAndSegregateDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PieceCount is not None:
            namespaceprefix_ = self.PieceCount_nsprefix_ + ':' if (UseCapturedNS_ and self.PieceCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPieceCount>%s</%sPieceCount>%s' % (namespaceprefix_ , self.gds_format_integer(self.PieceCount, input_name='PieceCount'), namespaceprefix_ , eol_))
        if self.Weight is not None:
            namespaceprefix_ = self.Weight_nsprefix_ + ':' if (UseCapturedNS_ and self.Weight_nsprefix_) else ''
            self.Weight.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Weight', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PieceCount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PieceCount')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PieceCount')
            self.PieceCount = ival_
            self.PieceCount_nsprefix_ = child_.prefix
        elif nodeName_ == 'Weight':
            obj_ = Weight.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Weight = obj_
            obj_.original_tagname_ = 'Weight'
# end class SortAndSegregateDetail


class SpecialEquipmentDetail(GeneratedsSuper):
    """Specification for special equipment used in loading/unloading
    shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LineItems=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if LineItems is None:
            self.LineItems = []
        else:
            self.LineItems = LineItems
        self.LineItems_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SpecialEquipmentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SpecialEquipmentDetail.subclass:
            return SpecialEquipmentDetail.subclass(*args_, **kwargs_)
        else:
            return SpecialEquipmentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LineItems(self):
        return self.LineItems
    def set_LineItems(self, LineItems):
        self.LineItems = LineItems
    def add_LineItems(self, value):
        self.LineItems.append(value)
    def insert_LineItems_at(self, index, value):
        self.LineItems.insert(index, value)
    def replace_LineItems_at(self, index, value):
        self.LineItems[index] = value
    def hasContent_(self):
        if (
            self.LineItems
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SpecialEquipmentDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SpecialEquipmentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SpecialEquipmentDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SpecialEquipmentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SpecialEquipmentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SpecialEquipmentDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SpecialEquipmentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for LineItems_ in self.LineItems:
            namespaceprefix_ = self.LineItems_nsprefix_ + ':' if (UseCapturedNS_ and self.LineItems_nsprefix_) else ''
            LineItems_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LineItems', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LineItems':
            obj_ = SpecialEquipmentLineItem.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LineItems.append(obj_)
            obj_.original_tagname_ = 'LineItems'
# end class SpecialEquipmentDetail


class SpecialEquipmentLineItem(GeneratedsSuper):
    """Specifies the usage of a single type of special equipment while
    loading/unloading a shipment"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Duration=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_SpecialEquipmentType(self.Type)
        self.Type_nsprefix_ = None
        self.Duration = Duration
        self.Duration_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SpecialEquipmentLineItem)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SpecialEquipmentLineItem.subclass:
            return SpecialEquipmentLineItem.subclass(*args_, **kwargs_)
        else:
            return SpecialEquipmentLineItem(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Duration(self):
        return self.Duration
    def set_Duration(self, Duration):
        self.Duration = Duration
    def validate_SpecialEquipmentType(self, value):
        result = True
        # Validate type SpecialEquipmentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FORK_LIFT']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on SpecialEquipmentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Duration is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SpecialEquipmentLineItem', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SpecialEquipmentLineItem')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SpecialEquipmentLineItem':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SpecialEquipmentLineItem')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SpecialEquipmentLineItem', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SpecialEquipmentLineItem'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='SpecialEquipmentLineItem', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Duration is not None:
            namespaceprefix_ = self.Duration_nsprefix_ + ':' if (UseCapturedNS_ and self.Duration_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDuration>%s</%sDuration>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Duration), input_name='Duration')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type SpecialEquipmentType
            self.validate_SpecialEquipmentType(self.Type)
        elif nodeName_ == 'Duration':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Duration')
            value_ = self.gds_validate_string(value_, node, 'Duration')
            self.Duration = value_
            self.Duration_nsprefix_ = child_.prefix
# end class SpecialEquipmentLineItem


class StorageDetail(GeneratedsSuper):
    """Specification for storage provided for shipment."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Duration=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Duration = Duration
        self.Duration_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StorageDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StorageDetail.subclass:
            return StorageDetail.subclass(*args_, **kwargs_)
        else:
            return StorageDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Duration(self):
        return self.Duration
    def set_Duration(self, Duration):
        self.Duration = Duration
    def hasContent_(self):
        if (
            self.Duration is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='StorageDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StorageDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'StorageDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='StorageDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='StorageDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='StorageDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='StorageDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Duration is not None:
            namespaceprefix_ = self.Duration_nsprefix_ + ':' if (UseCapturedNS_ and self.Duration_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDuration>%s</%sDuration>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Duration), input_name='Duration')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Duration':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Duration')
            value_ = self.gds_validate_string(value_, node, 'Duration')
            self.Duration = value_
            self.Duration_nsprefix_ = child_.prefix
# end class StorageDetail


class TaxpayerIdentification(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TinType=None, Number=None, Usage=None, EffectiveDate=None, ExpirationDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TinType = TinType
        self.validate_TinType(self.TinType)
        self.TinType_nsprefix_ = None
        self.Number = Number
        self.Number_nsprefix_ = None
        self.Usage = Usage
        self.Usage_nsprefix_ = None
        if isinstance(EffectiveDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EffectiveDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = EffectiveDate
        self.EffectiveDate = initvalue_
        self.EffectiveDate_nsprefix_ = None
        if isinstance(ExpirationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ExpirationDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = ExpirationDate
        self.ExpirationDate = initvalue_
        self.ExpirationDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TaxpayerIdentification)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TaxpayerIdentification.subclass:
            return TaxpayerIdentification.subclass(*args_, **kwargs_)
        else:
            return TaxpayerIdentification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TinType(self):
        return self.TinType
    def set_TinType(self, TinType):
        self.TinType = TinType
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_Usage(self):
        return self.Usage
    def set_Usage(self, Usage):
        self.Usage = Usage
    def get_EffectiveDate(self):
        return self.EffectiveDate
    def set_EffectiveDate(self, EffectiveDate):
        self.EffectiveDate = EffectiveDate
    def get_ExpirationDate(self):
        return self.ExpirationDate
    def set_ExpirationDate(self, ExpirationDate):
        self.ExpirationDate = ExpirationDate
    def validate_TinType(self, value):
        result = True
        # Validate type TinType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['BUSINESS_NATIONAL', 'BUSINESS_STATE', 'BUSINESS_UNION', 'PERSONAL_NATIONAL', 'PERSONAL_STATE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TinType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.TinType is not None or
            self.Number is not None or
            self.Usage is not None or
            self.EffectiveDate is not None or
            self.ExpirationDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TaxpayerIdentification', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TaxpayerIdentification')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TaxpayerIdentification':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TaxpayerIdentification')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TaxpayerIdentification', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TaxpayerIdentification'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TaxpayerIdentification', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TinType is not None:
            namespaceprefix_ = self.TinType_nsprefix_ + ':' if (UseCapturedNS_ and self.TinType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTinType>%s</%sTinType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TinType), input_name='TinType')), namespaceprefix_ , eol_))
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
        if self.Usage is not None:
            namespaceprefix_ = self.Usage_nsprefix_ + ':' if (UseCapturedNS_ and self.Usage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUsage>%s</%sUsage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Usage), input_name='Usage')), namespaceprefix_ , eol_))
        if self.EffectiveDate is not None:
            namespaceprefix_ = self.EffectiveDate_nsprefix_ + ':' if (UseCapturedNS_ and self.EffectiveDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEffectiveDate>%s</%sEffectiveDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.EffectiveDate, input_name='EffectiveDate'), namespaceprefix_ , eol_))
        if self.ExpirationDate is not None:
            namespaceprefix_ = self.ExpirationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ExpirationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExpirationDate>%s</%sExpirationDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.ExpirationDate, input_name='ExpirationDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TinType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TinType')
            value_ = self.gds_validate_string(value_, node, 'TinType')
            self.TinType = value_
            self.TinType_nsprefix_ = child_.prefix
            # validate type TinType
            self.validate_TinType(self.TinType)
        elif nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
        elif nodeName_ == 'Usage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Usage')
            value_ = self.gds_validate_string(value_, node, 'Usage')
            self.Usage = value_
            self.Usage_nsprefix_ = child_.prefix
        elif nodeName_ == 'EffectiveDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.EffectiveDate = dval_
            self.EffectiveDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'ExpirationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.ExpirationDate = dval_
            self.ExpirationDate_nsprefix_ = child_.prefix
# end class TaxpayerIdentification


class TrackingId(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TrackingIdType=None, FormId=None, UspsApplicationId=None, TrackingNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TrackingIdType = TrackingIdType
        self.validate_TrackingIdType(self.TrackingIdType)
        self.TrackingIdType_nsprefix_ = None
        self.FormId = FormId
        self.FormId_nsprefix_ = None
        self.UspsApplicationId = UspsApplicationId
        self.UspsApplicationId_nsprefix_ = None
        self.TrackingNumber = TrackingNumber
        self.TrackingNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TrackingId)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TrackingId.subclass:
            return TrackingId.subclass(*args_, **kwargs_)
        else:
            return TrackingId(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TrackingIdType(self):
        return self.TrackingIdType
    def set_TrackingIdType(self, TrackingIdType):
        self.TrackingIdType = TrackingIdType
    def get_FormId(self):
        return self.FormId
    def set_FormId(self, FormId):
        self.FormId = FormId
    def get_UspsApplicationId(self):
        return self.UspsApplicationId
    def set_UspsApplicationId(self, UspsApplicationId):
        self.UspsApplicationId = UspsApplicationId
    def get_TrackingNumber(self):
        return self.TrackingNumber
    def set_TrackingNumber(self, TrackingNumber):
        self.TrackingNumber = TrackingNumber
    def validate_TrackingIdType(self, value):
        result = True
        # Validate type TrackingIdType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['EXPRESS', 'FEDEX', 'FREIGHT', 'GROUND', 'USPS']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on TrackingIdType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.TrackingIdType is not None or
            self.FormId is not None or
            self.UspsApplicationId is not None or
            self.TrackingNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackingId', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TrackingId')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TrackingId':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TrackingId')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TrackingId', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TrackingId'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TrackingId', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TrackingIdType is not None:
            namespaceprefix_ = self.TrackingIdType_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingIdType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTrackingIdType>%s</%sTrackingIdType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TrackingIdType), input_name='TrackingIdType')), namespaceprefix_ , eol_))
        if self.FormId is not None:
            namespaceprefix_ = self.FormId_nsprefix_ + ':' if (UseCapturedNS_ and self.FormId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormId>%s</%sFormId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FormId), input_name='FormId')), namespaceprefix_ , eol_))
        if self.UspsApplicationId is not None:
            namespaceprefix_ = self.UspsApplicationId_nsprefix_ + ':' if (UseCapturedNS_ and self.UspsApplicationId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUspsApplicationId>%s</%sUspsApplicationId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UspsApplicationId), input_name='UspsApplicationId')), namespaceprefix_ , eol_))
        if self.TrackingNumber is not None:
            namespaceprefix_ = self.TrackingNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TrackingNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTrackingNumber>%s</%sTrackingNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TrackingNumber), input_name='TrackingNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TrackingIdType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TrackingIdType')
            value_ = self.gds_validate_string(value_, node, 'TrackingIdType')
            self.TrackingIdType = value_
            self.TrackingIdType_nsprefix_ = child_.prefix
            # validate type TrackingIdType
            self.validate_TrackingIdType(self.TrackingIdType)
        elif nodeName_ == 'FormId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FormId')
            value_ = self.gds_validate_string(value_, node, 'FormId')
            self.FormId = value_
            self.FormId_nsprefix_ = child_.prefix
        elif nodeName_ == 'UspsApplicationId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UspsApplicationId')
            value_ = self.gds_validate_string(value_, node, 'UspsApplicationId')
            self.UspsApplicationId = value_
            self.UspsApplicationId_nsprefix_ = child_.prefix
        elif nodeName_ == 'TrackingNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TrackingNumber')
            value_ = self.gds_validate_string(value_, node, 'TrackingNumber')
            self.TrackingNumber = value_
            self.TrackingNumber_nsprefix_ = child_.prefix
# end class TrackingId


class TransactionDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CustomerTransactionId=None, Localization=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.CustomerTransactionId = CustomerTransactionId
        self.CustomerTransactionId_nsprefix_ = None
        self.Localization = Localization
        self.Localization_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransactionDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransactionDetail.subclass:
            return TransactionDetail.subclass(*args_, **kwargs_)
        else:
            return TransactionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CustomerTransactionId(self):
        return self.CustomerTransactionId
    def set_CustomerTransactionId(self, CustomerTransactionId):
        self.CustomerTransactionId = CustomerTransactionId
    def get_Localization(self):
        return self.Localization
    def set_Localization(self, Localization):
        self.Localization = Localization
    def hasContent_(self):
        if (
            self.CustomerTransactionId is not None or
            self.Localization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TransactionDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransactionDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransactionDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransactionDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransactionDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TransactionDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='TransactionDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomerTransactionId is not None:
            namespaceprefix_ = self.CustomerTransactionId_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerTransactionId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomerTransactionId>%s</%sCustomerTransactionId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomerTransactionId), input_name='CustomerTransactionId')), namespaceprefix_ , eol_))
        if self.Localization is not None:
            namespaceprefix_ = self.Localization_nsprefix_ + ':' if (UseCapturedNS_ and self.Localization_nsprefix_) else ''
            self.Localization.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Localization', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CustomerTransactionId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomerTransactionId')
            value_ = self.gds_validate_string(value_, node, 'CustomerTransactionId')
            self.CustomerTransactionId = value_
            self.CustomerTransactionId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Localization = obj_
            obj_.original_tagname_ = 'Localization'
# end class TransactionDetail


class UploadDocumentDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LineNumber=None, CustomerReference=None, DocumentProducer=None, DocumentType=None, FileName=None, DocumentContent=None, ExpirationDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.LineNumber = LineNumber
        self.LineNumber_nsprefix_ = None
        self.CustomerReference = CustomerReference
        self.CustomerReference_nsprefix_ = None
        self.DocumentProducer = DocumentProducer
        self.validate_UploadDocumentProducerType(self.DocumentProducer)
        self.DocumentProducer_nsprefix_ = None
        self.DocumentType = DocumentType
        self.validate_UploadDocumentType(self.DocumentType)
        self.DocumentType_nsprefix_ = None
        self.FileName = FileName
        self.FileName_nsprefix_ = None
        self.DocumentContent = DocumentContent
        self.DocumentContent_nsprefix_ = None
        if isinstance(ExpirationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ExpirationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ExpirationDate
        self.ExpirationDate = initvalue_
        self.ExpirationDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UploadDocumentDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UploadDocumentDetail.subclass:
            return UploadDocumentDetail.subclass(*args_, **kwargs_)
        else:
            return UploadDocumentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LineNumber(self):
        return self.LineNumber
    def set_LineNumber(self, LineNumber):
        self.LineNumber = LineNumber
    def get_CustomerReference(self):
        return self.CustomerReference
    def set_CustomerReference(self, CustomerReference):
        self.CustomerReference = CustomerReference
    def get_DocumentProducer(self):
        return self.DocumentProducer
    def set_DocumentProducer(self, DocumentProducer):
        self.DocumentProducer = DocumentProducer
    def get_DocumentType(self):
        return self.DocumentType
    def set_DocumentType(self, DocumentType):
        self.DocumentType = DocumentType
    def get_FileName(self):
        return self.FileName
    def set_FileName(self, FileName):
        self.FileName = FileName
    def get_DocumentContent(self):
        return self.DocumentContent
    def set_DocumentContent(self, DocumentContent):
        self.DocumentContent = DocumentContent
    def get_ExpirationDate(self):
        return self.ExpirationDate
    def set_ExpirationDate(self, ExpirationDate):
        self.ExpirationDate = ExpirationDate
    def validate_UploadDocumentProducerType(self, value):
        result = True
        # Validate type UploadDocumentProducerType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CUSTOMER', 'FEDEX_CAFE', 'FEDEX_CLS', 'FEDEX_FIDT', 'FEDEX_FXRS', 'FEDEX_GSMW', 'FEDEX_GTM', 'OTHER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on UploadDocumentProducerType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_UploadDocumentType(self, value):
        result = True
        # Validate type UploadDocumentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CERTIFICATE_OF_ORIGIN', 'COMMERCIAL_INVOICE', 'ETD_LABEL', 'NAFTA_CERTIFICATE_OF_ORIGIN', 'NET_RATE_SHEET', 'OTHER', 'PRO_FORMA_INVOICE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on UploadDocumentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.LineNumber is not None or
            self.CustomerReference is not None or
            self.DocumentProducer is not None or
            self.DocumentType is not None or
            self.FileName is not None or
            self.DocumentContent is not None or
            self.ExpirationDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='UploadDocumentDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UploadDocumentDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UploadDocumentDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UploadDocumentDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UploadDocumentDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='UploadDocumentDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='UploadDocumentDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineNumber is not None:
            namespaceprefix_ = self.LineNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.LineNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLineNumber>%s</%sLineNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.LineNumber, input_name='LineNumber'), namespaceprefix_ , eol_))
        if self.CustomerReference is not None:
            namespaceprefix_ = self.CustomerReference_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomerReference>%s</%sCustomerReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomerReference), input_name='CustomerReference')), namespaceprefix_ , eol_))
        if self.DocumentProducer is not None:
            namespaceprefix_ = self.DocumentProducer_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentProducer_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentProducer>%s</%sDocumentProducer>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentProducer), input_name='DocumentProducer')), namespaceprefix_ , eol_))
        if self.DocumentType is not None:
            namespaceprefix_ = self.DocumentType_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentType>%s</%sDocumentType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentType), input_name='DocumentType')), namespaceprefix_ , eol_))
        if self.FileName is not None:
            namespaceprefix_ = self.FileName_nsprefix_ + ':' if (UseCapturedNS_ and self.FileName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFileName>%s</%sFileName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FileName), input_name='FileName')), namespaceprefix_ , eol_))
        if self.DocumentContent is not None:
            namespaceprefix_ = self.DocumentContent_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentContent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentContent>%s</%sDocumentContent>%s' % (namespaceprefix_ , self.gds_format_base64(self.DocumentContent, input_name='DocumentContent'), namespaceprefix_ , eol_))
        if self.ExpirationDate is not None:
            namespaceprefix_ = self.ExpirationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ExpirationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExpirationDate>%s</%sExpirationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ExpirationDate, input_name='ExpirationDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LineNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'LineNumber')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'LineNumber')
            self.LineNumber = ival_
            self.LineNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'CustomerReference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomerReference')
            value_ = self.gds_validate_string(value_, node, 'CustomerReference')
            self.CustomerReference = value_
            self.CustomerReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'DocumentProducer':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocumentProducer')
            value_ = self.gds_validate_string(value_, node, 'DocumentProducer')
            self.DocumentProducer = value_
            self.DocumentProducer_nsprefix_ = child_.prefix
            # validate type UploadDocumentProducerType
            self.validate_UploadDocumentProducerType(self.DocumentProducer)
        elif nodeName_ == 'DocumentType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocumentType')
            value_ = self.gds_validate_string(value_, node, 'DocumentType')
            self.DocumentType = value_
            self.DocumentType_nsprefix_ = child_.prefix
            # validate type UploadDocumentType
            self.validate_UploadDocumentType(self.DocumentType)
        elif nodeName_ == 'FileName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FileName')
            value_ = self.gds_validate_string(value_, node, 'FileName')
            self.FileName = value_
            self.FileName_nsprefix_ = child_.prefix
        elif nodeName_ == 'DocumentContent':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'DocumentContent')
            else:
                bval_ = None
            self.DocumentContent = bval_
            self.DocumentContent_nsprefix_ = child_.prefix
        elif nodeName_ == 'ExpirationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ExpirationDate = dval_
            self.ExpirationDate_nsprefix_ = child_.prefix
# end class UploadDocumentDetail


class UploadDocumentReferenceDetail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LineNumber=None, CustomerReference=None, Description=None, DocumentProducer=None, DocumentType=None, DocumentId=None, DocumentIdProducer=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.LineNumber = LineNumber
        self.LineNumber_nsprefix_ = None
        self.CustomerReference = CustomerReference
        self.CustomerReference_nsprefix_ = None
        self.Description = Description
        self.Description_nsprefix_ = None
        self.DocumentProducer = DocumentProducer
        self.validate_UploadDocumentProducerType(self.DocumentProducer)
        self.DocumentProducer_nsprefix_ = None
        self.DocumentType = DocumentType
        self.validate_UploadDocumentType(self.DocumentType)
        self.DocumentType_nsprefix_ = None
        self.DocumentId = DocumentId
        self.DocumentId_nsprefix_ = None
        self.DocumentIdProducer = DocumentIdProducer
        self.validate_UploadDocumentIdProducer(self.DocumentIdProducer)
        self.DocumentIdProducer_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UploadDocumentReferenceDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UploadDocumentReferenceDetail.subclass:
            return UploadDocumentReferenceDetail.subclass(*args_, **kwargs_)
        else:
            return UploadDocumentReferenceDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LineNumber(self):
        return self.LineNumber
    def set_LineNumber(self, LineNumber):
        self.LineNumber = LineNumber
    def get_CustomerReference(self):
        return self.CustomerReference
    def set_CustomerReference(self, CustomerReference):
        self.CustomerReference = CustomerReference
    def get_Description(self):
        return self.Description
    def set_Description(self, Description):
        self.Description = Description
    def get_DocumentProducer(self):
        return self.DocumentProducer
    def set_DocumentProducer(self, DocumentProducer):
        self.DocumentProducer = DocumentProducer
    def get_DocumentType(self):
        return self.DocumentType
    def set_DocumentType(self, DocumentType):
        self.DocumentType = DocumentType
    def get_DocumentId(self):
        return self.DocumentId
    def set_DocumentId(self, DocumentId):
        self.DocumentId = DocumentId
    def get_DocumentIdProducer(self):
        return self.DocumentIdProducer
    def set_DocumentIdProducer(self, DocumentIdProducer):
        self.DocumentIdProducer = DocumentIdProducer
    def validate_UploadDocumentProducerType(self, value):
        result = True
        # Validate type UploadDocumentProducerType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CUSTOMER', 'FEDEX_CAFE', 'FEDEX_CLS', 'FEDEX_FIDT', 'FEDEX_FXRS', 'FEDEX_GSMW', 'FEDEX_GTM', 'OTHER']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on UploadDocumentProducerType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_UploadDocumentType(self, value):
        result = True
        # Validate type UploadDocumentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CERTIFICATE_OF_ORIGIN', 'COMMERCIAL_INVOICE', 'ETD_LABEL', 'NAFTA_CERTIFICATE_OF_ORIGIN', 'NET_RATE_SHEET', 'OTHER', 'PRO_FORMA_INVOICE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on UploadDocumentType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def validate_UploadDocumentIdProducer(self, value):
        result = True
        # Validate type UploadDocumentIdProducer, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['CUSTOMER', 'FEDEX_CAFE', 'FEDEX_CSHP', 'FEDEX_FXRS', 'FEDEX_GSMW', 'FEDEX_GTM', 'FEDEX_INET']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on UploadDocumentIdProducer' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.LineNumber is not None or
            self.CustomerReference is not None or
            self.Description is not None or
            self.DocumentProducer is not None or
            self.DocumentType is not None or
            self.DocumentId is not None or
            self.DocumentIdProducer is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='UploadDocumentReferenceDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UploadDocumentReferenceDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UploadDocumentReferenceDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UploadDocumentReferenceDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UploadDocumentReferenceDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='UploadDocumentReferenceDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='UploadDocumentReferenceDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineNumber is not None:
            namespaceprefix_ = self.LineNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.LineNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLineNumber>%s</%sLineNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.LineNumber, input_name='LineNumber'), namespaceprefix_ , eol_))
        if self.CustomerReference is not None:
            namespaceprefix_ = self.CustomerReference_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomerReference_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomerReference>%s</%sCustomerReference>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomerReference), input_name='CustomerReference')), namespaceprefix_ , eol_))
        if self.Description is not None:
            namespaceprefix_ = self.Description_nsprefix_ + ':' if (UseCapturedNS_ and self.Description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescription>%s</%sDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), namespaceprefix_ , eol_))
        if self.DocumentProducer is not None:
            namespaceprefix_ = self.DocumentProducer_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentProducer_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentProducer>%s</%sDocumentProducer>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentProducer), input_name='DocumentProducer')), namespaceprefix_ , eol_))
        if self.DocumentType is not None:
            namespaceprefix_ = self.DocumentType_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentType>%s</%sDocumentType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentType), input_name='DocumentType')), namespaceprefix_ , eol_))
        if self.DocumentId is not None:
            namespaceprefix_ = self.DocumentId_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentId>%s</%sDocumentId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentId), input_name='DocumentId')), namespaceprefix_ , eol_))
        if self.DocumentIdProducer is not None:
            namespaceprefix_ = self.DocumentIdProducer_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentIdProducer_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentIdProducer>%s</%sDocumentIdProducer>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentIdProducer), input_name='DocumentIdProducer')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LineNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'LineNumber')
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'LineNumber')
            self.LineNumber = ival_
            self.LineNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'CustomerReference':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomerReference')
            value_ = self.gds_validate_string(value_, node, 'CustomerReference')
            self.CustomerReference = value_
            self.CustomerReference_nsprefix_ = child_.prefix
        elif nodeName_ == 'Description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Description')
            value_ = self.gds_validate_string(value_, node, 'Description')
            self.Description = value_
            self.Description_nsprefix_ = child_.prefix
        elif nodeName_ == 'DocumentProducer':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocumentProducer')
            value_ = self.gds_validate_string(value_, node, 'DocumentProducer')
            self.DocumentProducer = value_
            self.DocumentProducer_nsprefix_ = child_.prefix
            # validate type UploadDocumentProducerType
            self.validate_UploadDocumentProducerType(self.DocumentProducer)
        elif nodeName_ == 'DocumentType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocumentType')
            value_ = self.gds_validate_string(value_, node, 'DocumentType')
            self.DocumentType = value_
            self.DocumentType_nsprefix_ = child_.prefix
            # validate type UploadDocumentType
            self.validate_UploadDocumentType(self.DocumentType)
        elif nodeName_ == 'DocumentId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocumentId')
            value_ = self.gds_validate_string(value_, node, 'DocumentId')
            self.DocumentId = value_
            self.DocumentId_nsprefix_ = child_.prefix
        elif nodeName_ == 'DocumentIdProducer':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocumentIdProducer')
            value_ = self.gds_validate_string(value_, node, 'DocumentIdProducer')
            self.DocumentIdProducer = value_
            self.DocumentIdProducer_nsprefix_ = child_.prefix
            # validate type UploadDocumentIdProducer
            self.validate_UploadDocumentIdProducer(self.DocumentIdProducer)
# end class UploadDocumentReferenceDetail


class WeighingDetail(GeneratedsSuper):
    """Specifies a single type of weighing performed on a shipment"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_WeighingScaleType(self.Type)
        self.Type_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WeighingDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WeighingDetail.subclass:
            return WeighingDetail.subclass(*args_, **kwargs_)
        else:
            return WeighingDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def validate_WeighingScaleType(self, value):
        result = True
        # Validate type WeighingScaleType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FEDEX_SCALE', 'PUBLIC_SCALE']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on WeighingScaleType' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Type is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WeighingDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WeighingDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'WeighingDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='WeighingDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='WeighingDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='WeighingDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WeighingDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type WeighingScaleType
            self.validate_WeighingScaleType(self.Type)
# end class WeighingDetail


class Weight(GeneratedsSuper):
    """The descriptive data for the heaviness of an object."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Units=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Units = Units
        self.validate_WeightUnits(self.Units)
        self.Units_nsprefix_ = None
        self.Value = Value
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Weight)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Weight.subclass:
            return Weight.subclass(*args_, **kwargs_)
        else:
            return Weight(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Units(self):
        return self.Units
    def set_Units(self, Units):
        self.Units = Units
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def validate_WeightUnits(self, value):
        result = True
        # Validate type WeightUnits, a restriction on xs:string.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['KG', 'LB']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on WeightUnits' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
        return result
    def hasContent_(self):
        if (
            self.Units is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Weight', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Weight')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Weight':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Weight')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Weight', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Weight'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='Weight', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Units is not None:
            namespaceprefix_ = self.Units_nsprefix_ + ':' if (UseCapturedNS_ and self.Units_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnits>%s</%sUnits>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Units), input_name='Units')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Value, input_name='Value'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Units':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Units')
            value_ = self.gds_validate_string(value_, node, 'Units')
            self.Units = value_
            self.Units_nsprefix_ = child_.prefix
            # validate type WeightUnits
            self.validate_WeightUnits(self.Units)
        elif nodeName_ == 'Value' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Value')
            fval_ = self.gds_validate_decimal(fval_, node, 'Value')
            self.Value = fval_
            self.Value_nsprefix_ = child_.prefix
# end class Weight


class WebAuthenticationDetail(GeneratedsSuper):
    """Used in authentication of the sender's identity."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ParentCredential=None, UserCredential=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ParentCredential = ParentCredential
        self.ParentCredential_nsprefix_ = None
        self.UserCredential = UserCredential
        self.UserCredential_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WebAuthenticationDetail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WebAuthenticationDetail.subclass:
            return WebAuthenticationDetail.subclass(*args_, **kwargs_)
        else:
            return WebAuthenticationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ParentCredential(self):
        return self.ParentCredential
    def set_ParentCredential(self, ParentCredential):
        self.ParentCredential = ParentCredential
    def get_UserCredential(self):
        return self.UserCredential
    def set_UserCredential(self, UserCredential):
        self.UserCredential = UserCredential
    def hasContent_(self):
        if (
            self.ParentCredential is not None or
            self.UserCredential is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WebAuthenticationDetail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WebAuthenticationDetail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'WebAuthenticationDetail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='WebAuthenticationDetail')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='WebAuthenticationDetail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='WebAuthenticationDetail'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WebAuthenticationDetail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ParentCredential is not None:
            namespaceprefix_ = self.ParentCredential_nsprefix_ + ':' if (UseCapturedNS_ and self.ParentCredential_nsprefix_) else ''
            self.ParentCredential.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ParentCredential', pretty_print=pretty_print)
        if self.UserCredential is not None:
            namespaceprefix_ = self.UserCredential_nsprefix_ + ':' if (UseCapturedNS_ and self.UserCredential_nsprefix_) else ''
            self.UserCredential.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UserCredential', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ParentCredential':
            obj_ = WebAuthenticationCredential.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ParentCredential = obj_
            obj_.original_tagname_ = 'ParentCredential'
        elif nodeName_ == 'UserCredential':
            obj_ = WebAuthenticationCredential.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UserCredential = obj_
            obj_.original_tagname_ = 'UserCredential'
# end class WebAuthenticationDetail


class WebAuthenticationCredential(GeneratedsSuper):
    """Two part authentication string used for the sender's identity"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Key=None, Password=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Key = Key
        self.Key_nsprefix_ = None
        self.Password = Password
        self.Password_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WebAuthenticationCredential)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WebAuthenticationCredential.subclass:
            return WebAuthenticationCredential.subclass(*args_, **kwargs_)
        else:
            return WebAuthenticationCredential(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Key(self):
        return self.Key
    def set_Key(self, Key):
        self.Key = Key
    def get_Password(self):
        return self.Password
    def set_Password(self, Password):
        self.Password = Password
    def hasContent_(self):
        if (
            self.Key is not None or
            self.Password is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WebAuthenticationCredential', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WebAuthenticationCredential')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'WebAuthenticationCredential':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='WebAuthenticationCredential')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='WebAuthenticationCredential', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='WebAuthenticationCredential'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='WebAuthenticationCredential', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Key is not None:
            namespaceprefix_ = self.Key_nsprefix_ + ':' if (UseCapturedNS_ and self.Key_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sKey>%s</%sKey>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Key), input_name='Key')), namespaceprefix_ , eol_))
        if self.Password is not None:
            namespaceprefix_ = self.Password_nsprefix_ + ':' if (UseCapturedNS_ and self.Password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPassword>%s</%sPassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Password), input_name='Password')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Key':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Key')
            value_ = self.gds_validate_string(value_, node, 'Key')
            self.Key = value_
            self.Key_nsprefix_ = child_.prefix
        elif nodeName_ == 'Password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Password')
            value_ = self.gds_validate_string(value_, node, 'Password')
            self.Password = value_
            self.Password_nsprefix_ = child_.prefix
# end class WebAuthenticationCredential


class VersionId(GeneratedsSuper):
    """Identifies the version/level of a service operation expected by a caller
    (in each request) and performed by the callee (in each reply)."""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ServiceId=None, Major=None, Intermediate=None, Minor=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ServiceId = ServiceId
        self.ServiceId_nsprefix_ = None
        self.Major = Major
        self.Major_nsprefix_ = None
        self.Intermediate = Intermediate
        self.Intermediate_nsprefix_ = None
        self.Minor = Minor
        self.Minor_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VersionId)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VersionId.subclass:
            return VersionId.subclass(*args_, **kwargs_)
        else:
            return VersionId(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ServiceId(self):
        return self.ServiceId
    def set_ServiceId(self, ServiceId):
        self.ServiceId = ServiceId
    def get_Major(self):
        return self.Major
    def set_Major(self, Major):
        self.Major = Major
    def get_Intermediate(self):
        return self.Intermediate
    def set_Intermediate(self, Intermediate):
        self.Intermediate = Intermediate
    def get_Minor(self):
        return self.Minor
    def set_Minor(self, Minor):
        self.Minor = Minor
    def hasContent_(self):
        if (
            self.ServiceId is not None or
            self.Major is not None or
            self.Intermediate is not None or
            self.Minor is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='VersionId', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VersionId')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'VersionId':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='VersionId')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='VersionId', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='VersionId'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='VersionId', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServiceId is not None:
            namespaceprefix_ = self.ServiceId_nsprefix_ + ':' if (UseCapturedNS_ and self.ServiceId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceId>%s</%sServiceId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ServiceId), input_name='ServiceId')), namespaceprefix_ , eol_))
        if self.Major is not None:
            namespaceprefix_ = self.Major_nsprefix_ + ':' if (UseCapturedNS_ and self.Major_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMajor>%s</%sMajor>%s' % (namespaceprefix_ , self.gds_format_integer(self.Major, input_name='Major'), namespaceprefix_ , eol_))
        if self.Intermediate is not None:
            namespaceprefix_ = self.Intermediate_nsprefix_ + ':' if (UseCapturedNS_ and self.Intermediate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIntermediate>%s</%sIntermediate>%s' % (namespaceprefix_ , self.gds_format_integer(self.Intermediate, input_name='Intermediate'), namespaceprefix_ , eol_))
        if self.Minor is not None:
            namespaceprefix_ = self.Minor_nsprefix_ + ':' if (UseCapturedNS_ and self.Minor_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMinor>%s</%sMinor>%s' % (namespaceprefix_ , self.gds_format_integer(self.Minor, input_name='Minor'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ServiceId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ServiceId')
            value_ = self.gds_validate_string(value_, node, 'ServiceId')
            self.ServiceId = value_
            self.ServiceId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Major' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Major')
            ival_ = self.gds_validate_integer(ival_, node, 'Major')
            self.Major = ival_
            self.Major_nsprefix_ = child_.prefix
        elif nodeName_ == 'Intermediate' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Intermediate')
            ival_ = self.gds_validate_integer(ival_, node, 'Intermediate')
            self.Intermediate = ival_
            self.Intermediate_nsprefix_ = child_.prefix
        elif nodeName_ == 'Minor' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Minor')
            ival_ = self.gds_validate_integer(ival_, node, 'Minor')
            self.Minor = ival_
            self.Minor_nsprefix_ = child_.prefix
# end class VersionId


GDSClassesMapping = {
    'CancelPickupReply': CancelPickupReply,
    'CancelPickupRequest': CancelPickupRequest,
    'CreatePickupReply': CreatePickupReply,
    'CreatePickupRequest': CreatePickupRequest,
    'PickupAvailabilityReply': PickupAvailabilityReply,
    'PickupAvailabilityRequest': PickupAvailabilityRequest,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def get_required_ns_prefix_defs(rootNode):
    '''Get all name space prefix definitions required in this XML doc.
    Return a dictionary of definitions and a char string of definitions.
    '''
    nsmap = {
        prefix: uri
        for node in rootNode.iter()
        for (prefix, uri) in node.nsmap.items()
        if prefix is not None
    }
    namespacedefs = ' '.join([
        'xmlns:{}="{}"'.format(prefix, uri)
        for prefix, uri in nsmap.items()
    ])
    return nsmap, namespacedefs


def parse(inFileName, silence=False, print_warnings=True):
    global CapturedNsmap_
    gds_collector = GdsCollector_()
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'CancelPickupReply'
        rootClass = CancelPickupReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    CapturedNsmap_, namespacedefs = get_required_ns_prefix_defs(rootNode)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_=namespacedefs,
            pretty_print=True)
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseEtree(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'CancelPickupReply'
        rootClass = CancelPickupReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(str(content))
        sys.stdout.write('\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False, print_warnings=True):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    gds_collector = GdsCollector_()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'CancelPickupReply'
        rootClass = CancelPickupReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if not SaveElementTreeNode:
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:ns="http://fedex.com/ws/pickup/v20"')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseLiteral(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'CancelPickupReply'
        rootClass = CancelPickupReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('#from pickup_service_v20 import *\n\n')
        sys.stdout.write('import pickup_service_v20 as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

RenameMappings_ = {
}

__all__ = [
    "Address",
    "AssociatedAccount",
    "CancelPickupReply",
    "CancelPickupRequest",
    "ClientDetail",
    "CodAddTransportationChargesDetail",
    "CodDetail",
    "CompletedFreightPickupDetail",
    "CompletedFreightPickupLineItem",
    "Contact",
    "ContactAndAddress",
    "CreatePickupReply",
    "CreatePickupRequest",
    "CustomDeliveryWindowDetail",
    "DateRange",
    "DeliveryOnInvoiceAcceptanceDetail",
    "DetentionDetail",
    "Dimensions",
    "Distance",
    "EMailDetail",
    "EMailLabelDetail",
    "EMailRecipient",
    "EmailOptionsRequested",
    "EtdDetail",
    "ExpressFreightPickupDetail",
    "ExtraLaborDetail",
    "FaxDetail",
    "FlatbedTrailerDetail",
    "FreightGuaranteeDetail",
    "FreightPickupDetail",
    "FreightPickupLineItem",
    "FreightServiceCenterDetail",
    "HoldAtLocationDetail",
    "HomeDeliveryPremiumDetail",
    "InternationalControlledExportDetail",
    "InternationalTrafficInArmsRegulationsDetail",
    "Localization",
    "MarkingOrTaggingDetail",
    "Money",
    "NonBusinessTimeDetail",
    "Notification",
    "NotificationDetail",
    "NotificationParameter",
    "PalletShrinkwrapDetail",
    "PalletsProvidedDetail",
    "Party",
    "Payment",
    "Payor",
    "PendingShipmentDetail",
    "PendingShipmentProcessingOptionsRequested",
    "PickupAvailabilityReply",
    "PickupAvailabilityRequest",
    "PickupDangerousGoodsDetail",
    "PickupOriginDetail",
    "PickupPackageSpecialServicesRequested",
    "PickupScheduleOption",
    "PickupShipmentAttributes",
    "PriorityAlertDetail",
    "RecommendedDocumentSpecification",
    "RequestedPickupPackageDetail",
    "ReturnAssociationDetail",
    "ReturnEMailDetail",
    "ReturnShipmentDetail",
    "Rma",
    "ShipmentAssemblyDetail",
    "ShipmentDryIceDetail",
    "ShipmentDryIceProcessingOptionsRequested",
    "ShipmentEventNotificationDetail",
    "ShipmentEventNotificationSpecification",
    "ShipmentNotificationFormatSpecification",
    "ShipmentSpecialServicesRequested",
    "SmsDetail",
    "SortAndSegregateDetail",
    "SpecialEquipmentDetail",
    "SpecialEquipmentLineItem",
    "StorageDetail",
    "TaxpayerIdentification",
    "TrackingId",
    "TransactionDetail",
    "UploadDocumentDetail",
    "UploadDocumentReferenceDetail",
    "VersionId",
    "WebAuthenticationCredential",
    "WebAuthenticationDetail",
    "WeighingDetail",
    "Weight"
]
