{"version":3,"sources":["webpack://jupyter-scatter/./src/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA,gBAAgB,mBAAO,CAAC,oFAAuB;AAC/C,UAAU,mBAAO,CAAC,6DAAQ;AAC1B,wBAAwB,mBAAO,CAAC,2GAA2C;AAC3E,oBAAoB,mBAAO,CAAC,uCAAiB;;AAE7C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,KAAK;;AAEL;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,2DAA2D,iBAAiB;AAC5E;AACA,KAAK;AACL;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,iCAAiC,qBAAqB;AACtD,KAAK;AACL,kDAAkD,qBAAqB;AACvE;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA","file":"src_index_js.dcc7ee0e3a3e25502846.js","sourcesContent":["/* eslint-env browser */\nconst widgets = require('@jupyter-widgets/base');\nconst _ = require('lodash');\nconst reglScatterplot = require('regl-scatterplot/dist/regl-scatterplot.js');\nconst packageJson = require('../package.json');\n\nconst createScatterplot = reglScatterplot.default;\n\nconst JupyterScatterModel = widgets.DOMWidgetModel.extend({\n  defaults: _.extend(\n    _.result(this, 'widgets.DOMWidgetModel.prototype.defaults'),\n    {\n      _model_name : 'JupyterScatterModel',\n      _model_module : packageJson.name,\n      _model_module_version : packageJson.version,\n      _view_name : 'JupyterScatterView',\n      _view_module : packageJson.name,\n      _view_module_version : packageJson.version\n    }\n  )\n});\n\nfunction camelToSnake(string) {\n  return string.replace(/[\\w]([A-Z])/g, function(m) {\n    return m[0] + \"_\" + m[1];\n  }).toLowerCase();\n}\n\nconst MIN_WIDTH = 240;\n\nconst properties = [\n  'colorBy',\n  'points',\n  'selectedPoints',\n  'height',\n  'backgroundColor',\n  'backgroundImage',\n  'lassoColor',\n  'lassoMinDelay',\n  'lassoMinDist',\n  'pointColor',\n  'pointColorActive',\n  'pointColorHover',\n  'pointOpacity',\n  'pointSize',\n  'pointSizeSelected',\n  'pointOutlineWidth',\n  'showRecticle',\n  'recticleColor',\n  'cameraTarget',\n  'cameraDistance',\n  'cameraRotation',\n  'cameraView',\n  'otherOptions',\n  'lassoInitiator',\n  'mouseMode',\n  'viewReset'\n];\n\n// Custom View. Renders the widget model.\nconst JupyterScatterView = widgets.DOMWidgetView.extend({\n  render: function render() {\n    var self = this;\n\n    properties.forEach(function(propertyName) {\n      self[propertyName] = self.model.get(camelToSnake(propertyName));\n    });\n\n    this.height = this.model.get('height');\n\n    // Create a random 6-letter string\n    // From https://gist.github.com/6174/6062387\n    var randomStr = (\n      Math.random().toString(36).substring(2, 5) +\n      Math.random().toString(36).substring(2, 5)\n    );\n    this.model.set('dom_element_id', randomStr);\n\n    this.container = document.createElement('div');\n    this.container.setAttribute('id', randomStr);\n    this.container.style.position = 'relative'\n    this.container.style.border = this.otherOptions.theme === 'dark'\n      ? '#333333' : '#dddddd';\n    this.container.style.borderRadius = '2px';\n    this.container.style.height = this.height + 'px';\n\n    this.el.appendChild(this.container);\n\n    this.canvas = document.createElement('canvas');\n    this.canvas.style.position = 'absolute';\n    this.canvas.style.width = '100%';\n    this.canvas.style.height = '100%';\n\n    this.container.appendChild(this.canvas);\n\n    window.requestAnimationFrame(function init() {\n      self.width = Math.max(MIN_WIDTH, self.el.getBoundingClientRect().width);\n\n      const initialOptions = {\n        canvas: self.canvas,\n        width: self.width,\n      }\n\n      properties.forEach(function(propertyName) {\n        initialOptions[propertyName] = self[propertyName];\n      });\n\n      self.scatterplot = createScatterplot(initialOptions);\n\n      // eslint-disable-next-line\n      console.log(\n        'jupyterscatter v' + packageJson.version +\n        ' with regl-scatterplot v' + self.scatterplot.get('version')\n      );\n\n      self.container.api = self.scatterplot;\n\n      // Listen to events from the JavaScript world\n      self.pointoverHandlerBound = self.pointoverHandler.bind(self);\n      self.pointoutHandlerBound = self.pointoutHandler.bind(self);\n      self.selectHandlerBound = self.selectHandler.bind(self);\n      self.deselectHandlerBound = self.deselectHandler.bind(self);\n      self.scatterplot.subscribe('pointover', self.pointoverHandlerBound);\n      self.scatterplot.subscribe('pointout', self.pointoutHandlerBound);\n      self.scatterplot.subscribe('select', self.selectHandlerBound);\n      self.scatterplot.subscribe('deselect', self.deselectHandlerBound);\n\n      // Listen to messages from the Python world\n      properties.forEach(function(propertyName) {\n        self.model.on(\n          'change:' + camelToSnake(propertyName),\n          self.withModelChangeHandler(\n            propertyName,\n            self[propertyName + 'Handler'].bind(self)\n          ),\n          self\n        );\n      });\n\n      window.addEventListener('resize', self.resizeHandler.bind(self));\n      window.addEventListener('deviceorientation', self.resizeHandler.bind(self));\n\n      self.resizeHandler();\n      self.colorCanvas();\n\n      if (self.points.length) {\n        self.scatterplot\n          .draw(self.points)\n          .then(function onInitialDraw() {\n            if (self.selectedPoints.length) {\n              self.scatterplot.select(self.selectedPoints);\n            }\n          });\n      }\n    });\n\n    this.model.save_changes();\n  },\n\n  // Helper\n  colorCanvas: function colorCanvas() {\n    if (Array.isArray(this.backgroundColor)) {\n      this.canvas.style.backgroundColor = 'rgb(' +\n        this.backgroundColor.slice(0, 3).map(function (x) { return x * 255 }).join(',') +\n        ')';\n    } else {\n      this.canvas.style.backgroundColor = this.backgroundColor;\n    }\n  },\n\n  // Event handlers for JS-triggered events\n  pointoverHandler: function pointoverHandler(pointIndex) {\n    this.model.set('hovered_point', pointIndex);\n    this.model.save_changes();\n  },\n\n  pointoutHandler: function pointoutHandler() {\n    this.model.set('hovered_point', null);\n    this.model.save_changes();\n  },\n\n  selectHandler: function selectHandler(event) {\n    if (this.selectedPointsChangedPython) {\n      this.selectedPointsChangedPython = false;\n      return;\n    }\n    this.model.set('selected_points', event.points);\n    this.selectedPointsChanged = true;\n    this.model.save_changes();\n  },\n\n  deselectHandler: function deselectHandler() {\n    if (this.selectedPointsChangedPython) {\n      this.selectedPointsChangedPython = false;\n      return;\n    }\n    this.model.set('selected_points', []);\n    this.selectedPointsChanged = true;\n    this.model.save_changes();\n  },\n\n  // Event handlers for Python-triggered events\n  pointsHandler: function pointsHandler(newPoints) {\n    this.scatterplot.draw(newPoints);\n  },\n\n  selectedPointsHandler: function selectedPointsHandler(newSelectedPoints) {\n    this.selectedPointsChangedPython = true;\n    if (!newSelectedPoints || !newSelectedPoints.length) {\n      this.scatterplot.deselect({ preventEvent: true });\n    } else {\n      this.scatterplot.select(newSelectedPoints, { preventEvent: true });\n    }\n  },\n\n  heightHandler: function heightHandler(newValue) {\n    this.withPropertyChangeHandler('height', newValue);\n    this.resizeHandler();\n  },\n\n  backgroundColorHandler: function backgroundColorHandler(newValue) {\n    this.withPropertyChangeHandler('backgroundColor', newValue);\n    this.colorCanvas();\n  },\n\n  backgroundImageHandler: function backgroundImageHandler(newValue) {\n    this.withPropertyChangeHandler('backgroundImage', newValue);\n  },\n\n  colorByHandler: function colorByHandler(newValue) {\n    this.withPropertyChangeHandler('colorBy', newValue);\n  },\n\n  lassoColorHandler: function lassoColorHandler(newValue) {\n    this.withPropertyChangeHandler('lassoColor', newValue);\n  },\n\n  lassoMinDelayHandler: function lassoMinDelayHandler(newValue) {\n    this.withPropertyChangeHandler('lassoMinDelay', newValue);\n  },\n\n  lassoMinDistHandler: function lassoMinDistHandler(newValue) {\n    this.withPropertyChangeHandler('lassoMinDist', newValue);\n  },\n\n  pointColorHandler: function pointColorHandler(newValue) {\n    this.withPropertyChangeHandler('pointColor', newValue);\n  },\n\n  pointColorActiveHandler: function pointColorActiveHandler(newValue) {\n    this.withPropertyChangeHandler('pointColorActive', newValue);\n  },\n\n  pointColorHoverHandler: function pointColorHoverHandler(newValue) {\n    this.withPropertyChangeHandler('pointColorHover', newValue);\n  },\n\n  pointOpacityHandler: function pointOpacityHandler(newValue) {\n    this.withPropertyChangeHandler('opacity', newValue);\n  },\n\n  pointSizeHandler: function pointSizeHandler(newValue) {\n    this.withPropertyChangeHandler('pointSize', newValue);\n  },\n\n  pointSizeSelectedHandler: function pointSizeSelectedHandler(newValue) {\n    this.withPropertyChangeHandler('pointSizeSelected', newValue);\n  },\n\n  pointOutlineWidthHandler: function pointOutlineWidthHandler(newValue) {\n    this.withPropertyChangeHandler('pointOutlineWidth', newValue);\n  },\n\n  showRecticleHandler: function showRecticleHandler(newValue) {\n    this.withPropertyChangeHandler('showRecticle', newValue);\n  },\n\n  recticleColorHandler: function recticleColorHandler(newValue) {\n    this.withPropertyChangeHandler('recticleColor', newValue);\n  },\n\n  cameraTargetHandler: function cameraTargetHandler(newValue) {\n    this.withPropertyChangeHandler('cameraTarget', newValue);\n  },\n\n  cameraDistanceHandler: function cameraDistanceHandler(newValue) {\n    this.withPropertyChangeHandler('cameraDistance', newValue);\n  },\n\n  cameraRotationHandler: function cameraRotationHandler(newValue) {\n    this.withPropertyChangeHandler('cameraRotation', newValue);\n  },\n\n  cameraViewHandler: function cameraViewHandler(newValue) {\n    this.withPropertyChangeHandler('cameraView', newValue);\n  },\n\n  lassoInitiatorHandler: function lassoInitiatorHandler(newValue) {\n    this.withPropertyChangeHandler('lassoInitiator', newValue);\n  },\n\n  mouseModeHandler: function mouseModeHandler(newValue) {\n    this.withPropertyChangeHandler('mouseMode', newValue);\n  },\n\n  otherOptionsHandler: function otherOptionsHandler(newOptions) {\n    this.scatterplot.draw(newOptions);\n  },\n\n  viewResetHandler: function viewResetHandler() {\n    this.scatterplot.reset();\n    setTimeout(() => {\n      this.model.set('view_reset', false);\n      this.model.save_changes();\n    }, 0);\n  },\n\n  resizeHandler: function resizeHandler() {\n    this.width = Math.max(MIN_WIDTH, this.el.getBoundingClientRect().width);\n    this.container.style.height = this.height + 'px';\n    this.scatterplot.set({\n      width: this.width,\n      height: this.height\n    });\n  },\n\n  withPropertyChangeHandler: function withPropertyChangeHandler(property, changedValue) {\n    var properties = {};\n    properties[property] = changedValue;\n    this.scatterplot.set(properties);\n  },\n\n  withModelChangeHandler: function withModelChangeHandler(property, handler) {\n    var self = this;\n\n    return function modelChangeHandler() {\n      var changes = self.model.changedAttributes();\n      var pyPropertyName = camelToSnake(property);\n\n      if (\n        changes[pyPropertyName] === undefined ||\n        self[property + 'Changed'] === true\n      ) {\n        self[property + 'Changed'] = false;\n        return;\n      };\n\n      self[property] = changes[camelToSnake(property)];\n\n      if (handler) handler(self[property]);\n    }\n  }\n});\n\nmodule.exports = {\n  JupyterScatterModel: JupyterScatterModel,\n  JupyterScatterView: JupyterScatterView\n};\n"],"sourceRoot":""}