# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import catheter_path_service_pb2 as catheter__path__service__pb2


class CatheterPathServiceStub(object):
    """
    Service for interacting with catheter paths
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/dopltechnologies.protos.CatheterPathService/Create',
                request_serializer=catheter__path__service__pb2.CreateCatheterPathRequest.SerializeToString,
                response_deserializer=catheter__path__service__pb2.CreateCatheterPathResponse.FromString,
                )
        self.Get = channel.unary_unary(
                '/dopltechnologies.protos.CatheterPathService/Get',
                request_serializer=catheter__path__service__pb2.GetCatheterPathRequest.SerializeToString,
                response_deserializer=catheter__path__service__pb2.GetCatheterPathResponse.FromString,
                )
        self.GetCoordinates = channel.unary_stream(
                '/dopltechnologies.protos.CatheterPathService/GetCoordinates',
                request_serializer=catheter__path__service__pb2.GetCoordinatesCatheterPathRequest.SerializeToString,
                response_deserializer=catheter__path__service__pb2.GetCoordinatesCatheterPathResponse.FromString,
                )
        self.List = channel.unary_stream(
                '/dopltechnologies.protos.CatheterPathService/List',
                request_serializer=catheter__path__service__pb2.ListCatheterPathsRequest.SerializeToString,
                response_deserializer=catheter__path__service__pb2.ListCatheterPathsResponse.FromString,
                )


class CatheterPathServiceServicer(object):
    """
    Service for interacting with catheter paths
    """

    def Create(self, request, context):
        """Create a catheter path
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Gets a catheter path
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCoordinates(self, request, context):
        """Gets a catheter path coordinates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """Lists catheter paths
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CatheterPathServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=catheter__path__service__pb2.CreateCatheterPathRequest.FromString,
                    response_serializer=catheter__path__service__pb2.CreateCatheterPathResponse.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=catheter__path__service__pb2.GetCatheterPathRequest.FromString,
                    response_serializer=catheter__path__service__pb2.GetCatheterPathResponse.SerializeToString,
            ),
            'GetCoordinates': grpc.unary_stream_rpc_method_handler(
                    servicer.GetCoordinates,
                    request_deserializer=catheter__path__service__pb2.GetCoordinatesCatheterPathRequest.FromString,
                    response_serializer=catheter__path__service__pb2.GetCoordinatesCatheterPathResponse.SerializeToString,
            ),
            'List': grpc.unary_stream_rpc_method_handler(
                    servicer.List,
                    request_deserializer=catheter__path__service__pb2.ListCatheterPathsRequest.FromString,
                    response_serializer=catheter__path__service__pb2.ListCatheterPathsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dopltechnologies.protos.CatheterPathService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CatheterPathService(object):
    """
    Service for interacting with catheter paths
    """

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dopltechnologies.protos.CatheterPathService/Create',
            catheter__path__service__pb2.CreateCatheterPathRequest.SerializeToString,
            catheter__path__service__pb2.CreateCatheterPathResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dopltechnologies.protos.CatheterPathService/Get',
            catheter__path__service__pb2.GetCatheterPathRequest.SerializeToString,
            catheter__path__service__pb2.GetCatheterPathResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCoordinates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/dopltechnologies.protos.CatheterPathService/GetCoordinates',
            catheter__path__service__pb2.GetCoordinatesCatheterPathRequest.SerializeToString,
            catheter__path__service__pb2.GetCoordinatesCatheterPathResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/dopltechnologies.protos.CatheterPathService/List',
            catheter__path__service__pb2.ListCatheterPathsRequest.SerializeToString,
            catheter__path__service__pb2.ListCatheterPathsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
