{%include "header.tpl"%}

from pixiedust.display.chart.renderers import PixiedustRenderer
from .rendererBaseDisplay import {{this.rendererClassName}}BaseDisplay
from pixiedust.utils import Logger
import matplotlib.pyplot as plt
import base64
try:
    from io import BytesIO as pngIO
except ImportError:
    from StringIO import StringIO as pngIO

@PixiedustRenderer(id="{{this.chartId}}")
@Logger()
class {{this.rendererClassName}}{{this.chartId}}Display({{this.rendererClassName}}BaseDisplay):

    """
        Last validation before rendering:
        Return tuple (True|False, "error message")
    """
    def canRenderChart(self):
        return super({{this.rendererClassName}}{{this.chartId}}Display, self).canRenderChart()
        keyFields = self.getKeyFields()
    
    """
        Main rendering method
    """
    def doRenderChart(self):
        #get the working Pandas Data Frame generated from user selections
        df = self.getWorkingPandasDataFrame()

        #get the key Fields selected by user
        keyFields = self.getKeyFields()
        
        #get Value Fields selected by user
        valueFields = self.getValueFields()

        """
        the code below is plotting the working pandas data frame using matplotlib
        TODO: Replace with your code here
        """
        fig = None
        try:
            #create a figure with a size optimized for client display
            fig, ax = plt.subplots(
                figsize=( int(self.getPreferredOutputWidth()/self.getDPI()), int(self.getPreferredOutputHeight() / self.getDPI()) )
            )

            #do the actual rendering
            df.plot(kind="{{this.plotKind}}", ax=ax)

            #Render the figure by returning the html markup
            png=pngIO()
            plt.savefig(png, pad_inches=0.05, bbox_inches='tight', dpi=self.getDPI())

            #Note: class="pd_save" tells pixiedust that it's ok to save the figure image in the notebook
            try:
                return """<center><img src="data:image/png;base64,{0}" class="pd_save"></center>""".format(
                    base64.b64encode(png.getvalue()).decode("ascii")
                )
            finally:
                png.close()
        finally:
            plt.close(fig)
