# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['benchling_sdk',
 'benchling_sdk.helpers',
 'benchling_sdk.services',
 'benchling_sdk.services.inventory',
 'benchling_sdk.services.schema']

package_data = \
{'': ['*']}

install_requires = \
['backoff>=1.10.0,<2.0.0',
 'benchling-api-client>=0.10.8-alpha.0,<0.11.0',
 'typing-extensions>=3.7.4,<4.0.0']

setup_kwargs = {
    'name': 'benchling-sdk',
    'version': '0.5.0a0',
    'description': 'SDK for interacting with the Benchling Platform. Currently unsupported for production use.',
    'long_description': '# Benchling SDK\n\nA Python 3.7+ SDK for the [Benchling](https://www.benchling.com/) platform designed to provide typed, fluent\ninteractions with [Benchling APIs](https://docs.benchling.com/reference).\n\n*Important!* This is an unsupported pre-release not suitable for production use.\n\n## Getting Started\n\n### Installation\n\nInstall the dependency via [Poetry](https://python-poetry.org/) (if applicable):\n\n```bash\npoetry add benchling-sdk\n```\n \nOr [Pip](https://pypi.org/project/pip/):\n \n```bash\npip install benchling-sdk\n```\n\n### Using the SDK\n\nObtain a valid API key from your Benchling account and provide it to the SDK, along with the URL for the server.\nExample:\n\n```python\nfrom benchling_sdk.benchling import Benchling\nbenchling = Benchling(url="https://my.benchling.com", api_key="api_key")\n```\n\nWith `Benchling` now instantiated, make a sample call to get a custom entity with the ID `"custom_id"`.\n\n```python\nentity = benchling.custom_entities.get_by_id(entity_id="custom_id")\n```\n\nAPI calls made by the SDK are synchronous and blocking.\n\n### Generators and nextToken\n\nPaginated API endpoints listing objects and supporting the `nextToken` parameter will produce a `PageIterator`, which\nis a [Python generator](https://wiki.python.org/moin/Generators). Example:\n\n```python\nrequests_generator = benchling.requests.list(schema_id="assaych_test")\nnext_request = next(requests_generator)\n```\n\nIn this example, `requests_generator` is a generator. Each iteration will return a `List` of `Request`s, not an \nindividual `Request`.\n\nThe `PageIterator` object has an `estimated_count()` which will return the value of the `Result-Count` header from\nthe API, if applicable for the endpoint. Note that you MUST consume the generator at least once or `estimated_count()`\nwill return `None`.\n\n### Working with Benchling Fields\n\nMany objects in Benchling have the concept of `fields`. They are represented in the SDK via the \n`benchling_api_client.models.fields.Fields` class.\n\nTo conveniently construct `Fields` from a dictionary, we have provided a `fields` method \nin the `serialization_helper` module:\n\n```python\nfrom benchling_sdk.helpers.serialization_helpers import fields\nfrom benchling_api_client.models.custom_entity import CustomEntity\n\nentity = CustomEntity(\n    name="My Entity",\n    fields=fields({\n    "a_field": {"value": "First value"},\n    "second_field": {"value": "Second value"},\n    })\n)\n```\n\n### Unset\n\nThe Benchling SDK uses the type `benchling_api_client.types.Unset` and the constant value \n`benchling_api_client.types.UNSET` to represent values that were not present in an interaction with the API. This is to\ndistinguish from values that were explicitly set to `None` from those that were simply unspecified.\n\nA common example might be updating only specific properties of an object:\n\n```python\nfrom benchling_api_client.models.custom_entity_update import CustomEntityUpdate\n\nupdate = CustomEntityUpdate(name="New name")\n\nupdated_entity = benchling.custom_entities.update(\n    entity_id="entity_id", entity=update\n)\n```\n\nAll other properties of `CustomEntityUpdate` besides `name` will default to `UNSET` and not be sent with the update. Setting any\noptional property to `None` will send a `null` JSON value. In general, you should not need to set `UNSET` directly.\n\nWhen receiving objects from the API, some of their fields may be `Unset`. To treat `UNSET` values equivalent to \n`Optional[T]`, you can use the convenience function `unset_as_none()`:\n\n```python\nfrom benchling_sdk.helpers.serialization_helpers import unset_as_none\n\nsample_value: Union[Unset, None, int] = UNSET\n\noptional_value = unset_as_none(sample_value)\n# optional_value will be None\n```\n\n### Error Handling\n\nFailed API interactions will generally return a `BenchlingError`, which will contain some underlying\ninformation on the HTTP response such as the status. Example:\n\n```python\nfrom benchling_sdk.errors import BenchlingError\n\ntry:\n    requests = benchling.requests.get_by_id("requst_id")\nexcept BenchlingError as error:\n    print(error.status_code)\n```\n\nIf an HTTP error code is not returned to the SDK or deserialization fails, an unbounded `Exception` \ncould be raised instead.\n\n### Advanced Use Cases\n\nBy default, the Benchling SDK is designed to be opinionated towards most common usage. There is some more \nadvanced configuration available for use cases which require it.\n\n### Retries\n\nThe SDK will automatically retry certain HTTP calls when the calls fail and certain conditions are met.\n\nThe default strategy is to retry calls failing with HTTP status codes `429`, `502`, `503`, and `504`. The rationale for\nthese status codes being retried is that many times they are indicative of a temporary network failure or exceeding the\nrate limit and may be successful upon retry.\n\nRetries will be attempted up to 5 times, with an exponential time delay backoff between calls.\n\nTo disable retries, specify `None` for `retry_strategy` when constructing `Benchling`:\n\n```python\nbenchling = Benchling(url="https://my.benchling.com", api_key="api_key", retry_strategy=None)\n```\n\nAlternatively, instantiate your own `benchling_sdk.retry_helpers.RetryStrategy` to further customize retry behavior.\n\n### BenchlingApiClient Customization (e.g., HTTP Timeout Settings)\n\nWhile the SDK abstracts most of the HTTP transport layer, access can still be granted via the `BenchlingApiClient`. A\ncommon use case might be extending HTTP timeouts for all calls.\n\nThis can be achieved by specifying a function which accepts a default configured instance of `BenchlingApiClient` and\nreturns a mutated instance with the desired changes.\n\nFor example, to set the HTTP timeout to 180 seconds:\n\n```python\nfrom benchling_api_client.benchling_client import BenchlingApiClient\n\ndef higher_timeout_client(client: BenchlingApiClient) -> BenchlingApiClient:\n    return client.with_timeout(180)\n\n\nbenchling = Benchling(\n    url="https://my.benchling.com",\n    api_key="api_key",\n    client_decorator=higher_timeout_client,\n)\n```\n\nTo fully customize the `BenchlingApiClient` and ignore default settings, construct your own instance in lieu of \nmodifying the `client` argument.\n\n#### Changing the Base URL\n\nWhen instantiating `Benchling`, the path `/api/v2` will automatically be appended to the server information provided.\n\nFor example, if creating `Benchling` like this:\n\n```python\nbenchling = Benchling(url="https://my.benchling.com", api_key="api_key")\n```\n\nAPI calls will be made to `https://my.benchling.com/api/v2`.\n\nTo specify, an alternative path, set the `base_path` when creating `Benchling`:\n\n```python\nbenchling = Benchling(url="https://my.benchling.com", api_key="api_key", base_path="/api/custom")\n```\n\nIn this case, API calls will be made to `https://my.benchling.com/api/custom`.',
    'author': 'Benchling Customer Engineering',
    'author_email': 'ce-team@benchling.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': None,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
