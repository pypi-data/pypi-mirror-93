{% extends "frame.html.jinja2" %}
{% block title %}{{ module.modulename }} API documentation{% endblock %}
{% block style %}
    {% filter minify_css %}
        {{ super() }}
        <style type="text/css">/*! pygments */{{ pygments_css }}</style>
        <style type="text/css">/*! pdoc */

        /* General Styles */
        html, main {
            scroll-behavior: smooth;
        }

        h1, h2, h3, h4 {
            font-weight: 300;
            margin: .3em 0;
            padding: .2em 0;
        }

        a {
            text-decoration: none;
            color: #3660a5;
        }

        code {
            color: #24292e;
            padding: .2em .4em;
            margin: 0;
            font-size: 85%;
            background-color: rgba(27, 31, 35, 0.05);
            border-radius: 6px;
        }

        pre code {
            display: inline-block;
            background: none;
            padding: 0;
        }

        blockquote {
            margin-left: 2rem;
        }

        .button {
            display: inline-block;
            border: solid black 1px;
            border-radius: 2px;
            font-size: .75rem;
            padding: calc(0.5em - 1px) 1em;
            transition: 100ms all;
        }

        /* Responsive Layout */
        html, body {
            width: 100%;
            height: 100%;
        }

        @media (max-width: 769px) {
            label[for=navtoggle] {
                cursor: pointer;
                position: absolute;
                width: 50px;
                height: 40px;
                top: 1rem;
                right: 1rem;
                color: rgba(0, 0, 0, .55);
                border-color: rgba(0, 0, 0, .1);
                background-repeat: no-repeat;
                background-position: center center;
                background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%280, 0, 0, 0.55%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e");
            }

            main {
                padding: 2rem 3vw;
            }

            label[for=navtoggle]:hover {
                border-color: rgba(0, 0, 0, .5);
            }

            #navtoggle + div {
                display: none;
            }

            #navtoggle:checked + div {
                display: inherit;
            }

            .git-button {
                display: none !important;
            }
        }

        @media (min-width: 770px) {
            :root {
                --sidebar-width: clamp(12.5rem, 28vw, 22rem);
            }

            nav {
                position: fixed;
                overflow: auto;
                height: 100vh;
                width: var(--sidebar-width);
            }

            main {
                padding: 3rem 2rem 3rem calc(var(--sidebar-width) + 3rem);
                width: calc(54rem + var(--sidebar-width));
                max-width: 100%;
            }

            label[for=navtoggle] {
                display: none;
            }
        }

        #navtoggle {
            display: none;
        }

        /* Nav */
        nav {
            --pad: 1.75rem;
            --indent: 1.5rem;
            background-color: #eee;
            border-right: 1px solid #c1c1c1;
            box-shadow: 0 0 20px rgba(50, 50, 50, .2) inset;
            padding: 0 0 0 var(--pad);
            overflow-wrap: anywhere;
        }

        nav > div {
            padding: var(--pad) 0;
        }

        nav::-webkit-scrollbar {
            width: 10px;
        }

        nav {
            scrollbar-width: thin;
        }

        nav::-webkit-scrollbar-thumb {
            background-color: #c1c1c1;
        }

        .module-list-button {
            background-image: url("data:image/svg+xml,{% filter urlencode %}{% include "box-arrow-in-left.svg" %}{% endfilter %}");
            background-position: 1em center;
            background-repeat: no-repeat;
            color: #333;
            border-color: #999;
            padding-left: calc(1em + 18px);
            margin-bottom: 1rem;
        }

        .module-list-button:hover {
            border-color: black;
        }

        nav ul {
            list-style: none;
            padding-left: 0;
        }

        nav li {
            display: block;
            margin: 0;
            padding: .2rem 0 .2rem var(--indent);
            transition: all 100ms;
        }

        nav > div > ul > li {
            padding-left: 0;
        }

        nav li:hover {
            background-color: rgba(255, 255, 255, 0.5);
        }

        nav a {
            color: #333;
            display: block;
        }

        nav .class:before, .inherited .class:before {
            content: "class ";
            color: gray;
        }

        nav > h2:first-of-type {
            margin-top: 1.5rem;
        }

        nav .function:after, .inherited .function a:after {
            content: "()";
            color: gray;
        }

        /* Content */
        main {
            overflow-x: hidden;
        }

        main > section:first-of-type .docstring {
            margin-bottom: 3rem;
        }

        .git-button {
            float: right;
            border: solid #3273dc 1px;
        }

        .git-button:hover {
            background-color: #3273dc;
            color: white;
        }

        .modulename {
            margin-top: 0;
            font-weight: bold;
        }

        .modulename a {
            color: #3660a5;
            transition: 100ms all;
        }

        .modulename a:hover {
            color: #1659c5;
        }

        details {
            --shift: -40px;
            text-align: right;
            margin-top: var(--shift);
            margin-bottom: calc(0px - var(--shift));
            clear: both;
        }

        details:not([open]) {
            height: 0;
            overflow: visible;
        }

        summary.button {
            color: #666;
            border-width: 0;
            padding: 0 .7em;
            display: inline-block;
            user-select: none;
        }

        summary:focus {
            outline: 0;
        }

        details > div {
            margin-top: calc(0px - var(--shift) / 2);
            text-align: left;
        }

        pre {
            background-color: #f7f7f7;
            border-top: 1px solid #ccc;
            border-bottom: 1px solid #ccc;
            margin-bottom: .5em;
            padding: .5rem 0 .5rem .5rem;
        }

        pre > code {
            padding: 0;
            background: none;
        }

        .docstring pre {
            margin-left: 1em;
            margin-right: 1em;
        }

        .docstring {
            margin-bottom: 1.5rem;
        }

        h1:target, h2:target, h3:target, h4:target, h5:target, h6:target {
            background-color: #fff7a8;
            box-shadow: -1rem 0 0 0 #fff7a8;
        }

        div:target > .attr, section:target > .attr {
            background-color: #fff598;
        }

        .attr:hover {
            background-color: #dadada;
        }

        .attr {
            color: black;
            margin: 1rem 0 .5rem;
            /*
            lots of padding on the right to accomodate view source button.
            This is not ideal, but probably good enough for now.
            */
            padding: .4rem 5rem .4rem 1rem;
            background-color: #eee;
        }

        .classattr, .inherited {
            margin-left: 2rem;
        }

        .name {
            color: #0066BB;
            font-weight: bold;
        }

        .def {
            color: #008800;
            font-weight: bold;
        }

        .function .signature {
            white-space: pre-wrap;
        }

        .annotation {
            color: #007020;
        }

        dt, dd {
            display: inline;
        }

        dd:not(:last-child):after {
            content: ", ";
        }

        .int, .nonetype {
            color: #666;
        }

        .str {
            color: #BA2121;
        }

        /* pdoc logo */
        .logo {
            margin-top: 2rem;
            display: block;
            opacity: 0.5;
            transition: all 200ms;
            filter: grayscale(100%);
        }

        .logo:hover {
            opacity: 1;
            filter: grayscale(0%);
        }

        .logo svg {
            margin-left: 5px;
            height: 35px;
            width: 70px;
            transition: all 200ms;
        }
        </style>
    {% endfilter %}
{% endblock %}
{% if not bases %}
    {% macro bases(cls) %}
        {%- if cls.bases -%}
            (
            {%- for base in cls.bases -%}
                <span class="base">{{ base | link }}</span>
                {%- if loop.nextitem %}, {% endif %}
            {%- endfor -%}
            )
        {%- endif -%}
    {% endmacro %}
{% endif %}
{% if not default_value %}
    {% macro default_value(var) -%}
        {%- if var.default_value_str -%}
            <span class="default_value">{{ var.default_value_str | escape | linkify }}</span>
        {%- endif -%}
    {% endmacro %}
{% endif %}
{% if not annotation %}
    {% macro annotation(var) %}
        {%- if var.annotation_str -%}
            <span class="annotation">{{ var.annotation_str | escape | linkify }}</span>
        {%- endif -%}
    {% endmacro %}
{% endif %}
{% if not decorators %}
    {% macro decorators(doc) %}
        {% for d in doc.decorators %}
            <div class="decorator">{{ d }}</div>
        {% endfor %}
    {% endmacro %}
{% endif %}
{% if not function %}
{# fmt: off #}
    {% macro function(fn) %}
        {%- set sig -%}
            <span class="signature">{{ fn.signature | escape | linkify }}</span>
        {%- endset -%}
        <div class="attr function">
            {{ decorators(fn) }}
            {% if fn.name == "__init__" %}
                <span class="name">{{ ".".join(fn.qualname.split(".")[:-1]) }}</span>
                {{- sig | replace("(self)","()") | replace("(self, ","(") -}}
            {% else %}
                <span class="def">{{ fn.funcdef }}</span>
                <span class="name">{{ fn.name }}</span>{{ sig }}:
            {% endif %}
        </div>
    {% endmacro %}
{# fmt: on #}
{% endif %}
{% if not variable %}
    {% macro variable(var) %}
        <div class="attr variable">
            <span class="name">{{ var.name }}</span>{{ annotation(var) }}{{ default_value(var) }}
        </div>
    {% endmacro %}
{% endif %}
{% if not submodule %}
    {% macro submodule(mod) %}
        <div class="attr module"><span class="name">{{ (mod.modulename, "") | link }}</span></div>
    {% endmacro %}
{% endif %}
{% if not class %}
    {% macro class(cls) %}
        <div class="attr class">
            {{ decorators(cls) }}
            <span class="def">class</span>
            <span class="name">{{ cls.qualname }}</span>
            {{- bases(cls) -}}:
        </div>
    {% endmacro %}
{% endif %}
{% if not member %}
    {% macro member(doc) %}
        {% if doc.type == "class" %}
            {{ class(doc) }}
        {% elif doc.type == "function" %}
            {{ function(doc) }}
        {% elif doc.type == "module" %}
            {{ submodule(doc) }}
        {% else %}
            {{ variable(doc) }}
        {% endif %}
        {% if doc.type != "variable" %}
            {{ view_source(doc) }}
        {% endif %}
        {{ docstring(doc) }}
    {% endmacro %}
{% endif %}
{% if not docstring %}
    {% macro docstring(var) %}
        {% if var.docstring %}
            <div class="docstring">{{ var.docstring | render_docstring | linkify }}</div>
        {% endif %}
    {% endmacro %}
{% endif %}
{% if not nav_members %}
    {% macro nav_members(members) %}
        <ul class="memberlist">
            {% for m in members if is_public(m) | trim %}
                <li>
                    {% if m.type == "class" %}
                        <a class="{{ m.type }}" href="#{{ m.qualname }}">{{ m.qualname }}</a>
                        {% if m.own_members %}
                            {{ nav_members(m.own_members) | indent(12) }}
                        {% endif %}
                    {% elif m.type == "module" %}
                        <a class="{{ m.type }}" href="#{{ m.name }}">{{ m.name }}</a>
                    {% elif m.name == "__init__" %}
                        <a class="{{ m.type }}" href="#{{ m.qualname }}">{{ m.qualname.split(".")[-2] }}</a>
                    {% else %}
                        <a class="{{ m.type }}" href="#{{ m.qualname }}">{{ m.name }}</a>
                    {% endif %}
                </li>
            {% endfor %}
        </ul>
    {% endmacro %}
{% endif %}
{% macro default_is_public(doc) %}
    {# the default implementation for is_public, extracted so that it can be called from an is_public override #}
    {% if not doc.name.startswith("_") %}
        {# members not starting with an underscore are considered public by default #}
        true
    {% elif doc.name == "__init__" %}
        {# the constructor is our special case which we also treat as public #}
        true
    {% elif doc.qualname == doc.name and doc.name is in(module.obj.__all__) %}
        {# members starting with an underscore are still public if mentioned in __all__ #}
        true
    {% endif %}
{% endmacro %}
{% if not is_public %}
    {#
    This macro is a bit unconventional in that its output is not rendered, but treated as a boolean:
    Returning no text is interpreted as false, returning any other text is iterpreted as true.
    Implementing this as a macro makes it very easy to override with a custom template..
    #}
    {% macro is_public(doc) %}
        {{ default_is_public(doc) }}
    {% endmacro %}
{% endif %}
{% if not inherited %}
{# fmt: off #}
    {% macro inherited(cls) %}
        {% for base, members in cls.inherited_members.items() %}
            {% set member_html %}
                {% for m in members if is_public(m) | trim %}
                    <dd class="{{ m.type }}">
                        {{- m.taken_from | link(text=m.name.replace("__init__",base[1])) -}}
                    </dd>
                {% endfor %}
            {% endset %}
            {# we may not have any public members, in which case we don't want to print anything. #}
            {% if member_html %}
                <div><dt>{{ base | link }}</dt>
                    {{ member_html }}
                </div>
            {% endif %}
        {% endfor %}
    {% endmacro %}
{# fmt: on #}
{% endif %}
{% if not view_source %}
    {% macro view_source(doc) %}
        {% if doc.source %}
            <details>
                <summary class="button">View Source</summary>
                {{ doc.source | highlight }}
            </details>
        {% endif %}
    {% endmacro %}
{% endif %}
{% block body %}
    {% block nav %}
        <nav>
            <label for="navtoggle" class="button"></label>
            <input id="navtoggle" type="checkbox">
            <div>
                {% block nav_title %}{% endblock %}
                {% block module_list_link scoped %}
                    {% set parentmodule = ".".join(module.modulename.split(".")[:-1]) %}
                    {% if parentmodule and parentmodule in all_modules %}
                        <a class="button module-list-button" href="../{{ parentmodule.split(".")[-1] }}.html">
                            {{- parentmodule -}}
                        </a>
                    {% elif all_modules|length > 1 %}
                        <a class="button module-list-button" href="./{{ "../" * module.modulename.count(".") }}">
                            Module Index
                        </a>
                    {% endif %}
                {% endblock %}

                {% set index = module.docstring | render_docstring | attr("toc_html") %}
                {% if index %}
                    <h2>Contents</h2>
                    {{ index | safe }}
                {% endif %}

                {% if module.submodules %}
                    <h2>Submodules</h2>
                    <ul>
                        {% for submodule in module.submodules %}
                            <li>{{ submodule.taken_from | link }}</li>
                        {% endfor %}
                    </ul>
                {% endif %}

                {% if module.members %}
                    <h2>API Documentation</h2>
                    {{ nav_members(module.members.values()) }}
                {% endif %}

                {% block attribution %}
                    <a class="logo" title="pdoc: Python API documentation generator" href="https://pdoc.dev">
                        built with {% include 'logo.svg' %}
                    </a>
                {% endblock %}
            </div>
        </nav>
    {% endblock %}
    <main>
        {% block module_info %}
            <section>
                {% block edit_button %}
                    {% if edit_url %}
                        <a class="button git-button" href="{{ edit_url }}">Edit on GitHub</a>
                    {% endif %}
                {% endblock %}
                <h1 class="modulename">
                    {% set parts = module.modulename.split(".") %}
                    {% for part in parts %}
                        {%- set fullname = ".".join(parts[:loop.index]) -%}
                        {%- if fullname in all_modules and fullname != module.modulename -%}
                            <a href="./{{ "../" * loop.revindex0 }}{{ part }}.html">{{ part }}</a>
                        {%- else -%}
                            {{ part }}
                        {%- endif -%}
                        {%- if loop.nextitem %}.{% endif -%}
                    {% endfor %}
                </h1>
                {{ docstring(module) }}
                {{ view_source(module) }}
            </section>
        {% endblock %}
        {% block module_contents %}
            {% for m in module.flattened_own_members if is_public(m) | trim %}
                <section id="{{ m.qualname or m.name }}">
                    {{ member(m) }}
                    {% if m.type == "class" %}
                        {% for m in m.own_members if m.type != "class" and is_public(m) | trim %}
                            <div id="{{ m.qualname }}" class="classattr">
                                {{ member(m) }}
                            </div>
                        {% endfor %}
                        {% set inherited_members = inherited(m) | trim %}
                        {% if inherited_members %}
                            <div class="inherited">
                                <h5>Inherited Members</h5>
                                <dl>
                                    {{ inherited_members }}
                                </dl>
                            </div>
                        {% endif %}
                    {% endif %}
                </section>
            {% endfor %}
        {% endblock %}
    </main>
    {% if mtime %}
        <script>
            /* Periodically check with the pdoc server if there have been any changes. */
            let mtime_generated = {{ mtime | tojson }},
                url = location.href.split("#")[0];
            url += (url.includes("?") ? "&" : "?") + "mtime=1";
            window.setInterval(function () {
                fetch(url)
                    .then(response => response.text())
                    .then(mtime => {
                        if (mtime_generated !== mtime)
                            location.reload();
                    });
            }, 1000);
        </script>
    {% endif %}
{% endblock %}
