import logging

log = logging.getLogger(__name__)

MAX_SHOTS = 1 << 32 - 1
MAX_COINS = 255


class IdManager(object):
    '''
    Designed to be plugged on the server side. Takes all messages passed in
    (usually generated by the validator and universe) and passes them on after
    assigning shot ids, player ids, etc.
    '''

    def __init__(self, world):
        super(IdManager, self).__init__()
        self.world = world
        self._usedPlayers = set()
        self._nextPlayer = 1
        self._usedShots = set()
        self._nextShot = 1
        self._usedCoins = set()
        self._nextCoin = 1
        world.onShotRemoved.addListener(self.shotRemoved)
        world.onCollectableCoinRemoved.addListener(self.collectableCoinRemoved)
        world.onPlayerRemoved.addListener(self.playerRemoved)

    def stop(self):
        self.world.onShotRemoved.removeListener(self.shotRemoved)
        self.world.onCollectableCoinRemoved.removeListener(
            self.collectableCoinRemoved)
        self.world.onPlayerRemoved.removeListener(self.playerRemoved)

    def newShotId(self):
        shotId = self._nextShot
        if len(self._usedShots) >= MAX_SHOTS:
            return  None    # Cannot create any more shots.
        while shotId in self._usedShots:
            shotId = shotId % MAX_SHOTS + 1
        self._usedShots.add(shotId)
        self._nextShot = shotId % MAX_SHOTS + 1
        return shotId

    def shotRemoved(self, shotId):
        self._usedShots.discard(shotId)

    def newCoinId(self):
        coinId = self._nextCoin
        if len(self._usedCoins) >= MAX_COINS:
            return None     # Cannot create any more coins.
        while coinId in self._usedCoins:
            coinId = coinId % MAX_COINS + 1
        self._usedCoins.add(coinId)
        self._nextCoin = coinId % MAX_COINS + 1
        return bytes([coinId])

    def collectableCoinRemoved(self, coinId):
        self._usedCoins.remove(ord(coinId))

    def newPlayerId(self):
        playerId = self._nextPlayer
        if len(self._usedPlayers) >= 255:
            # Cannot join: hard max on player ids.
            return None

        while playerId in self._usedPlayers:
            playerId = playerId % 255 + 1
        self._usedPlayers.add(playerId)
        self._nextPlayer = playerId % 255 + 1

        return bytes([playerId])

    def playerRemoved(self, player, playerId):
        self._usedPlayers.discard(ord(playerId))
