Using the API Bindings
======================

The Pureport REST API is documented using the OpenAPI specification version
3.0.  The Pureport Python implementation provides direct bindings for the
OpenAPI specification.  Using the API bindings provides native Python functions
that wrap around the REST implementation.

Making the bindings
-------------------

The `make_bindings()` function dynamically generates Python objects from the
Pureport OpenAPI specification retrieved from the Pureport API.  There
are three types of bindings that get generated.

First this module will generate a set of typed model classes based on the
OpenAPI schema retrieved from the Pureport API.  The model classes are only
generated once and are available from `pureport.models`.  To
create an instance of a model once the bindings have been generated,
simply import the module and create a class instance.

    .. code-block:: python

        >>> from pureport import session, credentials, models
        >>> s = session.Session(*credentials.default())
        >>> s.make_bindings()
        >>> models.Network('pureport')
        <pureport.models.Network object at 0x7f95cc4be730>


After the models have been generated, this module wil create function and
query bindings and attach them to the provided session instance.
Functions are generated based on the `operationId` in the Pureport
OpenAPI specification.

.. note::
    All values extracted from the Pureport OpenAPI specification
    have been converted from camel case to snake case.  For instance
    to use the `findNetworks` function, it would be invoked by
    issuing `find_networks`.

Once the bindings have been created, all functions are available from the
session instance.

    .. code-block:: python

        >>> s.find_all_accounts()
        [<pureport.models.Account object at 0x7f95cbf1e7c0>]


The `make_bindings()` method adds additional methods to the session
object that are generated by the query module.  These are convenience methods
generated for interfacing with the Pureport API.  Please see the
`pureport.query` module documentation for more details on what methods
are generated.

Mapping bindings to OpenAPI
---------------------------

Assume for we want to retrieve a list of all accounts for our give API key.
The OpenAPI specification shows the following:

    .. code-block:: json

        {
            "/accounts": {
                "get": {
                    "operationId": "findAllAccounts",
                    "responses": {
                        "default": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "items": {
                                            "$ref": "#/components/schemas/Account"
                                        },
                                        "type": "array"
                                    }
                                }
                            },
                            "description": "default response"
                        }
                    },
                    "summary": "List accounts",
                }
            }
        }

When the specification is loaded and the bindings are generated, the above can
be called directly by using a modified form of the `operationId`.  All
functions names are convered from camel case to snake case.

For instance, if you wanted to get a list of all accounts on the server, you
can using the API bindings as below.

    .. code-block:: python

        >>> from pureport import session, credentials, make_bindings, models
        >>> s = session.Session(*credentials.default(), automake_bindings=True)
        >>> s.find_all_accounts()
        [<pureport.models.Account object at 0x7f6d3604ed00>]


The return value from the bound function `find_all_accounts()` will return an
instance of a Model object. The next section will discuss models.

Automatically creating the bindings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

By default when you first create a `pureport.session.Session` instance the
bound functions and models are not present.  You can instruct the `Session`
instance to automatically create the bindings at creation time by passing the
`automake_bindings=True` keyword argument to the `Session` class.


Using models
------------

With the Python bindings, the request and response objects are passed using
models instead of native Python dictionary objects.  Each function that
requires input and/or returns output does so using the appropriate model.

Returning our our example above, the return object from `find_all_accounts()`
will convert the response JSON blob into a typed instance of
`pureport.models.Account`.

The model for the return object is based on the defined schema in the OpenAPI
specification (in this case `#/components/schemas/Account`).  Below is a look
at the schema definition from the OpenAPI specification.

    .. code-block:: json

        {
            "Account": {
                "description": "A Pureport Account",
                "properties": {
                    "demo": {
                        "description": "Whether this account is for demonstration purposes.",
                        "type": "boolean"
                    },
                    "description": {
                        "description": "The description.",
                        "maxLength": 256,
                        "minLength": 0,
                        "type": "string"
                    },
                    "hasChildren": {
                        "description": "Whether this account is a parent account for any other accounts.",
                        "readOnly": true,
                        "type": "boolean"
                    },
                    "href": {
                        "description": "The URI of the Pureport asset.",
                        "readOnly": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The id is a unique identifier representing the account.",
                        "example": "ac-9ntgDlC2sW6TISmceo-Xsg",
                        "maxLength": 64,
                        "minLength": 1,
                        "type": "string"
                    },
                    "name": {
                        "description": "The name.",
                        "maxLength": 64,
                        "minLength": 1,
                        "type": "string"
                    },
                    "parent": {
                        "$ref": "#/components/schemas/Link"
                    },
                    "pricingHidden": {
                        "description": "Whether pricing information is restricted on this account.",
                        "readOnly": true,
                        "type": "boolean"
                    },
                    "showChildAccountPricing": {
                        "description": "Whether to show pricing information to child accounts of this account.",
                        "type": "boolean"
                    },
                    "supportedConnectionGroups": {
                        "description": "A collection of asset links for which Supported Connection Groups this account has access to.",
                        "example": [
                            {
                                "href": "/supportedConnections/groups/default",
                                "id": "default"
                            },
                            {
                                "href": "/supportedConnections/groups/portConnections",
                                "id": "portConnections"
                            }
                        ],
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "tags": {
                        "additionalProperties": {
                            "description": "Key-value pairs to associate with the Pureport asset.",
                            "type": "string"
                        },
                        "description": "Key-value pairs to associate with the Pureport asset.",
                        "type": "object"
                    },
                    "technicalContactEmails": {
                        "description": "Email addresses of technical contacts for this account.",
                        "example": [
                            "admin@email.com"
                        ],
                        "items": {
                            "description": "Email addresses of technical contacts for this account.",
                            "example": "[\"admin@email.com\"]",
                            "type": "string"
                        },
                        "maxItems": 10,
                        "minItems": 0,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "verified": {
                        "description": "Whether this account has been verified by Pureport operations.",
                        "type": "boolean"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            }
        }


All properties of of the returned object are based on the schema.  So for
instance if we wanted to get the value for `name` we can simply reference the
object property.

    .. code-block:: python

        >>> s = session.Session(*credentials.default(), automake_bindings=True)
        >>> accounts = s.find_all_accounts()
        >>> print(accounts[0].name)
        'test account'


    .. note::

        You can dump the entire model instance to a native Python dictionary by
        calling the `serialize()` method.


Models objects are also used as input to functions.  Let's assume we want to
create a new virtual network.  Based on the OpenAPI specification, we will need
to call `add_network()` and pass both an `account_id` and a `Network` object.

The relevant OpenAPI specification is below.

    .. code-block:: json

        {
            "/accounts/{accountId}/networks": {
                "post": {
                    "operationId": "addNetwork",
                    "parameters": [
                        {
                            "in": "path",
                            "name": "accountId",
                            "required": true,
                            "schema": {
                                "type": "string"
                            }
                        }
                    ],
                    "requestBody": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Network"
                                }
                            }
                        }
                    },
                    "responses": {
                        "default": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "$ref": "#/components/schemas/Network"
                                    }
                                }
                            },
                            "description": "default response"
                        }
                    },
                    "summary": "Add new network",
                }
            }
        }


Translating the OpenAPI specification into a set of Python calls would look
like the example below.

    .. code-block:: python

        >>> from pureport import defaults
        >>> from pureport import models
        >>> models.make()
        >>> network = models.Network('demo network')
        >>> network
        <pureport.models.Network object at 0x7fc3933d0940>
        >>> s = session.Session(*credentials.default(), automake_bindings=True)
        >>> s.add_network(network)
        <pureport.models.Network object at 0x7fc393cb04f0>


Building only model bindings
----------------------------

Due to the relationship between functions and models, then `Session` functional
bindings are created, model bindings are also automatically generated.  You can
generate the model bindings only using the `pureport.models.make()` function.

    .. code-block:: python

        >>> from pureport import models
        >>> models.make()


When trying the above code block, the `make()` function will automatically
create a session object using the default credentials and build all of the
model bindings.

Introspecting with describe()
-----------------------------

The `describe()` function provides a way to introspect a model to generate
the entire model's schema.  It handles creating the full schema including any
parents as well as reference links.  The `describe()` function provides a quick
way to understand a model without having to comb thorugh the OpenAPI
specification.

For example, let's assume we want to review the `Network` model schema.

    .. code-block:: python

        >>> import json
        >>> from pureport import models
        >>> models.make()
        >>> schema = models.describe('Network'), indent=4, sort_keys=True)
        >>> print(json.dumps(schema))
        {
            "account": {
                "items": {
                    "href": {
                        "readonly": false,
                        "required": true,
                        "type": "string"
                    },
                    "id": {
                        "readonly": false,
                        "required": false,
                        "type": "string"
                    },
                    "title": {
                        "readonly": false,
                        "required": false,
                        "type": "string"
                    }
                },
                "readonly": false,
                "ref": "Link",
                "required": false,
                "type": "object"
            },
            "description": {
                "readonly": false,
                "required": false,
                "type": "string"
            },
            "href": {
                "readonly": true,
                "required": false,
                "type": "string"
            },
            "id": {
                "readonly": false,
                "required": false,
                "type": "string"
            },
            "name": {
                "readonly": false,
                "required": true,
                "type": "string"
            },
            "os_primary_controller_id": {
                "readonly": true,
                "required": false,
                "type": "string"
            },
            "os_private_network_id": {
                "readonly": true,
                "required": false,
                "type": "string"
            },
            "os_project_id": {
                "readonly": true,
                "required": false,
                "type": "string"
            },
            "os_secondary_controller_id": {
                "readonly": true,
                "required": false,
                "type": "string"
            },
            "primary_controller_external_id": {
                "readonly": true,
                "required": false,
                "type": "string"
            },
            "secondary_controller_external_id": {
                "readonly": true,
                "required": false,
                "type": "string"
            },
            "state": {
                "enum": [
                    "PENDING",
                    "PROVISIONING",
                    "PENDING_CONTROLLERS",
                    "DELETING_CONTROLLERS",
                    "PROVISIONING_CONTROLLERS",
                    "ACTIVE",
                    "DELETING",
                    "DELETED",
                    "ERROR"
                ],
                "readonly": false,
                "ref": "NetworkState",
                "required": false,
                "type": "string"
            },
            "tags": {
                "readonly": false,
                "required": false,
                "type": "object"
            },
            "test_network": {
                "readonly": false,
                "required": false,
                "type": "boolean"
            }
        }


The output above provides the entire schema for the `Network` model.  The
`describe()` function also provides some filters to allow you to return only
properties that are read/write and/or fields that are required.

For instance, let's assume we want to only see the fields of the `Network`
model that are read/write.  We can set the `readwrite` keyword argument to
True.

    .. code-block:: python

        >>> schema = models.describe('Network', readwrite=True)
        >>> print(json.dumps(schema, indent=4, sort_keys=True))
        {
            "account": {
                "items": {
                    "href": {
                    "readonly": false,
                    "required": true,
                    "type": "string"
                    },
                    "id": {
                    "readonly": false,
                    "required": false,
                    "type": "string"
                    },
                    "title": {
                    "readonly": false,
                    "required": false,
                    "type": "string"
                    }
                },
                "readonly": false,
                "ref": "Link",
                "required": false,
                "type": "object"
            },
            "description": {
                "readonly": false,
                "required": false,
                "type": "string"
            },
            "id": {
                "readonly": false,
                "required": false,
                "type": "string"
            },
            "name": {
                "readonly": false,
                "required": true,
                "type": "string"
            },
            "state": {
                "enum": [
                    "PENDING",
                    "PROVISIONING",
                    "PENDING_CONTROLLERS",
                    "DELETING_CONTROLLERS",
                    "PROVISIONING_CONTROLLERS",
                    "ACTIVE",
                    "DELETING",
                    "DELETED",
                    "ERROR"
                ],
                "readonly": false,
                "ref": "NetworkState",
                "required": false,
                "type": "string"
            },
            "tags": {
                "readonly": false,
                "required": false,
                "type": "object"
            },
            "test_network": {
                "readonly": false,
                "required": false,
                "type": "boolean"
            }
        }

We can also return just the required fields by setting the functions `required`
keyword argument to True.

    .. code-block:: python

        >>> schema = models.describe('Network', readwrite=True, required=True)
        >>> print(json.dumps(schema))
        {
            "name": {
                "readonly": false,
                "required": true,
                "type": "string"
            }
        }

The `describe()` function helps simply working with the Pureport models by
providing a convenient way to introspect model schema.
