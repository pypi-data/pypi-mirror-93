from typing import Dict, Optional, Union, List, Hashable, Any


def getsert(
    mapping: Dict[Hashable, Any], key: Hashable, default: Any = None
) -> Any:
    """Implements defaultdict.

    ``getsert`` is Get + Insert. In case the *key* does not exist
    in *data* it will be created using *default* as value.

    However, if *data* instance is not a subclass of Dict nothing
    happens and whatever is in *default* is returned.

    Also if *default* is None, then even if *data* is a valid Dict
    and *key* is not in *data*, nothing happens and None is returned.

    Args:
        data (Dict[Hashable, Any]): Dict container from which
            the value of ``key`` is requested.
        key (Hashable): Key which identifies requested value.
        default (Any): Value to insert into ``data`` if ``key``
            did not exist in ``data``. Or value to return if
            ``data`` is not a Dict subclass.

    Returns:
        Any: Value corresponding to the ``key`` in ``data`` or
        ``default`` value.

        Returns ``default`` if ``data`` is not a Dict.

        Returns None if ``key`` is not in ``data`` and
        ``default`` is None.

        Returns ``default`` if ``key`` is not in ``data`` but
        ``default`` is not None. Inserts ``default`` to ``data``
        under ``key`` before returning it.

    Raises:
        Nothing. This function is never supposed to raise anything.
    """

    if isinstance(mapping, Dict):

        if key not in mapping:

            # Do not insert default value into data if it's None.
            if default is None:
                return None
            dict.__setitem__(mapping, key, default)

        return dict.__getitem__(mapping, key)

    else:

        return default


def get(
    data: Union[Dict[Hashable, Any], List[Any]],
    address: Hashable,
    default: Any = None,
    sep: str = ".",
) -> Any:

    # If key is a string, then try to split it if it contains the separator
    head: Hashable = address
    tail: Optional[Hashable] = None

    if isinstance(address, str) and sep and sep in address:
        # "my.0.key"
        head, tail = address.split(sep, maxsplit=1)

    if isinstance(data, Dict):
        if address in data:
            return dict.__getitem__(data, address)

        v = getsert(data, head, default=default)

        if tail and isinstance(v, (Dict, List)):
            return get(v, tail, sep=sep, default=default)

        # Return whatever got generated by "getsert" otherwise
        return v

    if isinstance(data, List):
        idx: Optional[int] = None

        # If key is string
        if isinstance(head, str):
            try:
                idx = int(head)
            except ValueError:
                return None
        # isinstance check satisfies mypy and type check makes sure we don't accidentally
        # cast hashable boolean as an int.
        elif isinstance(head, int) and type(head) == int:
            idx = head
        else:
            return None

        if idx >= len(data) or idx < 0 and abs(idx) > len(data):
            return None

        if tail and isinstance(data[idx], (Dict, List)):
            return get(data[idx], tail, sep=sep, default=default)

        return data[idx]

    return default
