# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: protobuf/cluster/database.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='protobuf/cluster/database.proto',
  package='grakn.protocol.cluster',
  syntax='proto3',
  serialized_options=_b('\n\026grakn.protocol.clusterB\rDatabaseProto'),
  serialized_pb=_b('\n\x1fprotobuf/cluster/database.proto\x12\x16grakn.protocol.cluster\"\x89\x02\n\x08\x44\x61tabase\x1a\xfc\x01\n\x08\x44iscover\x1a!\n\x03Req\x12\x1a\n\x08\x64\x61tabase\x18\x01 \x01(\tR\x08\x64\x61tabase\x1a\xcc\x01\n\x03Res\x12Q\n\x08replicas\x18\x01 \x03(\x0b\x32\x35.grakn.protocol.cluster.Database.Discover.Res.ReplicaR\x08replicas\x1ar\n\x07Replica\x12\x18\n\x07\x61\x64\x64ress\x18\x01 \x01(\tR\x07\x61\x64\x64ress\x12\x1a\n\x08\x64\x61tabase\x18\x02 \x01(\tR\x08\x64\x61tabase\x12\x1d\n\nis_primary\x18\x03 \x01(\x08R\tisPrimary\x12\x12\n\x04term\x18\x04 \x01(\x03R\x04termB\'\n\x16grakn.protocol.clusterB\rDatabaseProtob\x06proto3')
)




_DATABASE_DISCOVER_REQ = _descriptor.Descriptor(
  name='Req',
  full_name='grakn.protocol.cluster.Database.Discover.Req',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='database', full_name='grakn.protocol.cluster.Database.Discover.Req.database', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, json_name='database', file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=85,
  serialized_end=118,
)

_DATABASE_DISCOVER_RES_REPLICA = _descriptor.Descriptor(
  name='Replica',
  full_name='grakn.protocol.cluster.Database.Discover.Res.Replica',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='address', full_name='grakn.protocol.cluster.Database.Discover.Res.Replica.address', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, json_name='address', file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='database', full_name='grakn.protocol.cluster.Database.Discover.Res.Replica.database', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, json_name='database', file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='is_primary', full_name='grakn.protocol.cluster.Database.Discover.Res.Replica.is_primary', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, json_name='isPrimary', file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='term', full_name='grakn.protocol.cluster.Database.Discover.Res.Replica.term', index=3,
      number=4, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, json_name='term', file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=211,
  serialized_end=325,
)

_DATABASE_DISCOVER_RES = _descriptor.Descriptor(
  name='Res',
  full_name='grakn.protocol.cluster.Database.Discover.Res',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='replicas', full_name='grakn.protocol.cluster.Database.Discover.Res.replicas', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, json_name='replicas', file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_DATABASE_DISCOVER_RES_REPLICA, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=121,
  serialized_end=325,
)

_DATABASE_DISCOVER = _descriptor.Descriptor(
  name='Discover',
  full_name='grakn.protocol.cluster.Database.Discover',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[_DATABASE_DISCOVER_REQ, _DATABASE_DISCOVER_RES, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=73,
  serialized_end=325,
)

_DATABASE = _descriptor.Descriptor(
  name='Database',
  full_name='grakn.protocol.cluster.Database',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[_DATABASE_DISCOVER, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=60,
  serialized_end=325,
)

_DATABASE_DISCOVER_REQ.containing_type = _DATABASE_DISCOVER
_DATABASE_DISCOVER_RES_REPLICA.containing_type = _DATABASE_DISCOVER_RES
_DATABASE_DISCOVER_RES.fields_by_name['replicas'].message_type = _DATABASE_DISCOVER_RES_REPLICA
_DATABASE_DISCOVER_RES.containing_type = _DATABASE_DISCOVER
_DATABASE_DISCOVER.containing_type = _DATABASE
DESCRIPTOR.message_types_by_name['Database'] = _DATABASE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Database = _reflection.GeneratedProtocolMessageType('Database', (_message.Message,), dict(

  Discover = _reflection.GeneratedProtocolMessageType('Discover', (_message.Message,), dict(

    Req = _reflection.GeneratedProtocolMessageType('Req', (_message.Message,), dict(
      DESCRIPTOR = _DATABASE_DISCOVER_REQ,
      __module__ = 'protobuf.cluster.database_pb2'
      # @@protoc_insertion_point(class_scope:grakn.protocol.cluster.Database.Discover.Req)
      ))
    ,

    Res = _reflection.GeneratedProtocolMessageType('Res', (_message.Message,), dict(

      Replica = _reflection.GeneratedProtocolMessageType('Replica', (_message.Message,), dict(
        DESCRIPTOR = _DATABASE_DISCOVER_RES_REPLICA,
        __module__ = 'protobuf.cluster.database_pb2'
        # @@protoc_insertion_point(class_scope:grakn.protocol.cluster.Database.Discover.Res.Replica)
        ))
      ,
      DESCRIPTOR = _DATABASE_DISCOVER_RES,
      __module__ = 'protobuf.cluster.database_pb2'
      # @@protoc_insertion_point(class_scope:grakn.protocol.cluster.Database.Discover.Res)
      ))
    ,
    DESCRIPTOR = _DATABASE_DISCOVER,
    __module__ = 'protobuf.cluster.database_pb2'
    # @@protoc_insertion_point(class_scope:grakn.protocol.cluster.Database.Discover)
    ))
  ,
  DESCRIPTOR = _DATABASE,
  __module__ = 'protobuf.cluster.database_pb2'
  # @@protoc_insertion_point(class_scope:grakn.protocol.cluster.Database)
  ))
_sym_db.RegisterMessage(Database)
_sym_db.RegisterMessage(Database.Discover)
_sym_db.RegisterMessage(Database.Discover.Req)
_sym_db.RegisterMessage(Database.Discover.Res)
_sym_db.RegisterMessage(Database.Discover.Res.Replica)


DESCRIPTOR._options = None
# @@protoc_insertion_point(module_scope)
