[tox]
envlist = py27,py37,pep8
minversion = 2.0
skipsdist = True

[testenv]
setenv = VIRTUAL_ENV={envdir}
         OS_LOG_CAPTURE={env:OS_LOG_CAPTURE:true}
         OS_STDOUT_CAPTURE={env:OS_STDOUT_CAPTURE:true}
         OS_STDERR_CAPTURE={env:OS_STDERR_CAPTURE:true}
         PYTHONWARNINGS=default::DeprecationWarning
passenv = TRACE_FAILONLY
usedevelop = True
install_command = pip install {opts} {packages}
deps = -c{env:UPPER_CONSTRAINTS_FILE:https://releases.openstack.org/constraints/upper/train}
       -r{toxinidir}/requirements.txt
       -r{toxinidir}/test-requirements.txt
whitelist_externals =
    sh
    find
commands =
  find . -type f -name "*.py[c|o]" -delete
  find -path "*/__pycache__*" -delete
  stestr run {posargs}
# there is also secret magic in ostestr which lets you run in a fail only
# mode. To do this define the TRACE_FAILONLY environmental variable.

[testenv:functional]
basepython = python3
setenv =
  {[testenv]setenv}
  OS_TEST_PATH=./networking_sfc/tests/functional

[testenv:functional-python27]
basepython = python2.7
setenv = {[testenv:functional]setenv}

[testenv:dsvm-functional]
basepython = python3
setenv =
    {[testenv]setenv}
    OS_TEST_PATH=./networking_sfc/tests/functional
    OS_SUDO_TESTING=1
    OS_FAIL_ON_MISSING_DEPS=1
    OS_TEST_TIMEOUT=180
    OS_TESTR_CONCURRENCY=1
    OS_LOG_PATH={env:OS_LOG_PATH:/opt/stack/logs}
whitelist_externals =
  sh
  cp
  sudo
commands = stestr run {posargs}

[testenv:dsvm-functional-python27]
basepython = python2.7
setenv = {[testenv:dsvm-functional]setenv}
commands = stestr run {posargs}

[testenv:pep8]
basepython = python3
commands =
  flake8
  pylint --rcfile=.pylintrc --output-format=colorized {posargs:networking_sfc}
  {toxinidir}/tools/check_unit_test_structure.sh
  neutron-db-manage --subproject networking-sfc --database-connection sqlite:// check_migration
  {[testenv:genconfig]commands}
  {[testenv:genpolicy]commands}
whitelist_externals = sh

[testenv:cover]
basepython = python3
setenv =
  PYTHON=coverage run --source networking_sfc --parallel-mode
commands =
  stestr run {posargs}
  coverage combine
  coverage html -d cover
  coverage xml -o cover/coverage.xml

[testenv:venv]
basepython = python3
commands = {posargs}

[testenv:docs]
basepython = python3
commands = python setup.py build_sphinx

[flake8]
# TODO(dougwig) -- uncomment this to test for remaining linkages
# N530 direct neutron imports not allowed
ignore = N530
# From neutron-lib flake8
# H904: Delay string interpolations at logging calls
enable-extensions=H904
show-source = true
builtins = _
exclude = ./.*,build,dist
import-order-style = pep8

[hacking]
import_exceptions = networking_sfc._i18n
local-check-factory = neutron_lib.hacking.checks.factory

[testenv:api-ref]
basepython = python3
whitelist_externals = rm
commands =
  rm -rf api-ref/build
  sphinx-build -W -b html -d api-ref/build/doctrees api-ref/source api-ref/build/html

[testenv:debug]
basepython = python3
commands = oslo_debug_helper -t networking_sfc/tests {posargs}

[testenv:releasenotes]
basepython = python3
commands = sphinx-build -a -E -W -d releasenotes/build/doctrees -b html releasenotes/source releasenotes/build/html

[testenv:genconfig]
basepython = python3
commands = oslo-config-generator --config-file etc/oslo-config-generator/networking-sfc.conf

[testenv:genpolicy]
basepython = python3
commands = oslopolicy-sample-generator --config-file=etc/oslo-policy-generator/policy.conf

[testenv:lower-constraints]
basepython = python3
deps =
  -c{toxinidir}/lower-constraints.txt
  -r{toxinidir}/test-requirements.txt
  -r{toxinidir}/requirements.txt

[testenv:dev]
# run locally (not in the gate) using editable mode
# https://pip.pypa.io/en/stable/reference/pip_install/#editable-installs
commands =
    pip install -q -e "git+https://opendev.org/openstack/neutron#egg=neutron"

[testenv:py3-dev]
basepython = python3
commands =
    {[testenv:dev]commands}
    {[testenv]commands}

[testenv:py27-dev]
basepython = python2.7
commands =
    {[testenv:dev]commands}
    {[testenv]commands}

[testenv:pep8-dev]
basepython = python3
deps =
    {[testenv]deps}
commands =
    {[testenv:dev]commands}
    {[testenv:pep8]commands}

# This environment can be used to quickly validate that all needed system
# packages required to successfully execute test targets are installed
[testenv:bindep]
basepython = python3
# Do not install any requirements. We want this to be fast and work even if
# system dependencies are missing, since it's used to tell you what system
# dependencies are missing! This also means that bindep must be installed
# separately, outside of the requirements files.
deps = bindep
commands = bindep test
