# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import files_pb2 as files__pb2


class FileWorkerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.healthCheck = channel.unary_unary(
                '/FileWorker/healthCheck',
                request_serializer=files__pb2.check_request.SerializeToString,
                response_deserializer=files__pb2.file_reply.FromString,
                )
        self.describeFile = channel.unary_unary(
                '/FileWorker/describeFile',
                request_serializer=files__pb2.describe_request.SerializeToString,
                response_deserializer=files__pb2.file_stream.FromString,
                )
        self.createFile = channel.unary_unary(
                '/FileWorker/createFile',
                request_serializer=files__pb2.create_request.SerializeToString,
                response_deserializer=files__pb2.file_reply.FromString,
                )
        self.modifyFile = channel.unary_unary(
                '/FileWorker/modifyFile',
                request_serializer=files__pb2.modify_request.SerializeToString,
                response_deserializer=files__pb2.file_reply.FromString,
                )
        self.copyFile = channel.unary_unary(
                '/FileWorker/copyFile',
                request_serializer=files__pb2.copy_request.SerializeToString,
                response_deserializer=files__pb2.file_reply.FromString,
                )
        self.moveFile = channel.unary_unary(
                '/FileWorker/moveFile',
                request_serializer=files__pb2.move_request.SerializeToString,
                response_deserializer=files__pb2.file_reply.FromString,
                )


class FileWorkerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def healthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def describeFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def modifyFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def copyFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def moveFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileWorkerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'healthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.healthCheck,
                    request_deserializer=files__pb2.check_request.FromString,
                    response_serializer=files__pb2.file_reply.SerializeToString,
            ),
            'describeFile': grpc.unary_unary_rpc_method_handler(
                    servicer.describeFile,
                    request_deserializer=files__pb2.describe_request.FromString,
                    response_serializer=files__pb2.file_stream.SerializeToString,
            ),
            'createFile': grpc.unary_unary_rpc_method_handler(
                    servicer.createFile,
                    request_deserializer=files__pb2.create_request.FromString,
                    response_serializer=files__pb2.file_reply.SerializeToString,
            ),
            'modifyFile': grpc.unary_unary_rpc_method_handler(
                    servicer.modifyFile,
                    request_deserializer=files__pb2.modify_request.FromString,
                    response_serializer=files__pb2.file_reply.SerializeToString,
            ),
            'copyFile': grpc.unary_unary_rpc_method_handler(
                    servicer.copyFile,
                    request_deserializer=files__pb2.copy_request.FromString,
                    response_serializer=files__pb2.file_reply.SerializeToString,
            ),
            'moveFile': grpc.unary_unary_rpc_method_handler(
                    servicer.moveFile,
                    request_deserializer=files__pb2.move_request.FromString,
                    response_serializer=files__pb2.file_reply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'FileWorker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FileWorker(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def healthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileWorker/healthCheck',
            files__pb2.check_request.SerializeToString,
            files__pb2.file_reply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def describeFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileWorker/describeFile',
            files__pb2.describe_request.SerializeToString,
            files__pb2.file_stream.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileWorker/createFile',
            files__pb2.create_request.SerializeToString,
            files__pb2.file_reply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def modifyFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileWorker/modifyFile',
            files__pb2.modify_request.SerializeToString,
            files__pb2.file_reply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def copyFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileWorker/copyFile',
            files__pb2.copy_request.SerializeToString,
            files__pb2.file_reply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def moveFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileWorker/moveFile',
            files__pb2.move_request.SerializeToString,
            files__pb2.file_reply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
