# # Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
# """Client and server classes corresponding to protobuf-defined services."""
# import grpc

# import jijcloud.api.solver_pb2 as solver__pb2


# class JijSolverStub(object):
#     """Interface exported by the server.
#     """

#     def __init__(self, channel):
#         """Constructor.

#         Args:
#             channel: A grpc.Channel.
#         """
#         self.submit_job = channel.unary_unary(
#                 '/jijsolver.JijSolver/submit_job',
#                 request_serializer=solver__pb2.ProblemInfo.SerializeToString,
#                 response_deserializer=solver__pb2.CachekeyResponse.FromString,
#                 )
#         self.fetch_result = channel.unary_unary(
#                 '/jijsolver.JijSolver/fetch_result',
#                 request_serializer=solver__pb2.Cachekey.SerializeToString,
#                 response_deserializer=solver__pb2.Result.FromString,
#                 )


# class JijSolverServicer(object):
#     """Interface exported by the server.
#     """

#     def submit_job(self, request, context):
#         """Asynchronous solver.
#         Obtains the cachekey after sending solver informations.
#         """
#         context.set_code(grpc.StatusCode.UNIMPLEMENTED)
#         context.set_details('Method not implemented!')
#         raise NotImplementedError('Method not implemented!')

#     def fetch_result(self, request, context):
#         """access redis database and fetch result.
#         """
#         context.set_code(grpc.StatusCode.UNIMPLEMENTED)
#         context.set_details('Method not implemented!')
#         raise NotImplementedError('Method not implemented!')


# def add_JijSolverServicer_to_server(servicer, server):
#     rpc_method_handlers = {
#             'submit_job': grpc.unary_unary_rpc_method_handler(
#                     servicer.submit_job,
#                     request_deserializer=solver__pb2.ProblemInfo.FromString,
#                     response_serializer=solver__pb2.CachekeyResponse.SerializeToString,
#             ),
#             'fetch_result': grpc.unary_unary_rpc_method_handler(
#                     servicer.fetch_result,
#                     request_deserializer=solver__pb2.Cachekey.FromString,
#                     response_serializer=solver__pb2.Result.SerializeToString,
#             ),
#     }
#     generic_handler = grpc.method_handlers_generic_handler(
#             'jijsolver.JijSolver', rpc_method_handlers)
#     server.add_generic_rpc_handlers((generic_handler,))


#  # This class is part of an EXPERIMENTAL API.
# class JijSolver(object):
#     """Interface exported by the server.
#     """

#     @staticmethod
#     def submit_job(request,
#             target,
#             options=(),
#             channel_credentials=None,
#             call_credentials=None,
#             compression=None,
#             wait_for_ready=None,
#             timeout=None,
#             metadata=None):
#         return grpc.experimental.unary_unary(request, target, '/jijsolver.JijSolver/submit_job',
#             solver__pb2.ProblemInfo.SerializeToString,
#             solver__pb2.CachekeyResponse.FromString,
#             options, channel_credentials,
#             call_credentials, compression, wait_for_ready, timeout, metadata)

#     @staticmethod
#     def fetch_result(request,
#             target,
#             options=(),
#             channel_credentials=None,
#             call_credentials=None,
#             compression=None,
#             wait_for_ready=None,
#             timeout=None,
#             metadata=None):
#         return grpc.experimental.unary_unary(request, target, '/jijsolver.JijSolver/fetch_result',
#             solver__pb2.Cachekey.SerializeToString,
#             solver__pb2.Result.FromString,
#             options, channel_credentials,
#             call_credentials, compression, wait_for_ready, timeout, metadata)
