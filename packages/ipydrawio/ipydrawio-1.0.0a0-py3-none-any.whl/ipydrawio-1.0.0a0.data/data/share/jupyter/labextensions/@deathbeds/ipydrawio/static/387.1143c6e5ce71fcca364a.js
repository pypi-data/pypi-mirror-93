(self.webpackChunk_deathbeds_ipydrawio=self.webpackChunk_deathbeds_ipydrawio||[]).push([[387],{317:(e,a,t)=>{"use strict";t.d(a,{Z:()=>o});var i=t(609),s=t.n(i)()((function(e){return e[1]}));s.push([e.id,".jp-IPyDiagram .jp-Diagram {\n  position: absolute;\n}\n",""]);const o=s},387:(e,a,t)=>{"use strict";t.r(a),t.d(a,{DiagramModel:()=>v,DiagramView:()=>w,XMLModel:()=>_,XMLView:()=>u});var i=t(361),s=t(797),o=t(81),r=t(706),l=t(703),n=t(649),d=t(36),g=t(402),h=t.n(g),c=t(317);h()(c.Z,{insert:"head",singleton:!1}),c.Z.locals;const p={gapi:0,gl:0,noExitBtn:1,noSaveBtn:1,od:0,stealth:1,tr:0,ui:"min",format:0,p:"ex;tips;svgdata;sql;anim;trees;replay;anon;flow;webcola;tags"},m={compressXml:!1,showStartScreen:!1,override:!0};class _ extends o.WidgetModel{defaults(){return Object.assign(Object.assign({},super.defaults()),{_model_name:_.model_name,_model_module:d.NS,_model_module_version:d.q4,_view_name:_.view_name,_view_module:d.NS,_view_module_version:d.q4,value:'<mxfile version="13.3.6">\n<diagram id="x" name="Page-1">\n    <mxGraphModel dx="1450" dy="467" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">\n    <root>\n        <mxCell id="0"/>\n        <mxCell id="1" parent="0"/>\n    </root>\n    </mxGraphModel>\n</diagram>\n</mxfile>\n'})}}_.model_name="XMLModel",_.model_module=d.NS,_.model_module_version=d.q4,_.view_name="XMLView",_.view_module=d.NS,_.view_module_version=d.q4;class u extends o.WidgetView{}class v extends r.$Q{defaults(){return Object.assign(Object.assign({},super.defaults()),{_model_name:v.model_name,_model_module:d.NS,_model_module_version:d.q4,_view_name:v.view_name,_view_module:d.NS,_view_module_version:d.q4,scroll_x:0,scroll_y:0,zoom:1,page_ids:[],selected_page:0,selected_cells:[],grid_enabled:!0,grid_color:"#66666666",grid_size:10,url_params:p,config:m,page_format:{x:0,y:0,width:850,height:1100}})}initialize(e,a){super.initialize(e,a)}}v.model_name="DiagramModel",v.model_module=d.NS,v.model_module_version=d.q4,v.view_name="DiagramView",v.view_module=d.NS,v.view_module_version=d.q4,v.serializers=Object.assign(Object.assign({},r.$Q.serializers),{source:{deserialize:o.unpack_models}});class w extends r.k8{constructor(){super(...arguments),this.onModelZoom=()=>{const{view:e}=this.app.editor.graph,a=this.model.get("zoom");e.getScale()!==a&&e.setScale(a)},this.onModelScroll=()=>{const{view:e}=this.app.editor.graph,a=this.model.get("scroll_x"),t=this.model.get("scroll_y"),i=e.getTranslate();i.x===a&&i.y===t||e.setTranslate(a,t)},this.onModelPageFormat=()=>{const e=this.model.get("page_format"),a=this.app.editor.graph.pageFormat;s.JSONExt.deepEqual(e,a)||(d.eM&&console.warn("pageFormat",e),this.app.setPageFormat(Object.assign({},e)))},this.onModelPageSelected=()=>{this.app.selectPage(this.app.pages[this.model.get("current_page")])},this.onModelGridEnabled=()=>{this.app.editor.graph.setGridEnabled(this.model.get("grid_enabled")),this.app.editor.graph.refresh()},this.onModelGridSize=()=>{this.app.editor.graph.setGridSize(this.model.get("grid_size")),this.app.editor.graph.refresh()},this.onModelGridColor=()=>{this.app.setGridColor(this.model.get("grid_color"))},this.onModelSelectedCells=()=>{const e=this.model.get("selected_cells").reduce(((e,a)=>[...e,...this.app.editor.graph.getCellsById(a)]),[]);this.app.editor.graph.selectionModel.setCells(e)},this.onDrawioEvent=(e,a)=>{let t={};switch(a.name){case"change":t={selected_cells:this.app.editor.graph.selectionModel.cells.map((e=>e.getId()))};break;case"scale":case"scaleAndTranslate":t={zoom:this.app.editor.graph.view.getScale()};break;case"pan":case"translate":case"size":t=this.translateToScroll();break;case"pageSelected":t={current_page:this.app.pages.indexOf(this.app.currentPage),page_ids:this.app.pages.map((e=>e.getId()))};break;case"pageFormatChanged":t={page_format:this.app.editor.graph.pageFormat};break;case"gridEnabledChanged":t={grid_enabled:this.app.editor.graph.gridEnabled};break;case"gridSizeChanged":t={grid_size:this.app.editor.graph.gridSize};break;case"gridColorChanged":t={grid_color:this.app.editor.graph.view.gridColor};break;case"fireMouseEvent":break;default:d.eM&&console.warn("unhandled",a.name,a,"from",e)}const i={};for(const e of Object.keys(t))i[e]=this.model.attributes[e];s.JSONExt.deepEqual(i,t)||(this.model.set(t),this.touch())}}initialize(e){super.initialize(e)}render(){super.render(),this.pWidget.addClass("jp-IPyDiagram");const e=setInterval((()=>{this.pWidget.isVisible&&(clearInterval(e),this.initDiagram(),this.pWidget.addWidget(this.diagram),this.diagram.onContentChanged(),this.diagram.onAfterShow(),this.model.on("change:source",this.onModelSourceChange,this),this.onModelSourceChange())}),100)}onModelSourceChange(){const e=this.model.changed.source;null!=e&&e.off("change:value",this.onSourceValue,this);const a=this.model.get("source");null!=a&&a.on("change:value",this.onSourceValue,this)}onSourceValue(){d.eM&&console.warn("change:value"),this.diagram.onContentChanged()}initDiagram(){d.eM&&console.warn("creating diagram widget");const e=w.diagrmManager.formatForModel({path:"widget.dio"});this.diagram=new n.S({adapter:{saveNeedsExport:()=>!1,drawioUrl:()=>l.DRAWIO_URL,drawioConfig:()=>this.model.get("config"),urlParams:()=>this.model.get("url_params"),format:()=>e,toXML:()=>this.xml(),fromXML:e=>{(this.xml()||"").trim()!==(e||"").trim()&&this.xml(e)}}}),this.diagram.appChanged.connect(this.onAppChanged,this)}xml(e){const a=this.model.get("source");if(null==e)return null==a?void 0:a.get("value");null!=a&&(a.set({value:e}),a.save_changes(this.callbacks()))}onAppChanged(){const{app:e}=this.diagram;if(!e)return;d.eM&&console.warn("installing handlers on",e);const{editor:a}=e,{graph:t}=a,{view:s,model:o,panningHandler:r,selectionModel:l}=t,n=[{src:e,evts:d.GE},{src:a,evts:d.lq},{src:t,evts:d.wO},{src:s,evts:d.Bx},{src:o,evts:d.qp},{src:r,evts:d.Fy},{src:l,evts:d.up}];for(const{src:e,evts:a}of n)for(const t of a)e.addListener(t,this.onDrawioEvent);const g={limit:10};[{evt:"change:zoom",fn:this.onModelZoom},{evt:"change:scroll_x change:scroll_y",fn:this.onModelScroll},{evt:"change:page_format",fn:this.onModelPageFormat},{evt:"change:current_page",fn:this.onModelPageSelected},{evt:"change:grid_enabled",fn:this.onModelGridEnabled},{evt:"change:grid_size",fn:this.onModelGridSize},{evt:"change:grid_color",fn:this.onModelGridColor},{evt:"change:selected_cells",fn:this.onModelSelectedCells}].forEach((({evt:e,fn:a})=>{const t=new i.eD(a,g);this.model.on(e,(()=>t.invoke()),this)}))}get app(){return this.diagram.app}translateToScroll(){const{x:e,y:a}=this.app.editor.graph.view.getTranslate();return{scroll_x:e,scroll_y:a}}}}}]);