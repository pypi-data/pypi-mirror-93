Metadata-Version: 2.1
Name: imgbasics
Version: 0.0.5
Summary: Basic image analysis tools (cropping, contour properties, etc.)
Home-page: https://github.com/ovinc/imgbasics
Author: Olivier Vincent
Author-email: ovinc.py@gmail.com
License: BSD 3-Clause License
Keywords: image,analysis,crop,imcrop,cropping,contour,contours,centroid,perimeter,area
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: License :: OSI Approved :: BSD License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: matplotlib
Requires-Dist: numpy
Requires-Dist: importlib-metadata
Requires-Dist: drapo (>=1.0.5)

About
=====

Basic image analysis tools, with the following functions:

- `imcrop()`: image cropping, with interactive options,
- `contour_properties()`: calculate centroid, area, and perimeter of a contour,
- `closest_contour()`: closest contour to a position,
- `contour_coords()`: transform contour from scikit-image or opencv into usable x, y data,

The package also defines a `ContourError` class as a custom exception for errors in contour calculations.

Install
=======

```bash
pip install imgbasics
```

Quick start
===========

Below is some information to use available functions. Please also consult docstrings and the Jupyter notebooks **ExamplesBasics.ipynb** for more details and examples.


## Image cropping (`imcrop`)

Image cropping function; the interactive mode allows the user to define the region of interest on the image interactively, either using clicks or a draggable rectangle.

The image `img` is assumed to be already loaded in memory as a numpy array (or equivalent, i.e. that supports slicing and defines `shape` and `ndim` attributes)

### Non-interactive mode

```python
img_crop = imgbasics.imcrop(img, cropzone)
```
Crops the image `img` according to a pre-defined crop rectangle `cropzone = xmin, ymin, width, height`. Contrary to the Matlab imcrop function with the same name, the cropped image is really of the width and height requested in terms of number of pixels, not w+1 and h+1 as in Matlab.

### Interactive mode

```python
img_crop, cropzone = imgbasics.imcrop(img)
```
Cropping rectangle is drawn on the image (img) by either:
- defining two corners of the rectangle by clicking (default).
- using a draggable rectangle for selection and pressing "enter" (`draggable=True` option)

The returned cropzone corresponds to `xmin, ymin, width, height`.

*Note*: when selecting, the pixels taken into account are those which have
their centers closest to the click, not their edges closest to the click.
For example, to crop to a single pixel, one needs to click two times within
this pixel (possibly at the same location). For images with few pixels,
this results in a visible offset between the dotted lines plotted after the
clicks (running through the centers of the pixels clicked) and the final
rectangle, which runs along the edges of all pixels selected.


## Contour properties (`contour_properties`)

Returns centroid position, perimeter and area of a contour as a dictionary with keys `'centroid'` (tuple with x and y position), `'perimeter'` (positive float), `'area'` (signed float). The sign convention for the area *A* differs depending on what type of plot is used (because `plt.imshow()` and `plt.plot()` do not use the same coordinate conventions):

| direction      |  imshow image (`plt.imshow()`)  | regular plot (`plt.plot()`)
| :---:          | :---:                           | :---:
| clockwise      |  *A* < 0  |  *A* > 0  |
| anti-clockwise |  *A* > 0  |  *A* < 0  |

(see **ExamplesBasics.ipynb** for a discussion of the direction of the contours returned by both scikit-image and opencv in different situations).

*Example*
(Hexagon which rotates anti-clockwise in regular coordinates and clockwise on an imshow plot):
```python
import numpy as np
from imgbasics import contour_properties

l = 1 / np.sqrt(3)
xp = np.array([1, 1, 0, -1, -1, 0])/2
yp = np.array([-l, l, 2*l, l, -l, -2*l])/2

data = contour_properties(xp, yp)
```
should return
```python
data['centroid'] ~ (0, 0)
data['perimeter'] = 6 / sqrt(3) ~ 3.4641,
data['area'] = -sqrt(3)/2 ~ -0.8660
```

## Closest contour (`closest_contour`)

Finds the closest contour (within a list of contours obtained by *scikit-image* or *opencv*) to a certain position (tuple (x, y)). Example with the *example.png* image provided in the package (should select the lowest, bright spot)

```python
from skimage import io, measure
from imgbasics import closest_contour

img = io.imread('example.png')
contours = measure.find_contours(img, 170)

c = closest_contour(contours, (221, 281), edge=True, source='scikit')
```
- If `edge = True`, returns the contour with the edge closest to the position
- If `edge = False` (default), returns the contour with the average position closest to position.
- `source` is the origin of the contours ('scikit' or 'opencv')

*Note:* raises a `ContourError` if no contours in image (`contours` empty).


## Contour coordinates (`contour_coords`)

Following the analysis in the section above (contour `c`), the `contour_coords()` function allow to format the contour into directly usable x, y coordinates for plotting directly on the imshow() image. For example, following the code above:

```python
import matplotlib.pyplot as plt
from imgbasics import contour_coords

x, y = contour_coords(c, source='scikit')

fig, ax = plt.subplots()
ax.imshow(img, cmap='gray')
ax.plot(x, y, -r)
```

# Interactive cropping demo

With clicks (default):

![](https://raw.githubusercontent.com/ovinc/imgbasics/master/data/imcrop_demo_clicks.gif)

With a draggable rectangle:

![](https://raw.githubusercontent.com/ovinc/imgbasics/master/data/imcrop_demo_draggable.gif)



# Dependencies

- python >= 3.6
- matplotlib
- numpy
- importlib-metadata
- drapo >= 1.0.5


# Author

Olivier Vincent

(ovinc.py@gmail.com)

# License

BSD 3-clause (see *LICENSE* file)

BSD 3-Clause License

Copyright (c) 2020, Olivier VINCENT
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of the copyright holder nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


