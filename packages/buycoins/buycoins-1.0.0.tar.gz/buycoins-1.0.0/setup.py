# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['buycoins', 'buycoins.modules']

package_data = \
{'': ['*']}

install_requires = \
['gql[requests]>=2.0.0,<3.0.0']

setup_kwargs = {
    'name': 'buycoins',
    'version': '1.0.0',
    'description': 'A Python SDK for the buycoins API',
    'long_description': '# Buycoins Python Library\n\n[![Build Status](https://travis-ci.com/edgeee/buycoins-python.svg?token=oQSNV8eQ1aycrRUjPbyg&branch=main)](https://travis-ci.com/edgeee/buycoins-python) [![Circle CI](https://img.shields.io/badge/license-MIT-blue.svg)](https://img.shields.io/badge/license-MIT-blue.svg) [![PyPI version](https://badge.fury.io/py/buycoins.svg)](https://badge.fury.io/py/buycoins) [![Python 3.6+](https://img.shields.io/badge/python-3.6-blue.svg)](https://www.python.org/downloads/release/python-360/)\n\nThis library provides easy access to the Buycoins API using the Python programming language. It provides all the feature of the API so that you don\'t need to interact with the API directly. This libary can be used with Python 3.6+\n\n## Links\n1. Buycoins API documentation: https://developers.buycoins.africa/\n\n## Installation\nYou can install this package using pip:\n```sh\npip install --upgrade buycoins\n```\n\n## Documentation\n\n### Primer\n- The library is structured around the concept of a `type`, so everything is a type. \n- All date quantities are specified as timestamps. So you would have to reconstruct the ISO dates yourself if you ever need to. \n- All cryptocurrency (and monetary) values are specified as decimals.\n- Currently supported cryptocurrencies are bitcoin, ethereum, & litecoin. To be updated as the Buycoins API evolves.\n\n### Initialization\nFirstly, request API access by sending an email to  [support@buycoins.africa](mailto:support@buycoins.africa) with the email address you used in creating a Buycoins account.\nWhen you\'ve been granted access, you should be able to generate a public and secret key from the "API settings" section of your account.\n\nYou have to initialize the library once in your app. You can do this when initializing databases, logging, etc.\n\n```python\nimport buycoins\n\nbuycoins.initialize("<PUBLIC-KEY>", "<SECRET-KEY>")\n```\n\n### Accounts\nAccounts provide a way to programmatically fund you Buycoins account.\n\n#### Types\n```dtd\nVirtualDepositAccountType:\n    account_number: str\n    account_name: str\n    account_type: str\n    bank_name: str\n    account_reference: str\n```\n\n#### Usage:\n```python\nimport buycoins as bc\n\n# Create a virtual deposit account:\nacc = bc.accounts.create_deposit("john doe") # acc is a VirtualDepositAccountType\n\nacc.account_name  # john doe\nacc.bank_name  # bank name\nacc.account_number  # account number\n```\n\n### Orders\nOrders provide a way to buy from and sell directly to Buycoins.\n\n#### Types\n```dtd\nCoinPriceType:\n    id: str\n    cryptocurrency: str\n    buy_price_per_coin: Decimal\n    min_buy: Decimal\n    max_buy: Decimal\n    expires_at: int\n\nclass OrderType(NamedTuple):\n    id: str\n    cryptocurrency: str\n    status: str\n    side: str\n    created_at: int\n    total_coin_amount: str\n    static_price: Decimal\n    price_type: str\n    dynamic_exchange_rate: str\n    coin_amount: Decimal\n```\n\n#### Usage\n```python\nimport buycoins as bc\n\n# Get prices of all cryptocurrencies\nprices = bc.orders.get_prices()  # prices is a list of CoinPriceType\n\nprices[0].id  # ID of this price entry\nprices[0].cryptocurrency  # cryptocurrency, e.g. bitcoin, litecoin\nprices[0].expires_at  # when this price entry will expire\n\n\n# Get price for a single cryptocurrency\nprice = bc.orders.get_price("bitcoin")  # price is a CoinPriceType\n\nprice.id  # ID of this price entry\nprice.cryptocurrency  # bitcoin\n\n\n# Buy a cryptocurrency\norder = bc.orders.buy(\n    price_id="price-id",  # price ID from calling either .get_price() or .get_prices()\n    coin_amount=1.52,\n    cryptocurrency="litecoin"\n)  # order is an OrderType\n\norder.status   # either active or inactive\norder.side   # either buy or sell\norder.cryptocurrency   # litecoin\n\n\n# Sell a cryptocurrency\norder = bc.orders.sell(\n    price_id="price-id",  # price ID from calling either .get_price() or .get_prices()\n    coin_amount=0.0043,\n    cryptocurrency="ethereum"\n)  # order is an OrderType\n\norder.status  # either active or pending\norder.side  # sell\norder.cryptocurrency  # ethereum\n```\n\n### P2P Trading\nP2P Trading lets you trade cryptocurrencies with other users.\nIf you are not familiar with p2p trading on the Buycoins platform, read about it [here](https://developers.buycoins.africa/p2p/introduction)\n\n#### Types\n```dtd\nclass OrderType(NamedTuple):\n    id: str\n    cryptocurrency: str\n    status: str\n    side: str\n    created_at: int\n    total_coin_amount: str\n    static_price: Decimal\n    price_type: str\n    dynamic_exchange_rate: str\n    coin_amount: Decimal\n```\n\n#### Usage\n```python\nimport buycoins as bc\n\n# Place limit order\norder = bc.p2p.place_limit_order(\n    side="buy", # either "buy" or "sell"\n    coin_amount=0.00043,\n    cryptocurrency="ethereum",\n    price_type="static",\n    static_price=0.004,\n    dynamic_exchange_rate=None  # float   \n)  # order is an OrderType\n\n# NB: if price_type == \'static\', static_price must be provided, and \n# if price_type == \'dynamic\', dynamic_exchange_rate must be provided\n\norder.id  # ID of order\norder.status  # status, either active or inactive\n\n\n# Place market order\norder = bc.p2p.place_market_order(\n    side="buy",  # either buy or sell\n    coin_amount=0.00023,\n    cryptocurrency=\'litecoin\'\n)  # order is an OrderType\n\norder.id  # ID of order\norder.status  # status, either active or inactive\n\n\n# Get a list of all your orders\norders, dynamic_price_expiry = bc.p2p.get_orders("active")  # orders is a list of OrderType; dynamic_price_expiry is a timestamp\n\norders[0].id  # ID of the first order\norders[1].status  # status of the first order\n\n\n# Get a list of all ongoing orders on the Buycoins platform\nmarket_book, dynamic_price_expiry = bc.p2p.get_market_book()  # market_book is a list of OrderType; dynamic_price_expiry is a timestamp\n\norders[0].id  # ID of the first order\norders[1].status  # status of the first order\n```\n\n\n### Transactions\n\nTransactions enable you to send and receive cryptocurrencies.\n\n#### Types\n```dtd\nCoinBalanceType:\n    id: str\n    cryptocurrency: str\n    confirmed_balance: Decimal\n\nNetworkFeeType:\n    estimated_fee: Decimal\n    total: Decimal\n\nTransactionType:\n    hash: str\n    id: str\n\nSendReturnValueType:\n    id: str\n    address: str\n    cryptocurrency: str\n    amount: Decimal\n    fee: Decimal\n    status: str\n    transaction: TransactionType\n\nAddressType:\n    cryptocurrency: str\n    address: str\n```\n\n#### Usage\n```python\nimport buycoins as bc\n\n# Get balances\nbalances = bc.transactions.get_balances()  # balances is a list of CoinBalanceType\nbalances[0].cryptocurrency  # bitcoin, litecoin, etc\nbalances[0].confirmed_balance  # the confirmed balance\n\n\n# Get balance for a single cryptocurrency\nbalance = bc.transactions.get_balance("bitcoin")  # balance is a CoinBalanceType\nbalance.cryptocurrency  # bitcoin\nbalance.confirmed_balance  # the confirmed balance\n\n\n# Estimate network fee required for a transaction\nfee = bc.transactions.estimate_network_fee(\n    "bitcoin",  # cryptocurrency\n    0.0423,  # txn amount\n)  # fee is a NetworkFeeType\n\nfee.estimated_fee  # estimated fee for txn\nfee.total  # total\n\n\n# Send cryptocurrency to a wallet address\nsent = bc.transactions.send(\n    cryptocurrency="ethereum",\n    amount=0.0023,\n    address="<wallet-address>"\n)  # sent is a SendReturnValueType\n\nsent.fee  # fee charged for the "send" txn\nsent.status # status of the txn\nsent.transaction.id  # ID of the txn\nsent.transaction.hash  # txn hash\n\n\n# Generate wallet address\naddr = bc.transactions.create_address("bitcoin")  # addr is an AddressType\n\naddr.address  # Address string\naddr.cryptocurrency  # cryptocurrency\n```\n\n\n## Contributing\nSee [CONTRIBUTING.md](CONTRIBUTING.md)\n\n\n## License\n[MIT License](https://github.com/edgeee/buycoins-python/blob/master/LICENSE)\n',
    'author': 'Rasheed Musa',
    'author_email': 'rasheedmusa9@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/edgeee/buycoins-python',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
