# coding: utf-8

"""
    Hydrogen Integration API

    The Hydrogen Integration API  # noqa: E501

    OpenAPI spec version: 1.2.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from integration_api.api_client import ApiClient


class CardApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_auto_reload_using_post(self, request, **kwargs):  # noqa: E501
        """Card auto reload  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_auto_reload_using_post(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardAutoReloadRequestCO request: request (required)
        :return: CardAutoReloadResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_auto_reload_using_post_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_auto_reload_using_post_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def create_auto_reload_using_post_with_http_info(self, request, **kwargs):  # noqa: E501
        """Card auto reload  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_auto_reload_using_post_with_http_info(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardAutoReloadRequestCO request: request (required)
        :return: CardAutoReloadResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_auto_reload_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `create_auto_reload_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/auto_reload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CardAutoReloadResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_card_activate_using_post(self, activate_request, **kwargs):  # noqa: E501
        """Activate card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_card_activate_using_post(activate_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardBaseRequestCO activate_request: activateRequest (required)
        :return: BaseResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_card_activate_using_post_with_http_info(activate_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_card_activate_using_post_with_http_info(activate_request, **kwargs)  # noqa: E501
            return data

    def create_card_activate_using_post_with_http_info(self, activate_request, **kwargs):  # noqa: E501
        """Activate card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_card_activate_using_post_with_http_info(activate_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardBaseRequestCO activate_request: activateRequest (required)
        :return: BaseResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['activate_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_card_activate_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'activate_request' is set
        if ('activate_request' not in params or
                params['activate_request'] is None):
            raise ValueError("Missing the required parameter `activate_request` when calling `create_card_activate_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'activate_request' in params:
            body_params = params['activate_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/activate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_card_business_using_post(self, card_business_request_co, **kwargs):  # noqa: E501
        """Create a card business  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_card_business_using_post(card_business_request_co, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardBusinessRequestCO card_business_request_co: cardBusinessRequestCO (required)
        :return: CreateBusinessResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_card_business_using_post_with_http_info(card_business_request_co, **kwargs)  # noqa: E501
        else:
            (data) = self.create_card_business_using_post_with_http_info(card_business_request_co, **kwargs)  # noqa: E501
            return data

    def create_card_business_using_post_with_http_info(self, card_business_request_co, **kwargs):  # noqa: E501
        """Create a card business  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_card_business_using_post_with_http_info(card_business_request_co, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardBusinessRequestCO card_business_request_co: cardBusinessRequestCO (required)
        :return: CreateBusinessResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['card_business_request_co']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_card_business_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'card_business_request_co' is set
        if ('card_business_request_co' not in params or
                params['card_business_request_co'] is None):
            raise ValueError("Missing the required parameter `card_business_request_co` when calling `create_card_business_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'card_business_request_co' in params:
            body_params = params['card_business_request_co']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/business', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateBusinessResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_card_close_using_post(self, close_request, **kwargs):  # noqa: E501
        """close a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_card_close_using_post(close_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardBaseRequestCO close_request: closeRequest (required)
        :return: BaseResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_card_close_using_post_with_http_info(close_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_card_close_using_post_with_http_info(close_request, **kwargs)  # noqa: E501
            return data

    def create_card_close_using_post_with_http_info(self, close_request, **kwargs):  # noqa: E501
        """close a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_card_close_using_post_with_http_info(close_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardBaseRequestCO close_request: closeRequest (required)
        :return: BaseResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['close_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_card_close_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'close_request' is set
        if ('close_request' not in params or
                params['close_request'] is None):
            raise ValueError("Missing the required parameter `close_request` when calling `create_card_close_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'close_request' in params:
            body_params = params['close_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/close', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_card_issue_using_post(self, issue_request, **kwargs):  # noqa: E501
        """issue a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_card_issue_using_post(issue_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardBaseRequestCO issue_request: issueRequest (required)
        :return: BaseResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_card_issue_using_post_with_http_info(issue_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_card_issue_using_post_with_http_info(issue_request, **kwargs)  # noqa: E501
            return data

    def create_card_issue_using_post_with_http_info(self, issue_request, **kwargs):  # noqa: E501
        """issue a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_card_issue_using_post_with_http_info(issue_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardBaseRequestCO issue_request: issueRequest (required)
        :return: BaseResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['issue_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_card_issue_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'issue_request' is set
        if ('issue_request' not in params or
                params['issue_request'] is None):
            raise ValueError("Missing the required parameter `issue_request` when calling `create_card_issue_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'issue_request' in params:
            body_params = params['issue_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/issue', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_card_load_using_post(self, load_request, **kwargs):  # noqa: E501
        """Create a card load  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_card_load_using_post(load_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardLoadRequestCO load_request: loadRequest (required)
        :return: CardLoadUnloadResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_card_load_using_post_with_http_info(load_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_card_load_using_post_with_http_info(load_request, **kwargs)  # noqa: E501
            return data

    def create_card_load_using_post_with_http_info(self, load_request, **kwargs):  # noqa: E501
        """Create a card load  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_card_load_using_post_with_http_info(load_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardLoadRequestCO load_request: loadRequest (required)
        :return: CardLoadUnloadResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['load_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_card_load_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'load_request' is set
        if ('load_request' not in params or
                params['load_request'] is None):
            raise ValueError("Missing the required parameter `load_request` when calling `create_card_load_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'load_request' in params:
            body_params = params['load_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/load', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CardLoadUnloadResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_card_pin_using_post(self, card_pin_request_co, **kwargs):  # noqa: E501
        """pin card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_card_pin_using_post(card_pin_request_co, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardPinRequestCO card_pin_request_co: cardPinRequestCO (required)
        :return: BaseResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_card_pin_using_post_with_http_info(card_pin_request_co, **kwargs)  # noqa: E501
        else:
            (data) = self.create_card_pin_using_post_with_http_info(card_pin_request_co, **kwargs)  # noqa: E501
            return data

    def create_card_pin_using_post_with_http_info(self, card_pin_request_co, **kwargs):  # noqa: E501
        """pin card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_card_pin_using_post_with_http_info(card_pin_request_co, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardPinRequestCO card_pin_request_co: cardPinRequestCO (required)
        :return: BaseResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['card_pin_request_co']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_card_pin_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'card_pin_request_co' is set
        if ('card_pin_request_co' not in params or
                params['card_pin_request_co'] is None):
            raise ValueError("Missing the required parameter `card_pin_request_co` when calling `create_card_pin_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'card_pin_request_co' in params:
            body_params = params['card_pin_request_co']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/pin', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_card_reactivate_using_post(self, reactivate_request, **kwargs):  # noqa: E501
        """reactivate card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_card_reactivate_using_post(reactivate_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardBaseRequestCO reactivate_request: reactivateRequest (required)
        :return: BaseResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_card_reactivate_using_post_with_http_info(reactivate_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_card_reactivate_using_post_with_http_info(reactivate_request, **kwargs)  # noqa: E501
            return data

    def create_card_reactivate_using_post_with_http_info(self, reactivate_request, **kwargs):  # noqa: E501
        """reactivate card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_card_reactivate_using_post_with_http_info(reactivate_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardBaseRequestCO reactivate_request: reactivateRequest (required)
        :return: BaseResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reactivate_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_card_reactivate_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reactivate_request' is set
        if ('reactivate_request' not in params or
                params['reactivate_request'] is None):
            raise ValueError("Missing the required parameter `reactivate_request` when calling `create_card_reactivate_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'reactivate_request' in params:
            body_params = params['reactivate_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/reactivate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_card_reissue_using_post(self, request, **kwargs):  # noqa: E501
        """Reissue a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_card_reissue_using_post(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardBaseRequestCO request: request (required)
        :return: BaseResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_card_reissue_using_post_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_card_reissue_using_post_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def create_card_reissue_using_post_with_http_info(self, request, **kwargs):  # noqa: E501
        """Reissue a card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_card_reissue_using_post_with_http_info(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardBaseRequestCO request: request (required)
        :return: BaseResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_card_reissue_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `create_card_reissue_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/reissue', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_card_replace_using_post(self, request, **kwargs):  # noqa: E501
        """Create card replace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_card_replace_using_post(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardBaseRequestCO request: request (required)
        :return: CardReplaceResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_card_replace_using_post_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_card_replace_using_post_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def create_card_replace_using_post_with_http_info(self, request, **kwargs):  # noqa: E501
        """Create card replace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_card_replace_using_post_with_http_info(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardBaseRequestCO request: request (required)
        :return: CardReplaceResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_card_replace_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `create_card_replace_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/replace', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CardReplaceResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_card_spending_control_using_post(self, request, **kwargs):  # noqa: E501
        """Create card spending control  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_card_spending_control_using_post(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardSpendingControlRequestCO request: request (required)
        :return: CardSpendingControlResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_card_spending_control_using_post_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_card_spending_control_using_post_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def create_card_spending_control_using_post_with_http_info(self, request, **kwargs):  # noqa: E501
        """Create card spending control  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_card_spending_control_using_post_with_http_info(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardSpendingControlRequestCO request: request (required)
        :return: CardSpendingControlResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_card_spending_control_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `create_card_spending_control_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/spending_control', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CardSpendingControlResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_card_suspend_using_post(self, suspend_request, **kwargs):  # noqa: E501
        """suspend card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_card_suspend_using_post(suspend_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardBaseRequestCO suspend_request: suspendRequest (required)
        :return: BaseResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_card_suspend_using_post_with_http_info(suspend_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_card_suspend_using_post_with_http_info(suspend_request, **kwargs)  # noqa: E501
            return data

    def create_card_suspend_using_post_with_http_info(self, suspend_request, **kwargs):  # noqa: E501
        """suspend card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_card_suspend_using_post_with_http_info(suspend_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardBaseRequestCO suspend_request: suspendRequest (required)
        :return: BaseResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['suspend_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_card_suspend_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'suspend_request' is set
        if ('suspend_request' not in params or
                params['suspend_request'] is None):
            raise ValueError("Missing the required parameter `suspend_request` when calling `create_card_suspend_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'suspend_request' in params:
            body_params = params['suspend_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/suspend', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_card_token_using_post(self, tokenize_request, **kwargs):  # noqa: E501
        """token card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_card_token_using_post(tokenize_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardTokenRequestCO tokenize_request: tokenizeRequest (required)
        :return: CardTokenResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_card_token_using_post_with_http_info(tokenize_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_card_token_using_post_with_http_info(tokenize_request, **kwargs)  # noqa: E501
            return data

    def create_card_token_using_post_with_http_info(self, tokenize_request, **kwargs):  # noqa: E501
        """token card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_card_token_using_post_with_http_info(tokenize_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardTokenRequestCO tokenize_request: tokenizeRequest (required)
        :return: CardTokenResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tokenize_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_card_token_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tokenize_request' is set
        if ('tokenize_request' not in params or
                params['tokenize_request'] is None):
            raise ValueError("Missing the required parameter `tokenize_request` when calling `create_card_token_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tokenize_request' in params:
            body_params = params['tokenize_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/token', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CardTokenResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_card_unload_using_post(self, reload_request, **kwargs):  # noqa: E501
        """Create a card upload  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_card_unload_using_post(reload_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardUnloadRequestCO reload_request: reloadRequest (required)
        :return: CardLoadUnloadResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_card_unload_using_post_with_http_info(reload_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_card_unload_using_post_with_http_info(reload_request, **kwargs)  # noqa: E501
            return data

    def create_card_unload_using_post_with_http_info(self, reload_request, **kwargs):  # noqa: E501
        """Create a card upload  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_card_unload_using_post_with_http_info(reload_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardUnloadRequestCO reload_request: reloadRequest (required)
        :return: CardLoadUnloadResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reload_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_card_unload_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reload_request' is set
        if ('reload_request' not in params or
                params['reload_request'] is None):
            raise ValueError("Missing the required parameter `reload_request` when calling `create_card_unload_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'reload_request' in params:
            body_params = params['reload_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/unload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CardLoadUnloadResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_client_card_using_post(self, card_client_request_co, **kwargs):  # noqa: E501
        """Create a card client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_card_using_post(card_client_request_co, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardClientRequestCO card_client_request_co: cardClientRequestCO (required)
        :return: CreateCardClientResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_client_card_using_post_with_http_info(card_client_request_co, **kwargs)  # noqa: E501
        else:
            (data) = self.create_client_card_using_post_with_http_info(card_client_request_co, **kwargs)  # noqa: E501
            return data

    def create_client_card_using_post_with_http_info(self, card_client_request_co, **kwargs):  # noqa: E501
        """Create a card client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_client_card_using_post_with_http_info(card_client_request_co, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardClientRequestCO card_client_request_co: cardClientRequestCO (required)
        :return: CreateCardClientResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['card_client_request_co']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_client_card_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'card_client_request_co' is set
        if ('card_client_request_co' not in params or
                params['card_client_request_co'] is None):
            raise ValueError("Missing the required parameter `card_client_request_co` when calling `create_client_card_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'card_client_request_co' in params:
            body_params = params['card_client_request_co']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/client', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateCardClientResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_card_balance_using_get(self, id, **kwargs):  # noqa: E501
        """Get a Card Balance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_card_balance_using_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param date end_date: end_date
        :param date start_date: start_date
        :return: CardBalanceResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_card_balance_using_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_card_balance_using_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_card_balance_using_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a Card Balance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_card_balance_using_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param date end_date: end_date
        :param date start_date: start_date
        :return: CardBalanceResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'end_date', 'start_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_card_balance_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_card_balance_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/balance/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CardBalanceResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_card_image(self, card_id, **kwargs):  # noqa: E501
        """Get card image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_card_image(card_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str card_id: card_id (required)
        :return: GetCardImageResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_card_image_with_http_info(card_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_card_image_with_http_info(card_id, **kwargs)  # noqa: E501
            return data

    def get_card_image_with_http_info(self, card_id, **kwargs):  # noqa: E501
        """Get card image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_card_image_with_http_info(card_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str card_id: card_id (required)
        :return: GetCardImageResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['card_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_card_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'card_id' is set
        if ('card_id' not in params or
                params['card_id'] is None):
            raise ValueError("Missing the required parameter `card_id` when calling `get_card_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'card_id' in params:
            path_params['card_id'] = params['card_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/image/{card_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCardImageResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_card_pci_details(self, card_id, **kwargs):  # noqa: E501
        """Get card pci details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_card_pci_details(card_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str card_id: card_id (required)
        :return: GetCardPciDetailsResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_card_pci_details_with_http_info(card_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_card_pci_details_with_http_info(card_id, **kwargs)  # noqa: E501
            return data

    def get_card_pci_details_with_http_info(self, card_id, **kwargs):  # noqa: E501
        """Get card pci details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_card_pci_details_with_http_info(card_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str card_id: card_id (required)
        :return: GetCardPciDetailsResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['card_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_card_pci_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'card_id' is set
        if ('card_id' not in params or
                params['card_id'] is None):
            raise ValueError("Missing the required parameter `card_id` when calling `get_card_pci_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'card_id' in params:
            path_params['card_id'] = params['card_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/pci_details/{card_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCardPciDetailsResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_card_reserve_account_details_using_get(self, **kwargs):  # noqa: E501
        """Card reserve account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_card_reserve_account_details_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CardReserveAccountResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_card_reserve_account_details_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_card_reserve_account_details_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_card_reserve_account_details_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """Card reserve account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_card_reserve_account_details_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CardReserveAccountResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_card_reserve_account_details_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/reserve', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CardReserveAccountResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_card_statement_using_get(self, card_id, **kwargs):  # noqa: E501
        """Get card statement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_card_statement_using_get(card_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str card_id: card_id (required)
        :param date end_date: end_date
        :param date start_date: start_date
        :return: GetCardStatementResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_card_statement_using_get_with_http_info(card_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_card_statement_using_get_with_http_info(card_id, **kwargs)  # noqa: E501
            return data

    def get_card_statement_using_get_with_http_info(self, card_id, **kwargs):  # noqa: E501
        """Get card statement  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_card_statement_using_get_with_http_info(card_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str card_id: card_id (required)
        :param date end_date: end_date
        :param date start_date: start_date
        :return: GetCardStatementResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['card_id', 'end_date', 'start_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_card_statement_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'card_id' is set
        if ('card_id' not in params or
                params['card_id'] is None):
            raise ValueError("Missing the required parameter `card_id` when calling `get_card_statement_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'card_id' in params:
            path_params['card_id'] = params['card_id']  # noqa: E501

        query_params = []
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/statement/{card_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCardStatementResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_card_token_using_token(self, id, **kwargs):  # noqa: E501
        """Get a card token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_card_token_using_token(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param str device_id: device_id
        :param str device_type: device_type
        :param str wallet: wallet
        :return: list[GetCardTokenResponseVO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_card_token_using_token_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_card_token_using_token_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_card_token_using_token_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a card token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_card_token_using_token_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param str device_id: device_id
        :param str device_type: device_type
        :param str wallet: wallet
        :return: list[GetCardTokenResponseVO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'device_id', 'device_type', 'wallet']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_card_token_using_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_card_token_using_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'device_id' in params:
            query_params.append(('device_id', params['device_id']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'wallet' in params:
            query_params.append(('wallet', params['wallet']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/token/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GetCardTokenResponseVO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_card_transaction_using_get(self, id, **kwargs):  # noqa: E501
        """Get a card transaction  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_card_transaction_using_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param date end_date: end_date
        :param date start_date: start_date
        :return: CardTransactionResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_card_transaction_using_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_card_transaction_using_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_card_transaction_using_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a card transaction  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_card_transaction_using_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param date end_date: end_date
        :param date start_date: start_date
        :return: CardTransactionResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'end_date', 'start_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_card_transaction_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_card_transaction_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/transaction/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CardTransactionResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_card_using_get(self, id, **kwargs):  # noqa: E501
        """Get a card information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_card_using_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :return: BaseResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_card_using_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_card_using_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_card_using_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a card information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_card_using_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :return: BaseResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_card_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_card_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_card_business_using_put(self, nucleus_business_id, **kwargs):  # noqa: E501
        """Update a card business  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_card_business_using_put(nucleus_business_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nucleus_business_id: nucleus_business_id (required)
        :return: UpdateBusinessResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_card_business_using_put_with_http_info(nucleus_business_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_card_business_using_put_with_http_info(nucleus_business_id, **kwargs)  # noqa: E501
            return data

    def update_card_business_using_put_with_http_info(self, nucleus_business_id, **kwargs):  # noqa: E501
        """Update a card business  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_card_business_using_put_with_http_info(nucleus_business_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nucleus_business_id: nucleus_business_id (required)
        :return: UpdateBusinessResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nucleus_business_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_card_business_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'nucleus_business_id' is set
        if ('nucleus_business_id' not in params or
                params['nucleus_business_id'] is None):
            raise ValueError("Missing the required parameter `nucleus_business_id` when calling `update_card_business_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'nucleus_business_id' in params:
            path_params['nucleus_business_id'] = params['nucleus_business_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/business/{nucleus_business_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateBusinessResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_card_pin_using_post(self, card_pin_request_co, id, **kwargs):  # noqa: E501
        """update a pin card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_card_pin_using_post(card_pin_request_co, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardUpdatePinRequestCO card_pin_request_co: cardPinRequestCO (required)
        :param str id: id (required)
        :return: BaseResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_card_pin_using_post_with_http_info(card_pin_request_co, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_card_pin_using_post_with_http_info(card_pin_request_co, id, **kwargs)  # noqa: E501
            return data

    def update_card_pin_using_post_with_http_info(self, card_pin_request_co, id, **kwargs):  # noqa: E501
        """update a pin card  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_card_pin_using_post_with_http_info(card_pin_request_co, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardUpdatePinRequestCO card_pin_request_co: cardPinRequestCO (required)
        :param str id: id (required)
        :return: BaseResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['card_pin_request_co', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_card_pin_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'card_pin_request_co' is set
        if ('card_pin_request_co' not in params or
                params['card_pin_request_co'] is None):
            raise ValueError("Missing the required parameter `card_pin_request_co` when calling `update_card_pin_using_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_card_pin_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'card_pin_request_co' in params:
            body_params = params['card_pin_request_co']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/pin/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_card_spending_control_using_put(self, nucleus_spending_control_id, **kwargs):  # noqa: E501
        """Update a card spending control  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_card_spending_control_using_put(nucleus_spending_control_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nucleus_spending_control_id: nucleus_spending_control_id (required)
        :return: CardSpendingControlResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_card_spending_control_using_put_with_http_info(nucleus_spending_control_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_card_spending_control_using_put_with_http_info(nucleus_spending_control_id, **kwargs)  # noqa: E501
            return data

    def update_card_spending_control_using_put_with_http_info(self, nucleus_spending_control_id, **kwargs):  # noqa: E501
        """Update a card spending control  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_card_spending_control_using_put_with_http_info(nucleus_spending_control_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nucleus_spending_control_id: nucleus_spending_control_id (required)
        :return: CardSpendingControlResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nucleus_spending_control_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_card_spending_control_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'nucleus_spending_control_id' is set
        if ('nucleus_spending_control_id' not in params or
                params['nucleus_spending_control_id'] is None):
            raise ValueError("Missing the required parameter `nucleus_spending_control_id` when calling `update_card_spending_control_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'nucleus_spending_control_id' in params:
            path_params['nucleus_spending_control_id'] = params['nucleus_spending_control_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/spending_control/{nucleus_spending_control_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CardSpendingControlResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_card_using_put(self, id, **kwargs):  # noqa: E501
        """Update a card information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_card_using_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :return: BaseResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_card_using_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_card_using_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_card_using_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a card information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_card_using_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :return: BaseResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_card_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_card_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_client_card_using_put(self, id, **kwargs):  # noqa: E501
        """Update a card client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_card_using_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :return: UpdateCardClientResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_client_card_using_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_client_card_using_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_client_card_using_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a card client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_client_card_using_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :return: UpdateCardClientResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_client_card_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_client_card_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/client/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateCardClientResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def verify_card_pin_using_post(self, card_pin_request_co, **kwargs):  # noqa: E501
        """verify card pin  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verify_card_pin_using_post(card_pin_request_co, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardPinRequestCO card_pin_request_co: cardPinRequestCO (required)
        :return: BaseResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.verify_card_pin_using_post_with_http_info(card_pin_request_co, **kwargs)  # noqa: E501
        else:
            (data) = self.verify_card_pin_using_post_with_http_info(card_pin_request_co, **kwargs)  # noqa: E501
            return data

    def verify_card_pin_using_post_with_http_info(self, card_pin_request_co, **kwargs):  # noqa: E501
        """verify card pin  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verify_card_pin_using_post_with_http_info(card_pin_request_co, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CardPinRequestCO card_pin_request_co: cardPinRequestCO (required)
        :return: BaseResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['card_pin_request_co']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verify_card_pin_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'card_pin_request_co' is set
        if ('card_pin_request_co' not in params or
                params['card_pin_request_co'] is None):
            raise ValueError("Missing the required parameter `card_pin_request_co` when calling `verify_card_pin_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'card_pin_request_co' in params:
            body_params = params['card_pin_request_co']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/card/pin/verify', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
