# coding: utf-8

"""
    Hydrogen Integration API

    The Hydrogen Integration API  # noqa: E501

    OpenAPI spec version: 1.2.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LineItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'currency_code': 'str',
        'description': 'str',
        'line_item_id': 'str',
        'quantity': 'float',
        'rate': 'float',
        'subtotal': 'float',
        'tax': 'float'
    }

    attribute_map = {
        'amount': 'amount',
        'currency_code': 'currency_code',
        'description': 'description',
        'line_item_id': 'line_item_id',
        'quantity': 'quantity',
        'rate': 'rate',
        'subtotal': 'subtotal',
        'tax': 'tax'
    }

    def __init__(self, amount=None, currency_code=None, description=None, line_item_id=None, quantity=None, rate=None, subtotal=None, tax=None):  # noqa: E501
        """LineItems - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._currency_code = None
        self._description = None
        self._line_item_id = None
        self._quantity = None
        self._rate = None
        self._subtotal = None
        self._tax = None
        self.discriminator = None

        self.amount = amount
        self.currency_code = currency_code
        self.description = description
        if line_item_id is not None:
            self.line_item_id = line_item_id
        self.quantity = quantity
        self.rate = rate
        if subtotal is not None:
            self.subtotal = subtotal
        if tax is not None:
            self.tax = tax

    @property
    def amount(self):
        """Gets the amount of this LineItems.  # noqa: E501

        amount  # noqa: E501

        :return: The amount of this LineItems.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this LineItems.

        amount  # noqa: E501

        :param amount: The amount of this LineItems.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def currency_code(self):
        """Gets the currency_code of this LineItems.  # noqa: E501

        currency_code  # noqa: E501

        :return: The currency_code of this LineItems.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this LineItems.

        currency_code  # noqa: E501

        :param currency_code: The currency_code of this LineItems.  # noqa: E501
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def description(self):
        """Gets the description of this LineItems.  # noqa: E501

        description  # noqa: E501

        :return: The description of this LineItems.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LineItems.

        description  # noqa: E501

        :param description: The description of this LineItems.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def line_item_id(self):
        """Gets the line_item_id of this LineItems.  # noqa: E501

        lineItemId  # noqa: E501

        :return: The line_item_id of this LineItems.  # noqa: E501
        :rtype: str
        """
        return self._line_item_id

    @line_item_id.setter
    def line_item_id(self, line_item_id):
        """Sets the line_item_id of this LineItems.

        lineItemId  # noqa: E501

        :param line_item_id: The line_item_id of this LineItems.  # noqa: E501
        :type: str
        """

        self._line_item_id = line_item_id

    @property
    def quantity(self):
        """Gets the quantity of this LineItems.  # noqa: E501

        quantity  # noqa: E501

        :return: The quantity of this LineItems.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this LineItems.

        quantity  # noqa: E501

        :param quantity: The quantity of this LineItems.  # noqa: E501
        :type: float
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def rate(self):
        """Gets the rate of this LineItems.  # noqa: E501

        rate  # noqa: E501

        :return: The rate of this LineItems.  # noqa: E501
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this LineItems.

        rate  # noqa: E501

        :param rate: The rate of this LineItems.  # noqa: E501
        :type: float
        """
        if rate is None:
            raise ValueError("Invalid value for `rate`, must not be `None`")  # noqa: E501

        self._rate = rate

    @property
    def subtotal(self):
        """Gets the subtotal of this LineItems.  # noqa: E501

        subtotal  # noqa: E501

        :return: The subtotal of this LineItems.  # noqa: E501
        :rtype: float
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """Sets the subtotal of this LineItems.

        subtotal  # noqa: E501

        :param subtotal: The subtotal of this LineItems.  # noqa: E501
        :type: float
        """

        self._subtotal = subtotal

    @property
    def tax(self):
        """Gets the tax of this LineItems.  # noqa: E501

        tax  # noqa: E501

        :return: The tax of this LineItems.  # noqa: E501
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this LineItems.

        tax  # noqa: E501

        :param tax: The tax of this LineItems.  # noqa: E501
        :type: float
        """

        self._tax = tax

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LineItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LineItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
