# coding: utf-8

"""
    Hydrogen Integration API

    The Hydrogen Integration API  # noqa: E501

    OpenAPI spec version: 1.2.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MdQuoteItemVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ask': 'float',
        'bid': 'float',
        'change': 'float',
        'close': 'float',
        'currency_code': 'str',
        'day_range': 'str',
        'exchange': 'str',
        'high': 'float',
        'last_trade': 'float',
        'last_trade_time_stamp': 'datetime',
        'low': 'float',
        'market_cap': 'str',
        'nucleus_security_id': 'str',
        'open': 'float',
        'prev_close': 'float',
        'ticker': 'str',
        'volume': 'int',
        'year_range': 'str'
    }

    attribute_map = {
        'ask': 'ask',
        'bid': 'bid',
        'change': 'change',
        'close': 'close',
        'currency_code': 'currency_code',
        'day_range': 'day_range',
        'exchange': 'exchange',
        'high': 'high',
        'last_trade': 'last_trade',
        'last_trade_time_stamp': 'last_trade_time_stamp',
        'low': 'low',
        'market_cap': 'market_cap',
        'nucleus_security_id': 'nucleus_security_id',
        'open': 'open',
        'prev_close': 'prev_close',
        'ticker': 'ticker',
        'volume': 'volume',
        'year_range': 'year_range'
    }

    def __init__(self, ask=None, bid=None, change=None, close=None, currency_code=None, day_range=None, exchange=None, high=None, last_trade=None, last_trade_time_stamp=None, low=None, market_cap=None, nucleus_security_id=None, open=None, prev_close=None, ticker=None, volume=None, year_range=None):  # noqa: E501
        """MdQuoteItemVO - a model defined in Swagger"""  # noqa: E501

        self._ask = None
        self._bid = None
        self._change = None
        self._close = None
        self._currency_code = None
        self._day_range = None
        self._exchange = None
        self._high = None
        self._last_trade = None
        self._last_trade_time_stamp = None
        self._low = None
        self._market_cap = None
        self._nucleus_security_id = None
        self._open = None
        self._prev_close = None
        self._ticker = None
        self._volume = None
        self._year_range = None
        self.discriminator = None

        if ask is not None:
            self.ask = ask
        if bid is not None:
            self.bid = bid
        if change is not None:
            self.change = change
        if close is not None:
            self.close = close
        if currency_code is not None:
            self.currency_code = currency_code
        if day_range is not None:
            self.day_range = day_range
        if exchange is not None:
            self.exchange = exchange
        if high is not None:
            self.high = high
        if last_trade is not None:
            self.last_trade = last_trade
        if last_trade_time_stamp is not None:
            self.last_trade_time_stamp = last_trade_time_stamp
        if low is not None:
            self.low = low
        if market_cap is not None:
            self.market_cap = market_cap
        if nucleus_security_id is not None:
            self.nucleus_security_id = nucleus_security_id
        if open is not None:
            self.open = open
        if prev_close is not None:
            self.prev_close = prev_close
        if ticker is not None:
            self.ticker = ticker
        if volume is not None:
            self.volume = volume
        if year_range is not None:
            self.year_range = year_range

    @property
    def ask(self):
        """Gets the ask of this MdQuoteItemVO.  # noqa: E501


        :return: The ask of this MdQuoteItemVO.  # noqa: E501
        :rtype: float
        """
        return self._ask

    @ask.setter
    def ask(self, ask):
        """Sets the ask of this MdQuoteItemVO.


        :param ask: The ask of this MdQuoteItemVO.  # noqa: E501
        :type: float
        """

        self._ask = ask

    @property
    def bid(self):
        """Gets the bid of this MdQuoteItemVO.  # noqa: E501


        :return: The bid of this MdQuoteItemVO.  # noqa: E501
        :rtype: float
        """
        return self._bid

    @bid.setter
    def bid(self, bid):
        """Sets the bid of this MdQuoteItemVO.


        :param bid: The bid of this MdQuoteItemVO.  # noqa: E501
        :type: float
        """

        self._bid = bid

    @property
    def change(self):
        """Gets the change of this MdQuoteItemVO.  # noqa: E501


        :return: The change of this MdQuoteItemVO.  # noqa: E501
        :rtype: float
        """
        return self._change

    @change.setter
    def change(self, change):
        """Sets the change of this MdQuoteItemVO.


        :param change: The change of this MdQuoteItemVO.  # noqa: E501
        :type: float
        """

        self._change = change

    @property
    def close(self):
        """Gets the close of this MdQuoteItemVO.  # noqa: E501


        :return: The close of this MdQuoteItemVO.  # noqa: E501
        :rtype: float
        """
        return self._close

    @close.setter
    def close(self, close):
        """Sets the close of this MdQuoteItemVO.


        :param close: The close of this MdQuoteItemVO.  # noqa: E501
        :type: float
        """

        self._close = close

    @property
    def currency_code(self):
        """Gets the currency_code of this MdQuoteItemVO.  # noqa: E501


        :return: The currency_code of this MdQuoteItemVO.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this MdQuoteItemVO.


        :param currency_code: The currency_code of this MdQuoteItemVO.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def day_range(self):
        """Gets the day_range of this MdQuoteItemVO.  # noqa: E501


        :return: The day_range of this MdQuoteItemVO.  # noqa: E501
        :rtype: str
        """
        return self._day_range

    @day_range.setter
    def day_range(self, day_range):
        """Sets the day_range of this MdQuoteItemVO.


        :param day_range: The day_range of this MdQuoteItemVO.  # noqa: E501
        :type: str
        """

        self._day_range = day_range

    @property
    def exchange(self):
        """Gets the exchange of this MdQuoteItemVO.  # noqa: E501


        :return: The exchange of this MdQuoteItemVO.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this MdQuoteItemVO.


        :param exchange: The exchange of this MdQuoteItemVO.  # noqa: E501
        :type: str
        """

        self._exchange = exchange

    @property
    def high(self):
        """Gets the high of this MdQuoteItemVO.  # noqa: E501


        :return: The high of this MdQuoteItemVO.  # noqa: E501
        :rtype: float
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this MdQuoteItemVO.


        :param high: The high of this MdQuoteItemVO.  # noqa: E501
        :type: float
        """

        self._high = high

    @property
    def last_trade(self):
        """Gets the last_trade of this MdQuoteItemVO.  # noqa: E501


        :return: The last_trade of this MdQuoteItemVO.  # noqa: E501
        :rtype: float
        """
        return self._last_trade

    @last_trade.setter
    def last_trade(self, last_trade):
        """Sets the last_trade of this MdQuoteItemVO.


        :param last_trade: The last_trade of this MdQuoteItemVO.  # noqa: E501
        :type: float
        """

        self._last_trade = last_trade

    @property
    def last_trade_time_stamp(self):
        """Gets the last_trade_time_stamp of this MdQuoteItemVO.  # noqa: E501


        :return: The last_trade_time_stamp of this MdQuoteItemVO.  # noqa: E501
        :rtype: datetime
        """
        return self._last_trade_time_stamp

    @last_trade_time_stamp.setter
    def last_trade_time_stamp(self, last_trade_time_stamp):
        """Sets the last_trade_time_stamp of this MdQuoteItemVO.


        :param last_trade_time_stamp: The last_trade_time_stamp of this MdQuoteItemVO.  # noqa: E501
        :type: datetime
        """

        self._last_trade_time_stamp = last_trade_time_stamp

    @property
    def low(self):
        """Gets the low of this MdQuoteItemVO.  # noqa: E501


        :return: The low of this MdQuoteItemVO.  # noqa: E501
        :rtype: float
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this MdQuoteItemVO.


        :param low: The low of this MdQuoteItemVO.  # noqa: E501
        :type: float
        """

        self._low = low

    @property
    def market_cap(self):
        """Gets the market_cap of this MdQuoteItemVO.  # noqa: E501


        :return: The market_cap of this MdQuoteItemVO.  # noqa: E501
        :rtype: str
        """
        return self._market_cap

    @market_cap.setter
    def market_cap(self, market_cap):
        """Sets the market_cap of this MdQuoteItemVO.


        :param market_cap: The market_cap of this MdQuoteItemVO.  # noqa: E501
        :type: str
        """

        self._market_cap = market_cap

    @property
    def nucleus_security_id(self):
        """Gets the nucleus_security_id of this MdQuoteItemVO.  # noqa: E501


        :return: The nucleus_security_id of this MdQuoteItemVO.  # noqa: E501
        :rtype: str
        """
        return self._nucleus_security_id

    @nucleus_security_id.setter
    def nucleus_security_id(self, nucleus_security_id):
        """Sets the nucleus_security_id of this MdQuoteItemVO.


        :param nucleus_security_id: The nucleus_security_id of this MdQuoteItemVO.  # noqa: E501
        :type: str
        """

        self._nucleus_security_id = nucleus_security_id

    @property
    def open(self):
        """Gets the open of this MdQuoteItemVO.  # noqa: E501


        :return: The open of this MdQuoteItemVO.  # noqa: E501
        :rtype: float
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this MdQuoteItemVO.


        :param open: The open of this MdQuoteItemVO.  # noqa: E501
        :type: float
        """

        self._open = open

    @property
    def prev_close(self):
        """Gets the prev_close of this MdQuoteItemVO.  # noqa: E501


        :return: The prev_close of this MdQuoteItemVO.  # noqa: E501
        :rtype: float
        """
        return self._prev_close

    @prev_close.setter
    def prev_close(self, prev_close):
        """Sets the prev_close of this MdQuoteItemVO.


        :param prev_close: The prev_close of this MdQuoteItemVO.  # noqa: E501
        :type: float
        """

        self._prev_close = prev_close

    @property
    def ticker(self):
        """Gets the ticker of this MdQuoteItemVO.  # noqa: E501


        :return: The ticker of this MdQuoteItemVO.  # noqa: E501
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this MdQuoteItemVO.


        :param ticker: The ticker of this MdQuoteItemVO.  # noqa: E501
        :type: str
        """

        self._ticker = ticker

    @property
    def volume(self):
        """Gets the volume of this MdQuoteItemVO.  # noqa: E501


        :return: The volume of this MdQuoteItemVO.  # noqa: E501
        :rtype: int
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this MdQuoteItemVO.


        :param volume: The volume of this MdQuoteItemVO.  # noqa: E501
        :type: int
        """

        self._volume = volume

    @property
    def year_range(self):
        """Gets the year_range of this MdQuoteItemVO.  # noqa: E501


        :return: The year_range of this MdQuoteItemVO.  # noqa: E501
        :rtype: str
        """
        return self._year_range

    @year_range.setter
    def year_range(self, year_range):
        """Sets the year_range of this MdQuoteItemVO.


        :param year_range: The year_range of this MdQuoteItemVO.  # noqa: E501
        :type: str
        """

        self._year_range = year_range

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MdQuoteItemVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MdQuoteItemVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
