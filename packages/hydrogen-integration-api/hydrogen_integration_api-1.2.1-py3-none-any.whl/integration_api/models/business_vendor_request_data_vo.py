# coding: utf-8

"""
    Hydrogen Integration API

    The Hydrogen Integration API  # noqa: E501

    OpenAPI spec version: 1.2.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BusinessVendorRequestDataVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'business_addresses': 'list[BusinessAddress]',
        'dba_name': 'str',
        'email': 'str',
        'identification_number': 'str',
        'identification_number_type': 'str',
        'incorporation_date': 'date',
        'incorporation_state': 'str',
        'is_public': 'bool',
        'legal_name': 'str',
        'legal_structure': 'str',
        'metadata': 'dict(str, str)',
        'owners': 'list[Ownership]',
        'phone_number': 'str',
        'ticker': 'str',
        'website': 'str'
    }

    attribute_map = {
        'business_addresses': 'business_addresses',
        'dba_name': 'dba_name',
        'email': 'email',
        'identification_number': 'identification_number',
        'identification_number_type': 'identification_number_type',
        'incorporation_date': 'incorporation_date',
        'incorporation_state': 'incorporation_state',
        'is_public': 'is_public',
        'legal_name': 'legal_name',
        'legal_structure': 'legal_structure',
        'metadata': 'metadata',
        'owners': 'owners',
        'phone_number': 'phone_number',
        'ticker': 'ticker',
        'website': 'website'
    }

    def __init__(self, business_addresses=None, dba_name=None, email=None, identification_number=None, identification_number_type=None, incorporation_date=None, incorporation_state=None, is_public=None, legal_name=None, legal_structure=None, metadata=None, owners=None, phone_number=None, ticker=None, website=None):  # noqa: E501
        """BusinessVendorRequestDataVO - a model defined in Swagger"""  # noqa: E501

        self._business_addresses = None
        self._dba_name = None
        self._email = None
        self._identification_number = None
        self._identification_number_type = None
        self._incorporation_date = None
        self._incorporation_state = None
        self._is_public = None
        self._legal_name = None
        self._legal_structure = None
        self._metadata = None
        self._owners = None
        self._phone_number = None
        self._ticker = None
        self._website = None
        self.discriminator = None

        if business_addresses is not None:
            self.business_addresses = business_addresses
        if dba_name is not None:
            self.dba_name = dba_name
        if email is not None:
            self.email = email
        if identification_number is not None:
            self.identification_number = identification_number
        if identification_number_type is not None:
            self.identification_number_type = identification_number_type
        if incorporation_date is not None:
            self.incorporation_date = incorporation_date
        if incorporation_state is not None:
            self.incorporation_state = incorporation_state
        if is_public is not None:
            self.is_public = is_public
        if legal_name is not None:
            self.legal_name = legal_name
        if legal_structure is not None:
            self.legal_structure = legal_structure
        if metadata is not None:
            self.metadata = metadata
        if owners is not None:
            self.owners = owners
        if phone_number is not None:
            self.phone_number = phone_number
        if ticker is not None:
            self.ticker = ticker
        if website is not None:
            self.website = website

    @property
    def business_addresses(self):
        """Gets the business_addresses of this BusinessVendorRequestDataVO.  # noqa: E501


        :return: The business_addresses of this BusinessVendorRequestDataVO.  # noqa: E501
        :rtype: list[BusinessAddress]
        """
        return self._business_addresses

    @business_addresses.setter
    def business_addresses(self, business_addresses):
        """Sets the business_addresses of this BusinessVendorRequestDataVO.


        :param business_addresses: The business_addresses of this BusinessVendorRequestDataVO.  # noqa: E501
        :type: list[BusinessAddress]
        """

        self._business_addresses = business_addresses

    @property
    def dba_name(self):
        """Gets the dba_name of this BusinessVendorRequestDataVO.  # noqa: E501


        :return: The dba_name of this BusinessVendorRequestDataVO.  # noqa: E501
        :rtype: str
        """
        return self._dba_name

    @dba_name.setter
    def dba_name(self, dba_name):
        """Sets the dba_name of this BusinessVendorRequestDataVO.


        :param dba_name: The dba_name of this BusinessVendorRequestDataVO.  # noqa: E501
        :type: str
        """

        self._dba_name = dba_name

    @property
    def email(self):
        """Gets the email of this BusinessVendorRequestDataVO.  # noqa: E501


        :return: The email of this BusinessVendorRequestDataVO.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this BusinessVendorRequestDataVO.


        :param email: The email of this BusinessVendorRequestDataVO.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def identification_number(self):
        """Gets the identification_number of this BusinessVendorRequestDataVO.  # noqa: E501


        :return: The identification_number of this BusinessVendorRequestDataVO.  # noqa: E501
        :rtype: str
        """
        return self._identification_number

    @identification_number.setter
    def identification_number(self, identification_number):
        """Sets the identification_number of this BusinessVendorRequestDataVO.


        :param identification_number: The identification_number of this BusinessVendorRequestDataVO.  # noqa: E501
        :type: str
        """

        self._identification_number = identification_number

    @property
    def identification_number_type(self):
        """Gets the identification_number_type of this BusinessVendorRequestDataVO.  # noqa: E501


        :return: The identification_number_type of this BusinessVendorRequestDataVO.  # noqa: E501
        :rtype: str
        """
        return self._identification_number_type

    @identification_number_type.setter
    def identification_number_type(self, identification_number_type):
        """Sets the identification_number_type of this BusinessVendorRequestDataVO.


        :param identification_number_type: The identification_number_type of this BusinessVendorRequestDataVO.  # noqa: E501
        :type: str
        """

        self._identification_number_type = identification_number_type

    @property
    def incorporation_date(self):
        """Gets the incorporation_date of this BusinessVendorRequestDataVO.  # noqa: E501


        :return: The incorporation_date of this BusinessVendorRequestDataVO.  # noqa: E501
        :rtype: date
        """
        return self._incorporation_date

    @incorporation_date.setter
    def incorporation_date(self, incorporation_date):
        """Sets the incorporation_date of this BusinessVendorRequestDataVO.


        :param incorporation_date: The incorporation_date of this BusinessVendorRequestDataVO.  # noqa: E501
        :type: date
        """

        self._incorporation_date = incorporation_date

    @property
    def incorporation_state(self):
        """Gets the incorporation_state of this BusinessVendorRequestDataVO.  # noqa: E501


        :return: The incorporation_state of this BusinessVendorRequestDataVO.  # noqa: E501
        :rtype: str
        """
        return self._incorporation_state

    @incorporation_state.setter
    def incorporation_state(self, incorporation_state):
        """Sets the incorporation_state of this BusinessVendorRequestDataVO.


        :param incorporation_state: The incorporation_state of this BusinessVendorRequestDataVO.  # noqa: E501
        :type: str
        """

        self._incorporation_state = incorporation_state

    @property
    def is_public(self):
        """Gets the is_public of this BusinessVendorRequestDataVO.  # noqa: E501


        :return: The is_public of this BusinessVendorRequestDataVO.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this BusinessVendorRequestDataVO.


        :param is_public: The is_public of this BusinessVendorRequestDataVO.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def legal_name(self):
        """Gets the legal_name of this BusinessVendorRequestDataVO.  # noqa: E501


        :return: The legal_name of this BusinessVendorRequestDataVO.  # noqa: E501
        :rtype: str
        """
        return self._legal_name

    @legal_name.setter
    def legal_name(self, legal_name):
        """Sets the legal_name of this BusinessVendorRequestDataVO.


        :param legal_name: The legal_name of this BusinessVendorRequestDataVO.  # noqa: E501
        :type: str
        """

        self._legal_name = legal_name

    @property
    def legal_structure(self):
        """Gets the legal_structure of this BusinessVendorRequestDataVO.  # noqa: E501


        :return: The legal_structure of this BusinessVendorRequestDataVO.  # noqa: E501
        :rtype: str
        """
        return self._legal_structure

    @legal_structure.setter
    def legal_structure(self, legal_structure):
        """Sets the legal_structure of this BusinessVendorRequestDataVO.


        :param legal_structure: The legal_structure of this BusinessVendorRequestDataVO.  # noqa: E501
        :type: str
        """

        self._legal_structure = legal_structure

    @property
    def metadata(self):
        """Gets the metadata of this BusinessVendorRequestDataVO.  # noqa: E501


        :return: The metadata of this BusinessVendorRequestDataVO.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this BusinessVendorRequestDataVO.


        :param metadata: The metadata of this BusinessVendorRequestDataVO.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    @property
    def owners(self):
        """Gets the owners of this BusinessVendorRequestDataVO.  # noqa: E501


        :return: The owners of this BusinessVendorRequestDataVO.  # noqa: E501
        :rtype: list[Ownership]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this BusinessVendorRequestDataVO.


        :param owners: The owners of this BusinessVendorRequestDataVO.  # noqa: E501
        :type: list[Ownership]
        """

        self._owners = owners

    @property
    def phone_number(self):
        """Gets the phone_number of this BusinessVendorRequestDataVO.  # noqa: E501


        :return: The phone_number of this BusinessVendorRequestDataVO.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this BusinessVendorRequestDataVO.


        :param phone_number: The phone_number of this BusinessVendorRequestDataVO.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def ticker(self):
        """Gets the ticker of this BusinessVendorRequestDataVO.  # noqa: E501


        :return: The ticker of this BusinessVendorRequestDataVO.  # noqa: E501
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this BusinessVendorRequestDataVO.


        :param ticker: The ticker of this BusinessVendorRequestDataVO.  # noqa: E501
        :type: str
        """

        self._ticker = ticker

    @property
    def website(self):
        """Gets the website of this BusinessVendorRequestDataVO.  # noqa: E501


        :return: The website of this BusinessVendorRequestDataVO.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this BusinessVendorRequestDataVO.


        :param website: The website of this BusinessVendorRequestDataVO.  # noqa: E501
        :type: str
        """

        self._website = website

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BusinessVendorRequestDataVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BusinessVendorRequestDataVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
