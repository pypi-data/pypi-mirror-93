# coding: utf-8

"""
    Hydrogen Integration API

    The Hydrogen Integration API  # noqa: E501

    OpenAPI spec version: 1.2.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BaasStatementVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'statement_content': 'object',
        'statement_content_type': 'str',
        'statement_date': 'str',
        'statement_link': 'str',
        'statement_link_expiry': 'str',
        'statement_name': 'str'
    }

    attribute_map = {
        'statement_content': 'statement_content',
        'statement_content_type': 'statement_content_type',
        'statement_date': 'statement_date',
        'statement_link': 'statement_link',
        'statement_link_expiry': 'statement_link_expiry',
        'statement_name': 'statement_name'
    }

    def __init__(self, statement_content=None, statement_content_type=None, statement_date=None, statement_link=None, statement_link_expiry=None, statement_name=None):  # noqa: E501
        """BaasStatementVO - a model defined in Swagger"""  # noqa: E501

        self._statement_content = None
        self._statement_content_type = None
        self._statement_date = None
        self._statement_link = None
        self._statement_link_expiry = None
        self._statement_name = None
        self.discriminator = None

        if statement_content is not None:
            self.statement_content = statement_content
        if statement_content_type is not None:
            self.statement_content_type = statement_content_type
        if statement_date is not None:
            self.statement_date = statement_date
        if statement_link is not None:
            self.statement_link = statement_link
        if statement_link_expiry is not None:
            self.statement_link_expiry = statement_link_expiry
        if statement_name is not None:
            self.statement_name = statement_name

    @property
    def statement_content(self):
        """Gets the statement_content of this BaasStatementVO.  # noqa: E501


        :return: The statement_content of this BaasStatementVO.  # noqa: E501
        :rtype: object
        """
        return self._statement_content

    @statement_content.setter
    def statement_content(self, statement_content):
        """Sets the statement_content of this BaasStatementVO.


        :param statement_content: The statement_content of this BaasStatementVO.  # noqa: E501
        :type: object
        """

        self._statement_content = statement_content

    @property
    def statement_content_type(self):
        """Gets the statement_content_type of this BaasStatementVO.  # noqa: E501


        :return: The statement_content_type of this BaasStatementVO.  # noqa: E501
        :rtype: str
        """
        return self._statement_content_type

    @statement_content_type.setter
    def statement_content_type(self, statement_content_type):
        """Sets the statement_content_type of this BaasStatementVO.


        :param statement_content_type: The statement_content_type of this BaasStatementVO.  # noqa: E501
        :type: str
        """

        self._statement_content_type = statement_content_type

    @property
    def statement_date(self):
        """Gets the statement_date of this BaasStatementVO.  # noqa: E501


        :return: The statement_date of this BaasStatementVO.  # noqa: E501
        :rtype: str
        """
        return self._statement_date

    @statement_date.setter
    def statement_date(self, statement_date):
        """Sets the statement_date of this BaasStatementVO.


        :param statement_date: The statement_date of this BaasStatementVO.  # noqa: E501
        :type: str
        """

        self._statement_date = statement_date

    @property
    def statement_link(self):
        """Gets the statement_link of this BaasStatementVO.  # noqa: E501


        :return: The statement_link of this BaasStatementVO.  # noqa: E501
        :rtype: str
        """
        return self._statement_link

    @statement_link.setter
    def statement_link(self, statement_link):
        """Sets the statement_link of this BaasStatementVO.


        :param statement_link: The statement_link of this BaasStatementVO.  # noqa: E501
        :type: str
        """

        self._statement_link = statement_link

    @property
    def statement_link_expiry(self):
        """Gets the statement_link_expiry of this BaasStatementVO.  # noqa: E501


        :return: The statement_link_expiry of this BaasStatementVO.  # noqa: E501
        :rtype: str
        """
        return self._statement_link_expiry

    @statement_link_expiry.setter
    def statement_link_expiry(self, statement_link_expiry):
        """Sets the statement_link_expiry of this BaasStatementVO.


        :param statement_link_expiry: The statement_link_expiry of this BaasStatementVO.  # noqa: E501
        :type: str
        """

        self._statement_link_expiry = statement_link_expiry

    @property
    def statement_name(self):
        """Gets the statement_name of this BaasStatementVO.  # noqa: E501


        :return: The statement_name of this BaasStatementVO.  # noqa: E501
        :rtype: str
        """
        return self._statement_name

    @statement_name.setter
    def statement_name(self, statement_name):
        """Sets the statement_name of this BaasStatementVO.


        :param statement_name: The statement_name of this BaasStatementVO.  # noqa: E501
        :type: str
        """

        self._statement_name = statement_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaasStatementVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaasStatementVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
