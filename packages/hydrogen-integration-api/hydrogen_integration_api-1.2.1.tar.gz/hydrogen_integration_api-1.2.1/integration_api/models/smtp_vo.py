# coding: utf-8

"""
    Hydrogen Integration API

    The Hydrogen Integration API  # noqa: E501

    OpenAPI spec version: 1.2.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SmtpVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'body': 'str',
        'business_name': 'str',
        'first_name': 'str',
        '_from': 'str',
        'last_name': 'str',
        'nucleus_business_id': 'str',
        'nucleus_client_id': 'str',
        'reply_to': 'str',
        'subject': 'str',
        'to': 'str'
    }

    attribute_map = {
        'body': 'body',
        'business_name': 'business_name',
        'first_name': 'first_name',
        '_from': 'from',
        'last_name': 'last_name',
        'nucleus_business_id': 'nucleus_business_id',
        'nucleus_client_id': 'nucleus_client_id',
        'reply_to': 'reply_to',
        'subject': 'subject',
        'to': 'to'
    }

    def __init__(self, body=None, business_name=None, first_name=None, _from=None, last_name=None, nucleus_business_id=None, nucleus_client_id=None, reply_to=None, subject=None, to=None):  # noqa: E501
        """SmtpVO - a model defined in Swagger"""  # noqa: E501

        self._body = None
        self._business_name = None
        self._first_name = None
        self.__from = None
        self._last_name = None
        self._nucleus_business_id = None
        self._nucleus_client_id = None
        self._reply_to = None
        self._subject = None
        self._to = None
        self.discriminator = None

        if body is not None:
            self.body = body
        if business_name is not None:
            self.business_name = business_name
        if first_name is not None:
            self.first_name = first_name
        if _from is not None:
            self._from = _from
        if last_name is not None:
            self.last_name = last_name
        if nucleus_business_id is not None:
            self.nucleus_business_id = nucleus_business_id
        if nucleus_client_id is not None:
            self.nucleus_client_id = nucleus_client_id
        if reply_to is not None:
            self.reply_to = reply_to
        if subject is not None:
            self.subject = subject
        if to is not None:
            self.to = to

    @property
    def body(self):
        """Gets the body of this SmtpVO.  # noqa: E501


        :return: The body of this SmtpVO.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this SmtpVO.


        :param body: The body of this SmtpVO.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def business_name(self):
        """Gets the business_name of this SmtpVO.  # noqa: E501


        :return: The business_name of this SmtpVO.  # noqa: E501
        :rtype: str
        """
        return self._business_name

    @business_name.setter
    def business_name(self, business_name):
        """Sets the business_name of this SmtpVO.


        :param business_name: The business_name of this SmtpVO.  # noqa: E501
        :type: str
        """

        self._business_name = business_name

    @property
    def first_name(self):
        """Gets the first_name of this SmtpVO.  # noqa: E501


        :return: The first_name of this SmtpVO.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this SmtpVO.


        :param first_name: The first_name of this SmtpVO.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def _from(self):
        """Gets the _from of this SmtpVO.  # noqa: E501


        :return: The _from of this SmtpVO.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this SmtpVO.


        :param _from: The _from of this SmtpVO.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def last_name(self):
        """Gets the last_name of this SmtpVO.  # noqa: E501


        :return: The last_name of this SmtpVO.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this SmtpVO.


        :param last_name: The last_name of this SmtpVO.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def nucleus_business_id(self):
        """Gets the nucleus_business_id of this SmtpVO.  # noqa: E501


        :return: The nucleus_business_id of this SmtpVO.  # noqa: E501
        :rtype: str
        """
        return self._nucleus_business_id

    @nucleus_business_id.setter
    def nucleus_business_id(self, nucleus_business_id):
        """Sets the nucleus_business_id of this SmtpVO.


        :param nucleus_business_id: The nucleus_business_id of this SmtpVO.  # noqa: E501
        :type: str
        """

        self._nucleus_business_id = nucleus_business_id

    @property
    def nucleus_client_id(self):
        """Gets the nucleus_client_id of this SmtpVO.  # noqa: E501


        :return: The nucleus_client_id of this SmtpVO.  # noqa: E501
        :rtype: str
        """
        return self._nucleus_client_id

    @nucleus_client_id.setter
    def nucleus_client_id(self, nucleus_client_id):
        """Sets the nucleus_client_id of this SmtpVO.


        :param nucleus_client_id: The nucleus_client_id of this SmtpVO.  # noqa: E501
        :type: str
        """

        self._nucleus_client_id = nucleus_client_id

    @property
    def reply_to(self):
        """Gets the reply_to of this SmtpVO.  # noqa: E501


        :return: The reply_to of this SmtpVO.  # noqa: E501
        :rtype: str
        """
        return self._reply_to

    @reply_to.setter
    def reply_to(self, reply_to):
        """Sets the reply_to of this SmtpVO.


        :param reply_to: The reply_to of this SmtpVO.  # noqa: E501
        :type: str
        """

        self._reply_to = reply_to

    @property
    def subject(self):
        """Gets the subject of this SmtpVO.  # noqa: E501


        :return: The subject of this SmtpVO.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SmtpVO.


        :param subject: The subject of this SmtpVO.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def to(self):
        """Gets the to of this SmtpVO.  # noqa: E501


        :return: The to of this SmtpVO.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this SmtpVO.


        :param to: The to of this SmtpVO.  # noqa: E501
        :type: str
        """

        self._to = to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SmtpVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmtpVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
