# coding: utf-8

"""
    Hydrogen Integration API

    The Hydrogen Integration API  # noqa: E501

    OpenAPI spec version: 1.2.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Transaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_amount': 'float',
        'account_balance': 'float',
        'account_type': 'str',
        'comment': 'str',
        'dividend': 'Dividend',
        'dividend_tax': 'DividendTax',
        'dnb': 'bool',
        'fee_base': 'float',
        'fee_exchange': 'float',
        'fee_sec': 'float',
        'fee_taf': 'float',
        'fee_xtra_shares': 'float',
        'fill_px': 'float',
        'fill_qty': 'float',
        'fin_tran_id': 'str',
        'fin_tran_type_id': 'str',
        'instrument': 'Instrument',
        'merger_acquisition': 'MergerAcquisition',
        'order_id': 'str',
        'position_delta': 'float',
        'system_amount': 'float',
        'tran_when': 'datetime'
    }

    attribute_map = {
        'account_amount': 'account_amount',
        'account_balance': 'account_balance',
        'account_type': 'account_type',
        'comment': 'comment',
        'dividend': 'dividend',
        'dividend_tax': 'dividend_tax',
        'dnb': 'dnb',
        'fee_base': 'fee_base',
        'fee_exchange': 'fee_exchange',
        'fee_sec': 'fee_sec',
        'fee_taf': 'fee_taf',
        'fee_xtra_shares': 'fee_xtra_shares',
        'fill_px': 'fill_px',
        'fill_qty': 'fill_qty',
        'fin_tran_id': 'fin_tran_id',
        'fin_tran_type_id': 'fin_tran_type_id',
        'instrument': 'instrument',
        'merger_acquisition': 'merger_acquisition',
        'order_id': 'order_id',
        'position_delta': 'position_delta',
        'system_amount': 'system_amount',
        'tran_when': 'tran_when'
    }

    def __init__(self, account_amount=None, account_balance=None, account_type=None, comment=None, dividend=None, dividend_tax=None, dnb=None, fee_base=None, fee_exchange=None, fee_sec=None, fee_taf=None, fee_xtra_shares=None, fill_px=None, fill_qty=None, fin_tran_id=None, fin_tran_type_id=None, instrument=None, merger_acquisition=None, order_id=None, position_delta=None, system_amount=None, tran_when=None):  # noqa: E501
        """Transaction - a model defined in Swagger"""  # noqa: E501

        self._account_amount = None
        self._account_balance = None
        self._account_type = None
        self._comment = None
        self._dividend = None
        self._dividend_tax = None
        self._dnb = None
        self._fee_base = None
        self._fee_exchange = None
        self._fee_sec = None
        self._fee_taf = None
        self._fee_xtra_shares = None
        self._fill_px = None
        self._fill_qty = None
        self._fin_tran_id = None
        self._fin_tran_type_id = None
        self._instrument = None
        self._merger_acquisition = None
        self._order_id = None
        self._position_delta = None
        self._system_amount = None
        self._tran_when = None
        self.discriminator = None

        if account_amount is not None:
            self.account_amount = account_amount
        if account_balance is not None:
            self.account_balance = account_balance
        if account_type is not None:
            self.account_type = account_type
        if comment is not None:
            self.comment = comment
        if dividend is not None:
            self.dividend = dividend
        if dividend_tax is not None:
            self.dividend_tax = dividend_tax
        if dnb is not None:
            self.dnb = dnb
        if fee_base is not None:
            self.fee_base = fee_base
        if fee_exchange is not None:
            self.fee_exchange = fee_exchange
        if fee_sec is not None:
            self.fee_sec = fee_sec
        if fee_taf is not None:
            self.fee_taf = fee_taf
        if fee_xtra_shares is not None:
            self.fee_xtra_shares = fee_xtra_shares
        if fill_px is not None:
            self.fill_px = fill_px
        if fill_qty is not None:
            self.fill_qty = fill_qty
        if fin_tran_id is not None:
            self.fin_tran_id = fin_tran_id
        if fin_tran_type_id is not None:
            self.fin_tran_type_id = fin_tran_type_id
        if instrument is not None:
            self.instrument = instrument
        if merger_acquisition is not None:
            self.merger_acquisition = merger_acquisition
        if order_id is not None:
            self.order_id = order_id
        if position_delta is not None:
            self.position_delta = position_delta
        if system_amount is not None:
            self.system_amount = system_amount
        if tran_when is not None:
            self.tran_when = tran_when

    @property
    def account_amount(self):
        """Gets the account_amount of this Transaction.  # noqa: E501


        :return: The account_amount of this Transaction.  # noqa: E501
        :rtype: float
        """
        return self._account_amount

    @account_amount.setter
    def account_amount(self, account_amount):
        """Sets the account_amount of this Transaction.


        :param account_amount: The account_amount of this Transaction.  # noqa: E501
        :type: float
        """

        self._account_amount = account_amount

    @property
    def account_balance(self):
        """Gets the account_balance of this Transaction.  # noqa: E501


        :return: The account_balance of this Transaction.  # noqa: E501
        :rtype: float
        """
        return self._account_balance

    @account_balance.setter
    def account_balance(self, account_balance):
        """Sets the account_balance of this Transaction.


        :param account_balance: The account_balance of this Transaction.  # noqa: E501
        :type: float
        """

        self._account_balance = account_balance

    @property
    def account_type(self):
        """Gets the account_type of this Transaction.  # noqa: E501


        :return: The account_type of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this Transaction.


        :param account_type: The account_type of this Transaction.  # noqa: E501
        :type: str
        """

        self._account_type = account_type

    @property
    def comment(self):
        """Gets the comment of this Transaction.  # noqa: E501


        :return: The comment of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Transaction.


        :param comment: The comment of this Transaction.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def dividend(self):
        """Gets the dividend of this Transaction.  # noqa: E501


        :return: The dividend of this Transaction.  # noqa: E501
        :rtype: Dividend
        """
        return self._dividend

    @dividend.setter
    def dividend(self, dividend):
        """Sets the dividend of this Transaction.


        :param dividend: The dividend of this Transaction.  # noqa: E501
        :type: Dividend
        """

        self._dividend = dividend

    @property
    def dividend_tax(self):
        """Gets the dividend_tax of this Transaction.  # noqa: E501


        :return: The dividend_tax of this Transaction.  # noqa: E501
        :rtype: DividendTax
        """
        return self._dividend_tax

    @dividend_tax.setter
    def dividend_tax(self, dividend_tax):
        """Sets the dividend_tax of this Transaction.


        :param dividend_tax: The dividend_tax of this Transaction.  # noqa: E501
        :type: DividendTax
        """

        self._dividend_tax = dividend_tax

    @property
    def dnb(self):
        """Gets the dnb of this Transaction.  # noqa: E501


        :return: The dnb of this Transaction.  # noqa: E501
        :rtype: bool
        """
        return self._dnb

    @dnb.setter
    def dnb(self, dnb):
        """Sets the dnb of this Transaction.


        :param dnb: The dnb of this Transaction.  # noqa: E501
        :type: bool
        """

        self._dnb = dnb

    @property
    def fee_base(self):
        """Gets the fee_base of this Transaction.  # noqa: E501


        :return: The fee_base of this Transaction.  # noqa: E501
        :rtype: float
        """
        return self._fee_base

    @fee_base.setter
    def fee_base(self, fee_base):
        """Sets the fee_base of this Transaction.


        :param fee_base: The fee_base of this Transaction.  # noqa: E501
        :type: float
        """

        self._fee_base = fee_base

    @property
    def fee_exchange(self):
        """Gets the fee_exchange of this Transaction.  # noqa: E501


        :return: The fee_exchange of this Transaction.  # noqa: E501
        :rtype: float
        """
        return self._fee_exchange

    @fee_exchange.setter
    def fee_exchange(self, fee_exchange):
        """Sets the fee_exchange of this Transaction.


        :param fee_exchange: The fee_exchange of this Transaction.  # noqa: E501
        :type: float
        """

        self._fee_exchange = fee_exchange

    @property
    def fee_sec(self):
        """Gets the fee_sec of this Transaction.  # noqa: E501


        :return: The fee_sec of this Transaction.  # noqa: E501
        :rtype: float
        """
        return self._fee_sec

    @fee_sec.setter
    def fee_sec(self, fee_sec):
        """Sets the fee_sec of this Transaction.


        :param fee_sec: The fee_sec of this Transaction.  # noqa: E501
        :type: float
        """

        self._fee_sec = fee_sec

    @property
    def fee_taf(self):
        """Gets the fee_taf of this Transaction.  # noqa: E501


        :return: The fee_taf of this Transaction.  # noqa: E501
        :rtype: float
        """
        return self._fee_taf

    @fee_taf.setter
    def fee_taf(self, fee_taf):
        """Sets the fee_taf of this Transaction.


        :param fee_taf: The fee_taf of this Transaction.  # noqa: E501
        :type: float
        """

        self._fee_taf = fee_taf

    @property
    def fee_xtra_shares(self):
        """Gets the fee_xtra_shares of this Transaction.  # noqa: E501


        :return: The fee_xtra_shares of this Transaction.  # noqa: E501
        :rtype: float
        """
        return self._fee_xtra_shares

    @fee_xtra_shares.setter
    def fee_xtra_shares(self, fee_xtra_shares):
        """Sets the fee_xtra_shares of this Transaction.


        :param fee_xtra_shares: The fee_xtra_shares of this Transaction.  # noqa: E501
        :type: float
        """

        self._fee_xtra_shares = fee_xtra_shares

    @property
    def fill_px(self):
        """Gets the fill_px of this Transaction.  # noqa: E501


        :return: The fill_px of this Transaction.  # noqa: E501
        :rtype: float
        """
        return self._fill_px

    @fill_px.setter
    def fill_px(self, fill_px):
        """Sets the fill_px of this Transaction.


        :param fill_px: The fill_px of this Transaction.  # noqa: E501
        :type: float
        """

        self._fill_px = fill_px

    @property
    def fill_qty(self):
        """Gets the fill_qty of this Transaction.  # noqa: E501


        :return: The fill_qty of this Transaction.  # noqa: E501
        :rtype: float
        """
        return self._fill_qty

    @fill_qty.setter
    def fill_qty(self, fill_qty):
        """Sets the fill_qty of this Transaction.


        :param fill_qty: The fill_qty of this Transaction.  # noqa: E501
        :type: float
        """

        self._fill_qty = fill_qty

    @property
    def fin_tran_id(self):
        """Gets the fin_tran_id of this Transaction.  # noqa: E501


        :return: The fin_tran_id of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._fin_tran_id

    @fin_tran_id.setter
    def fin_tran_id(self, fin_tran_id):
        """Sets the fin_tran_id of this Transaction.


        :param fin_tran_id: The fin_tran_id of this Transaction.  # noqa: E501
        :type: str
        """

        self._fin_tran_id = fin_tran_id

    @property
    def fin_tran_type_id(self):
        """Gets the fin_tran_type_id of this Transaction.  # noqa: E501


        :return: The fin_tran_type_id of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._fin_tran_type_id

    @fin_tran_type_id.setter
    def fin_tran_type_id(self, fin_tran_type_id):
        """Sets the fin_tran_type_id of this Transaction.


        :param fin_tran_type_id: The fin_tran_type_id of this Transaction.  # noqa: E501
        :type: str
        """

        self._fin_tran_type_id = fin_tran_type_id

    @property
    def instrument(self):
        """Gets the instrument of this Transaction.  # noqa: E501


        :return: The instrument of this Transaction.  # noqa: E501
        :rtype: Instrument
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this Transaction.


        :param instrument: The instrument of this Transaction.  # noqa: E501
        :type: Instrument
        """

        self._instrument = instrument

    @property
    def merger_acquisition(self):
        """Gets the merger_acquisition of this Transaction.  # noqa: E501


        :return: The merger_acquisition of this Transaction.  # noqa: E501
        :rtype: MergerAcquisition
        """
        return self._merger_acquisition

    @merger_acquisition.setter
    def merger_acquisition(self, merger_acquisition):
        """Sets the merger_acquisition of this Transaction.


        :param merger_acquisition: The merger_acquisition of this Transaction.  # noqa: E501
        :type: MergerAcquisition
        """

        self._merger_acquisition = merger_acquisition

    @property
    def order_id(self):
        """Gets the order_id of this Transaction.  # noqa: E501


        :return: The order_id of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this Transaction.


        :param order_id: The order_id of this Transaction.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def position_delta(self):
        """Gets the position_delta of this Transaction.  # noqa: E501


        :return: The position_delta of this Transaction.  # noqa: E501
        :rtype: float
        """
        return self._position_delta

    @position_delta.setter
    def position_delta(self, position_delta):
        """Sets the position_delta of this Transaction.


        :param position_delta: The position_delta of this Transaction.  # noqa: E501
        :type: float
        """

        self._position_delta = position_delta

    @property
    def system_amount(self):
        """Gets the system_amount of this Transaction.  # noqa: E501


        :return: The system_amount of this Transaction.  # noqa: E501
        :rtype: float
        """
        return self._system_amount

    @system_amount.setter
    def system_amount(self, system_amount):
        """Sets the system_amount of this Transaction.


        :param system_amount: The system_amount of this Transaction.  # noqa: E501
        :type: float
        """

        self._system_amount = system_amount

    @property
    def tran_when(self):
        """Gets the tran_when of this Transaction.  # noqa: E501


        :return: The tran_when of this Transaction.  # noqa: E501
        :rtype: datetime
        """
        return self._tran_when

    @tran_when.setter
    def tran_when(self, tran_when):
        """Sets the tran_when of this Transaction.


        :param tran_when: The tran_when of this Transaction.  # noqa: E501
        :type: datetime
        """

        self._tran_when = tran_when

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Transaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
