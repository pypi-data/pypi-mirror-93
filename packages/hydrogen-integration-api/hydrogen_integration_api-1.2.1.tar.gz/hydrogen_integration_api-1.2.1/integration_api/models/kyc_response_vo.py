# coding: utf-8

"""
    Hydrogen Integration API

    The Hydrogen Integration API  # noqa: E501

    OpenAPI spec version: 1.2.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class KycResponseVo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create_date': 'datetime',
        'kyc_status': 'str',
        'kyc_type': 'str',
        'nucleus_business_id': 'str',
        'nucleus_client_id': 'str',
        'nucleus_document_id': 'str',
        'product': 'str',
        'update_date': 'datetime',
        'vendor_name': 'str',
        'vendor_request_data': 'KycVendorRequestDataVO',
        'vendor_response': 'object'
    }

    attribute_map = {
        'create_date': 'create_date',
        'kyc_status': 'kyc_status',
        'kyc_type': 'kyc_type',
        'nucleus_business_id': 'nucleus_business_id',
        'nucleus_client_id': 'nucleus_client_id',
        'nucleus_document_id': 'nucleus_document_id',
        'product': 'product',
        'update_date': 'update_date',
        'vendor_name': 'vendor_name',
        'vendor_request_data': 'vendor_request_data',
        'vendor_response': 'vendor_response'
    }

    def __init__(self, create_date=None, kyc_status=None, kyc_type=None, nucleus_business_id=None, nucleus_client_id=None, nucleus_document_id=None, product=None, update_date=None, vendor_name=None, vendor_request_data=None, vendor_response=None):  # noqa: E501
        """KycResponseVo - a model defined in Swagger"""  # noqa: E501

        self._create_date = None
        self._kyc_status = None
        self._kyc_type = None
        self._nucleus_business_id = None
        self._nucleus_client_id = None
        self._nucleus_document_id = None
        self._product = None
        self._update_date = None
        self._vendor_name = None
        self._vendor_request_data = None
        self._vendor_response = None
        self.discriminator = None

        if create_date is not None:
            self.create_date = create_date
        if kyc_status is not None:
            self.kyc_status = kyc_status
        if kyc_type is not None:
            self.kyc_type = kyc_type
        if nucleus_business_id is not None:
            self.nucleus_business_id = nucleus_business_id
        if nucleus_client_id is not None:
            self.nucleus_client_id = nucleus_client_id
        if nucleus_document_id is not None:
            self.nucleus_document_id = nucleus_document_id
        if product is not None:
            self.product = product
        if update_date is not None:
            self.update_date = update_date
        if vendor_name is not None:
            self.vendor_name = vendor_name
        if vendor_request_data is not None:
            self.vendor_request_data = vendor_request_data
        if vendor_response is not None:
            self.vendor_response = vendor_response

    @property
    def create_date(self):
        """Gets the create_date of this KycResponseVo.  # noqa: E501


        :return: The create_date of this KycResponseVo.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this KycResponseVo.


        :param create_date: The create_date of this KycResponseVo.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def kyc_status(self):
        """Gets the kyc_status of this KycResponseVo.  # noqa: E501


        :return: The kyc_status of this KycResponseVo.  # noqa: E501
        :rtype: str
        """
        return self._kyc_status

    @kyc_status.setter
    def kyc_status(self, kyc_status):
        """Sets the kyc_status of this KycResponseVo.


        :param kyc_status: The kyc_status of this KycResponseVo.  # noqa: E501
        :type: str
        """

        self._kyc_status = kyc_status

    @property
    def kyc_type(self):
        """Gets the kyc_type of this KycResponseVo.  # noqa: E501


        :return: The kyc_type of this KycResponseVo.  # noqa: E501
        :rtype: str
        """
        return self._kyc_type

    @kyc_type.setter
    def kyc_type(self, kyc_type):
        """Sets the kyc_type of this KycResponseVo.


        :param kyc_type: The kyc_type of this KycResponseVo.  # noqa: E501
        :type: str
        """

        self._kyc_type = kyc_type

    @property
    def nucleus_business_id(self):
        """Gets the nucleus_business_id of this KycResponseVo.  # noqa: E501


        :return: The nucleus_business_id of this KycResponseVo.  # noqa: E501
        :rtype: str
        """
        return self._nucleus_business_id

    @nucleus_business_id.setter
    def nucleus_business_id(self, nucleus_business_id):
        """Sets the nucleus_business_id of this KycResponseVo.


        :param nucleus_business_id: The nucleus_business_id of this KycResponseVo.  # noqa: E501
        :type: str
        """

        self._nucleus_business_id = nucleus_business_id

    @property
    def nucleus_client_id(self):
        """Gets the nucleus_client_id of this KycResponseVo.  # noqa: E501


        :return: The nucleus_client_id of this KycResponseVo.  # noqa: E501
        :rtype: str
        """
        return self._nucleus_client_id

    @nucleus_client_id.setter
    def nucleus_client_id(self, nucleus_client_id):
        """Sets the nucleus_client_id of this KycResponseVo.


        :param nucleus_client_id: The nucleus_client_id of this KycResponseVo.  # noqa: E501
        :type: str
        """

        self._nucleus_client_id = nucleus_client_id

    @property
    def nucleus_document_id(self):
        """Gets the nucleus_document_id of this KycResponseVo.  # noqa: E501


        :return: The nucleus_document_id of this KycResponseVo.  # noqa: E501
        :rtype: str
        """
        return self._nucleus_document_id

    @nucleus_document_id.setter
    def nucleus_document_id(self, nucleus_document_id):
        """Sets the nucleus_document_id of this KycResponseVo.


        :param nucleus_document_id: The nucleus_document_id of this KycResponseVo.  # noqa: E501
        :type: str
        """

        self._nucleus_document_id = nucleus_document_id

    @property
    def product(self):
        """Gets the product of this KycResponseVo.  # noqa: E501


        :return: The product of this KycResponseVo.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this KycResponseVo.


        :param product: The product of this KycResponseVo.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def update_date(self):
        """Gets the update_date of this KycResponseVo.  # noqa: E501


        :return: The update_date of this KycResponseVo.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this KycResponseVo.


        :param update_date: The update_date of this KycResponseVo.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def vendor_name(self):
        """Gets the vendor_name of this KycResponseVo.  # noqa: E501


        :return: The vendor_name of this KycResponseVo.  # noqa: E501
        :rtype: str
        """
        return self._vendor_name

    @vendor_name.setter
    def vendor_name(self, vendor_name):
        """Sets the vendor_name of this KycResponseVo.


        :param vendor_name: The vendor_name of this KycResponseVo.  # noqa: E501
        :type: str
        """

        self._vendor_name = vendor_name

    @property
    def vendor_request_data(self):
        """Gets the vendor_request_data of this KycResponseVo.  # noqa: E501


        :return: The vendor_request_data of this KycResponseVo.  # noqa: E501
        :rtype: KycVendorRequestDataVO
        """
        return self._vendor_request_data

    @vendor_request_data.setter
    def vendor_request_data(self, vendor_request_data):
        """Sets the vendor_request_data of this KycResponseVo.


        :param vendor_request_data: The vendor_request_data of this KycResponseVo.  # noqa: E501
        :type: KycVendorRequestDataVO
        """

        self._vendor_request_data = vendor_request_data

    @property
    def vendor_response(self):
        """Gets the vendor_response of this KycResponseVo.  # noqa: E501


        :return: The vendor_response of this KycResponseVo.  # noqa: E501
        :rtype: object
        """
        return self._vendor_response

    @vendor_response.setter
    def vendor_response(self, vendor_response):
        """Sets the vendor_response of this KycResponseVo.


        :param vendor_response: The vendor_response of this KycResponseVo.  # noqa: E501
        :type: object
        """

        self._vendor_response = vendor_response

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KycResponseVo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KycResponseVo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
