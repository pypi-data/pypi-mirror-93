# coding: utf-8

"""
    Hydrogen Integration API

    The Hydrogen Integration API  # noqa: E501

    OpenAPI spec version: 1.2.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MdHistoryItemVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'adjusted_price': 'float',
        'currency_code': 'str',
        '_date': 'datetime',
        'nucleus_security_id': 'str',
        'price': 'float',
        'security_price_id': 'str',
        'ticker': 'str'
    }

    attribute_map = {
        'adjusted_price': 'adjusted_price',
        'currency_code': 'currency_code',
        '_date': 'date',
        'nucleus_security_id': 'nucleus_security_id',
        'price': 'price',
        'security_price_id': 'security_price_id',
        'ticker': 'ticker'
    }

    def __init__(self, adjusted_price=None, currency_code=None, _date=None, nucleus_security_id=None, price=None, security_price_id=None, ticker=None):  # noqa: E501
        """MdHistoryItemVO - a model defined in Swagger"""  # noqa: E501

        self._adjusted_price = None
        self._currency_code = None
        self.__date = None
        self._nucleus_security_id = None
        self._price = None
        self._security_price_id = None
        self._ticker = None
        self.discriminator = None

        if adjusted_price is not None:
            self.adjusted_price = adjusted_price
        if currency_code is not None:
            self.currency_code = currency_code
        if _date is not None:
            self._date = _date
        if nucleus_security_id is not None:
            self.nucleus_security_id = nucleus_security_id
        if price is not None:
            self.price = price
        if security_price_id is not None:
            self.security_price_id = security_price_id
        if ticker is not None:
            self.ticker = ticker

    @property
    def adjusted_price(self):
        """Gets the adjusted_price of this MdHistoryItemVO.  # noqa: E501


        :return: The adjusted_price of this MdHistoryItemVO.  # noqa: E501
        :rtype: float
        """
        return self._adjusted_price

    @adjusted_price.setter
    def adjusted_price(self, adjusted_price):
        """Sets the adjusted_price of this MdHistoryItemVO.


        :param adjusted_price: The adjusted_price of this MdHistoryItemVO.  # noqa: E501
        :type: float
        """

        self._adjusted_price = adjusted_price

    @property
    def currency_code(self):
        """Gets the currency_code of this MdHistoryItemVO.  # noqa: E501


        :return: The currency_code of this MdHistoryItemVO.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this MdHistoryItemVO.


        :param currency_code: The currency_code of this MdHistoryItemVO.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def _date(self):
        """Gets the _date of this MdHistoryItemVO.  # noqa: E501


        :return: The _date of this MdHistoryItemVO.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this MdHistoryItemVO.


        :param _date: The _date of this MdHistoryItemVO.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def nucleus_security_id(self):
        """Gets the nucleus_security_id of this MdHistoryItemVO.  # noqa: E501


        :return: The nucleus_security_id of this MdHistoryItemVO.  # noqa: E501
        :rtype: str
        """
        return self._nucleus_security_id

    @nucleus_security_id.setter
    def nucleus_security_id(self, nucleus_security_id):
        """Sets the nucleus_security_id of this MdHistoryItemVO.


        :param nucleus_security_id: The nucleus_security_id of this MdHistoryItemVO.  # noqa: E501
        :type: str
        """

        self._nucleus_security_id = nucleus_security_id

    @property
    def price(self):
        """Gets the price of this MdHistoryItemVO.  # noqa: E501


        :return: The price of this MdHistoryItemVO.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this MdHistoryItemVO.


        :param price: The price of this MdHistoryItemVO.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def security_price_id(self):
        """Gets the security_price_id of this MdHistoryItemVO.  # noqa: E501


        :return: The security_price_id of this MdHistoryItemVO.  # noqa: E501
        :rtype: str
        """
        return self._security_price_id

    @security_price_id.setter
    def security_price_id(self, security_price_id):
        """Sets the security_price_id of this MdHistoryItemVO.


        :param security_price_id: The security_price_id of this MdHistoryItemVO.  # noqa: E501
        :type: str
        """

        self._security_price_id = security_price_id

    @property
    def ticker(self):
        """Gets the ticker of this MdHistoryItemVO.  # noqa: E501


        :return: The ticker of this MdHistoryItemVO.  # noqa: E501
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this MdHistoryItemVO.


        :param ticker: The ticker of this MdHistoryItemVO.  # noqa: E501
        :type: str
        """

        self._ticker = ticker

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MdHistoryItemVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MdHistoryItemVO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
