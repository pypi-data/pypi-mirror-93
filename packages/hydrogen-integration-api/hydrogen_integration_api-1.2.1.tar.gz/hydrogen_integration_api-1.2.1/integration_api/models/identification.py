# coding: utf-8

"""
    Hydrogen Integration API

    The Hydrogen Integration API  # noqa: E501

    OpenAPI spec version: 1.2.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Identification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country_of_issue': 'str',
        'doc_number': 'str',
        'doc_type': 'str',
        'expiry_date': 'date',
        'issue_date': 'date',
        'issuing_authority': 'str',
        'state_of_issue': 'str'
    }

    attribute_map = {
        'country_of_issue': 'country_of_issue',
        'doc_number': 'doc_number',
        'doc_type': 'doc_type',
        'expiry_date': 'expiry_date',
        'issue_date': 'issue_date',
        'issuing_authority': 'issuing_authority',
        'state_of_issue': 'state_of_issue'
    }

    def __init__(self, country_of_issue=None, doc_number=None, doc_type=None, expiry_date=None, issue_date=None, issuing_authority=None, state_of_issue=None):  # noqa: E501
        """Identification - a model defined in Swagger"""  # noqa: E501

        self._country_of_issue = None
        self._doc_number = None
        self._doc_type = None
        self._expiry_date = None
        self._issue_date = None
        self._issuing_authority = None
        self._state_of_issue = None
        self.discriminator = None

        if country_of_issue is not None:
            self.country_of_issue = country_of_issue
        if doc_number is not None:
            self.doc_number = doc_number
        if doc_type is not None:
            self.doc_type = doc_type
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if issue_date is not None:
            self.issue_date = issue_date
        if issuing_authority is not None:
            self.issuing_authority = issuing_authority
        if state_of_issue is not None:
            self.state_of_issue = state_of_issue

    @property
    def country_of_issue(self):
        """Gets the country_of_issue of this Identification.  # noqa: E501


        :return: The country_of_issue of this Identification.  # noqa: E501
        :rtype: str
        """
        return self._country_of_issue

    @country_of_issue.setter
    def country_of_issue(self, country_of_issue):
        """Sets the country_of_issue of this Identification.


        :param country_of_issue: The country_of_issue of this Identification.  # noqa: E501
        :type: str
        """

        self._country_of_issue = country_of_issue

    @property
    def doc_number(self):
        """Gets the doc_number of this Identification.  # noqa: E501


        :return: The doc_number of this Identification.  # noqa: E501
        :rtype: str
        """
        return self._doc_number

    @doc_number.setter
    def doc_number(self, doc_number):
        """Sets the doc_number of this Identification.


        :param doc_number: The doc_number of this Identification.  # noqa: E501
        :type: str
        """

        self._doc_number = doc_number

    @property
    def doc_type(self):
        """Gets the doc_type of this Identification.  # noqa: E501


        :return: The doc_type of this Identification.  # noqa: E501
        :rtype: str
        """
        return self._doc_type

    @doc_type.setter
    def doc_type(self, doc_type):
        """Sets the doc_type of this Identification.


        :param doc_type: The doc_type of this Identification.  # noqa: E501
        :type: str
        """

        self._doc_type = doc_type

    @property
    def expiry_date(self):
        """Gets the expiry_date of this Identification.  # noqa: E501


        :return: The expiry_date of this Identification.  # noqa: E501
        :rtype: date
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this Identification.


        :param expiry_date: The expiry_date of this Identification.  # noqa: E501
        :type: date
        """

        self._expiry_date = expiry_date

    @property
    def issue_date(self):
        """Gets the issue_date of this Identification.  # noqa: E501


        :return: The issue_date of this Identification.  # noqa: E501
        :rtype: date
        """
        return self._issue_date

    @issue_date.setter
    def issue_date(self, issue_date):
        """Sets the issue_date of this Identification.


        :param issue_date: The issue_date of this Identification.  # noqa: E501
        :type: date
        """

        self._issue_date = issue_date

    @property
    def issuing_authority(self):
        """Gets the issuing_authority of this Identification.  # noqa: E501


        :return: The issuing_authority of this Identification.  # noqa: E501
        :rtype: str
        """
        return self._issuing_authority

    @issuing_authority.setter
    def issuing_authority(self, issuing_authority):
        """Sets the issuing_authority of this Identification.


        :param issuing_authority: The issuing_authority of this Identification.  # noqa: E501
        :type: str
        """

        self._issuing_authority = issuing_authority

    @property
    def state_of_issue(self):
        """Gets the state_of_issue of this Identification.  # noqa: E501


        :return: The state_of_issue of this Identification.  # noqa: E501
        :rtype: str
        """
        return self._state_of_issue

    @state_of_issue.setter
    def state_of_issue(self, state_of_issue):
        """Sets the state_of_issue of this Identification.


        :param state_of_issue: The state_of_issue of this Identification.  # noqa: E501
        :type: str
        """

        self._state_of_issue = state_of_issue

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Identification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Identification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
