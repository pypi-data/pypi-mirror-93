# coding: utf-8

"""
    Hydrogen Integration API

    The Hydrogen Integration API  # noqa: E501

    OpenAPI spec version: 1.2.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Webhook(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create_date': 'datetime',
        'id': 'str',
        'integration_service': 'list[str]',
        'is_active': 'bool',
        'secondary_id': 'str',
        'secret': 'str',
        'update_date': 'datetime',
        'url': 'str'
    }

    attribute_map = {
        'create_date': 'create_date',
        'id': 'id',
        'integration_service': 'integration_service',
        'is_active': 'is_active',
        'secondary_id': 'secondary_id',
        'secret': 'secret',
        'update_date': 'update_date',
        'url': 'url'
    }

    def __init__(self, create_date=None, id=None, integration_service=None, is_active=None, secondary_id=None, secret=None, update_date=None, url=None):  # noqa: E501
        """Webhook - a model defined in Swagger"""  # noqa: E501

        self._create_date = None
        self._id = None
        self._integration_service = None
        self._is_active = None
        self._secondary_id = None
        self._secret = None
        self._update_date = None
        self._url = None
        self.discriminator = None

        if create_date is not None:
            self.create_date = create_date
        if id is not None:
            self.id = id
        if integration_service is not None:
            self.integration_service = integration_service
        if is_active is not None:
            self.is_active = is_active
        if secondary_id is not None:
            self.secondary_id = secondary_id
        if secret is not None:
            self.secret = secret
        if update_date is not None:
            self.update_date = update_date
        self.url = url

    @property
    def create_date(self):
        """Gets the create_date of this Webhook.  # noqa: E501


        :return: The create_date of this Webhook.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this Webhook.


        :param create_date: The create_date of this Webhook.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def id(self):
        """Gets the id of this Webhook.  # noqa: E501


        :return: The id of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Webhook.


        :param id: The id of this Webhook.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def integration_service(self):
        """Gets the integration_service of this Webhook.  # noqa: E501

        integration_service  # noqa: E501

        :return: The integration_service of this Webhook.  # noqa: E501
        :rtype: list[str]
        """
        return self._integration_service

    @integration_service.setter
    def integration_service(self, integration_service):
        """Sets the integration_service of this Webhook.

        integration_service  # noqa: E501

        :param integration_service: The integration_service of this Webhook.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["kyc", "kyc_status", "async_accounting_customer", "async_accounting_customer_revenue", "async_accounting_invoice", "async_accounting_invoice_payment", "async_aggregation_account", "async_aggregation_account_transaction", "async_aggregation_account_holding"]  # noqa: E501
        if not set(integration_service).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `integration_service` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(integration_service) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._integration_service = integration_service

    @property
    def is_active(self):
        """Gets the is_active of this Webhook.  # noqa: E501

        isActive  # noqa: E501

        :return: The is_active of this Webhook.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Webhook.

        isActive  # noqa: E501

        :param is_active: The is_active of this Webhook.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def secondary_id(self):
        """Gets the secondary_id of this Webhook.  # noqa: E501


        :return: The secondary_id of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._secondary_id

    @secondary_id.setter
    def secondary_id(self, secondary_id):
        """Sets the secondary_id of this Webhook.


        :param secondary_id: The secondary_id of this Webhook.  # noqa: E501
        :type: str
        """

        self._secondary_id = secondary_id

    @property
    def secret(self):
        """Gets the secret of this Webhook.  # noqa: E501


        :return: The secret of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this Webhook.


        :param secret: The secret of this Webhook.  # noqa: E501
        :type: str
        """

        self._secret = secret

    @property
    def update_date(self):
        """Gets the update_date of this Webhook.  # noqa: E501


        :return: The update_date of this Webhook.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this Webhook.


        :param update_date: The update_date of this Webhook.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def url(self):
        """Gets the url of this Webhook.  # noqa: E501

        url  # noqa: E501

        :return: The url of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Webhook.

        url  # noqa: E501

        :param url: The url of this Webhook.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Webhook, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Webhook):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
