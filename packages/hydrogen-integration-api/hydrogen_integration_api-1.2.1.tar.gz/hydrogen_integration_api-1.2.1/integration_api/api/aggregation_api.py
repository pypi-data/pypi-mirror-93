# coding: utf-8

"""
    Hydrogen Integration API

    The Hydrogen Integration API  # noqa: E501

    OpenAPI spec version: 1.2.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from integration_api.api_client import ApiClient


class AggregationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_aggregation_account_using_post(self, aggregation_request_object, **kwargs):  # noqa: E501
        """Create mapping between client,vendor,tenant  # noqa: E501

        Create mapping between client,vendor,tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_aggregation_account_using_post(aggregation_request_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AggregationRequestObject aggregation_request_object: aggregationRequestObject (required)
        :return: AggregationAccountsResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_aggregation_account_using_post_with_http_info(aggregation_request_object, **kwargs)  # noqa: E501
        else:
            (data) = self.create_aggregation_account_using_post_with_http_info(aggregation_request_object, **kwargs)  # noqa: E501
            return data

    def create_aggregation_account_using_post_with_http_info(self, aggregation_request_object, **kwargs):  # noqa: E501
        """Create mapping between client,vendor,tenant  # noqa: E501

        Create mapping between client,vendor,tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_aggregation_account_using_post_with_http_info(aggregation_request_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AggregationRequestObject aggregation_request_object: aggregationRequestObject (required)
        :return: AggregationAccountsResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_request_object']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_aggregation_account_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_request_object' is set
        if ('aggregation_request_object' not in params or
                params['aggregation_request_object'] is None):
            raise ValueError("Missing the required parameter `aggregation_request_object` when calling `create_aggregation_account_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aggregation_request_object' in params:
            body_params = params['aggregation_request_object']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/aggregation/account', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AggregationAccountsResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_property_value_using_post(self, aggregation_request_object, **kwargs):  # noqa: E501
        """Create mapping between client,vendor,tenant for the property  # noqa: E501

        Create mapping between client,vendor,tenant for property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_property_value_using_post(aggregation_request_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AggregationRequestObject aggregation_request_object: aggregationRequestObject (required)
        :return: PropertyValueResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_property_value_using_post_with_http_info(aggregation_request_object, **kwargs)  # noqa: E501
        else:
            (data) = self.create_property_value_using_post_with_http_info(aggregation_request_object, **kwargs)  # noqa: E501
            return data

    def create_property_value_using_post_with_http_info(self, aggregation_request_object, **kwargs):  # noqa: E501
        """Create mapping between client,vendor,tenant for the property  # noqa: E501

        Create mapping between client,vendor,tenant for property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_property_value_using_post_with_http_info(aggregation_request_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AggregationRequestObject aggregation_request_object: aggregationRequestObject (required)
        :return: PropertyValueResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_request_object']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_property_value_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_request_object' is set
        if ('aggregation_request_object' not in params or
                params['aggregation_request_object'] is None):
            raise ValueError("Missing the required parameter `aggregation_request_object` when calling `create_property_value_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aggregation_request_object' in params:
            body_params = params['aggregation_request_object']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/property_value', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PropertyValueResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_aggregation_account_using_delete(self, nucleus_aggregation_account_id, **kwargs):  # noqa: E501
        """De-Link mapping between client,vendor,tenant  # noqa: E501

        De-Link mapping between client,vendor,tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_aggregation_account_using_delete(nucleus_aggregation_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nucleus_aggregation_account_id: nucleus_aggregation_account_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_aggregation_account_using_delete_with_http_info(nucleus_aggregation_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_aggregation_account_using_delete_with_http_info(nucleus_aggregation_account_id, **kwargs)  # noqa: E501
            return data

    def delete_aggregation_account_using_delete_with_http_info(self, nucleus_aggregation_account_id, **kwargs):  # noqa: E501
        """De-Link mapping between client,vendor,tenant  # noqa: E501

        De-Link mapping between client,vendor,tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_aggregation_account_using_delete_with_http_info(nucleus_aggregation_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nucleus_aggregation_account_id: nucleus_aggregation_account_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nucleus_aggregation_account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_aggregation_account_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'nucleus_aggregation_account_id' is set
        if ('nucleus_aggregation_account_id' not in params or
                params['nucleus_aggregation_account_id'] is None):
            raise ValueError("Missing the required parameter `nucleus_aggregation_account_id` when calling `delete_aggregation_account_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'nucleus_aggregation_account_id' in params:
            path_params['nucleus_aggregation_account_id'] = params['nucleus_aggregation_account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/aggregation/account/{nucleus_aggregation_account_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggregation_account_all_using_get(self, aggregation_account_id_list, **kwargs):  # noqa: E501
        """Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client  # noqa: E501

        Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_all_using_get(aggregation_account_id_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] aggregation_account_id_list: aggregation_account_id_list (required)
        :return: list[AggregationAccountResponseVO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregation_account_all_using_get_with_http_info(aggregation_account_id_list, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregation_account_all_using_get_with_http_info(aggregation_account_id_list, **kwargs)  # noqa: E501
            return data

    def get_aggregation_account_all_using_get_with_http_info(self, aggregation_account_id_list, **kwargs):  # noqa: E501
        """Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client  # noqa: E501

        Fetch all aggregation account(s) details with the mapping created in POST endpoint for a client  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_all_using_get_with_http_info(aggregation_account_id_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] aggregation_account_id_list: aggregation_account_id_list (required)
        :return: list[AggregationAccountResponseVO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_account_id_list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregation_account_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_account_id_list' is set
        if ('aggregation_account_id_list' not in params or
                params['aggregation_account_id_list'] is None):
            raise ValueError("Missing the required parameter `aggregation_account_id_list` when calling `get_aggregation_account_all_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'aggregation_account_id_list' in params:
            query_params.append(('aggregation_account_id_list', params['aggregation_account_id_list']))  # noqa: E501
            collection_formats['aggregation_account_id_list'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/aggregation/account', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AggregationAccountResponseVO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggregation_account_balance_all_using_get(self, aggregation_account_id_list, **kwargs):  # noqa: E501
        """Fetch all aggregation account balance details with for the given aggregation accounts   # noqa: E501

        Fetch all aggregation account balance details with for the given aggregation accounts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_balance_all_using_get(aggregation_account_id_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] aggregation_account_id_list: aggregation_account_id_list (required)
        :return: list[AggregationAccountBalanceResponseVO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregation_account_balance_all_using_get_with_http_info(aggregation_account_id_list, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregation_account_balance_all_using_get_with_http_info(aggregation_account_id_list, **kwargs)  # noqa: E501
            return data

    def get_aggregation_account_balance_all_using_get_with_http_info(self, aggregation_account_id_list, **kwargs):  # noqa: E501
        """Fetch all aggregation account balance details with for the given aggregation accounts   # noqa: E501

        Fetch all aggregation account balance details with for the given aggregation accounts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_balance_all_using_get_with_http_info(aggregation_account_id_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] aggregation_account_id_list: aggregation_account_id_list (required)
        :return: list[AggregationAccountBalanceResponseVO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_account_id_list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregation_account_balance_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_account_id_list' is set
        if ('aggregation_account_id_list' not in params or
                params['aggregation_account_id_list'] is None):
            raise ValueError("Missing the required parameter `aggregation_account_id_list` when calling `get_aggregation_account_balance_all_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'aggregation_account_id_list' in params:
            query_params.append(('aggregation_account_id_list', params['aggregation_account_id_list']))  # noqa: E501
            collection_formats['aggregation_account_id_list'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/aggregation/balance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AggregationAccountBalanceResponseVO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggregation_account_balance_using_get(self, nucleus_aggregation_account_id, **kwargs):  # noqa: E501
        """Fetch aggregation account balance details with the mapping created in POST endpoint  # noqa: E501

        Fetch aggregation account balance details with the mapping created in POST endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_balance_using_get(nucleus_aggregation_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nucleus_aggregation_account_id: nucleus_aggregation_account_id (required)
        :return: AggregationAccountBalanceResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregation_account_balance_using_get_with_http_info(nucleus_aggregation_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregation_account_balance_using_get_with_http_info(nucleus_aggregation_account_id, **kwargs)  # noqa: E501
            return data

    def get_aggregation_account_balance_using_get_with_http_info(self, nucleus_aggregation_account_id, **kwargs):  # noqa: E501
        """Fetch aggregation account balance details with the mapping created in POST endpoint  # noqa: E501

        Fetch aggregation account balance details with the mapping created in POST endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_balance_using_get_with_http_info(nucleus_aggregation_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nucleus_aggregation_account_id: nucleus_aggregation_account_id (required)
        :return: AggregationAccountBalanceResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nucleus_aggregation_account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregation_account_balance_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'nucleus_aggregation_account_id' is set
        if ('nucleus_aggregation_account_id' not in params or
                params['nucleus_aggregation_account_id'] is None):
            raise ValueError("Missing the required parameter `nucleus_aggregation_account_id` when calling `get_aggregation_account_balance_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'nucleus_aggregation_account_id' in params:
            path_params['nucleus_aggregation_account_id'] = params['nucleus_aggregation_account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/aggregation/balance/{nucleus_aggregation_account_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AggregationAccountBalanceResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggregation_account_holding_all_using_get(self, aggregation_account_id_list, **kwargs):  # noqa: E501
        """Fetch all aggregation account(s) holding details with the mapping created in POST endpoint  # noqa: E501

        Fetch all aggregation account(s) holding details with the mapping created in POST endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_holding_all_using_get(aggregation_account_id_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] aggregation_account_id_list: aggregation_account_id_list (required)
        :return: list[AggregationAccountHoldingResponseVO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregation_account_holding_all_using_get_with_http_info(aggregation_account_id_list, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregation_account_holding_all_using_get_with_http_info(aggregation_account_id_list, **kwargs)  # noqa: E501
            return data

    def get_aggregation_account_holding_all_using_get_with_http_info(self, aggregation_account_id_list, **kwargs):  # noqa: E501
        """Fetch all aggregation account(s) holding details with the mapping created in POST endpoint  # noqa: E501

        Fetch all aggregation account(s) holding details with the mapping created in POST endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_holding_all_using_get_with_http_info(aggregation_account_id_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] aggregation_account_id_list: aggregation_account_id_list (required)
        :return: list[AggregationAccountHoldingResponseVO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_account_id_list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregation_account_holding_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_account_id_list' is set
        if ('aggregation_account_id_list' not in params or
                params['aggregation_account_id_list'] is None):
            raise ValueError("Missing the required parameter `aggregation_account_id_list` when calling `get_aggregation_account_holding_all_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'aggregation_account_id_list' in params:
            query_params.append(('aggregation_account_id_list', params['aggregation_account_id_list']))  # noqa: E501
            collection_formats['aggregation_account_id_list'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/aggregation/holding', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AggregationAccountHoldingResponseVO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggregation_account_holding_using_get(self, nucleus_aggregation_account_id, **kwargs):  # noqa: E501
        """Fetch aggregation account holding details with the mapping created in POST endpoint  # noqa: E501

        Fetch aggregation account holding details with the mapping created in POST endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_holding_using_get(nucleus_aggregation_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nucleus_aggregation_account_id: nucleus_aggregation_account_id (required)
        :return: AggregationAccountHoldingResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregation_account_holding_using_get_with_http_info(nucleus_aggregation_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregation_account_holding_using_get_with_http_info(nucleus_aggregation_account_id, **kwargs)  # noqa: E501
            return data

    def get_aggregation_account_holding_using_get_with_http_info(self, nucleus_aggregation_account_id, **kwargs):  # noqa: E501
        """Fetch aggregation account holding details with the mapping created in POST endpoint  # noqa: E501

        Fetch aggregation account holding details with the mapping created in POST endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_holding_using_get_with_http_info(nucleus_aggregation_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nucleus_aggregation_account_id: nucleus_aggregation_account_id (required)
        :return: AggregationAccountHoldingResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nucleus_aggregation_account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregation_account_holding_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'nucleus_aggregation_account_id' is set
        if ('nucleus_aggregation_account_id' not in params or
                params['nucleus_aggregation_account_id'] is None):
            raise ValueError("Missing the required parameter `nucleus_aggregation_account_id` when calling `get_aggregation_account_holding_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'nucleus_aggregation_account_id' in params:
            path_params['nucleus_aggregation_account_id'] = params['nucleus_aggregation_account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/aggregation/holding/{nucleus_aggregation_account_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AggregationAccountHoldingResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggregation_account_transaction_all_using_get(self, aggregation_account_id_list, **kwargs):  # noqa: E501
        """Fetch all aggregation account balance details with for the given aggregation accounts   # noqa: E501

        Fetch all aggregation account balance details with for the given aggregation accounts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_transaction_all_using_get(aggregation_account_id_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] aggregation_account_id_list: aggregation_account_id_list (required)
        :return: list[AggregationAccountTransactionResponseVO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregation_account_transaction_all_using_get_with_http_info(aggregation_account_id_list, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregation_account_transaction_all_using_get_with_http_info(aggregation_account_id_list, **kwargs)  # noqa: E501
            return data

    def get_aggregation_account_transaction_all_using_get_with_http_info(self, aggregation_account_id_list, **kwargs):  # noqa: E501
        """Fetch all aggregation account balance details with for the given aggregation accounts   # noqa: E501

        Fetch all aggregation account balance details with for the given aggregation accounts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_transaction_all_using_get_with_http_info(aggregation_account_id_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] aggregation_account_id_list: aggregation_account_id_list (required)
        :return: list[AggregationAccountTransactionResponseVO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_account_id_list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregation_account_transaction_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_account_id_list' is set
        if ('aggregation_account_id_list' not in params or
                params['aggregation_account_id_list'] is None):
            raise ValueError("Missing the required parameter `aggregation_account_id_list` when calling `get_aggregation_account_transaction_all_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'aggregation_account_id_list' in params:
            query_params.append(('aggregation_account_id_list', params['aggregation_account_id_list']))  # noqa: E501
            collection_formats['aggregation_account_id_list'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/aggregation/transaction', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AggregationAccountTransactionResponseVO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggregation_account_transaction_using_get(self, nucleus_aggregation_account_id, **kwargs):  # noqa: E501
        """Fetch aggregation account transaction details with the mapping created in POST endpoint  # noqa: E501

        Fetch aggregation account transaction details with the mapping created in POST endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_transaction_using_get(nucleus_aggregation_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nucleus_aggregation_account_id: nucleus_aggregation_account_id (required)
        :return: AggregationAccountTransactionResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregation_account_transaction_using_get_with_http_info(nucleus_aggregation_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregation_account_transaction_using_get_with_http_info(nucleus_aggregation_account_id, **kwargs)  # noqa: E501
            return data

    def get_aggregation_account_transaction_using_get_with_http_info(self, nucleus_aggregation_account_id, **kwargs):  # noqa: E501
        """Fetch aggregation account transaction details with the mapping created in POST endpoint  # noqa: E501

        Fetch aggregation account transaction details with the mapping created in POST endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_transaction_using_get_with_http_info(nucleus_aggregation_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nucleus_aggregation_account_id: nucleus_aggregation_account_id (required)
        :return: AggregationAccountTransactionResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nucleus_aggregation_account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregation_account_transaction_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'nucleus_aggregation_account_id' is set
        if ('nucleus_aggregation_account_id' not in params or
                params['nucleus_aggregation_account_id'] is None):
            raise ValueError("Missing the required parameter `nucleus_aggregation_account_id` when calling `get_aggregation_account_transaction_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'nucleus_aggregation_account_id' in params:
            path_params['nucleus_aggregation_account_id'] = params['nucleus_aggregation_account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/aggregation/transaction/{nucleus_aggregation_account_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AggregationAccountTransactionResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggregation_account_using_get(self, nucleus_aggregation_account_id, **kwargs):  # noqa: E501
        """Fetch aggregation account details with the mapping created in POST endpoint  # noqa: E501

        Fetch aggregation account details with the mapping created in POST endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_using_get(nucleus_aggregation_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nucleus_aggregation_account_id: nucleus_aggregation_account_id (required)
        :return: AggregationAccountResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregation_account_using_get_with_http_info(nucleus_aggregation_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregation_account_using_get_with_http_info(nucleus_aggregation_account_id, **kwargs)  # noqa: E501
            return data

    def get_aggregation_account_using_get_with_http_info(self, nucleus_aggregation_account_id, **kwargs):  # noqa: E501
        """Fetch aggregation account details with the mapping created in POST endpoint  # noqa: E501

        Fetch aggregation account details with the mapping created in POST endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_using_get_with_http_info(nucleus_aggregation_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nucleus_aggregation_account_id: nucleus_aggregation_account_id (required)
        :return: AggregationAccountResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nucleus_aggregation_account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregation_account_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'nucleus_aggregation_account_id' is set
        if ('nucleus_aggregation_account_id' not in params or
                params['nucleus_aggregation_account_id'] is None):
            raise ValueError("Missing the required parameter `nucleus_aggregation_account_id` when calling `get_aggregation_account_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'nucleus_aggregation_account_id' in params:
            path_params['nucleus_aggregation_account_id'] = params['nucleus_aggregation_account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/aggregation/account/{nucleus_aggregation_account_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AggregationAccountResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_property_value(self, nucleus_aggregation_account_id, nucleus_client_id, **kwargs):  # noqa: E501
        """Get Value of the given property  # noqa: E501

        Get Value of the given property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_property_value(nucleus_aggregation_account_id, nucleus_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nucleus_aggregation_account_id: nucleus_aggregation_account_id (required)
        :param str nucleus_client_id: nucleus_client_id (required)
        :param str product: product
        :return: PropertyValueResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_property_value_with_http_info(nucleus_aggregation_account_id, nucleus_client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_property_value_with_http_info(nucleus_aggregation_account_id, nucleus_client_id, **kwargs)  # noqa: E501
            return data

    def get_property_value_with_http_info(self, nucleus_aggregation_account_id, nucleus_client_id, **kwargs):  # noqa: E501
        """Get Value of the given property  # noqa: E501

        Get Value of the given property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_property_value_with_http_info(nucleus_aggregation_account_id, nucleus_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str nucleus_aggregation_account_id: nucleus_aggregation_account_id (required)
        :param str nucleus_client_id: nucleus_client_id (required)
        :param str product: product
        :return: PropertyValueResponseVO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nucleus_aggregation_account_id', 'nucleus_client_id', 'product']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_property_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'nucleus_aggregation_account_id' is set
        if ('nucleus_aggregation_account_id' not in params or
                params['nucleus_aggregation_account_id'] is None):
            raise ValueError("Missing the required parameter `nucleus_aggregation_account_id` when calling `get_property_value`")  # noqa: E501
        # verify the required parameter 'nucleus_client_id' is set
        if ('nucleus_client_id' not in params or
                params['nucleus_client_id'] is None):
            raise ValueError("Missing the required parameter `nucleus_client_id` when calling `get_property_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'nucleus_aggregation_account_id' in params:
            query_params.append(('nucleus_aggregation_account_id', params['nucleus_aggregation_account_id']))  # noqa: E501
        if 'nucleus_client_id' in params:
            query_params.append(('nucleus_client_id', params['nucleus_client_id']))  # noqa: E501
        if 'product' in params:
            query_params.append(('product', params['product']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/property_value', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PropertyValueResponseVO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
